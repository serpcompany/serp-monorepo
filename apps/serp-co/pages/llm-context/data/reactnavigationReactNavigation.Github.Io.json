[
  {
    "owner": "react-navigation",
    "repo": "react-navigation.github.io",
    "content": "TITLE: Setting Up NavigationContainer in App.js\nDESCRIPTION: Complete setup of the NavigationContainer component that wraps the entire application. This is a required wrapper for all React Navigation implementations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer>{/* Rest of your app code */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Screen onto the Stack - React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to use navigation.push to add a new screen to the stack and navigate to it, with optional route parameters provided as the second argument. This is the standard way to navigate forward in a stack navigator using React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nnavigation.push('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Dynamic Authentication Flow with Conditional Rendering (React Navigation)\nDESCRIPTION: This code snippet demonstrates how to implement an authentication flow using conditional rendering within the `NavigationContainer`. The `isSignedIn` variable determines which screen (`Home` or `SignIn`) is rendered.  The `Stack.Navigator` component dynamically renders the appropriate screen based on the `isSignedIn` value. Requires `@react-navigation/native` and `@react-navigation/native-stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const isSignedIn = true;\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        // codeblock-focus-start\n        {isSignedIn ? (\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        ) : (\n          <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n        )}\n        // codeblock-focus-end\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nfunction SignInScreen() {\n  return <View />;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Directly to Nested Screen in React Navigation (JavaScript)\nDESCRIPTION: Shows how to use `navigation.navigate()` with a second argument (a params object containing a `screen` key) to specify the target screen (`Messages`) within a nested navigator (`More`). This allows for deep linking into nested navigation structures. Requires the `navigation` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js\nnavigation.navigate('More', { screen: 'Messages' });\n```\n```\n\n----------------------------------------\n\nTITLE: Using useRoutePath Hook with React Navigation in JavaScript\nDESCRIPTION: This code demonstrates how to utilize the useRoutePath hook from the @react-navigation/native package in a React Native functional component to obtain the current navigation route's path. The path is then combined with the app's base URL using the URL constructor to produce a fully qualified, shareable link. Dependencies required include React Navigation (@react-navigation/native) and React Native components. The main parameter is the hook output (path), and the expected output is a rendered Text component showing the full shareable URL. This pattern is suitable for applications implementing deep linking or requiring dynamic sharing of route locations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-route-path.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useRoutePath } from '@react-navigation/native';\n\nfunction MyComponent() {\n  const path = useRoutePath();\n\n  // Construct a URL using the path and app's base URL\n  const url = new URL(path, 'https://example.com');\n\n  return <Text>Shareable URL: {url.href}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RootNavigation Module with Navigation Functions\nDESCRIPTION: Implementation of a RootNavigation module that exposes the navigation ref and utility functions. This creates a navigation container ref and exports a navigate function that can be used from any JavaScript module.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// RootNavigation.js\n\nimport { createNavigationContainerRef } from '@react-navigation/native';\n\nexport const navigationRef = createNavigationContainerRef();\n\nexport function navigate(name, params) {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate(name, params);\n  }\n}\n\n// add other navigation functions that you need and export them\n```\n\n----------------------------------------\n\nTITLE: Apply Param List Type to Navigator - TSX\nDESCRIPTION: Passes the defined `RootStackParamList` as a generic to the `createStackNavigator` function to enable type checking for route names and params. Also demonstrates applying the type when using the `<RootStack.Navigator>` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst RootStack = createStackNavigator<RootStackParamList>();\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RootStack.Navigator initialRouteName=\"Home\">\n  <RootStack.Screen name=\"Home\" component={Home} />\n  <RootStack.Screen\n    name=\"Profile\"\n    component={Profile}\n    initialParams={{ userId: user.id }}\n  />\n  <RootStack.Screen name=\"Feed\" component={Feed} />\n</RootStack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Linking - React NavigationContainer - JavaScript\nDESCRIPTION: Shows how to provide a dynamic linking configuration to the NavigationContainer. The linking object accepts prefixes for URL patterns and a config object for mapping route names to paths. Useful for custom navigation flows or advanced linking scenarios. Dependencies include '@react-navigation/native'. The App component wraps navigation logic; the linking setup controls how URLs map to navigation states.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\n// highlight-start\nconst linking = {\n  prefixes: [\n    /* your linking prefixes */\n  ],\n  config: {\n    /* configuration for matching screens with paths */\n  },\n};\n// highlight-end\n\nfunction App() {\n  return (\n    <NavigationContainer\n      // highlight-next-line\n      linking={linking}\n      fallback={<Text>Loading...</Text>}\n    >\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Navigator Configuration with Fragments\nDESCRIPTION: This code snippet demonstrates dynamic screen configuration using React Fragments (`<>`) to define different screen sets based on authentication status. It utilizes a ternary operator based on the `isSignedIn` variable to render either the 'SignIn', 'SignUp', and 'ResetPassword' screens (if the user is not signed in), or the 'Home' and 'Profile' screens. Requires React and `react-navigation` library. Assumes the existence of the `SignInScreen`, `SignUpScreen`, `ResetPassword`, `HomeScreen`, and `ProfileScreen` components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nisSignedIn ? (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    <Stack.Screen name=\"ResetPassword\" component={ResetPassword} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Navigation with Static Configuration in React Navigation\nDESCRIPTION: This code demonstrates how to set up a stack navigator with modal screens using React Navigation's static configuration. It defines a HomeScreen, ModalScreen, and DetailsScreen, and configures a RootStack with separate groups for regular screens and modal screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>\n      <Button onPress={() => navigation.navigate('MyModal')}>Open Modal</Button>\n    </View>\n  );\n}\n\nfunction ModalScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n      <Button onPress={() => navigation.goBack()}>Dismiss</Button>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nconst HomeStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerShown: false,\n      },\n    },\n    Details: {\n      screen: DetailsScreen,\n      options: {\n        headerShown: false,\n      },\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  groups: {\n    Home: {\n      screens: {\n        App: {\n          screen: HomeStack,\n          options: { title: 'My App' },\n        },\n      },\n    },\n    Modal: {\n      screenOptions: {\n        presentation: 'modal',\n      },\n      screens: {\n        MyModal: ModalScreen,\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Deeply Nested Screen Using Params - React Navigation JavaScript\nDESCRIPTION: This snippet demonstrates how to navigate to a deeply nested screen within multiple layers of navigators in React Navigation. By recursively providing nested screen and params objects as the second argument to navigation.navigate, you can specify the exact route path, such as Home > Settings > Sound > Media. No additional dependencies beyond React Navigation are required. Inputs are the target route names and params objects, and the API works for various levels of nesting.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.navigate('Home', {\\n  screen: 'Settings',\\n  params: {\\n    screen: 'Sound',\\n    params: {\\n      screen: 'Media',\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Current Route with StackActions in React Native (JavaScript)\nDESCRIPTION: Imports `StackActions` from `@react-navigation/native` and dispatches the `replace` action. This replaces the current route in the stack with the 'Profile' route, passing 'jane' as the user parameter. This is useful for scenarios like login flows where you don't want the user to go back to the login screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  StackActions.replace('Profile', {\n    user: 'jane',\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Reflecting Nested Screens in Linking Config (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows a configuration object reflecting a nested navigator structure for linking, with 'Chat' as a screen inside 'Home', and 'Profile' at the root. The config structure must match the navigation hierarchy. The pattern is necessary for accurate mapping from URLs to deeply nested navigation states, ensuring only correct segments map to intended screens for deep linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    Profile: 'user',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Root Navigation State with resetRoot (React Navigation, JavaScript)\nDESCRIPTION: Resets the root state of the navigator using the resetRoot method on the navigation ref, typically employed to reinitialize navigation to a single route such as after a user logs out. It accepts a state object, here resetting to a single 'Profile' route. Only affects the root navigator, not nested or focused navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnavigationRef.resetRoot({\\n  index: 0,\\n  routes: [{ name: 'Profile' }],\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Navigation with Dynamic Configuration in React Navigation\nDESCRIPTION: This code demonstrates how to set up a stack navigator with modal screens using React Navigation's dynamic configuration. It defines screen components and creates a RootStack with grouped screens, applying the modal presentation to a specific group.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/modal.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>\n      <Button onPress={() => navigation.navigate('MyModal')}>Open Modal</Button>\n    </View>\n  );\n}\n\nfunction ModalScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n      <Button onPress={() => navigation.goBack()}>Dismiss</Button>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nconst RootStack = createStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator>\n        <RootStack.Group>\n          <RootStack.Screen name=\"Home\" component={HomeScreen} />\n          <RootStack.Screen name=\"Details\" component={DetailsScreen} />\n        </RootStack.Group>\n        // highlight-start\n        <RootStack.Group screenOptions={{ presentation: 'modal' }}>\n          <RootStack.Screen name=\"MyModal\" component={ModalScreen} />\n        </RootStack.Group>\n        // highlight-end\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-In Screen Component in React Navigation\nDESCRIPTION: Implements a basic sign-in screen with username and password inputs that uses the authentication context to trigger sign-in. This component demonstrates how to consume the authentication context in child components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/auth-flow.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button title=\"Sign in\" onPress={() => signIn({ username, password })} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing and Reading Route Parameters in React Navigation with JavaScript\nDESCRIPTION: Demonstrates passing parameters (`itemId`, `otherParam`) using `navigation.navigate` in `HomeScreen` and reading them via `route.params` in `DetailsScreen`. Also shows pushing a new route (`navigation.push`) and basic navigation actions. Requires `react-navigation` and React Native components (`View`, `Text`, `Button`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => {\n          /* 1. Navigate to the Details route with params */\n          navigation.navigate('Details', {\n            itemId: 86,\n            otherParam: 'anything you want here',\n          });\n        }}\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen({ route, navigation }) {\n  /* 2. Get the param */\n  const { itemId, otherParam } = route.params;\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Text>itemId: {JSON.stringify(itemId)}</Text>\n      <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() =>\n          navigation.push('Details', {\n            itemId: Math.floor(Math.random() * 100),\n          })\n        }\n      />\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Navigator Configuration with Screens\nDESCRIPTION: This code snippet demonstrates a dynamic configuration of a React Navigation stack navigator. It uses a conditional (`isSignedIn`) to render either a 'SignIn' screen (if the user is signed in, surprisingly) or a 'Home' screen.  Requires `react-navigation` library and assumes the existence of `SimpleSignInScreen` and `HomeScreen` components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const isSignedIn = true;\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        {isSignedIn ? (\n          <Stack.Screen\n            name=\"SignIn\"\n            component={SimpleSignInScreen}\n            options={{\n              title: 'Sign in',\n            }}\n            initialParams={{ setUserToken }}\n          />\n        ) : (\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching and Using a Ref with NavigationContainer (React Navigation, JavaScript)\nDESCRIPTION: This code shows how to create and use a navigation ref with NavigationContainer, allowing imperative navigation actions from outside standard screen components (e.g., from Redux middleware or global event handlers). It utilizes useNavigationContainerRef from '@react-navigation/native' to create the ref, then passes it to the NavigationContainer. A Button uses the ref to navigate to the 'Home' route. React Native core and '@react-navigation/native' are required. Since refs can be initially null, it's recommended to handle initialization via the onReady callback.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {\\n  NavigationContainer,\\n  useNavigationContainerRef,\\n} from '@react-navigation/native';\\n\\nfunction App() {\\n  const navigationRef = useNavigationContainerRef(); // You can also use a regular ref with `React.useRef()`\\n\\n  return (\\n    <View style={{ flex: 1 }}>\\n      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>\\n      <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocusEffect Hook in React Navigation (Static Configuration)\nDESCRIPTION: Demonstrates how to use the useFocusEffect hook in a React Navigation app with static configuration. The hook is used in a ProfileScreen component to perform actions when the screen is focused and unfocused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-focus-effect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction ProfileScreen() {\n  useFocusEffect(\n    React.useCallback(() => {\n      // Do something when the screen is focused\n      return () => {\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <View />;\n}\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Tab);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation State for Custom Param Parsing (React Navigation, JavaScript)\nDESCRIPTION: This example shows a navigation state resulting from a custom-parsed deep link path. Navigating to '/user/@jane/settings' sets the 'Profile' route with id 'jane' and section 'settings', utilizing custom parsing logic in config. The format matches the structure expected by React Navigation to rehydrate navigation state from deep links.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Profile',\n      params: { id: 'jane', section: 'settings' },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State in React Navigation (Dynamic Config)\nDESCRIPTION: Shows how to use the CommonActions.reset() method to reset the navigation state in a React Navigation app with dynamic configuration. The example resets the state to include a Profile screen and a Home screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(\n  CommonActions.reset({\n    index: 1,\n    routes: [\n      {\n        name: 'Profile',\n        params: { user: 'jane', key: route.params.key },\n      },\n      { name: 'Home' },\n    ],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Stack Navigator with Dynamic Configuration (JavaScript)\nDESCRIPTION: Shows how to implement a Native Stack Navigator using the dynamic configuration approach. It utilizes `createNativeStackNavigator()` to create a stack object, then defines screens (`HomeScreen`, `ProfileScreen`) as components within `Stack.Navigator` inside a `NavigationContainer`. This is the more common approach for defining navigators dynamically within the component tree.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Screens Based on Sign-In Status in React Navigation\nDESCRIPTION: This snippet demonstrates conditionally rendering different sets of screens within a React Navigation Stack Navigator based on the boolean `isSignedIn` variable. If `isSignedIn` is true, authenticated screens like Home, Profile, and Settings are rendered using a React Fragment. Otherwise, authentication screens like SignIn and SignUp are rendered. This implements the 'protected routes' pattern where screens are only accessible based on the authentication status.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/auth-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nisSignedIn ? (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: ParamList Type Generation - TypeScript\nDESCRIPTION: Generates the `ParamList` type for the root navigator and specifies it as the default type for the `RootParamList` type. This is required for type checking the `useNavigation` hook and ensuring type safety across the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StaticParamList } from '@react-navigation/native';\n\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: FeedScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeTabs,\n  },\n});\n\n// highlight-next-line\ntype RootStackParamList = StaticParamList<typeof RootStack>;\n\n// highlight-start\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Dynamic Conditional Navigation with Group Navigation Key (React Navigation)\nDESCRIPTION: This snippet expands on the previous dynamic approach by applying the `navigationKey` to a `Stack.Group` containing multiple shared screens (`Help` and `About`). This method efficiently manages multiple shared screens by ensuring that all screens within the group are unmounted and remounted when the sign-in state changes, thus maintaining proper navigation flow and preventing users from remaining on shared screens after authentication status changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  {isSignedIn ? (\n    <>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </>\n  ) : (\n    <>\n      <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n      <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    </>\n  )}\n  <Stack.Group navigationKey={isSignedIn ? 'user' : 'guest'}>\n    <Stack.Screen name=\"Help\" component={HelpScreen} />\n    <Stack.Screen name=\"About\" component={AboutScreen} />\n  </Stack.Group>\n</>\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters Between Screens - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to navigate between screens in a React Native app using React Navigation while passing route parameters. It uses functional components and hooks such as useNavigation, and shows reading params from the route prop, passing new params via navigation.navigate and navigation.push, and configuring a simple stack navigator. Dependencies include react-native, @react-navigation/native, and @react-navigation/native-stack. The inputs are navigation actions; outputs are the rendered params on the destination screen and navigation transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\n// codeblock-focus-start\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        onPress={() => {\n          /* 1. Navigate to the Details route with params */\n          // highlight-start\n          navigation.navigate('Details', {\n            itemId: 86,\n            otherParam: 'anything you want here',\n          });\n          // highlight-end\n        }}\n      >\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\nfunction DetailsScreen({ route }) {\n  const navigation = useNavigation();\n\n  /* 2. Get the param */\n  // highlight-next-line\n  const { itemId, otherParam } = route.params;\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Text>itemId: {JSON.stringify(itemId)}</Text>\n      <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n      <Button\n        onPress={\n          () =>\n            // highlight-start\n            navigation.push('Details', {\n              itemId: Math.floor(Math.random() * 100),\n            })\n          // highlight-end\n        }\n      >\n        Go to Details... again\n      </Button>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Header Options at Runtime with setOptions\nDESCRIPTION: This example demonstrates how to update header options from within a screen component using the navigation.setOptions method. A button allows the user to change the header title to 'Updated!' when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        onPress={() =>\n          navigation.setOptions({ title: 'Updated!' })\n        }\n      >\n        Update the title\n      </Button>\n    </View>\n  );\n}\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My home',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking Property in Stack Navigator (Static, React Navigation, JavaScript)\nDESCRIPTION: This example configures a Stack Navigator to handle custom params with path segments for the 'Profile' screen. The linking property specifies custom parse and stringify logic for the 'id' param. ‚Äòparse‚Äô strips leading '@' from the id, and 'stringify' restores it. The code assumes use of React Navigation's stack navigator and ProfileScreen. This enables advanced param parsing/stringification when the path format differs from default parsing, supporting deep link URLs like '/user/@jane/settings'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      // highlight-start\n      linking: {\n        path: 'user/:id/:section',\n        parse: {\n          id: (id) => id.replace(/^@/, ''),\n        },\n        stringify: {\n          id: (id) => `@${id}`,\n        },\n      },\n      // highlight-end\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Authentication Flow with Loading State in React Navigation\nDESCRIPTION: Shows a complete authentication flow implementation with loading state handling, conditional screen rendering, and custom animation options for sign-out.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (state.isLoading) {\n  // We haven't finished checking for the token yet\n  return <SplashScreen />;\n}\n\nreturn (\n  <Stack.Navigator>\n    {state.userToken == null ? (\n      // No token found, user isn't signed in\n      <Stack.Screen\n        name=\"SignIn\"\n        component={SignInScreen}\n        options={{\n          title: 'Sign in',\n          // When logging out, a pop animation feels intuitive\n          // You can remove this if you want the default 'push' animation\n          animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n        }}\n      />\n    ) : (\n      // User is signed in\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    )}\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Static Navigation AuthContext Implementation\nDESCRIPTION: This example demonstrates a React Native application with static navigation, implementing authentication using AuthContext and React.useReducer. It uses expo-secure-store for persisting the user token. The code initializes the authentication context, defines a reducer to manage the authentication state (loading, sign-in, sign-out), and provides sign-in, sign-out, and sign-up methods.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// codeblock-focus-start\nimport * as React from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\n// codeblock-focus-end\nimport { Text, TextInput, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nconst AuthContext = React.createContext();\n\nconst SignInContext = React.createContext();\n\nfunction useIsSignedIn() {\n  const isSignedIn = React.useContext(SignInContext);\n  return isSignedIn;\n}\n\nfunction useIsSignedOut() {\n  return !useIsSignedIn();\n}\n\nfunction SplashScreen() {\n  return (\n    <View>\n      <Text>Loading...</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen() {\n  const { signOut } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <Text>Signed in!</Text>\n      <Button onPress={signOut}>Sign out</Button>\n    </View>\n  );\n}\n\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button onPress={() => signIn({ username, password })}>Sign in</Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nexport default function App() {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        // Restore token stored in `SecureStore` or any other encrypted storage\n        userToken = await SecureStore.getItemAsync('userToken');\n      } catch (e) {\n        // Restoring token failed\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  if (state.isLoading) {\n    // We haven't finished checking for the token yet\n    return <SplashScreen />;\n  }\n\n  const isSignedIn = state.userToken != null;\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <SignInContext.Provider value={isSignedIn}>\n        <Navigation />\n      </SignInContext.Provider>\n    </AuthContext.Provider>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      if: useIsSignedIn,\n      screen: HomeScreen,\n    },\n    SignIn: {\n      if: useIsSignedOut,\n      screen: SignInScreen,\n      options: {\n        title: 'Sign in',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Parent Navigator Prop using ID (Recommended)\nDESCRIPTION: Demonstrates the recommended way to access a specific parent navigator's navigation prop using `navigation.getParent('LeftDrawer')`. By providing the unique `id` ('LeftDrawer') assigned to the target parent navigator, this method directly retrieves its navigation prop, irrespective of the nesting depth. The result should always be checked for `undefined` in case no matching parent is found.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Do this\nconst drawerNavigation = navigation.getParent('LeftDrawer');\n\n// ...\n\ndrawerNavigation?.openDrawer();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Param Parsing/Stringifying in Linking Config (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows a linking config with custom path and param transform functions for the 'Profile' route. The 'parse' function removes '@', the 'stringify' function adds it. The dependencies are proper navigator setup and React Navigation linking configuration. This code enables flexible incoming URL structure mapping to navigation params and allows transforming values for user-friendly URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Profile: {\n      // highlight-start\n      path: 'user/:id/:section',\n      parse: {\n        id: (id) => id.replace(/^@/, ''),\n      },\n      stringify: {\n        id: (id) => `@${id}`,\n      },\n      // highlight-end\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Route with React Navigation CommonActions (JavaScript)\nDESCRIPTION: This snippet demonstrates how to dispatch a navigate action using React Navigation's CommonActions in JavaScript. It navigates to a registered route (e.g., 'Profile') and passes route parameters (such as user information). Dependencies include '@react-navigation/native' and a React Navigation context that provides the 'navigation' object. The key input is the action payload specifying the destination route's name and params; the output is a navigation state change to the target screen. Only 'name', 'key', or both must be present in the arguments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.navigate({\n    name: 'Profile',\n    params: {\n      user: 'jane',\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Navigation from Any JavaScript Module - React Navigation JavaScript\nDESCRIPTION: Demonstrates how to import the RootNavigation utility and invoke the exported navigation function to change screens from anywhere in your JavaScript code. This allows external non-component logic, such as Redux middleware, to perform navigation based on app logic or events. In this usage, 'navigate' is called with the target screen name and a params object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// any js module\nimport * as RootNavigation from './path/to/RootNavigation.js';\n\n// ...\n\nRootNavigation.navigate('ChatScreen', { userName: 'Lucy' });\n```\n\n----------------------------------------\n\nTITLE: Initializing and Handling Navigation with Dynamic Configuration in React Navigation\nDESCRIPTION: This snippet illustrates how to initialize and handle navigation using a dynamic configuration in React Navigation. It includes the creation of a navigation container ref, a custom navigate function for checking navigation readiness, and the setup of a dynamic navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  NavigationContainer,\n  createNavigationContainerRef,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nconst Stack = createNativeStackNavigator();\nconst navigationRef = createNavigationContainerRef();\n\nfunction navigate(name, params) {\n  if (navigationRef.isReady()) {\n    // Perform navigation if the react navigation is ready to handle actions\n    navigationRef.navigate(name, params);\n  } else {\n    // You can decide what to do if react navigation is not ready\n    // You can ignore this, or add these actions to a queue you can call later\n  }\n}\n\nfunction Home() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home</Text>\n      <Button onPress={() => navigate('Profile')}>Go to Profile</Button>\n    </View>\n  );\n}\n\nfunction Profile() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer ref={navigationRef}>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeRemove Navigation Event Handler\nDESCRIPTION: Example showing how to prevent navigation and show confirmation dialog when user has unsaved changes using the beforeRemove event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(\n  () =>\n    navigation.addListener('beforeRemove', (e) => {\n      if (!hasUnsavedChanges) {\n        return;\n      }\n\n      // Prevent default behavior of leaving the screen\n      e.preventDefault();\n\n      // Prompt the user before leaving the screen\n      Alert.alert(\n        'Discard changes?',\n        'You have unsaved changes. Are you sure to discard them and leave the screen?',\n        [\n          {\n            text: \"Don't leave\",\n            style: 'cancel',\n            onPress: () => {\n              // Do nothing\n            },\n          },\n          {\n            text: 'Discard',\n            style: 'destructive',\n            onPress: () => navigation.dispatch(e.data.action),\n          },\n        ]\n      );\n    }),\n  [navigation, hasUnsavedChanges]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Linking - React Navigation - JavaScript\nDESCRIPTION: Demonstrates how to statically configure the linking prop for the Navigation component using React Navigation 6. The linking object enables automatic path generation for all screens, and prefixes enable handling of various URL schemes or hosts. Requires '@react-navigation/native', React Navigation setup, and linking prefixes configured per platform. Expects incoming URLs to be resolved to screens, with an optional fallback element for loading state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStaticNavigation } from '@react-navigation/native';\n\n// highlight-start\nconst linking = {\n  enabled: 'auto' /* Automatically generate paths for all screens */,\n  prefixes: [\n    /* your linking prefixes */\n  ],\n};\n// highlight-end\n\nfunction App() {\n  return (\n    <Navigation\n      // highlight-next-line\n      linking={linking}\n      fallback={<Text>Loading...</Text>}\n    />\n  );\n}\n\nconst Navigation = createStaticNavigation(RootStack);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Insets with useSafeAreaInsets Hook (Dynamic Configuration)\nDESCRIPTION: This example shows how to properly handle safe areas in React Navigation using the useSafeAreaInsets hook from react-native-safe-area-context with dynamic configuration. The SafeAreaProvider wrapper is essential for detecting device notches and system UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/handling-safe-area.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n        paddingLeft: insets.left,\n        paddingRight: insets.right,\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        {/*(...) */}\n        <Stack.Navigator\n          initialRouteName=\"Home\"\n          screenOptions={{ headerShown: false }}\n        >\n          <Stack.Screen name=\"Home\">\n            {() => (\n              <Tab.Navigator\n                initialRouteName=\"Analytics\"\n                tabBar={() => null}\n                screenOptions={{ headerShown: false }}\n              >\n                <Tab.Screen name=\"Analytics\" component={Demo} />\n                <Tab.Screen name=\"Profile\" component={Demo} />\n              </Tab.Navigator>\n            )}\n          </Stack.Screen>\n          <Stack.Screen name=\"Settings\" component={Demo} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bottom Tab Navigator with Custom Icons in React Navigation (JavaScript)\nDESCRIPTION: This example shows how to create a Bottom Tab Navigator with three screens, custom icons using react-native-vector-icons, and a badge. It demonstrates setting up the navigator, configuring individual screens, and customizing the appearance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      screenOptions={{\n        tabBarActiveTintColor: '#e91e63',\n      }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={size} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{\n          tabBarLabel: 'Updates',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"bell\" color={color} size={size} />\n          ),\n          tabBarBadge: 3,\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"account\" color={color} size={size} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in Dynamic NavigationContainer - React Navigation (JavaScript)\nDESCRIPTION: This code shows how to use the useTheme hook within a dynamic NavigationContainer to access and apply theme colors based on the system color scheme. It sets up stack and drawer navigators using the usual imperative approach, handles theme switching via useColorScheme, and applies colors throughout the UI components. Dependencies are react-navigation/native, react-navigation/drawer, react-navigation/native-stack, and react-native. All screens and custom components dynamically respond to theme changes provided by the container.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\n// codeblock-focus-start\\nimport { View, Text, TouchableOpacity, useColorScheme } from 'react-native';\\nimport {\\n  NavigationContainer,\\n  DefaultTheme,\\n  DarkTheme,\\n  useTheme,\\n  useNavigation,\\n} from '@react-navigation/native';\\n// codeblock-focus-end\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createDrawerNavigator } from '@react-navigation/drawer';\\n\\nfunction SettingsScreen({ route, navigation }) {\\n  const { colors } = useTheme();\\n  const { user } = route.params;\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Settings Screen</Text>\\n      <Text style={{ color: colors.text }}>\\n        userParam: {JSON.stringify(user)}\\n      </Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen() {\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\n\\nfunction MyButton() {\\n  // highlight-next-line\\n  const { colors } = useTheme();\\n\\n  return (\\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\\n      <Text style={{ color: colors.text }}>Button!</Text>\\n    </TouchableOpacity>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Home Screen</Text>\\n      <MyButton />\\n      <Button\\n        onPress={() =>\\n          navigation.navigate('Root', {\\n            screen: 'Settings',\\n            params: { user: 'jane' },\\n          })\\n        }\\n      >\\n        Go to Settings\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst Drawer = createDrawerNavigator();\\nconst Stack = createNativeStackNavigator();\\n\\nfunction Root() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\\n    </Stack.Navigator>\\n  );\\n}\\n\\nexport default function App() {\\n  const scheme = useColorScheme();\\n\\n  return (\\n    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>\\n      <Drawer.Navigator initialRouteName=\"Root\">\\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\\n        <Drawer.Screen\\n          name=\"Root\"\\n          component={Root}\\n          options={{ headerShown: false }}\\n        />\\n      </Drawer.Navigator>\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Sheet Navigation with React Navigation Native Stack (JavaScript - Static Setup)\nDESCRIPTION: This snippet demonstrates how to create a static navigation configuration with React Navigation's native stack, explicitly setting the 'Profile' screen to use 'formSheet' presentation. It uses '@react-navigation/native', '@react-navigation/native-stack', and '@react-navigation/elements' as dependencies. The main functionality includes two simple screens (Home and Profile) and illustrates how to specify screen options like 'presentation', 'headerShown', and 'sheetAllowedDetents'. Inputs required are correctly implemented React components and navigation functions; output is a working React Native app with a sheet for the Profile screen. Limitations include platform-specific behavior and limited support for certain flex layouts as described in the context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { Button } from '@react-navigation/elements';\\n\\n// codeblock-focus-start\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ padding: 15 }}>\\n      <Text style={{ fontSize: 30, fontWeight: 'bold' }}>Profile Screen</Text>\\n      <Text style={{ marginTop: 10 }}>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam accumsan\\n        euismod enim, quis porta ligula egestas sed. Maecenas vitae consequat\\n        odio, at dignissim lorem. Ut euismod eros ac mi ultricies, vel pharetra\\n        tortor commodo. Interdum et malesuada fames ac ante ipsum primis in\\n        faucibus. Nullam at urna in metus iaculis aliquam at sed quam. In\\n        ullamcorper, ex ut facilisis commodo, urna diam posuere urna, at\\n        condimentum mi orci ac ipsum. In hac habitasse platea dictumst. Donec\\n        congue pharetra ipsum in finibus. Nulla blandit finibus turpis, non\\n        vulputate elit viverra a. Curabitur in laoreet nisl.\\n      </Text>\\n      <Button onPress={() => navigation.goBack()} style={{ marginTop: 15 }}>\\n        Go back\\n      </Button>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nconst MyStack = createNativeStackNavigator({\\n  screens: {\\n    Home: {\\n      screen: HomeScreen,\\n    },\\n    Profile: {\\n      screen: ProfileScreen,\\n      options: {\\n        presentation: 'formSheet',\\n        headerShown: false,\\n        sheetAllowedDetents: 'fitToContents',\\n      },\\n    },\\n  },\\n});\\n// codeblock-focus-end\\n\\nconst Navigation = createStaticNavigation(MyStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Native UI Theme in React Native/Web\nDESCRIPTION: This React functional component uses the `useEffect` hook to monitor changes in the `theme.dark` prop. It determines the current color scheme ('dark' or 'light') and updates the native UI theme accordingly. For web platforms, it modifies `document.documentElement.style.colorScheme`; for native platforms (iOS/Android), it uses `Appearance.setColorScheme`. This ensures native elements like alerts match the application's theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const colorScheme = theme.dark ? 'dark' : 'light';\n\n  if (Platform.OS === 'web') {\n    document.documentElement.style.colorScheme = colorScheme;\n  } else {\n    Appearance.setColorScheme(colorScheme);\n  }\n}, [theme.dark]);\n```\n\n----------------------------------------\n\nTITLE: Navigating Nested Screens with Static Config in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates setting up nested navigators (Stack over Tabs) using React Navigation's static configuration API (`createStaticNavigation`). It includes screen components (`HomeScreen`, `FeedScreen`, `MessagesScreen`) and shows how to navigate to the nested tab navigator ('More') and directly to a specific tab screen ('Messages') from the parent stack screen ('Home'). Key parts highlighted include `createBottomTabNavigator` and `createNativeStackNavigator` for defining the structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Navigating to nested screen\" snack\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('More')}>Go to More</Button>\n      <Button\n        onPress={() => navigation.navigate('More', { screen: 'Messages' })}\n      >\n        Go to Messages\n      </Button>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst MoreTabs = createBottomTabNavigator({\n  screens: {\n    Feed: FeedScreen,\n    Messages: MessagesScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    More: {\n      screen: MoreTabs,\n      options: {\n        headerShown: false,\n      },\n    },\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Navigation State for Unmatched Sub-Paths - React Navigation (JavaScript)\nDESCRIPTION: This snippet shows the structure of the navigation state for a path such as '/settings/notification', leading to the InvalidSettings screen nested inside Settings within Home. Useful for debugging and illustrating how routing state is shaped with nested stacks and wildcards. The state includes named routes with pointers to nested state objects aligned with the navigation hierarchy and matched paths. No executable code or dependencies; the object is for documentation and debugging.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Home',\n      state: {\n        index: 1,\n        routes: [\n          { name: 'Feed' },\n          {\n            name: 'Settings',\n            state: {\n              routes: [\n                { name: 'InvalidSettings', path: '/settings/notification' },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screen with Dynamic Navigator - React Navigation JavaScript\nDESCRIPTION: This snippet shows a dynamic, component-based approach to configuring nested navigators using React Navigation in React Native. It utilizes NavigationContainer, createNativeStackNavigator, and createBottomTabNavigator. The HomeScreen demonstrates how to navigate to a nested Messages screen and pass parameters. The overall navigation structure is declaratively created in function components, and the MessagesScreen accesses user data from route params. Required dependencies are @react-navigation/native, @react-navigation/native-stack, @react-navigation/bottom-tabs, @react-navigation/elements, and react-native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\\nimport { Button } from '@react-navigation/elements';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button\\n        onPress={\\n          () =>\\n            // codeblock-focus-start\\n            navigation.navigate('More', {\\n              screen: 'Messages',\\n              params: { user: 'jane' },\\n            })\\n          // codeblock-focus-end\\n        }\\n      >\\n        Go to Messages\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction FeedScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Feed Screen</Text>\\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\\n    </View>\\n  );\\n}\\n\\nfunction MessagesScreen({ route }) {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Messages Screen</Text>\\n      <Text>User: {route.params.user}</Text>\\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\\n    </View>\\n  );\\n}\\n\\nconst Tab = createBottomTabNavigator();\\nconst Stack = createNativeStackNavigator();\\n\\nfunction MoreTabs() {\\n  return (\\n    <Tab.Navigator>\\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\\n      <Tab.Screen name=\"Messages\" component={MessagesScreen} />\\n    </Tab.Navigator>\\n  );\\n}\\n\\nfunction RootStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen\\n        name=\"More\"\\n        component={MoreTabs}\\n        options={{ headerShown: false }}\\n      />\\n    </Stack.Navigator>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <RootStack />\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing React Navigation Types (TypeScript)\nDESCRIPTION: This snippet shows a suggested structure for organizing React Navigation types, including creating a separate file for types, using helper types, and specifying a global type for the root navigator to improve maintainability and reusability.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CompositeScreenProps,\n  NavigatorScreenParams,\n} from '@react-navigation/native';\nimport type { StackScreenProps } from '@react-navigation/stack';\nimport type { BottomTabScreenProps } from '@react-navigation/bottom-tabs';\n\nexport type RootStackParamList = {\n  Home: NavigatorScreenParams<HomeTabParamList>;\n  PostDetails: { id: string };\n  NotFound: undefined;\n};\n\nexport type RootStackScreenProps<T extends keyof RootStackParamList> =\n  StackScreenProps<RootStackParamList, T>;\n\nexport type HomeTabParamList = {\n  Popular: undefined;\n  Latest: undefined;\n};\n\nexport type HomeTabScreenProps<T extends keyof HomeTabParamList> =\n  CompositeScreenProps<\n    BottomTabScreenProps<HomeTabParamList, T>,\n    RootStackScreenProps<keyof RootStackParamList>\n  >;\n\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Navigation State Persistence in React Navigation\nDESCRIPTION: Implementation of navigation state persistence using Dynamic Navigation API. Uses AsyncStorage to save and restore navigation state, with special handling for deep links. Includes setup for bottom tab navigation with nested stack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/state-persistence.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Platform, View, Linking } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web');\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (initialUrl == null) {\n          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedStateString\n            ? JSON.parse(savedStateString)\n            : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer\n      initialState={initialState}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\n      }\n    >\n      <Tab.Navigator screenOptions={{ headerShown: false }}>\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeStackScreen}\n          options={{ tabBarLabel: 'Home!' }}\n        />\n        <Tab.Screen\n          name=\"Settings\"\n          component={SettingsStackScreen}\n          options={{ tabBarLabel: 'Settings!' }}\n        />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URL Prefixes for Deep Linking - React Navigation - JavaScript\nDESCRIPTION: Illustrates how to define URL prefixes for deep linking, supporting multiple schemes and hostnames in the linking configuration. Prefixes can include custom schemes and HTTP(S) addresses for Universal or App Links. Essential for allowing React Navigation to recognize and handle links intended for the app. Intended for use with the linking prop in React Navigation containers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['example://', 'https://example.com'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to the same route multiple times in React Navigation\nDESCRIPTION: This code shows how to navigate to the same route multiple times using the push method instead of navigate. It demonstrates a DetailsScreen component with a button that pushes another Details screen onto the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() => navigation.push('Details')}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Static Authentication Flow with Hooks (React Navigation)\nDESCRIPTION: This code snippet demonstrates how to implement an authentication flow using `createStaticNavigation` and hooks to conditionally render screens based on the authentication state. The `useIsSignedIn` and `useIsSignedOut` hooks determine which screen to display. The `RootStack` is configured with `Home` and `SignIn` screens, each associated with a hook that defines its visibility based on the authentication status. Requires `@react-navigation/native` and `@react-navigation/native-stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst useIsSignedIn = () => {\n  return true;\n};\n\nconst useIsSignedOut = () => {\n  return !useIsSignedIn();\n};\n\n// codeblock-focus-start\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      if: useIsSignedIn,\n      screen: HomeScreen,\n    },\n    SignIn: {\n      if: useIsSignedOut,\n      screen: SignInScreen,\n    },\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nfunction SignInScreen() {\n  return <View />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bottom Tab Navigator with npm\nDESCRIPTION: Install the @react-navigation/bottom-tabs package using npm. This command adds the bottom tabs navigator to your React Native project, allowing you to create a tab bar at the bottom of your screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/bottom-tabs\n```\n\n----------------------------------------\n\nTITLE: Using FadeSpec Transition in React Navigation (Dynamic)\nDESCRIPTION: This code demonstrates how to use the `FadeSpec` for a screen transition in a React Navigation Bottom Tab Navigator dynamically.  It imports `TransitionSpecs` from `@react-navigation/bottom-tabs` and sets the `transitionSpec` option to `TransitionSpecs.FadeSpec` directly within the `<Tab.Screen>` component for the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionSpecs } from '@react-navigation/bottom-tabs';\n\n// ...\n\n<Tab.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    // highlight-start\n    transitionSpec: TransitionSpecs.FadeSpec,\n    // highlight-end\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Modern Nested Linking Configuration in React Navigation\nDESCRIPTION: The current recommended format for deep linking configuration in React Navigation, using nested objects that match the navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'home',\n      screens: {\n        Feed: 'feed',\n        Profile: 'profile',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom URL Parsing Functions in React Navigation\nDESCRIPTION: Example of how to implement custom functions for parsing URLs into state objects and serializing state objects into URLs using getStateFromPath and getPathFromState in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config: {\n    screens: {\n      Chat: 'feed/:sort',\n    },\n  },\n  getStateFromPath: (path, options) => {\n    // Return a state object here\n    // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n  },\n  getPathFromState(state, config) {\n    // Return a path string here\n    // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Expo Projects\nDESCRIPTION: Command to install required dependencies for React Navigation in Expo managed projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-screens react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Group Configuration with Conditional Rendering\nDESCRIPTION: Demonstrates how to configure groups of screens with conditional rendering based on user status.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/static-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n  groups: {\n    Guest: {\n      if: useIsGuest,\n      screenOptions: {\n        headerShown: false,\n      },\n      screens: {\n        // ...\n      },\n    },\n    User: {\n      if: useIsUser,\n      screens: {\n        // ...\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to Header with Dynamic Configuration in React Navigation\nDESCRIPTION: Shows how to add a button to the right side of a header in React Navigation using dynamic configuration with Stack.Navigator. The button displays an alert when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          headerRight: () => (\n            <Button onPress={() => alert('This is a button!')}>Info</Button>\n          ),\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Back to a Specific Screen Using navigation.popTo (JavaScript)\nDESCRIPTION: Shows how to jump back to a specific screen in the navigation stack using navigation.popTo. Requires the navigation object from react-navigation. Arguments: route name (string), params object, and options (e.g., merge boolean for merging params). Pops back to the named route, merging or replacing params as specified, or creates a new one if not found.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.popTo('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Screen Navigation in React Navigation\nDESCRIPTION: Demonstrates basic conditional rendering of screens based on authentication state using a ternary operator to show different screens for signed-in and signed-out states.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nisSignedIn ? (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping NavigationContainer with Redux Provider in JavaScript\nDESCRIPTION: Demonstrates the basic setup for integrating Redux with React Navigation by wrapping the `NavigationContainer` component with the `Provider` from `react-redux`. This makes the Redux store accessible to all nested components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/redux-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { Provider } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\n\n// Render the app container component with the provider around it\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>{/* Screen configuration */}</NavigationContainer>\n    </Provider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Nested Navigators and Path Mapping - React Navigation - JavaScript\nDESCRIPTION: Demonstrates mapping paths to screens in a nested navigation setup, including both stack and tab navigators. Each screen can specify a linking config for custom or nested paths. Enables deep linking directly to nested screens in tabbed or stacked flows with parameterized or static URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      // highlight-start\n      linking: {\n        path: 'home',\n      },\n      // highlight-end\n    },\n    Settings: {\n      screen: SettingsScreen,\n      // highlight-start\n      linking: {\n        path: 'settings',\n      },\n      // highlight-end\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    HomeTabs: {\n      screen: HomeTabs,\n    },\n    Profile: {\n      screen: ProfileScreen,\n      // highlight-start\n      linking: {\n        path: 'user',\n      },\n      // highlight-end\n    },\n    Chat: {\n      screen: ChatScreen,\n      // highlight-start\n      linking: {\n        path: 'feed/:sort',\n      },\n      // highlight-end\n    },\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Navigator with SplashScreen\nDESCRIPTION: This code snippet demonstrates how to conditionally render a `SplashScreen` component while checking for a user token (`isLoading`). It then renders a navigation component based on the user's authentication state (`isSignedIn`). The `NavigationContainer` and `Stack.Navigator` components are from `react-navigation`, and `SimpleSignInScreen` and `HomeScreen` are assumed to be custom components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (isLoading) {\n  // We haven't finished checking for the token yet\n  return <SplashScreen />;\n}\n\nconst isSignedIn = userToken != null;\n\nreturn (\n  <NavigationContainer>\n    <Stack.Navigator>\n      {isSignedIn ? (\n        <Stack.Screen\n          name=\"SignIn\"\n          component={SimpleSignInScreen}\n          options={{\n            title: 'Sign in',\n          }}\n          initialParams={{ setUserToken }}\n        />\n      ) : (\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n      )}\n    </Stack.Navigator>\n  </NavigationContainer>\n);\n```\n\n----------------------------------------\n\nTITLE: Resetting and Managing Navigation State with CommonActions - React Navigation - JavaScript\nDESCRIPTION: These JavaScript snippets use React Navigation's CommonActions methods to reset the navigation state, update route parameters, and handle custom go-back operations. The examples depend on @react-navigation/native, @react-navigation/stack, and utilize the Button component from @react-navigation/elements. Key parameters include route names, params, and specific keys for targeted state handling. Expected inputs are navigation events, route objects, and user params, while outputs include changed navigation state and UI updates according to user actions. All snippets require a properly configured navigation stack and route context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.dispatch(\n  CommonActions.reset({\n    index: 1,\n    routes: [\n      {\n        name: 'Profile',\n        params: { user: 'jane', key: route.params.key },\n      },\n      { name: 'Home' },\n    ],\n  })\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.dispatch({\n  ...CommonActions.setParams({ user: 'Wojtek' }),\n  source: route.key,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.dispatch({\n  ...CommonActions.goBack(),\n  source: route.key,\n  target: route?.params?.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Listeners in Preloaded Screens with useEffect\nDESCRIPTION: Illustrates how to correctly add navigation event listeners (e.g., 'tabPress') in a component that might be preloaded. By including `navigation` in the `useEffect` dependency array, the listener setup is deferred until the screen is actually navigated to and the `navigation` object is fully functional.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', () => {\n    // do something\n  });\n\n  return () => {\n    unsubscribe();\n  };\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Prevent Default Tab Press Behavior in React Navigation\nDESCRIPTION: This code demonstrates how to listen for the `tabPress` event in React Navigation and prevent the default behavior using `event.preventDefault()`. This allows for custom handling of tab presses.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Stack Push Action Example in React Navigation\nDESCRIPTION: Shows how to use StackActions.push to add a new route on top of the navigation stack. Unlike navigate, push will always add a new route even if the route already exists in the stack. Accepts route name and params as arguments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n```\n\n----------------------------------------\n\nTITLE: Using setOptions to Dynamically Update Screen Title in React Navigation (Dynamic)\nDESCRIPTION: This example shows how to dynamically update a screen's title using the setOptions method with a dynamic navigation configuration. The ProfileScreen component updates its title based on text input, demonstrating how to make screen options responsive to user input.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button onPress={() => navigate('Profile', { title: \"Brent's profile\" })}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  const [value, onChangeText] = React.useState(route.params.title);\n\n  React.useEffect(() => {\n    // highlight-start\n    navigation.setOptions({\n      title: value === '' ? 'No title' : value,\n    });\n    // highlight-end\n  }, [navigation, value]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <TextInput\n        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}\n        onChangeText={onChangeText}\n        value={value}\n      />\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen\n          name=\"Profile\"\n          component={ProfileScreen}\n          options={({ route }) => ({ title: route.params.title })}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Native Package\nDESCRIPTION: This command installs the core React Navigation native package, which is a fundamental dependency for React Navigation in a React Native project. It's necessary for any React Navigation setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with NavigationContainer\nDESCRIPTION: This JavaScript code snippet demonstrates how to wrap your app with the NavigationContainer component. This component is essential for using React Navigation with dynamic configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n// highlight-next-line\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer>{/* Rest of your app code */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Catch-All (404) Routes with Static Navigator Config - React Navigation (JavaScript)\nDESCRIPTION: This code sets up a bottom tab navigator ('HomeTabs') and a stack navigator ('RootStack') with a NotFound screen that matches any unmatched path using the wildcard '*' in the path definition. Dependencies include React Navigation's createBottomTabNavigator and createStackNavigator functions, as well as screen components like FeedScreen, HomeScreen, SettingsScreen, and NotFoundScreen. Inputs are navigation path strings, and outputs are rendered screens with a 404 handler if the path does not match defined routes; the approach ensures unmatched URLs render a specific error page.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: {\n      screen: FeedScreen,\n    },\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n      },\n    },\n    Settings: {\n      screen: SettingsScreen,\n      linking: {\n        path: 'settings',\n      },\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeTabs,\n    },\n    NotFound: {\n      screen: NotFoundScreen,\n      linking: {\n        // highlight-next-line\n        path: '*',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Native Stack Navigator in React Navigation\nDESCRIPTION: Complete example of creating and configuring a native stack navigator with multiple screens, including custom styling and screen-specific options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        headerTintColor: 'white',\n        headerStyle: { backgroundColor: 'tomato' },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={Home}\n        options={{\n          title: 'Awesome app',\n        }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          title: 'My profile',\n        }}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        component={Settings}\n        options={{\n          gestureEnabled: false,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Parsing and Serializing in React Navigation\nDESCRIPTION: Advanced configuration with custom functions for both parsing and serializing date parameters, converting between timestamp and human-readable date format.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Chat: {\n      screen: ChatScreen,\n      linking: {\n        path: 'chat/:date',\n        parse: {\n          date: (date) => new Date(date).getTime(),\n        },\n        stringify: {\n          date: (date) => {\n            const d = new Date(date);\n\n            return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();\n          },\n        },\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: {\n      path: 'chat/:date',\n      parse: {\n        date: (date) => new Date(date).getTime(),\n      },\n      stringify: {\n        date: (date) => {\n          const d = new Date(date);\n\n          return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationContainer for Deep Linking (React Navigation, JavaScript)\nDESCRIPTION: Demonstrates how to configure deep linking in NavigationContainer by passing a linking object containing prefixes and nested screen-to-path configuration. Accepts universal links and custom URL schemes, and provides a fallback component for loading states. Requires '@react-navigation/native'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\\n\\nfunction App() {\\n  const linking = {\\n    prefixes: ['https://example.com', 'example://'],\\n    config: {\\n      screens: {\\n        Home: 'feed/:sort',\\n      },\\n    },\\n  };\\n\\n  return (\\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\\n      {/* content */}\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Bar Badges with Static Configuration in React Native\nDESCRIPTION: Shows how to add a numerical badge to a specific tab icon using the static configuration approach with `createBottomTabNavigator`. The `tabBarBadge` option is set within the `options` object for the 'Home' screen definition. Dependencies include `@react-navigation/native` and `@react-navigation/bottom-tabs`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/customizing-bottom-tabs.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst RootTabs = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        // highlight-start\n        tabBarBadge: 3,\n        // highlight-end\n      },\n    },\n    Settings: SettingsScreen,\n  },\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst RootTabs = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        // highlight-start\n        tabBarBadge: 3,\n        // highlight-end\n      },\n    },\n    Settings: SettingsScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Another Screen with Parameters using React Navigation in JavaScript\nDESCRIPTION: Shows how to use the `navigate` function from the `navigation` prop within a React functional component (`HomeScreen`) to go to the 'Profile' screen, passing an array of names as parameters when a button is pressed. This demonstrates basic navigation and parameter passing.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction HomeScreen({ navigation: { navigate } }) {\n  return (\n    <View>\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() =>\n          navigate('Profile', { names: ['Brent', 'Satya', 'Micha≈õ'] })\n        }\n        title=\"Go to Brent's profile\"\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Screens Using the navigate Method in React Navigation (Static Configuration)\nDESCRIPTION: This code demonstrates how to use the navigation.navigate() method in a React Native app with static navigation configuration. The HomeScreen component navigates to a Profile screen with parameters containing an array of names.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brent's profile\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple URL Prefixes with Linking Prop (React Navigation, JSX)\nDESCRIPTION: This snippet shows inline linking configuration in NavigationContainer using multiple prefixes (supporting universal links and custom schemes) and custom screen path mapping. Only URLs matching the prefixes will be handled, and the prefix is stripped before parsing. Supported on iOS and Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\\n  linking={{\\n    prefixes: ['https://example.com', 'example://'],\\n    config: {\\n      screens: {\\n        Chat: 'feed/:sort',\\n      },\\n    },\\n  }}\\n>\\n  {/* content */}\\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Applying OS Color Scheme to Static React Navigation\nDESCRIPTION: This React Native code demonstrates setting the React Navigation theme based on the operating system's preference using static navigation (`createStaticNavigation`). It utilizes the `useColorScheme` hook from React Native to detect if the system preference is 'dark' or 'light'. Based on the result, it applies either `DarkTheme` or `DefaultTheme` from `@react-navigation/native` to the `Navigation` component created by `createStaticNavigation`. The example includes screen components, navigators (Drawer and Native Stack), and usage of `useTheme` within components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\n// codeblock-focus-start\nimport {\n  useNavigation,\n  createStaticNavigation,\n  DefaultTheme,\n  DarkTheme,\n  useTheme,\n} from '@react-navigation/native';\nimport { View, Text, TouchableOpacity, useColorScheme } from 'react-native';\n// codeblock-focus-end\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction SettingsScreen({ route }) {\n  const navigation = useNavigation();\n  const { user } = route.params;\n  const { colors } = useTheme();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ color: colors.text }}>Settings Screen</Text>\n      <Text style={{ color: colors.text }}>\n        userParam: {JSON.stringify(user)}\n      </Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const { colors } = useTheme();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ color: colors.text }}>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction MyButton() {\n  const { colors } = useTheme();\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\n      <Text style={{ color: colors.text }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const { colors } = useTheme();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ color: colors.text }}>Home Screen</Text>\n      <MyButton />\n      <Button\n        onPress={() =>\n          navigation.navigate('Root', {\n            screen: 'Settings',\n            params: { user: 'jane' },\n          })\n        }\n      >\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\nconst PanelStack = createNativeStackNavigator({\n  screens: {\n    Profile: ProfileScreen,\n    Settings: SettingsScreen,\n  },\n});\n\nconst Drawer = createDrawerNavigator({\n  initialRouteName: 'Panel',\n  screens: {\n    Home: HomeScreen,\n    Panel: PanelStack,\n  },\n});\n\n// codeblock-focus-start\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  // highlight-next-line\n  const scheme = useColorScheme();\n\n  // highlight-next-line\n  return <Navigation theme={scheme === 'dark' ? DarkTheme : DefaultTheme} />;\n}\n\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Extracting Params from Nested Navigator (TypeScript)\nDESCRIPTION: This code snippet shows how to use the `NavigatorScreenParams` utility type to extract the parameter types from a screen containing a nested navigator, enabling type-safe navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigatorScreenParams } from '@react-navigation/native';\n\ntype TabParamList = {\n  Home: NavigatorScreenParams<StackParamList>;\n  Profile: { userId: string };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners and Conditional Option Updates - React Navigation - JavaScript\nDESCRIPTION: These JavaScript snippets demonstrate how to set up event listeners (e.g. for 'tabPress') and conditionally update navigation options with setOptions only if the screen is focused. The patterns rely on React's useEffect, navigation.addListener methods, and navigation.isFocused. Expected inputs include navigation objects obtained from React Navigation context, and the outputs are side effects such as navigation option updates or reactions to navigator events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', () => {\n    // do something\n  });\n\n  return () => {\n    unsubscribe();\n  };\n}, [navigation]);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (navigation.isFocused()) {\n  navigation.setOptions({ title: 'Updated title' });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drawer Navigators with Dynamic Configuration\nDESCRIPTION: This code snippet shows how to implement nested drawer navigators using dynamic configuration in React Navigation. It creates left and right drawers, with custom content for the right drawer, using functional components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/multiple-drawers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.getParent('LeftDrawer').openDrawer()}>\n        Open left drawer\n      </Button>\n      <Button onPress={() => navigation.getParent('RightDrawer').openDrawer()}>\n        Open right drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nfunction LeftDrawerScreen() {\n  return (\n    <LeftDrawer.Navigator\n      id=\"LeftDrawer\"\n      screenOptions={{ drawerPosition: 'left' }}\n    >\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n}\n\nconst RightDrawer = createDrawerNavigator();\n\nfunction RightDrawerScreen() {\n  return (\n    <RightDrawer.Navigator\n      id=\"RightDrawer\"\n      drawerContent={(props) => <RightDrawerContent {...props} />}\n      screenOptions={{\n        drawerPosition: 'right',\n        headerShown: false,\n      }}\n    >\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Navigation State with AsyncStorage in React Navigation\nDESCRIPTION: This JavaScript snippet demonstrates how to persist the navigation state in a React Native app using React Navigation and AsyncStorage. It uses `React.useEffect` to restore the saved state from AsyncStorage on component mount (unless a deep link is present or on the web platform) and sets it as the `initialState` for the `NavigationContainer`. The `onStateChange` prop is used to save the current navigation state to AsyncStorage whenever it changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/state-persistence.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web'); // Don't persist state on web since it's based on URL\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (initialUrl == null) {\n          // Only restore state if there's no deep link\n          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedStateString\n            ? JSON.parse(savedStateString)\n            : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer\n      initialState={initialState}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\n      }\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Long Press Event in React Navigation\nDESCRIPTION: This code snippet demonstrates how to add a listener for the `tabLongPress` event in React Navigation. The event is triggered when the user presses the tab button for an extended period. The `useEffect` hook is used to subscribe to the event, and the returned function unsubscribes from the event when the component unmounts to prevent memory leaks.  This example requires React and React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabLongPress', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Using Route Params in Header Title with Static Configuration\nDESCRIPTION: This example demonstrates how to use route parameters in the header title using the static configuration approach. The title of the Profile screen is set to the 'name' parameter passed during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() =>\n          navigation.navigate('Profile', {\n            name: 'Jane',\n          })\n        }\n      >\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My home',\n      },\n    },\n    Profile: {\n      screen: ProfileScreen,\n      options: ({ route }) => ({\n        title: route.params.name,\n      }),\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Shared Element Transitions with SharedTransition API in React Native (JavaScript/JSX)\nDESCRIPTION: This code demonstrates customizing shared element transitions by defining a custom transition function with react-native-reanimated's SharedTransition.custom. It uses withSpring for animating size and position properties and sets the resulting sharedTransitionStyle prop on Animated.Image components. Dependencies include react-native-reanimated and its SharedTransition and withSpring exports. Key parameters are values object (target dimensions/origins) provided to the transition worklet, and sharedTransitionStyle applied to each element. Inputs are element property changes and outputs are smooth spring-based transitions; customizing transform requires additional logic not shown here.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/shared-element-transitions.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SharedTransition } from 'react-native-reanimated';\\n\\nconst customTransition = SharedTransition.custom((values) => {\\n  'worklet';\\n  return {\\n    height: withSpring(values.targetHeight),\\n    width: withSpring(values.targetWidth),\\n    originX: withSpring(values.targetOriginX),\\n    originY: withSpring(values.targetOriginY),\\n  };\\n});\\n\\nfunction HomeScreen() {\\n  return (\\n    <Animated.Image\\n      style={{ width: 300, height: 300 }}\\n      sharedTransitionTag=\"tag\"\\n      // highlight-next-line\\n      sharedTransitionStyle={customTransition} // add this to both elements on both screens\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocusEffect Hook in React Navigation (Dynamic Configuration)\nDESCRIPTION: Shows how to use the useFocusEffect hook in a React Navigation app with dynamic configuration. The hook is implemented in a ProfileScreen component to execute actions on screen focus and unfocus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-focus-effect.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction ProfileScreen() {\n  useFocusEffect(\n    React.useCallback(() => {\n      // Do something when the screen is focused\n      return () => {\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <View />;\n}\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Navigation Props with Nested CompositeScreenProps (TypeScript)\nDESCRIPTION: This example expands on the previous one showing how to use nested `CompositeScreenProps` for screens with multiple parent navigators such as a tab within a stack inside a drawer.  It creates a type that represents all the navigation props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProfileScreenProps = CompositeScreenProps<\n  BottomTabScreenProps<TabParamList, 'Profile'>,\n  CompositeScreenProps<\n    StackScreenProps<StackParamList>,\n    DrawerScreenProps<DrawerParamList>\n  >\n>;\n```\n\n----------------------------------------\n\nTITLE: Passing Params Back to Previous Screen - React Navigation (JavaScript)\nDESCRIPTION: This code illustrates a pattern where data is passed back to the previous route from a navigated screen using navigation.popTo. It sets up a HomeScreen that reacts to param changes via useEffect and a CreatePostScreen that calls navigation.popTo to send the post data back. Dependencies include react-native, @react-navigation/native, and @react-navigation/native-stack. The expected input is user interaction in a TextInput; output is an alert showing the new post and a UI update.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, TextInput } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\n// codeblock-focus-start\nfunction HomeScreen({ route }) {\n  const navigation = useNavigation();\n\n  // Use an effect to monitor the update to params\n  // highlight-start\n  React.useEffect(() => {\n    if (route.params?.post) {\n      // Post updated, do something with `route.params.post`\n      // For example, send the post to the server\n      alert('New post: ' + route.params?.post);\n    }\n  }, [route.params?.post]);\n  // highlight-end\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('CreatePost')}>\n        Create post\n      </Button>\n      <Text style={{ margin: 10 }}>Post: {route.params?.post}</Text>\n    </View>\n  );\n}\n\nfunction CreatePostScreen({ route }) {\n  const navigation = useNavigation();\n  const [postText, setPostText] = React.useState('');\n\n  return (\n    <>\n      <TextInput\n        multiline\n        placeholder=\"What's on your mind?\"\n        style={{ height: 200, padding: 10, backgroundColor: 'white' }}\n        value={postText}\n        onChangeText={setPostText}\n      />\n      <Button\n        onPress={() => {\n          // Pass params back to home screen\n          // highlight-next-line\n          navigation.popTo('Home', { post: postText });\n        }}\n      >\n        Done\n      </Button>\n    </>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    CreatePost: CreatePostScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Static Navigator Configuration with Groups\nDESCRIPTION: This code snippet shows how to configure a React Navigation navigator statically, using `groups` to define different screen sets based on authentication status. It uses `useIsSignedIn` and `useIsSignedOut` hooks to determine which group of screens (SignedIn or SignedOut) to display. It assumes the existence of `HomeScreen`, `ProfileScreen`, `SignInScreen`, `SignUpScreen`, and `ResetPasswordScreen` components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    // Common screens\n  },\n  groups: {\n    SignedIn: {\n      if: useIsSignedIn,\n      screens: {\n        Home: HomeScreen,\n        Profile: ProfileScreen,\n      },\n    },\n    SignedOut: {\n      if: useIsSignedOut,\n      screens: {\n        SignIn: SignInScreen,\n        SignUp: SignUpScreen,\n        ResetPassword: ResetPasswordScreen,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with Dynamic Navigation in React Navigation\nDESCRIPTION: Sets up screen tracking functionality using React Navigation's dynamic navigation approach. Uses NavigationContainer and useNavigationContainerRef to track route changes and implement analytics tracking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-tracking.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport {\n  NavigationContainer,\n  useNavigation,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction Home() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\nfunction Settings() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n  const routeNameRef = React.useRef();\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onReady={() => {\n        routeNameRef.current = navigationRef.current.getCurrentRoute().name;\n      }}\n      onStateChange={async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\n        const trackScreenView = () => {\n          // Your implementation of analytics goes here!\n        };\n\n        if (previousRouteName !== currentRouteName) {\n          // Replace the line below to add the tracker from a mobile analytics SDK\n          await trackScreenView(currentRouteName);\n        }\n\n        // Save the current route name for later comparison\n        routeNameRef.current = currentRouteName;\n      }}\n    >\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating useScrollToTop with Static Tabs in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates the integration of the useScrollToTop hook in a static bottom tab navigation setup using React Navigation within a React Native app. It utilizes the createBottomTabNavigator and createStaticNavigation functions to set up navigation, and applies useScrollToTop to a ScrollView to enable scrolling to the top when the active tab is tapped. Dependencies include '@react-navigation/bottom-tabs', '@react-navigation/native', and 'react-native'. Key parameters: none. Input is user interaction with the tab bar, output is the scrollable content being reset to the top. The approach is limited to static tab configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-scroll-to-top.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { View, Image } from 'react-native';\n// codeblock-focus-start\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  // highlight-next-line\n  useScrollToTop(ref);\n\n  return (\n    <ScrollView ref={ref}>\n      {/* content */}\n      // codeblock-focus-end\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"1\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"2\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"3\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"4\"\n      />\n      // codeblock-focus-start\n    </ScrollView>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator({\n  Home: HomeScreen,\n  Albums: Albums,\n});\n\nconst Navigation = createStaticNavigation(Tab);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Bottom Tab Navigator Implementation (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a dynamic bottom tab navigator using React Navigation. It imports necessary components, defines Home and Profile screens, and creates a tab navigator using the `Tab.Navigator` and `Tab.Screen` components. This approach allows for more dynamic configuration of the tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles in React Navigation (Static)\nDESCRIPTION: This snippet shows how to customize header styles for a static navigation configuration in React Navigation. It demonstrates setting background color, tint color, and title style for the header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My home',\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Material Bottom Tab Navigator Example\nDESCRIPTION: A complete example of setting up a Material Bottom Tab Navigator with custom icons, labels, and styles for each tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-bottom-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      activeColor=\"#e91e63\"\n      barStyle={{ backgroundColor: 'tomato' }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{\n          tabBarLabel: 'Updates',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"bell\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"account\" color={color} size={26} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters with CommonActions in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates updating route parameters via the setParams action in React Navigation using CommonActions. The action merges new params (e.g., user: 'Wojtek') into the currently focused route. Dependencies are '@react-navigation/native' and a navigation object in context. The required parameter is a params object, and the result is an updated navigation state with merged route params. This action typically targets the focused route unless otherwise specified.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(CommonActions.setParams({ user: 'Wojtek' }));\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator with useFocusEffect (Dynamic)\nDESCRIPTION: This code snippet demonstrates how to create a bottom tab navigator using `createBottomTabNavigator` from `@react-navigation/bottom-tabs`. It includes the `useFocusEffect` hook to fetch data when the 'PokemonInfoScreen' screen is focused. The `PokemonInfoScreen` component fetches data from a mock API and updates its state based on the loading status.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useCallback, useState } from 'react';\nimport { Text, View } from 'react-native';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n}\n\nconst url = 'https://pokeapi.co/api/v2/pokemon/ditto';\n\nfunction PokemonInfoScreen() {\n  const [profileData, setProfileData] = useState({ status: 'loading' });\n\n  useFocusEffect(\n    useCallback(() => {\n      if (profileData.status === 'success') {\n        return;\n      }\n\n      setProfileData({ status: 'loading' });\n\n      const controller = new AbortController();\n\n      const fetchUser = async () => {\n        try {\n          const response = await fetch(url, { signal: controller.signal });\n          const data = await response.json();\n\n          setProfileData({ status: 'success', data: data });\n        } catch (error) {\n          setProfileData({ status: 'error' });\n        }\n      };\n\n      fetchUser();\n\n      return () => {\n        controller.abort();\n      };\n    }, [profileData.status])\n  );\n\n  if (profileData.status === 'loading') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (profileData.status === 'error') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>An error occurred!</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>{profileData.data.name}</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport function MyTabs() {\n  return (\n    <Tab.Navigator screenOptions={{ headerShown: false }}>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Pokemon\" component={PokemonScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callback for Listeners in React Navigation\nDESCRIPTION: This example shows how to use a callback function to return listeners for a Screen component. The callback receives 'navigation' and 'route' as arguments, allowing for more complex logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigatior({\n  screens: {\n    Chat: {\n      screen: Chat,\n      listeners: ({ navigation, route }) => ({\n        tabPress: (e) => {\n          // Prevent default action\n          e.preventDefault;\n\n          // Do something with the `navigation` object\n          navigation.navigate('AnotherPlace');\n        },\n      }),\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen\n  name=\"Chat\"\n  component={Chat}\n  listeners={({ navigation, route }) => ({\n    tabPress: (e) => {\n      // Prevent default action\n      e.preventDefault();\n\n      // Do something with the `navigation` object\n      navigation.navigate('AnotherPlace');\n    },\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Screen Configuration with Linking in React Navigation\nDESCRIPTION: Shows how to configure a screen with linking options for deep linking support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/static-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      linking: {\n        path: 'u/:userId',\n        parse: {\n          userId: (id) => id.replace(/^@/, ''),\n        },\n        stringify: {\n          userId: (id) => `@${id}`,\n        },\n      },\n    },\n    Chat: {\n      screen: ChatScreen,\n      linking: 'chat/:chatId',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Bar Button with TouchableOpacity in React Navigation\nDESCRIPTION: This code shows how to use a custom React element for the tab bar button using the `tabBarButton` option, replacing the default `Pressable` with `TouchableOpacity` from React Native. All props are passed down to the custom button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarButton: (props) => <TouchableOpacity {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook in Dynamic React Navigation (JavaScript)\nDESCRIPTION: This example demonstrates the useFocusEffect hook for managing logic during screen focus and cleanup during blur, in a dynamic navigator arrangement using NavigationContainer. The useFocusEffect hook from @react-navigation/native ensures the effect executes only when the screen is active. Dependencies include @react-navigation/native (for hooks and NavigationContainer), @react-navigation/native-stack, react-navigation/elements, and react-native. Input is navigation state; output is effect and cleanup execution. Useful for running logic only when the screen is interactable.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-lifecycle.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { Button } from '@react-navigation/elements';\\n// codeblock-focus-start\\nimport { useFocusEffect } from '@react-navigation/native';\\n\\nfunction ProfileScreen() {\\n  // highlight-start\\n  useFocusEffect(\\n    React.useCallback(() => {\\n      // Do something when the screen is focused\\n      console.log('ProfileScreen focus effect');\\n\\n      return () => {\\n        // Do something when the screen is unfocused\\n        // Useful for cleanup functions\\n        console.log('ProfileScreen focus effect cleanup');\\n      };\\n    }, [])\\n  );\\n  // highlight-end\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst Stack = createNativeStackNavigator();\\n\\nfunction RootStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <RootStack />\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedHeaderHeight Hook for Animated Header Height (JavaScript)\nDESCRIPTION: Demonstrates how to use the useAnimatedHeaderHeight hook from @react-navigation/native-stack to obtain an animated header height and bind it to a component. Dependencies include React Native's Animated, @react-navigation/native-stack, and a functional component. The animated value can be used in styles to sync animations with changes in the header height.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animated } from 'react-native';\\nimport { useAnimatedHeaderHeight } from '@react-navigation/native-stack';\\n\\nconst MyView = () => {\\n  const headerHeight = useAnimatedHeaderHeight();\\n\\n  return (\\n    <Animated.View\\n      style={{\\n        height: 100,\\n        aspectRatio: 1,\\n        backgroundColor: 'tomato',\\n        transform: [{ translateY: headerHeight }],\\n      }}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Param from Path Segment in Navigation State (React Navigation, JavaScript)\nDESCRIPTION: This short snippet illustrates mapping a URL segment (e.g., '/feed/latest') to a navigation state, extracting and passing the 'sort' param from the path to the 'Chat' screen. The structure is compatible with React Navigation and is representative of how path params become screen params in deep linking scenarios.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Chat',\n      params: {\n        sort: 'latest',\n      },\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StatusBar per Screen in React Native Stack Navigator using JavaScript\nDESCRIPTION: Demonstrates setting unique `StatusBar` configurations for different screens within a React Native Stack Navigator. Each screen component imports and renders the `StatusBar` component directly, specifying `barStyle` and `backgroundColor`. It utilizes `useSafeAreaInsets` for proper padding and hides the default navigator header. Dependencies include React, React Native, React Navigation (native and stack), and SafeAreaContext.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, StatusBar, Button, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Screen1({ navigation }) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#6a51ae',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen2')}\n        color=\"#fff\"\n      />\n    </View>\n  );\n}\n\nfunction Screen2({ navigation }) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#ecf0f1',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen1')}\n      />\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Screen1\" component={Screen1} />\n          <Stack.Screen name=\"Screen2\" component={Screen2} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Bar Icons with Dynamic Configuration in React Native\nDESCRIPTION: Demonstrates how to add icons to a bottom tab bar using the dynamic (component-based) configuration with `createBottomTabNavigator`. It uses the `Tab.Navigator` component and its `screenOptions` prop to define a `tabBarIcon` function, which conditionally renders an `Ionicons` component. Dependencies include `@react-navigation/native`, `@react-navigation/bottom-tabs`, `@expo/vector-icons` (or `react-native-vector-icons`), and `react`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/customizing-bottom-tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction RootTabs() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        // highlight-start\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          if (route.name === 'Home') {\n            iconName = focused\n              ? 'ios-information-circle'\n              : 'ios-information-circle-outline';\n          } else if (route.name === 'Settings') {\n            iconName = focused ? 'ios-list' : 'ios-list-outline';\n          }\n\n          // You can return any component that you like here!\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        // highlight-end\n        tabBarActiveTintColor: 'tomato',\n        tabBarInactiveTintColor: 'gray',\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n// codeblock-focus-start\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction RootTabs() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        // highlight-start\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          if (route.name === 'Home') {\n            iconName = focused\n              ? 'ios-information-circle'\n              : 'ios-information-circle-outline';\n          } else if (route.name === 'Settings') {\n            iconName = focused ? 'ios-list' : 'ios-list-outline';\n          }\n\n          // You can return any component that you like here!\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        // highlight-end\n        tabBarActiveTintColor: 'tomato',\n        tabBarInactiveTintColor: 'gray',\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Bar Badges with Dynamic Configuration in React Native\nDESCRIPTION: Illustrates adding a numerical badge using the dynamic (component-based) configuration with `createBottomTabNavigator`. The `tabBarBadge` option is passed directly to the `options` prop of the specific `Tab.Screen` component ('Home'). Dependencies include `@react-navigation/native`, `@react-navigation/bottom-tabs`, and `react`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/customizing-bottom-tabs.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction RootTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          // highlight-start\n          tabBarBadge: 3,\n          // highlight-end\n        }}\n      />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction RootTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          // highlight-start\n          tabBarBadge: 3,\n          // highlight-end\n        }}\n      />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stack Navigator with Custom Options\nDESCRIPTION: Complete example of creating and configuring a Stack Navigator with custom screen options, header styling, and different screen configurations. Shows how to set up initialRouteName and screen-specific options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        headerMode: 'screen',\n        headerTintColor: 'white',\n        headerStyle: { backgroundColor: 'tomato' },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={Home}\n        options={{\n          title: 'Awesome app',\n        }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          title: 'My profile',\n        }}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        component={Settings}\n        options={{\n          gestureEnabled: false,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating screen options at runtime with navigation.setOptions\nDESCRIPTION: Shows how to use the navigation.setOptions method to update screen options dynamically from within a component, in this case changing the screen title on button press.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  title=\"Update options\"\n  onPress={() => navigation.setOptions({ title: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Navigation in React Navigation\nDESCRIPTION: This snippet shows how to configure nested navigation for deep linking, specifying that the 'Profile' screen should be resolved for the 'users/:id' pattern nested inside the 'Home' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Interacting with Screen Component from Header Buttons\nDESCRIPTION: Example demonstrating how to use navigation.setOptions to allow header buttons to interact with the screen component's state. This pattern allows header buttons to access the screen's props, state, and lifecycle methods.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={({ navigation, route }) => ({\n          headerTitle: (props) => <LogoTitle {...props} />,\n        })}\n      />\n    </Stack.Navigator>\n  );\n}\n\nfunction HomeScreen({ navigation }) {\n  const [count, setCount] = React.useState(0);\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Button onPress={() => setCount((c) => c + 1)} title=\"Update count\" />\n      ),\n    });\n  }, [navigation]);\n\n  return <Text>Count: {count}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Linking Configuration for a Static Nested Navigator in JavaScript\nDESCRIPTION: This snippet demonstrates generating linking configuration for the statically defined `FeedTabs` navigator using `createPathConfigForStaticNavigation`. The generated configuration (`feedScreens`) is then integrated into the main linking configuration object under the `screens` property for the 'Feed' route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { createPathConfigForStaticNavigation } from '@react-navigation/native';\n\n// highlight-next-line\nconst feedScreens = createPathConfigForStaticNavigation(FeedTabs);\n\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config: {\n    screens: {\n      Home: '',\n      Feed: {\n        path: 'feed',\n        // highlight-next-line\n        screens: feedScreens,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Listening to Focus Events (Static Config) in React Native\nDESCRIPTION: Demonstrates how to use the `navigation.addListener` method within a `React.useEffect` hook to subscribe to the 'focus' event for a screen in a statically configured React Navigation setup. An alert is shown when the screen focuses, and the listener is cleaned up on unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/function-after-focusing-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// codeblock-focus-start\nimport * as React from 'react';\nimport { View } from 'react-native';\n\n// codeblock-focus-end\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      alert('Screen is focused');\n      // The screen is focused\n      // Call any action\n    });\n\n    // Return the function to unsubscribe from the event so it gets removed on unmount\n    return unsubscribe;\n  }, [navigation]);\n\n  return <View />;}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Third-Party Deep Linking Services with React Navigation\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate third-party deep linking services like Firebase Dynamic Links with React Navigation. It overrides the default getInitialURL and subscribe functions to handle custom deep linking behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['myapp://', 'https://myapp.com'],\n\n  // Custom function to get the URL which was used to open the app\n  async getInitialURL() {\n    // First, you would need to get the initial URL from your third-party integration\n    // The exact usage depend on the third-party SDK you use\n    // For example, to get the initial URL for Firebase Dynamic Links:\n    const { isAvailable } = utils().playServicesAvailability;\n\n    if (isAvailable) {\n      const initialLink = await dynamicLinks().getInitialLink();\n\n      if (initialLink) {\n        return initialLink.url;\n      }\n    }\n\n    // As a fallback, you may want to do the default deep link handling\n    const url = await Linking.getInitialURL();\n\n    return url;\n  },\n\n  // Custom function to subscribe to incoming links\n  subscribe(listener) {\n    // Listen to incoming links from Firebase Dynamic Links\n    const unsubscribeFirebase = dynamicLinks().onLink(({ url }) => {\n      listener(url);\n    });\n\n    // Listen to incoming links from deep linking\n    const linkingSubscription = Linking.addEventListener('url', ({ url }) => {\n      listener(url);\n    });\n\n    return () => {\n      // Clean up the event listeners\n      unsubscribeFirebase();\n      linkingSubscription.remove();\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Screens Using the navigate Method in React Navigation (Dynamic Configuration)\nDESCRIPTION: This code demonstrates how to use the navigation.navigate() method in a React Native app with dynamic navigation configuration. The HomeScreen component navigates to a Profile screen with parameters containing an array of names.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brent's profile\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Metro Resolution Error for TS/TSX\nDESCRIPTION: Illustrates an example error message encountered when Metro fails to resolve a module because TypeScript extensions (`.ts`, `.tsx`) are missing from the Metro configuration (`metro.config.js`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nError: While trying to resolve module \"@react-navigation/native\" from file \"/path/to/src/App.js\", the package \"/path/to/node_modules/@react-navigation/native/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/@react-navigation/native/src/index.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Defining Screens within a Stack Navigator using JSX\nDESCRIPTION: Shows the basic structure of using a `Navigator` component (e.g., `Stack.Navigator`) and defining individual screens within it using the `Screen` component (e.g., `Stack.Screen`). Each screen requires at least a `name` and a `component` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Bar Icons with Static Configuration in React Native\nDESCRIPTION: Demonstrates how to add icons to a bottom tab bar using the static configuration approach with `createBottomTabNavigator`. It utilizes the `screenOptions` prop to define a `tabBarIcon` function that returns an `Ionicons` component based on the route name and focus state. Dependencies include `@react-navigation/native`, `@react-navigation/bottom-tabs`, and a vector icon library like `react-native-vector-icons`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/customizing-bottom-tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n```\n\nLANGUAGE: js\nCODE:\n```\nconst RootTabs = createBottomTabNavigator({\n  screenOptions: ({ route }) => ({\n    // highlight-start\n    tabBarIcon: ({ focused, color, size }) => {\n      let iconName;\n\n      if (route.name === 'Home') {\n        iconName = focused\n          ? 'ios-information-circle'\n          : 'ios-information-circle-outline';\n      } else if (route.name === 'Settings') {\n        iconName = focused ? 'ios-list' : 'ios-list-outline';\n      }\n\n      // You can return any component that you like here!\n      return <Ionicons name={iconName} size={size} color={color} />;\n    },\n    // highlight-end\n    tabBarActiveTintColor: 'tomato',\n    tabBarInactiveTintColor: 'gray',\n  }),\n  screens: {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n// codeblock-focus-start\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst RootTabs = createBottomTabNavigator({\n  screenOptions: ({ route }) => ({\n    // highlight-start\n    tabBarIcon: ({ focused, color, size }) => {\n      let iconName;\n\n      if (route.name === 'Home') {\n        iconName = focused\n          ? 'ios-information-circle'\n          : 'ios-information-circle-outline';\n      } else if (route.name === 'Settings') {\n        iconName = focused ? 'ios-list' : 'ios-list-outline';\n      }\n\n      // You can return any component that you like here!\n      return <Ionicons name={iconName} size={size} color={color} />;\n    },\n    // highlight-end\n    tabBarActiveTintColor: 'tomato',\n    tabBarInactiveTintColor: 'gray',\n  }),\n  screens: {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Status in Class Component via State Event\nDESCRIPTION: This snippet demonstrates how to check the drawer status within a React class component by listening to the `state` event on the `navigation` object. Inside the listener, `getDrawerStatusFromState` is used with the latest navigation state to determine if the drawer is open.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nclass Profile extends React.Component {\n  componentDidMount() {\n    this._unsubscribe = navigation.addListener('state', () => {\n      const isDrawerOpen =\n        getDrawerStatusFromState(navigation.getState()) === 'open';\n\n      // do something\n    });\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n  }\n\n  render() {\n    // Content of the component\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Header Options with setOptions\nDESCRIPTION: Demonstrates how to update header options dynamically using the navigation.setOptions method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  title=\"Update the title\"\n  onPress={() => navigation.setOptions({ title: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Functions Outside Components in Dynamic Configuration\nDESCRIPTION: Example of using navigation functions from the RootNavigation module in a dynamic navigation configuration. Demonstrates implementing a navigation function and using it within a component without direct access to the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction navigate(name, params) {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate(name, params);\n  }\n}\n\n// Example of usage in any of js modules\n//import * as RootNavigation from './path/to/RootNavigation.js';\n\n// ...\n\n// RootNavigation.navigate('ChatScreen', { userName: 'Lucy' });\n\nfunction Home() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigate('Settings', { userName: 'Lucy' })}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Popping to the Top Screen in React Navigation Stack (JavaScript)\nDESCRIPTION: This snippet shows the usage of the `popToTop` method on the React Navigation `navigation` object. This action removes all screens from the stack except for the initial screen and navigates the user to that first screen. It takes no arguments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nnavigation.popToTop();\n```\n\n----------------------------------------\n\nTITLE: Nesting Navigators with Static Configuration (React Native/JS)\nDESCRIPTION: Demonstrates nesting a `createBottomTabNavigator` (`HomeTabs`) within a `createNativeStackNavigator` (`RootStack`) using the static configuration API (`createStaticNavigation`) in React Navigation. The `HomeTabs` navigator is rendered as a screen within the `RootStack`. Dependencies include `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/bottom-tabs`, and `@react-navigation/elements`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: FeedScreen,\n    Messages: MessagesScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      // highlight-next-line\n      screen: HomeTabs,\n      options: {\n        headerShown: false,\n      },\n    },\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Conditional Navigation with Navigation Key (React Navigation)\nDESCRIPTION: This snippet enhances dynamic screen rendering by utilizing the `navigationKey` prop on the `Stack.Screen` component for the `Help` screen. The `navigationKey` is dynamically set based on the `isSignedIn` state. When the sign-in state changes, the change in `navigationKey` forces React Navigation to unmount and remount the `Help` screen, ensuring that the user is redirected to either the `SignIn` or `Home` screen based on the current authentication status. This solution avoids the issue of the user staying on the `Help` screen after an authentication state change.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  {isSignedIn ? (\n    <>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </>\n  ) : (\n    <>\n      <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n      <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    </>\n  )}\n  <Stack.Screen\n    navigationKey={isSignedIn ? 'user' : 'guest'}\n    name=\"Help\"\n    component={HelpScreen}\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Navigating to a New Screen in React Navigation\nDESCRIPTION: Example of a HomeScreen component using the navigation prop to navigate to a Details screen when a button is pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n\n// ... other code from the previous section\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tab Bar Position based on Screen Size\nDESCRIPTION: This example shows how to dynamically set the `tabBarPosition` option based on screen size using `dimensions.width`. This allows for a dynamic tab bar layout, switching between bottom tabs on smaller screens and a left sidebar on larger screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  screenOptions={{\n    tabBarPosition: dimensions.width < 600 ? 'bottom' : 'left',\n    tabBarLabelPosition: 'below-icon',\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Theme Switching with React Navigation and React Native Paper\nDESCRIPTION: Sets up a combined theme system with React Navigation and React Native Paper, allowing dynamic switching between light and dark themes. The code creates combined themes from both libraries and uses React state to toggle between them.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  NavigationContainer,\n  DefaultTheme as NavigationDefaultTheme,\n  DarkTheme as NavigationDarkTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n  Provider as PaperProvider,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n};\nconst CombinedDarkTheme = { ...PaperDarkTheme, ...NavigationDarkTheme };\n\nexport default function Main() {\n  const [isDarkTheme, setIsDarkTheme] = React.useState(false);\n\n  const theme = isDarkTheme ? CombinedDarkTheme : CombinedDefaultTheme; // Use Light/Dark theme based on a state\n\n  function toggleTheme() {\n    // We will pass this function to Drawer and invoke it on theme switch press\n    setIsDarkTheme((isDark) => !isDark);\n  }\n\n  return (\n    <PaperProvider theme={theme}>\n      <NavigationContainer theme={theme}>{/* content */}</NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Static Navigator Configuration with Screens\nDESCRIPTION: This code snippet demonstrates the static configuration of a React Navigation navigator using `createNativeStackNavigator`. It defines screens and their associated components, using conditional logic (`if` property) to determine which screens are displayed based on the user's authentication state (using custom hooks `useIsSignedIn` and `useIsSignedOut`). Requires `react-navigation` library.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      if: useIsSignedIn,\n      screen: HomeScreen,\n    },\n    SignIn: {\n      if: useIsSignedOut,\n      screen: SignInScreen,\n      options: {\n        title: 'Sign in',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters Back to a Previous Screen in React Navigation using JavaScript\nDESCRIPTION: Demonstrates passing data from a newly opened screen (`CreatePostScreen`) back to the previous screen (`HomeScreen`). This is achieved by calling `navigation.navigate` targeting the previous screen's name, passing the data as params, and setting `merge: true`. The previous screen uses `React.useEffect` to listen for changes in `route.params`. Requires `react`, `react-native` components, and `react-navigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen({ navigation, route }) {\n  React.useEffect(() => {\n    if (route.params?.post) {\n      // Post updated, do something with `route.params.post`\n      // For example, send the post to the server\n    }\n  }, [route.params?.post]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        title=\"Create post\"\n        onPress={() => navigation.navigate('CreatePost')}\n      />\n      <Text style={{ margin: 10 }}>Post: {route.params?.post}</Text>\n    </View>\n  );\n}\n\nfunction CreatePostScreen({ navigation, route }) {\n  const [postText, setPostText] = React.useState('');\n\n  return (\n    <>\n      <TextInput\n        multiline\n        placeholder=\"What's on your mind?\"\n        style={{ height: 200, padding: 10, backgroundColor: 'white' }}\n        value={postText}\n        onChangeText={setPostText}\n      />\n      <Button\n        title=\"Done\"\n        onPress={() => {\n          // Pass and merge params back to home screen\n          navigation.navigate({\n            name: 'Home',\n            params: { post: postText },\n            merge: true,\n          });\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTheme with Static Navigation - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the useTheme hook from @react-navigation/native within a static navigation setup. It shows integration with various navigation components like createNativeStackNavigator and createDrawerNavigator, and how components access theme colors to adapt UI elements. Required dependencies include @react-navigation/native, @react-navigation/native-stack, @react-navigation/drawer, and @react-navigation/elements, and the code is intended for use in a React Native environment. Key parameters include route, navigation, and user-provided props; the theme can be dynamically toggled based on the device color scheme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  useNavigation,\\n  createStaticNavigation,\\n  DefaultTheme,\\n  DarkTheme,\\n} from '@react-navigation/native';\\nimport { View, Text, TouchableOpacity, useColorScheme } from 'react-native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createDrawerNavigator } from '@react-navigation/drawer';\\nimport { Button } from '@react-navigation/elements';\\n// codeblock-focus-start\\nimport { useTheme } from '@react-navigation/native';\\n\\n// codeblock-focus-end\\n\\nfunction SettingsScreen({ route }) {\\n  const navigation = useNavigation();\\n  const { user } = route.params;\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Settings Screen</Text>\\n      <Text style={{ color: colors.text }}>\\n        userParam: {JSON.stringify(user)}\\n      </Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen() {\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nfunction MyButton() {\\n  // highlight-next-line\\n  const { colors } = useTheme();\\n\\n  return (\\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\\n      <Text style={{ color: colors.text }}>Button!</Text>\\n    </TouchableOpacity>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Home Screen</Text>\\n      <MyButton />\\n      <Button\\n        onPress={() =>\\n          navigation.navigate('Root', {\\n            screen: 'Settings',\\n            params: { user: 'jane' },\\n          })\\n        }\\n      >\\n        Go to Settings\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst PanelStack = createNativeStackNavigator({\\n  screens: {\\n    Profile: ProfileScreen,\\n    Settings: SettingsScreen,\\n  },\\n});\\n\\nconst Drawer = createDrawerNavigator({\\n  initialRouteName: 'Panel',\\n  screens: {\\n    Home: HomeScreen,\\n    Panel: {\\n      screen: PanelStack,\\n      options: {\\n        headerShown: false,\\n      },\\n    },\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(Drawer);\\n\\nexport default function App() {\\n  const scheme = useColorScheme();\\n  return <Navigation theme={scheme === 'dark' ? DarkTheme : DefaultTheme} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Navigators with Dynamic Configuration (React Native/JS)\nDESCRIPTION: Shows how to nest a `BottomTabNavigator` (`HomeTabs` component) within a `NativeStackNavigator` (`RootStack` component) using the dynamic component-based approach in React Navigation, wrapped in a `NavigationContainer`. The `HomeTabs` component, representing the tab navigator, is used as the component for the `Home` screen in the `RootStack`. Dependencies include `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/bottom-tabs`, and `@react-navigation/elements`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\n// codeblock-focus-start\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Messages\" component={MessagesScreen} />\n    </Tab.Navigator>\n  );\n}\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        // highlight-next-line\n        component={HomeTabs}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Toggling the Drawer in React Navigation\nDESCRIPTION: This snippet shows how to programmatically toggle the drawer's state (open if closed, close if open) using the `navigation.toggleDrawer()` helper method provided by the Drawer Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nnavigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Navigation State Persistence in React Navigation\nDESCRIPTION: Implementation of navigation state persistence using Static Navigation API. Uses AsyncStorage to save and restore navigation state, with special handling for web platform and deep links. Includes setup for bottom tab navigation with nested stack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/state-persistence.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Platform, View, Linking } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web');\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' && initialUrl == null) {\n          const savedState = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedState ? JSON.parse(savedState) : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <Navigation\n      initialState={initialState}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Context in React Navigation\nDESCRIPTION: Creates a React Context object to share authentication state and methods across components. This context will be used to provide sign in, sign out, and token restoration functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/auth-flow.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nconst AuthContext = React.createContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles in React Navigation\nDESCRIPTION: Shows how to customize header styles including background color, tint color, and title text styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'My home',\n          headerStyle: {\n            backgroundColor: '#f4511e',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Fetching with useFocusEffect (React Navigation, JavaScript)\nDESCRIPTION: Shows how to fetch data asynchronously within useFocusEffect and properly clean up to prevent state updates after the component unmounts or loses focus. Utilizes an isActive flag and awaits data from API.fetch. Dependencies include React, @react-navigation/native, and API with a fetch method. The main parameter is userId for data lookup; ensures safe state-setting and robust cleanup. Input is the userId to fetch, and output is an update to the setUser state if the request completes successfully without cancellation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-focus-effect.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseFocusEffect(\n  React.useCallback(() => {\n    let isActive = true;\n\n    const fetchUser = async () => {\n      try {\n        const user = await API.fetch({ userId });\n\n        if (isActive) {\n          setUser(user);\n        }\n      } catch (e) {\n        // Handle error\n      }\n    };\n\n    fetchUser();\n\n    return () => {\n      isActive = false;\n    };\n  }, [userId])\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Root Navigator in JavaScript\nDESCRIPTION: This snippet demonstrates creating a root stack navigator (`RootStack`) using React Navigation's static API (`createNativeStackNavigator` with a configuration object). It defines two screens, 'Home' and 'Feed', specifying the component and basic linking configuration for the 'Feed' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n    },\n    Feed: {\n      screen: FeedScreen,\n      linking: {\n        path: 'feed',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Shared Element Transitions in React Navigation\nDESCRIPTION: Example showing how to implement shared element transitions using static navigation configuration with @react-navigation/native-stack and react-native-reanimated. Uses Animated.Image components with sharedTransitionTag to create seamless transitions between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/shared-element-transitions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nimport Animated from 'react-native-reanimated';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n      <Animated.Image\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\n        style={{ width: 300, height: 300 }}\n        sharedTransitionTag=\"tag\"\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      <Animated.Image\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\n        style={{ width: 100, height: 100 }}\n        sharedTransitionTag=\"tag\"\n      />\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Nested Screen with Type Checking (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to navigate to a screen within a nested navigator using the `screen` and `params` properties. This allows for type checking of the nested screen's parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nnavigation.navigate('Home', {\n  screen: 'Feed',\n  params: { sort: 'latest' },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RootNavigation Utility for Programmatic Navigation - React Navigation JavaScript\nDESCRIPTION: Creates a reusable RootNavigation.js utility that encapsulates navigation functions to be used outside components. It exports a navigationRef for reference and a navigate function for controlling screen transitions programmatically. By centralizing these functions, navigation actions become easily accessible throughout the codebase, including middleware and utility modules.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// RootNavigation.js\n\nimport * as React from 'react';\n\nexport const navigationRef = React.createRef();\n\nexport function navigate(name, params) {\n  navigationRef.current?.navigate(name, params);\n}\n\n// add other navigation functions that you need and export them\n```\n\n----------------------------------------\n\nTITLE: Listening to Focus Event with Navigation Listener (JavaScript)\nDESCRIPTION: This code demonstrates how to use the navigation.addListener API in react-navigation to respond to the 'focus' event on a screen. By placing the logic inside a React.useEffect hook with the navigation dependency, the event listener is registered when the component mounts and is cleaned up properly. Dependencies: react-navigation/native (navigation prop injected), React. The Profile component will execute a callback when it gains focus, suitable for data refresh or analytics. No required inputs beyond navigation prop; output is side effects performed on focus. Limitations: ensure proper cleanup (return unsubscribe) and avoid memory leaks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-lifecycle.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // Screen was focused\n      // Do something\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters with CommonActions in React Navigation\nDESCRIPTION: Shows how to update the parameters of a specific route using CommonActions.setParams. This example updates the 'user' parameter to 'Wojtek' and specifies the source route using its key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nnavigation.dispatch({\n  ...CommonActions.setParams({ user: 'Wojtek' }),\n  source: route.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Back Button Logic with Dynamic Navigation in React Native\nDESCRIPTION: This snippet demonstrates overriding the Android hardware back button behavior within a screen managed by a dynamically configured React Navigation stack using `NavigationContainer` and `createNativeStackNavigator`. It leverages the `useFocusEffect` hook and React Native's `BackHandler` API. When the back button is pressed, the registered callback checks if a 'selection mode' is enabled. If true, it disables the mode and returns `true`, preventing the default navigation pop. If false, it returns `false`, allowing React Navigation's default back handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-android-back-button-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, BackHandler, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { PlatformPressable, Button } from '@react-navigation/elements';\n\nconst Stack = createNativeStackNavigator();\n\nconst listData = [{ key: 'Apple' }, { key: 'Orange' }, { key: 'Carrot' }];\n\n// codeblock-focus-start\nfunction ScreenWithCustomBackBehavior() {\n  // codeblock-focus-end\n\n  const [selected, setSelected] = React.useState(listData[0].key);\n  const [isSelectionModeEnabled, setIsSelectionModeEnabled] =\n    React.useState(false);\n  // codeblock-focus-start\n  // ...\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const onBackPress = () => {\n        if (isSelectionModeEnabled) {\n          setIsSelectionModeEnabled(false);\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      const subscription = BackHandler.addEventListener(\n        'hardwareBackPress',\n        onBackPress\n      );\n\n      return () => subscription.remove();\n    }, [isSelectionModeEnabled])\n  );\n  // codeblock-focus-end\n\n  return (\n    <View style={styles.container}>\n      {listData.map((item) => (\n        <>\n          {isSelectionModeEnabled ? (\n            <PlatformPressable\n              onPress={() => {\n                setSelected(item.key);\n              }}\n              style={{\n                textDecorationLine: item.key === selected ? 'underline' : '',\n              }}\n            >\n              <Text\n                style={{\n                  textDecorationLine: item.key === selected ? 'underline' : '',\n                  ...styles.text,\n                }}\n              >\n                {item.key}\n              </Text>\n            </PlatformPressable>\n          ) : (\n            <Text style={styles.text}>\n              {item.key === selected ? 'Selected: ' : ''}\n              {item.key}\n            </Text>\n          )}\n        </>\n      ))}\n      <Button\n        onPress={() => setIsSelectionModeEnabled(!isSelectionModeEnabled)}\n      >\n        Toggle selection mode\n      </Button>\n      <Text>Selection mode: {isSelectionModeEnabled ? 'ON' : 'OFF'}</Text>\n    </View>\n  );\n  // codeblock-focus-start\n\n  // ...\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"CustomScreen\"\n          component={ScreenWithCustomBackBehavior}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 20,\n    marginBottom: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking and Firebase Notifications in React Navigation\nDESCRIPTION: This snippet demonstrates how to set up deep linking and handle Firebase notifications in a React Navigation container. It includes custom `getInitialURL` implementation to handle both deep links and initial Firebase notifications.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    async getInitialURL() {\n      // Check if app was opened from a deep link\n      const url = await Linking.getInitialURL();\n\n      if (url != null) {\n        return url;\n      }\n\n      // Check if there is an initial firebase notification\n      const message = await messaging().getInitialNotification();\n\n      // Get the `url` property from the notification which corresponds to a screen\n      // This property needs to be set on the notification payload when sending it\n      return message?.notification.url;\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for Navigator in React Navigation (Dynamic)\nDESCRIPTION: This example demonstrates how to use the 'screenOptions' prop on the Stack.Navigator component to configure options for all screens dynamically. It shows setting a common header style for all screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator\n  screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Nested Screen in React Navigation (JS)\nDESCRIPTION: Illustrates how to pass parameters (e.g., `{ user: 'jane' }`) to a specific screen ('Profile') within a nested navigator ('Root'). The parameters are provided within a `params` object, nested alongside the `screen` key in the second argument to `navigate`: `navigation.navigate('Root', { screen: 'Profile', params: { user: 'jane' } })`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate('Root', {\n  screen: 'Profile',\n  params: { user: 'jane' },\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Events in React Navigation (Dynamic)\nDESCRIPTION: This example shows how to implement navigation event listeners in a dynamic navigation configuration. The ProfileScreen registers focus and blur event listeners that trigger alerts when the screen is focused or unfocused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction SettingsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Settings Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(\n    () => navigation.addListener('focus', () => alert('Screen was focused')),\n    [navigation]\n  );\n\n  React.useEffect(\n    () => navigation.addListener('blur', () => alert('Screen was unfocused')),\n    [navigation]\n  );\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst SettingsStack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <SettingsStack.Navigator>\n        <SettingsStack.Screen name=\"Settings\" component={SettingsScreen} />\n        <SettingsStack.Screen name=\"Profile\" component={ProfileScreen} />\n      </SettingsStack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Nested Route Path Matching with Exact Option (Static Config) - React Navigation (JavaScript)\nDESCRIPTION: By adding 'exact: true' to a nested Profile screen, this code configures the route to match only the specified pattern (i.e. '/users/:id') rather than the parent-prefixed path. Requires React Navigation navigators and referenced screens. It enables more flexible and direct routing for child screens, bypassing parent path prefixes. Limitations are that only routes marked with exact: true behave in this way.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ProfileTabs = createBottomTabNavigator({\n  screens: {\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n        // highlight-next-line\n        exact: true,\n      },\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: ProfileTabs,\n      linking: {\n        path: 'feed',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Catch-All (404) Routes with Dynamic Object Config - React Navigation (JavaScript)\nDESCRIPTION: This dynamic config object defines a navigation tree where ‚ÄòNotFound‚Äô matches any path not handled by 'Home' or its child screens using path: '*'. It enables 404 routing logic in applications built with React Navigation by providing a screen mapping pattern. It requires only the config object passed to the navigation container and will direct unmatched paths to 'NotFound' for handling; no additional dependencies are needed beyond React Navigation and matching screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: 'settings',\n      },\n    },\n    NotFound: {\n      // highlight-start\n      path: '*',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters with CommonActions.setParams in JavaScript\nDESCRIPTION: Shows how to use `CommonActions.setParams` to merge new parameters into the currently focused route's parameters. This example sets or updates the `user` parameter to 'Wojtek'. The `setParams` action creator takes an object containing the parameters to merge.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(CommonActions.setParams({ user: 'Wojtek' }));\n```\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Functions Outside Components in Static Configuration\nDESCRIPTION: Example of using navigation functions from the RootNavigation module in a static navigation configuration. Demonstrates implementing a navigation function and using it within a component without direct access to the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction navigate(name, params) {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate(name, params);\n  }\n}\n\n// Example of usage in any of js modules\n//import * as RootNavigation from './path/to/RootNavigation.js';\n\n// ...\n\n// RootNavigation.navigate('ChatScreen', { userName: 'Lucy' });\n\nfunction Home() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigate('Settings', { userName: 'Lucy' })}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using function with options prop for dynamic configuration\nDESCRIPTION: Demonstrates passing a function to the 'options' prop that receives navigation and route props, allowing for dynamic configuration like adding navigation buttons to the header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={({ navigation }) => ({\n    title: 'Awesome app',\n    headerLeft: () => (\n      <DrawerButton onPress={() => navigation.toggleDrawer()} />\n    ),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Screens in React Navigation Stack\nDESCRIPTION: Demonstrates how to add multiple screens to a React Navigation stack and set an initial route. It includes both a HomeScreen and a DetailsScreen component within the Stack.Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Header Right Component in React Navigation\nDESCRIPTION: Example showing how to add a custom right header component using a MaterialCommunityIcons component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nheaderRight: () => <MaterialCommunityIcons name=\"map\" color=\"blue\" size={36} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking Subscription in React Navigation (Dynamic)\nDESCRIPTION: Demonstrates how to provide a custom `subscribe` function within the `linking` prop for the `<NavigationContainer>` component. This function handles incoming URLs from both standard deep linking (`Linking.addEventListener`) and Firebase Cloud Messaging notifications (`messaging().onNotificationOpenedApp`), passing the URL to the React Navigation listener. It returns a cleanup function to remove the listeners.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      // ...\n    },\n    // highlight-start\n    subscribe(listener) {\n      const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n      // Listen to incoming links from deep linking\n      const subscription = Linking.addEventListener('url', onReceiveURL);\n\n      // Listen to firebase push notifications\n      const unsubscribeNotification = messaging().onNotificationOpenedApp(\n        (message) => {\n          const url = message.data?.url;\n\n          if (url) {\n            // Any custom logic to check whether the URL needs to be handled\n            //...\n\n            // Call the listener to let React Navigation handle the URL\n            listener(url);\n          }\n        }\n      );\n\n      return () => {\n        // Clean up the event listeners\n        subscription.remove();\n        unsubscribeNotification();\n      };\n    },\n    // highlight-end\n  }}\n>\n  {/* content */}\n</NavigationContainer>;\n```\n\n----------------------------------------\n\nTITLE: Updating Route Parameters with setParams in Dynamic React Navigation\nDESCRIPTION: This code shows how to implement the setParams method with Dynamic React Navigation. It provides a profile screen where users can toggle between different sets of friends and profile titles, demonstrating how setParams updates route parameters and affects the UI.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            friends: ['Brent', 'Satya', 'Micha≈õ'],\n            title: \"Brent's Profile\",\n          });\n        }}\n      >\n        Go to Brents profile\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Text>Friends: </Text>\n      <Text>{route.params.friends[0]}</Text>\n      <Text>{route.params.friends[1]}</Text>\n      <Text>{route.params.friends[2]}</Text>\n      <Button\n        onPress={() => {\n          // highlight-start\n          navigation.setParams({\n            friends:\n              route.params.friends[0] === 'Brent'\n                ? ['Wojciech', 'Szymon', 'Jakub']\n                : ['Brent', 'Satya', 'Micha≈õ'],\n            title:\n              route.params.title === \"Brent's Profile\"\n                ? \"Lucy's Profile\"\n                : \"Brent's Profile\",\n          });\n          // highlight-end\n        }}\n      >\n        Swap title and friends\n      </Button>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen\n          name=\"Profile\"\n          component={ProfileScreen}\n          options={({ route }) => ({ title: route.params.title })}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook in React Navigation\nDESCRIPTION: Demonstration of using the useFocusEffect hook to handle API subscriptions when a screen comes into focus. The hook properly manages cleanup when the screen loses focus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/function-after-focusing-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile({ userId }) {\n  const [user, setUser] = React.useState(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, (user) => setUser(data));\n\n      return () => unsubscribe();\n    }, [userId])\n  );\n\n  return <ProfileContent user={user} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending useScrollToTop to Provide Scroll Offset with Static Tabs (JavaScript)\nDESCRIPTION: This example demonstrates how to customize the scroll-to-top behavior using useScrollToTop, enabling a scroll offset by decorating the ref with a custom scrollToTop implementation. It modifies the scroll action to start from an offset (y: 100) instead of the very top. The code sets up static tabs via createBottomTabNavigator and createStaticNavigation and applies the decorated ref. Dependencies are '@react-navigation/bottom-tabs', '@react-navigation/native', and 'react-native'. Input is a tab press event; output is a ScrollView scroll with offset.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-scroll-to-top.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { View, Image } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\n\n// codeblock-focus-start\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  useScrollToTop(\n    React.useRef({\n      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),\n    })\n  );\n\n  return (\n    <ScrollView ref={ref}>\n      {/* content */}\n      // codeblock-focus-end\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"1\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"2\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"3\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"4\"\n      />\n      // codeblock-focus-start\n    </ScrollView>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Albums: Albums,\n  },\n});\n\nconst Navigation = createStaticNavigation(Tab);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Params to Nested Screen with React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to set up nested navigators (stack and tab) using React Navigation in a React Native app, and correctly pass parameters to a nested screen. Dependencies include 'react-native', '@react-navigation/native', '@react-navigation/native-stack', '@react-navigation/bottom-tabs', and '@react-navigation/elements'. It shows how to navigate to a nested screen ('Settings') and pass a param ('user'), how to access params via the route object, and how to further navigate within the nested navigator. Required setup includes installing all listed navigation dependencies and configuring navigation containers. The input is a user param object, accessed via route.params, and the output is the rendering of the appropriate screen. Limitations are tied to React Navigation version compatibility and correct dependency installation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View, TextInput } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\\nimport { Button } from '@react-navigation/elements';\\n\\nfunction SettingsScreen({ route }) {\\n  const navigation = useNavigation();\\n  const { user } = route.params;\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Settings Screen</Text>\\n      <Text>userParam: {JSON.stringify(user)}</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button\\n        onPress={\\n          () =>\\n            // codeblock-focus-start\\n            navigation.navigate('More', {\\n              screen: 'Settings',\\n              params: { user: 'jane' },\\n            })\\n          // codeblock-focus-end\\n        }\\n      >\\n        Go to Settings\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst MoreStack = createNativeStackNavigator({\\n  screens: {\\n    Settings: SettingsScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\\n\\nconst RootTabs = createBottomTabNavigator({\\n  screens: {\\n    Home: HomeScreen,\\n    More: MoreStack,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(RootTabs);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Sheet Navigation with React Navigation Native Stack (JavaScript - Dynamic Setup)\nDESCRIPTION: This code demonstrates a dynamic setup of React Navigation's native stack using the 'formSheet' presentation for the Profile screen, with dependencies on '@react-navigation/native', '@react-navigation/native-stack', and '@react-navigation/elements'. The functional components (HomeScreen and ProfileScreen) enable navigation between screens using navigation functions, and the stack navigator is rendered inside a NavigationContainer. The snippet showcases how to define presentation options dynamically and details parameters such as 'headerShown' and 'sheetAllowedDetents'. Limitations, especially layout and behavioral issues for flex on different platforms, are discussed in surrounding context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\\nimport { Button } from '@react-navigation/elements';\\n// codeblock-focus-start\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen\\n        name=\"Profile\"\\n        component={ProfileScreen}\\n        options={{\\n          presentation: 'formSheet',\\n          headerShown: false,\\n          sheetAllowedDetents: 'fitToContents',\\n        }}\\n      />\\n    </Stack.Navigator>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ padding: 15 }}>\\n      <Text style={{ fontSize: 30, fontWeight: 'bold' }}>Profile Screen</Text>\\n      <Text style={{ marginTop: 10 }}>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam accumsan\\n        euismod enim, quis porta ligula egestas sed. Maecenas vitae consequat\\n        odio, at dignissim lorem. Ut euismod eros ac mi ultricies, vel pharetra\\n        tortor commodo. Interdum et malesuada fames ac ante ipsum primis in\\n        faucibus. Nullam at urna in metus iaculis aliquam at sed quam. In\\n        ullamcorper, ex ut facilisis commodo, urna diam posuere urna, at\\n        condimentum mi orci ac ipsum. In hac habitasse platea dictumst. Donec\\n        congue pharetra ipsum in finibus. Nulla blandit finibus turpis, non\\n        vulputate elit viverra a. Curabitur in laoreet nisl.\\n      </Text>\\n      <Button onPress={() => navigation.goBack()} style={{ marginTop: 15 }}>\\n        Go back\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <MyStack />\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: React Context for Authentication State\nDESCRIPTION: This code snippet shows how to create a React Context to store the authentication state, providing a way to share the authentication status across the application. `SignInContext` is created using `React.createContext()`. The context is then used in the static approach's hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nconst SignInContext = React.createContext();\n```\n\n----------------------------------------\n\nTITLE: Sharing Common Header Options Across Screens (Static)\nDESCRIPTION: This snippet shows how to share common header options across multiple screens using screenOptions in a static navigation configuration. It sets default styles for all screens in the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  screenOptions: {\n    headerStyle: {\n      backgroundColor: '#f4511e',\n    },\n    headerTintColor: '#fff',\n    headerTitleStyle: {\n      fontWeight: 'bold',\n    },\n  },\n  screens: {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Android Hardware Back Button with React Native BackHandler\nDESCRIPTION: Demonstrates how to use the `BackHandler` API in React Native to intercept the Android hardware back button press. It uses `React.useEffect` to register a listener that displays an `Alert` to confirm if the user wants to exit the app. The listener returns `true` to prevent the default back navigation and is cleaned up when the component unmounts. Requires `Alert` and `BackHandler` from `react-native` and `useEffect` from `React`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/preventing-going-back.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Alert, BackHandler } from 'react-native';\n\n// ...\n\nReact.useEffect(() => {\n  const onBackPress = () => {\n    Alert.alert(\n      'Exit App',\n      'Do you want to exit?',\n      [\n        {\n          text: 'Cancel',\n          onPress: () => {\n            // Do nothing\n          },\n          style: 'cancel',\n        },\n        { text: 'YES', onPress: () => BackHandler.exitApp() },\n      ],\n      { cancelable: false }\n    );\n\n    return true;\n  };\n\n  const backHandler = BackHandler.addEventListener(\n    'hardwareBackPress',\n    onBackPress\n  );\n\n  return () => backHandler.remove();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Linking with useLinking in React Navigation (JavaScript)\nDESCRIPTION: This code demonstrates how to set up the `useLinking` hook with a React Navigation app in JavaScript to enable deep linking. It imports core dependencies, initializes the hook with URL prefixes and screen configuration, uses the `getInitialState` function to hydrate navigation state from deep links, and conditionally renders the navigation container once ready. Dependencies: `react`, `react-native`, and `@react-navigation/native`. Inputs include URL prefixes and navigation config; output is a navigation container stateful to deep links. Proper initialization of the `ref` and deep link prefixes are required, and only iOS and Android are supported natively for this feature.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { ScrollView } from 'react-native';\\nimport { useLinking, NavigationContainer } from '@react-navigation/native';\\n\\nexport default function App() {\\n  const ref = React.useRef();\\n\\n  const { getInitialState } = useLinking(ref, {\\n    prefixes: ['https://example.com', 'example://'],\\n    config: {\\n      screens: {\\n        Chat: 'feed/:sort',\\n      },\\n    },\\n  });\\n\\n  const [isReady, setIsReady] = React.useState(false);\\n  const [initialState, setInitialState] = React.useState();\\n\\n  React.useEffect(() => {\\n    getInitialState()\\n      .catch(() => {})\\n      .then((state) => {\\n        if (state !== undefined) {\\n          setInitialState(state);\\n        }\\n\\n        setIsReady(true);\\n      });\\n  }, [getInitialState]);\\n\\n  if (!isReady) {\\n    return null;\\n  }\\n\\n  return (\\n    <NavigationContainer initialState={initialState} ref={ref}>\\n      {/* content */}\\n    </NavigationContainer>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Nested Navigator in JavaScript\nDESCRIPTION: This snippet defines a bottom tab navigator (`FeedTabs`) using the static API (`createBottomTabNavigator` with a configuration object). This navigator is intended to be nested within a parent navigator defined using the dynamic API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst FeedTabs = createBottomTabNavigator({\n  screens: {\n    Latest: {\n      screen: LatestScreen,\n    },\n    Popular: {\n      screen: PopularScreen,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting Tab Navigator inside Stack Navigator in React Navigation (JS)\nDESCRIPTION: Demonstrates the basic structure for nesting a Tab Navigator within a screen of a Stack Navigator using React Navigation components. The `Home` component defines a `Tab.Navigator`, and this component is used as the `component` for the `Home` screen within the main `App` component's `Stack.Navigator`. The `NavigationContainer` wraps the root navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction Home() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={Feed} />\n      <Tab.Screen name=\"Messages\" component={Messages} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Path-to-Screen Mapping in Stack Navigator - React Navigation - JavaScript\nDESCRIPTION: Exhibits manual mapping of URL paths to navigator screen names using each screen's linking prop within a stack navigator definition. Allows overriding auto-generated paths or specifying custom patterns with route params. Used when finer control over navigation mapping is needed, often in complex or legacy apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      // highlight-start\n      linking: {\n        path: 'user',\n      },\n      // highlight-end\n    },\n    Chat: {\n      screen: ChatScreen,\n      // highlight-start\n      linking: {\n        path: 'feed/:sort',\n      },\n      // highlight-end\n    },\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Navigator with Screen Components (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows a root-level Stack Navigator definition with 'Chat' and 'Profile' as direct children, supporting URL mapping as previously configured. Each Stack.Screen maps a route name to a component. The code expects 'ChatScreen' and 'ProfileScreen' to be defined in scope. This pattern is necessary to align navigation configuration with deep linking path mapping, ensuring URLs resolve correctly to named routes/components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Chat\" component={ChatScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CommonActions.navigate with Dynamic Navigation in React Native\nDESCRIPTION: This snippet showcases the usage of `CommonActions.navigate` in a React Native application using React Navigation's dynamic setup (`NavigationContainer` and `createStackNavigator`). It demonstrates dispatching the `navigate` action from `HomeScreen` to `ProfileScreen` with parameters, and includes examples of `goBack`, `reset`, and `setParams` actions within `ProfileScreen`. Key dependencies include `@react-navigation/native`, `@react-navigation/stack`, and `@react-navigation/elements`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  CommonActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n          // codeblock-focus-end\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button onPress={() => navigation.dispatch(CommonActions.goBack())}>\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBottomTabBarHeight Hook in React Navigation\nDESCRIPTION: This code snippet showcases the use of the `useBottomTabBarHeight` hook from `@react-navigation/bottom-tabs`.  This hook returns the height of the bottom tab bar, which can be used to adjust the content of a screen, especially when the tab bar is absolutely positioned.  The example demonstrates how to apply padding to the bottom of a `ScrollView` to prevent content from being obscured by the tab bar. Requires `@react-navigation/bottom-tabs`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\n\nfunction MyComponent() {\n  const tabBarHeight = useBottomTabBarHeight();\n\n  return (\n    <ScrollView contentStyle={{ paddingBottom: tabBarHeight }}>\n      {/* Content */}\n    </ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Header Function for Drawer Navigator\nDESCRIPTION: This snippet shows how to define a custom header component for a drawer screen. It accepts a function that receives `navigation`, `route`, and `options` props and returns a React Element. It utilizes `getHeaderTitle` from `@react-navigation/elements` to extract the title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return <MyHeader title={title} style={options.headerStyle} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useSafeAreaInsets Hook with Dynamic Navigation in React Native\nDESCRIPTION: This snippet shows how to use the useSafeAreaInsets hook from react-native-safe-area-context in a dynamic navigation setup. It demonstrates wrapping the app in SafeAreaProvider and using NavigationContainer for dynamic navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/handling-safe-area.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\n// codeblock-focus-start\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator\n          initialRouteName=\"Home\"\n          screenOptions={{ headerShown: false }}\n        >\n          <Stack.Screen name=\"Home\">\n            {() => (\n              <Tab.Navigator\n                initialRouteName=\"Analytics\"\n                tabBar={() => null}\n                screenOptions={{ headerShown: false }}\n              >\n                <Tab.Screen name=\"Analytics\" component={Demo} />\n                <Tab.Screen name=\"Profile\" component={Demo} />\n              </Tab.Navigator>\n            )}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"Settings\" component={Demo} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying OS Color Scheme to Navigation Theme - JavaScript\nDESCRIPTION: Shows use of the useColorScheme hook from React Native to detect the system color mode and set the theme (either DarkTheme or DefaultTheme) in the NavigationContainer. The code expects useColorScheme, DefaultTheme, and DarkTheme to be imported. Ensures the navigation UI adapts to system settings for improved user experience; outputs the configured navigation tree.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useColorScheme } from 'react-native';\\nimport {\\n  NavigationContainer,\\n  DefaultTheme,\\n  DarkTheme,\\n} from '@react-navigation/native';\\n\\nexport default () => {\\n  const scheme = useColorScheme();\\n\\n  return (\\n    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>\\n      {/* content */}\\n    </NavigationContainer>\\n  );\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Navigating with useLinkTo Hook in React Navigation - JavaScript\nDESCRIPTION: This snippet shows how to import and use the useLinkTo hook from @react-navigation/native inside a functional component to navigate users to a route using a URL path. The code depends on React, React Navigation, and a Button component, with the hook returning a function linkTo that accepts a path string. When the button is pressed, the linkTo('/profile/jane') call navigates to Jane's profile. Inputs include user interaction, while output is a navigation state change. The implementation is minimal, and should be wrapped by more accessible components for web usage.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-to.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useLinkTo } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  const linkTo = useLinkTo();\n\n  return (\n    <Button onPress={() => linkTo('/profile/jane')}>\n      Go to Jane's profile\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Screen Removal with usePreventRemove - React Navigation - JavaScript (Dynamic Navigation)\nDESCRIPTION: This snippet illustrates usage of the usePreventRemove hook inside a dynamic navigation setup with NavigationContainer and a dynamically created stack (createStackNavigator), suitable for typical React Navigation applications. It intercepts navigation that would remove a screen and shows confirmation dialogs via Alert for native or confirm for web based on unsaved input state. All required imports, state management for the edit screen, and navigation logic are shown. The primary parameters are the hasUnsavedChanges flag and a callback that conditionally dispatches the removal action. The code expects unsaved changes in a text field, and will prevent accidental navigation loss; events such as app quit or parent unmount are not intercepted.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-prevent-remove.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { Alert, View, TextInput, Platform, StyleSheet } from 'react-native';\nimport {\n  NavigationContainer,\n  useNavigation,\n  usePreventRemove,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\n// codeblock-focus-start\nconst EditTextScreen = () => {\n  const navigation = useNavigation();\n  const [text, setText] = React.useState('');\n\n  const hasUnsavedChanges = Boolean(text);\n\n  usePreventRemove(hasUnsavedChanges, ({ data }) => {\n    if (Platform.OS === 'web') {\n      // Alert is not supported on web, so we can use confirm\n      const discard = confirm(\n        'You have unsaved changes. Discard them and leave the screen?'\n      );\n\n      if (discard) {\n        navigation.dispatch(data.action);\n      }\n    } else {\n      // Prompt the user before leaving the screen\n      Alert.alert(\n        'Discard changes?',\n        'You have unsaved changes. Discard them and leave the screen?',\n        [\n          {\n            text: \"Don't leave\",\n            style: 'cancel',\n            onPress: () => {\n              // Do nothingP\n            },\n          },\n          {\n            text: 'Discard',\n            style: 'destructive',\n            onPress: () => navigation.dispatch(data.action),\n          },\n        ]\n      );\n    }\n  });\n\n  return (\n    <View style={styles.content}>\n      <TextInput\n        autoFocus\n        style={styles.input}\n        value={text}\n        placeholder=\"Type something‚Ä¶\"\n        onChangeText={setText}\n      />\n    </View>\n  );\n};\n// codeblock-focus-end\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={styles.buttons}>\n      <Button onPress={() => navigation.push('EditText')} style={styles.button}>\n        Push EditText\n      </Button>\n    </View>\n  );\n};\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"EditText\" component={EditTextScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n    backgroundColor: 'white',\n  },\n  buttons: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 8,\n  },\n  button: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Flow with React Hooks in React Navigation\nDESCRIPTION: Demonstrates a complete authentication system using useReducer for state management and useEffect for token restoration. The component handles token persistence with SecureStore, provides authentication methods through context, and conditionally renders screens based on authentication state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/auth-flow.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\nexport default function App({ navigation }) {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        userToken = await SecureStore.getItemAsync('userToken');\n      } catch (e) {\n        // Restoring token failed\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <Stack.Navigator>\n        {state.userToken == null ? (\n          <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n        ) : (\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        )}\n      </Stack.Navigator>\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Screen Params Dynamically - React Navigation (JavaScript)\nDESCRIPTION: This code sample demonstrates updating screen route parameters using navigation.setParams inside a screen. It shows how to use a button press to update a parameter (itemId) for the HomeScreen, which can trigger UI updates or side effects based on param changes. Dependencies are react-native, @react-navigation/native, and @react-navigation/native-stack. The main input is a button press; output is the updated param value displayed in the UI.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen({ route }) {\n  const navigation = useNavigation();\n  const { itemId } = route.params;\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Text>itemId: {JSON.stringify(itemId)}</Text>\n      <Button\n        onPress={\n          () =>\n            // codeblock-focus-start\n            navigation.setParams({\n              itemId: Math.floor(Math.random() * 100),\n            })\n          // codeblock-focus-end\n        }\n      >\n        Update param\n      </Button>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      initialParams: { itemId: 42 },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring a Native Stack Navigator with Multiple Screens (Static)\nDESCRIPTION: Extends the stack navigator example to include multiple screens (Home and Details) with initialRouteName configuration using the static approach.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Drawer Navigation with React Navigation in JavaScript\nDESCRIPTION: This snippet illustrates a dynamic configuration of a drawer navigator in a React Native application using React Navigation. It sets up navigation via the standard `createDrawerNavigator`, wrapped within a `NavigationContainer`, enabling runtime configuration like initial routes and screen options. Dependencies include `@react-navigation/drawer`, `@react-navigation/native`, and `@react-navigation/elements`. Two screens are connected (\"Home\" and \"Notifications\") navigable via drawer; pressing corresponding buttons triggers navigation actions. Inputs are the defined components and output is an interactively rendered navigator. This approach supports runtime customization such as screen ordering or route-specific configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Notifications')}>\n        Go to notifications\n      </Button>\n    </View>\n  );\n}\n\nfunction NotificationsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back home</Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator initialRouteName=\"Home\">\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Notifications\" component={NotificationsScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying global default types for React Navigation in TypeScript\nDESCRIPTION: This code snippet shows how to specify a global type for the root navigator, which will be used as the default type for APIs like useNavigation, Link, and ref in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Action in React Navigation\nDESCRIPTION: Demonstrates how to use the dispatch method to send a navigation action object. This example shows navigating to a 'Profile' screen using CommonActions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.navigate({\n    name: 'Profile',\n    params: {},\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Safe Navigation Function with Mount State Checking - React Navigation JavaScript\nDESCRIPTION: Implements a robust navigate function in RootNavigation that checks both mount state and navigationRef before attempting navigation. Utilizes isReadyRef to confirm app initialization, thereby preventing runtime errors if the navigator is not yet available. Falls back to a user-defined strategy (such as queueing) if the navigation attempt would be unsafe.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating-without-navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// RootNavigation.js\n\nimport * as React from 'react';\n\nexport const isReadyRef = React.createRef();\n\nexport const navigationRef = React.createRef();\n\nexport function navigate(name, params) {\n  if (isReadyRef.current && navigationRef.current) {\n    // Perform navigation if the app has mounted\n    navigationRef.current.navigate(name, params);\n  } else {\n    // You can decide what to do if the app hasn't mounted\n    // You can ignore this, or add these actions to a queue you can call later\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Tab Icons (JavaScript/React Native)\nDESCRIPTION: Shows how to add a badge (e.g., a notification count) to a specific tab icon using the `tabBarBadge` option within the `options` prop for a `Tab.Screen`. This example sets a static badge count of 3 on the 'Home' tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen name=\"Home\" component={HomeScreen} options={{ tabBarBadge: 3 }} />\n```\n\n----------------------------------------\n\nTITLE: Correctly Setting Tab Options for Nested Stacks (Dynamic)\nDESCRIPTION: Demonstrates the correct dynamic configuration. The `options` (including `tabBarLabel`) are passed directly to the `<Tab.Screen>` components within the `<Tab.Navigator>`, correctly applying the options to the Tab Navigator for the screens rendering the nested stacks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// codeblock-focus-start\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeStackScreen}\n          options={{ tabBarLabel: 'Home!' }}\n        />\n        <Tab.Screen\n          name=\"Settings\"\n          component={SettingsStackScreen}\n          options={{ tabBarLabel: 'Settings!' }}\n        />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Router in React Navigation (JavaScript)\nDESCRIPTION: This example demonstrates how to create a custom router object for a tab-based navigator in React Navigation. The router implements required state management and navigation action handling methods (`getInitialState`, `getRehydratedState`, `getStateForRouteNamesChange`, `getStateForRouteFocus`, `getStateForAction`, and `shouldActionChangeFocus`). It relies on dependencies such as a unique key generator (e.g., `shortid`), and optionally interacts with a base router for action fallback. Key parameters include route names, parameter lists, state objects, and navigation actions, with inputs and outputs conforming to React Navigation's router interface. The example can be used to build navigators with custom state logic and extend navigation behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = {\n  type: 'tab',\n\n  getInitialState({ routeNames, routeParamList }) {\n    const index =\n      options.initialRouteName === undefined\n        ? 0\n        : routeNames.indexOf(options.initialRouteName);\n\n    return {\n      stale: false,\n      type: 'tab',\n      key: shortid(),\n      index,\n      routeNames,\n      routes: routeNames.map(name => ({\n        name,\n        key: name,\n        params: routeParamList[name],\n      })),\n    };\n  },\n\n  getRehydratedState(partialState, { routeNames, routeParamList }) {\n    const state = partialState;\n\n    if (state.stale === false) {\n      return state as NavigationState;\n    }\n\n    const routes = state.routes\n      .filter(route => routeNames.includes(route.name))\n      .map(\n        route =>\n          ({\n            ...route,\n            key: route.key || `${route.name}-${shortid()}`,\n            params:\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                  }\n                : route.params,\n          } as Route<string>)\n      );\n\n    return {\n      stale: false,\n      type: 'tab',\n      key: shortid(),\n      index:\n        typeof state.index === 'number' && state.index < routes.length\n          ? state.index\n          : 0,\n      routeNames,\n      routes,\n    };\n  },\n\n  getStateForRouteNamesChange(state, { routeNames }) {\n    const routes = state.routes.filter(route =>\n      routeNames.includes(route.name)\n    );\n\n    return {\n      ...state,\n      routeNames,\n      routes,\n      index: Math.min(state.index, routes.length - 1),\n    };\n  },\n\n  getStateForRouteFocus(state, key) {\n    const index = state.routes.findIndex(r => r.key === key);\n\n    if (index === -1 || index === state.index) {\n      return state;\n    }\n\n    return { ...state, index };\n  },\n\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'NAVIGATE': {\n        const index = state.routes.findIndex(\n          route => route.name === action.payload.name\n        );\n\n        if (index === -1) {\n          return null;\n        }\n\n        return { ...state, index };\n      }\n\n      default:\n        return BaseRouter.getStateForAction(state, action);\n    }\n  },\n\n  shouldActionChangeFocus() {\n    return false;\n  },\n};\n\nconst SimpleRouter = () => router;\n\nexport default SimpleRouter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation with Parameters in React Native\nDESCRIPTION: This code snippet demonstrates how to pass parameters when navigating between screens in a React Native app using React Navigation. It shows a HomeScreen that navigates to a DetailsScreen with parameters, and how to read those parameters in the destination screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => {\n            /* 1. Navigate to the Details route with params */\n            this.props.navigation.navigate('Details', {\n              itemId: 86,\n              otherParam: 'anything you want here',\n            });\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nclass DetailsScreen extends React.Component {\n  render() {\n    /* 2. Read the params from the navigation state */\n    const { params } = this.props.navigation.state;\n    const itemId = params ? params.itemId : null;\n    const otherParam = params ? params.otherParam : null;\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Text>itemId: {JSON.stringify(itemId)}</Text>\n        <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a confirmation dialog to prevent navigation using beforeRemove event in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the 'beforeRemove' event listener in React Navigation to detect when a user attempts to leave a screen with unsaved changes. It shows how to prevent the default navigation behavior, display a confirmation dialog, and conditionally allow navigation based on user confirmation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/preventing-going-back.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EditText({ navigation }) {\n  const [text, setText] = React.useState('');\n  const hasUnsavedChanges = Boolean(text);\n\n  React.useEffect(\n    () =>\n      navigation.addListener('beforeRemove', (e) => {\n        if (!hasUnsavedChanges) {\n          // If we don't have unsaved changes, then we don't need to do anything\n          return;\n        }\n\n        // Prevent default behavior of leaving the screen\n        e.preventDefault();\n\n        // Prompt the user before leaving the screen\n        Alert.alert(\n          'Discard changes?',\n          'You have unsaved changes. Are you sure to discard them and leave the screen?',\n          [\n            { text: \"Don't leave\", style: 'cancel', onPress: () => {} },\n            {\n              text: 'Discard',\n              style: 'destructive',\n              // If the user confirmed, then we dispatch the action we blocked earlier\n              // This will continue the action that had triggered the removal of the screen\n              onPress: () => navigation.dispatch(e.data.action),\n            },\n          ]\n        );\n      }),\n    [navigation, hasUnsavedChanges]\n  );\n\n  return (\n    <TextInput\n      value={text}\n      placeholder=\"Type something‚Ä¶\"\n      onChangeText={setText}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Bottom Tab Navigator in React Navigation (JS)\nDESCRIPTION: This code snippet demonstrates how to extend the built-in bottom tab navigator in React Navigation. It reuses the `BottomTabView` component and `TabRouter` to create a custom navigator with potentially additional functionality. The `useNavigationBuilder` hook is essential for integrating with the React Navigation core.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  TabRouter,\n} from '@react-navigation/native';\nimport { BottomTabView } from '@react-navigation/bottom-tabs';\n\nfunction BottomTabNavigator({\n  id,\n  initialRouteName,\n  children,\n  layout,\n  screenListeners,\n  screenOptions,\n  screenLayout,\n  backBehavior,\n  ...rest\n}) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder(TabRouter, {\n      id,\n      initialRouteName,\n      children,\n      layout,\n      screenListeners,\n      screenOptions,\n      screenLayout,\n      backBehavior,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport function createMyNavigator(config) {\n  return createNavigatorFactory(TabNavigator)(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic React Navigation State Structure in JavaScript\nDESCRIPTION: This JavaScript object demonstrates the fundamental structure of a React Navigation state for a stack navigator. It includes essential properties like `type`, `key`, `routeNames`, the `routes` array containing screen objects with their `key`, `name`, and optional `params`, the focused `index`, and the `stale` flag.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-state.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    { key: 'home-1', name: 'Home', params: { sortBy: 'latest' } },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n  stale: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Drawer Content in React Navigation\nDESCRIPTION: Creates a basic custom drawer component using `DrawerContentScrollView` to wrap the default `DrawerItemList`. This ensures the drawer content is scrollable and respects device notches. Requires importing components from `@react-navigation/drawer`. The component receives `props` which should be spread onto the ScrollView and ItemList.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport {\n  DrawerContentScrollView,\n  DrawerItemList,\n} from '@react-navigation/drawer';\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n    </DrawerContentScrollView>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Transition Presets for a Stack Navigator (JavaScript/JSX)\nDESCRIPTION: Shows how to apply a `TransitionPresets`, like `ModalPresentationIOS`, to all screens within a `Stack.Navigator` by spreading the preset into the `screenOptions` prop. This sets default animation behavior, gesture handling (`gestureEnabled: true`), and header visibility (`headerShown: false`) for the entire stack, mimicking the iOS 13 modal presentation style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Navigator\n  initialRouteName=\"Home\"\n  screenOptions={({ route, navigation }) => ({\n    headerShown: false,\n    gestureEnabled: true,\n    ...TransitionPresets.ModalPresentationIOS,\n  })}\n>\n  <Stack.Screen name=\"Home\" component={Home} />\n  <Stack.Screen name=\"Profile\" component={Profile} />\n</Stack.Navigator>;\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screen with Custom Initial Route Behavior - React Navigation JavaScript\nDESCRIPTION: This snippet shows how to navigate to a nested screen but force the navigator to render its defined initial route by passing initial: false in the navigation params. This prevents the destination screen from being used as the initial route, allowing the navigation structure to respect the navigator's initialRouteName property. This is an advanced use case for React Navigation's .navigate method in React Native apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.navigate('Root', {\\n  screen: 'Settings',\\n  initial: false,\\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigator State in React Navigation (Dynamic Configuration)\nDESCRIPTION: This code snippet shows how to use the reset method to replace the current navigator state with a new state in a React Navigation app using dynamic configuration. It includes a complete app setup with multiple screens and navigation options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brents profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Text>Friends: </Text>\n      <Text>{route.params.names[0]}</Text>\n      <Text>{route.params.names[1]}</Text>\n      <Text>{route.params.names[2]}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      <Button\n        onPress={() =>\n          navigation.replace('Settings', {\n            someParam: 'Param',\n          })\n        }\n      >\n        Replace this screen with Settings\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.reset({\n            index: 0,\n            routes: [\n              {\n                name: 'Settings',\n                params: { someParam: 'Param1' },\n              },\n            ],\n          });\n          // codeblock-focus-end\n        }}\n      >\n        Reset navigator state to Settings\n      </Button>\n      <Button onPress={() => navigation.navigate('Home')}> Go to Home </Button>\n      <Button\n        onPress={() => navigation.navigate('Settings', { someParam: 'Param1' })}\n      >\n        {' '}\n        Go to Settings{' '}\n      </Button>\n    </View>\n  );\n}\n\nfunction SettingsScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Settings screen</Text>\n      <Text>{route.params.someParam}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brents profile\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n        <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Slide Animation for Stack Navigator Transitions\nDESCRIPTION: This snippet implements a complex slide transition for screens in Stack Navigator. It combines the progress values of current and next screens to create a smooth slide effect where the current screen slides in from the right and the previous screen slides out to the left.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst forSlide = ({ current, next, inverted, layouts: { screen } }) => {\n  const progress = Animated.add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  return {\n    cardStyle: {\n      transform: [\n        {\n          translateX: Animated.multiply(\n            progress.interpolate({\n              inputRange: [0, 1, 2],\n              outputRange: [\n                screen.width, // Focused, but offscreen in the beginning\n                0, // Fully focused\n                screen.width * -0.3, // Fully unfocused\n              ],\n              extrapolate: 'clamp',\n            }),\n            inverted\n          ),\n        },\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook in Static React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to use the useFocusEffect hook from @react-navigation/native to automatically handle effects when a screen is focused or blurred, in a static navigation context. The effect runs each time the screen is focused and supports cleanup logic when unfocused, ideal for logic bound to navigation state. Required dependencies are @react-navigation/native (for useFocusEffect and createStaticNavigation), @react-navigation/native-stack, react-navigation/elements, and react-native. Inputs are navigation focus changes and output includes execution of the callback passed to useFocusEffect (and its cleanup function).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-lifecycle.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { Button } from '@react-navigation/elements';\\n// codeblock-focus-start\\nimport { useFocusEffect } from '@react-navigation/native';\\n\\nfunction ProfileScreen() {\\n  // highlight-start\\n  useFocusEffect(\\n    React.useCallback(() => {\\n      // Do something when the screen is focused\\n      console.log('ProfileScreen focus effect');\\n\\n      return () => {\\n        // Do something when the screen is unfocused\\n        // Useful for cleanup functions\\n        console.log('ProfileScreen focus effect cleanup');\\n      };\\n    }, [])\\n  );\\n  // highlight-end\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst RootStack = createNativeStackNavigator({\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Hosting - React Navigation - JavaScript\nDESCRIPTION: Shows how to specify a subpath in the linking config for apps not hosted at domain root (e.g. hosted at '/app'). The path property in config allows navigation routing to work correctly by prepending this subpath. Not suitable for specifying URL params in the subpath, only path base.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['example://', 'https://example.com'],\n  config: {\n    // highlight-next-line\n    path: 'app',\n\n    // ...\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping Navigator with Custom Layout - Static API - JavaScript\nDESCRIPTION: Provides a 'layout' property for the navigator configuration, allowing custom wrappers that access navigator state and other props. The function returns a React element (here, a container <View> with Breadcrumbs and children). Useful for adding consistent UI around all navigator content. Requires components such as View, Breadcrumbs, and valid style/context objects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\\n  // highlight-start\\n  layout: ({ children, state, descriptors, navigation }) => (\\n    <View style={styles.container}>\\n      <Breadcrumbs\\n        state={state}\\n        descriptors={descriptors}\\n        navigation={navigation}\\n      />\\n      {children}\\n    </View>\\n  ),\\n  // highlight-end\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching DrawerActions (Dynamic Config) in React Navigation JavaScript\nDESCRIPTION: Demonstrates controlling the drawer by dispatching `DrawerActions` (`openDrawer`, `closeDrawer`, `toggleDrawer`) via `navigation.dispatch()`. This example uses a dynamic navigation setup with `NavigationContainer` and `createDrawerNavigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Navigation dispatcher\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  useNavigation,\n  DrawerActions,\n```\n```\n\n----------------------------------------\n\nTITLE: Organizing types for React Navigation in TypeScript\nDESCRIPTION: This comprehensive example demonstrates how to organize types for React Navigation, including param lists, screen props, and global declarations for better type safety and reusability.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CompositeScreenProps,\n  NavigatorScreenParams,\n} from '@react-navigation/native';\nimport type { StackScreenProps } from '@react-navigation/stack';\nimport type { BottomTabScreenProps } from '@react-navigation/bottom-tabs';\n\nexport type RootStackParamList = {\n  Home: NavigatorScreenParams<HomeTabParamList>;\n  PostDetails: { id: string };\n  NotFound: undefined;\n};\n\nexport type RootStackScreenProps<T extends keyof RootStackParamList> =\n  StackScreenProps<RootStackParamList, T>;\n\nexport type HomeTabParamList = {\n  Popular: undefined;\n  Latest: undefined;\n};\n\nexport type HomeTabScreenProps<T extends keyof HomeTabParamList> =\n  CompositeScreenProps<\n    BottomTabScreenProps<HomeTabParamList, T>,\n    RootStackScreenProps<keyof RootStackParamList>\n  >;\n\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a new screen using React Navigation\nDESCRIPTION: This snippet demonstrates how to use the navigation prop to navigate to a new screen in React Navigation. It shows a HomeScreen component with a button that navigates to a Details screen when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Navigator Screen Options via Function in 'screenOptions' (JavaScript)\nDESCRIPTION: Demonstrates passing a function to the `screenOptions` prop on a `Tab.Navigator`. This function receives `route` (and `navigation`), allowing dynamic options across all screens, such as setting the `tabBarIcon` based on the `route.name`. Requires the navigator component (e.g., `Tab.Navigator`), screen components, and potentially icon libraries.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Navigator\n  screenOptions={({ route }) => ({\n    tabBarIcon: ({ color, size }) => {\n      const icons = {\n        Home: 'home',\n        Profile: 'account',\n      };\n\n      return (\n        <MaterialCommunityIcons\n          name={icons[route.name]}\n          color={color}\n          size={size}\n        />\n      );\n    },\n  })}\n>\n  <Tab.Screen name=\"Home\" component={HomeScreen} />\n  <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Hiding Headers in Multiple Nested Navigators (Dynamic Configuration)\nDESCRIPTION: This code snippet shows how to hide headers in all nested navigators by setting headerShown: false in screenOptions for both the tab navigator and stack navigator using dynamic configuration with Navigator components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n    >\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Messages\" component={MessagesScreen} />\n    </Tab.Navigator>\n  );\n}\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n    >\n      <Stack.Screen name=\"Home\" component={HomeTabs} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options in Dynamic Navigation API - React Navigation - JavaScript\nDESCRIPTION: Showcases the dynamic API by defining a navigator using JSX. Screen-specific options are passed as a prop to the Stack.Screen component. For common configuration, the Stack.Navigator component receives screenOptions as a prop. Requires @react-navigation/native and @react-navigation/native-stack, entering through a default-exported App functional component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { NavigationContainer } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nfunction HomeScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n    </View>\\n  );\\n}\\n\\nfunction DetailsScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Details Screen</Text>\\n    </View>\\n  );\\n}\\n\\nconst Stack = createNativeStackNavigator();\\n\\nfunction RootStack() {\\n  return (\\n    // codeblock-focus-start\\n    <Stack.Navigator initialRouteName=\"Home\">\\n      <Stack.Screen\\n        name=\"Home\"\\n        component={HomeScreen}\\n        // highlight-next-line\\n        options={{ title: 'Overview' }}\\n      />\\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\\n    </Stack.Navigator>\\n    // codeblock-focus-end\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <RootStack />\\n    </NavigationContainer>\\n  );\\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { NavigationContainer } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nfunction HomeScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n    </View>\\n  );\\n}\\n\\nfunction DetailsScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Details Screen</Text>\\n    </View>\\n  );\\n}\\n\\nconst Stack = createNativeStackNavigator();\\n\\nfunction RootStack() {\\n  return (\\n    // codeblock-focus-start\\n    <Stack.Navigator\\n      initialRouteName=\"Home\"\\n      // highlight-start\\n      screenOptions={{\\n        headerStyle: { backgroundColor: 'tomato' },\\n      }}\\n      // highlight-end\\n    >\\n      <Stack.Screen\\n        name=\"Home\"\\n        component={HomeScreen}\\n        options={{ title: 'Overview' }}\\n      />\\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\\n    </Stack.Navigator>\\n    // codeblock-focus-end\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <RootStack />\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up NavigationContainer with Ref - React Navigation JavaScript\nDESCRIPTION: Establishes the root NavigationContainer and assigns its ref to a value imported from RootNavigation, enabling global control of navigation functions. This setup is necessary for managing navigation outside of direct component trees and should be used in the main app entry point. All navigation actions dispatched via the ref rely on this being correctly initialized.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// App.js\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { navigationRef } from './RootNavigation';\n\nexport default function App() {\n  return (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Screens Using CommonActions.preload - React Navigation Static - JavaScript\nDESCRIPTION: This static navigation example showcases preloading a screen in the background before navigating to it using CommonActions.preload. It relies on @react-navigation/native's createStaticNavigation, useNavigation, and CommonActions, as well as @react-navigation/stack and a Button component. Parameters include the screen name (e.g., 'Profile') and optional route params (e.g., user: 'jane'). The snippet demonstrates the difference in UI response times and highlights how event listeners and timing logic can be used to measure preload performance. Limitations apply to what preloaded screens can do until navigation completes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  CommonActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(\n            CommonActions.preload('Profile', { user: 'jane' })\n          );\n          // codeblock-focus-end\n        }}\n      >\n        Preload Profile\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  const [startTime] = React.useState(Date.now());\n  const [endTime, setEndTime] = React.useState(null);\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      setEndTime(Date.now());\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [navigation]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Text>Preloaded for: {endTime ? endTime - startTime : 'N/A'}ms</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: Passing Minimal IDs as Params in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates the recommended practice for passing parameters: only include the minimal data required to identify the screen's state or content, such as an ID (`userId`). The screen component should then use this ID to fetch the full data object from a global store or data source.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate('Profile', { userId: 'jane' });\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook (Static Config) in React Native\nDESCRIPTION: Illustrates the use of the `useFocusEffect` hook from React Navigation in a statically configured setup. It wraps a `React.useCallback` to perform actions when the screen focuses (alert 'Screen was focused') and cleans up when it unfocuses (alert 'Screen was unfocused').\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/function-after-focusing-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport {\n  useFocusEffect,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  useFocusEffect(\n    React.useCallback(() => {\n      alert('Screen was focused');\n      // Do something when the screen is focused\n      return () => {\n        alert('Screen was unfocused');\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <View />;}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Header Button Interacting with Screen Component using Dynamic Configuration\nDESCRIPTION: Shows how to implement a header button that interacts with screen component state using the useNavigation hook and setOptions. The button increments a counter in the screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/header-buttons.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nconst Stack = createNativeStackNavigator();\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    // Use `setOptions` to update the button that we previously specified\n    // Now the button includes an `onPress` handler to update the count\n    navigation.setOptions({\n      headerRight: () => (\n        <Button onPress={() => setCount((c) => c + 1)}>Update count</Button>\n      ),\n    });\n  }, [navigation]);\n\n  return <Text>Count: {count}</Text>;\n}\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          // Add a placeholder button without the `onPress` to avoid flicker\n          headerRight: () => <Button>Update count</Button>,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Incoming URLs - React Navigation - JavaScript\nDESCRIPTION: Demonstrates using a filter function within the linking configuration to exclude certain URLs, such as authentication redirects, from being handled as navigation events. The filter receives the incoming URL and returns a boolean to indicate handling. Only supported on native platforms, as web always handles the current page URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['example://', 'https://example.com'],\n  // highlight-next-line\n  filter: (url) => !url.includes('+expo-auth-session'),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Helper Methods for Screen Push\nDESCRIPTION: Example of using the push navigation method to add a new screen to the top of the stack and navigate to it, passing route name and parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.push('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Going Back to Specific Screens with popTo and popToTop in React Navigation (JavaScript)\nDESCRIPTION: This snippet showcases advanced stack navigation in React Native where you can jump back multiple screens using navigation.popTo('RouteName') or navigation.popToTop(). The setup is similar to the first snippet, including two main screens and navigation stack initialization. DetailsScreen includes options to goBack, pop to the Home screen, or return to the stack's root, allowing flexible navigation control. This approach requires the same dependencies as before and assumes the screen names provided match those defined in the stack. Inputs are user-triggered button presses, and outputs are altered navigation stack states based on the invoked method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { Button } from '@react-navigation/elements';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Details')}>\\n        Go to Details\\n      </Button>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nfunction DetailsScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Details Screen</Text>\\n      <Button onPress={() => navigation.push('Details')}>\\n        Go to Details... again\\n      </Button>\\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\\n      // highlight-start\\n      <Button onPress={() => navigation.popTo('Home')}>Go to Home</Button>\\n      <Button onPress={() => navigation.popToTop()}>\\n        Go back to first screen in stack\\n      </Button>\\n      // highlight-end\\n    </View>\\n  );\\n}\\n// codeblock-focus-end\\n\\nconst RootStack = createNativeStackNavigator({\\n  initialRouteName: 'Home',\\n  screens: {\\n    Home: HomeScreen,\\n    Details: DetailsScreen,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Initial URL and Platform before Restoring Navigation State (React Native, JavaScript)\nDESCRIPTION: Illustrates how to defer navigation state restoration based on the current platform and presence of an initial deep link. The snippet retrieves the initial URL using Linking API, and restores state only if not running on web and no deep link is available. React Native's Linking and Platform APIs are required.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst initialUrl = await Linking.getInitialURL();\\n\\nif (Platform.OS !== 'web' && initialUrl == null) {\\n  // Only restore state if there's no deep link and we're not on web\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling navigation initialization in React Navigation\nDESCRIPTION: This snippet demonstrates how to handle navigation initialization safely, checking if the navigation is ready before performing actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating-without-navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// RootNavigation.js\n\nimport * as React from 'react';\n\nexport const navigationRef = createNavigationContainerRef();\n\nexport function navigate(name, params) {\n  if (navigationRef.isReady()) {\n    // Perform navigation if the react navigation is ready to handle actions\n    navigationRef.navigate(name, params);\n  } else {\n    // You can decide what to do if react navigation is not ready\n    // You can ignore this, or add these actions to a queue you can call later\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation State for Unmatched Paths - React Navigation (JavaScript)\nDESCRIPTION: This code represents a resolved navigation state object after path resolution in React Navigation, specifically when an unmatched route (such as '/library' or '/settings/notification') leads to the NotFound screen. It is typically used for debugging or for custom navigation state handling and presumes the state structure as produced by the React Navigation routing logic. The provided state can be consumed by navigation containers or for programmatic inspection.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [{ name: 'NotFound' }],\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Screens using React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the navigation.navigate method inside a React Native functional component to transition to a different screen and pass parameters. It requires the react-navigation library and the receiving screen must be registered with a matching name in the navigator. The code expects the navigation prop to be available, typically in a screen component, and accepts a destination route name and params object as arguments through the navigate function. The output is a UI button that, when pressed, triggers navigation to the 'Profile' screen, passing a names array as route params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction HomeScreen({ navigation: { navigate } }) {\\n  return (\\n    <View>\\n      <Text>This is the home screen of the app</Text>\\n      <Button\\n        onPress={() =>\\n          navigate('Profile', { names: ['Brent', 'Satya', 'Micha≈õ'] })\\n        }\\n        title=\"Go to Brent's profile\"\\n      />\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Drawer with DrawerActions in React Navigation - JavaScript (Dynamic Navigator)\nDESCRIPTION: This code illustrates the use of DrawerActions to open, toggle, and jump to profiles from the drawer menu within a dynamically configured React Navigation setup. It uses NavigationContainer and createDrawerNavigator to define navigation structure, and includes custom drawer content, Home, and Profile screens. Dependencies are the same as the static version and focus is placed on dispatching DrawerActions.openDrawer() from the HomeScreen using useNavigation. It shows integration of drawer actions in a navigation container at runtime.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Button } from '@react-navigation/elements';\\nimport {\\n  NavigationContainer,\\n  DrawerActions,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport {\\n  createDrawerNavigator,\\n  DrawerContentScrollView,\\n  DrawerItemList,\\n  DrawerItem,\\n} from '@react-navigation/drawer';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home!</Text>\\n      <Button\\n        onPress={() => {\\n          // codeblock-focus-start\\n          navigation.dispatch(DrawerActions.openDrawer());\\n          // codeblock-focus-end\\n        }}\\n      >\\n        Open Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\\n        Toggle Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\\n        Jump to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen({ route }) {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile!</Text>\\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\\n    </View>\\n  );\\n}\\n\\nfunction CustomDrawerContent(props) {\\n  return (\\n    <DrawerContentScrollView {...props}>\\n      <DrawerItemList {...props} />\\n      <DrawerItem\\n        label=\"Close drawer\"\\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\\n      />\\n      <DrawerItem\\n        label=\"Toggle drawer\"\\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\\n      />\\n    </DrawerContentScrollView>\\n  );\\n}\\n\\nconst Drawer = createDrawerNavigator();\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <Drawer.Navigator\\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\\n      >\\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\\n      </Drawer.Navigator>\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Tabbar with Static Navigation (React Navigation)\nDESCRIPTION: This example uses React Navigation to hide the tab bar on the 'Profile' and 'Settings' screens. It defines a `HomeTabs` navigator with tabs for 'Home', 'Feed', and 'Notifications'.  The `RootStack` navigator includes 'HomeTabs', 'Profile', and 'Settings', where 'Profile' and 'Settings' will not display the tab bar because they are outside the tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hiding-tabbar-in-screens.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction EmptyScreen() {\n  return <View />;\n}\n\nfunction Home() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Home: Home,\n    Feed: EmptyScreen,\n    Notifications: EmptyScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeTabs,\n    Profile: EmptyScreen,\n    Settings: EmptyScreen,\n  },\n});\n\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Navigation AuthContext Implementation\nDESCRIPTION: This example showcases authentication implementation using AuthContext and React.useReducer in a React Native application with dynamic navigation (using NavigationContainer). It relies on expo-secure-store to persist user tokens securely. The code manages the authentication context, defines a reducer to handle authentication state changes (loading, sign-in, sign-out), and exposes methods for sign-in, sign-out, and sign-up functionalities.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// codeblock-focus-start\nimport * as React from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\n// codeblock-focus-end\nimport { Text, TextInput, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nconst AuthContext = React.createContext();\n\nfunction SplashScreen() {\n  return (\n    <View>\n      <Text>Loading...</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen() {\n  const { signOut } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <Text>Signed in!</Text>\n      <Button onPress={signOut}>Sign out</Button>\n    </View>\n  );\n}\n\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button onPress={() => signIn({ username, password })}>Sign in</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\n// codeblock-focus-start\nexport default function App() {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        // Restore token stored in `SecureStore` or any other encrypted storage\n        userToken = await SecureStore.getItemAsync('userToken');\n      } catch (e) {\n        // Restoring token failed\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n```\n\n----------------------------------------\n\nTITLE: Blocking Navigation while Editing with a Custom StackRouter (JavaScript)\nDESCRIPTION: This code customizes a StackRouter to prevent navigating to a new route when the current route's `params.isEditing` flag is true. By overriding `getStateForAction`, it inspects whether the action would push a new route and blocks the update by returning the current state if editing is in progress. It relies on the `@react-navigation/native` package and a StackRouter instance. It expects a navigation state and action, and will only apply the intervention under specific conditions, so it does not universally prevent navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackRouter } from '@react-navigation/native';\n\nconst MyStackRouter = (options) => {\n  const router = StackRouter(options);\n\n  return {\n    ...router,\n    getStateForAction(state, action, options) {\n      const result = router.getStateForAction(state, action, options);\n\n      if (\n        result != null &&\n        result.index > state.index &&\n        state.routes[state.index].params?.isEditing\n      ) {\n        // Returning the current state means that the action has been handled, but we don't have a new state\n        return state;\n      }\n\n      return result;\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative Navigation Structure: Stack Navigators within Tabs (React Navigation/JavaScript)\nDESCRIPTION: This snippet presents an alternative, often preferred, navigation structure. Instead of nesting a Tab navigator inside a Stack navigator, it nests individual Stack navigators (`FeedStackScreen`, `ProfileStackScreen`) inside each screen of the `Tab.Navigator` (`HomeTabs`). This structure simplifies managing headers and potentially avoids the need for dynamic option setting based on child state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options-resolution.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeedStack = createNativeStackNavigator();\n\nfunction FeedStackScreen() {\n  return (\n    <FeedStack.Navigator>\n      <FeedStack.Screen name=\"Feed\" component={FeedScreen} />\n      {/* other screens */}\n    </FeedStack.Navigator>\n  );\n}\n\nconst ProfileStack = createNativeStackNavigator();\n\nfunction ProfileStackScreen() {\n  return (\n    <ProfileStack.Navigator>\n      <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n      {/* other screens */}\n    </ProfileStack.Navigator>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedStackScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst RootStack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator>\n        <RootStack.Screen name=\"Home\" component={HomeTabs} />\n        <RootStack.Screen name=\"Settings\" component={SettingsScreen} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Colors in Custom Component with useTheme Hook - JavaScript\nDESCRIPTION: Provides a pattern for utilizing the useTheme hook inside a app component to read active theme color values (from NavigationContainer's provided context). Shows how to set background and text color styles in a TouchableOpacity button according to the current theme. Dependencies: React, react-native, useTheme from @react-navigation/native. Inputs: none except current theme context; outputs rendered button with theme-driven styles.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/themes.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { TouchableOpacity, Text } from 'react-native';\\nimport { useTheme } from '@react-navigation/native';\\n\\n// Black background and white text in light theme, inverted on dark theme\\nfunction MyButton() {\\n  const { colors } = useTheme();\\n\\n  return (\\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\\n      <Text style={{ color: colors.text }}>Button!</Text>\\n    </TouchableOpacity>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Navigator (Dynamic Configuration)\nDESCRIPTION: Illustrates setting up the Drawer Navigator using a dynamic configuration. It imports `createDrawerNavigator`, creates a `Drawer` instance, and defines screens (`HomeScreen`, `ProfileScreen`) using `<Drawer.Screen>` components within a `<Drawer.Navigator>`. The entire setup is wrapped in a `NavigationContainer`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator>\n      <Drawer.Screen name=\"Home\" component={HomeScreen} />\n      <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n    </Drawer.Navigator>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React Navigation Elements Header Component\nDESCRIPTION: Demonstrates importing and rendering the `Header` component from `@react-navigation/elements`. It shows a minimal setup within a React Native application using `NavigationContainer` and `SafeAreaProviderCompat` for safe area handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { NavigationContainer } from '@react-navigation/native';\n// codeblock-focus-start\nimport { Header } from '@react-navigation/elements';\n\nfunction MyHeader() {\n  return <Header title=\"My app\" />;\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <SafeAreaProviderCompat>\n        <MyHeader />\n      </SafeAreaProviderCompat>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to Header with Static Configuration in React Navigation\nDESCRIPTION: Demonstrates how to add a simple button to the right side of a header in React Navigation using static configuration with createNativeStackNavigator. The button shows an alert when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerRight: () => (\n          <Button onPress={() => alert('This is a button!')}>Info</Button>\n        ),\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Dynamically Registering Screens in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to group multiple screen components in JavaScript objects and use a dynamic mapping technique to define screens in a navigator. By spreading \\\"commonScreens\\\" and conditionally including either \\\"userScreens\\\" or \\\"authScreens\\\" based on authentication state, the code reduces code duplication and simplifies screen management. Requires prior definition of screen components and a Stack.Navigator; expects boolean \\\"isLoggedIn\\\"; outputs a dynamic set of screens. This reduces unnecessary nesting and improves maintainability.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/nesting-navigators.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Define multiple groups of screens in objects like this\nconst commonScreens = {\n  Help: HelpScreen,\n};\n\nconst authScreens = {\n  SignIn: SignInScreen,\n  SignUp: SignUpScreen,\n};\n\nconst userScreens = {\n  Home: HomeScreen,\n  Profile: ProfileScreen,\n};\n\n// Then use them in your components by looping over the object and creating screen configs\n// You could extract this logic to a utility function and reuse it to simplify your code\n<Stack.Navigator>\n  {Object.entries({\n    // Use the screens normally\n    ...commonScreens,\n    // Use some screens conditionally based on some condition\n    ...(isLoggedIn ? userScreens : authScreens),\n  }).map(([name, component]) => (\n    <Stack.Screen name={name} component={component} />\n  ))}\n</Stack.Navigator>;\n```\n\n----------------------------------------\n\nTITLE: Dispatching DrawerActions (Static Config) in React Navigation JavaScript\nDESCRIPTION: Illustrates using `navigation.dispatch()` with specific `DrawerActions` (`openDrawer`, `closeDrawer`, `toggleDrawer`) to control the drawer state from both screen components and custom drawer content. This approach is shown within a static navigation configuration using `createStaticNavigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Navigation dispatcher\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open drawer\n      </Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n      // codeblock-focus-end\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Left Component in React Navigation\nDESCRIPTION: Example demonstrating how to customize the left header component with a map icon while maintaining the back button visibility and title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nheaderLeft: () => (\n      <MaterialCommunityIcons name=\"map\" color=\"gray\" size={36} />\n    ),\n    headerBackVisible: true,\n    headerBackTitle: 'Back',\n```\n\n----------------------------------------\n\nTITLE: Updating Screen Options Dynamically using 'navigation.setOptions' (JavaScript)\nDESCRIPTION: Shows how to use the `navigation.setOptions` method within a component (e.g., in a Button's `onPress` handler) to update the current screen's options after it has been rendered. This allows for runtime changes based on user interaction or state, requiring access to the `navigation` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n<Button\n  title=\"Update options\"\n  onPress={() => navigation.setOptions({ title: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Android Back Button Press Conditionally in a React Navigation Screen (JavaScript)\nDESCRIPTION: This React component demonstrates how to implement custom behavior for the Android hardware back button. It uses the `useFocusEffect` hook to ensure the listener is active only when the screen is focused. Inside the effect, it registers a listener using `BackHandler.addEventListener`. The `onBackPress` function checks if a 'selection mode' is enabled. If true, it disables the mode and returns `true` to prevent the default back navigation (popping the screen). If false, it returns `false`, allowing the event to bubble up and trigger the default React Navigation back action. The effect's cleanup function removes the listener when the screen loses focus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction ScreenWithCustomBackBehavior() {\n  // ...\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const onBackPress = () => {\n        if (isSelectionModeEnabled()) {\n          disableSelectionMode();\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      BackHandler.addEventListener('hardwareBackPress', onBackPress);\n\n      return () =>\n        BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n    }, [isSelectionModeEnabled, disableSelectionMode])\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top in a Functional Component using useScrollToTop (React Native)\nDESCRIPTION: This snippet shows the basic usage of the `useScrollToTop` hook within a React functional component. It creates a ref using `React.useRef`, passes this ref to the `useScrollToTop` hook provided by `@react-navigation/native`, and assigns the ref to a `ScrollView` component. This setup enables the standard native behavior where tapping the active tab scrolls the associated scroll view to the top.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-scroll-to-top.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  useScrollToTop(ref);\n\n  return <ScrollView ref={ref}>{/* content */}</ScrollView>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor with JavaScript Programmatic Navigation\nDESCRIPTION: This snippet demonstrates programmatic navigation in a web context using JavaScript. An `<a>` tag's `onClick` event handler directly manipulates `window.location.href` to navigate to 'details.html'. This is presented as analogous to using the `navigation` object in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<a\n  onClick={() => {\n    window.location.href = 'details.html';\n  }}\n>\n  Go to Details\n</a>\n```\n\n----------------------------------------\n\nTITLE: Combining Navigation Props with CompositeScreenProps (TypeScript)\nDESCRIPTION: This code snippet illustrates how to combine navigation props from multiple navigators using the `CompositeScreenProps` type. It's useful when nesting navigators (e.g., a tab inside a stack) to provide a unified type for the `navigation` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CompositeScreenProps } from '@react-navigation/native';\nimport type { BottomTabScreenProps } from '@react-navigation/bottom-tabs';\nimport type { StackScreenProps } from '@react-navigation/stack';\n\ntype ProfileScreenProps = CompositeScreenProps<\n  BottomTabScreenProps<TabParamList, 'Profile'>,\n  StackScreenProps<StackParamList>\n>;\n```\n\n----------------------------------------\n\nTITLE: Nesting Navigators for Dynamic Paths (React Navigation, JavaScript)\nDESCRIPTION: These snippets demonstrate nesting a Tab Navigator within a Stack Navigator, placing 'Chat' inside 'Home', and 'Profile' at the root. This affects deep link configuration, requiring the linking config to mirror navigator nesting for proper path resolution. Prerequisites include definition of 'HomeScreen', 'ChatScreen', and 'ProfileScreen'. This structure is essential for deep link routing to screens inside nested navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n\nfunction HomeScreen() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Chat\" component={ChatScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation with useNavigation Hook in Static Stack - React Navigation (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the useNavigation hook from @react-navigation/native with a static stack navigator setup created by createStaticNavigation and createNativeStackNavigator. Components like MyBackButton and HomeScreen utilize the hook to access navigation methods, such as goBack and navigate. Essential dependencies include react, react-native, @react-navigation/elements, and @react-navigation/native. The Stack navigator is statically created with screens for Home and Profile, then passed to the Navigation component. Expected input is user interaction triggering navigation, and it outputs navigation actions like moving between screens. Limitations include static routes defined at creation and reliance on React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { useNavigation } from '@react-navigation/native';\n\nfunction MyBackButton() {\n  // highlight-next-line\n  const navigation = useNavigation();\n\n  return (\n    <Button\n      onPress={() => {\n        navigation.goBack();\n      }}\n    >\n      Back\n    </Button>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the home screen of the app</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <MyBackButton />\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Creating AuthContext in React\nDESCRIPTION: This snippet creates a React context named AuthContext which will be used to provide authentication-related methods and state to components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nconst AuthContext = React.createContext();\n```\n\n----------------------------------------\n\nTITLE: Setting up NavigationContainer with ref in React Navigation\nDESCRIPTION: This snippet demonstrates how to set up the NavigationContainer with a ref in the main App component. The ref is imported from a separate RootNavigation module.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { navigationRef } from './RootNavigation';\n\nexport default function App() {\n  return (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Tab Press Behavior in React Navigation (JavaScript)\nDESCRIPTION: This code snippet shows how to prevent the default behavior when a tab is pressed in a Bottom Tab Navigator. It uses the useEffect hook to add a listener for the 'tabPress' event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Navigation with Stack Navigator in React Navigation\nDESCRIPTION: Creates a basic navigation setup using NavigationContainer and Stack Navigator. This configures a two-screen application with 'Home' and 'Profile' screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Bottom Tab Navigator Setup (JavaScript/React Native)\nDESCRIPTION: Provides a basic example of setting up a bottom tab navigator using `createBottomTabNavigator` from `@react-navigation/bottom-tabs`. It defines two simple functional components (`HomeScreen`, `SettingsScreen`) as tabs within a `NavigationContainer`. This snippet demonstrates the fundamental structure for tab navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Back Button Logic with Static Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to implement custom Android hardware back button handling within a screen managed by a statically configured React Navigation stack (`createStaticNavigation`). It uses the `useFocusEffect` hook to add and remove a listener via React Native's `BackHandler`. The listener checks if a 'selection mode' is active; if so, it deactivates the mode and returns `true` to prevent the default back action (popping the screen). Otherwise, it returns `false` to allow the default behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, BackHandler, StyleSheet } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { PlatformPressable, Button } from '@react-navigation/elements';\n\nconst listData = [{ key: 'Apple' }, { key: 'Orange' }, { key: 'Carrot' }];\n\n// codeblock-focus-start\nfunction ScreenWithCustomBackBehavior() {\n  // codeblock-focus-end\n  const [selected, setSelected] = React.useState(listData[0].key);\n  const [isSelectionModeEnabled, setIsSelectionModeEnabled] =\n    React.useState(false);\n\n  // codeblock-focus-start\n  // ...\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const onBackPress = () => {\n        if (isSelectionModeEnabled) {\n          setIsSelectionModeEnabled(false);\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      const subscription = BackHandler.addEventListener(\n        'hardwareBackPress',\n        onBackPress\n      );\n\n      return () => subscription.remove();\n    }, [isSelectionModeEnabled])\n  );\n  // codeblock-focus-end\n\n  return (\n    <View style={styles.container}>\n      {listData.map((item) => (\n        <>\n          {isSelectionModeEnabled ? (\n            <PlatformPressable\n              onPress={() => {\n                setSelected(item.key);\n              }}\n              style={{\n                textDecorationLine: item.key === selected ? 'underline' : '',\n              }}\n            >\n              <Text\n                style={{\n                  textDecorationLine: item.key === selected ? 'underline' : '',\n                  ...styles.text,\n                }}\n              >\n                {item.key}\n              </Text>\n            </PlatformPressable>\n          ) : (\n            <Text style={styles.text}>\n              {item.key === selected ? 'Selected: ' : ''}\n              {item.key}\n            </Text>\n          )}\n        </>\n      ))}\n      <Button\n        onPress={() => setIsSelectionModeEnabled(!isSelectionModeEnabled)}\n      >\n        Toggle selection mode\n      </Button>\n      <Text>Selection mode: {isSelectionModeEnabled ? 'ON' : 'OFF'}</Text>\n    </View>\n  );\n  // codeblock-focus-start\n\n  // ...\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    CustomScreen: ScreenWithCustomBackBehavior,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 20,\n    marginBottom: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Title Formatting (Dynamic)\nDESCRIPTION: Example of customizing the web document title using the `documentTitle` prop on the `<NavigationContainer>` component. It provides a custom `formatter` function that takes screen options and route, returning a formatted string (e.g., appending the app name).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\n  // highlight-start\n  documentTitle={{\n    formatter: (options, route) =>\n      `${options?.title ?? route?.name} - My Cool App`,\n  }}\n  // highlight-end\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Stack Navigator in JavaScript\nDESCRIPTION: Demonstrates how to create a stack navigator instance using `createNativeStackNavigator`. The returned object (`Stack` in this case) contains both `Navigator` and `Screen` components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator(); // Stack contains Screen & Navigator properties\n```\n\n----------------------------------------\n\nTITLE: Custom Bottom Tabs Animation with Static Navigation\nDESCRIPTION: This code demonstrates a custom animation for bottom tabs in React Navigation using a static navigator. It defines custom `transitionSpec` and `sceneStyleInterpolator` options at the `screenOptions` level, applying the same animation to all tabs. It utilizes `createStaticNavigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, Easing } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Profile!</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst RootTabs = createBottomTabNavigator({\n  screenOptions: {\n    transitionSpec: {\n      animation: 'timing',\n      config: {\n        duration: 150,\n        easing: Easing.inOut(Easing.ease),\n      },\n    },\n    sceneStyleInterpolator: ({ current }) => ({\n      sceneStyle: {\n        opacity: current.progress.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [0, 1, 0],\n        }),\n      },\n    }),\n  },\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Router with useNavigationBuilder in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a custom router instead of the default TabRouter in a navigator created with useNavigationBuilder. By importing a user-defined router and supplying it to useNavigationBuilder, developers can implement custom navigation logic, route switching, and state management within the navigation framework. Dependencies include a custom router module ('./MyRouter') and React Navigation. This pattern is optimal for advanced cases where default navigation logic is not sufficient, but it requires the custom router to match navigation API requirements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MyRouter from './MyRouter';\\n\\n// ...\\n\\nconst { state, descriptors, navigation, NavigationContent } =\\n  useNavigationBuilder(MyRouter, {\\n    initialRouteName,\\n    backBehavior,\\n    children,\\n    screenOptions,\\n  });\\n\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Navigating with Button to a Screen with Params in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates using the Button component to navigate programmatically between screens while passing route parameters. The Button receives 'screen' and 'params' props that will be interpreted by the navigation system; the child ('Go to Profile') becomes the button text. Requires React Navigation, React Native, and associated navigation setup. Inputs are the screen name and navigation params; triggers navigation when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n<Button screen=\\\"Profile\\\" params={{ userId: 'jane' }}>\n  Go to Profile\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Updating Screen Options using navigation.setOptions in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the 'navigation.setOptions' method to update screen options from within a component. It shows updating the screen title when a button is pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<Button onPress={() => navigation.setOptions({ title: 'Updated!' })}>\n  Update options\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Params for a Screen - React Navigation (JavaScript, JSX Syntax)\nDESCRIPTION: This snippet demonstrates passing initial parameters to a stack screen in JSX syntax by defining the initialParams prop on a Stack.Screen component. The initialParams will be provided to the route if navigation does not supply params, and are shallow merged with any supplied params. Requires react-navigation/native-stack and proper JSX usage. Inputs are the initialParams prop in the JSX element; output is the component with default params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Details\"\n  component={DetailsScreen}\n  // highlight-next-line\n  initialParams={{ itemId: 42 }}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Navigating Back from Specific Route with CommonActions.goBack in JavaScript\nDESCRIPTION: Demonstrates dispatching a customized `goBack` action to specifically target a route. It spreads the result of `CommonActions.goBack()` and adds a `source` property (the key of the route initiating the action) and a `target` property (the key of the navigator state containing the source route).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.goBack(),\n  source: route.key,\n  target: state.key,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme in Dynamic Navigation Configuration\nDESCRIPTION: This code snippet shows how to create and apply a custom theme to a dynamic navigation configuration using NavigationContainer in React Navigation. It modifies the DefaultTheme colors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  useNavigation,\n} from '@react-navigation/native';\n\nconst MyTheme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    background: 'rgb(140, 201, 125)',\n    primary: 'rgb(255, 45, 85)',\n  },\n};\n\nexport default function App() {\n  return (\n    <NavigationContainer theme={MyTheme}>\n      <Drawer.Navigator initialRouteName=\"Root\">\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen\n          name=\"Root\"\n          component={Root}\n          options={{ headerShown: false }}\n        />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with CommonActions in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to reset the navigation state in React Navigation by dispatching a reset action via CommonActions. It replaces the existing navigation state with a new stack specified by the routes array, controlling which screens are present and focused. Requires '@react-navigation/native' and access to a navigation object. The main parameter is a state object including 'index' and 'routes'; output is a new navigation state reflecting the specified routes. Beware that existing screens will be removed unless explicitly preserved.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.reset({\n    index: 1,\n    routes: [\n      { name: 'Home' },\n      {\n        name: 'Profile',\n        params: { user: 'jane' },\n      },\n    ],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Back Button in Stack Navigator\nDESCRIPTION: Demonstrates how to customize the back button's appearance and behavior using headerBackTitle and headerBackTitleStyle options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/header-buttons.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen\n    name=\"Details\"\n    component={DetailsScreen}\n    options={{\n      headerBackTitle: 'Custom Back',\n      headerBackTitleStyle: { fontSize: 30 },\n    }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Navigation Component with useNavigation Hook\nDESCRIPTION: Improved version of the GoToButton component using the useNavigation hook from @react-navigation/native. This approach eliminates the need to pass navigation prop explicitly through component hierarchy.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/connecting-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nfunction GoToButton({ screenName }) {\n  const navigation = useNavigation();\n\n  return (\n    <Button\n      title={`Go to ${screenName}`}\n      onPress={() => navigation.navigate(screenName)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Navigator Configuration in React Navigation\nDESCRIPTION: Demonstrates how to configure nested navigators using bottom tabs within a stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/static-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Groups: GroupsScreen,\n    Chats: ChatsScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeTabs,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Drawer Programmatically in React Navigation\nDESCRIPTION: This code shows how to programmatically open a drawer using the navigation.dispatch method with DrawerActions.openDrawer(). It demonstrates the button implementation inside a React component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n  Open drawer\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation with useNavigation Hook in Dynamic Stack - React Navigation (JavaScript)\nDESCRIPTION: This code snippet shows how to employ the useNavigation hook in a dynamic stack navigator using React Navigation in a React Native app. NavigationContainer and createNativeStackNavigator are used to manage dynamic routing, while functional components like MyBackButton retrieve navigation via the hook to perform navigation actions. HomeScreen uses the navigation prop for screen transitions. Dependencies include react, react-native, @react-navigation/elements, @react-navigation/native, and @react-navigation/native-stack. Inputs involve user actions (e.g., pressing buttons) to trigger navigation; outputs correspond to navigation transitions. The pattern supports dynamic addition of screens but requires proper nesting in NavigationContainer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { useNavigation } from '@react-navigation/native';\n\nfunction MyBackButton() {\n  // highlight-next-line\n  const navigation = useNavigation();\n\n  return (\n    <Button\n      onPress={() => {\n        navigation.goBack();\n      }}\n    >\n      Back\n    </Button>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen({ navigation: { navigate } }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the home screen of the app</Text>\n      <Button onPress={() => navigate('Profile')}>Go to Profile</Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <MyBackButton />\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing on Focus using useFocusEffect in React Native\nDESCRIPTION: Demonstrates the basic usage of the `useFocusEffect` hook in a React functional component. It utilizes `React.useCallback` to wrap the effect logic, ensuring it only re-runs when the specified dependency (`userId`) changes. The effect subscribes to an API (`API.subscribe`) when the screen is focused and returns a cleanup function to unsubscribe when the screen blurs or unmounts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-focus-effect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile({ userId }) {\n  const [user, setUser] = React.useState(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, (user) => setUser(user));\n\n      return () => unsubscribe();\n    }, [userId])\n  );\n\n  return <ProfileContent user={user} />;\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration with Custom Parameter Stringification (JS)\nDESCRIPTION: This code snippet demonstrates how to customize both parsing and stringification of parameters in React Navigation.  By providing custom `parse` and `stringify` functions, you can fully control how URL parameters are converted to and from JavaScript data types. This allows you to use custom date formats or other complex data representations in your URLs. In this example, the date parameter is parsed as a timestamp and stringified as a DD-MM-YYYY formatted date.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: {\n      path: 'chat/:date',\n      parse: {\n        date: (date) => new Date(date).getTime(),\n      },\n      stringify: {\n        date: (date) => {\n          const d = new Date(date);\n\n          return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();\n        },\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Basic NavigationContainer Link Configuration\nDESCRIPTION: Basic setup of NavigationContainer with linking configuration that specifies prefixes and configuration for matching screens with paths.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst linking = {\n  prefixes: [\n    /* your linking prefixes */\n  ],\n  config: {\n    /* configuration for matching screens with paths */\n  },\n};\n\nfunction App() {\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Card Style Interpolators in React Navigation (JavaScript/JSX)\nDESCRIPTION: Shows how to import `CardStyleInterpolators` from `@react-navigation/stack` and apply a specific interpolator, like `forFadeFromBottomAndroid`, to the `cardStyleInterpolator` option of a `Stack.Screen`. This customizes the screen's card animation during transitions, here mimicking the Android Oreo style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nimport { CardStyleInterpolators } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    title: 'Profile',\n    cardStyleInterpolator: CardStyleInterpolators.forFadeFromBottomAndroid,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Listeners to Navigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to add listeners to all screens in a navigator using the 'screenListeners' prop. It shows how to listen to the 'state' event and log state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screenListeners: {\n    state: (e) => {\n      // Do something with the state\n      console.log('state changed', e.data);\n    },\n  },\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator\n  screenListeners={{\n    state: (e) => {\n      // Do something with the state\n      console.log('state changed', e.data);\n    },\n  }}\n>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Style Interpolators\nDESCRIPTION: Shows how to implement UIKit style header animations where the title fades into the back button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeaderStyleInterpolators } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    title: 'Profile',\n    headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial URL Handling for Deep Linking (React Navigation)\nDESCRIPTION: Example of customizing the getInitialURL function to handle both deep linking and Firebase notifications in the linking configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n<Navigation\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    // highlight-start\n    async getInitialURL() {\n      // Check if app was opened from a deep link\n      const url = await Linking.getInitialURL();\n\n      if (url != null) {\n        return url;\n      }\n\n      // Check if there is an initial firebase notification\n      const message = await messaging().getInitialNotification();\n\n      // Get the `url` property from the notification which corresponds to a screen\n      // This property needs to be set on the notification payload when sending it\n      return message?.data?.url;\n    },\n    // highlight-end\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Custom Header Component in React Navigation Native Stack (JavaScript/JSX)\nDESCRIPTION: This example shows how to provide a completely custom header component by specifying a header render function in React Navigation. The function receives the navigation, route, options, and back objects, computes the header title, and renders a MyHeader component with custom controls and styles. Dependencies: '@react-navigation/elements' (getHeaderTitle), the custom MyHeader and MyBackButton components, and React Navigation's stack navigation. The function must return a valid React Element; receives current navigation context as parameters, and can use options such as headerStyle and handle navigation events such as goBack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\\n\\n// ..\\n\\nheader: ({ navigation, route, options, back }) => {\\n  const title = getHeaderTitle(options, route.name);\\n\\n  return (\\n    <MyHeader\\n      title={title}\\n      leftButton={\\n        back ? <MyBackButton onPress={navigation.goBack} /> : undefined\\n      }\\n      style={options.headerStyle}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Linking State Serialization in React Navigation (Static)\nDESCRIPTION: Illustrates how to override the default serialization of navigation state objects into URL paths by providing a custom `getPathFromState` function within the `linking` prop of the `<Navigation>` component. This is crucial for web support when `getStateFromPath` is also customized. The function receives the state and configuration and should return a path string.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n<Navigation\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    // highlight-start\n    getPathFromState(state, config) {\n      // Return a path string here\n      // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n    },\n    // highlight-end\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying OS Color Scheme to Dynamic React Navigation\nDESCRIPTION: This React Native code demonstrates setting the React Navigation theme based on the operating system's preference using dynamic navigation (`NavigationContainer`). It employs the `useColorScheme` hook to get the system's color scheme ('dark' or 'light'). The appropriate theme (`DarkTheme` or `DefaultTheme`) is then passed to the `NavigationContainer` component's `theme` prop. The example includes screen definitions, navigator setup (Drawer and Native Stack), and the main App component wrapping the navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\n// codeblock-focus-start\nimport { View, Text, TouchableOpacity, useColorScheme } from 'react-native';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n  useTheme,\n} from '@react-navigation/native';\n// codeblock-focus-end\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction SettingsScreen({ route, navigation }) {\n  const { user } = route.params;\n  const { colors } = useTheme();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ color: colors.text }}>Settings Screen</Text>\n      <Text style={{ color: colors.text }}>\n        userParam: {JSON.stringify(user)}\n      </Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const { colors } = useTheme();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ color: colors.text }}>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction MyButton() {\n  const { colors } = useTheme();\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\n      <Text style={{ color: colors.text }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const { colors } = useTheme();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ color: colors.text }}>Home Screen</Text>\n      <MyButton />\n      <Button\n        onPress={() =>\n          navigation.navigate('Root', {\n            screen: 'Settings',\n            params: { user: 'jane' },\n          })\n        }\n      >\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\nconst Stack = createNativeStackNavigator();\n\nfunction Root() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n    </Stack.Navigator>\n  );\n}\n\n// codeblock-focus-start\n\nexport default function App() {\n  // highlight-next-line\n  const scheme = useColorScheme();\n\n  return (\n    // highlight-next-line\n    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <Drawer.Navigator>\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen\n          name=\"Root\"\n          component={Root}\n          options={{ headerShown: false }}\n        />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Passing Minimal Data in Navigation Params - JavaScript\nDESCRIPTION: This snippet demonstrates the recommended pattern of passing only the minimal required data (such as an identifier) in navigation params when transitioning to a screen in React Navigation. Dependencies are only the navigation prop provided to the current component. The input is the user ID, and the output is navigation to the 'Profile' screen while keeping navigation state clean and URLs concise. There are no significant limitations other than being applicable in the React Navigation context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.navigate('Profile', { userId: 'jane' });\n```\n\n----------------------------------------\n\nTITLE: Basic NavigationContainer Implementation in React Navigation\nDESCRIPTION: Basic usage example showing how to wrap a Stack navigator with NavigationContainer. This is the fundamental setup required for React Navigation to work in your application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>{/* ... */}</Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Master-Detail Layout with Conditional Drawer Settings\nDESCRIPTION: This snippet demonstrates creating a master-detail layout by conditionally setting `drawerType` and `drawerStyle` based on screen width using `useWindowDimensions`. On large screens, it uses a 'permanent' drawer with default styling and is initially open (`defaultStatus='open'`). On smaller screens, it uses a 'back' type drawer spanning the full width. Requires `@react-navigation/drawer` and `react-native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { useWindowDimensions } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  const dimensions = useWindowDimensions();\n\n  const isLargeScreen = dimensions.width >= 768;\n\n  return (\n    <Drawer.Navigator\n      defaultStatus=\"open\"\n      screenOptions={{\n        drawerType: isLargeScreen ? 'permanent' : 'back',\n        drawerStyle: isLargeScreen ? null : { width: '100%' },\n        overlayColor: 'transparent',\n      }}\n    >\n      {/* Screens */}\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters Back to Previous Screens in React Navigation\nDESCRIPTION: Illustrates how to pass data back to a previous screen when returning from a child screen. The example shows a post creation flow where text entered in CreatePostScreen is passed back to HomeScreen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/params.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen({ navigation, route }) {\n  React.useEffect(() => {\n    if (route.params?.post) {\n      // Post updated, do something with `route.params.post`\n      // For example, send the post to the server\n    }\n  }, [route.params?.post]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        title=\"Create post\"\n        onPress={() => navigation.navigate('CreatePost')}\n      />\n      <Text style={{ margin: 10 }}>Post: {route.params?.post}</Text>\n    </View>\n  );\n}\n\nfunction CreatePostScreen({ navigation, route }) {\n  const [postText, setPostText] = React.useState('');\n\n  return (\n    <>\n      <TextInput\n        multiline\n        placeholder=\"What's on your mind?\"\n        style={{ height: 200, padding: 10, backgroundColor: 'white' }}\n        value={postText}\n        onChangeText={setPostText}\n      />\n      <Button\n        title=\"Done\"\n        onPress={() => {\n          // Pass and merge params back to home screen\n          navigation.navigate({\n            name: 'Home',\n            params: { post: postText },\n            merge: true,\n          });\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setParams with Static Navigation in React Native\nDESCRIPTION: This example demonstrates how to use CommonActions.setParams to update route parameters in a React Navigation static configuration. The code shows a navigation stack with Home and Profile screens where parameters can be updated using the setParams action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  CommonActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button onPress={() => navigation.dispatch(CommonActions.goBack())}>\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeaderButton Component in React Navigation\nDESCRIPTION: This snippet illustrates how to use the HeaderButton component to create a custom button in the header of React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderButton\n  accessibilityLabel=\"More options\"\n  onPress={() => console.log('button pressed')}\n>\n  <MaterialCommunityIcons\n    name=\"dots-horizontal-circle-outline\"\n    size={24}\n    color={tintColor}\n  />\n</HeaderButton>\n```\n\n----------------------------------------\n\nTITLE: Using NavigationContainer with Dynamic Configuration in React Navigation\nDESCRIPTION: Example of how to use NavigationContainer with the dynamic API approach using createNativeStackNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>{/* ... */}</Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Helper Methods for Screen Replacement\nDESCRIPTION: Example of using the replace navigation method to replace the current screen with a new one in the stack, passing route name and parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.replace('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Handling Loading and Sign-Out States in React Navigation Auth Flow\nDESCRIPTION: This example shows how to handle an initial loading state (`state.isLoading`) by displaying a `SplashScreen` component while checking for an authentication token. Once loaded, it conditionally renders either the `SignInScreen` (if `state.userToken` is null) or the `HomeScreen` (if `state.userToken` exists) within a `Stack.Navigator`. It also demonstrates customizing the screen transition animation during sign-out by setting `animationTypeForReplace` to 'pop' based on the `state.isSignout` flag.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/auth-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif (state.isLoading) {\n  // We haven't finished checking the token yet\n  return <SplashScreen />;\n}\n\nreturn (\n  <Stack.Navigator>\n    {state.userToken == null ? (\n      // No token found, user isn't signed in\n      <Stack.Screen\n        name=\"SignIn\"\n        component={SignInScreen}\n        options={{\n          title: 'Sign in',\n          // When logging out, a pop animation feels intuitive\n          // You can remove this if you want the default 'push' animation\n          animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n        }}\n      />\n    ) : (\n      // User is signed in\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    )}\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Params with useRoute in Dynamic React Navigation (JavaScript)\nDESCRIPTION: Illustrates using the `useRoute` hook in a functional component (`MyText`) to retrieve route parameters (`route.params.caption`). This example utilizes React Navigation's dynamic configuration with `NavigationContainer` and `Stack.Navigator`/`Stack.Screen`. Navigation from `HomeScreen` to `ProfileScreen` includes passing a `caption` parameter, accessed in the nested `MyText` component via `useRoute`. Requires React, React Native, and `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/elements`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-route.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { useRoute } from '@react-navigation/native';\n\nfunction MyText() {\n  // highlight-next-line\n  const route = useRoute();\n\n  return <Text>{route.params.caption}</Text>;\n}\n// codeblock-focus-end\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { caption: 'Some caption' });\n        }}\n      >\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <MyText />\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in React Navigation App\nDESCRIPTION: This snippet demonstrates the main App component with authentication logic, including token restoration, sign-in, and sign-out functionality using useReducer and useContext hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\nexport default function App({ navigation }) {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        userToken = await SecureStore.getItemAsync('userToken');\n      } catch (e) {\n        // Restoring token failed\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <Stack.Navigator>\n        {state.userToken == null ? (\n          <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n        ) : (\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        )}\n      </Stack.Navigator>\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators Dynamically with React Navigation (JavaScript)\nDESCRIPTION: This snippet shows the dynamic, component-based approach to creating nested navigators in React Navigation. It defines functional components for stack navigators (`FeedStackScreen`, `ProfileStackScreen`) and a bottom tab navigator (`HomeTabs`). These components are then used within a root stack navigator configured inside the main `App` component, all wrapped by `NavigationContainer`. This is the more conventional method for setting up navigation in React Native apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FeedStackScreen() {\n  return (\n    <FeedStack.Navigator>\n      <FeedStack.Screen name=\"Feed\" component={FeedScreen} />\n      {/* other screens */}\n    </FeedStack.Navigator>\n  );\n}\n\nconst ProfileStack = createNativeStackNavigator();\n\nfunction ProfileStackScreen() {\n  return (\n    <ProfileStack.Navigator>\n      <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n      {/* other screens */}\n    </ProfileStack.Navigator>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedStackScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst RootStack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator>\n        <RootStack.Screen name=\"Home\" component={HomeTabs} />\n        <RootStack.Screen name=\"Settings\" component={SettingsScreen} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Common Options to Screen Groups using 'screenOptions' on Group (JavaScript)\nDESCRIPTION: Shows how to use the `screenOptions` prop on a `Stack.Group` component to apply consistent options (like `headerStyle` or `presentation` mode) to all screens nested within that group. This method simplifies configuration for related sets of screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Group\n    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n  >\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </Stack.Group>\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Settings\" component={Settings} />\n    <Stack.Screen name=\"Share\" component={Share} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Structure for Deep Linking in React Navigation\nDESCRIPTION: Demonstrates how to set up a linking configuration with nested screens to handle deep linking patterns. This example shows how to configure the 'Catalog' screen inside 'Home' to handle the 'item/:id' URL pattern.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  screens: {\n    Home: {\n      screens: {\n        Catalog: {\n          path: 'item/:id',\n          parse: {\n            id: Number,\n          },\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Stack Navigators within Tabs (JavaScript/React Native)\nDESCRIPTION: Demonstrates how to create a separate navigation stack for each tab using `createNativeStackNavigator`. This allows for multi-screen flows within individual tabs. Two stack navigators (`HomeStack`, `SettingsStack`) are defined and then used as the components for the `Tab.Screen`s in the `Tab.Navigator`. The `headerShown: false` option is set on the `Tab.Navigator`'s `screenOptions` to avoid displaying the tab navigator's header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-based-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Details!</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n\nfunction SettingsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n\nconst HomeStack = createNativeStackNavigator();\n\nfunction HomeStackScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen name=\"Home\" component={HomeScreen} />\n      <HomeStack.Screen name=\"Details\" component={DetailsScreen} />\n    </HomeStack.Navigator>\n  );\n}\n\nconst SettingsStack = createNativeStackNavigator();\n\nfunction SettingsStackScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen name=\"Settings\" component={SettingsScreen} />\n      <SettingsStack.Screen name=\"Details\" component={DetailsScreen} />\n    </SettingsStack.Navigator>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator screenOptions={{ headerShown: false }}>\n        <Tab.Screen name=\"HomeStack\" component={HomeStackScreen} />\n        <Tab.Screen name=\"SettingsStack\" component={SettingsStackScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Headers in Multiple Nested Navigators (Static Configuration)\nDESCRIPTION: This code snippet demonstrates how to hide headers in all nested navigators by setting headerShown: false in screenOptions for both the bottom tab navigator and stack navigator in static configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Feed: FeedScreen,\n    Messages: MessagesScreen,\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Home: HomeTabs,\n    Profile: ProfileScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hooks with useNavigationState (Static Config) in React Native\nDESCRIPTION: A full React Native example using static navigation (`createStaticNavigation`). It demonstrates creating custom hooks (`useIsFirstRouteInParent`, `usePreviousRouteName`) that leverage `useNavigationState` to derive information (like whether the current route is the first or the name of the previous route) from the navigation state reactively. Depends on React, React Native, `@react-navigation/native`, `@react-navigation/elements`, and `@react-navigation/native-stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation-state.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport Button from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  useRoute,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { useNavigationState } from '@react-navigation/native';\n\nfunction useIsFirstRouteInParent() {\n  const route = useRoute();\n  const isFirstRouteInParent = useNavigationState(\n    (state) => state.routes[0].key === route.key\n  );\n\n  return isFirstRouteInParent;\n}\n\nfunction usePreviousRouteName() {\n  return useNavigationState((state) =>\n    state.routes[state.index - 1]?.name\n      ? state.routes[state.index - 1].name\n      : 'None'\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const isFirstRoute = useIsFirstRouteInParent();\n  const previousRouteName = usePreviousRouteName();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>\n      <Text>Previous route name: {previousRouteName}</Text>\n\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n  const isFirstRoute = useIsFirstRouteInParent();\n  const previousRouteName = usePreviousRouteName();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>\n      <Text>Previous route name: {previousRouteName}</Text>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  const navigation = useNavigation();\n  const isFirstRoute = useIsFirstRouteInParent();\n  const previousRouteName = usePreviousRouteName();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>\n      <Text>Previous route name: {previousRouteName}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n    Settings: SettingsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration with Chat Route and Date Parameter (JS)\nDESCRIPTION: This snippet configures a route for a 'Chat' screen with a dynamic ':date' parameter, illustrating parameter serialization in React Navigation's URL structure. This will convert a state object like the one provided above to a path like chat/1589842744264.  It sets the stage for demonstrating how to customize parameter parsing and stringification.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: 'chat/:date',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Sharing Common Header Options Across Screens (Dynamic)\nDESCRIPTION: This snippet demonstrates how to share common header options across multiple screens using screenOptions in a dynamic navigation configuration. It sets default styles for all screens in the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom URL Subscribe Function with Deep Link and Firebase Notification Support\nDESCRIPTION: Shows how to implement a custom subscribe function that listens for both deep links and Firebase push notification events. This allows handling URLs from multiple sources during app usage.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    subscribe(listener) {\n      const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n      // Listen to incoming links from deep linking\n      const subscription = Linking.addEventListener('url', onReceiveURL);\n\n      // Listen to firebase push notifications\n      const unsubscribeNotification = messaging().onNotificationOpenedApp(\n        (message) => {\n          const url = message.data?.url;\n\n          if (url) {\n            // Any custom logic to check whether the URL needs to be handled\n            //...\n\n            // Call the listener to let React Navigation handle the URL\n            listener(url);\n          }\n        }\n      );\n\n      return () => {\n        // Clean up the event listeners\n        subscription.remove();\n        unsubscribeNotification();\n      };\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Back Navigation in React Navigation\nDESCRIPTION: DetailsScreen component with multiple navigation options including push() for adding screens, navigate() to specific routes, and goBack() to return to the previous screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() => navigation.push('Details')}\n      />\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling React Navigation Drawer (Dynamic Config) in JavaScript\nDESCRIPTION: Demonstrates toggling the drawer's open/closed state from a screen component using `navigation.toggleDrawer()`. This example uses a dynamic navigation setup within `NavigationContainer` and `createDrawerNavigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Drawer toggle\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack and Tab Navigators with Visible Tab Bar\nDESCRIPTION: This snippet shows a navigation structure where a stack navigator is nested inside a tab navigator. In this setup, the tab bar remains visible on all screens, including Profile and Settings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hiding-tabbar-in-screens.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeStack} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n      <Tab.Screen name=\"Notifications\" component={Notifications} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Android Back Button Handling with React Navigation - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to intercept the Android hardware back button press in a React Native class component using React Navigation. It adds and removes a BackHandler event listener within the component lifecycle to provide context-sensitive handling, such as toggling selection mode before delegating to the default handler. Dependencies include react-native's BackHandler and a navigation prop passed to the component. The method handleBackButtonPressAndroid checks whether the screen is active (using navigation.isFocused()), conditionally disables selection mode, and determines whether to block or allow default navigation behavior by returning true or false. The listener should be used within StackNavigator screens and may not cover other navigator types.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { BackHandler } from 'react-native';\\n\\nclass ScreenWithCustomBackBehavior extends React.Component {\\n  componentDidMount() {\\n    BackHandler.addEventListener(\\n      'hardwareBackPress',\\n      this.handleBackButtonPressAndroid\\n    );\\n  }\\n\\n  componentWillUnmount() {\\n    BackHandler.removeEventListener(\\n      'hardwareBackPress',\\n      this.handleBackButtonPressAndroid\\n    );\\n  }\\n\\n  handleBackButtonPressAndroid = () => {\\n    if (!this.props.navigation.isFocused()) {\\n      // The screen is not focused, so don't do anything\\n      return false;\\n    }\\n\\n    if (this.isSelectionModeEnabled()) {\\n      this.disableSelectionMode();\\n\\n      // We have handled the back button\\n      // Return `true` to prevent react-navigation from handling it\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  render() {\\n    // ...\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Global Default Types for Root Navigator (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to specify a global type for the root navigator, which will be used as the default type for `useNavigation`, `Link`, and other components. This avoids manual annotations and enhances type safety throughout the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useDrawerProgress Hook with Dynamic Navigation\nDESCRIPTION: This snippet demonstrates using the `useDrawerProgress` hook within a screen component managed by a dynamic drawer navigator (`createDrawerNavigator` inside `NavigationContainer`). It retrieves the drawer's animation progress (a Reanimated SharedValue) and uses `useAnimatedStyle` from `react-native-reanimated` to animate a view based on the drawer's movement.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport {\n  createDrawerNavigator,\n  useDrawerProgress,\n} from '@react-navigation/drawer';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction HomeScreen() {\n  // highlight-next-line\n  const progress = useDrawerProgress();\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: progress.value * -100 }],\n  }));\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Animated.View\n        style={[\n          {\n            height: 100,\n            aspectRatio: 1,\n            backgroundColor: 'tomato',\n          },\n          animatedStyle,\n        ]}\n      />\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator>\n      <Drawer.Screen name=\"Home\" component={HomeScreen} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Options Changes with addListener ‚Äì 'options' Event (React Navigation, JavaScript)\nDESCRIPTION: Sets up a listener for changes to the screen options of the currently focused route using addListener with the 'options' event. The callback is triggered whenever options change, and provides the new options via e.data.options. Useful for responding to dynamic updates in the app's UI configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = navigationRef.addListener('options', (e) => {\\n  // You can get the new options for the currently focused screen\\n  console.log(e.data.options);\\n});\n```\n\n----------------------------------------\n\nTITLE: Correctly Accessing Reactive State with useNavigationState in JavaScript (React)\nDESCRIPTION: Demonstrates the correct way to access a piece of navigation state (`routes.length`) reactively using the `useNavigationState` hook. The component will re-render whenever the length of the routes array changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation-state.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile() {\n  const routesLength = useNavigationState((state) => state.routes.length);\n\n  return <Text>Number of routes: {routesLength}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Component with useLinkProps (JavaScript/React)\nDESCRIPTION: This snippet demonstrates how to define a custom `LinkButton` component using the `useLinkProps` hook from `@react-navigation/native`. The hook generates necessary props (like `onPress` for navigation and `href` for web) based on the provided `screen`, `params`, `action`, or `href`. These props are then spread onto a `Pressable` component to create an interactive link.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-props.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useLinkProps } from '@react-navigation/native';\n\n// ...\n\nconst LinkButton = ({ screen, params, action, href, children, ...rest }) => {\n  const props = useLinkProps({ screen, params, action, href });\n\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  return (\n    <Pressable {...props} {...rest}>\n      <Text>{children}</Text>\n    </Pressable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Prop via useNavigation Hook - React Navigation - JavaScript\nDESCRIPTION: This snippet shows how to use the useNavigation hook from @react-navigation/native within a functional React component to access the navigation object without needing it as a prop. Dependencies include React, react-native for Button, and useNavigation from @react-navigation/native. Only screenName is passed as a prop; navigation is obtained via the hook. The Button triggers navigation.navigate when pressed. This enables usage of GoToButton anywhere within a NavigationContainer without explicit prop passing. The pattern avoids prop-drilling and allows nested components to use navigation seamlessly. Works only for components within the NavigationContext hierarchy.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/connecting-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Button } from 'react-native';\\nimport { useNavigation } from '@react-navigation/native';\\n\\nfunction GoToButton({ screenName }) {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <Button\\n      title={`Go to ${screenName}`}\\n      onPress={() => navigation.navigate(screenName)}\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Tab Router with a Custom CLEAR_HISTORY Action (JavaScript)\nDESCRIPTION: This snippet shows how to extend an existing TabRouter in React Navigation to support a new 'CLEAR_HISTORY' action. It demonstrates combining the built-in router's logic with custom action handling by overriding `getStateForAction` and adding a `clearHistory` action creator. Dependencies include `@react-navigation/native` and access to the base TabRouter. Inputs include state and action objects, and outputs are updated navigation states. The approach enables customization while preserving the default behavior for other actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TabRouter } from '@react-navigation/native';\n\nconst MyTabRouter = (options) => {\n  const router = TabRouter(options);\n\n  return {\n    ...router,\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'CLEAR_HISTORY':\n          return {\n            ...state,\n            routeKeyHistory: [],\n          };\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: {\n      ...router.actionCreators,\n      clearHistory() {\n        return { type: 'CLEAR_HISTORY' };\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using useReduxDevToolsExtension with Dynamic NavigationContainer - React Navigation - JavaScript\nDESCRIPTION: Demonstrates using the useReduxDevToolsExtension hook in a dynamic navigation context, connecting navigationRef to Redux DevTools for real-time debugging. Import and pass navigationRef (via useNavigationContainerRef) to the hook, making navigation state visible in the Redux DevTools browser extension or React Native Debugger. Prerequisites: @react-navigation/native, @react-navigation/devtools, and (optionally) the Redux DevTools extension. Intended for development builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/devtools.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  NavigationContainer,\\n  useNavigationContainerRef,\\n} from '@react-navigation/native';\\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\\n\\nexport default function App() {\\n  const navigationRef = useNavigationContainerRef();\\n\\n  useReduxDevToolsExtension(navigationRef);\\n\\n  return (\\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Stack Navigator Header with a React Element - React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to replace the default stack header by providing a custom React component via the header option in stack navigator options. Utilizes the getHeaderTitle helper from @react-navigation/elements, and optionally handles left button rendering based on the presence of a back object. The snippet shows parameters received by the header function and how to pass style and click handlers to child components. Requires @react-navigation/elements for the getHeaderTitle function, and assumes MyHeader and MyBackButton are custom components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options, back }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        back ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Navigator Structure with Screen Components\nDESCRIPTION: Example of how to use the Navigator and Screen components together to define a navigation structure with Home and Profile screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Tab Navigator Actions with TabActions in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to use the TabActions.jumpTo method to programmatically navigate to a tab route within a React Navigation tab navigator. Requires @react-navigation/native as a dependency and that navigation is set up in the app context. The 'jumpTo' function takes a route name (e.g., 'Profile') and optional route parameters (e.g., { user: 'Satya' }). The generated action must be dispatched through the navigation object. Input parameters are the target tab name and an object of screen params; output is navigation state update and navigation to the desired tab. Limitations: only works within navigators that implement tab navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TabActions } from '@react-navigation/native';\n\nconst jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });\n\nnavigation.dispatch(jumpToAction);\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for Group in React Navigation (Dynamic)\nDESCRIPTION: This example shows how to use the 'screenOptions' prop on a Stack.Group component to configure screen options dynamically. It demonstrates setting header style and presentation mode for different groups of screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Group\n    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n  >\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </Stack.Group>\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n    <Stack.Screen name=\"Share\" component={ShareScreen} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with CommonActions.reset in JavaScript\nDESCRIPTION: Illustrates using `CommonActions.reset` to completely replace the current navigation state. This example sets the navigation state to have two routes, 'Home' and 'Profile', with 'Profile' being the active route (`index: 1`). The `reset` action creator takes an object representing the new navigation state, typically including `index` and `routes`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.reset({\n    index: 1,\n    routes: [\n      { name: 'Home' },\n      {\n        name: 'Profile',\n        params: { user: 'jane' },\n      },\n    ],\n  })\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Nested Navigators (React Navigation/JS)\nDESCRIPTION: Illustrates how to dispatch actions, like toggling a drawer, to a nested navigator from a parent navigator using `navigation.dispatch`. This example specifically uses `DrawerActions.toggleDrawer()` to control a nested drawer navigator. Requires `@react-navigation/native` and potentially drawer-specific actions like `@react-navigation/drawer`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnavigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Display Route Length with useNavigationState Hook (React Navigation, JavaScript)\nDESCRIPTION: This snippet demonstrates the correct way to dynamically display the number of navigation routes using useNavigationState in a React function component. It requires @react-navigation/native and the Text component from react-native. routesLength updates automatically as the navigation state changes, ensuring the UI remains in sync.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation-state.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile() {\n  const routesLength = useNavigationState((state) => state.routes.length);\n\n  return <Text>Number of routes: {routesLength}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Bottom Tab Animation in React Navigation\nDESCRIPTION: This code configures a bottom tab navigator with a fade animation for screen transitions using the static navigation API.  The `createBottomTabNavigator` function is used to define the tab navigator. The `animation` option inside the `screenOptions` is set to `'fade'`. Requires `@react-navigation/native` and `@react-navigation/bottom-tabs`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, Easing } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Profile!</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst RootTabs = createBottomTabNavigator({\n  screenOptions: {\n    // highlight-start\n    animation: 'fade',\n    // highlight-end\n  },\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customized NotFound Screen Rendering Based on Route Path - React Navigation (JavaScript)\nDESCRIPTION: This functional React component renders either a WebView displaying a URL derived from 'route.path', or a fallback text message if 'route.path' is missing. Intended for use as a NotFound screen in React Navigation, it demonstrates dynamic content rendering based on navigation parameters. Dependencies include WebView and Text components, and it expects a route object prop (standard navigation prop shape) containing a path property. It outputs a rendered React element.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction NotFoundScreen({ route }) {\n  if (route.path) {\n    return <WebView source={{ uri: `https://mywebsite.com/${route.path}` }} />;\n  }\n\n  return <Text>This screen doesn't exist!</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Events in React Navigation (Static)\nDESCRIPTION: This example demonstrates how to listen to navigation focus and blur events using the addListener method in a static navigation configuration. The ProfileScreen component shows alerts when the screen gains or loses focus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction SettingsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Settings Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(\n    () => navigation.addListener('focus', () => alert('Screen was focused')),\n    [navigation]\n  );\n\n  React.useEffect(\n    () => navigation.addListener('blur', () => alert('Screen was unfocused')),\n    [navigation]\n  );\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst SettingsStack = createNativeStackNavigator({\n  screens: {\n    Settings: SettingsScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(SettingsStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a connected component in screen options\nDESCRIPTION: Demonstrates how to use a Redux-connected component as part of the screen options configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/redux-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Screen\n  name=\"Test\"\n  component={TestScreen}\n  options={{ title: () => <CounterContainer /> }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Another Screen with React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to use the navigation prop in a screen component to navigate to another route. This example requires React, React Navigation, and assumes that 'Profile' is a registered route. The snippet destructures the 'navigate' function from the navigation prop and triggers navigation with route parameters on button press. 'navigate' can be passed a route name and an optional params object. The inputs are the route name ('Profile') and parameters ({ name: 'Brent' }), while the output is a navigation action that takes the user to the Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { navigate } = this.props.navigation;\n\n    return (\n      <View>\n        <Text>This is the home screen of the app</Text>\n        <Button\n          onPress={() => navigate('Profile', { name: 'Brent' })}\n          title=\"Go to Brent's profile\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Deeply Nested Screens with Parameters in React Navigation (JS)\nDESCRIPTION: Demonstrates navigating through multiple levels of nested navigators to reach a specific screen ('Media'). It uses a nested structure within the `params` object, specifying the `screen` and nested `params` for each level of the hierarchy: `Root` -> `Settings` -> `Sound` -> `Media`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate('Root', {\n  screen: 'Settings',\n  params: {\n    screen: 'Sound',\n    params: {\n      screen: 'Media',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating Nested Screens with Dynamic Config in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates setting up nested navigators (Stack over Tabs) using React Navigation's dynamic, component-based configuration within a `NavigationContainer`. It includes screen components (`HomeScreen`, `FeedScreen`, `MessagesScreen`) and shows how to navigate to the nested tab navigator ('More') and directly to a specific tab screen ('Messages') from the parent stack screen ('Home'). Functional components define the `Tab.Navigator` and `Stack.Navigator`, highlighted in the focus block.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Navigating to nested screen\" snack\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('More')}>Go to More</Button>\n      <Button\n        onPress={() => navigation.navigate('More', { screen: 'Messages' })}\n      >\n        Go to Messages\n      </Button>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\n// codeblock-focus-start\nfunction MoreTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Messages\" component={MessagesScreen} />\n    </Tab.Navigator>\n  );\n}\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen\n        name=\"More\"\n        component={MoreTabs}\n        options={{ headerShown: false }}\n      />\n    </Stack.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack />\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State using navigation.reset (JavaScript)\nDESCRIPTION: This code shows how to completely reset the navigation state of the current navigator using navigation.reset. It replaces the existing set of routes with a new stack containing only the specified screens. Requires the react-navigation library, and is useful for actions like logging out or initializing a new navigation flow. The input is an object with index and routes arrays; the output is navigation to the first route with the rest removed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnavigation.reset({\\n  index: 0,\\n  routes: [{ name: 'Profile' }],\\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Route Prop for Stack Screen in TypeScript\nDESCRIPTION: Shows how to type the `route` prop for a specific screen ('Profile'). It imports `RouteProp` from `@react-navigation/native` and uses it with the `RootStackParamList` and the current route name ('Profile') to create a specific route prop type (`ProfileScreenRouteProp`), enabling type checking for `route.params`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteProp } from '@react-navigation/native';\n\ntype ProfileScreenRouteProp = RouteProp<RootStackParamList, 'Profile'>;\n\ntype Props = {\n  route: ProfileScreenRouteProp;\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Navigation State Changes with onStateChange Prop (React Navigation, JSX)\nDESCRIPTION: Shows how to use the onStateChange callback prop on NavigationContainer to respond to navigation state changes. This callback receives the latest navigation state and can be used to log state updates, persist state, or perform analytics.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\\n  onStateChange={(state) => console.log('New state is', state)}\\n>\\n  {/* ... */}\\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Adding Universal Link Domains to React Navigation Linking Prefixes in Expo (JavaScript)\nDESCRIPTION: Shows how to configure the `linking` prop in React Navigation to handle both custom URL schemes (generated by `Linking.createURL`) and universal link domains (e.g., 'https://app.example.com') for Expo projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst linking = {\n  prefixes: [Linking.createURL('/'), 'https://app.example.com'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component for Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the Link component from React Navigation to create a navigable link to a profile screen. It shows how to specify the target screen and pass parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/link.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  return (\n    <Link to={{ screen: 'Profile', params: { id: 'jane' } }}>\n      Go to Jane's profile\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Hrefs into Navigation Actions with useLinkBuilder in JavaScript\nDESCRIPTION: This example illustrates using the `buildAction` method from the `useLinkBuilder` hook to convert a path string ('/users/jane') into a navigation action object. This action is then dispatched using `navigation.dispatch` when a Button is pressed, triggering navigation to the corresponding screen defined in the linking configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-builder.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\n// ...\n\nfunction MyComponent() {\n  const { buildAction } = useLinkBuilder();\n\n  return (\n    <Button onPress={() => navigation.dispatch(buildAction('/users/jane'))}>\n      Go to Jane's profile\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with SplashScreen\nDESCRIPTION: This code snippet demonstrates how to conditionally render a `SplashScreen` component while checking for a user token (`isLoading`). It then renders a navigation component based on the user's authentication state (`isSignedIn`), managed using `SignInContext`. It expects `isLoading`, `userToken`, `SplashScreen`, `Navigation` and `SignInContext` to be defined elsewhere.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (isLoading) {\n  // We haven't finished checking for the token yet\n  return <SplashScreen />;\n}\n\nconst isSignedIn = userToken != null;\n\nreturn (\n  <SignInContext.Provider value={isSignedIn}>\n    <Navigation />\n  </SignInContext.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Opening the Drawer with DrawerActions in React Navigation - JavaScript (Static Navigator)\nDESCRIPTION: This snippet demonstrates how to open, toggle, and jump to a drawer screen using the DrawerActions object in a static navigation context within a React Native app. It utilizes createStaticNavigation, createDrawerNavigator, and custom drawer content to handle navigation between Home and Profile screens. Dependencies include @react-navigation/native, @react-navigation/drawer, @react-navigation/elements, and react-native components. The key action shown is dispatching DrawerActions.openDrawer() from a button press to open the drawer; props and configuration such as custom drawer content are handled via the static navigation approach.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Button } from '@react-navigation/elements';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n  DrawerActions,\\n} from '@react-navigation/native';\\nimport {\\n  createDrawerNavigator,\\n  DrawerContentScrollView,\\n  DrawerItemList,\\n  DrawerItem,\\n} from '@react-navigation/drawer';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home!</Text>\\n      <Button\\n        onPress={() => {\\n          // codeblock-focus-start\\n          navigation.dispatch(DrawerActions.openDrawer());\\n          // codeblock-focus-end\\n        }}\\n      >\\n        Open Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\\n        Toggle Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\\n        Jump to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen({ route }) {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile!</Text>\\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\\n    </View>\\n  );\\n}\\n\\nfunction CustomDrawerContent(props) {\\n  return (\\n    <DrawerContentScrollView {...props}>\\n      <DrawerItemList {...props} />\\n      <DrawerItem\\n        label=\"Close drawer\"\\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\\n      />\\n      <DrawerItem\\n        label=\"Toggle drawer\"\\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\\n      />\\n    </DrawerContentScrollView>\\n  );\\n}\\n\\nconst Drawer = createDrawerNavigator({\\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(Drawer);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stack PopTo Action in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the popTo action to navigate back to a specific screen in the stack. It also shows how to pass parameters and merge them with existing route params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nconst popToAction = StackActions.popTo('Profile', { user: 'jane' });\n\nnavigation.dispatch(popToAction);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with headerShown: false in React Navigation (Dynamic Configuration)\nDESCRIPTION: This code shows how to nest a Bottom Tab Navigator inside a Native Stack Navigator using dynamic configuration, avoiding duplicate headers with headerShown: false. The example includes component-based navigation setup with tab and stack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Messages\" component={MessagesScreen} />\n    </Tab.Navigator>\n  );\n}\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeTabs}\n        options={{\n          headerShown: false,\n        }}\n      />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic Back Navigation with React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use React Navigation's navigation.goBack() method to programmatically trigger returning to the previous screen in a React Native stack navigator. It sets up a basic navigation stack with Home and Details screens, showing both stack progression via navigation.navigate and navigation.push, and back navigation through a button press. Dependencies required include @react-navigation/native, @react-navigation/native-stack, react-native, and @react-navigation/elements. The HomeScreen allows navigating forward, while the DetailsScreen enables recursive push and back actions. Inputs are user button presses; outputs are navigation actions changing the active screen. This pattern assumes the stack is not at its root; otherwise, goBack() will not perform any navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { Button } from '@react-navigation/elements';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Details')}>\\n        Go to Details\\n      </Button>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nfunction DetailsScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Details Screen</Text>\\n      <Button onPress={() => navigation.push('Details')}>\\n        Go to Details... again\\n      </Button>\\n      // highlight-start\\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\\n      // highlight-end\\n    </View>\\n  );\\n}\\n// codeblock-focus-end\\n\\nconst RootStack = createNativeStackNavigator({\\n  initialRouteName: 'Home',\\n  screens: {\\n    Home: HomeScreen,\\n    Details: DetailsScreen,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Header Button to Component State using Params in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to link header button actions with methods on the React component instance in React Navigation. It sets a component method as a navigation parameter in componentDidMount, allowing the button in navigationOptions to access and trigger it. This pattern ensures the button can interact with component state, such as incrementing a counter. Dependencies include React, React Navigation, and React Native's Button. Key parameters involve setting and retrieving navigation params; expected input is a button press event, and the output is an incremented state variable and corresponding visual change. Limitations include potential null handlers on initial mount until params are set.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerTitle: () => <LogoTitle />, \n      headerRight: () => (\n        <Button\n          onPress={navigation.getParam('increaseCount')}\n          title=\"+1\"\n          color=\"#fff\"\n        />\n      ),\n    };\n  };\n\n  componentDidMount() {\n    this.props.navigation.setParams({ increaseCount: this._increaseCount });\n  }\n\n  state = {\n    count: 0,\n  };\n\n  _increaseCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  /* later in the render function we display the count */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Bar Appearance with Icons and Colors (JavaScript/React Native)\nDESCRIPTION: Demonstrates how to customize the appearance of the bottom tab navigator using the `screenOptions` prop. It shows how to set custom icons for each tab using `tabBarIcon` (leveraging `react-native-vector-icons` or `@expo/vector-icons`) and how to define active and inactive tab tint colors using `tabBarActiveTintColor` and `tabBarInactiveTintColor`. The `tabBarIcon` function receives `focused`, `color`, and `size` parameters to conditionally render icons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n// (...)\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === 'Home') {\n              iconName = focused\n                ? 'ios-information-circle'\n                : 'ios-information-circle-outline';\n            } else if (route.name === 'Settings') {\n              iconName = focused ? 'ios-list' : 'ios-list-outline';\n            }\n\n            // You can return any component that you like here!\n            return <Ionicons name={iconName} size={size} color={color} />;\n          },\n          tabBarActiveTintColor: 'tomato',\n          tabBarInactiveTintColor: 'gray',\n        })}\n      >\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Header Title with Custom Component (Static) in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates replacing the default header title with a custom React component (`LogoTitle` displaying an image) for a specific screen within a statically defined native stack navigator using `createStaticNavigation` and the `headerTitle` screen option. This approach is suitable for statically defined navigation structures.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Custom title\" snack\nimport * as React from 'react';\nimport { Text, View, Image } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction LogoTitle() {\n  return (\n    <Image\n      style={{ width: 50, height: 50 }}\n      source={require('@expo/snack-static/react-native-logo.png')}\n    />\n  );\n}\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        // highlight-next-line\n        headerTitle: (props) => <LogoTitle {...props} />,\n      },\n    },\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking in Dynamic Navigation (React Navigation)\nDESCRIPTION: Example of configuring linking for deep linking and URL support in dynamic Navigation. It demonstrates setting up prefixes and screen configurations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction App() {\n  const linking = {\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Home: 'feed/:sort',\n      },\n    },\n  };\n\n  return (\n    <NavigationContainer\n      // highlight-next-line\n      linking={linking}\n      fallback={<Text>Loading...</Text>}\n    >\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Effects with useFocusEffect in React Navigation\nDESCRIPTION: Illustrates how to properly handle asynchronous effects using useFocusEffect, including cancellation and state update safety for API calls.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-focus-effect.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseFocusEffect(\n  React.useCallback(() => {\n    let isActive = true;\n\n    const fetchUser = async () => {\n      try {\n        const user = await API.fetch({ userId });\n\n        if (isActive) {\n          setUser(user);\n        }\n      } catch (e) {\n        // Handle error\n      }\n    };\n\n    fetchUser();\n\n    return () => {\n      isActive = false;\n    };\n  }, [userId])\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Linking State Parsing in React Navigation (Dynamic)\nDESCRIPTION: Shows how to override the default URL path parsing behavior in React Navigation by providing a custom `getStateFromPath` function within the `linking` prop of the `<NavigationContainer>` component. This function receives the path and configuration and should return a navigation state object. You can reuse the default logic by importing it from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      // ...\n    },\n    // highlight-start\n    getStateFromPath(path, config) {\n      // Return a state object here\n      // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n    },\n    // highlight-end\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Navigating Routes with CommonActions.navigate in JavaScript\nDESCRIPTION: Demonstrates dispatching the `CommonActions.navigate` action to move to a specific screen ('Profile') and pass parameters (`user: 'jane'`). This action requires importing `CommonActions` from `@react-navigation/native`. The `navigate` action creator takes an object with `name` (the destination route name) and optional `params`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.navigate({\n    name: 'Profile',\n    params: {\n      user: 'jane',\n    },\n  })\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Linking State Serialization in React Navigation (Dynamic)\nDESCRIPTION: Illustrates how to override the default serialization of navigation state objects into URL paths by providing a custom `getPathFromState` function within the `linking` prop of the `<NavigationContainer>` component. This is crucial for web support when `getStateFromPath` is also customized. The function receives the state and configuration and should return a path string.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      // ...\n    },\n    // highlight-start\n    getPathFromState(state, config) {\n      // Return a path string here\n      // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n    },\n    // highlight-end\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Action with 'action' Prop (JavaScript/React)\nDESCRIPTION: This snippet illustrates how to use the `action` prop on the `LinkButton` to specify a custom navigation behavior, such as replacing the current screen instead of pushing a new one. It uses `StackActions.replace` from `@react-navigation/native` to define the replacement action, targeting the 'Profile' screen with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-props.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  return (\n    <LinkButton\n      screen=\"Profile\"\n      params={{ id: 'jane' }}\n      action={StackActions.replace('Profile', { id: 'jane' })}\n    >\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Screen Icons in React Navigation Native Bottom Tabs\nDESCRIPTION: Demonstrates different ways to configure tab bar icons in Native Bottom Tabs Navigator, including support for PNG images, SVG files, SF Symbols, and remote URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2025-01-29-using-react-navigation-with-native-bottom-tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab.Screen\n  name=\"Albums\"\n  component={Albums}\n  options={{\n    tabBarIcon: () => require('person.png'),\n    // SVG is also supported\n    tabBarIcon: () => require('person.svg'),\n    // or\n    tabBarIcon: () => ({ sfSymbol: 'person' }),\n    // You can also pass a URL\n    tabBarIcon: () => ({ uri: 'https://example.com/icon.png' }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Native Stack Navigator with Dynamic Configuration\nDESCRIPTION: Demonstrates setting up a simple React Navigation stack with a single HomeScreen using the dynamic configuration approach with NavigationContainer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// In App.js in a new project\n\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Options Dynamically using navigation.setOptions (JavaScript)\nDESCRIPTION: This code demonstrates how to set the navigation options dynamically from within a screen component by calling navigation.setOptions, typically in a useLayoutEffect or useEffect hook. It relies on react-navigation, React hooks, and optionally React Native components. The value of the title is updated based on user input and applied as an option. Requires navigation and route props and is intended for screen customization in response to component state or props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ navigation, route }) {\\n  const [value, onChangeText] = React.useState(route.params.title);\\n\\n  React.useLayoutEffect(() => {\\n    navigation.setOptions({\\n      title: value === '' ? 'No title' : value,\\n    });\\n  }, [navigation, value]);\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <TextInput\\n        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}\\n        onChangeText={onChangeText}\\n        value={value}\\n      />\\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Status with getDrawerStatusFromState Helper\nDESCRIPTION: This snippet shows an alternative method to check the drawer status using the `getDrawerStatusFromState` helper function. It requires passing the current navigation state obtained via `navigation.getState()`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nimport { getDrawerStatusFromState } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = getDrawerStatusFromState(navigation.getState()) === 'open';\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Bar with React Navigation\nDESCRIPTION: This snippet demonstrates how to create a custom tab bar in React Navigation. It defines a `MyTabBar` component that renders a custom tab bar using provided `state`, `descriptors`, and `navigation` props. The example includes logic for handling tab presses and long presses.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  createStaticNavigation,\n  NavigationContainer,\n} from '@react-navigation/native';\n// codeblock-focus-start\nimport { View, Platform } from 'react-native';\nimport { useLinkBuilder, useTheme } from '@react-navigation/native';\nimport { Text, PlatformPressable } from '@react-navigation/elements';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction MyTabBar({ state, descriptors, navigation }) {\n  const { colors } = useTheme();\n  const { buildHref } = useLinkBuilder();\n\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n              ? options.title\n              : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name, route.params);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        return (\n          <PlatformPressable\n            href={buildHref(route.name, route.params)}\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarButtonTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Text style={{ color: isFocused ? colors.primary : colors.text }}>\n              {label}\n            </Text>\n          </PlatformPressable>\n        );\n      })}\n    </View>\n  );\n}\n\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-tabs=static\n// codeblock-focus-start\nconst MyTabs = createBottomTabNavigator({\n  // highlight-next-line\n  tabBar: (props) => <MyTabBar {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n// codeblock-tabs-end\n\n// codeblock-tabs=dynamic\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      // highlight-next-line\n      tabBar={(props) => <MyTabBar {...props} />}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}\n// codeblock-tabs-end\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows how to set up bottom tab and stack navigators using React Navigation and JavaScript. It demonstrates nesting navigators as screens and maps screens to components. Dependencies include a valid React Navigation setup with 'createBottomTabNavigator' and 'createStackNavigator'. Each key in the 'screens' object specifies a screen or nested navigator, passed as the 'screen' property, with home and settings on the tab navigator and tabs, profile, and chat on the stack. The snippet provides structure for automatic path generation when deep linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n    },\n    Settings: {\n      screen: SettingsScreen,\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    HomeTabs: {\n      screen: HomeTabs,\n    },\n    Profile: {\n      screen: ProfileScreen,\n    },\n    Chat: {\n      screen: ChatScreen,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar in Static Navigation Stack\nDESCRIPTION: Implementation of a stack navigator with custom status bar configuration using static navigation. Shows how to change status bar appearance between light and dark screens with proper safe area handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, StatusBar, StyleSheet } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction Screen1() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#6a51ae',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen2')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n\nfunction Screen2() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#ecf0f1',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen1')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Screen1: Screen1,\n    Screen2: Screen2,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bottom Tab Navigator by Extending Built-in Components\nDESCRIPTION: Example showing how to create a custom bottom tab navigator by extending React Navigation's built-in components. This demonstrates reusing the BottomTabView while implementing custom navigation logic with useNavigationBuilder and TabRouter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  TabRouter,\n} from '@react-navigation/native';\nimport { BottomTabView } from '@react-navigation/bottom-tabs';\n\nfunction BottomTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenOptions,\n  ...rest\n}) {\n  const { state, descriptors, navigation } = useNavigationBuilder(TabRouter, {\n    initialRouteName,\n    backBehavior,\n    children,\n    screenOptions,\n  });\n\n  return (\n    <BottomTabView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory(BottomTabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Status with useDrawerStatus Hook - JavaScript\nDESCRIPTION: This snippet demonstrates how to determine if the drawer is open in a React Navigation setup by using the useDrawerStatus hook from @react-navigation/drawer. The hook returns the drawer status, which is compared to 'open' to produce a Boolean. This approach depends on the @react-navigation/drawer package and must be used inside a React function component within the drawer context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useDrawerStatus } from '@react-navigation/drawer';\\n\\n// ...\\n\\nconst isDrawerOpen = useDrawerStatus() === 'open';\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Presets to a Stack Screen in React Navigation (JavaScript/JSX)\nDESCRIPTION: Demonstrates importing `TransitionPresets` from `@react-navigation/stack` and applying a complete preset, such as `ModalSlideFromBottomIOS`, to a `Stack.Screen`'s options using the spread syntax (`...`). This bundles multiple animation-related options together to easily achieve a standard modal slide animation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    title: 'Profile',\n    ...TransitionPresets.ModalSlideFromBottomIOS,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Animated Transparent Modal Component (React Native/JavaScript)\nDESCRIPTION: Provides a complete React Native component (`ModalScreen`) example for a custom transparent modal screen. It utilizes the `useCardAnimation` hook from `@react-navigation/stack` to animate the modal's content scale based on transition progress and includes a `Pressable` overlay covering the screen that triggers `navigation.goBack` when pressed. The `useTheme` hook is used for theme-aware styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  Animated,\n  View,\n  Text,\n  Pressable,\n  Button,\n  StyleSheet,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport { useCardAnimation } from '@react-navigation/stack';\n\nfunction ModalScreen({ navigation }) {\n  const { colors } = useTheme();\n  const { current } = useCardAnimation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Pressable\n        style={[\n          StyleSheet.absoluteFill,\n          { backgroundColor: 'rgba(0, 0, 0, 0.5)' },\n        ]}\n        onPress={navigation.goBack}\n      />\n      <Animated.View\n        style={{\n          padding: 16,\n          width: '90%',\n          maxWidth: 400,\n          borderRadius: 3,\n          backgroundColor: colors.card,\n          transform: [\n            {\n              scale: current.progress.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.9, 1],\n                extrapolate: 'clamp',\n              }),\n            },\n          ],\n        }}\n      >\n        <Text>\n          Mise en place is a French term that literally means ‚Äúput in place.‚Äù It\n          also refers to a way cooks in professional kitchens and restaurants\n          set up their work stations‚Äîfirst by gathering all ingredients for a\n          recipes, partially preparing them (like measuring out and chopping),\n          and setting them all near each other. Setting up mise en place before\n          cooking is another top tip for home cooks, as it seriously helps with\n          organization. It‚Äôll pretty much guarantee you never forget to add an\n          ingredient and save you time from running back and forth from the\n          pantry ten times.\n        </Text>\n        <Button\n          title=\"Okay\"\n          color={colors.primary}\n          style={{ alignSelf: 'flex-end' }}\n          onPress={navigation.goBack}\n        />\n      </Animated.View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing React Navigation Drawer (Dynamic Config) in JavaScript\nDESCRIPTION: Illustrates opening a drawer from a screen via `navigation.openDrawer()` and closing it from custom content using `props.navigation.closeDrawer()`. This example employs a dynamic navigation setup wrapped in `NavigationContainer` and uses `createDrawerNavigator` to define the drawer structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Drawer open and close\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      // codeblock-focus-end\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Top Tab Navigator with Static Configuration\nDESCRIPTION: Example of setting up Material Top Tabs Navigator with static configuration, creating a tab interface with Home and Profile screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\n// codeblock-focus-end\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst MyTabs = createMaterialTopTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme in Static Navigation Configuration\nDESCRIPTION: This snippet demonstrates how to create a custom theme and apply it to a static navigation configuration in React Navigation. It extends the DefaultTheme and overrides specific color properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  useNavigation,\n  createStaticNavigation,\n  DefaultTheme,\n} from '@react-navigation/native';\n\nconst MyTheme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    background: 'rgb(140, 201, 125)',\n    primary: 'rgb(255, 45, 85)',\n  },\n};\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation theme={MyTheme} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Params using navigation.setParams (JavaScript)\nDESCRIPTION: This functional/class component uses the navigation.setParams method to update the route parameters for the active screen in place, merging the new params with the existing ones. It requires access to navigation and the current route. This is useful for updating UI or triggering changes based on params, such as swapping display values or titles. Inputs are a params object; there are no direct outputs except for triggering a rerender if dependent on params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ navigation: { setParams } }) {\\n  render() {\\n    return (\\n      <Button\\n        onPress={() =>\\n          setParams({\\n            friends:\\n              route.params.friends[0] === 'Brent'\\n                ? ['Wojciech', 'Szymon', 'Jakub']\\n                : ['Brent', 'Satya', 'Micha≈õ'],\\n            title:\\n              route.params.title === \"Brent's Profile\"\\n                ? \"Lucy's Profile\"\\n                : \"Brent's Profile\",\\n          })\\n        }\\n        title=\"Swap title and friends\"\\n      />\\n    );\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Screen Props - TSX\nDESCRIPTION: Illustrates how to type check screens by annotating the `navigation` and `route` props using generic types from the corresponding navigator package (e.g., `NativeStackScreenProps`). The generic type requires the param list object and the name of the route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\n\ntype RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Feed: { sort: 'latest' | 'top' } | undefined;\n};\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Profile'>;\n```\n\n----------------------------------------\n\nTITLE: Interactive Header Button with Screen State\nDESCRIPTION: Shows how to implement a header button that interacts with the screen's state using navigation.setOptions and React hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={({ navigation, route }) => ({\n          headerTitle: (props) => <LogoTitle {...props} />,\n          headerRight: () => <Button title=\"Update count\" />,\n        })}\n      />\n    </Stack.Navigator>\n  );\n}\n\nfunction HomeScreen({ navigation }) {\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Button onPress={() => setCount((c) => c + 1)} title=\"Update count\" />\n      ),\n    });\n  }, [navigation]);\n\n  return <Text>Count: {count}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Closing the Drawer with DrawerActions in React Navigation - JavaScript (Dynamic Navigator)\nDESCRIPTION: This code illustrates closing a drawer using DrawerActions.closeDrawer() in a dynamically configured navigator setup. It is similar to the dynamic openDrawer example but emphasizes invoking navigation.dispatch(DrawerActions.closeDrawer()) from a drawer item in CustomDrawerContent. All navigation configuration (NavigationContainer, Drawer.Navigator) is dynamic and there is explicit usage of useNavigation for dispatching actions. Requirements include the React Navigation and React Native dependencies as in previous snippets.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Button } from '@react-navigation/elements';\\nimport {\\n  NavigationContainer,\\n  DrawerActions,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport {\\n  createDrawerNavigator,\\n  DrawerContentScrollView,\\n  DrawerItemList,\\n  DrawerItem,\\n} from '@react-navigation/drawer';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home!</Text>\\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\\n        Open Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\\n        Toggle Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\\n        Jump to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen({ route }) {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile!</Text>\\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\\n    </View>\\n  );\\n}\\n\\nfunction CustomDrawerContent({ navigation }) {\\n  return (\\n    <DrawerContentScrollView {...props}>\\n      <DrawerItemList {...props} />\\n      <DrawerItem\\n        label=\"Close drawer\"\\n        onPress={() => {\\n          // codeblock-focus-start\\n          navigation.dispatch(DrawerActions.closeDrawer());\\n          // codeblock-focus-end\\n        }}\\n      />\\n      <DrawerItem\\n        label=\"Toggle drawer\"\\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\\n      />\\n    </DrawerContentScrollView>\\n  );\\n}\\n\\nconst Drawer = createDrawerNavigator();\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <Drawer.Navigator\\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\\n      >\\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\\n      </Drawer.Navigator>\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Asynchronously with useFocusEffect and AbortController in React Native\nDESCRIPTION: Illustrates how to handle asynchronous operations like data fetching within `useFocusEffect`. It uses an `AbortController` to manage the fetch request. The cleanup function returned by the effect calls `abortController.abort()` to cancel the request if the screen loses focus or unmounts before the fetch completes, preventing potential state updates with stale data or errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-focus-effect.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseFocusEffect(\n  React.useCallback(() => {\n    const abortController = new AbortController();\n\n    const fetchUser = async () => {\n      try {\n        const user = await fetch(`https://example.com/users/${userId}`, {\n          signal: abortController.signal,\n        });\n\n        setUser(user);\n      } catch (e) {\n        if (e.name !== 'AbortError') {\n          // Handle error\n        }\n      }\n    };\n\n    fetchUser();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [userId])\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping Paths to Route Names (JS)\nDESCRIPTION: This code shows how to map URLs to specific screens. The `config` object within the `linking` prop allows you to define a mapping between URL paths (e.g., 'feed/:sort') and screen names (e.g., 'Chat'). This allows for a more flexible and customizable deep linking experience.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: 'feed/:sort',\n    Profile: 'user',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Param List in TypeScript\nDESCRIPTION: Defines a basic TypeScript type `RootStackParamList` mapping route names to their expected parameter types. This example shows a 'Profile' route requiring a `userId` string.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype RootStackParamList = {\n  Profile: { userId: string };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Screen Parameters Dynamically in React Navigation using JavaScript\nDESCRIPTION: Shows how to use the `navigation.setParams` method to update the route parameters of the currently active screen. This is useful for scenarios where parameters need to change based on user interaction within the screen itself. Avoid using this for screen options like title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.setParams({\n  query: 'someText',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Between Stack Screens in React Native\nDESCRIPTION: This snippet demonstrates how to implement navigation between screens in a Stack Navigator using the push method from the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction onTweetPress() {\n  navigation.push('Details');\n}\n```\n\n----------------------------------------\n\nTITLE: Using replace Method in React Navigation\nDESCRIPTION: Demonstrates the replace method which replaces the current screen with a new screen in the stack. It takes the route name and optional params as arguments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.replace('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking Path Patterns for Screens (React Navigation, JavaScript)\nDESCRIPTION: This code defines a config object to map route names ('Chat', 'Profile') to specific path patterns using React Navigation. The 'Chat' route has a dynamic segment ':sort', while 'Profile' uses a static path. Requirements include React Navigation's linking feature and ensure the config aligns with your navigator structure. This mapping enables handling corresponding URL patterns and passing URL params as screen parameters for deep linking support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: 'feed/:sort',\n    Profile: 'user',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation for Stack Navigator Card in React Navigation\nDESCRIPTION: This snippet defines a custom card style interpolator function that creates a fade effect for screen transitions. It uses the current progress to interpolate the opacity of the card.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current }) => ({\n  cardStyle: {\n    opacity: current.progress,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Screen Options with `setOptions` in React Navigation using JavaScript\nDESCRIPTION: Shows a `ProfileScreen` component that dynamically updates its header title using `navigation.setOptions` within a `React.useEffect` hook. The title is updated based on the value entered into a `TextInput` field (managed by `React.useState`), demonstrating how to change screen options based on component state or props. It's recommended to call this in `useEffect` or similar lifecycle methods.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ navigation, route }) {\n  const [value, onChangeText] = React.useState(route.params.title);\n\n  React.useEffect(() => {\n    navigation.setOptions({\n      title: value === '' ? 'No title' : value,\n    });\n  }, [navigation, value]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <TextInput\n        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}\n        onChangeText={onChangeText}\n        value={value}\n      />\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Tab Navigator Inside Stack Navigator (Tab Bar Hidden on Some Screens)\nDESCRIPTION: This code demonstrates the recommended structure where the Tab Navigator is nested inside the first screen of a Stack Navigator. With this reorganization, the tab bar will only appear on Home, Feed, and Notifications screens but not on Profile or Settings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hiding-tabbar-in-screens.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n      <Tab.Screen name=\"Notifications\" component={Notifications} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeTabs} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using setOptions to Dynamically Update Screen Title in React Navigation (Static)\nDESCRIPTION: This example demonstrates how to dynamically update a screen's title using the setOptions method within a React Navigation component. It uses React.useEffect to update the screen title based on a TextInput value, with the title being updated whenever the input changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { title: \"Brent's profile\" });\n        }}\n      >\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  const [value, onChangeText] = React.useState(route.params.title);\n\n  React.useEffect(() => {\n    // highlight-start\n    navigation.setOptions({\n      title: value === '' ? 'No title' : value,\n    });\n    // highlight-end\n  }, [navigation, value]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <TextInput\n        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}\n        onChangeText={onChangeText}\n        value={value}\n      />\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: {\n      screen: ProfileScreen,\n      options: ({ route }) => ({ title: route.params.title }),\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer with Dynamic Navigation in React Native\nDESCRIPTION: Illustrates dispatching the `toggleDrawer` action using `DrawerActions.toggleDrawer()` in a React Native component within a dynamic navigation setup. This example uses `NavigationContainer` and passes the `navigation` prop directly to the screen component. The action toggles the drawer's open/closed state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js name=\"Drawer Actions - toggleDrawer\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  DrawerActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen({ navigation }) {\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.toggleDrawer());\n          // codeblock-focus-end\n        }}\n      >\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\n      >\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Static Stack Navigator Implementation\nDESCRIPTION: Example of implementing Stack Navigator using static configuration in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nconst MyStack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing the Current Screen Using navigation.replace (JavaScript)\nDESCRIPTION: Shows how to use the 'replace' method on the navigation object to swap the current screen with a new route, passing route parameters. Dependencies include access to the navigation prop (from react-navigation). Parameters are the screen name (string) and an object for route params. Navigates to the specified route and replaces the current one in the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.replace('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Pushing Multiple Screen Instances using React Navigation `push`\nDESCRIPTION: This React Native example demonstrates using `navigation.push('Details')` within the `DetailsScreen`. Unlike `navigate`, `push` explicitly adds a new instance of the 'Details' route to the navigation stack, even if the user is already on that screen. This is useful for scenarios requiring multiple instances of the same screen, potentially with different parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.push('Details')}>\n        Go to Details... again\n      </Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Layout in Dynamic Group Configuration\nDESCRIPTION: Example of defining a custom screen layout for all screens in a group using the Stack.Group component. The layout provides error boundary and suspense fallback for all screens in the group.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Group\n  screenLayout={({ children }) => (\n    <ErrorBoundary>\n      <React.Suspense\n        fallback={\n          <View style={styles.fallback}>\n            <Text style={styles.text}>Loading‚Ä¶</Text>\n          </View>\n        }\n      >\n        {children}\n      </React.Suspense>\n    </ErrorBoundary>\n  )}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Apply FadeTransition Preset Dynamically\nDESCRIPTION: This code snippet illustrates how to dynamically apply the `FadeTransition` preset from `@react-navigation/bottom-tabs` to a screen using the `<Tab.Screen>` component in React Navigation. It imports `TransitionPresets` and then spreads the `FadeTransition` preset into the `options` prop of the `<Tab.Screen>` component for the `Profile` screen, resulting in a cross-fade animation when navigating to that screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/bottom-tabs';\n\n// ...\n\n<Tab.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    // highlight-start\n    ...TransitionPresets.FadeTransition,\n    // highlight-end\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Header Button Interacting with Screen Component using Static Configuration\nDESCRIPTION: Demonstrates how to use navigation.setOptions to update a header button that interacts with the screen component's state. The button updates a counter in the screen component when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/header-buttons.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    // Use `setOptions` to update the button that we previously specified\n    // Now the button includes an `onPress` handler to update the count\n    navigation.setOptions({\n      headerRight: () => (\n        <Button onPress={() => setCount((c) => c + 1)}>Update count</Button>\n      ),\n    });\n  }, [navigation]);\n\n  return <Text>Count: {count}</Text>;\n}\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        // Add a placeholder button without the `onPress` to avoid flicker\n        headerRight: () => <Button>Update count</Button>,\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CommonActions.navigate with Static Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to use `CommonActions.navigate` within a React Native application configured with React Navigation's static API (`createStaticNavigation`). It shows dispatching the `navigate` action from the `HomeScreen` to navigate to the `ProfileScreen` with parameters, along with other common actions like `goBack`, `reset`, and `setParams` within the `ProfileScreen`. It relies on `@react-navigation/native`, `@react-navigation/stack`, and `@react-navigation/elements`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  CommonActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n          // codeblock-focus-end\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button onPress={() => navigation.dispatch(CommonActions.goBack())}>\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Bar Background with BlurView in React Navigation\nDESCRIPTION: This example demonstrates using a `BlurView` component as the background for the tab bar using the `tabBarBackground` option. It showcases the need to set `position: 'absolute'` in `tabBarStyle` and adjust content padding with `useBottomTabBarHeight`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n\n// ...\n\n<Tab.Navigator\n  screenOptions={{\n    tabBarStyle: { position: 'absolute' },\n    tabBarBackground: () => (\n      <BlurView tint=\"light\" intensity={100} style={StyleSheet.absoluteFill} />\n    ),\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Writing a React Navigation Test with React Native Testing Library in JavaScript\nDESCRIPTION: Demonstrates an example unit test using React Native Testing Library and Jest. It renders a `RootNavigator` wrapped in a `NavigationContainer`, simulates a user interaction (pressing a 'View Profile' button) using `fireEvent`, and asserts that the expected screen ('My Profile') is rendered using `screen.getByText` and a matcher from `jest-native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { screen, render, fireEvent } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { RootNavigator } from './RootNavigator';\n\ntest('shows profile screen when View Profile is pressed', () => {\n  render(\n    <NavigationContainer>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n\n  fireEvent.press(screen.getByText('View Profile'));\n\n  expect(screen.getByText('My Profile')).toBeOnTheScreen();\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Global Event Listeners via `screenListeners` Prop on Navigator (JavaScript/JSX)\nDESCRIPTION: Demonstrates using the `screenListeners` prop on a navigator component (`Stack.Navigator`, `Tab.Navigator`, etc.) to attach listeners to events from *all* screens within that navigator. This prop accepts either an object mapping event names to callbacks (e.g., `state`) or a function receiving `{ navigation, route }` for each screen, returning such an object. Useful for handling common events or accessing navigation/route context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-events.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator\n  screenListeners={{\n    state: (e) => {\n      // Do something with the state\n      console.log('state changed', e.data);\n    },\n  }}\n>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  screenListeners={({ navigation }) => ({\n    state: (e) => {\n      // Do something with the state\n      console.log('state changed', e.data);\n\n      // Do something with the `navigation` object\n      if (!navigation.canGoBack()) {\n        console.log(\"we're on the initial screen\");\n      }\n    },\n  })}\n>\n  <Tab.Screen name=\"Home\" component={HomeScreen} />\n  <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tab Navigator using useNavigationBuilder - React Navigation (JavaScript)\nDESCRIPTION: This JavaScript React component demonstrates how to implement a custom Tab Navigator using the useNavigationBuilder hook from @react-navigation/native. It leverages the TabRouter to manage tab-based navigation state, renders a tab bar using Pressable elements, and controls the content view based on the selected tab. Dependencies include React, React Native components (Text, Pressable, View, StyleSheet), and React Navigation (@react-navigation/native). The navigator accepts initialRouteName, children, screenOptions, tabBarStyle, and contentStyle as parameters. To function, this snippet requires the React Navigation library and a React Native environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, Pressable, View } from 'react-native';\\nimport {\\n  NavigationHelpersContext,\\n  useNavigationBuilder,\\n  TabRouter,\\n  TabActions,\\n} from '@react-navigation/native';\\n\\nfunction TabNavigator({\\n  initialRouteName,\\n  children,\\n  screenOptions,\\n  tabBarStyle,\\n  contentStyle,\\n}) {\\n  const { state, navigation, descriptors, NavigationContent } =\\n    useNavigationBuilder(TabRouter, {\\n      children,\\n      screenOptions,\\n      initialRouteName,\\n    });\\n\\n  return (\\n    <NavigationContent>\\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\\n        {state.routes.map((route, index) => (\\n          <Pressable\\n            key={route.key}\\n            onPress={() => {\\n              const isFocused = state.index === index;\\n              const event = navigation.emit({\\n                type: 'tabPress',\\n                target: route.key,\\n                canPreventDefault: true,\\n              });\\n\\n              if (!isFocused && !event.defaultPrevented) {\\n                navigation.dispatch({\\n                  ...TabActions.jumpTo(route.name, route.params),\\n                  target: state.key,\\n                });\\n              }\\n            }}\\n            style={{ flex: 1 }}\\n          >\\n            <Text>{descriptors[route.key].options.title ?? route.name}</Text>\\n          </Pressable>\\n        ))}\\n      </View>\\n      <View style={[{ flex: 1 }, contentStyle]}>\\n        {state.routes.map((route, i) => {\\n          return (\\n            <View\\n              key={route.key}\\n              style={[\\n                StyleSheet.absoluteFill,\\n                { display: i === state.index ? 'flex' : 'none' },\\n              ]}\\n            >\\n              {descriptors[route.key].render()}\\n            </View>\\n          );\\n        })}\\n      </View>\\n    </NavigationContent>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInScreen Component in React Navigation\nDESCRIPTION: This snippet shows the implementation of a SignInScreen component with username and password inputs, utilizing the AuthContext for sign-in functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button title=\"Sign in\" onPress={() => signIn({ username, password })} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Focus-Aware StatusBar Component in React Native\nDESCRIPTION: Defines a reusable React Native component `FocusAwareStatusBar` that leverages the `useIsFocused` hook from `@react-navigation/native`. It renders the standard `StatusBar` component only when the screen containing it is currently focused, ensuring the correct status bar style is applied in navigators like Tabs or Drawers. Dependencies include `React`, `StatusBar` from `react-native`, and `useIsFocused` from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { StatusBar } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction FocusAwareStatusBar(props) {\n  const isFocused = useIsFocused();\n\n  return isFocused ? <StatusBar {...props} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Focus-Aware StatusBar Component for Tab and Drawer Navigators\nDESCRIPTION: Implementation of a custom FocusAwareStatusBar component that only renders when a screen is focused. This solves the issue with Tab and Drawer navigators where multiple screens may be rendered at once, causing conflicts in status bar appearance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { StatusBar } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction FocusAwareStatusBar(props) {\n  const isFocused = useIsFocused();\n\n  return isFocused ? <StatusBar {...props} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Lifecycle with Dynamic Configuration in React Navigation\nDESCRIPTION: Example showing the same lifecycle behavior using dynamic navigator configuration with NavigationContainer. The code demonstrates how nested navigators (stack navigators inside tab navigator) preserve their navigation state when switching tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-lifecycle.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FirstScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen name=\"Settings\" component={SettingsScreen} />\n      <SettingsStack.Screen name=\"Profile\" component={ProfileScreen} />\n    </SettingsStack.Navigator>\n  );\n}\n\nfunction SecondScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen name=\"Home\" component={HomeScreen} />\n      <HomeStack.Screen name=\"Details\" component={DetailsScreen} />\n    </HomeStack.Navigator>\n  );\n}\n\nfunction Root() {\n  return (\n    <MyTabs.Navigator screenOptions={{ headerShown: false }}>\n      <MyTabs.Screen name=\"First\" component={FirstScreen} />\n      <MyTabs.Screen name=\"Second\" component={SecondScreen} />\n    </MyTabs.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Lazy Scene Rendering in TabView - React Native JavaScript\nDESCRIPTION: Configures TabView to lazily render scenes for routes matching a given condition using the lazy prop as a function. Improves initial performance by avoiding rendering some scenes until they are focused. The function takes the route object and returns a boolean. React-native-tab-view is required.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<TabView\n  lazy={({ route }) => route.name === 'Albums'}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Navigator Screen Options using 'screenOptions' on Navigator (JavaScript)\nDESCRIPTION: Illustrates applying default options (like a common `headerStyle`) to all screens within a `Stack.Navigator` by passing an object to its `screenOptions` prop. This serves as a baseline configuration for the entire navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator\n  screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Updating useLinkProps hook to accept screen/params (JavaScript)\nDESCRIPTION: This code shows the migration from passing a path string via the 'to' prop to the type-safe 'screen' and 'params' props in the useLinkProps hook from React Navigation. It requires React Navigation and correctly configured navigation types. Inputs include an options object, and the output is the navigation link props object for use in a component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n- const props = useLinkProps({ to: '/details?foo=42' });\\n+ const props = useLinkProps({ screen: 'Details', params: { foo: 42 } });\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Router in a Navigator (JS)\nDESCRIPTION: This code snippet demonstrates how to use a custom router with a navigator in React Navigation. It imports a custom router (`MyRouter`) and uses it within the `useNavigationBuilder` hook instead of the default `TabRouter`. This allows for complete customization of the navigation logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport MyRouter from './MyRouter';\n\n// ...\n\nconst { state, descriptors, navigation, NavigationContent } =\n  useNavigationBuilder(MyRouter, {\n    id,\n    initialRouteName,\n    children,\n    layout,\n    screenListeners,\n    screenOptions,\n    screenLayout,\n    backBehavior,\n  });\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Button Component with useLinkProps in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement a reusable LinkButton component in React using the useLinkProps hook from @react-navigation/native. It handles both web and native platforms by conditionally rendering either a View (with onClick and hover events for web support) or a TouchableOpacity (for native), ensuring accessible and consistent navigation. Dependencies: React, @react-navigation/native, and React Native primitives (View, Text, TouchableOpacity). Required props include 'to' (target route), optional 'action', and 'children'; the component outputs a navigable button styled appropriately for each platform.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-link-props.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useLinkProps } from '@react-navigation/native';\n\n// ...\n\nconst LinkButton = ({ to, action, children, ...rest }) => {\n  const { onPress, ...props } = useLinkProps({ to, action });\n\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  if (Platform.OS === 'web') {\n    // It's important to use a `View` or `Text` on web instead of `TouchableX`\n    // Otherwise React Native for Web omits the `onClick` prop that's passed\n    // You'll also need to pass `onPress` as `onClick` to the `View`\n    // You can add hover effects using `onMouseEnter` and `onMouseLeave`\n    return (\n      <View\n        onClick={onPress}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        style={{ transitionDuration: '150ms', opacity: isHovered ? 0.5 : 1 }}\n        {...props}\n        {...rest}\n      >\n        <Text>{children}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <TouchableOpacity onPress={onPress} {...props} {...rest}>\n      <Text>{children}</Text>\n    </TouchableOpacity>\n  );\n};\n\nfunction Home() {\n  return (\n    <LinkButton to={{ screen: 'Profile', params: { id: 'jane' } }}>\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking in Static Navigation (React Navigation)\nDESCRIPTION: Example of configuring linking for deep linking and URL support in static Navigation. It demonstrates setting up prefixes and screen paths.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: Home,\n      linking: {\n        path: 'feed/:sort',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nfunction App() {\n  const linking = {\n    prefixes: ['https://example.com', 'example://'],\n  };\n\n  return (\n    <Navigation\n      // highlight-next-line\n      linking={linking}\n      fallback={<Text>Loading...</Text>}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Tab Bar Badge (tabBarBadgeStyle) in React Navigation\nDESCRIPTION: This code snippet demonstrates how to style the tab bar badge using the `tabBarBadgeStyle` option in React Navigation. It sets the color and background color of the badge.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarBadgeStyle: {\n  color: 'black',\n  backgroundColor: 'yellow',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing headerRight in Static Configuration\nDESCRIPTION: Shows how to provide a custom component for the right side of the header using the `headerRight` option in a static Native Stack navigator configuration. It assigns a function returning a custom component (`MyButton`) which receives props like `tintColor` and `pressColor` and includes an `onPress` handler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerLeft: (props) => (\n          <MyButton {...props} onPress={() => {\n            // Do something\n          }}>\n        )\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Drawer using DrawerActions in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the openDrawer action from DrawerActions to open the drawer pane in a React Navigation drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nnavigation.dispatch(DrawerActions.openDrawer());\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Screen Options via Function in 'options' Prop (JavaScript)\nDESCRIPTION: Illustrates passing a function to the `options` prop on `Stack.Screen`. This function receives `navigation` and `route` props, enabling dynamic configuration, such as setting a custom `headerLeft` component with navigation actions (e.g., toggling a drawer).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={({ navigation }) => ({\n    title: 'Awesome app',\n    headerLeft: () => (\n      <DrawerButton onPress={() => navigation.toggleDrawer()} />\n    ),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useIsFocused Hook with Class Components in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the useIsFocused hook with class components in React Navigation. It wraps a class component in a function component to utilize the hook and pass the focus state as a prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-is-focused.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Get it from props\n    const { isFocused } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const isFocused = useIsFocused();\n\n  return <Profile {...props} isFocused={isFocused} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Listener with navigation.addListener in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates use of navigation.addListener to add an event listener for 'tabPress' that can intercept and prevent the default action (such as switching tabs). Requires a screen with access to the navigation prop, part of a React Navigation setup. The listener's callback receives the event object, and calling e.preventDefault() halts the default behavior. Returns an unsubscribe function for later clean-up.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = navigation.addListener('tabPress', (e) => {\n  // Prevent default action\n  e.preventDefault();\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Navigation Event Listener in Class Component (JavaScript/React)\nDESCRIPTION: Shows how to add a navigation event listener (e.g., 'focus') in a React class component. The listener is attached in the `componentDidMount` lifecycle method, and the `unsubscribe` function is stored as an instance property (`_unsubscribe`) to be called in the `componentWillUnmount` lifecycle method for cleanup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-events.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Profile extends React.Component {\n  componentDidMount() {\n    this._unsubscribe = navigation.addListener('focus', () => {\n      // do something\n    });\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n  }\n\n  render() {\n    // Content of the component\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FocusAwareStatusBar with Static Navigation in React Native\nDESCRIPTION: Provides a full example of a React Native application using static navigation (`createStaticNavigation`, `createNativeStackNavigator`). It showcases two distinct screens (`Screen1`, `Screen2`) each utilizing the `FocusAwareStatusBar` component to apply screen-specific status bar styles (light/dark content, different backgrounds). Dependencies include `React`, `React Native` components (`View`, `Text`, `StatusBar`, `StyleSheet`), `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/elements`, and `react-native-safe-area-context`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, StatusBar, StyleSheet } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction FocusAwareStatusBar(props) {\n  const isFocused = useIsFocused();\n\n  return isFocused ? <StatusBar {...props} /> : null;\n}\n\n// codeblock-focus-start\nfunction Screen1() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#6a51ae',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <FocusAwareStatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen2')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n\nfunction Screen2() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#ecf0f1',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <FocusAwareStatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen1')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Screen1: Screen1,\n    Screen2: Screen2,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Navigation with Nested Stack and Tab Navigators (React Navigation)\nDESCRIPTION: This snippet shows how to configure dynamic React Navigation with a nested structure of stack and tab navigators. The `HomeStack` function renders a Stack Navigator with routes for `Home`, `Profile`, and `Settings`. The `App` function renders a NavigationContainer containing a Tab Navigator, incorporating `HomeStack`, `Feed`, and `Notifications` as tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hiding-tabbar-in-screens.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeStack} />\n        <Tab.Screen name=\"Feed\" component={Feed} />\n        <Tab.Screen name=\"Notifications\" component={Notifications} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Higher Order Component Inside Parent Causes Component Identity Loss in React Navigation (JavaScript)\nDESCRIPTION: This snippet passes a higher order component (HOC) expression, such as 'withSomeData(Home)', as a screen directly within a parent component ('App'). Each time the parent renders, the HOC produces a new component, breaking component identity and causing remounts. For stable navigation, create HOC-wrapped components at top level scope, outside of any render functions. Requires usage of the specified HOC 'withSomeData' and React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={withSomeData(Home)} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Header Styles Across Screens\nDESCRIPTION: Demonstrates how to share common header styles across multiple screens using screenOptions in Stack.Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Icons using screenOptions in React Navigation (Dynamic)\nDESCRIPTION: This example shows how to use a function with 'screenOptions' to dynamically set tab icons based on the route name in a dynamic configuration. It uses MaterialCommunityIcons from @expo/vector-icons to display icons for each tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  screenOptions={({ route }) => ({\n    tabBarIcon: ({ color, size }) => {\n      const icons = {\n        Home: 'home',\n        Profile: 'account',\n      };\n\n      return (\n        <MaterialCommunityIcons\n          name={icons[route.name]}\n          color={color}\n          size={size}\n        />\n      );\n    },\n  })}\n>\n  <Tab.Screen name=\"Home\" component={EmptyScreen} />\n  <Tab.Screen name=\"Profile\" component={EmptyScreen} />\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Using `navigation.addListener` to Handle and Prevent Tab Press (JavaScript)\nDESCRIPTION: Demonstrates attaching an event listener for the `tabPress` event directly using the `navigation.addListener` method. The callback receives the event object `e`, allowing prevention of the default tab switch action via `e.preventDefault()`. The method returns an `unsubscribe` function to remove the listener.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = navigation.addListener('tabPress', (e) => {\n  // Prevent default action\n  e.preventDefault();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Custom URL Schemes in iOS AppDelegate using Objective-C\nDESCRIPTION: Modifies the `AppDelegate.m` file in a bare React Native iOS project. It imports `RCTLinkingManager.h` and implements the `application:openURL:options:` method to forward incoming URLs from custom schemes to React Native's Linking module.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Programmatically from Custom Drawer Content in React Navigation\nDESCRIPTION: Shows how to perform navigation from within the `drawerContent` component using the `navigation` prop passed to it, instead of the `useNavigation` hook which is unavailable here. This example uses a `Button` (presumably from `react-native` or a UI library) to navigate to 'SomeScreen'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction CustomDrawerContent({ navigation }) {\n  return (\n    <Button\n      onPress={() => {\n        // Navigate using the `navigation` prop that you received\n        navigation.navigate('SomeScreen');\n      }}\n    >\n      Go somewhere\n    </Button>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking for Dynamic Nested Screens in Static Navigator (JavaScript)\nDESCRIPTION: This snippet updates the static `RootStack` definition to include detailed linking configuration for the screens within the dynamically defined `FeedScreen`. It adds a nested `screens` object within the `linking` configuration for the 'Feed' route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n    },\n    Feed: {\n      screen: FeedScreen,\n      linking: {\n        path: 'feed',\n        // highlight-start\n        screens: {\n          Latest: 'latest',\n          Popular: 'popular',\n        },\n        // highlight-end\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic URL Parameter Configuration in React Navigation\nDESCRIPTION: Setting up a Chat screen with a date parameter in the URL path, which will be parsed as a string by default.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Chat: {\n      screen: ChatScreen,\n      linking: {\n        path: 'chat/:date',\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: 'chat/:date',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Screen Modal Navigation in React Navigation\nDESCRIPTION: This code demonstrates how to create a nested stack navigator structure to implement a full-screen modal in React Navigation. It shows a main stack for regular screen transitions and a root stack configured with mode=\"modal\" for modal-specific animations. The example includes screen components and navigation setup with proper configuration for modal behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>\n      <Button\n        onPress={() => navigation.navigate('MyModal')}\n        title=\"Open Modal\"\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nfunction ModalScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n      <Button onPress={() => navigation.goBack()} title=\"Dismiss\" />\n    </View>\n  );\n}\n\nconst MainStack = createStackNavigator();\nconst RootStack = createStackNavigator();\n\nfunction MainStackScreen() {\n  return (\n    <MainStack.Navigator>\n      <MainStack.Screen name=\"Home\" component={HomeScreen} />\n      <MainStack.Screen name=\"Details\" component={DetailsScreen} />\n    </MainStack.Navigator>\n  );\n}\n\nfunction RootStackScreen() {\n  return (\n    <RootStack.Navigator mode=\"modal\">\n      <RootStack.Screen\n        name=\"Main\"\n        component={MainStackScreen}\n        options={{ headerShown: false }}\n      />\n      <RootStack.Screen name=\"MyModal\" component={ModalScreen} />\n    </RootStack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bottom Tabs Navigator Implementation\nDESCRIPTION: Minimal example showing how to create a bottom tab navigation with home and settings screens using the createBottomTabNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in React Navigation Header Title\nDESCRIPTION: Shows how to use route parameters to dynamically set the header title using a function in the options prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={({ route }) => ({ title: route.params.name })}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StatusCodeContext for Handling HTTP Status Codes\nDESCRIPTION: Creation of a React context to handle HTTP status codes during server rendering. This context is used to set appropriate status codes for different scenarios like 404 errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-rendering.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nconst StatusCodeContext = React.createContext();\n\nexport default StatusCodeContext;\n```\n\n----------------------------------------\n\nTITLE: Preventing Screen Removal with `beforeRemove` in React Navigation (JavaScript)\nDESCRIPTION: This React functional component demonstrates how to prevent a user from leaving a screen if there are unsaved changes. It uses the `useEffect` hook to add a `beforeRemove` event listener to the navigation object. When the event fires, it checks the `hasUnsavedChanges` state. If true, it prevents the default navigation behavior (`e.preventDefault()`) and displays a confirmation `Alert`. If the user confirms discarding changes, the original navigation action (`e.data.action`) is dispatched to allow leaving the screen. Dependencies include React (`useState`, `useEffect`), React Navigation (`navigation.addListener`, `navigation.dispatch`), and React Native (`Alert`, `TextInput`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/preventing-going-back.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction EditText({ navigation }) {\n  const [text, setText] = React.useState('');\n  const hasUnsavedChanges = Boolean(text);\n\n  React.useEffect(\n    () =>\n      navigation.addListener('beforeRemove', (e) => {\n        if (!hasUnsavedChanges) {\n          // If we don't have unsaved changes, then we don't need to do anything\n          return;\n        }\n\n        // Prevent default behavior of leaving the screen\n        e.preventDefault();\n\n        // Prompt the user before leaving the screen\n        Alert.alert(\n          'Discard changes?',\n          'You have unsaved changes. Are you sure to discard them and leave the screen?',\n          [\n            { text: \"Don't leave\", style: 'cancel', onPress: () => {} },\n            {\n              text: 'Discard',\n              style: 'destructive',\n              // If the user confirmed, then we dispatch the action we blocked earlier\n              // This will continue the action that had triggered the removal of the screen\n              onPress: () => navigation.dispatch(e.data.action),\n            },\n          ]\n        );\n      }),\n    [navigation, hasUnsavedChanges]\n  );\n\n  return (\n    <TextInput\n      value={text}\n      placeholder=\"Type something‚Ä¶\"\n      onChangeText={setText}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling React Navigation Drawer (Static Config) in JavaScript\nDESCRIPTION: Shows how to toggle the drawer's state (open/close) from a screen component using the `navigation.toggleDrawer()` helper function. This snippet is part of a static navigation setup configured with `createStaticNavigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Drawer toggle\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to the transitionEnd Event - React Navigation (JavaScript)\nDESCRIPTION: Similar to transitionStart, this snippet listens to the transitionEnd event on the navigation object, firing a callback after a screen transition finishes. Utilizes React useEffect for subscribing and cleaning up. No special dependencies beyond React.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Hiding Stack Navigator Header in React Navigation v6 (JavaScript)\nDESCRIPTION: Demonstrates how to hide the header for all screens in a Stack Navigator using the `headerShown: false` option within `screenOptions`. This replaces the removed `headerMode=\"none\"` prop from previous versions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator screenOptions={{ headerShown: false }}>\n  <Stack.Screen name=\"Home\" component={Home} />\n  <Stack.Screen name=\"Profile\" component={Profile} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options per Screen using 'options' Prop in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates setting screen-specific options like the header title using the `options` prop directly on individual `Stack.Screen` components within a `Stack.Navigator`. This approach applies settings only to the specific screen where the prop is defined.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen\n    name=\"Home\"\n    component={HomeScreen}\n    options={{ title: 'Awesome app' }}\n  />\n  <Stack.Screen\n    name=\"Profile\"\n    component={ProfileScreen}\n    options={{ title: 'My profile' }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Params for Deep Linking (Static, React Navigation, JavaScript)\nDESCRIPTION: This sample configures a Stack Navigator so that the 'Profile' route's 'section' param is optional (indicated by '?'). The 'parse' and 'stringify' functions adjust the 'id' param to and from a custom value. The config allows both '/user/jane/settings' and '/user/jane' to navigate to the same screen, with 'section' being optional. It requires React Navigation's stack navigator and a ProfileScreen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      linking: {\n        // highlight-next-line\n        path: 'user/:id/:section?',\n        parse: {\n          id: (id) => `user-${id}`,\n        },\n        stringify: {\n          id: (id) => id.replace(/^user-/, ''),\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Param Parsing in React Navigation\nDESCRIPTION: This snippet shows how to implement custom parsing for route params, converting a string timestamp to a number when parsing the URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: {\n      path: 'chat/:date',\n      parse: {\n        date: Number,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Function-Based Screen Options in Static Group Configuration\nDESCRIPTION: Example of using a function to dynamically determine screen options based on route and navigation in static configuration. The function receives route and navigation objects as parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  groups: {\n    Modal: {\n      screenOptions: ({ route, navigation }) => ({\n        title: route.params.title,\n      }),\n      screens: {\n        /* screens */\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Targeting goBack Action with Dynamic Configuration in React Native\nDESCRIPTION: This snippet illustrates targeting the `goBack` action using `source` and `target` properties within a dynamically configured (`NavigationContainer`) React Navigation setup. The example focuses on the `ProfileScreen` where a button dispatches `CommonActions.goBack()` with specific `source` (current route's key) and `target` (navigator's key, potentially passed via params) to ensure the correct navigator handles the back action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Common actions goBack\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  CommonActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button onPress={() => navigation.dispatch(CommonActions.goBack())}>\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Stack Options Based on Child Tab Navigator using options prop\nDESCRIPTION: This example shows how to dynamically set the headerTitle of a stack screen based on the active tab in the child tab navigator using the options prop with a function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeTabs}\n  options={({ route }) => ({\n    headerTitle: getHeaderTitle(route),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Android Back Button Behavior in React Navigation\nDESCRIPTION: This code snippet demonstrates how to implement custom Android back button handling in a React Navigation screen. It uses the useFocusEffect hook and BackHandler API to handle back button presses, allowing for custom logic such as disabling a selection mode before popping the screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ScreenWithCustomBackBehavior() {\n  // ...\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const onBackPress = () => {\n        if (isSelectionModeEnabled()) {\n          disableSelectionMode();\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      const subscription = BackHandler.addEventListener(\n        'hardwareBackPress',\n        onBackPress\n      );\n\n      return () => subscription.remove();\n    }, [isSelectionModeEnabled, disableSelectionMode])\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Action with StackActions in LinkButton (JavaScript)\nDESCRIPTION: This example demonstrates how to customize navigation behavior by supplying the 'action' prop to LinkButton, using StackActions.replace from @react-navigation/native to perform a replace navigation instead of the default navigate action. This enables workflow scenarios such as replacing the current screen in the navigation stack. Dependencies: React, @react-navigation/native (specifically StackActions), the LinkButton component. Inputs: 'to' object specifying the target screen and params; 'action' specifying the custom navigation action. Output: On button press, the current route is replaced with the Profile screen for 'jane'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-link-props.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  return (\n    <LinkButton\n      to={{ screen: 'Profile', params: { id: 'jane' } }}\n      action={StackActions.replace('Profile', { id: 'jane' })}\n    >\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Typed Navigator and Screen Components in TSX\nDESCRIPTION: Demonstrates using the typed `RootStack.Navigator` and `RootStack.Screen` components. Type checking is applied to props like `initialRouteName`, `name`, `component`, and `initialParams`, ensuring they conform to the `RootStackParamList` definition.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RootStack.Navigator initialRouteName=\"Home\">\n  <RootStack.Screen name=\"Home\" component={Home} />\n  <RootStack.Screen\n    name=\"Profile\"\n    component={Profile}\n    initialParams={{ userId: user.id }}\n  />\n  <RootStack.Screen name=\"Feed\" component={Feed} />\n</RootStack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Custom getStateFromPath Implementation for React Navigation\nDESCRIPTION: Shows how to override the default state-from-path parsing logic in React Navigation's linking configuration. This allows customizing how URLs are converted to navigation state objects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    getStateFromPath(path, config) {\n      // Return a state object here\n      // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions using CommonActions\nDESCRIPTION: Illustrates using `navigation.dispatch` along with action creators from `@react-navigation/native` (e.g., `CommonActions.navigate`) to perform navigation actions programmatically, like navigating to a specific screen ('Profile'). This is the recommended approach over constructing action objects manually. Requires the `navigation` prop and `CommonActions` imported from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.navigate({\n    name: 'Profile',\n    params: {},\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Screen Component Annotation - TSX\nDESCRIPTION: Shows how to use the defined `Props` type to annotate function and class components, ensuring type safety for `route` and `navigation` props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ProfileScreen({ route, navigation }: Props) {\n  // ...\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nclass ProfileScreen extends React.Component<Props> {\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Navigation State with Reset Action in React Navigation\nDESCRIPTION: Illustrates how to use the dispatch function with a callback to modify the existing navigation state. This example removes all screens after the 'Profile' screen from the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch((state) => {\n  // Remove all the screens after `Profile`\n  const index = state.routes.findIndex((r) => r.name === 'Profile');\n  const routes = state.routes.slice(0, index + 1);\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom getInitialURL for React Navigation Linking with Firebase Integration\nDESCRIPTION: Demonstrates implementing a custom getInitialURL function that checks both standard deep links and Firebase push notifications for the initial URL to handle. This allows handling URLs from multiple sources.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    async getInitialURL() {\n      // Check if app was opened from a deep link\n      const url = await Linking.getInitialURL();\n\n      if (url != null) {\n        return url;\n      }\n\n      // Check if there is an initial firebase notification\n      const message = await messaging().getInitialNotification();\n\n      // Get the `url` property from the notification which corresponds to a screen\n      // This property needs to be set on the notification payload when sending it\n      return message?.data?.url;\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>;\n```\n\n----------------------------------------\n\nTITLE: Setting Initial State in Navigation Container (React Navigation)\nDESCRIPTION: Examples of setting the initialState prop in both static and dynamic Navigation configurations. This is useful for cases like deep linking and state persistence.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Navigation\n  // highlight-next-line\n  initialState={initialState}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  // highlight-next-line\n  initialState={initialState}\n>\n  {/* ... */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Handling Search Bar Text Changes in React Navigation using Hooks\nDESCRIPTION: This React snippet shows how to capture text input from a React Navigation header search bar. It uses the `useState` hook to manage the search text state and the `useLayoutEffect` hook to set the `onChangeText` callback within `headerSearchBarOptions`. The callback updates the state variable whenever the text in the search bar changes, accessing the text via `event.nativeEvent.text`. Requires the `navigation` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst [search, setSearch] = React.useState('');\n\nReact.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      onChangeText: (event) => setSearch(event.nativeEvent.text),\n    },\n  });\n}, [navigation]);\n```\n```\n\n----------------------------------------\n\nTITLE: Stack Replace Action Example in React Navigation\nDESCRIPTION: Demonstrates how to use StackActions.replace to replace the current screen with a new one in both static and dynamic navigation configurations. Takes a route name and params as arguments to replace the current route in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(StackActions.replace('Profile', { user: 'Wojtek' }));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch({\n  ...StackActions.replace('Profile', {\n    user: 'jane',\n  }),\n  source: route.key,\n  target: navigation.getState().key,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation with useNavigation Hook in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to use the useNavigation hook from @react-navigation/native within a functional component to access the navigation object in a React Native app. The component renders a Back button that, when pressed, triggers the navigation.goBack() method to navigate to the previous screen. Dependencies include React, react-native, and @react-navigation/native. The key parameter is the navigation object, and the component expects to be rendered within a navigation screen context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Button } from 'react-native';\\nimport { useNavigation } from '@react-navigation/native';\\n\\nfunction MyBackButton() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <Button\\n      title=\"Back\"\\n      onPress={() => {\\n        navigation.goBack();\\n      }}\\n    />\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic tab icons using screenOptions with Tab Navigator\nDESCRIPTION: Demonstrates using a function with 'screenOptions' to dynamically set tab icons based on route names in a Tab Navigator, using MaterialCommunityIcons component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab.Navigator\n  screenOptions={({ route }) => ({\n    tabBarIcon: ({ color, size }) => {\n      const icons = {\n        Home: 'home',\n        Profile: 'account',\n      };\n\n      return (\n        <MaterialCommunityIcons\n          name={icons[route.name]}\n          color={color}\n          size={size}\n        />\n      );\n    },\n  })}\n>\n  <Tab.Screen name=\"Home\" component={HomeScreen} />\n  <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect to Subscribe to Data Updates (React Navigation, JavaScript)\nDESCRIPTION: Demonstrates how to use the useFocusEffect hook from @react-navigation/native within a functional React component to manage a data subscription based on screen focus. The snippet shows proper use of React.useCallback to prevent unnecessary executions and includes clean-up logic via a return function. Dependencies required: React, @react-navigation/native, and an API object with a subscribe method. The core parameter is userId, representing the user to subscribe to. Outputs the ProfileContent component updated dynamically as the user data changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-focus-effect.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile({ userId }) {\n  const [user, setUser] = React.useState(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, (user) => setUser(user));\n\n      return () => unsubscribe();\n    }, [userId])\n  );\n\n  return <ProfileContent user={user} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Back Button with Static Configuration in React Navigation\nDESCRIPTION: Shows how to customize the back button's title and style in a stack navigator using static configuration. This example modifies the text and font size of the back button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/header-buttons.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerBackTitle: 'Custom Back',\n        headerBackTitleStyle: { fontSize: 30 },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Parsing in React Navigation Deep Linking\nDESCRIPTION: Shows how to define custom parameter parsing functions in the linking configuration. This example demonstrates parsing an ID parameter to an integer value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  screens: {\n    Catalog: {\n      path: 'item/:id',\n      parse: {\n        id: id => parseInt(id, 10),\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider with React Navigation\nDESCRIPTION: Basic setup for integrating Redux with React Navigation by wrapping the NavigationContainer with a Redux Provider component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/redux-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Provider } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\n\n// Render the app container component with the provider around it\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>{/* Screen configuration */}</NavigationContainer>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation State Persistence with AsyncStorage in React Navigation\nDESCRIPTION: This snippet demonstrates how to implement navigation state persistence using AsyncStorage. It shows how to save navigation state on changes and restore it when the app starts, with special handling for deep links. The code uses React hooks to manage the loading state while the persisted state is being retrieved.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/state-persistence.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(false);\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' && initialUrl == null) {\n          // Only restore state if there's no deep link and we're not on web\n          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedStateString\n            ? JSON.parse(savedStateString)\n            : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer\n      initialState={initialState}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\n      }\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Drawer Actions with React Navigation in JavaScript\nDESCRIPTION: This snippet shows how to open, close, or toggle the drawer navigator by dispatching explicit drawer-related actions using the DrawerActions API. This approach allows for more flexible control and can be useful when integrating with custom logic or non-standard navigation flows. Dependencies include react-navigation with DrawerActions imported, and the enclosing component must be navigation-aware. Inputs are DrawerActions methods; outputs are UI drawer state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.dispatch(DrawerActions.openDrawer());\nthis.props.navigation.dispatch(DrawerActions.closeDrawer());\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Nested Path Matching with Relative and Exact Behavior (Dynamic Config) - React Navigation (JavaScript)\nDESCRIPTION: This object dynamic config sets up nested matching, with the Profile screen path relative to Home ('feed'), resulting in matching paths such as '/feed/users/:id'. No direct dependencies besides React Navigation config, and used as navigation mapping for path resolution in the navigation container. For non-relative (absolute) paths, the exact config option is shown in a subsequent snippet.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'feed',\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Material Bottom Tab Navigator in React Navigation\nDESCRIPTION: Example of applying custom styles to the Material Bottom Tab Navigator, including active and inactive colors, and background color for the navigation bar.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tab.Navigator\n  initialRouteName=\"Home\"\n  activeColor=\"#f0edf6\"\n  inactiveColor=\"#3e2465\"\n  barStyle={{ backgroundColor: '#694fad' }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigators Within Tab Navigation\nDESCRIPTION: Comprehensive example showing how to implement stack navigation within each tab of a tab navigator. This creates nested navigation patterns where each tab has its own navigation stack with multiple screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-based-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Details!</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n\nfunction SettingsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n\nconst HomeStack = createStackNavigator();\n\nfunction HomeStackScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen name=\"Home\" component={HomeScreen} />\n      <HomeStack.Screen name=\"Details\" component={DetailsScreen} />\n    </HomeStack.Navigator>\n  );\n}\n\nconst SettingsStack = createStackNavigator();\n\nfunction SettingsStackScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen name=\"Settings\" component={SettingsScreen} />\n      <SettingsStack.Screen name=\"Details\" component={DetailsScreen} />\n    </SettingsStack.Navigator>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeStackScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsStackScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook for Navigation Lifecycle (JavaScript)\nDESCRIPTION: This code utilizes the useFocusEffect hook from @react-navigation/native for executing side effects whenever a screen in a navigator comes into or goes out of focus. The usage of React.useCallback ensures that the effect's dependencies are managed correctly and reduces unnecessary executions. Dependencies: @react-navigation/native, React. The Profile component runs an effect on focus and a cleanup function on blur/unfocus. Expected input: none beyond normal screen component integration. Outputs are arbitrary side effects. Limitation: use empty dependency array to match component mount/unmount unless more dependencies are needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-lifecycle.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile() {\n  useFocusEffect(\n    React.useCallback(() => {\n      // Do something when the screen is focused\n\n      return () => {\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Navigation with goBack Implementation in React Navigation\nDESCRIPTION: Example of implementing the goBack navigation method using static navigation configuration in React Navigation. Shows a two-screen navigation setup with a home screen and profile screen that includes a back button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brent's profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Text>Friends: </Text>\n      <Text>{route.params.names[0]}</Text>\n      <Text>{route.params.names[1]}</Text>\n      <Text>{route.params.names[2]}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Deep Linking Prefix and Fallback in React Navigation for Expo (JavaScript)\nDESCRIPTION: Imports `expo-linking` to generate a deep link prefix using `Linking.createURL('/')`. This prefix is passed to the `linking` prop of the `NavigationContainer`. A `fallback` component (`<Text>Loading...</Text>`) is provided to display while the initial state is being resolved from the deep link.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\n\nconst prefix = Linking.createURL('/');\n\nfunction App() {\n  const linking = {\n    prefixes: [prefix],\n  };\n\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Navigation Logic via Function\nDESCRIPTION: Example of passing an action creator function to `navigation.dispatch`. This function receives the current navigation state (`state`) and must return a valid navigation action object (e.g., using `CommonActions.reset`). This pattern allows for complex, state-dependent navigation logic, such as prepending a 'Home' route and resetting the stack. Requires the `navigation` prop and `CommonActions`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch((state) => {\n  // Add the home route to the start of the stack\n  const routes = [{ name: 'Home' }, ...state.routes];\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners via listeners Prop on a Tab.Screen (JSX/JavaScript)\nDESCRIPTION: Shows how to directly assign a listener for the 'tabPress' event to a Tab.Screen by supplying a listeners prop with an event-handler object. The handler receives the event and can prevent the default tab behavior by calling e.preventDefault(). Requires setup with React Navigation's Tab Navigator and a relevant Chat component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-events.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Screen\n  name=\"Chat\"\n  component={Chat}\n  listeners={{\n    tabPress: (e) => {\n      // Prevent default action\n      e.preventDefault();\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Navigation Structure: Tab Navigator within Stack Navigator (React Navigation/JavaScript)\nDESCRIPTION: This snippet sets up a common nested navigation structure where a `BottomTabNavigator` (`HomeTabs`) containing several screens (`FeedScreen`, `ProfileScreen`, `AccountScreen`) is nested as a screen component (`Home`) within a `NativeStackNavigator` (`App`). This structure is used in subsequent examples to demonstrate setting parent options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options-resolution.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      <Tab.Screen name=\"Account\" component={AccountScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeTabs} />\n        <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook in a Functional Component (React/React Native)\nDESCRIPTION: This snippet demonstrates how to use the `useTheme` hook from `@react-navigation/native` within a functional React Native component (`MyButton`). It retrieves the `colors` object from the current theme and uses `colors.card` and `colors.text` to dynamically style a `TouchableOpacity` and `Text` component, adapting their appearance based on the active theme (e.g., light or dark).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\n\n// Black background and white text in light theme, inverted on dark theme\nfunction MyButton() {\n  const { colors } = useTheme();\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\n      <Text style={{ color: colors.text }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Class Component in Function Component for Navigation with useNavigation (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to inject the navigation prop into a React class component by wrapping it in a functional component that uses the useNavigation hook. The wrapper gets the navigation object using the hook, then passes it along with all existing props to the class component, enabling legacy class-based components to access navigation functionality. Dependencies are React and @react-navigation/native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyBackButton extends React.Component {\\n  render() {\\n    // Get it from props\\n    const { navigation } = this.props;\\n  }\\n}\\n\\n// Wrap and export\\nexport default function (props) {\\n  const navigation = useNavigation();\\n\\n  return <MyBackButton {...props} navigation={navigation} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Drawer Content with Action Controls in React Navigation\nDESCRIPTION: Implementation of custom drawer items to close and toggle the drawer using DrawerActions. These buttons are added to the default drawer content to provide additional control options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<DrawerItem\n  label=\"Close drawer\"\n  onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n/>\n<DrawerItem\n  label=\"Toggle drawer\"\n  onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying a Custom Theme in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom theme by extending the `DefaultTheme` from `@react-navigation/native` and overriding specific colors. The custom theme (`MyTheme`) is then passed to the `theme` prop of the `NavigationContainer` to apply the custom styling globally.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\n\nconst MyTheme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: 'rgb(255, 45, 85)',\n  },\n};\n\nexport default function App() {\n  return (\n    <NavigationContainer theme={MyTheme}>{/* content */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsed Parameter Example in React Navigation\nDESCRIPTION: Example of parsed URL parameters that React Navigation extracts from the path.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n{ date: '1589842744264' }\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Header Style Interpolator to Stack Screen in React Navigation\nDESCRIPTION: This code shows how to apply a custom header style interpolator (the fade effect) to a Stack.Screen component using the headerStyleInterpolator option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{ headerStyleInterpolator: forFade }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Header Title in Static Navigation Configuration\nDESCRIPTION: This snippet shows how to apply the dynamic header title function in a static navigation configuration. It uses the options prop on the Home screen to set the header title based on the child navigator's state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeTabs,\n      options: ({ route }) => ({\n        headerTitle: getHeaderTitle(route),\n      }),\n    },\n    Settings: SettingsScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Completion of Navigation Tree Mount with onReady Prop (React Navigation, JSX)\nDESCRIPTION: Utilizes the onReady prop on NavigationContainer to perform actions when the navigator finishes mounting for the first time. This is critical for ensuring refs are usable or hiding splash screens. The callback executes once after initial mount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\\n  onReady={() => console.log('Navigation container is ready')}\\n>\\n  {/* ... */}\\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Complete Bottom Tab Navigator Setup in React Navigation\nDESCRIPTION: Comprehensive example of setting up a bottom tab navigator with custom icons, badges, and styling options using MaterialCommunityIcons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      tabBarOptions={{\n        activeTintColor: '#e91e63',\n      }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={size} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{\n          tabBarLabel: 'Updates',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"bell\" color={color} size={size} />\n          ),\n          tabBarBadge: 3,\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"account\" color={color} size={size} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using push() to Add Multiple Instances of the Same Screen\nDESCRIPTION: Example showing how to use navigation.push() to add another instance of the Details screen to the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  title=\"Go to Details... again\"\n  onPress={() => navigation.push('Details')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listening to Screen Transition Start Events in React Navigation\nDESCRIPTION: This React snippet demonstrates how to subscribe to the `transitionStart` event emitted by the React Navigation navigator. It uses the `useEffect` hook to add an event listener via `navigation.addListener` when the component mounts. The callback function receives the event object (`e`), which includes data like `e.data.closing` indicating if the screen is closing. The hook also returns a cleanup function (`unsubscribe`) that removes the listener when the component unmounts. Requires the `navigation` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook in Functional Component\nDESCRIPTION: Demonstrates how to implement a themed button component using the useTheme hook to access current theme colors. The button adapts its background and text colors based on the active theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\n\n// Black background and white text in light theme, inverted on dark theme\nfunction MyButton() {\n  const { colors } = useTheme();\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\n      <Text style={{ color: colors.text }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Header in React Navigation Drawer Navigator\nDESCRIPTION: This snippet illustrates how to provide a custom header component for a screen using the `header` option. The function receives navigation, route, options, and layout props and should return a React Element. It uses `getHeaderTitle` from `@react-navigation/elements` to get the title and passes custom styles. This can be set globally via `screenOptions` or per-screen via `options`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return <MyHeader title={title} style={options.headerStyle} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling drawerItemPress Event in Drawer Navigator\nDESCRIPTION: This snippet shows how to add an event listener for the `drawerItemPress` event using `navigation.addListener`. It demonstrates preventing the default behavior (focusing the screen or closing the drawer) by calling `event.preventDefault()` and allowing custom logic execution.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('drawerItemPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigator State with React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to use the 'reset' method on the navigation object to set a new navigation state with a specific set of routes, typically as part of transitioning the user to a new navigation stack (such as after login or logout). Requires React Navigation v5 or above, and access to a 'navigation' prop or object. The main parameter, an object with a 'routes' array, defines the state to reset to. This method replaces the old signature that used an array of actions. Output is a new screen stack with only the given routes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.reset({\n  routes: [{ name: 'Home' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Default Options and Parent Options (React Navigation, JS)\nDESCRIPTION: Demonstrates configuring a `createStackNavigator`. It uses `defaultNavigationOptions` to set default options (like `title`) for screens *within* the stack (`A`). It also sets `navigationOptions` directly on the `HomeStack` component itself to control its appearance (e.g., `tabBarLabel`) when used as a screen within a parent navigator (like a tab navigator).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst HomeStack = createStackNavigator(\n  { A },\n  {\n    // This is the default for screens in the stack, so `A` will\n    // use this title unless it overrides it\n    defaultNavigationOptions: {\n      title: 'Welcome',\n    },\n  }\n);\n\n// These are the options that are used by the navigator that renders\n// the HomeStack, in our example above this is a tab navigator.\nHomeStack.navigationOptions = {\n  tabBarLabel: 'Home!',\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Static Scene Style Interpolator for Bottom Tab in React Navigation\nDESCRIPTION: This code snippet demonstrates how to configure `sceneStyleInterpolator` for a specific screen within a React Navigation Bottom Tab Navigator using a static configuration. It applies a fade-in/fade-out effect to the screen content during tab transitions by interpolating the opacity based on the transition progress.  The configuration is applied to the 'Profile' screen's options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Profile: {\n    screen: Profile,\n    options: {\n      // highlight-start\n      sceneStyleInterpolator: ({ current }) => ({\n        sceneStyle: {\n          opacity: current.progress.interpolate({\n            inputRange: [-1, 0, 1],\n            outputRange: [0, 1, 0],\n          }),\n        },\n      }),\n      // highlight-end\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using popToTop() to Return to the First Screen\nDESCRIPTION: Extended DetailsScreen component showing how to use navigation.popToTop() to return to the first screen in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() => navigation.push('Details')}\n      />\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n      <Button\n        title=\"Go back to first screen in stack\"\n        onPress={() => navigation.popToTop()}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnimatedHeaderHeight Hook with Native Stack Navigator\nDESCRIPTION: Uses the new useAnimatedHeaderHeight hook from the Native Stack Navigator to animate content based on header height changes, such as when large titles shrink to small titles on iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nconst headerHeight = useAnimatedHeaderHeight();\n\nreturn (\n  <Animated.View style={{ transform: { translateY: headerHeight } }}>\n    {/* ... */}\n  </Animated.View>\n);\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State Using navigation.reset (JavaScript)\nDESCRIPTION: This snippet demonstrates how to programmatically reset the navigation state in React Navigation by using navigation.reset. It sets the routes array and the index, allowing direct control over which route is focused and the sequence; React Navigation will correct the index and fill in missing details as necessary. It is particularly useful for workflow resets or onboarding flows. Requires navigation object typically provided via React Navigation's hooks or props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-state.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.reset({\n  index: 0,\n  routes: [{ name: 'Home' }, { name: 'Profile' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Catch-All Route for 404 Handling in React Navigation (JS)\nDESCRIPTION: This code snippet demonstrates how to define a catch-all route in React Navigation using the `*` wildcard to handle unmatched URLs. This allows you to display a custom error page when the user navigates to a non-existent route.  The `NotFound` route will be matched if the path doesn't match any other defined route. This configuration is useful for handling 404 errors and providing a better user experience.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: 'settings',\n      },\n    },\n    NotFound: '*',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing TabActions.jumpTo in React Navigation (Dynamic Configuration)\nDESCRIPTION: This snippet illustrates the use of TabActions.jumpTo in a React Native app with dynamic navigation configuration. It demonstrates the implementation in a HomeScreen component, creating a jumpTo action to navigate to the Profile screen with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  // highlight-next-line\n  const jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // highlight-next-line\n          navigation.dispatch(jumpToAction);\n        }}\n      >\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator (Static) in React Native\nDESCRIPTION: This code shows how to create a stack navigator with two screens (Home and Surprise) using `createStackNavigator` from `@react-navigation/stack`.  It utilizes the `useNavigation` hook to enable navigation and defines the HomeScreen and SurpriseScreen components. The SurpriseScreen uses `useEffect` and `useState` to conditionally display text after a navigation event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button, Text, View } from 'react-native';\nimport { useEffect, useState } from 'react';\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n      <Button\n        onPress={() => navigation.navigate('Surprise')}\n        title=\"Click here!\"\n      />\n    </View>\n  );\n};\n\nconst SurpriseScreen = () => {\n  const navigation = useNavigation();\n\n  const [textVisible, setTextVisible] = useState(false);\n\n  useEffect(() => {\n    navigation.addListener('transitionEnd', () => setTextVisible(true));\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {textVisible ? <Text>Surprise!</Text> : ''}\n    </View>\n  );\n};\n\nexport const MyStack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Surprise: SurpriseScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animation for Stack Navigator Transitions in React\nDESCRIPTION: This snippet demonstrates how to create a custom spring animation configuration for Stack Navigator transitions. It specifies stiffness, damping, mass, and other spring-related properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  animation: 'spring',\n  config: {\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Screen Navigation Example\nDESCRIPTION: Shows how to navigate to a screen using the navigate method\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate('Profile');\n```\n\n----------------------------------------\n\nTITLE: Authentication Context with Reducer (React)\nDESCRIPTION: This code snippet sets up an authentication context using React's `createContext` and a reducer for managing authentication state. The reducer handles sign-in and sign-out actions, updating the user token and loading state. The `useReducer` hook initializes the state and provides a dispatch function for triggering state updates.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst AuthContext = React.createContext();\n\nconst authReducer = (prevState, action) => {\n  switch (action.type) {\n    case 'RESTORE_TOKEN':\n      return {\n        ...prevState,\n        userToken: action.token,\n        isLoading: false,\n      };\n    case 'SIGN_IN':\n      return {\n        ...prevState,\n        isSignout: false,\n        userToken: action.token,\n      };\n    case 'SIGN_OUT':\n      return {\n        ...prevState,\n        isSignout: true,\n        userToken: null,\n      };\n  }\n};\n\nfunction AuthProvider({ children }) {\n  const [state, dispatch] = React.useReducer(authReducer, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null,\n  });\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  return (\n    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation Container with Expo Linking\nDESCRIPTION: This code demonstrates how to set up the NavigationContainer with Expo Linking to handle deep links. It creates a URL prefix using Linking.createURL and configures the NavigationContainer to use this prefix for deep linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Install this package with `npx expo install expo-linking`\nimport * as Linking from 'expo-linking';\n\n// Linking.createURL is available as of expo@40.0.1 and expo-linking@2.0.1. If\n// you are using older versions, you can upgrade or use Linking.makeUrl instead,\n// but note that your deep links in standalone apps will be in the format\n// scheme:/// rather than scheme:// if you use makeUrl.\nconst prefix = Linking.createURL('/');\n\nfunction App() {\n  const linking = {\n    prefixes: [prefix],\n  };\n\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook for Granular Control\nDESCRIPTION: This snippet demonstrates using the useSafeAreaInsets hook from react-native-safe-area-context to apply specific insets only where needed, giving more control than the SafeAreaView component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/handling-safe-area.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional State Restoration in NavigationContainer\nDESCRIPTION: Example showing how to conditionally restore navigation state based on platform and deep linking conditions. This is important to prevent conflicts between deep links and persisted state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialUrl = await Linking.getInitialURL();\n\nif (Platform.OS !== 'web' && initialUrl == null) {\n  // Only restore state if there's no deep link and we're not on web\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Parameters for a Screen in React Navigation using JSX\nDESCRIPTION: Illustrates how to set default parameters for a screen using the `initialParams` prop on the `Stack.Screen` component. These defaults are used if no parameters are explicitly passed during navigation or are shallowly merged with any passed parameters. Requires `@react-navigation/stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Details\"\n  component={DetailsScreen}\n  initialParams={{ itemId: 42 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Params in Linking Config (Dynamic, React Navigation, JavaScript)\nDESCRIPTION: This snippet dynamically configures the 'Profile' screen's path with an optional 'section' param in the linking config. Custom parse and stringify functions map between plain and formatted ids. The config enables support for both optional and required params in route patterns, permitting flexible deep linking and programmatic param processing for navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Profile: {\n      // highlight-next-line\n      path: 'user/:id/:section?',\n      parse: {\n        id: (id) => `user-${id}`,\n      },\n      stringify: {\n        id: (id) => id.replace(/^user-/, ''),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Bar in React Navigation Header\nDESCRIPTION: Example showing how to implement and configure a search bar in the header using useLayoutEffect hook.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      // search bar options\n    },\n  });\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Focus Status with isFocused\nDESCRIPTION: Demonstrates calling `navigation.isFocused()` to synchronously check if the current screen is focused. This method returns `true` if focused, `false` otherwise. It's primarily useful in callbacks or event listeners as it doesn't trigger component re-renders. For focus-dependent rendering, `useIsFocused` hook is recommended. Requires the `navigation` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst isFocused = navigation.isFocused();\n```\n\n----------------------------------------\n\nTITLE: Listening to Focus and Blur Events in Static React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates the use of the navigation object in a statically configured stack navigator to listen for \"focus\" and \"blur\" events using addListener within React.useEffect. Dependencies include @react-navigation/native, @react-navigation/native-stack, react-navigation/elements, and react-native. Screens add event listeners to respond to navigation changes, logging when they come into or leave focus. The navigator is statically created; no NavigationContainer is required. Input is user navigation actions, and the output is side effects such as console logs. Cleanup is managed by unsubscribing automatically when components unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-lifecycle.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { Button } from '@react-navigation/elements';\\n\\n// codeblock-focus-start\\nfunction ProfileScreen() {\\n  const navigation = useNavigation();\\n\\n  React.useEffect(() => {\\n    // highlight-start\\n    const unsubscribe = navigation.addListener('focus', () => {\\n      console.log('ProfileScreen focused');\\n    });\\n    // highlight-end\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  React.useEffect(() => {\\n    // highlight-start\\n    const unsubscribe = navigation.addListener('blur', () => {\\n      console.log('ProfileScreen blurred');\\n    });\\n    // highlight-end\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  React.useEffect(() => {\\n    const unsubscribe = navigation.addListener('focus', () => {\\n      console.log('HomeScreen focused');\\n    });\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  React.useEffect(() => {\\n    const unsubscribe = navigation.addListener('blur', () => {\\n      console.log('HomeScreen blurred');\\n    });\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst RootStack = createNativeStackNavigator({\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Catch-All Routing for Invalid Sub-Paths (Static Config) - React Navigation (JavaScript)\nDESCRIPTION: The snippet defines a nested stack navigator for settings, adding an InvalidSettings screen with a catch-all '*' path for invalid or extra paths under the 'Settings' route. This enables three levels of navigation: HomeTabs (Feed, Profile, Settings), SettingsStack (UserSettings, InvalidSettings), and RootStack. Dependencies include all referenced screen components and React Navigation stack/tab navigator functions. Any path not matched under the proper route will render the corresponding NotFound or InvalidSettings screen, improving error display granularity.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SettingsStack = createStackNavigator({\n  screens: {\n    UserSettings: {\n      screen: UserSettingsScreen,\n      linking: {\n        path: 'user-settings',\n      },\n    },\n    InvalidSettings: {\n      screen: InvalidSettingsScreen,\n      linking: {\n        // highlight-next-line\n        path: '*',\n      },\n    },\n  },\n});\n\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: {\n      screen: FeedScreen,\n    },\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n      },\n    },\n    Settings: {\n      screen: SettingsStack,\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeTabs,\n    },\n    NotFound: {\n      screen: NotFoundScreen,\n      linking: {\n        path: '*',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useTheme with Dynamic Navigation - React Navigation (JavaScript)\nDESCRIPTION: This example showcases using the useTheme hook within a dynamic NavigationContainer configuration. It sets up and combines stack, drawer, and functional components, allowing for runtime theme switching based on the current device color scheme. Dependencies include @react-navigation/native, @react-navigation/native-stack, @react-navigation/drawer, @react-navigation/elements, and React Native. Parameters such as navigation and route are used to pass state and handle navigation; the result is a fully responsive navigation structure reflecting the active theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text, TouchableOpacity, useColorScheme } from 'react-native';\\nimport {\\n  NavigationContainer,\\n  DefaultTheme,\\n  DarkTheme,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createDrawerNavigator } from '@react-navigation/drawer';\\nimport { Button } from '@react-navigation/elements';\\n// codeblock-focus-start\\nimport { useTheme } from '@react-navigation/native';\\n\\n// codeblock-focus-end\\nfunction SettingsScreen({ route }) {\\n  const navigation = useNavigation();\\n  const { user } = route.params;\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Settings Screen</Text>\\n      <Text style={{ color: colors.text }}>\\n        userParam: {JSON.stringify(user)}\\n      </Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\nfunction ProfileScreen() {\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nfunction MyButton() {\\n  // highlight-next-line\\n  const { colors } = useTheme();\\n\\n  return (\\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\\n      <Text style={{ color: colors.text }}>Button!</Text>\\n    </TouchableOpacity>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Home Screen</Text>\\n      <MyButton />\\n      <Button\\n        onPress={() =>\\n          navigation.navigate('Root', {\\n            screen: 'Settings',\\n            params: { user: 'jane' },\\n          })\\n        }\\n      >\\n        Go to Settings\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst Drawer = createDrawerNavigator();\\nconst Stack = createNativeStackNavigator();\\n\\nfunction Root() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\\n    </Stack.Navigator>\\n  );\\n}\\n\\nexport default function App() {\\n  const scheme = useColorScheme();\\n\\n  return (\\n    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>\\n      <Drawer.Navigator>\\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\\n        <Drawer.Screen\\n          name=\"Root\"\\n          component={Root}\\n          options={{ headerShown: false }}\\n        />\\n      </Drawer.Navigator>\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Screen Options via Function (JavaScript)\nDESCRIPTION: Illustrates a Stack.Screen setup where the options prop is a function allowing dynamic titles based on route parameters. This enables customizing headers or behaviors based on navigation context. Requires @react-navigation/native. Inputs: route object. Output: object with title option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={ProfileScreen}\\n  options={({ route }) => ({ title: route.params.user })}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Navigation with Parent Options from Child\nDESCRIPTION: This snippet shows how to set up static navigation with a bottom tab navigator nested inside a stack navigator. It demonstrates setting the parent stack's header title based on the active tab in the child navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: FeedScreen,\n    Profile: ProfileScreen,\n    Account: AccountScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeTabs,\n    Settings: SettingsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Insets with useSafeAreaInsets Hook (Static Configuration)\nDESCRIPTION: This example shows how to properly handle safe areas in React Navigation using the useSafeAreaInsets hook from react-native-safe-area-context with static configuration. The hook provides inset values that can be applied as padding to ensure content is visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/handling-safe-area.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n        paddingLeft: insets.left,\n        paddingRight: insets.right,\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n\nconst MyTabs = createBottomTabNavigator({\n  initialRouteName: 'Analytics',\n  tabBar: () => null,\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Analytics: Demo,\n    Profile: Demo,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Home: MyTabs,\n    Settings: Demo,\n  },\n});\n\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <Navigation />\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Nested Route Path Matching with Exact Option (Dynamic Config) - React Navigation (JavaScript)\nDESCRIPTION: In this object config version, the Profile screen under Home uses 'exact: true' for absolute path matching, ensuring only the explicit '/users/:id' route is matched and not any relative path combining the parent's pattern. Used in scenarios where child routes should not inherit parent route prefixes. Inputs are route names and config settings aligned with navigation container conventions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'feed',\n      screens: {\n        Profile: {\n          path: 'users/:id',\n          // highlight-next-line\n          exact: true,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Params in Stack Screen Options (JavaScript)\nDESCRIPTION: Illustrates how to use a value passed via navigation parameters (`route.params.count`) within the `options` prop of the destination `Stack.Screen`. This allows setting screen options, like the title, based on the passed data.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/redux-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<RootStack.Screen\n  name=\"StaticCounter\"\n  component={StaticCounter}\n  options={({ route }) => ({ title: route.params.count })}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Large Title Style in Native Stack Navigator (JavaScript)\nDESCRIPTION: Example configuration object showing how to customize the appearance of the large header title on iOS using the `headerLargeTitleStyle` option. This allows setting style properties such as `fontFamily`, `fontSize`, `fontWeight`, and `color` for the large title when `headerLargeTitle` is enabled.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    headerLargeTitleStyle: {\n      fontFamily: 'Georgia',\n      fontSize: 22,\n      fontWeight: '500',\n      color: 'blue',\n    },\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screens with LinkButton (JavaScript/React)\nDESCRIPTION: This example demonstrates how to use the `LinkButton` component to navigate to a screen nested within another navigator. The target screen ('Post') and its parameters ({ id: 123 }) are specified within the `params` prop of the parent screen ('Root'), mirroring the structure used for nested navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-props.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<LinkButton screen=\"Root\" params={{ screen: 'Post', params: { id: 123 } }}>\n  Go to post 123\n</LinkButton>\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Stack Navigator - Static API - JavaScript\nDESCRIPTION: Defines and initializes a native stack navigator using a static object-style API. The navigator manages Home and Profile screens by mapping screen names to components. Requires React Navigation's native stack package and screen components defined as HomeScreen and ProfileScreen. The object-style API is best suited for declarative configuration and use with tools that scan static property maps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNavigator with Screen Props\nDESCRIPTION: Example showing how to pass screen props to TabNavigator child components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst TabNav = TabNavigator({\n  // config\n});\n\n<TabNav\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Container with Ref in Dynamic Navigation\nDESCRIPTION: Example of setting up a dynamic navigation container with a ref for external navigation access. This wraps the app's navigation structure in NavigationContainer and assigns a navigation ref to it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport { navigationRef } from './RootNavigation';\n\nexport default function App() {\n  return (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Back in Stack using React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to navigate back to the previous screen in a stack using the navigation.goBack method within a screen component. It requires the react-navigation library and is intended for use in a component that receives the navigation prop. When the button is pressed, the goBack function triggers the navigator to pop the current screen off the stack and return to the previous one. This implementation is ideal for simple back navigation in stack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ navigation: { goBack } }) {\\n  return (\\n    <View>\\n      <Button onPress={() => goBack()} title=\"Go back from ProfileScreen\" />\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Stack Navigators within Tab Navigators in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a separate navigation stack for each tab using `createStackNavigator` from `react-navigation-stack`. It defines `HomeScreen`, `SettingsScreen`, and a shared `DetailsScreen`. Two stack navigators (`HomeStack`, `SettingsStack`) are created, each containing their primary screen and the `DetailsScreen`. These stacks are then used as the screens within the `createBottomTabNavigator`, allowing navigation to a 'Details' screen from within either tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/tab-based-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\n\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Details!</Text>\n      </View>\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        {/* other code from before here */}\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        {/* other code from before here */}\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\nconst HomeStack = createStackNavigator({\n  Home: HomeScreen,\n  Details: DetailsScreen,\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: SettingsScreen,\n  Details: DetailsScreen,\n});\n\nexport default createAppContainer(\n  createBottomTabNavigator(\n    {\n      Home: HomeStack,\n      Settings: SettingsStack,\n    },\n    {\n      /* Other configuration remains unchanged */\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tab Navigator inside Stack Navigator in React Navigation\nDESCRIPTION: Example of nesting a Tab.Navigator within a Stack.Navigator in a React Navigation application. The Home component uses a Tab Navigator with Feed and Messages screens, and is placed in a Stack Navigator with Profile and Settings screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/nesting-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Home() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={Feed} />\n      <Tab.Screen name=\"Messages\" component={Messages} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Tab Bar Badges from a Screen in React Native\nDESCRIPTION: Shows how to update a tab bar badge dynamically from within a screen component. It uses the `useNavigation` hook to access the navigation object and `navigation.setOptions` inside a `React.useEffect` hook to set the `tabBarBadge` value based on a state variable (`unreadMessagesCount`). This requires `react` and `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/customizing-bottom-tabs.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst navigation = useNavigation();\n\nReact.useEffect(() => {\n  navigation.setOptions({\n    tabBarBadge: unreadMessagesCount,\n  });\n}, [navigation, unreadMessagesCount]);\n```\n\n----------------------------------------\n\nTITLE: Adding push action to RootNavigation in React Navigation\nDESCRIPTION: This snippet shows how to add a push action to the RootNavigation module, which can be used with stack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating-without-navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\n// ...\n\nexport function push(...args) {\n  if (navigationRef.isReady()) {\n    navigationRef.dispatch(StackActions.push(...args));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in a Class Component via Wrapper (React/React Native)\nDESCRIPTION: This snippet illustrates a pattern for accessing the theme object within a React class component. Since hooks like `useTheme` cannot be called directly in class components, a functional component wrapper is created. This wrapper calls `useTheme`, retrieves the `theme` object, and passes it down as a prop to the wrapped class component (`MyButton`). The class component can then access the theme data via `this.props.theme`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass MyButton extends React.Component {\n  render() {\n    // Get it from props\n    const { theme } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const theme = useTheme();\n\n  return <MyButton {...props} theme={theme} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using popToTop Method in React Navigation\nDESCRIPTION: Shows how to use the popToTop method which removes all screens except the first one in the stack and navigates to it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.popToTop();\n```\n\n----------------------------------------\n\nTITLE: iOS Deep Linking Configuration in AppDelegate.m (iOS 9+)\nDESCRIPTION: This Objective-C code shows how to modify the AppDelegate.m file to handle deep links in iOS 9 and newer. It implements the application:openURL:options: method to handle incoming URLs using RCTLinkingManager.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for Group in React Navigation (Static)\nDESCRIPTION: This snippet demonstrates how to use the 'screenOptions' prop on a Group component to configure screen options for all screens within the group. It shows setting header style and presentation mode for different groups of screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  groups: {\n    App: {\n      screenOptions: {\n        headerStyle: {\n          backgroundColor: '#FFB6C1',\n        },\n      },\n      screens: {\n        Home: ScreenWithButton('Home', 'Profile'),\n        Profile: ScreenWithButton('Profile', 'Settings'),\n      },\n    },\n    Modal: {\n      screenOptions: {\n        presentation: 'modal',\n      },\n      screens: {\n        Settings: ScreenWithButton('Settings', 'Share'),\n        Share: ScreenWithButton('Share'),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles in React Navigation (JavaScript)\nDESCRIPTION: Explains how to customize the header's appearance using `headerStyle` (for background color), `headerTintColor` (for back button and title color), and `headerTitleStyle` (for title text styling like font weight) within the `static navigationOptions` of a screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n    headerStyle: {\n      backgroundColor: '#f4511e',\n    },\n    headerTintColor: '#fff',\n    headerTitleStyle: {\n      fontWeight: 'bold',\n    },\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Bar Implementation\nDESCRIPTION: Example of implementing a custom tab bar component with touch handling, accessibility features, and custom styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nfunction MyTabBar({ state, descriptors, navigation }) {\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name, route.params);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        return (\n          <TouchableOpacity\n            accessibilityRole=\"button\"\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\n              {label}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\n// ...\n\n<Tab.Navigator tabBar={props => <MyTabBar {...props} />}>\n  {...}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Drawer Type Based on Screen Size\nDESCRIPTION: Example showing how to conditionally set drawer type based on screen dimensions. Uses useWindowDimensions hook to check if the screen width is large enough for a permanent drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWindowDimensions } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  const dimensions = useWindowDimensions();\n\n  return (\n    <Drawer.Navigator\n      drawerType={dimensions.width >= 768 ? 'permanent' : 'front'}\n    >\n      {/* Screens */}\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CommonActions.goBack with Dynamic Configuration in React Native\nDESCRIPTION: This snippet shows how to implement the `CommonActions.goBack()` action using `navigation.dispatch` in a dynamically configured stack navigator wrapped within a `NavigationContainer`. It requires `@react-navigation/native`, `@react-navigation/stack`, `@react-navigation/elements`, `react`, and `react-native`. The 'Go back' button in the `HomeScreen` demonstrates the basic usage.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Common actions goBack\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  CommonActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(CommonActions.goBack());\n          // codeblock-focus-end\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate({\n              name: 'Home',\n            })\n          );\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using organized types in a React Navigation component in TypeScript\nDESCRIPTION: This example shows how to use the organized types in a React Navigation component, specifically for annotating props in a screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HomeTabScreenProps } from './navigation/types';\n\nfunction PopularScreen({ navigation, route }: HomeTabScreenProps<'Popular'>) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tab Bar Component in React Native\nDESCRIPTION: Provides an example of a custom tab bar component (`MyTabBar`). It receives `state`, `descriptors`, and `navigation` props to render custom UI for tabs using React Native components like `View`, `Text`, and `TouchableOpacity`. It handles focus state, press events, and long press events for each tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nfunction MyTabBar({ state, descriptors, navigation }) {\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  if (focusedOptions.tabBarVisible === false) {\n    return null;\n  }\n\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        return (\n          <TouchableOpacity\n            accessibilityRole=\"button\"\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\n              {label}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\n// ...\n\n<Tab.Navigator tabBar={props => <MyTabBar {...props} />}>\n  {...}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Initial Render Delay with initialLayout (JavaScript/React Native)\nDESCRIPTION: Illustrates how to provide an `initialLayout` prop to the `TabView` component, typically using the device's window width obtained via `Dimensions.get('window').width`. This avoids a one-frame delay caused by waiting for layout measurements, improving initial render performance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst initialLayout = {\n  height: 0,\n  width: Dimensions.get('window').width,\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Links in React Navigation\nDESCRIPTION: This snippet shows how to configure universal links (deep links that use HTTPS URLs) in a React Navigation container. It sets up the prefixes array with the app's domain to enable deep linking through web URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const linking = {\n    prefixes: ['https://app.example.com'],\n  };\n\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking with the linking Prop\nDESCRIPTION: Example demonstrating how to configure deep linking in NavigationContainer using the linking prop. This enables URL handling in browsers and deep link handling in native apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction App() {\n  const linking = {\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Home: 'feed/:sort',\n      },\n    },\n  };\n\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Closing the Drawer with DrawerActions in React Navigation - JavaScript (Static Navigator)\nDESCRIPTION: This example shows how to use DrawerActions.closeDrawer() to close the drawer from custom drawer content in a static navigation context. It reuses the pattern from the open drawer example with alterations in CustomDrawerContent, focusing on invoking navigation.dispatch(DrawerActions.closeDrawer()) upon a drawer item press. The snippet requires @react-navigation/native, @react-navigation/drawer, and @react-navigation/elements, and demonstrates handling actions through react-native UI components. Screens and navigator configuration mirror the previous openDrawer static configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Button } from '@react-navigation/elements';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n  DrawerActions,\\n} from '@react-navigation/native';\\nimport {\\n  createDrawerNavigator,\\n  DrawerContentScrollView,\\n  DrawerItemList,\\n  DrawerItem,\\n} from '@react-navigation/drawer';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home!</Text>\\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\\n        Open Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\\n        Toggle Drawer\\n      </Button>\\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\\n        Jump to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen({ route }) {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile!</Text>\\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\\n    </View>\\n  );\\n}\\n\\nfunction CustomDrawerContent({ navigation }) {\\n  return (\\n    <DrawerContentScrollView {...props}>\\n      <DrawerItemList {...props} />\\n      <DrawerItem\\n        label=\"Close drawer\"\\n        onPress={() => {\\n          // codeblock-focus-start\\n          navigation.dispatch(DrawerActions.closeDrawer());\\n          // codeblock-focus-end\\n        }}\\n      />\\n      <DrawerItem\\n        label=\"Toggle drawer\"\\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\\n      />\\n    </DrawerContentScrollView>\\n  );\\n}\\n\\nconst Drawer = createDrawerNavigator({\\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(Drawer);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Nested Navigators in React Navigation (JS)\nDESCRIPTION: Illustrates how to dispatch navigation actions, such as `toggleDrawer` from `DrawerActions`, to nested navigators using `navigation.dispatch`. This allows interaction with navigators (like a Drawer) from screens that are not direct children, enabling control over parent or sibling navigator states. Requires `DrawerActions` from `@react-navigation/drawer`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nnavigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Screen onto the Stack Using navigation.push (JavaScript)\nDESCRIPTION: Illustrates how to navigate to a new screen by pushing it onto the stack using navigation.push. Prerequisites include the navigation object from react-navigation. The first argument is the route name (string); the second is an object of parameters to pass to the screen. The newly pushed screen is navigated to immediately.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.push('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tab Bar for Material Top Tabs\nDESCRIPTION: Example of how to create a custom tab bar component for Material Top Tabs Navigator. This implementation demonstrates how to handle tab press events, styling, and animations using react-native-reanimated.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, TouchableOpacity } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nfunction MyTabBar({ state, descriptors, navigation, position }) {\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        const inputRange = state.routes.map((_, i) => i);\n        const opacity = Animated.interpolate(position, {\n          inputRange,\n          outputRange: inputRange.map(i => (i === index ? 1 : 0)),\n        });\n\n        return (\n          <TouchableOpacity\n            accessibilityRole=\"button\"\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Animated.Text style={{ opacity }}>\n              {label}\n            </Animated.Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\n// ...\n\n<Tab.Navigator tabBar={props => <MyTabBar {...props} />}>\n  {...}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Drawer Navigation in React Native\nDESCRIPTION: Creates a drawer navigator with Home and Settings screens. Includes screen component definitions and drawer configuration options like background color and styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity\n          onPress={() => this.props.navigation.navigate('DrawerOpen')}\n        >\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity\n          onPress={() => this.props.navigation.navigate('DrawerOpen')}\n        >\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>\n      </View>\n    );\n  }\n}\n\nconst MyDrawerNavigator = new DrawerNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    drawerBackgroundColor: 'rgba(255,255,255,.9)',\n    contentOptions: {\n      activeTintColor: '#fff',\n      activeBackgroundColor: '#6b52ae',\n    },\n  }\n);\n\nexport default MyDrawerNavigator;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Navigation with goBack Implementation in React Navigation\nDESCRIPTION: Example of implementing the goBack navigation method using dynamic navigation configuration in React Navigation. Demonstrates the same functionality as the static example but using the NavigationContainer approach.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brent's profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Text>Friends: </Text>\n      <Text>{route.params.names[0]}</Text>\n      <Text>{route.params.names[1]}</Text>\n      <Text>{route.params.names[2]}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Going Back from a Specific Route with Custom Source and Target (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows how to customize the goBack action by specifying 'source' and 'target' route keys. It is useful when multiple navigators are mounted, or to control which route to go back from and which navigator to apply the action to. Dependencies include '@react-navigation/native', a defined 'route' with a 'key', and a 'state' with a 'key'. The dispatched action merges the result of goBack with 'source' and 'target' properties. Inputs are the route and navigation state keys; output is a navigation state change affecting specific routes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.goBack(),\n  source: route.key,\n  target: state.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Parent Navigator Events in React Navigation\nDESCRIPTION: Example of how to listen to events from a parent navigator when you have nested navigators. This snippet shows how to explicitly listen to a parent tab navigator's tabPress event from within a child navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/nesting-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = navigation.getParent().addListener('tabPress', (e) => {\n  // Do something\n});\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Drawer Route with Static Navigation in React Native\nDESCRIPTION: Shows how to use the `jumpTo` action creator (`DrawerActions.jumpTo`) to navigate to a specific screen within the drawer navigator in a static configuration. It takes the target route `name` and optional `params`. The action is dispatched using `navigation.dispatch()` obtained via the `useNavigation` hook.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js name=\"Drawer Actions - jumpTo\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(jumpToAction);\n          // codeblock-focus-end\n        }}\n      >\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Popping Routes from Navigation Stack with StackActions\nDESCRIPTION: Shows how to use StackActions.pop to navigate back in the stack by removing screens. The optional count parameter specifies how many screens to pop back by.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nconst popAction = StackActions.pop(1);\n\nnavigation.dispatch(popAction);\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Navigator Structure with Tabs Inside Stack in React Navigation\nDESCRIPTION: This example shows a tab navigator (HomeTabs) nested inside a stack navigator, which is a common pattern in React Navigation applications.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      <Tab.Screen name=\"Account\" component={AccountScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeTabs} />\n        <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Tab Navigator Inside Stack Navigator with Hidden Parent Header\nDESCRIPTION: This example demonstrates how to nest a Tab Navigator inside a Stack Navigator while hiding the header from the parent navigator using headerShown: false option. This is useful when you want to show only the child navigator's header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Home() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Profile\" component={Profile} />\n      <Tab.Screen name=\"Settings\" component={Settings} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen name=\"EditPost\" component={EditPost} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Screens in Nested Navigators in React Navigation using JavaScript\nDESCRIPTION: Explains how to navigate to a specific screen within a nested navigator structure and pass parameters to it. This involves specifying the parent navigator's name, the target `screen` name within that navigator, and the `params` object in the `navigation.navigate` call.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate('Account', {\n  screen: 'Settings',\n  params: { user: 'jane' },\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screen with Static Navigator - React Navigation JavaScript\nDESCRIPTION: This snippet demonstrates a static approach to configuring nested navigators using React Navigation in React Native. It uses createStaticNavigation, createNativeStackNavigator, and createBottomTabNavigator to define routes and shows how to navigate to a nested Messages screen while passing parameters. Dependencies include @react-navigation/native, @react-navigation/native-stack, @react-navigation/bottom-tabs, and @react-navigation/elements. Key parameters such as params and screen are leveraged to drill into child navigators, and the MessagesScreen retrieves user data from the navigation route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport {\\n  createStaticNavigation,\\n  useNavigation,\\n} from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\\nimport { Button } from '@react-navigation/elements';\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button\\n        onPress={\\n          () =>\\n            // codeblock-focus-start\\n            navigation.navigate('More', {\\n              screen: 'Messages',\\n              params: { user: 'jane' },\\n            })\\n          // codeblock-focus-end\\n        }\\n      >\\n        Go to Messages\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction FeedScreen() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Feed Screen</Text>\\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\\n    </View>\\n  );\\n}\\n\\nfunction MessagesScreen({ route }) {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Messages Screen</Text>\\n      <Text>User: {route.params.user}</Text>\\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\\n    </View>\\n  );\\n}\\n\\nconst MoreTabs = createBottomTabNavigator({\\n  screens: {\\n    Feed: FeedScreen,\\n    Messages: MessagesScreen,\\n  },\\n});\\n\\nconst RootStack = createNativeStackNavigator({\\n  screens: {\\n    Home: HomeScreen,\\n    More: {\\n      screen: MoreTabs,\\n      options: {\\n        headerShown: false,\\n      },\\n    },\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting CompositeNavigationProp for Multiple Parents in TypeScript\nDESCRIPTION: Shows how to nest `CompositeNavigationProp` to handle multiple levels of navigator nesting. This example types a screen within a Tab navigator, which is inside a Stack navigator, which is inside a Drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ntype ProfileScreenNavigationProp = CompositeNavigationProp<\n  BottomTabNavigationProp<TabParamList, 'Profile'>,\n  CompositeNavigationProp<\n    StackNavigationProp<StackParamList>,\n    DrawerNavigationProp<DrawerParamList>\n  >\n>;\n```\n\n----------------------------------------\n\nTITLE: Type Checking Screen Props with Navigator ID - TS\nDESCRIPTION: Demonstrates how to type check screen props when the navigator has an ID, by including the ID as a generic type parameter in `NativeStackScreenProps`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype Props = NativeStackScreenProps<RootStackParamList, 'Profile', 'MyStack'>;\n```\n\n----------------------------------------\n\nTITLE: Static Screen Props Type Definition - TypeScript\nDESCRIPTION: Defines the type for the props of a screen component using `StaticScreenProps` from `@react-navigation/native`. It specifies the type of the `route.params` prop the component accepts, enhancing type safety and intelliSense.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StaticScreenProps } from '@react-navigation/native';\n\n// highlight-start\ntype Props = StaticScreenProps<{ \n  username: string;\n}>;\n// highlight-end\n\nfunction ProfileScreen({ route }: Props) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation State for Optional Params (React Navigation, JavaScript)\nDESCRIPTION: This code illustrates the navigation state produced by a URL when an optional param (section) is omitted. With config supporting '/user/jane', the app creates a 'Profile' route with the 'id' param, and omits 'section'. The same config yields an object with both id and section if both are present in the URL. Intended for use in validation or debugging deep link navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Profile',\n      params: { id: 'user-jane' },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Component with useLinkProps (JavaScript)\nDESCRIPTION: Defines a reusable `LinkButton` component using the `useLinkProps` hook from `@react-navigation/native`. This component takes `to` (path) and `action` props to configure navigation. It demonstrates platform-specific rendering: using a `View` with `onClick` for web (addressing React Native for Web limitations) and `TouchableOpacity` with `onPress` for native platforms. The hook provides necessary props like `onPress` for navigation and accessibility attributes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-link-props.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useLinkProps } from '@react-navigation/native';\n\n// ...\n\nconst LinkButton = ({ to, action, children, ...rest }) => {\n  const { onPress, ...props } = useLinkProps({ to, action });\n\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  if (Platform.OS === 'web') {\n    // It's important to use a `View` or `Text` on web instead of `TouchableX`\n    // Otherwise React Native for Web omits the `onClick` prop that's passed\n    // You'll also need to pass `onPress` as `onClick` to the `View`\n    // You can add hover effects using `onMouseEnter` and `onMouseLeave`\n    return (\n      <View\n        onClick={onPress}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        style={{ transitionDuration: '150ms', opacity: isHovered ? 0.5 : 1 }}\n        {...props}\n        {...rest}\n      >\n        <Text>{children}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <TouchableOpacity onPress={onPress} {...props} {...rest}>\n      <Text>{children}</Text>\n    </TouchableOpacity>\n  );\n};\n\nfunction Home() {\n  return <LinkButton to=\"/profile/jane\">Go to Jane's profile</LinkButton>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Content Options in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to customize the active tint color and item style within the Drawer.Navigator by using the drawerContentOptions prop. Requires installation of @react-navigation/drawer and its peer dependencies. Expects Drawer.Navigator to wrap screen components; key parameters include activeTintColor to set the color when active, and itemStyle for per-item styling using a style object. Outputs a Drawer navigator UI with customized drawer appearance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Drawer.Navigator\n  drawerContentOptions={{\n    activeTintColor: '#e91e63',\n    itemStyle: { marginVertical: 30 },\n  }}\n>\n  {/* screens */}\n</Drawer.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Custom TabBar Rendering - React Native JavaScript\nDESCRIPTION: Demonstrates how to override the default tab bar in TabView by supplying a renderTabBar callback, allowing for custom UI and prop manipulation. Inputs include the TabView props; output is a customized TabBar element. The TabBar component must be imported from react-native-tab-view.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabBar } from 'react-native-tab-view';\n\n...\n\n<TabView\n  renderTabBar={props => <TabBar {...props} />}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Going Back to Previous Route Using CommonActions in React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates dispatching the goBack action via CommonActions to return to the previous route. It requires '@react-navigation/native' and access to the navigation object in a React Navigation context. This action takes no parameters and returns to the previous entry in the stack. Used when the classic 'goBack' behavior is needed without specifying a target route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(CommonActions.goBack());\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple Subdomains with Wildcard Prefixes - React Navigation - JavaScript\nDESCRIPTION: Details how to match all subdomains by specifying a wildcard prefix in the linking configuration. The wildcard ('*.example.com') matches all subdomains, but not the primary domain, so a separate prefix entry is provided for the main domain. Useful for apps handling links from various subdomains. Use in the linking prop alongside other prefixes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['example://', 'https://example.com', 'https://*.example.com'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Stack Navigator with Screen Props\nDESCRIPTION: Example demonstrating how to pass additional props to screen components through the stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SomeStack = createStackNavigator({\n  // config\n});\n\n<SomeStack\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Search Bar in React Navigation\nDESCRIPTION: Sets up a search bar in the header using headerSearchBarOptions, now supported in all navigators that use the Header component from @react-navigation/elements. This feature provides a consistent search interface across platforms.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nReact.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      placeholder: 'Search',\n      onChangeText: (text) => {\n        // Do something\n      },\n    },\n  });\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Navigating Explicitly to Stack Entry with Parameters (JavaScript)\nDESCRIPTION: This snippet illustrates navigating to a specific entry by key within the navigation stack using navigation.navigate with an object parameter. It assumes multiple stack entries of the same screen (distinguished by a unique key) and returns to a specified screen, removing all screens above it in the stack. This requires react-navigation with stack paradigm and unique keys for each route. Inputs include an object with key, outputs in popping to the desired screen by key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate({ key: SCREEN_KEY_A }); // will go to screen A FROM screen D\n```\n\n----------------------------------------\n\nTITLE: Mock Native Dependencies for React Navigation with Jest\nDESCRIPTION: This JavaScript snippet is used to mock native dependencies such as `react-native-gesture-handler` and `react-native-reanimated` when testing React Navigation components. This is essential for simulating the native environment in a Jest test environment, especially when using components like `@react-navigation/stack` or `@react-navigation/drawer`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Include this line for mocking react-native-gesture-handler\nimport 'react-native-gesture-handler/jestSetup';\n\n// Include this section for mocking react-native-reanimated\nimport { setUpTests } from 'react-native-reanimated';\n\nsetUpTests();\n\n// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing\nimport { jest } from '@jest/globals';\n\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Header Title in Dynamic Navigation Configuration\nDESCRIPTION: This snippet demonstrates how to apply the dynamic header title function in a dynamic navigation configuration. It uses the options prop on the Stack.Screen component to set the header title based on the child navigator's state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeTabs}\n  options={({ route }) => ({\n    headerTitle: getHeaderTitle(route),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Key in Static Stack Navigator (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set a navigation key for a screen in a static stack navigator configuration. It uses the 'createNativeStackNavigator' function to define a 'Profile' screen with a navigation key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      // highlight-next-line\n      navigationKey: 'user',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication and App Screens with AsyncStorage in JavaScript\nDESCRIPTION: Implements SignInScreen and HomeScreen React components for authentication and main app navigation flows. SignInScreen allows users to sign in by setting a userToken in AsyncStorage and navigating to the App route. HomeScreen provides buttons to navigate further or sign out, clearing AsyncStorage and redirecting to the Auth route. Requires React Native's components and navigation prop, and uses AsyncStorage for persistent authentication state. Expects to be used as part of stack navigators within a SwitchNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/auth-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SignInScreen extends React.Component {\\n  static navigationOptions = {\\n    title: 'Please sign in',\\n  };\\n\\n  render() {\\n    return (\\n      <View>\\n        <Button title=\"Sign in!\" onPress={this._signInAsync} />\\n      </View>\\n    );\\n  }\\n\\n  _signInAsync = async () => {\\n    await AsyncStorage.setItem('userToken', 'abc');\\n    this.props.navigation.navigate('App');\\n  };\\n}\\n\\nclass HomeScreen extends React.Component {\\n  static navigationOptions = {\\n    title: 'Welcome to the app!',\\n  };\\n\\n  render() {\\n    return (\\n      <View>\\n        <Button title=\"Show me more of the app\" onPress={this._showMoreApp} />\\n        <Button title=\"Actually, sign me out :)\" onPress={this._signOutAsync} />\\n      </View>\\n    );\\n  }\\n\\n  _showMoreApp = () => {\\n    this.props.navigation.navigate('Other');\\n  };\\n\\n  _signOutAsync = async () => {\\n    await AsyncStorage.clear();\\n    this.props.navigation.navigate('Auth');\\n  };\\n}\\n\\n// More code like OtherScreen omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Configuration to a Stack Screen\nDESCRIPTION: This snippet shows how to apply a custom transition configuration to a screen in Stack Navigator. It uses the transitionSpec option to define the same animation config for both opening and closing transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    transitionSpec: {\n      open: config,\n      close: config,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pushing New Route onto Stack with StackActions in React Native (JavaScript)\nDESCRIPTION: Imports `StackActions` and uses the `push` action to add a new 'Profile' route onto the top of the navigation stack, passing 'Wojtek' as the user parameter. Unlike `navigate`, `push` always adds a new screen, even if one with the same name already exists in the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nconst pushAction = StackActions.push('Profile', { user: 'Wojtek' });\n\nnavigation.dispatch(pushAction);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Native Stack Navigator with Multiple Screens (Dynamic)\nDESCRIPTION: Extends the stack navigator example to include multiple screens (Home and Details) with initialRouteName configuration using the dynamic approach.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator initialRouteName=\"Home\">\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Deep Linking Configuration in AppDelegate.m (iOS 8 and below)\nDESCRIPTION: This Objective-C code shows how to modify the AppDelegate.m file to handle deep links in iOS 8 and older versions. It implements the application:openURL:sourceApplication:annotation: method to handle incoming URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n  return [RCTLinkingManager application:application openURL:url\n                      sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Params with useRoute in Static React Navigation (JavaScript)\nDESCRIPTION: Demonstrates using the `useRoute` hook within a functional component (`MyText`) to access route parameters (`route.params.caption`) passed during navigation. This example uses React Navigation's static configuration API (`createStaticNavigation`, `createNativeStackNavigator` with a screens object). It shows navigating from `HomeScreen` to `ProfileScreen`, passing a `caption` parameter, which is then displayed by the nested `MyText` component using `useRoute`. Dependencies include React, React Native, and `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/elements`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-route.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { useRoute } from '@react-navigation/native';\n\nfunction MyText() {\n  // highlight-next-line\n  const route = useRoute();\n\n  return <Text>{route.params.caption}</Text>;\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { caption: 'Some caption' });\n        }}\n      >\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <MyText />\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Press Events in React Navigation\nDESCRIPTION: Example of preventing default tab press behavior and implementing custom logic using event listeners. The code demonstrates how to subscribe to and handle tab press events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Back Button with withNavigation HOC in React Navigation\nDESCRIPTION: Demonstrates how to create a reusable back button component using withNavigation HOC to access navigation props. The component uses React Native's Button component and React Navigation's goBack() method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/with-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Drawer Navigator in React Navigation\nDESCRIPTION: Basic implementation of a drawer navigator with two screens (Feed and Article). The code shows how to import the createDrawerNavigator function and set up a basic drawer navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator>\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Article\" component={Article} />\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Navigation with Parent Options from Child\nDESCRIPTION: This snippet demonstrates setting up dynamic navigation with a bottom tab navigator nested inside a stack navigator. It shows how to configure the parent stack's header title based on the active tab in the child navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      <Tab.Screen name=\"Account\" component={AccountScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeTabs} />\n        <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook (Dynamic Config) in React Native\nDESCRIPTION: Demonstrates the `useFocusEffect` hook in a dynamically configured React Navigation application using `NavigationContainer`. It employs `React.useCallback` to execute effects upon screen focus and provides a cleanup function that runs upon unfocus, indicated by alerts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/function-after-focusing-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NavigationContainer, useFocusEffect } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  useFocusEffect(\n    React.useCallback(() => {\n      alert('Screen was focused');\n      // Do something when the screen is focused\n      return () => {\n        alert('Screen was unfocused');\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <View />;}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for Navigator in React Navigation (Static)\nDESCRIPTION: This snippet shows how to use the 'screenOptions' prop on the navigator component to configure options for all screens in the navigator. It demonstrates setting a common header style for all screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screenOptions: {\n    headerStyle: {\n      backgroundColor: 'papayawhip',\n    },\n  },\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to the transitionStart Event - React Navigation (JavaScript)\nDESCRIPTION: Demonstrates subscribing to the transitionStart event on the navigation object using React's useEffect hook. The code attaches a listener that executes a callback when the transition animation starts, and cleans up the listener on component unmount. Requires React and assumes navigation is available via props or hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Conditional Tab Bar Position based on Screen Size\nDESCRIPTION: This example shows how to conditionally set the `tabBarPosition` option based on screen size using `isLargeScreen`. This allows for a dynamic tab bar layout, switching between bottom tabs on smaller screens and a left sidebar on larger screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tabs = createBottomTabNavigator({\n  screenOptions: {\n    tabBarPosition: isLargeScreen ? 'left' : 'bottom',\n  },\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing headerTitle in Static Configuration\nDESCRIPTION: Demonstrates how to customize the header title using the `headerTitle` option in a static Native Stack navigator configuration. It provides a function that receives props like `allowFontScaling`, `tintColor`, `style`, and `children`, returning a customized React Native `Text` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerTitle: ({ allowFontScaling, tintColor, style, children }) => (\n          <Text\n            style={[style, { color: tintColor }]}\n            allowFontScaling={allowFontScaling}\n          >\n            {children}\n          </Text>\n        ),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Pop Action in React Navigation (Dynamic)\nDESCRIPTION: This snippet shows how to use the pop action in a dynamic navigation configuration. It includes a ProfileScreen with buttons to pop one screen, push the same screen, or pop to the top of the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(StackActions.pop(1));\n```\n\n----------------------------------------\n\nTITLE: Annotating Function Form of Options (TypeScript)\nDESCRIPTION: This snippet shows how to annotate the arguments and return type for the function form of the `options` prop.  It uses the `StackOptionsArgs` type from `@react-navigation/stack` for the arguments and `StackNavigationOptions` for the return type.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  StackNavigationOptions,\n  StackOptionsArgs,\n} from '@react-navigation/stack';\n\nconst options = ({ route }: StackOptionsArgs): StackNavigationOptions => {\n  return {\n    headerTitle: route.name,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Screen Transition Specs in React Navigation (JavaScript/JSX)\nDESCRIPTION: Demonstrates how to import and use `TransitionSpecs` from `@react-navigation/stack` to customize the open and close transition animations for a specific `Stack.Screen` using the `transitionSpec` option. It specifically applies the standard iOS transition style (`TransitionIOSSpec`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nimport { TransitionSpecs } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    transitionSpec: {\n      open: TransitionSpecs.TransitionIOSSpec,\n      close: TransitionSpecs.TransitionIOSSpec,\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Integrating Header in a Static Native Stack Navigator\nDESCRIPTION: Illustrates how to use the `Header` component from `@react-navigation/elements` as a custom header within a statically configured Native Stack Navigator (`createNativeStackNavigator` with `createStaticNavigation`). It utilizes the `header` screen option, passing necessary props like `options`, `route`, and `back`, and uses `getHeaderTitle` to determine the title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, Button } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { Header, getHeaderTitle } from '@react-navigation/elements';\n\n// codeblock-focus-end\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst MyStack = createNativeStackNavigator({\n  screenOptions: {\n    header: ({ options, route, back }) => (\n      <Header\n        {...options}\n        back={back}\n        title={getHeaderTitle(options, route.name)}\n      />\n    ),\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample State Output for Deep Link Navigation (JavaScript)\nDESCRIPTION: This object shows an example navigation state generated by React Navigation from a deep link URL `/item/42` using a custom linking config. It details how nested navigators, route names, and parameters (`id`) are organized in the state object. This illustrative output helps developers understand how state structure corresponds to link patterns and navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  routes: [\\n    {\\n      name: 'Home',\\n      state: {\\n        index: 1,\\n        routes: [\\n          {\\n            name: 'Feed'\\n          },\\n          {\\n            name: 'Catalog',\\n            params: { id: 42 },\\n          },\\n        ],\\n      },\\n    },\\n  ],\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Action Creator Function (insertBeforeLast)\nDESCRIPTION: Defines a reusable helper function `insertBeforeLast` which acts as a custom action creator. It accepts a `routeName` and optional `params`, takes the current navigation `state`, constructs a new routes array inserting the specified route before the last one, and returns a `CommonActions.reset` action object reflecting this change. Requires `CommonActions` from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nconst insertBeforeLast = (routeName, params) => (state) => {\n  const routes = [\n    ...state.routes.slice(0, -1),\n    { name: routeName, params },\n    state.routes[state.routes.length - 1],\n  ];\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using Themed Components in React Navigation (JavaScript)\nDESCRIPTION: This snippet showcases the usage of React Navigation's built-in themed components, `Themed.Text` and `Themed.StatusBar`. These components automatically adapt their appearance (e.g., text color, status bar style) based on the currently active theme, simplifying theme-aware UI development.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Themed } from 'react-navigation';\n\nfunction MyButton() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <TouchableOpacity style={{ backgroundColor: colors.bodyContent }}>\n        <Themed.Text>Button!</Themed.Text>\n      </TouchableOpacity>\n      <Themed.StatusBar />\n    </View>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Back Button with Dynamic Configuration in React Navigation\nDESCRIPTION: Demonstrates customizing the back button's title and style in a stack navigator using dynamic configuration. This example sets a custom title and increases the font size.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/header-buttons.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen\n    name=\"Details\"\n    component={DetailsScreen}\n    options={{\n      headerBackTitle: 'Custom Back',\n      headerBackTitleStyle: { fontSize: 30 },\n    }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Popping to Top of Stack with StackActions in React Native (JavaScript)\nDESCRIPTION: Demonstrates using `StackActions.popToTop` to go back to the very first screen in the navigation stack, removing all other screens on top of it. This action is dispatched directly using the `navigation` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Listening to Focus and Blur Events in Dynamic React Navigation (JavaScript)\nDESCRIPTION: This code example demonstrates listening to \"focus\" and \"blur\" events on React Navigation screens using navigation.addListener within React.useEffect, in a dynamic navigation setup with NavigationContainer. Dependencies include @react-navigation/native, @react-navigation/native-stack, react-navigation/elements, and react-native. Screens add listeners that log focus and blur events, and cleanup is handled by return values from useEffect. Suitable for applications that use runtime-created stack navigators inside a NavigationContainer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-lifecycle.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, View } from 'react-native';\\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { Button } from '@react-navigation/elements';\\n\\n// codeblock-focus-start\\nfunction ProfileScreen() {\\n  const navigation = useNavigation();\\n\\n  React.useEffect(() => {\\n    // highlight-start\\n    const unsubscribe = navigation.addListener('focus', () => {\\n      console.log('ProfileScreen focused');\\n    });\\n    // highlight-end\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  React.useEffect(() => {\\n    // highlight-start\\n    const unsubscribe = navigation.addListener('blur', () => {\\n      console.log('ProfileScreen blurred');\\n    });\\n    // highlight-end\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n\\n  React.useEffect(() => {\\n    const unsubscribe = navigation.addListener('focus', () => {\\n      console.log('HomeScreen focused');\\n    });\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  React.useEffect(() => {\\n    const unsubscribe = navigation.addListener('blur', () => {\\n      console.log('HomeScreen blurred');\\n    });\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst Stack = createNativeStackNavigator();\\n\\nfunction RootStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <RootStack />\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Shared Element Transitions with React Navigation Native Stack in JavaScript/JSX\nDESCRIPTION: This code implements a minimal example of shared element transitions between screens in a React Native app. It uses @react-navigation/native-stack's Stack Navigator, react-native-reanimated's Animated components, and assigns the same sharedTransitionTag to matching Image components on two screens. Required dependencies include @react-navigation/native, @react-navigation/native-stack, react-native-reanimated v3.0.0+, and react-native. Parameters include the sharedTransitionTag string (must match between screens), and navigation properties for routing. The input is user navigation actions, and the outputs are automatically handled transitions of the shared elements between screens; constraints include experimental production readiness and the need for proper dependency setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/shared-element-transitions.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Button, StyleSheet } from 'react-native';\\nimport { NavigationContainer } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nimport Animated from 'react-native-reanimated';\\n\\n// highlight-next-line\\nconst Stack = createNativeStackNavigator();\\n\\nfunction HomeScreen({ navigation }) {\\n  return (\\n    <View style={styles.container}>\\n      <Button\\n        title=\"Go to Details\"\\n        onPress={() => navigation.navigate('Details')}\\n      />\\n      <Animated.Image\\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\\n        style={{ width: 300, height: 300 }}\\n        // highlight-next-line\\n        sharedTransitionTag=\"tag\"\\n      />\\n    </View>\\n  );\\n}\\n\\nfunction DetailsScreen({ navigation }) {\\n  return (\\n    <View style={styles.container}>\\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\\n      <Animated.Image\\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\\n        style={{ width: 100, height: 100 }}\\n        // highlight-next-line\\n        sharedTransitionTag=\"tag\"\\n      />\\n    </View>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <Stack.Navigator>\\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\\n      </Stack.Navigator>\\n    </NavigationContainer>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Anti-Pattern: Passing Full Objects as Params in React Navigation (JavaScript)\nDESCRIPTION: Shows an example code snippet representing an anti-pattern where a complex data object (a user object) is passed directly as a navigation parameter. The surrounding text advises against this, citing potential issues like data duplication, staleness, and complex deep linking URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/params.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this\nnavigation.navigate('Profile', {\n  user: {\n    id: 'jane',\n    firstName: 'Jane',\n    lastName: 'Done',\n    age: 25,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Path Matching with Relative and Exact Behavior (Static Config) - React Navigation (JavaScript)\nDESCRIPTION: This code demonstrates nested navigator path configuration, where the ProfileTabs navigator is nested under a Home route with its own path. By default, the Profile screen within ProfileTabs uses the parent‚Äôs path as a prefix. This setup enables matching paths like '/feed/users/:id'. Dependencies include React Navigation navigators and matching screen components, and inputs are structured as navigation route declarations. To override and allow direct matching, the 'exact' option is also demonstrated in another snippet.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ProfileTabs = createBottomTabNavigator({\n  screens: {\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n      },\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: ProfileTabs,\n      linking: {\n        path: 'feed',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Overall Drawer Appearance with `drawerStyle` in React Navigation\nDESCRIPTION: Illustrates using the `drawerStyle` option within the `screenOptions` prop of `Drawer.Navigator` to apply styles directly to the main drawer container view. This example sets a custom background color and width for the drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<Drawer.Navigator\n  screenOptions={{\n    drawerStyle: {\n      backgroundColor: '#c6cbef',\n      width: 240,\n    },\n  }}\n>\n  {/* screens */}\n</Drawer.Navigator>\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Screen in the Drawer using jumpTo\nDESCRIPTION: This snippet demonstrates using the `navigation.jumpTo()` helper method to navigate directly to an existing screen within the Drawer Navigator. It accepts the target route `name` and optional `params` object as arguments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nnavigation.jumpTo('Profile', { owner: 'Satya' });\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Item to React Navigation Drawer Content\nDESCRIPTION: Demonstrates adding a custom `DrawerItem` alongside the default `DrawerItemList` within a `CustomDrawerContent` component. This example adds a 'Help' item that opens a URL on press using `Linking`. Requires `DrawerItem` from `@react-navigation/drawer` and potentially `Linking` from `react-native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Help\"\n        onPress={() => Linking.openURL('https://mywebsite.com/help')}\n      />\n    </DrawerContentScrollView>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Link Component for Basic Navigation (JavaScript/React)\nDESCRIPTION: This snippet shows how to use the previously defined `LinkButton` component within another component (`Home`). It passes the `screen` ('Profile') and `params` ({ id: 'jane' }) props to configure the link to navigate to the 'Profile' screen with the specified parameters upon being pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-props.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Home() {\n  return (\n    <LinkButton screen=\"Profile\" params={{ id: 'jane' }}>\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing a Custom Theme to NavigationContainer in React Navigation - JavaScript\nDESCRIPTION: Demonstrates how to create a custom theme object by extending the DefaultTheme and overriding colors, then passing it as the 'theme' prop to NavigationContainer. Requires React, @react-navigation/native, and proper import of DefaultTheme. The custom theme controls navigation element colors throughout the app; expected to be a full JavaScript object adhering to theme schema. The 'App' component receives and applies the theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\\n\\nconst MyTheme = {\\n  ...DefaultTheme,\\n  colors: {\\n    ...DefaultTheme.colors,\\n    primary: 'rgb(255, 45, 85)',\\n  },\\n};\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer theme={MyTheme}>{/* content */}</NavigationContainer>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a React Navigation Link with Screen Name and Params - JavaScript\nDESCRIPTION: This example shows the usage of the <Link> component in React Navigation, passing an object with 'screen' and 'params' to navigate programmatically. Requires React Navigation 6.x and the associated link handling components. The 'to' prop should specify the target screen and optional params; this enables deep referencing of navigation targets beyond path strings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Link\n  to={{\n    screen: 'Profile',\n    params: { id: 'jane' },\n  }}\n>\n  Go to Jane's profile\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Groups with Static Configuration\nDESCRIPTION: Example of creating groups in a Native Stack Navigator using static configuration. The example defines two groups ('App' and 'Modal') with different screen options and screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  groups: {\n    App: {\n      screenOptions: {\n        headerStyle: {\n          backgroundColor: '#FFB6C1',\n        },\n      },\n      screens: {\n        Home: HomeScreen,\n        Profile: EmptyScreen,\n      },\n    },\n    Modal: {\n      screenOptions: {\n        presentation: 'modal',\n      },\n      screens: {\n        Search: EmptyScreen,\n        Share: EmptyScreen,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigator Groups\nDESCRIPTION: Demonstrates how to use Stack.Group to organize screens and apply shared navigation options like header styles and modal presentations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/group.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Group\n    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n  >\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </Stack.Group>\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Search\" component={SearchScreen} />\n    <Stack.Screen name=\"Share\" component={ShareScreen} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Press Events in React Navigation\nDESCRIPTION: Example demonstrating how to handle tab press events and prevent default behavior using navigation event listeners.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Preventing Screen Removal with usePreventRemove - React Navigation - JavaScript (Static Navigation)\nDESCRIPTION: This snippet demonstrates how to use the usePreventRemove hook within a static navigation stack setup created via createStaticNavigation and createStackNavigator from @react-navigation/native. It conditionally intercepts navigation based on unsaved changes and shows a confirmation dialog using Alert (native) or confirm (web) before allowing a screen pop or removal. Key dependencies include react, react-native, @react-navigation/native, and @react-navigation/elements. The EditTextScreen component controls navigation blocking by toggling hasUnsavedChanges, and expected input is user text; output is confirmation dialog logic, and navigation proceeds only with user approval. Limitations include only intercepting state-based navigation removals, not handling all exit cases.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-prevent-remove.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { Alert, View, TextInput, Platform, StyleSheet } from 'react-native';\nimport {\n  useNavigation,\n  usePreventRemove,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\n// codeblock-focus-start\nconst EditTextScreen = () => {\n  const [text, setText] = React.useState('');\n  const navigation = useNavigation();\n\n  const hasUnsavedChanges = Boolean(text);\n\n  usePreventRemove(hasUnsavedChanges, ({ data }) => {\n    if (Platform.OS === 'web') {\n      const discard = confirm(\n        'You have unsaved changes. Discard them and leave the screen?'\n      );\n\n      if (discard) {\n        navigation.dispatch(data.action);\n      }\n    } else {\n      Alert.alert(\n        'Discard changes?',\n        'You have unsaved changes. Discard them and leave the screen?',\n        [\n          { text: \"Don't leave\", style: 'cancel', onPress: () => {} },\n          {\n            text: 'Discard',\n            style: 'destructive',\n            onPress: () => navigation.dispatch(data.action),\n          },\n        ]\n      );\n    }\n  });\n\n  return (\n    <View style={styles.content}>\n      <TextInput\n        autoFocus\n        style={styles.input}\n        value={text}\n        placeholder=\"Type something‚Ä¶\"\n        onChangeText={setText}\n      />\n    </View>\n  );\n};\n// codeblock-focus-end\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={styles.buttons}>\n      <Button onPress={() => navigation.push('EditText')} style={styles.button}>\n        Push EditText\n      </Button>\n    </View>\n  );\n};\n\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    EditText: EditTextScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n    backgroundColor: 'white',\n  },\n  buttons: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 8,\n  },\n  button: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Passing and Reading Parameters between React Navigation Screens\nDESCRIPTION: Demonstrates how to pass parameters when navigating to a screen using navigation.navigate() and how to read those parameters in the destination screen using route.params. The HomeScreen passes an itemId and otherParam to the DetailsScreen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => {\n          /* 1. Navigate to the Details route with params */\n          navigation.navigate('Details', {\n            itemId: 86,\n            otherParam: 'anything you want here',\n          });\n        }}\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen({ route, navigation }) {\n  /* 2. Get the param */\n  const { itemId, otherParam } = route.params;\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Text>itemId: {JSON.stringify(itemId)}</Text>\n      <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() =>\n          navigation.push('Details', {\n            itemId: Math.floor(Math.random() * 100),\n          })\n        }\n      />\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling the drawerItemPress Event in React Navigation Drawer\nDESCRIPTION: This example demonstrates how to add an event listener for the `drawerItemPress` event using `navigation.addListener` within a `React.useEffect` hook. It shows how to prevent the default navigation behavior (focusing the screen or closing the drawer) by calling `event.preventDefault()` and then performing custom actions. Remember to unsubscribe the listener on component unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('drawerItemPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Updating Route Parameters with setParams in Static React Navigation\nDESCRIPTION: This code demonstrates how to use the setParams method with Static React Navigation to update route parameters. It shows a profile screen where users can toggle between different sets of friends and profile titles using setParams, which shallow merges new parameters with existing ones.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            friends: ['Brent', 'Satya', 'Micha≈õ'],\n            title: \"Brent's Profile\",\n          });\n        }}\n      >\n        Go to Brents profile\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Text>Friends: </Text>\n      <Text>{route.params.friends[0]}</Text>\n      <Text>{route.params.friends[1]}</Text>\n      <Text>{route.params.friends[2]}</Text>\n      <Button\n        onPress={() => {\n          // highlight-start\n          navigation.setParams({\n            friends:\n              route.params.friends[0] === 'Brent'\n                ? ['Wojciech', 'Szymon', 'Jakub']\n                : ['Brent', 'Satya', 'Micha≈õ'],\n            title:\n              route.params.title === \"Brent's Profile\"\n                ? \"Lucy's Profile\"\n                : \"Brent's Profile\",\n          });\n          // highlight-end\n        }}\n      >\n        Swap title and friends\n      </Button>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: {\n      screen: ProfileScreen,\n      options: ({ route }) => ({ title: route.params.title }),\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Stack Navigator (JavaScript)\nDESCRIPTION: This snippet defines a `TestStackNavigator` component, which utilizes `useNavigationBuilder` and `StackRouter` from `@react-navigation/native` to create a simplified navigator for testing. It renders the active route's content and includes a `createTestStackNavigator` function to create instances of the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useNavigationBuilder, StackRouter } from '@react-navigation/native';\n\nfunction TestStackNavigator(props) {\n  const { state, descriptors, NavigationContent } = useNavigationBuilder(\n    StackRouter,\n    props\n  );\n\n  return (\n    <NavigationContent>\n      {state.routes.map((route, index) => {\n        return (\n          <View key={route.key} aria-hidden={index !== state.index}>\n            {descriptors[route.key].render()}\n          </View>\n        );\n      })}\n    </NavigationContent>\n  );\n}\n\nexport function createTestStackNavigator(config) {\n  return createNavigatorFactory(TestStackNavigator)(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Common and Specific Tab Options in TabView (JavaScript/React Native)\nDESCRIPTION: Illustrates how to set options for tabs within a TabView. `commonOptions` applies settings to all tabs (e.g., a default icon rendering function), while `options` allows specifying unique settings (like `labelText`) for individual tabs identified by their route key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<TabView\n  commonOptions={{\n    icon: ({ route, focused, color }) => (\n      <Icon name={route.icon} color={color} />\n    ),\n  }}\n  options={{\n    albums: {\n      labelText: 'Albums',\n    },\n    profile: {\n      labelText: 'Profile',\n    },\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Animation for Custom Headers\nDESCRIPTION: Example of creating a cross-fade animation for custom headers using Animated API with the progress props provided by the Stack Navigator. This animation is used when headerMode is set to 'float'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst opacity = Animated.add(progress.current, progress.next || 0).interpolate({\n  inputRange: [0, 1, 2],\n  outputRange: [0, 1, 0],\n});\n\nreturn (\n  <Animated.View style={{ opacity }}>{/* Header content */}</Animated.View>\n);\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer Ref (TypeScript)\nDESCRIPTION: This code shows how to annotate a `NavigationContainer` ref created using `createNavigationContainerRef` with a type parameter to enable type-checking of navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef = createNavigationContainerRef<RootStackParamList>();\n```\n\n----------------------------------------\n\nTITLE: Popping to a Specific Screen in React Navigation Stack (JavaScript)\nDESCRIPTION: This code uses the `popTo` method of the React Navigation `navigation` object. It navigates back to the screen named 'Profile' within the current stack, popping any screens that were pushed after it. It also passes `{ owner: 'Micha≈õ' }` as parameters to the 'Profile' route. If a matching screen is not found, it pops the current screen and adds a new one with the specified name and params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nnavigation.popTo('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation Between Tabs in React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates how to navigate between tabs programmatically using `this.props.navigation.navigate('RouteName')`. It defines `HomeScreen` and `SettingsScreen` components, each containing a button that, when pressed, navigates to the other tab within the tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/tab-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n        <Button\n          title=\"Go to Settings\"\n          onPress={() => this.props.navigation.navigate('Settings')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Transparent Modal with Custom Fade Animation (JavaScript)\nDESCRIPTION: This code configures a Stack.Navigator to present a transparent modal screen that overlays the previous screen, keeping the underlying content visible. It sets cardStyle to transparent, disables the header, enables card overlay, and uses a custom fade animation via cardStyleInterpolator. The options include a custom interpolator function to animate both the card and overlay opacity. The Stack contains both HomeStack and ModalScreen as children. Dependencies are React Navigation Stack and correctly set up modal and child stacks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Navigator\\n  screenOptions={{\\n    headerShown: false,\\n    cardStyle: { backgroundColor: 'transparent' },\\n    cardOverlayEnabled: true,\\n    cardStyleInterpolator: ({ current: { progress } }) => ({\\n      cardStyle: {\\n        opacity: progress.interpolate({\\n          inputRange: [0, 0.5, 0.9, 1],\\n          outputRange: [0, 0.25, 0.7, 1],\\n        }),\\n      },\\n      overlayStyle: {\\n        opacity: progress.interpolate({\\n          inputRange: [0, 1],\\n          outputRange: [0, 0.5],\\n          extrapolate: 'clamp',\\n        }),\\n      },\\n    }),\\n  }}\\n  mode=\\\"modal\\\"\\n>\\n  <Stack.Screen name=\\\"Home\\\" component={HomeStack} />\\n  <Stack.Screen name=\\\"Modal\\\" component={ModalScreen} />\\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Card Style Interpolator for Android Fade Animation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to apply a pre-made card style interpolator to a Stack.Screen to achieve a fade-in animation from the bottom, similar to Android Oreo transitions. It imports CardStyleInterpolators from @react-navigation/stack and assigns the forFadeFromBottomAndroid interpolator to the cardStyleInterpolator option. Dependencies include React Navigation Stack and appropriate React component setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CardStyleInterpolators } from '@react-navigation/stack';\\n\\n// ...\\n\\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={Profile}\\n  options={{\\n    title: 'Profile',\\n    cardStyleInterpolator: CardStyleInterpolators.forFadeFromBottomAndroid,\\n  }}\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Screens with React Navigation in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a stack navigator with regular and modal screens using React Navigation. It includes the implementation of HomeScreen, DetailsScreen, ModalScreen, and the root stack navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>\n      <Button\n        onPress={() => navigation.navigate('MyModal')}\n        title=\"Open Modal\"\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nfunction ModalScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n      <Button onPress={() => navigation.goBack()} title=\"Dismiss\" />\n    </View>\n  );\n}\n\nconst RootStack = createStackNavigator();\n\nfunction RootStackScreen() {\n  return (\n    <RootStack.Navigator>\n      <RootStack.Group>\n        <RootStack.Screen name=\"Home\" component={HomeScreen} />\n        <RootStack.Screen name=\"Details\" component={DetailsScreen} />\n      </RootStack.Group>\n      <RootStack.Group screenOptions={{ presentation: 'modal' }}>\n        <RootStack.Screen name=\"MyModal\" component={ModalScreen} />\n      </RootStack.Group>\n    </RootStack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Popping to the Top of the Stack Using navigation.popToTop (JavaScript)\nDESCRIPTION: Demonstrates use of navigation.popToTop to remove all but the first screen in the stack, navigating directly to it. Prerequisites: navigation object from react-navigation. No parameters required. All screens above the root are removed from the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.popToTop();\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Event Listeners for Gesture Start\nDESCRIPTION: Example of using the gestureStart event listener with React hooks to detect when a swipe gesture begins on the current screen in a Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Top Tabs Navigator options\nDESCRIPTION: Example of setting screen options for the Material Top Tabs Navigator, including styling for tab bar labels, items, and background.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  screenOptions={{\n    tabBarLabelStyle: { fontSize: 12 },\n    tabBarItemStyle: { width: 100 },\n    tabBarStyle: { backgroundColor: 'powderblue' },\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Conditional Screen Rendering with Authentication\nDESCRIPTION: Example of using the 'if' property for conditional screen rendering based on authentication status.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/static-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst useIsLoggedIn = () => {\n  const { isLoggedIn } = React.useContext(AuthContext);\n\n  return isLoggedIn;\n};\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      if: useIsLoggedIn,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Fade Animation for Stack Navigator Card Transitions\nDESCRIPTION: This snippet defines a custom card style interpolator function that creates a simple fade effect during screen transitions. It adjusts the opacity of the card based on the current progress of the animation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current }) => ({\n  cardStyle: {\n    opacity: current.progress,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions for Path Matching in React Navigation\nDESCRIPTION: Configuration using regular expressions to define specific path matching patterns for Feed and Profile screens, enabling more precise URL matching.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Feed: {\n      screen: FeedScreen,\n      linking: {\n        path: ':sort(latest|popular)',\n      },\n    },\n    Profile: {\n      screen: ProfileScreen,\n      linking: {\n        path: ':username(@[A-Za-z0-9_]+)',\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Feed: ':sort(latest|popular)',\n    Profile: ':username(@[A-Za-z0-9_]+)',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying State with Functional Update and CommonActions.reset in JavaScript\nDESCRIPTION: Shows how to modify the existing navigation state using a functional update passed to `navigation.dispatch`. The function receives the current state, allows modifications (like filtering routes), and returns a `CommonActions.reset` action with the new desired state. This preserves parts of the state while resetting the navigator's structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch((state) => {\n  // Remove the home route from the stack\n  const routes = state.routes.filter((r) => r.name !== 'Home');\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route Name - Static API - JavaScript\nDESCRIPTION: Specifies the route to display on initial navigator load by passing the 'initialRouteName' property in the object configuration. The navigator then starts on the 'Home' screen before any navigation occurs. Requires HomeScreen and ProfileScreen, with additional dependencies on the React Navigation stack functions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\\n  // highlight-next-line\\n  initialRouteName: 'Home',\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Tab Navigation (Static) with React Native Testing Library\nDESCRIPTION: This test uses `@testing-library/react-native` to simulate navigating between tabs in a React Native application using the `createStaticNavigation` helper. It verifies that pressing the 'Settings' tab button navigates to the Settings screen. Requires jest for mocking timers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, jest, test } from '@jest/globals';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('navigates to settings by tab bar button press', async () => {\n  const user = userEvent.setup();\n\n  const Navigation = createStaticNavigation(MyTabs);\n\n  render(<Navigation />);\n\n  const button = screen.getByRole('button', { name: 'Settings, tab, 2 of 2' });\n\n  await user.press(button);\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Settings screen')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing BottomTabBarHeightContext in React Navigation\nDESCRIPTION: This snippet illustrates how to access the bottom tab bar height using the `BottomTabBarHeightContext.Consumer`. This approach is useful in class components or when the height is needed in a reusable component outside the bottom tab navigator.  The Consumer provides the tab bar height as a prop to the wrapped component. Requires `@react-navigation/bottom-tabs`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BottomTabBarHeightContext } from '@react-navigation/bottom-tabs';\n\n// ...\n\n<BottomTabBarHeightContext.Consumer>\n  {tabBarHeight => (\n    /* render something */\n  )}\n</BottomTabBarHeightContext.Consumer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for Stack Groups with Static Configuration\nDESCRIPTION: Example showing how to apply screen options to a group of screens using static configuration in a stack navigator. This allows common presentation settings to be applied to multiple screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  groups: {\n    Modal: {\n      screenOptions: {\n        presentation: 'modal',\n      },\n      screens: {\n        /* screens */\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Navigator (Static Configuration)\nDESCRIPTION: Demonstrates how to set up and use the Drawer Navigator with a static configuration approach. It imports `createDrawerNavigator`, defines screens (`HomeScreen`, `ProfileScreen`), creates the drawer navigator instance (`MyDrawer`) with screen definitions, and uses `createStaticNavigation` to render the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\n// codeblock-focus-end\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst MyDrawer = createDrawerNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyDrawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Auth Routing with Conditional Screens in React Navigation (JavaScript)\nDESCRIPTION: This functional React component demonstrates the declarative navigation model using conditional rendering of Stack.Screen components inside a Stack.Navigator. Based on the isLoggedIn state, different sets of screens are presented. Dependencies: React, React Navigation v5.x+, Stack.Navigator. Inputs: isLoggedIn boolean variable. Outputs: renders different navigation routes for authenticated/unauthenticated users and updates automatically when state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <Stack.Navigator>\\n        {isLoggedIn ? (\\n          <>\\n            <Stack.Screen name=\\\"Home\\\" component={HomeScreen} />\\n            <Stack.Screen name=\\\"Settings\\\" component={SettingsScreen} />\\n          </>\\n        ) : (\\n          <Stack.Screen name=\\\"SignIn\\\" component={SignInScreen} />\\n        )}\\n      </Stack.Navigator>\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Complete Custom Theme for React Navigation\nDESCRIPTION: This snippet provides a comprehensive example of a custom theme object for React Navigation. It includes color definitions and platform-specific font configurations for web, iOS, and Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst WEB_FONT_STACK =\n  'system-ui, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"';\n\nconst MyTheme = {\n  dark: false,\n  colors: {\n    primary: 'rgb(255, 45, 85)',\n    background: 'rgb(242, 242, 242)',\n    card: 'rgb(255, 255, 255)',\n    text: 'rgb(28, 28, 30)',\n    border: 'rgb(199, 199, 204)',\n    notification: 'rgb(255, 69, 58)',\n  },\n  fonts: Platform.select({\n    web: {\n      regular: {\n        fontFamily: WEB_FONT_STACK,\n        fontWeight: '400',\n      },\n      medium: {\n        fontFamily: WEB_FONT_STACK,\n        fontWeight: '500',\n      },\n      bold: {\n        fontFamily: WEB_FONT_STACK,\n        fontWeight: '600',\n      },\n      heavy: {\n        fontFamily: WEB_FONT_STACK,\n        fontWeight: '700',\n      },\n    },\n    ios: {\n      regular: {\n        fontFamily: 'System',\n        fontWeight: '400',\n      },\n      medium: {\n        fontFamily: 'System',\n        fontWeight: '500',\n      },\n      bold: {\n        fontFamily: 'System',\n        fontWeight: '600',\n      },\n      heavy: {\n        fontFamily: 'System',\n        fontWeight: '700',\n      },\n    },\n    default: {\n      regular: {\n        fontFamily: 'sans-serif',\n        fontWeight: 'normal',\n      },\n      medium: {\n        fontFamily: 'sans-serif-medium',\n        fontWeight: 'normal',\n      },\n      bold: {\n        fontFamily: 'sans-serif',\n        fontWeight: '600',\n      },\n      heavy: {\n        fontFamily: 'sans-serif',\n        fontWeight: '700',\n      },\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Using useNavigationState with Selector for Route Index in JavaScript\nDESCRIPTION: Demonstrates using the `useNavigationState` hook with a selector function to retrieve the `index` property from the navigation state. This approach optimizes re-renders by only updating the component when the selected value (index) changes. Requires `useNavigationState` from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation-state.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst index = useNavigationState((state) => state.index);\n```\n\n----------------------------------------\n\nTITLE: Delaying Effects with useFocusEffect and InteractionManager in React Native\nDESCRIPTION: Shows how to defer the execution of an effect run by `useFocusEffect` until after screen transitions or interactions are complete. This is achieved using `InteractionManager.runAfterInteractions`. This technique is useful for preventing expensive tasks from negatively impacting animation performance. The cleanup function cancels the scheduled task if the screen blurs or unmounts before the task runs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-focus-effect.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseFocusEffect(\n  React.useCallback(() => {\n    const task = InteractionManager.runAfterInteractions(() => {\n      // Expensive task\n    });\n\n    return () => task.cancel();\n  }, [])\n);\n```\n\n----------------------------------------\n\nTITLE: Navigation State with Optional Parameter (JS)\nDESCRIPTION: This snippet illustrates the resulting navigation state when the optional `section` parameter is not present in the URL.  The `id` parameter is parsed according to the custom parsing logic defined in the configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Profile',\n      params: { id: 'user-wojciech' },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: useIsSignedIn and useIsSignedOut Hooks (React Navigation)\nDESCRIPTION: These code snippets define custom hooks (`useIsSignedIn` and `useIsSignedOut`) that leverage the `SignInContext` to determine the authentication state. `useIsSignedIn` reads the authentication status from the context, and `useIsSignedOut` returns the inverse. Requires React Context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useIsSignedIn() {\n  const isSignedIn = React.useContext(SignInContext);\n  return isSignedIn;\n}\n\nfunction useIsSignedOut() {\n  return !useIsSignedIn();\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Multiple Instances of a Screen with Keys using React Navigation in JavaScript\nDESCRIPTION: Demonstrates how to push multiple instances of the same screen component (named `SCREEN`) onto the navigation stack by providing unique `key` properties in the `navigate` call. This allows having multiple distinct instances of the same screen component in the history.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate({ name: SCREEN, key: SCREEN_KEY_A });\nnavigation.navigate({ name: SCREEN, key: SCREEN_KEY_B });\nnavigation.navigate({ name: SCREEN, key: SCREEN_KEY_C });\nnavigation.navigate({ name: SCREEN, key: SCREEN_KEY_D });\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Event Listeners for Transition End\nDESCRIPTION: Example of using the transitionEnd event listener with React hooks to detect when a screen transition animation completes. The event provides data about whether the screen was opened or closed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Integrating Provider with React Navigation Container\nDESCRIPTION: Example showing how to wrap a NavigationContainer with MobX's Provider component to make MST objects accessible throughout the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/MST-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Provider myObject={this.myObject}>\n  <NavigationContainer>{/* Screen configuration */}</NavigationContainer>\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Initializing Drawer Navigator in React Navigation - JavaScript\nDESCRIPTION: This snippet defines a React component, MyDrawer, which initializes a drawer navigator using the createDrawerNavigator function from @react-navigation/drawer. It sets up three routes: Feed, Notifications, and Profile, each with custom drawer labels. Dependencies include @react-navigation/drawer and the Feed, Notifications, and Profile components. The initial route is set to Feed, and each screen can be individually customized via the options prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createDrawerNavigator } from '@react-navigation/drawer';\\n\\nconst Drawer = createDrawerNavigator();\\n\\nfunction MyDrawer() {\\n  return (\\n    <Drawer.Navigator initialRouteName=\\\"Feed\\\">\\n      <Drawer.Screen\\n        name=\\\"Feed\\\"\\n        component={Feed}\\n        options={{ drawerLabel: 'Home' }}\\n      />\\n      <Drawer.Screen\\n        name=\\\"Notifications\\\"\\n        component={Notifications}\\n        options={{ drawerLabel: 'Updates' }}\\n      />\\n      <Drawer.Screen\\n        name=\\\"Profile\\\"\\n        component={Profile}\\n        options={{ drawerLabel: 'Profile' }}\\n      />\\n    </Drawer.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Static Bottom Tab Navigator Implementation (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a static bottom tab navigator using React Navigation. It imports necessary components, defines Home and Profile screens, and creates a tab navigator with these screens. The screens are statically defined in the `createBottomTabNavigator` configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\n// codeblock-focus-end\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Event Listener in a React Class Component (JavaScript)\nDESCRIPTION: Illustrates how to add a navigation 'focus' event listener in the componentDidMount lifecycle method of a React class component, and remove it in componentWillUnmount. The event handler performs logic when the screen gains focus. This pattern requires storing the unsubscribe function for later cleanup. Assumes use within a React Navigation context with the navigation prop available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-events.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nclass Profile extends React.Component {\n  componentDidMount() {\n    this._unsubscribe = navigation.addListener('focus', () => {\n      // do something\n    });\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n  }\n\n  render() {\n    // Content of the component\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeaderBackButton in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to use the HeaderBackButton component to add a customized back button in a navigation header. It demonstrates passing a label and an onPress callback that logs to the console. The component should be used within a screen or a stack navigator, and requires react-navigation elements (and its peer React/React Native packages) as dependencies. Key props include 'label' for customizing the button text and 'onPress' for handling back actions; outputs a rendered back button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n<HeaderBackButton label=\\\"Hello\\\" onPress={() => console.log('back pressed')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Stack Navigator in React Navigation\nDESCRIPTION: Example of how to import and use the Native Stack Navigator in a React component. This snippet demonstrates creating a basic stack navigation structure with multiple screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Notifications\" component={Notifications} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Absolute Positioning of Tab Bar with React Navigation\nDESCRIPTION: This snippet shows how to absolutely position the tab bar at the bottom of the screen using the `tabBarStyle` option. It's important to note the need for manual bottom margin adjustments to content due to the absolute positioning.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  screenOptions={{\n    tabBarStyle: { position: 'absolute' },\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Slide Animation for Stack Navigator Transitions in React Navigation\nDESCRIPTION: This snippet demonstrates how to implement a custom slide animation for Stack Navigator transitions, considering both the current and next screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst forSlide = ({ current, next, inverted, layouts: { screen } }) => {\n  const progress = Animated.add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  return {\n    cardStyle: {\n      transform: [\n        {\n          translateX: Animated.multiply(\n            progress.interpolate({\n              inputRange: [0, 1, 2],\n              outputRange: [\n                screen.width, // Focused, but offscreen in the beginning\n                0, // Fully focused\n                screen.width * -0.3, // Fully unfocused\n              ],\n              extrapolate: 'clamp',\n            }),\n            inverted\n          ),\n        },\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Route Params for a Specific Route Key with CommonActions (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows how to set route parameters for a specific route by providing a 'source' property (the route's key) along with the setParams action. Useful when not targeting the currently focused route. Dependencies include '@react-navigation/native', and a route context providing route.key. The dispatched object merges setParams with a specific source route key, targeting parameter updates precisely. Inputs are the params object and the route key; output is updated route parameters on the specified route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.setParams({ user: 'Wojtek' }),\n  source: route.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters for Specific Route with CommonActions.setParams in JavaScript\nDESCRIPTION: Illustrates dispatching a `setParams` action targeted at a specific route using the `source` property. It spreads the result of `CommonActions.setParams` and adds a `source` property containing the key of the route whose parameters should be updated.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.setParams({ user: 'Wojtek' }),\n  source: route.key,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Focus Listeners in React Navigation\nDESCRIPTION: This example shows how to use the navigation prop to subscribe to focus events using useEffect. It demonstrates proper cleanup by returning the unsubscribe function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-lifecycle.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // Screen was focused\n      // Do something\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Underlying Gesture Handler\nDESCRIPTION: Example demonstrating how to use the `configureGestureHandler` prop provided by the `Drawer` component. This prop accepts a function that receives the gesture object from `react-native-gesture-handler`, allowing for fine-grained customization of the gesture behavior, such as disabling trackpad gestures. Requires `react-native-gesture-handler`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconfigureGestureHandler={({ gesture }) => {\n  return gesture.enableTrackpadTwoFingerGesture(false);\n}}\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom URL Handling in React Navigation\nDESCRIPTION: Setting up custom functions for converting between URL paths and navigation state, allowing for completely custom URL parsing and generation logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  getStateFromPath: (path, options) => {\n    // Return a state object here\n    // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n  },\n  getPathFromState(state, config) {\n    // Return a path string here\n    // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n  },\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles in React Navigation (Dynamic)\nDESCRIPTION: This snippet demonstrates how to customize header styles for a dynamic navigation configuration in React Navigation. It shows setting background color, tint color, and title style for the header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'My home',\n          headerStyle: {\n            backgroundColor: '#f4511e',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating useNavigation Hook in TypeScript\nDESCRIPTION: Demonstrates how to provide a type annotation for the `navigation` object returned by the `useNavigation` hook using a type parameter (`ProfileScreenNavigationProp`). Note that this relies on the developer providing the correct type and isn't fully type-safe.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst navigation = useNavigation<ProfileScreenNavigationProp>();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Navigation Stack Navigator - JavaScript (React Native)\nDESCRIPTION: Demonstrates the creation of a basic stack navigator using @react-navigation/stack. Establishes a Stack.Navigator with four screens (Home, Notifications, Profile, Settings), showing the recommended method for defining navigation structure in a React Native app. Requires @react-navigation/native, @react-navigation/stack, and relevant screen components; expects this code to run within a React (function) component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Notifications\" component={Notifications} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using TabActions.jumpTo for Tab Navigation in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the TabActions.jumpTo method to navigate to a specific tab in a tab navigator. The example shows jumping to a 'Profile' tab while passing user data as a parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabActions } from '@react-navigation/native';\n\nconst jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });\n\nnavigation.dispatch(jumpToAction);\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Tab with Parameters in React Navigation\nDESCRIPTION: This code snippet demonstrates how to use the `jumpTo` method to navigate to a specific screen within a tab navigator. The method accepts the name of the route to jump to and an optional object containing screen parameters. The example provided navigates to the 'Profile' screen and passes an `owner` parameter with the value 'Micha≈õ'. This function is part of the React Navigation API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Using useIsFocused Hook (Dynamic Config) in React Native\nDESCRIPTION: Illustrates the `useIsFocused` hook in a dynamically configured React Navigation application. It returns a boolean reflecting the screen's focus state, used here to conditionally display text ('focused' or 'unfocused') within the `ProfileScreen` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/function-after-focusing-screen.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useIsFocused } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  // codeblock-focus-end\n  // This hook returns `true` if the screen is focused, `false` otherwise\n  // codeblock-focus-start\n  const isFocused = useIsFocused();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{isFocused ? 'focused' : 'unfocused'}</Text>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;}\n\nconst Tab = createMaterialTopTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLinkBuilder to Generate Links in a Custom Drawer (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `useLinkBuilder` hook from `@react-navigation/native` within a custom `DrawerContent` component. It retrieves the `buildLink` function and uses it inside a map function over `state.routes` to dynamically generate the `to` prop for each `Link` component, effectively creating navigation links for drawer items based on the defined linking configuration. The `action` prop is set using `CommonActions.navigate` for standard navigation behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-link-builder.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';\n\n// ...\n\nfunction DrawerContent({ state, descriptors }) {\n  const buildLink = useLinkBuilder();\n\n  return state.routes((route) => (\n    <Link\n      to={buildLink(route.name, route.params)}\n      action={CommonActions.navigate(route.name)}\n    >\n      {descriptors[route.key].options.title}\n    </Link>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: SceneMap Helper Usage for TabView - React Native JavaScript\nDESCRIPTION: Demonstrates how to define scene mapping using the SceneMap helper from react-native-tab-view to optimize scene renders and improve performance. Accepts a mapping from route keys to component values and outputs a renderScene function suitable for TabView. Only pure components should be used for this mapping.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SceneMap } from 'react-native-tab-view';\n\n...\n\nconst renderScene = SceneMap({\n  music: MusicRoute,\n  albums: AlbumsRoute,\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Group Screen Options via Function in 'screenOptions' (JavaScript)\nDESCRIPTION: Demonstrates passing a function to the `screenOptions` prop on `Stack.Group`. The function receives `navigation` and `route` for each screen in the group, allowing dynamic setup like adding a conditional 'Cancel' button based on the navigation state or route parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  <Stack.Group\n    screenOptions={({ navigation }) => ({\n      presentation: 'modal',\n      headerLeft: () => <CancelButton onPress={navigation.goBack} />,\n    })}\n  >\n    <Stack.Screen name=\"Settings\" component={Settings} />\n    <Stack.Screen name=\"Share\" component={Share} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Status with useDrawerStatus Hook\nDESCRIPTION: This snippet demonstrates how to determine if the drawer is currently open or closed using the `useDrawerStatus` hook provided by `@react-navigation/drawer`. The hook returns either 'open' or 'closed'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nimport { useDrawerStatus } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useDrawerStatus() === 'open';\n```\n\n----------------------------------------\n\nTITLE: Optimizing renderScene by Using Separate Components (JavaScript/React Native)\nDESCRIPTION: Shows an improved `renderScene` function that renders separate, dedicated components (e.g., `HomeComponent`) for each route. This pattern allows leveraging `React.PureComponent` or `React.memo` within those components to prevent unnecessary re-renders.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return <HomeComponent />;\n    default:\n      return null;\n  }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Focus-based Data Fetch in a Functional and Class Component (React Navigation, JavaScript + JSX)\nDESCRIPTION: Combines a reusable functional subcomponent (FetchUserData) leveraging useFocusEffect for handling data subscriptions with integration into a traditional React class component (Profile). Shows how to abstract focus-based business logic and pass callback props upward for updating parent state. Dependencies: React, @react-navigation/native, and API with a subscribe method. FetchUserData takes userId and onUpdate; Profile passes userId and handles the onUpdate event. Outputs are profile data updates and generalized code reuse.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-focus-effect.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FetchUserData({ userId, onUpdate }) {\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, onUpdate);\n\n      return () => unsubscribe();\n    }, [userId, onUpdate])\n  );\n\n  return null;\n}\n\n// ...\n\nclass Profile extends React.Component {\n  _handleUpdate = (user) => {\n    // Do something with user object\n  };\n\n  render() {\n    return (\n      <>\n        <FetchUserData\n          userId={this.props.userId}\n          onUpdate={this._handleUpdate}\n        />\n        {/* rest of your code */}\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Manually in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to explicitly set the theme for a React Navigation container using the `theme` prop. The `theme` prop accepts either 'light' or 'dark' and defaults to 'light' if not specified. This applies the chosen theme's styling to built-in navigators like stack, tab, and drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlet Navigation = createAppContainer(RootStack);\n\n// `theme` can be `light` or `dark`. It defaults to `light` if not specified.\nexport default () => <Navigation theme=\"light\" />;\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating with useLinkTo in a React Functional Component (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the `useLinkTo` hook within a React functional component. It retrieves the `linkTo` function and uses it in a button's `onPress` handler to navigate to a specific path ('/profile/jane'). This requires the `@react-navigation/native` package and is based on the `linking` configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-link-to.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useLinkTo } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  const linkTo = useLinkTo();\n\n  return (\n    <Button onPress={() => linkTo('/profile/jane')}>\n      Go to Jane's profile\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Animation with useTabAnimation Hook\nDESCRIPTION: Example of using the useTabAnimation hook to create animated tab indicators based on swipe position.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animated } from 'react-native';\nimport { useTabAnimation } from '@react-navigation/material-top-tabs';\n\nfunction MyView() {\n  const { position } = useTabAnimation();\n\n  return (\n    <Animated.View\n      style={{\n        width: '50%',\n        height: 2,\n        backgroundColor: 'tomato',\n        transform: [{ translateX: position }],\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blur Header Background in React Navigation (Dynamic)\nDESCRIPTION: This example shows how to create a translucent header with a blur effect using expo-blur in a dynamic navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\nimport { BlurView } from 'expo-blur';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen\n          name=\"Home\"\n          component={HomeScreen}\n          options={{\n            headerTransparent: true,\n            headerBackground: () => (\n              <BlurView\n                tint=\"dark\"\n                intensity={100}\n                style={StyleSheet.absoluteFill}\n              />\n            ),\n          }}\n        />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React Navigation Complete Navigation Example\nDESCRIPTION: Complete implementation of the Details screen with multiple navigation options including push, navigate, and goBack functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.push('Details')}\n        />\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Action: Replacing Screen with replace in React Navigation (JavaScript)\nDESCRIPTION: Illustrates replacing the current route with a new one, using the 'replace' method provided by stack navigators. Inputs: new route name, params, and optional action; output: current entry in stack replaced by a new route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.replace(routeName, params, action);\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Object with useNavigation Hook in React Navigation (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a functional React Native component that utilizes the useNavigation hook to access the navigation object and handle a back button press. Dependencies include React, react-native, and @react-navigation/native. The Button component receives an onPress function that calls navigation.goBack(); the component serves as a reusable back navigation UI element in navigation-enabled screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Button } from 'react-native';\\nimport { useNavigation } from '@react-navigation/native';\\n\\nfunction MyBackButton() {\\n  const navigation = useNavigation();\\n\\n  return (\\n    <Button\\n      title=\"Back\"\\n      onPress={() => {\\n        navigation.goBack();\\n      }}\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Universal Links in iOS AppDelegate using Objective-C\nDESCRIPTION: Adds the `application:continueUserActivity:restorationHandler:` method to `AppDelegate.m` in a bare React Native iOS project. This method is required to handle incoming Universal Links by forwarding the user activity to React Native's `RCTLinkingManager`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tab Label Component (JavaScript/React Native)\nDESCRIPTION: Provides an example of using the `label` option function to render a custom React Element as the tab label. The function receives properties like `route`, `labelText`, `focused`, and `color`, allowing for dynamic styling and content based on the tab's state. It defaults to `route.name` if `labelText` is not provided.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlabel: ({ route, labelText, focused, color }) => (\n  <Text style={{ color, margin: 8 }}>{labelText ?? route.name}</Text>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Navigation Event Listeners in Class Component\nDESCRIPTION: Example of implementing navigation event listeners in a React class component using lifecycle methods.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Profile extends React.Component {\n  componentDidMount() {\n    this._unsubscribe = navigation.addListener('focus', () => {\n      // do something\n    });\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n  }\n\n  render() {\n    // Content of the component\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in Static Navigation - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up a static navigation structure and utilize the useTheme hook to access theme colors for styling components. It uses createStaticNavigation from @react-navigation/native, along with stack and drawer navigators, to organize the app screens. Dependencies include react-navigation/native, react-navigation/drawer, react-navigation/native-stack, react-navigation/elements, and react-native. Key components access the theme to dynamically apply text and background colors. The Navigation component is initialized with the theme determined by the device color scheme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/themes.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\n// codeblock-focus-start\\nimport {\\n  useNavigation,\\n  createStaticNavigation,\\n  DefaultTheme,\\n  DarkTheme,\\n  useTheme,\\n} from '@react-navigation/native';\\nimport { View, Text, TouchableOpacity, useColorScheme } from 'react-native';\\n// codeblock-focus-end\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\nimport { createDrawerNavigator } from '@react-navigation/drawer';\\nimport { Button } from '@react-navigation/elements';\\n\\nfunction SettingsScreen({ route }) {\\n  const navigation = useNavigation();\\n  const { user } = route.params;\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Settings Screen</Text>\\n      <Text style={{ color: colors.text }}>\\n        userParam: {JSON.stringify(user)}\\n      </Text>\\n      <Button onPress={() => navigation.navigate('Profile')}>\\n        Go to Profile\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nfunction ProfileScreen() {\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Profile Screen</Text>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\n\\nfunction MyButton() {\\n  // highlight-next-line\\n  const { colors } = useTheme();\\n\\n  return (\\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\\n      <Text style={{ color: colors.text }}>Button!</Text>\\n    </TouchableOpacity>\\n  );\\n}\\n// codeblock-focus-end\\n\\nfunction HomeScreen() {\\n  const navigation = useNavigation();\\n  const { colors } = useTheme();\\n\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text style={{ color: colors.text }}>Home Screen</Text>\\n      <MyButton />\\n      <Button\\n        onPress={() =>\\n          navigation.navigate('Root', {\\n            screen: 'Settings',\\n            params: { user: 'jane' },\\n          })\\n        }\\n      >\\n        Go to Settings\\n      </Button>\\n    </View>\\n  );\\n}\\n\\nconst PanelStack = createNativeStackNavigator({\\n  screens: {\\n    Profile: ProfileScreen,\\n    Settings: SettingsScreen,\\n  },\\n});\\n\\nconst Drawer = createDrawerNavigator({\\n  initialRouteName: 'Panel',\\n  screens: {\\n    Home: HomeScreen,\\n    Panel: PanelStack,\\n  },\\n});\\n\\nconst Navigation = createStaticNavigation(Drawer);\\n\\nexport default function App() {\\n  const scheme = useColorScheme();\\n\\n  return <Navigation theme={scheme === 'dark' ? DarkTheme : DefaultTheme} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Root Navigation State via getRootState (React Navigation, JavaScript)\nDESCRIPTION: Fetches the complete navigation state tree from the root using getRootState on the navigation ref. The method returns the state object encompassing all stack/tree states managed by React Navigation. Returns undefined if no navigators are currently rendered.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst state = navigationRef.getRootState();\n```\n\n----------------------------------------\n\nTITLE: Listening to blur Events with useEffect (React Navigation, JavaScript)\nDESCRIPTION: Illustrates using React.useEffect to listen for blur events via navigation.addListener, useful for responding to screen unfocus separately from useFocusEffect's cleanup. Requires access to the navigation prop and @react-navigation/native. The dependency array includes navigation, and the setup returns the unsubscribe function for proper cleanup. The input is navigation; output is arbitrary work performed on the blur event, suitable for side-effects that must run only when the screen blurs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-focus-effect.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('blur', () => {\n    // Do something when the screen blurs\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Event Listener in React Navigation\nDESCRIPTION: Example of using a focus event listener in a React Navigation screen component. The code sets up and cleans up an event listener to handle screen focus events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/function-after-focusing-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\n\nfunction ProfileScreen({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // The screen is focused\n      // Call any action\n    });\n\n    // Return the function to unsubscribe from the event so it gets removed on unmount\n    return unsubscribe;\n  }, [navigation]);\n\n  return <View />;\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Passing Full Objects in Navigation Params - JavaScript\nDESCRIPTION: This snippet illustrates an anti-pattern in React Navigation by passing an entire user object via params when navigating to a 'Profile' screen. It serves as a caution to developers, explaining that this pattern leads to redundant data, potential bugs, and difficult-to-maintain navigation states. Dependencies are only the navigation object; the code can be invoked in any screen with an available navigation prop. The input is the user object, and the output is navigation with that object as param; the major limitation is that this should be avoided in favor of more maintainable approaches (such as passing only an ID).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Don't do this\\nnavigation.navigate('Profile', {\\n  user: {\\n    id: 'jane',\\n    firstName: 'Jane',\\n    lastName: 'Done',\\n    age: 25,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: iOS Universal Links Configuration in AppDelegate.m\nDESCRIPTION: This Objective-C code shows how to handle Universal Links in iOS by implementing the application:continueUserActivity:restorationHandler: method in AppDelegate.m. This allows the app to respond to links with HTTPS schemes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Route Prop in Class Components with useRoute Wrapper - React Navigation (JavaScript)\nDESCRIPTION: This code shows how to provide the route object to a class-based component by wrapping it in a functional component that uses the useRoute hook. The wrapper component retrieves the route via useRoute and passes it as a prop to the class-based MyText component, which accesses it through this.props. This pattern is necessary because hooks cannot be used directly in class components. The dependencies are React and @react-navigation/native, with route expected to be present in props. It enables class components to read navigation-related data without direct use of hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-route.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass MyText extends React.Component {\n  render() {\n    // Get it from props\n    const { route } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const route = useRoute();\n\n  return <MyText {...props} route={route} />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using navigationKey with Stack.Group in React Navigation\nDESCRIPTION: This snippet demonstrates how to use navigationKey with Stack.Group to remove multiple shared screens when the authentication state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  {isSignedIn ? (\n    <>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </>\n  ) : (\n    <>\n      <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n      <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    </>\n  )}\n  <Stack.Group navigationKey={isSignedIn ? 'user' : 'guest'}>\n    <Stack.Screen name=\"Help\" component={HelpScreen} />\n    <Stack.Screen name=\"About\" component={AboutScreen} />\n  </Stack.Group>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styling Header Title in React Navigation\nDESCRIPTION: Example of customizing the header title appearance with specific font properties and color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nheaderTitleStyle: {\n      color: 'blue',\n      fontSize: 22,\n      fontFamily: 'Georgia',\n      fontWeight: 300,\n    },\n```\n\n----------------------------------------\n\nTITLE: Integrating useNavigation Hook with Class Components - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable navigation in React Native class components by wrapping them with a functional component that injects the navigation object using the useNavigation hook. The MyBackButton class accesses navigation through props, while the wrapper function retrieves navigation via the hook and passes it as a prop. Requires React, React Native, and React Navigation; usage is constrained by the necessity for functional composition and prop passing. Input is any props given to the class, and output is the enhanced component with navigation capabilities.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyBackButton extends React.Component {\n  render() {\n    // Get it from props\n    const { navigation } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const navigation = useNavigation();\n\n  return <MyBackButton {...props} navigation={navigation} />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Attaching Navigation Event Listener in Functional Component (JavaScript/React)\nDESCRIPTION: Illustrates the standard practice for adding a navigation event listener (e.g., 'focus') within a React functional component using the `React.useEffect` hook. The listener is added when the component mounts or `navigation` changes, and the `unsubscribe` function returned by `addListener` is used as the cleanup function for `useEffect`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-events.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // do something\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation App Container with Props (JavaScript/JSX)\nDESCRIPTION: Shows how to pass configuration props to the `AppContainer` component in React Native. The `onNavigationStateChange` prop allows tracking navigation state changes by providing a callback function, and `uriPrefix` is used for handling deep linking by specifying the base URI path for the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/app-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<AppContainer\n  onNavigationStateChange={handleNavigationChange}\n  uriPrefix=\"/app\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Transition Spec for Bottom Tab in React Navigation\nDESCRIPTION: This code snippet illustrates configuring the `transitionSpec` option dynamically within a React Navigation Bottom Tab Navigator. It defines a custom transition animation using the 'timing' animation type with a specified duration and easing function, and applies it directly within the `<Tab.Screen>` component for the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    // highlight-start\n    transitionSpec: {\n      animation: 'timing',\n      config: {\n        duration: 150,\n        easing: Easing.inOut(Easing.ease),\n      },\n    },\n    // highlight-end\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook for Navigation Lifecycle Management\nDESCRIPTION: This example demonstrates how to use the useFocusEffect hook from React Navigation to perform side effects when a screen comes into focus and clean up when it goes out of focus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-lifecycle.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile() {\n  useFocusEffect(\n    React.useCallback(() => {\n      // Do something when the screen is focused\n\n      return () => {\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Header Component in React Navigation\nDESCRIPTION: This example illustrates how to replace the default React Navigation header with a custom React component using the `header` screen option. The `header` option accepts a function that receives screen-specific props (`navigation`, `route`, `options`, `back`) and returns a React Element. This function uses `getHeaderTitle` from `@react-navigation/elements` to get the title and conditionally renders a custom back button (`MyBackButton`) based on the `back` prop. The custom header (`MyHeader`) receives the title, button, and style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options, back }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        back ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Custom getPathFromState Implementation for React Navigation\nDESCRIPTION: Shows how to override the default state-to-path serialization logic in React Navigation's linking configuration. This is important for proper web support when using a custom getStateFromPath function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    getPathFromState(state, config) {\n      // Return a path string here\n      // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Customizing Deep Link Handling with React Navigation - JavaScript\nDESCRIPTION: This JavaScript snippet defines a custom linking configuration for React Navigation, enabling deep link support from both the native Linking API and third-party services like Firebase Dynamic Links. It configures custom getInitialURL and subscribe functions to retrieve and listen for incoming links from multiple sources, merging them into a unified handler. Dependencies include React Navigation, the JavaScript Linking module (from React Native), and a third-party SDK such as Firebase Dynamic Links. Inputs include incoming URLs; outputs are event notifications for navigation. Limitations: exact third-party integration logic varies and must be adapted based on provider API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['myapp://', 'https://myapp.com'],\n\n  // Custom function to get the URL which was used to open the app\n  async getInitialURL() {\n    // First, you would need to get the initial URL from your third-party integration\n    // The exact usage depend on the third-party SDK you use\n    // For example, to get the initial URL for Firebase Dynamic Links:\n    const { isAvailable } = utils().playServicesAvailability;\n\n    if (isAvailable) {\n      const initialLink = await dynamicLinks().getInitialLink();\n\n      if (initialLink) {\n        return initialLink.url;\n      }\n    }\n\n    // As a fallback, you may want to do the default deep link handling\n    const url = await Linking.getInitialURL();\n\n    return url;\n  },\n\n  // Custom function to subscribe to incoming links\n  subscribe(listener) {\n    // Listen to incoming links from Firebase Dynamic Links\n    const unsubscribeFirebase = dynamicLinks().onLink(({ url }) => {\n      listener(url);\n    });\n\n    // Listen to incoming links from deep linking\n    const linkingSubscription = Linking.addEventListener('url', ({ url }) => {\n      listener(url);\n    });\n\n    return () => {\n      // Clean up the event listeners\n      unsubscribeFirebase();\n      linkingSubscription.remove();\n    };\n  },\n\n  config: {\n    // Deep link configuration\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Tab Using jumpTo - React Navigation - JavaScript\nDESCRIPTION: This example illustrates the use of the jumpTo method from the React Navigation Tab Navigator API to programmatically navigate to a specified tab. It takes the route name ('Profile') and optional route parameters as arguments. Depends on a navigation prop with the jumpTo method enabled. Inputs are the tab name (string) and params (object); there is no explicit output other than triggering navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.jumpTo('Profile', { name: 'Micha\\u015b' });\n```\n\n----------------------------------------\n\nTITLE: Conditionally Navigating Back using canGoBack\nDESCRIPTION: Shows how to use `navigation.canGoBack()` to check if navigation history exists before attempting to navigate back using `navigation.goBack()`. This prevents potential errors when `goBack` is called on the initial screen of a stack. This check is primarily intended for use within callbacks or event handlers, not for conditional rendering logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nif (navigation.canGoBack()) {\n  navigation.goBack();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Native Stack Navigator with Static Configuration\nDESCRIPTION: Demonstrates setting up a simple React Navigation stack with a single HomeScreen using the static configuration approach with createStaticNavigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// In App.js in a new project\n\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Custom Header Height in Stack Navigator - React Navigation (JavaScript)\nDESCRIPTION: Shows how to specify a custom height for a stack header by setting headerStyle with the desired height property. This helps avoid layout glitches when the custom header height differs from the default. No dependencies beyond React Navigation are required; the style is passed as a prop and should be used by the custom MyHeader component if needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Long Press Events in React Navigation\nDESCRIPTION: Implementation of tab long press event handling in React Navigation. Shows how to set up an event listener for extended tab press interactions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabLongPress', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Exact Path Matching in React Navigation\nDESCRIPTION: This snippet shows how to use the 'exact' property to override relative path matching and enable exact matching for a specific screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'feed',\n      screens: {\n        Profile: {\n          path: 'users/:id',\n          exact: true,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Reorganizing Navigation Structure to Hide Tab Bar on Specific Screens\nDESCRIPTION: This snippet demonstrates how to restructure the navigation to hide the tab bar on Profile and Settings screens. It nests the tab navigator inside the first screen of the stack navigator, allowing the tab bar to be hidden when navigating to screens outside the tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hiding-tabbar-in-screens.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n      <Tab.Screen name=\"Notifications\" component={Notifications} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeTabs} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation for Deep Linking in Expo\nDESCRIPTION: Sets up React Navigation to use the app's scheme for parsing incoming deep links in an Expo project. It uses the Linking.createURL function to handle differences between client and standalone apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n\nconst prefix = Linking.createURL('/');\n\nfunction App() {\n  const linking = {\n    prefixes: [prefix],\n  };\n\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsFocused Hook in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the useIsFocused hook from @react-navigation/native to conditionally render content based on whether the current screen is focused. Requires @react-navigation/native as a dependency. The sample Profile function component obtains the focus state and displays different text accordingly. This setup triggers a re-render on focus change, which may impact performance for heavyweight components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-is-focused.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useIsFocused } from '@react-navigation/native';\n\n// ...\n\nfunction Profile() {\n  const isFocused = useIsFocused();\n\n  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setParams with Dynamic Navigation in React Native\nDESCRIPTION: This example shows how to implement the setParams Common Action in a dynamic React Navigation configuration. It includes a complete navigation setup with Home and Profile screens and demonstrates updating route parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  CommonActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button onPress={() => navigation.dispatch(CommonActions.goBack())}>\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Catch-All Route Configuration in React Navigation (JS)\nDESCRIPTION: This code snippet shows how to define a nested catch-all route.  This configuration provides finer-grained control over error handling, allowing you to display different error screens for different sections of your app. In this example, any invalid paths under the `Settings` route will be handled by the `InvalidSettings` route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: {\n          path: 'settings',\n          screens: {\n            InvalidSettings: '*',\n          },\n        },\n      },\n    },\n    NotFound: '*',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator ID - Static API - JavaScript\nDESCRIPTION: Sets an optional unique 'id' for the navigator using the static object-style API, enabling parent-child navigator referencing via navigation.getParent. The id is specified alongside the screens map. Prerequisites include HomeScreen and ProfileScreen components, and use of React Navigation's native stack creator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\\n  // highlight-next-line\\n  id: 'RootStack',\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Navigation State Example for TabView - JavaScript Object\nDESCRIPTION: Presents a sample navigation state object used by the TabView component, which maps route keys, titles, and active tab index. To be used as input for the navigationState prop. Consists of an index and a routes array, each with at minimum key and title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1,\n  routes: [\n    { key: 'music', title: 'Music' },\n    { key: 'albums', title: 'Albums' },\n    { key: 'recents', title: 'Recents' },\n    { key: 'purchased', title: 'Purchased' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Search Bar in React Navigation\nDESCRIPTION: Example of how to configure the header search bar options in a React component using the useLayoutEffect hook. This demonstrates dynamic configuration of the navigation header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      // search bar options\n    },\n  });\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Tab Bar Position, Variant, and Label Position Configuration\nDESCRIPTION: This code snippet shows how to configure `tabBarPosition`, `tabBarVariant`, and `tabBarLabelPosition` options. When screen is large, tab bar will be positioned on the left and styled as a material sidebar with the label below the icon, otherwise it is displayed as a default bottom tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tabs = createBottomTabNavigator({\n  screenOptions: {\n    tabBarPosition: isLargeScreen ? 'left' ? 'bottom',\n    tabBarVariant: isLargeScreen ? 'material' : 'uikit',\n    tabBarLabelPosition: 'below-icon',\n  },\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Closing the Drawer in React Navigation\nDESCRIPTION: This snippet shows how to programmatically close the drawer pane using the `navigation.closeDrawer()` helper method provided by the Drawer Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nnavigation.closeDrawer();\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Navigation State via initialState Prop (React Navigation, JSX)\nDESCRIPTION: Demonstrates setting the initial navigation state for the navigator by passing an initialState prop to NavigationContainer. Useful for deep linking, state restoration, or state persistence scenarios. When provided, this value overrides the initial state from linking or URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer initialState={initialState}>\\n  {/* ... */}\\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Lifecycle with Static Configuration in React Navigation\nDESCRIPTION: Example demonstrating screen lifecycle behavior using createStaticNavigation with stack and tab navigators. The code shows how screens remain mounted when navigated away from, with console logs tracking mount/unmount events in each screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction SettingsScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    console.log('SettingsScreen mounted');\n\n    return () => console.log('SettingsScreen unmounted');\n  }, []);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Settings Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    console.log('ProfileScreen mounted');\n\n    return () => console.log('ProfileScreen unmounted');\n  }, []);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    console.log('HomeScreen mounted');\n\n    return () => console.log('HomeScreen unmounted');\n  }, []);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    console.log('DetailsScreen mounted');\n\n    return () => console.log('DetailsScreen unmounted');\n  }, []);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button onPress={() => navigation.push('Details')}>\n        Go to Details... again\n      </Button>\n    </View>\n  );\n}\n\nconst SettingsStack = createNativeStackNavigator({\n  screens: {\n    Settings: SettingsScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst HomeStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst MyTabs = createBottomTabNavigator({\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    First: SettingsStack,\n    Second: HomeStack,\n  },\n});\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Tabs Programmatically (JavaScript/React Native)\nDESCRIPTION: Illustrates how to trigger navigation between tabs from within screen components. It uses the `navigation.navigate()` method, accessible via props in screen components, to switch to a specified tab ('Settings' or 'Home') when a button is pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        title=\"Go to Settings\"\n        onPress={() => navigation.navigate('Settings')}\n      />\n    </View>\n  );\n}\n\nfunction SettingsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for a Static Nested Navigator\nDESCRIPTION: This snippet shows how to generate TypeScript types for a statically defined navigator (`FeedTabs`) using `StaticParamList`. The generated type (`FeedTabsParamList`) is then used with `NavigatorScreenParams` to define the type for the 'Feed' screen within the dynamic `RootStackParamList`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  StaticParamList,\n  NavigatorScreenParams,\n} from '@react-navigation/native';\n\n// highlight-next-line\ntype FeedTabsParamList = StaticParamList<typeof FeedTabs>;\n\ntype RootStackParamList = {\n  Home: undefined;\n  // highlight-next-line\n  Feed: NavigatorScreenParams<FeedTabsParamList>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Component for a Static Navigator in JavaScript\nDESCRIPTION: This snippet demonstrates using the `createComponentForStaticNavigation` helper function from `@react-navigation/native`. It wraps the statically defined `FeedTabs` navigator to create a standard React component (`FeedScreen`) that can be used within a dynamically defined parent navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { createComponentForStaticNavigation } from '@react-navigation/native';\n\n// highlight-next-line\nconst FeedScreen = createComponentForStaticNavigation(FeedTabs, 'Feed');\n```\n\n----------------------------------------\n\nTITLE: Navigating Back with CommonActions in React Navigation\nDESCRIPTION: Demonstrates using CommonActions.goBack() to navigate back from a specific route. This example includes source and target parameters to specify the exact navigation behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nnavigation.dispatch({\n  ...CommonActions.goBack(),\n  source: route.key,\n  target: route?.params?.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating useRoute with Class Components - React Navigation - JavaScript\nDESCRIPTION: This snippet illustrates a pattern for integrating the useRoute hook with traditional class components in React Native by wrapping the class in a functional component. The wrapper extracts the route using the useRoute hook and passes it as a prop to the class component, preserving compatibility with navigation context. Requires React Navigation and React Native. Key parameters include the incoming props and the dynamically injected route prop. This enables class components to access navigation route data indirectly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-route.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass MyText extends React.Component {\\n  render() {\\n    // Get it from props\\n    const { route } = this.props;\\n  }\\n}\\n\\n// Wrap and export\\nexport default function (props) {\\n  const route = useRoute();\\n\\n  return <MyText {...props} route={route} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Search Bar Text Change in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update component state in response to text changes in the header search bar using React Navigation's options. It uses React's useState and useLayoutEffect hooks to set a handler for onChangeText, updating the 'search' state when the text field changes. Dependencies: React (useState, useLayoutEffect), React Navigation stack navigation, and a screen navigated with 'navigation' prop. Expects to be used inside a functional component; assumes navigation object is available via props or context. Receives text changes via event.nativeEvent.text and updates local state accordingly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst [search, setSearch] = React.useState('');\\n\\nReact.useLayoutEffect(() => {\\n  navigation.setOptions({\\n    headerSearchBarOptions: {\\n      onChangeText: (event) => setSearch(event.nativeEvent.text),\\n    },\\n  });\\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Configuring onStateChange in Navigation Container (React Navigation)\nDESCRIPTION: Examples of setting the onStateChange prop in both static and dynamic Navigation configurations. This function is called every time the navigation state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Navigation\n  // highlight-next-line\n  onStateChange={(state) => console.log('New state is', state)}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  // highlight-next-line\n  onStateChange={(state) => console.log('New state is', state)}\n>\n  {/* ... */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Deferring Side-Effects with InteractionManager in useFocusEffect (React Navigation, JavaScript)\nDESCRIPTION: Demonstrates deferring expensive side-effects until after animation transitions using InteractionManager.runAfterInteractions within useFocusEffect. This approach avoids UI or performance degradation during animation. Requires react-native's InteractionManager and @react-navigation/native. There are no dynamic parameters in this minimal example; it is suitable for UI updates or computations that should wait until after navigation transitions are complete. Returns a cleanup function that cancels the interaction task, preventing memory leaks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-focus-effect.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseFocusEffect(\n  React.useCallback(() => {\n    const task = InteractionManager.runAfterInteractions(() => {\n      // Expensive task\n    });\n\n    return () => task.cancel();\n  }, [])\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Route via getCurrentRoute (React Navigation, JavaScript)\nDESCRIPTION: Fetches the route object for the currently focused screen using getCurrentRoute on the navigation ref. Returns undefined if there are no navigators currently rendered. This is commonly used for analytics or conditional rendering based on the user's current location in the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst route = navigationRef.getCurrentRoute();\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Checked Custom Tab Navigator in React Navigation\nDESCRIPTION: A comprehensive TypeScript example demonstrating how to create a type-safe custom tab navigator with properly defined props, screen options, and event types. It includes the complete implementation of the navigator component with tab bar rendering, tab switching logic, and proper type definitions for navigation state and events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  Text,\n  View,\n  Pressable,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  NavigationHelpersContext,\n  ParamListBase,\n  TabActionHelpers,\n  TabActions,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\n\n// Props accepted by the view\ntype TabNavigationConfig = {\n  tabBarStyle: StyleProp<ViewStyle>;\n  contentStyle: StyleProp<ViewStyle>;\n};\n\n// Supported screen options\ntype TabNavigationOptions = {\n  title?: string;\n};\n\n// Map of event name and the type of data (in event.data)\n//\n// canPreventDefault: true adds the defaultPrevented property to the\n// emitted events.\ntype TabNavigationEventMap = {\n  tabPress: {\n    data: { isAlreadyFocused: boolean };\n    canPreventDefault: true;\n  };\n};\n\n// The props accepted by the component is a combination of 3 things\ntype Props = DefaultNavigatorOptions<TabNavigationOptions> &\n  TabRouterOptions &\n  TabNavigationConfig;\n\nfunction TabNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  tabBarStyle,\n  contentStyle,\n}: Props) {\n  const { state, navigation, descriptors } = useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    TabNavigationOptions,\n    TabNavigationEventMap\n  >(TabRouter, {\n    children,\n    screenOptions,\n    initialRouteName,\n  });\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\n        {state.routes.map((route) => (\n          <Pressable\n            key={route.key}\n            onPress={() => {\n              const event = navigation.emit({\n                type: 'tabPress',\n                target: route.key,\n                canPreventDefault: true,\n                data: {\n                  isAlreadyFocused: route.key === state.routes[state.index].key,\n                },\n              });\n\n              if (!event.defaultPrevented) {\n                navigation.dispatch({\n                  ...TabActions.jumpTo(route.name),\n                  target: state.key,\n                });\n              }\n            }}\n            style={{ flex: 1 }}\n          >\n            <Text>{descriptors[route.key].options.title || route.name}</Text>\n          </Pressable>\n        ))}\n      </View>\n      <View style={[{ flex: 1 }, contentStyle]}>\n        {state.routes.map((route, i) => {\n          return (\n            <View\n              key={route.key}\n              style={[\n                StyleSheet.absoluteFill,\n                { display: i === state.index ? 'flex' : 'none' },\n              ]}\n            >\n              {descriptors[route.key].render()}\n            </View>\n          );\n        })}\n      </View>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  TabNavigationOptions,\n  TabNavigationEventMap,\n  typeof TabNavigator\n>(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Integrating Header in a Dynamic Native Stack Navigator\nDESCRIPTION: Illustrates how to use the `Header` component from `@react-navigation/elements` as a custom header within a dynamically configured Native Stack Navigator (`createNativeStackNavigator` with `Stack.Navigator` and `Stack.Screen`). It uses the `header` screen option within `screenOptions`, passing necessary props like `options`, `route`, and `back`, and uses `getHeaderTitle` to determine the title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, Button } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport { Header, getHeaderTitle } from '@react-navigation/elements';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        header: ({ options, route, back }) => (\n          <Header\n            {...options}\n            back={back}\n            title={getHeaderTitle(options, route.name)}\n          />\n        ),\n      }}\n    >\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Stack Options Based on Child Tab Navigator using setOptions\nDESCRIPTION: This example demonstrates how to dynamically update the headerTitle of a parent stack navigator based on the active tab in a child tab navigator using useLayoutEffect and navigation.setOptions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeTabs({ navigation, route }) {\n  React.useLayoutEffect(() => {\n    navigation.setOptions({ headerTitle: getHeaderTitle(route) });\n  }, [navigation, route]);\n\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      <Tab.Screen name=\"Account\" component={AccountScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Material Top Tab Navigator Implementation\nDESCRIPTION: Full example showing implementation of Material Top Tab Navigator with multiple screens, custom options, and styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst Tab = createMaterialTopTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      tabBarOptions={{\n        activeTintColor: '#e91e63',\n        labelStyle: { fontSize: 12 },\n        style: { backgroundColor: 'powderblue' },\n      }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{ tabBarLabel: 'Home' }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{ tabBarLabel: 'Updates' }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{ tabBarLabel: 'Profile' }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default tabPress Event Handling - React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useEffect hook to attach an event listener for the 'tabPress' event in a React Navigation context. By calling e.preventDefault(), the default tab switching behavior is inhibited, allowing manual control over navigation. Requires a valid navigation prop with addListener; inputs include the event name to subscribe and a callback; outputs involve side effects managed in the handler. The unsubscribe function is returned for proper effect cleanup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tab Navigation in React Native\nDESCRIPTION: A minimal example of implementing tab-based navigation in React Native using React Navigation. This snippet creates a simple app with two tabs (Home and Settings) using the createBottomTabNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Props to Screens in React Navigation\nDESCRIPTION: Demonstrates how to pass extra props to a screen component in React Navigation using a render callback. This method allows for passing custom data to screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hello-react-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen name=\"Home\">\n  {(props) => <HomeScreen {...props} extraData={someData} />}\n</Stack.Screen>\n```\n\n----------------------------------------\n\nTITLE: Screen Layout Configuration\nDESCRIPTION: Demonstrates how to implement custom layouts for screens with error boundary and suspense\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"MyScreen\"\n  component={MyScreenComponent}\n  layout={({ children }) => (\n    <ErrorBoundary>\n      <React.Suspense\n        fallback={\n          <View style={styles.fallback}>\n            <Text style={styles.text}>Loading‚Ä¶</Text>\n          </View>\n        }\n      >\n        {children}\n      </React.Suspense>\n    </ErrorBoundary>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Bottom Tab Animation in React Navigation\nDESCRIPTION: This code configures a bottom tab navigator with a fade animation for screen transitions using the dynamic navigation API. The `createBottomTabNavigator` function is used to create the tab navigator, and the `animation` option within the `screenOptions` of the `Tab.Navigator` component is set to `'fade'`. Requires `@react-navigation/native` and `@react-navigation/bottom-tabs`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, Easing } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Profile!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction RootTabs() {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        // highlight-start\n        animation: 'fade',\n        // highlight-end\n      }}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Master-Detail Layout with Responsive Drawer\nDESCRIPTION: Implementation of a master-detail layout pattern using drawer navigator with responsive behavior. Combines openByDefault, drawerType, and drawerStyle props to create different layouts for different screen sizes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWindowDimensions } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  const dimensions = useWindowDimensions();\n\n  const isLargeScreen = dimensions.width >= 768;\n\n  return (\n    <Drawer.Navigator\n      openByDefault\n      drawerType={isLargeScreen ? 'permanent' : 'back'}\n      drawerStyle={isLargeScreen ? null : { width: '100%' }}\n      overlayColor=\"transparent\"\n    >\n      {/* Screens */}\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReduxDevToolsExtension with Static Navigation - React Navigation - JavaScript\nDESCRIPTION: Shows how to integrate React Navigation with the Redux DevTools Extension by invoking useReduxDevToolsExtension in a static navigation context. Passes a navigationRef to the hook, enabling state changes in navigation to be inspected via Redux DevTools. Dependencies: @react-navigation/native and @react-navigation/devtools (Redux DevTools browser extension is optional but recommended). For development use only; useful for debugging navigation state and actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/devtools.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  createStaticNavigation,\\n  useNavigationContainerRef,\\n} from '@react-navigation/native';\\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\\n\\n/* content */\\n\\nexport default function App() {\\n  const navigationRef = useNavigationContainerRef();\\n\\n  useReduxDevToolsExtension(navigationRef);\\n\\n  return <Navigation ref={navigationRef} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Structure with Bash Notation\nDESCRIPTION: A visual representation of the navigation structure using bash-like tree notation, showing the hierarchy of navigators and screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nBottomTabs\n‚îú‚îÄ‚îÄ Stack (HomeStack)\n‚îÇ   ‚îú‚îÄ‚îÄ Home\n‚îÇ   ‚îî‚îÄ‚îÄ Profile\n‚îî‚îÄ‚îÄ Settings\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigator Component in React Navigation\nDESCRIPTION: Creates a Stack navigator component which contains Screen and Navigator properties that can be used to define navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createStackNavigator(); // Stack contains Screen & Navigator properties\n```\n\n----------------------------------------\n\nTITLE: Using getId for Unique Screen Identification\nDESCRIPTION: Example of using the getId callback to provide a unique identifier for a screen based on route parameters, useful for preventing duplicate screen instances.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  getId={({ params }) => params.userId}\n/>\n```\n\n----------------------------------------\n\nTITLE: Static vs Direct Navigation Options\nDESCRIPTION: Shows equivalent ways of setting navigation options either as a static class property or directly on the component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends React.Component {\n  static navigationOptions = {\n    title: 'Hello!',\n  };\n  // etc.\n}\n\nclass MyOtherComponent extends React.Component {\n  // etc.\n}\n\nMyOtherComponent.navigationOptions = {\n  title: 'Hello!',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options with a Function\nDESCRIPTION: Example of how to set screen options using a function that receives route and navigation props, allowing for dynamic configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={({ route, navigation }) => ({\n    title: route.params.userId,\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Marking Parameters as Optional (JS)\nDESCRIPTION: This code demonstrates how to mark a parameter as optional in the path configuration using the `?` suffix.  This allows the route to match even if the parameter is not present in the URL. This configuration also includes custom parsing and stringifying logic for the `id` parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Profile: {\n      path: 'user/:id/:section?',\n      parse: {\n        id: (id) => `user-${id}`,\n      },\n      stringify: {\n        id: (id) => id.replace(/^user-/, ''),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Intercepting Browser Tab Closure with 'beforeunload' Event in React\nDESCRIPTION: Shows how to intercept the browser's `beforeunload` event using `React.useEffect`. It adds an event listener to the `window` object. When the user attempts to close the tab or navigate away, the listener prevents the default action by calling `event.preventDefault()` and setting `event.returnValue` to `true`, which triggers a standard browser confirmation prompt. The listener is removed during component cleanup. Requires a browser environment and `useEffect` from `React`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/preventing-going-back.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const onBeforeUnload = (event) => {\n    // Prevent the user from leaving the page\n    event.preventDefault();\n    event.returnValue = true;\n  };\n\n  window.addEventListener('beforeunload', onBeforeUnload);\n\n  return () => {\n    window.removeEventListener('beforeunload', onBeforeUnload);\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Declaring Multilevel Tab and Stack Navigators in React Navigation (JSX)\nDESCRIPTION: This snippet creates a main app container with nested tab and stack navigators using react-navigation. It demonstrates managing multiple stacks within tabs, each with their own set of screens (e.g., Settings and Profile under First tab, Home and Details under Second tab). Requires dependencies: react-navigation/native, react-navigation/stack, react-navigation/bottom-tabs, and defined screen components (SettingsScreen, ProfileScreen, HomeScreen, DetailsScreen). The expected input is no parameters (root App component); the app renders navigation structure maintaining mounted screens across tab switches and preserving navigator states. Constraints include proper setup of navigation dependencies and correct screen component references.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"First\">\n          {() => (\n            <SettingsStack.Navigator>\n              <SettingsStack.Screen\n                name=\"Settings\"\n                component={SettingsScreen}\n              />\n              <SettingsStack.Screen name=\"Profile\" component={ProfileScreen} />\n            </SettingsStack.Navigator>\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Second\">\n          {() => (\n            <HomeStack.Navigator>\n              <HomeStack.Screen name=\"Home\" component={HomeScreen} />\n              <HomeStack.Screen name=\"Details\" component={DetailsScreen} />\n            </HomeStack.Navigator>\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Params for Screens with Nested Navigators in TypeScript\nDESCRIPTION: Demonstrates using `NavigatorScreenParams` from `@react-navigation/native` to type the params for a route ('Home') that renders a nested navigator (whose params are defined in `StackParamList`). This is necessary for type checking navigation actions to nested screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { NavigatorScreenParams } from '@react-navigation/native';\n\ntype TabParamList = {\n  Home: NavigatorScreenParams<StackParamList>;\n  Profile: { userId: string };\n};\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer Ref with createRef (TypeScript)\nDESCRIPTION: This example demonstrates how to annotate the ref object for `NavigationContainer` when using `React.createRef`.  It allows type-checking for navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef =\n  React.createRef<NavigationContainerRef<RootStackParamList>>();\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Screen in Drawer Navigator with Params\nDESCRIPTION: This snippet shows how to navigate to a specific existing screen within the drawer navigator using the `jumpTo` helper method. It accepts the target route `name` and an optional `params` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nnavigation.jumpTo('Profile', { owner: 'Satya' });\n```\n\n----------------------------------------\n\nTITLE: Combining Navigation Props with CompositeNavigationProp (TypeScript)\nDESCRIPTION: This code snippet shows how to use `CompositeNavigationProp` to annotate the `navigation` prop separately.  It takes the same parameters as `CompositeScreenProps` and achieves a similar result.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CompositeNavigationProp } from '@react-navigation/native';\nimport type { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';\nimport type { StackNavigationProp } from '@react-navigation/stack';\n\ntype ProfileScreenNavigationProp = CompositeNavigationProp<\n  BottomTabNavigationProp<TabParamList, 'Profile'>,\n  StackNavigationProp<StackParamList>\n>;\n```\n\n----------------------------------------\n\nTITLE: Using navigationKey for Shared Screens in React Navigation\nDESCRIPTION: This snippet shows how to use the navigationKey prop to remove shared screens when the authentication state changes, ensuring proper navigation flow.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  {isSignedIn ? (\n    <>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </>\n  ) : (\n    <>\n      <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n      <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    </>\n  )}\n  <Stack.Screen\n    navigationKey={isSignedIn ? 'user' : 'guest'}\n    name=\"Help\"\n    component={HelpScreen}\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Navigator with Static Screen Object - React Navigation - JavaScript\nDESCRIPTION: Defines a native stack navigator by passing a configuration object containing information about initialRouteName and registered screens. Screens are specified either as component references (e.g., DetailsScreen) or as objects with a 'screen' property, which allows adding further customization like options. No external dependencies are required other than react-navigation and a stack navigator package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\\n  initialRouteName: 'Home',\\n  screens: {\\n    Home: {\\n      // highlight-next-line\\n      screen: HomeScreen,\\n    },\\n    Details: DetailsScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Closing a Drawer with DrawerActions in React Navigation\nDESCRIPTION: Code example showing how to close a drawer pane in a drawer-based navigator using the closeDrawer action from DrawerActions. This requires importing DrawerActions from @react-navigation/native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nnavigation.dispatch(DrawerActions.closeDrawer());\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene Style Interpolator for Fading Tab Transitions\nDESCRIPTION: This code snippet demonstrates how to configure a scene style interpolator to create a fade effect for tab transitions in React Navigation. It uses `current.progress.interpolate` to map the progress of the transition to an opacity value, creating a fade-in/fade-out effect. The resulting style is applied to the container view wrapping the screen content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current }) => ({\n  sceneStyle: {\n    opacity: current.progress.interpolate({\n      inputRange: [-1, 0, 1],\n      outputRange: [0, 1, 0],\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Navigation with Icons in React Native\nDESCRIPTION: Example of customizing the appearance of tab navigation by adding icons and custom colors. Uses the screenOptions prop to define icons based on the route and focused state, and tabBarOptions to customize colors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n// (...)\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === 'Home') {\n              iconName = focused\n                ? 'ios-information-circle'\n                : 'ios-information-circle-outline';\n            } else if (route.name === 'Settings') {\n              iconName = focused ? 'ios-list-box' : 'ios-list';\n            }\n\n            // You can return any component that you like here!\n            return <Ionicons name={iconName} size={size} color={color} />;\n          },\n        })}\n        tabBarOptions={{\n          activeTintColor: 'tomato',\n          inactiveTintColor: 'gray',\n        }}\n      >\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Icons using screenOptions in React Navigation (Static)\nDESCRIPTION: This snippet demonstrates how to use a function with 'screenOptions' to dynamically set tab icons based on the route name. It uses MaterialCommunityIcons from @expo/vector-icons to display icons for each tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigator({\n  screenOptions: ({ route }) => ({\n    tabBarIcon: ({ color, size }) => {\n      const icons = {\n        Home: 'home',\n        Profile: 'account',\n      };\n\n      return (\n        <MaterialCommunityIcons\n          name={icons[route.name]}\n          color={color}\n          size={size}\n        />\n      );\n    },\n  }),\n  screens: {\n    Home: EmptyScreen,\n    Profile: EmptyScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator with NavigationOptions in React Navigation\nDESCRIPTION: Shows how to use navigationOptions to configure the navigator itself, such as setting tab bar labels in a bottom tab navigator in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    Feed: ExampleScreen,\n    Profile: ExampleScreen,\n  },\n  {\n    defaultNavigationOptions: {\n      headerTintColor: '#fff',\n      headerStyle: {\n        backgroundColor: '#000',\n      },\n    },\n    navigationOptions: {\n      tabBarLabel: 'Home!',\n    },\n  }\n);\n\nconst Tabs = createBottomTabNavigator({ Home });\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Prop in a Custom Tab Bar\nDESCRIPTION: Shows how to use the `navigation` prop, passed to a custom `tabBar` component, to perform navigation actions, such as navigating to another screen ('SomeScreen'). This is necessary because the `useNavigation` hook cannot be used directly within the `tabBar` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction MyTabBar({ navigation }) {\n  return (\n    <Button\n      title=\"Go somewhere\"\n      onPress={() => {\n        // Navigate using the `navigation` prop that you received\n        navigation.navigate('SomeScreen');\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for Stack Groups with Dynamic Configuration\nDESCRIPTION: Example showing how to apply screen options to a group of screens using dynamic configuration with the Stack.Group component. Options can be defined as an object with presentation settings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Group\n  screenOptions={{\n    presentation: 'modal',\n  }}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hooks with useNavigationState (Dynamic Config) in React Native\nDESCRIPTION: A full React Native example using dynamic navigation (`NavigationContainer` and `createNativeStackNavigator`). Similar to the static example, it shows custom hooks (`useIsFirstRouteInParent`, `usePreviousRouteName`) using `useNavigationState` to reactively access and derive data from the navigation state for display in screen components. Depends on React, React Native, `@react-navigation/native`, `@react-navigation/elements`, and `@react-navigation/native-stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation-state.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport Button from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  useRoute,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n// codeblock-focus-start\nimport { useNavigationState } from '@react-navigation/native';\n\nfunction useIsFirstRouteInParent() {\n  const route = useRoute();\n  const isFirstRouteInParent = useNavigationState(\n    (state) => state.routes[0].key === route.key\n  );\n\n  return isFirstRouteInParent;\n}\n\nfunction usePreviousRouteName() {\n  return useNavigationState((state) =>\n    state.routes[state.index - 1]?.name\n      ? state.routes[state.index - 1].name\n      : 'None'\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen({ navigation }) {\n  const isFirstRoute = useIsFirstRouteInParent();\n  const previousRouteName = usePreviousRouteName();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>\n      <Text>Previous route name: {previousRouteName}</Text>\n\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ navigation }) {\n  const isFirstRoute = useIsFirstRouteInParent();\n  const previousRouteName = usePreviousRouteName();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>\n      <Text>Previous route name: {previousRouteName}</Text>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nfunction SettingsScreen({ navigation }) {\n  const isFirstRoute = useIsFirstRouteInParent();\n  const previousRouteName = usePreviousRouteName();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>\n      <Text>Previous route name: {previousRouteName}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using initialState Prop with NavigationContainer\nDESCRIPTION: Example showing how to provide an initial navigation state to the NavigationContainer, which is useful for state persistence and deep linking scenarios.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  onStateChange={(state) => console.log('New state is', state)}\n  initialState={initialState}\n>\n  {/* ... */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Screens with React.lazy in React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates lazy loading of navigation screens in a React Navigation stack using React.lazy and Suspense to reduce bundle size. It shows how to define navigator screens with components loaded asynchronously, improving initial page load performance on the web. Dependencies include React (with Suspense and lazy), and a navigation library providing createNativeStackNavigator; the fallback prop in Suspense manages the loading state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/web-support.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Suspense, lazy } from 'react';\n\nconst MyStack = createNativeStackNavigator({\n  screenLayout: ({ children }) => (\n    <Suspense fallback={<Loading />}>{children}</Suspense>\n  ),\n  screens: {\n    Home: {\n      component: lazy(() => import('./HomeScreen')),\n    },\n    Profile: {\n      component: lazy(() => import('./ProfileScreen')),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Screen Focus State in React Navigation - JavaScript\nDESCRIPTION: This snippet shows a functional React component using the useIsFocused hook from @react-navigation/native to determine if the navigation screen is currently focused. The isFocused variable updates on focus state changes, causing the component to re-render and update its displayed content accordingly. Required dependencies: React, @react-navigation/native, and React Native's Text component; input is navigation state, output is a text label ('focused' or 'unfocused').\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-is-focused.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useIsFocused } from '@react-navigation/native';\n\n// ...\n\nfunction Profile() {\n  const isFocused = useIsFocused();\n\n  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listeners to Screen Component in React Navigation\nDESCRIPTION: This snippet demonstrates how to add listeners to a Screen component using the 'listeners' prop. It shows how to prevent the default action of a tab press event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigatior({\n  screens: {\n    Chat: {\n      screen: Chat,\n      listeners: {\n        tabPress: (e) => {\n          // Prevent default action\n          e.preventDefault;\n        },\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen\n  name=\"Chat\"\n  component={Chat}\n  listeners={{\n    tabPress: (e) => {\n      // Prevent default action\n      e.preventDefault();\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigating to a New Screen using React Navigation `navigate`\nDESCRIPTION: This React Native code demonstrates navigating from `HomeScreen` to `DetailsScreen` using React Navigation. It utilizes the `useNavigation` hook to get the `navigation` object and calls `navigation.navigate('Details')` within a `Button`'s `onPress` handler. The example assumes a stack navigator setup with 'Home' and 'Details' routes defined.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// codeblock-focus-start\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  // highlight-next-line\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      // highlight-start\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n      // highlight-end\n    </View>\n  );\n}\n\n// ... other code from the previous section\n// codeblock-focus-end\n\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Popping the Current Screen from the Stack Using navigation.pop (JavaScript)\nDESCRIPTION: Demonstrates popping the top screen off the navigation stack, navigating to the previous screen. Requires the navigation object from react-navigation. Optionally accepts a count parameter to pop multiple screens. No parameters by default; returns to previous screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.pop();\n```\n\n----------------------------------------\n\nTITLE: Cross-Fading Headers Using Animated Opacity - React Navigation (JavaScript)\nDESCRIPTION: Illustrates animating the header's opacity during header transitions in React Navigation by interpolating progress.current and progress.next using Animated.add and interpolate. Useful when using headerMode: 'float' for floating custom headers. Assumes use of React Native's Animated API and is generally intended for advanced header animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst opacity = Animated.add(progress.current, progress.next || 0).interpolate({\n  inputRange: [0, 1, 2],\n  outputRange: [0, 1, 0],\n});\n\nreturn (\n  <Animated.View style={{ opacity }}>{/* Header content */}</Animated.View>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Navigation\nDESCRIPTION: Example showing how to use the Link component for URL-based navigation in React Navigation. The component renders as an anchor tag on web platforms.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-05-16-web-support.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Link to=\"/profile/jane\">Go to Jane's profile</Link>\n```\n\n----------------------------------------\n\nTITLE: Opening the Drawer Programmatically\nDESCRIPTION: This snippet demonstrates how to programmatically open the drawer pane using the `openDrawer` helper method available on the `navigation` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nnavigation.openDrawer();\n```\n\n----------------------------------------\n\nTITLE: Using Params in Header Title with React Navigation\nDESCRIPTION: Shows how to use route parameters to dynamically set the header title by making options a function that receives route props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={({ route }) => ({ title: route.params.name })}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for Nested Navigators (JS)\nDESCRIPTION: This code shows the configuration needed to handle deep links for a nested navigator structure. The configuration mirrors the nesting of the navigators, with the `screens` property being nested within the parent screen's definition. This allows React Navigation to correctly route deep links to screens within nested navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    Profile: 'user',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dispatching Targeted Navigation Actions with Source/Target Keys\nDESCRIPTION: Shows how to provide optional `source` and `target` keys when dispatching a navigation action object. The `source` key specifies the originating route's key, and the `target` key directs the action to a specific navigator state key, overriding default bubbling behavior if necessary. Requires the `navigation` prop and `CommonActions` from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.navigate('Profile'),\n  source: 'someRoutekey',\n  target: 'someStatekey',\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring the gesture-handler entry import - JavaScript\nDESCRIPTION: Imports the gesture-handler module at the very top of your entry file (e.g., App.js or index.js), ensuring gesture support is activated before any other code runs. This is crucial for correct initialization of gesture handling. The relative import path assumes gesture-handler.js or gesture-handler.native.js exists.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport './gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Configuring headerTitle Option in React Navigation Native Stack - JavaScript\nDESCRIPTION: Demonstrates passing a function returning a React element to the headerTitle option in a Stack.Screen configuration using React Navigation. Requires React, React Navigation native stack installed, and defined components such as Stack, Home, and MyTitle. The headerTitle receives props and renders a custom component, ensuring hooks function correctly inside the rendered component. Make sure all referenced components are in scope.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Screen\n  name=\\\"Home\\\"\n  component={Home}\n  option={{ headerTitle: (props) => <MyTitle {...props} /> }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Authentication Loading Screen in React Native (JavaScript)\nDESCRIPTION: Defines a React component that boots up the authentication state by retrieving a token from AsyncStorage. Based on the token's existence, it navigates to either the App or authentication flow, unmounting itself afterwards. Requires React Native (react, react-native), AsyncStorage, and React Navigation's navigation prop. Accepts no input, initiates asynchronous check on mount, and displays a loading indicator during the process.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/auth-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport {\\n  ActivityIndicator,\\n  AsyncStorage,\\n  StatusBar,\\n  StyleSheet,\\n  View,\\n} from 'react-native';\\n\\nclass AuthLoadingScreen extends React.Component {\\n  componentDidMount() {\\n    this._bootstrapAsync();\\n  }\\n\\n  // Fetch the token from storage then navigate to our appropriate place\\n  _bootstrapAsync = async () => {\\n    const userToken = await AsyncStorage.getItem('userToken');\\n\\n    // This will switch to the App screen or Auth screen and this loading\\n    // screen will be unmounted and thrown away.\\n    this.props.navigation.navigate(userToken ? 'App' : 'Auth');\\n  };\\n\\n  // Render any loading content that you like here\\n  render() {\\n    return (\\n      <View>\\n        <ActivityIndicator />\\n        <StatusBar barStyle=\"default\" />\\n      </View>\\n    );\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Class Component with useNavigation in React Navigation (JavaScript)\nDESCRIPTION: Shows how to provide navigation support to a class component by wrapping it with a functional component that uses the useNavigation hook. The wrapper extracts the navigation object from the hook and passes it as a prop to the class component. This approach is useful when class components need access to navigation but cannot use hooks directly. Requires React, and @react-navigation/native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyBackButton extends React.Component {\\n  render() {\\n    // Get it from props\\n    const { navigation } = this.props;\\n  }\\n}\\n\\n// Wrap and export\\nexport default function (props) {\\n  const navigation = useNavigation();\\n\\n  return <MyBackButton {...props} navigation={navigation} />;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Layout in Static Group Configuration\nDESCRIPTION: Example of defining a custom screen layout for all screens in a group using static configuration. The layout provides error boundary and suspense fallback for all screens in the group.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  groups: {\n    Modal: {\n      screenLayout: ({ children }) => (\n        <ErrorBoundary>\n          <React.Suspense\n            fallback={\n              <View style={styles.fallback}>\n                <Text style={styles.text}>Loading‚Ä¶</Text>\n              </View>\n            }\n          >\n            {children}\n          </React.Suspense>\n        </ErrorBoundary>\n      ),\n      screens: {\n        /* screens */\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing NavigationContainer with Native Stack Navigator (React Navigation, JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize the NavigationContainer and set up a Native Stack Navigator in a React Native application using React Navigation. It imports the necessary dependencies, creates a stack navigator instance, and renders the stack navigator inside the NavigationContainer. The Stack.Navigator component will render the stack's screens as children. This setup is foundational for integrating navigation in a React Native app; dependencies include '@react-navigation/native' and '@react-navigation/native-stack'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nconst Stack = createNativeStackNavigator();\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer>\\n      <Stack.Navigator>{/* ... */}</Stack.Navigator>\\n    </NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Deep Linking Config in React Navigation - JavaScript\nDESCRIPTION: This snippet illustrates the preferred, stricter format for deep linking config in React Navigation 6.x, which mirrors the actual navigation nesting. It requires migration from older flat configs and only allows paths defined in the nested 'screens' properties. This structure improves control over deep linking and enables implementation of 404 or catch-all screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'home',\n      screens: {\n        Feed: 'feed',\n        Profile: 'profile',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme in React Navigation 5\nDESCRIPTION: Illustrates how to create a custom theme object to customize colors for various UI elements in React Navigation 5, such as background, text, and borders.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-02-06-react-navigation-5.0.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyTheme = {\n  dark: false,\n  colors: {\n    primary: 'rgb(255, 45, 85)',\n    background: 'rgb(242, 242, 242)',\n    card: 'rgb(255, 255, 255)',\n    text: 'rgb(28, 28, 30)',\n    border: 'rgb(199, 199, 204)',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Navigator Example in React Navigation\nDESCRIPTION: This example demonstrates how to create a custom tab navigator using the `useNavigationBuilder` hook with `TabRouter` from React Navigation. It shows how to render a tab bar and content area based on the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, Pressable, View } from 'react-native';\nimport {\n  NavigationHelpersContext,\n  useNavigationBuilder,\n  TabRouter,\n  TabActions,\n} from '@react-navigation/native';\n\nfunction TabNavigator({ tabBarStyle, contentStyle, ...rest }) {\n  const { state, navigation, descriptors, NavigationContent } =\n    useNavigationBuilder(TabRouter, rest);\n\n  return (\n    <NavigationContent>\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\n        {state.routes.map((route, index) => (\n          <Pressable\n            key={route.key}\n            onPress={() => {\n              const isFocused = state.index === index;\n              const event = navigation.emit({\n                type: 'tabPress',\n                target: route.key,\n                canPreventDefault: true,\n              });\n\n              if (!isFocused && !event.defaultPrevented) {\n                navigation.dispatch({\n                  ...TabActions.jumpTo(route.name, route.params),\n                  target: state.key,\n                });\n              }\n            }}\n            style={{ flex: 1 }}\n          >\n            <Text>{descriptors[route.key].options.title ?? route.name}</Text>\n          </Pressable>\n        ))}\n      </View>\n      <View style={[{ flex: 1 }, contentStyle]}>\n        {state.routes.map((route, i) => {\n          return (\n            <View\n              key={route.key}\n              style={[\n                StyleSheet.absoluteFill,\n                { display: i === state.index ? 'flex' : 'none' },\n              ]}\n            >\n              {descriptors[route.key].render()}\n            </View>\n          );\n        })}\n      </View>\n    </NavigationContent>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Drawer Type Based on Screen Width in React Navigation\nDESCRIPTION: Demonstrates how to dynamically set the `drawerType` option based on screen dimensions using the `useWindowDimensions` hook from `react-native`. This allows showing a 'permanent' drawer on large screens (width >= 768) and a 'front' drawer on smaller screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { useWindowDimensions } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  const dimensions = useWindowDimensions();\n\n  return (\n    <Drawer.Navigator\n      screenOptions={{\n        drawerType: dimensions.width >= 768 ? 'permanent' : 'front',\n      }}\n    >\n      {/* Screens */}\n    </Drawer.Navigator>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Material Bottom Tab Navigator\nDESCRIPTION: Example of customizing the Material Bottom Tab Navigator appearance by setting active and inactive colors and a custom background color for the navigation bar.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  initialRouteName=\"Home\"\n  activeColor=\"#f0edf6\"\n  inactiveColor=\"#3e2465\"\n  barStyle={{ backgroundColor: '#694fad' }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with headerShown: false in React Navigation (Static Configuration)\nDESCRIPTION: This code demonstrates how to nest a Bottom Tab Navigator inside a Native Stack Navigator while avoiding duplicate headers by using headerShown: false. The example includes a tab navigator with Feed and Messages screens, and a parent stack navigator with the tabs and a Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n    </View>\n  );\n}\n\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: FeedScreen,\n    Messages: MessagesScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeTabs,\n      options: {\n        headerShown: false,\n      },\n    },\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying common styles with screenOptions on Stack Navigator\nDESCRIPTION: Shows how to use the 'screenOptions' prop on a Stack.Navigator to apply common styling to all screens, in this case setting a background color for all headers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator\n  screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n>\n  <Stack.Screen name=\"Home\" component={HomeScreen} />\n  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Tracking Screen Views with React Navigation and Firebase Analytics (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to track screen changes in a React Navigation application and log each view to Google Analytics using Firebase Analytics. It imports navigation and analytics dependencies, defines a utility to extract the active route from the navigation state (handling nested navigators), and connects to app container events to trigger analytics logging on state changes. Required dependencies are 'react-navigation' and '@react-native-firebase/analytics'. The code expects navigation state objects, works with any navigation stack, and can be adapted for other analytics SDKs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createAppContainer, createStackNavigator } from 'react-navigation';\\nimport analytics from '@react-native-firebase/analytics';\\n\\n// gets the current screen from navigation state\\nfunction getActiveRouteName(navigationState) {\\n  if (!navigationState) {\\n    return null;\\n  }\\n  const route = navigationState.routes[navigationState.index];\\n  // dive into nested navigators\\n  if (route.routes) {\\n    return getActiveRouteName(route);\\n  }\\n  return route.routeName;\\n}\\n\\nconst AppNavigator = createStackNavigator(AppRouteConfigs);\\nconst AppContainer = createAppContainer(AppNavigator);\\n\\nexport default () => (\\n  <AppContainer\\n    onNavigationStateChange={async (prevState, currentState) => {\\n      const currentRouteName = getActiveRouteName(currentState);\\n      const previousRouteName = getActiveRouteName(prevState);\\n\\n      if (previousRouteName !== currentRouteName) {\\n        // the line below uses the @react-native-firebase/analytics tracker\\n        // change the tracker here to use other Mobile analytics SDK.\\n        await analytics().logScreenView({\\n          screen_name: currentRouteName,\\n          screen_class: currentRouteName,\\n        });\\n      }\\n    }}\\n  />\\n);\n```\n\n----------------------------------------\n\nTITLE: Annotating useRoute Hook in TypeScript\nDESCRIPTION: Shows how to provide a type annotation for the `route` object returned by the `useRoute` hook using a type parameter (`ProfileScreenRouteProp`). Similar to `useNavigation`, this approach isn't fully type-safe as correctness depends on the provided type.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute<ProfileScreenRouteProp>();\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Options via the Component options Prop (JavaScript)\nDESCRIPTION: This snippet displays the React Navigation 5.x approach of passing static options via the options prop when defining Stack.Screen. Key option is headerShown: false. Inputs: component, options object. Output: applies header config to the Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={ProfileScreen}\\n  options={{ headerShown: false }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions with Source and Target in React Navigation\nDESCRIPTION: Shows how to dispatch navigation actions with additional properties like source and target. This example navigates to a Profile screen while specifying the source route and target navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.navigate('Profile'),\n  source: 'someRoutekey',\n  target: 'someStatekey',\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Path Configuration with String Shorthand in React Navigation\nDESCRIPTION: Shows how to use a string shorthand syntax for defining screen paths in React Navigation. This is equivalent to providing the 'path' option directly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  screens: {\n    Catalog: 'item/:id',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Navigation Props for Nested Navigators in TypeScript\nDESCRIPTION: Illustrates using `CompositeNavigationProp` from `@react-navigation/native` to combine navigation prop types from different navigators. This example types the `navigation` prop for a 'Profile' screen inside a `BottomTabNavigator` which is itself nested within a `StackNavigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\ntype ProfileScreenNavigationProp = CompositeNavigationProp<\n  BottomTabNavigationProp<TabParamList, 'Profile'>,\n  StackNavigationProp<StackParamList>\n>;\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Helper Methods for Screen Pop\nDESCRIPTION: Example of using the pop navigation method to remove the current screen from the stack and navigate back to the previous screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.pop();\n```\n\n----------------------------------------\n\nTITLE: Limiting Rendered TabView Scenes for Performance (JavaScript)\nDESCRIPTION: Optimizes performance by rendering only the routes within a certain window of indices around the current index (e.g., at most 2 away). Useful for applications with many routes, particularly when rendering expensive media like images. Expects current index and an array of route objects as inputs. Returns an empty View if the scene is outside the renderable range, otherwise renders the relevant scene component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst renderScene = ({ route }) => {\n  if (Math.abs(index - routes.indexOf(route)) > 2) {\n    return <View />;\n  }\n\n  return <MySceneComponent route={route} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using LinkButton with Object-based To Prop in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to use the LinkButton component to navigate to another screen by passing an object (with the 'screen' and 'params' properties) to the 'to' prop. It exemplifies how to build deep links or navigate to nested routes in a type-safe manner. Dependencies: React, the previously defined LinkButton component. The Home function takes no parameters and renders a navigation button; clicking it triggers navigation to the Profile screen for the user 'jane'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-link-props.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Home() {\n  return (\n    <LinkButton to={{ screen: 'Profile', params: { id: 'jane' } }}>\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Specific Route with StackActions in React Native (JavaScript)\nDESCRIPTION: Demonstrates replacing a specific route identified by `route.key` within a specific navigator state identified by `navigation.getState().key`. It uses the spread syntax with `StackActions.replace` and provides `source` and `target` keys to the dispatch object for precise control over which route is replaced.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...StackActions.replace('Profile', {\n    user: 'jane',\n  }),\n  source: route.key,\n  target: navigation.getState().key,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Stack Navigator with Paper's Appbar in React Native\nDESCRIPTION: This code snippet shows how to customize the Stack Navigator to use React Native Paper's Appbar component as the header. It includes a custom Header component and uses screenOptions to apply the custom header to all screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Appbar, Avatar } from 'react-native-paper';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { Feed } from './feed';\nimport { Details } from './details';\n\nconst Header = ({ scene, previous, navigation }) => {\n  const { options } = scene.descriptor;\n  const title =\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n        ? options.title\n        : scene.route.name;\n\n  return (\n    <Appbar.Header theme={{ colors: { primary: theme.colors.surface } }}>\n      {previous ? (\n        <Appbar.BackAction\n          onPress={navigation.pop}\n          color={theme.colors.primary}\n        />\n      ) : (\n        <TouchableOpacity\n          onPress={() => {\n            navigation.openDrawer();\n          }}\n        >\n          <Avatar.Image\n            size={40}\n            source={{\n              uri: 'https://pbs.twimg.com/profile_images/952545910990495744/b59hSXUd_400x400.jpg',\n            }}\n          />\n        </TouchableOpacity>\n      )}\n      <Appbar.Content\n        title={\n          previous ? title : <MaterialCommunityIcons name=\"twitter\" size={40} />\n        }\n      />\n    </Appbar.Header>\n  );\n};\n\nexport const FeedStack = () => {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"FeedList\"\n      headerMode=\"screen\"\n      screenOptions={{\n        header: ({ scene, previous, navigation }) => (\n          <Header scene={scene} previous={previous} navigation={navigation} />\n        ),\n      }}\n    >\n      <Stack.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{ headerTitle: 'Twitter' }}\n      />\n      <Stack.Screen\n        name=\"Details\"\n        component={Details}\n        options={{ headerTitle: 'Tweet' }}\n      />\n    </Stack.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing TabBar Indicator and Background in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the renderTabBar prop of the TabView component to inject a customized TabBar with custom indicator and background colors. Dependencies include React Navigation's TabView and TabBar components. It receives TabBar props and supplies customized style and indicatorStyle; should be used within a TabView render tree. Returns a rendered TabBar with props spread for flexibility.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst renderTabBar = props => (\n  <TabBar\n    {...props}\n    indicatorStyle={{ backgroundColor: 'white' }}\n    style={{ backgroundColor: 'pink' }}\n  />\n);\n\n//...\n\nreturn (\n  <TabView\n    renderTabBar={renderTabBar}\n    ...\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Appearance with Icons and Colors in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to customize the appearance of a `createBottomTabNavigator`. It uses `defaultNavigationOptions` to define a `tabBarIcon` function that dynamically sets an icon (using `Ionicons` from `react-native-vector-icons`) based on the route name and focus state. It also configures active and inactive tab colors using `tabBarOptions`. The `HomeIconWithBadge` component is mentioned for potential badge display.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/tab-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// You can import Ionicons from @expo/vector-icons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport { createAppContainer } from 'react-navigation';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\n\nexport default createBottomTabNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    defaultNavigationOptions: ({ navigation }) => ({\n      tabBarIcon: ({ focused, horizontal, tintColor }) => {\n        const { routeName } = navigation.state;\n        let IconComponent = Ionicons;\n        let iconName;\n        if (routeName === 'Home') {\n          iconName = focused\n            ? 'ios-information-circle'\n            : 'ios-information-circle-outline';\n          // Sometimes we want to add badges to some icons.\n          // You can check the implementation below.\n          IconComponent = HomeIconWithBadge;\n        } else if (routeName === 'Settings') {\n          iconName = focused ? 'ios-list-box' : 'ios-list';\n        }\n\n        // You can return any component that you like here!\n        return <IconComponent name={iconName} size={25} color={tintColor} />;\n      },\n    }),\n    tabBarOptions: {\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Imperative Navigation Using Navigation Ref (React Navigation, JavaScript)\nDESCRIPTION: This one-liner illustrates how to use the navigationRef obtained from a ref to perform imperative navigation to a given route. The navigate method receives the route name and optional params to direct navigation outside standard screen context. It is essential that navigationRef is correctly initialized before use.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnavigationRef.navigate(name, params);\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options in Static Navigation API - React Navigation - JavaScript\nDESCRIPTION: Implements a stack navigator using the static API, allowing for detailed configuration of screen-specific and common options. The code demonstrates adding an 'options' property with a custom title for a specific screen and a 'screenOptions' property for common header styling. Requires @react-navigation/native and @react-navigation/native-stack, with entry point via a default export of the App component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { createStaticNavigation } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nfunction HomeScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n    </View>\\n  );\\n}\\n\\nfunction DetailsScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Details Screen</Text>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nconst RootStack = createNativeStackNavigator({\\n  initialRouteName: 'Home',\\n  screens: {\\n    Home: {\\n      screen: HomeScreen,\\n      // highlight-start\\n      options: {\\n        title: 'Overview',\\n      },\\n      // highlight-end\\n    },\\n    Details: DetailsScreen,\\n  },\\n});\\n// codeblock-focus-end\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { createStaticNavigation } from '@react-navigation/native';\\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\\n\\nfunction HomeScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Home Screen</Text>\\n    </View>\\n  );\\n}\\n\\nfunction DetailsScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\\n      <Text>Details Screen</Text>\\n    </View>\\n  );\\n}\\n\\n// codeblock-focus-start\\nconst RootStack = createNativeStackNavigator({\\n  initialRouteName: 'Home',\\n  // highlight-start\\n  screenOptions: {\\n    headerStyle: { backgroundColor: 'tomato' },\\n  },\\n  // highlight-end\\n  screens: {\\n    Home: {\\n      screen: HomeScreen,\\n      options: {\\n        title: 'Overview',\\n      },\\n    },\\n    Details: DetailsScreen,\\n  },\\n});\\n// codeblock-focus-end\\n\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nexport default function App() {\\n  return <Navigation />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Parameters for a Screen\nDESCRIPTION: Example of how to set initial parameters for a screen using the initialParams prop, which are available in the route.params object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Details\"\n  component={DetailsScreen}\n  initialParams={{ itemId: 42 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Header Style Interpolator to a Stack Screen\nDESCRIPTION: This example demonstrates how to apply a custom header style interpolator function to a screen in Stack Navigator using the headerStyleInterpolator option. This enables customized header transitions between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{ headerStyleInterpolator: forFade }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Action Creator with Navigation Dispatch\nDESCRIPTION: Demonstrates how to use the custom `insertBeforeLast` action creator function (defined previously) by passing it directly to `navigation.dispatch`. This executes the custom logic, inserting a 'Home' screen before the last screen in the current navigation stack. Requires the `navigation` prop and the `insertBeforeLast` function to be in scope.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(insertBeforeLast('Home'));\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator Groups with Dynamic Configuration\nDESCRIPTION: Example of using Stack.Group components to organize screens in a Navigator with different presentation options. This approach allows for dynamic group configuration within the JSX structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Group\n    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n  >\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={EmptyScreen} />\n  </Stack.Group>\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Search\" component={EmptyScreen} />\n    <Stack.Screen name=\"Share\" component={EmptyScreen} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Using Header Style Interpolators in React Navigation (JavaScript/JSX)\nDESCRIPTION: Illustrates importing `HeaderStyleInterpolators` from `@react-navigation/stack` and setting the `headerStyleInterpolator` option on a `Stack.Screen`. This example uses `forUIKit` to achieve the standard iOS header animation where the title fades into the back button during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderStyleInterpolators } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    title: 'Profile',\n    headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Params for a Screen - React Navigation (JavaScript, Static Object Syntax)\nDESCRIPTION: This snippet shows how to specify initial route parameters for a screen using static object configuration. Initial parameters are provided with the initialParams property, which will be merged with any params specified during navigation. Requires React Navigation and a stack navigator configuration. Inputs are the configuration object; the output is the screen component with default params if none are set during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/params.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  Details: {\n    screen: DetailsScreen,\n    // highlight-next-line\n    initialParams: { itemId: 42 },\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Parameter Parsing and Stringification (JS)\nDESCRIPTION: This snippet demonstrates how to customize the parsing and stringification of URL parameters. The `parse` and `stringify` properties within the screen configuration allow you to define functions that transform the parameter values when reading from and writing to the URL, respectively.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Profile: {\n      path: 'user/:id/:section',\n      parse: {\n        id: (id) => `user-${id}`,\n      },\n      stringify: {\n        id: (id) => id.replace(/^user-/, ''),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Timing Animation for Tab Transitions in React Navigation\nDESCRIPTION: This code snippet demonstrates how to configure a timing animation for tab transitions in React Navigation. It sets the animation to 'timing' and specifies the duration and easing function. The `transitionSpec` object is used to customize the animation of the tab transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  animation: 'timing',\n  config: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Programmatically Opening the Drawer in React Navigation\nDESCRIPTION: This snippet shows how to programmatically open the drawer pane using the `navigation.openDrawer()` helper method provided by the Drawer Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nnavigation.openDrawer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Blur Header Background in React Navigation (Static)\nDESCRIPTION: This snippet demonstrates how to create a translucent header with a blur effect using expo-blur in a static navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\nimport { BlurView } from 'expo-blur';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerTransparent: true,\n        headerBackground: () => (\n          <BlurView\n            tint=\"dark\"\n            intensity={100}\n            style={StyleSheet.absoluteFill}\n          />\n        ),\n      },\n    },\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Structure of a React Navigation Theme Object (JavaScript)\nDESCRIPTION: This example shows the complete structure of a React Navigation theme object. It includes the `dark` boolean property indicating if it's a dark theme, and the `colors` object containing required color definitions for `primary`, `background`, `card`, `text`, `border`, and `notification`. All these properties must be provided when defining a custom theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst MyTheme = {\n  dark: false,\n  colors: {\n    primary: 'rgb(255, 45, 85)',\n    background: 'rgb(242, 242, 242)',\n    card: 'rgb(255, 255, 255)',\n    text: 'rgb(28, 28, 30)',\n    border: 'rgb(199, 199, 204)',\n    notification: 'rgb(255, 69, 58)',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Stack Navigator - Dynamic Component - JavaScript\nDESCRIPTION: Initializes a native stack navigator in a dynamic fashion using React components and JSX. The navigator is configured by nesting <Stack.Navigator> and <Stack.Screen> elements. Requires importing React, React Navigation's native stack module, and providing the HomeScreen and ProfileScreen components. This pattern is more flexible and integrates seamlessly with component-based logic and hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Apply FadeTransition Preset Statically\nDESCRIPTION: This code snippet demonstrates how to statically apply the `FadeTransition` preset from `@react-navigation/bottom-tabs` to a screen's `options` property in a React Navigation configuration.  It imports `TransitionPresets` and then spreads the `FadeTransition` preset into the `options` object of the `Profile` screen, resulting in a cross-fade animation when navigating to that screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/bottom-tabs';\n\n// ...\n\n{\n  Profile: {\n    screen: Profile,\n    options: {\n      // highlight-start\n      ...TransitionPresets.FadeTransition,\n      // highlight-end\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Drawer Navigator with Multiple Screens (JavaScript)\nDESCRIPTION: Provides a full example for initializing a Drawer Navigator and adding three screens (Feed, Notifications, Profile) using createDrawerNavigator from '@react-navigation/drawer'. Requires Feed, Notifications, and Profile components, and that @react-navigation/drawer is installed. Each Drawer.Screen receives a name, a component, and options with a drawerLabel. Initial route is 'Feed', and the navigator is returned in a function component called MyDrawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator initialRouteName=\"Feed\">\n      <Drawer.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{ drawerLabel: 'Home' }}\n      />\n      <Drawer.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{ drawerLabel: 'Updates' }}\n      />\n      <Drawer.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{ drawerLabel: 'Profile' }}\n      />\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Drawer Route Using jumpTo (JavaScript)\nDESCRIPTION: Shows how to navigate to a specific existing route in the drawer using navigation.jumpTo(name, params). Requires the navigation prop. Name is a string route identifier, and params is an object containing extra parameters to merge into the destination route. Returns no value but causes navigation within the drawer navigator context. Intended for cases where side-by-side drawer screens need programmatic switching.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.jumpTo('Profile', { owner: 'Satya' });\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Drawers with Context API (Static Configuration)\nDESCRIPTION: Example of using React Context API to control multiple drawers independently in React Navigation with static configuration. This solution provides access to both left and right drawer controls from within screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/multiple-drawers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nconst RightDrawerContext = React.createContext();\n\nfunction HomeScreen() {\n  const { openRightDrawer } = React.useContext(RightDrawerContext);\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open left drawer</Button>\n      <Button onPress={() => openRightDrawer()}>Open right drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  const value = React.useMemo(\n    () => ({\n      openRightDrawer: () => setRightDrawerOpen(true),\n      closeRightDrawer: () => setRightDrawerOpen(false),\n    }),\n    []\n  );\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <RightDrawerContext.Provider value={value}>\n        <LeftDrawerScreen />\n      </RightDrawerContext.Provider>\n    </Drawer>\n  );\n}\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Card Style Interpolator to a Stack Screen\nDESCRIPTION: This example shows how to apply a custom card style interpolator function to a screen in Stack Navigator using the cardStyleInterpolator option. This enables custom visual transitions between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{ cardStyleInterpolator: forFade }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Grouping Screens in Stack Navigator Using Stack.Group - JavaScript\nDESCRIPTION: This snippet demonstrates grouping screens in a Stack Navigator using Stack.Group to apply common options and modal presentation. Requires React Navigation 6.x and @react-navigation/stack. 'screenOptions' prop is applied to all screens within the group; separate groups allow for different options such as header styles or modal presentation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Group\n    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}\n  >\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </Stack.Group>\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Search\" component={SearchScreen} />\n    <Stack.Screen name=\"Share\" component={ShareScreen} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Creating a Translucent Header with BlurView in React Navigation\nDESCRIPTION: Example showing how to create a translucent header using BlurView from expo-blur. This implementation uses headerTransparent and headerBackground props to achieve the effect.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n\n// ...\n\nMyScreen.navigationOptions = {\n  headerTransparent: true,\n  headerBackground: () => (\n    <BlurView tint=\"light\" intensity={100} style={StyleSheet.absoluteFill} />\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Bottom Tabs Animation with Dynamic Navigation\nDESCRIPTION: This code shows how to create a custom animation for bottom tabs in React Navigation using a dynamic navigator with `NavigationContainer`. It defines custom `transitionSpec` and `sceneStyleInterpolator` options within the `Tab.Navigator` component, applying the same animation to both tabs.  This approach relies on `NavigationContainer` and `Tab.Navigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View, Easing } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Profile!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction RootTabs() {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        transitionSpec: {\n          animation: 'timing',\n          config: {\n            duration: 150,\n            easing: Easing.inOut(Easing.ease),\n          },\n        },\n        sceneStyleInterpolator: ({ current }) => ({\n          sceneStyle: {\n            opacity: current.progress.interpolate({\n              inputRange: [-1, 0, 1],\n              outputRange: [0, 1, 0],\n            }),\n          },\n        }),\n      }}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Drawer Actions in React Navigation\nDESCRIPTION: Using the navigation.dispatch method with DrawerActions to control drawer state, which is what the helper methods use behind the scenes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnavigation.dispatch(DrawerActions.openDrawer());\nnavigation.dispatch(DrawerActions.closeDrawer());\nnavigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createStackNavigator (React Navigation, JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the createStackNavigator function from react-navigation-stack and initialize a stack navigator instance with route configurations and stack-level options. It requires react-navigation-stack to be installed and expects RouteConfigs and StackNavigatorConfig objects describing the screens and navigation behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStackNavigator } from 'react-navigation-stack';\n\ncreateStackNavigator(RouteConfigs, StackNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Parameters in React Navigation\nDESCRIPTION: Shows how to provide default parameters to a screen using the initialParams prop on the Stack.Screen component. These parameters are used when no parameters are explicitly passed during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/params.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Details\"\n  component={DetailsScreen}\n  initialParams={{ itemId: 42 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing FlatList in React Navigation Bottom Tab Navigator\nDESCRIPTION: This code snippet demonstrates how to use React Navigation's FlatList component within a bottom tab navigator. It creates a HomeScreen with a FlatList of 150 items and sets up a basic tab navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/scrollables.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createBottomTabNavigator,\n  createAppContainer,\n  FlatList,\n} from 'react-navigation';\n\nconst data = new Array(150).fill(0);\n\nclass HomeScreen extends React.Component {\n  renderItem = ({ index }) => {\n    return (\n      <View style={{ height: 50 }}>\n        <Text style={{ textAlign: 'center' }}>Item {index}</Text>\n      </View>\n    );\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <FlatList\n          data={data}\n          renderItem={this.renderItem}\n          contentContainerStyle={{ padding: 10 }}\n        />\n      </View>\n    );\n  }\n}\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: { screen: HomeScreen },\n});\n\nexport default createAppContainer(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animation for Stack Navigator Transitions in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a configuration object for spring animation and apply it to a Stack.Screen component using the transitionSpec option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  animation: 'spring',\n  config: {\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  },\n};\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    transitionSpec: {\n      open: config,\n      close: config,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Links with React Navigation Web <Link> Component (JSX)\nDESCRIPTION: This example demonstrates how to use the <Link> component from React Navigation Web to create accessible navigation links in a web-based React app. It takes a 'toRoute' prop indicating the route name and a 'params' object for navigation parameters. The output renders an anchor tag (<a>) with the appropriate href for server rendering and accessibility, and clicking the link dispatches a navigation action instead of performing a full page reload.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/web-support.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Link toRoute=\"Profile\" params={{ name: 'jamie' }}>\n  Jamie's Profile\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Omitting Screen from URL Path in React Navigation\nDESCRIPTION: Configuration to make the Home screen appear as the root path (/) by specifying an empty string as the path in the linking configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: ProfileScreen,\n      linking: {\n        path: '',\n      },\n    },\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: '',\n    },\n    Profile: 'users/:id',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending useScrollToTop to Provide Scroll Offset with Dynamic Tabs (JavaScript)\nDESCRIPTION: This code sample extends useScrollToTop for customized scroll offset functionality within a dynamic tab navigation layout. By using React.useRef for a custom scrollToTop implementation, it scrolls to an offset (y: 100) upon tab selection. The example is constructed with createBottomTabNavigator and NavigationContainer. Required dependencies: '@react-navigation/bottom-tabs', '@react-navigation/native', and 'react-native'. Key parameter is the custom scrollToTop ref; input/output are navigation events resulting in offset-scrolling the ScrollView.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-scroll-to-top.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { View, Image } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n// codeblock-focus-start\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  useScrollToTop(\n    React.useRef({\n      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),\n    })\n  );\n\n  return (\n    <ScrollView ref={ref}>\n      {/* content */}\n      // codeblock-focus-end\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"1\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"2\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"3\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"4\"\n      />\n      // codeblock-focus-start\n    </ScrollView>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Albums\" component={Albums} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type-checking Custom Tab Navigator in React Navigation (TSX)\nDESCRIPTION: This code snippet demonstrates how to type-check a custom tab navigator in React Navigation. It defines types for props, screen options, and event maps to ensure type safety. This includes defining interfaces like `TabNavigationConfig`, `TabNavigationOptions`, and `TabNavigationEventMap` to specify the types for various aspects of the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  View,\n  Text,\n  Pressable,\n  type StyleProp,\n  type ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport {\n  createNavigatorFactory,\n  CommonActions,\n  type DefaultNavigatorOptions,\n  type NavigatorTypeBagBase,\n  type ParamListBase,\n  type StaticConfig,\n  type TabActionHelpers,\n  type TabNavigationState,\n  TabRouter,\n  type TabRouterOptions,\n  type TypedNavigator,\n  useNavigationBuilder,\n} from '@react-navigation/native';\n\n// Additional props accepted by the view\ntype TabNavigationConfig = {\n  tabBarStyle: StyleProp<ViewStyle>;\n  contentStyle: StyleProp<ViewStyle>;\n};\n\n// Supported screen options\ntype TabNavigationOptions = {\n  title?: string;\n};\n\n// Map of event name and the type of data (in event.data)\n// canPreventDefault: true adds the defaultPrevented property to the\n// emitted events.\ntype TabNavigationEventMap = {\n  tabPress: {\n    data: { isAlreadyFocused: boolean };\n    canPreventDefault: true;\n  };\n};\n\n// The props accepted by the component is a combination of 3 things\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  TabNavigationOptions,\n  TabNavigationEventMap\n> &\n  TabRouterOptions &\n  TabNavigationConfig;\n\nfunction TabNavigator({ tabBarStyle, contentStyle, ...rest }: Props) {\n  const { state, navigation, descriptors, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      TabNavigationOptions,\n      TabNavigationEventMap\n    >(TabRouter, rest);\n\n  return (\n    <NavigationContent>\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\n        {state.routes.map((route, index) => (\n          <Pressable\n            key={route.key}\n            onPress={() => {\n              const isFocused = state.index === index;\n              const event = navigation.emit({\n                type: 'tabPress',\n                target: route.key,\n                canPreventDefault: true,\n                data: {\n                  isAlreadyFocused: isFocused,\n                },\n              });\n\n              if (!isFocused && !event.defaultPrevented) {\n                navigation.dispatch({\n                  ...CommonActions.navigate(route),\n                  target: state.key,\n                });\n              }\n            }}\n            style={{ flex: 1 }}\n          >\n            <Text>{descriptors[route.key].options.title || route.name}</Text>\n          </Pressable>\n        ))}\n      </View>\n      <View style={[{ flex: 1 }, contentStyle]}>\n        {state.routes.map((route, i) => {\n          return (\n            <View\n              key={route.key}\n              style={[\n                StyleSheet.absoluteFill,\n                { display: i === state.index ? 'flex' : 'none' },\n              ]}\n            >\n              {descriptors[route.key].render()}\n            </View>\n          );\n        })}\n      </View>\n    </NavigationContent>\n  );\n}\n\n// The factory function with generic types for type-inference\nexport function createMyNavigator<\n  const ParamList extends ParamListBase,\n  const NavigatorID extends string | undefined = undefined,\n  const TypeBag extends NavigatorTypeBagBase = {\n    ParamList: ParamList;\n    NavigatorID: NavigatorID;\n    State: TabNavigationState<ParamList>;\n    ScreenOptions: TabNavigationOptions;\n    EventMap: TabNavigationEventMap;\n    NavigationList: {\n      [RouteName in keyof ParamList]: TabNavigationProp<\n        ParamList,\n        RouteName,\n        NavigatorID\n      >;\n    };\n    Navigator: typeof TabNavigator;\n  },\n  const Config extends StaticConfig<TypeBag> = StaticConfig<TypeBag>,\n>(config?: Config): TypedNavigator<TypeBag, Config> {\n  return createNavigatorFactory(TabNavigator)(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Bottom Tabs Navigator in React Navigation\nDESCRIPTION: Example showing how to set up a basic Native Bottom Tabs Navigator with multiple screens and custom icons using @bottom-tabs/react-navigation package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2025-01-29-using-react-navigation-with-native-bottom-tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNativeBottomTabNavigator } from '@bottom-tabs/react-navigation';\n\nconst Tabs = createNativeBottomTabNavigator();\n\nfunction NativeBottomTabs() {\n  return (\n    <Tabs.Navigator>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: () => ({ uri: 'https://example.com/icon.png' }),\n        }}\n      />\n      <Tabs.Screen\n        name=\"explore\"\n        options={{\n          title: 'Explore',\n          tabBarIcon: () => ({ uri: 'https://example.com/icon.png' }),\n        }}\n      />\n    </Tabs.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Header Styles Across Screens with screenOptions\nDESCRIPTION: Demonstrates how to apply consistent header styling across multiple screens by configuring screenOptions at the Stack.Navigator level.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for Deep Linking in Android (React Native)\nDESCRIPTION: This XML snippet demonstrates how to modify the AndroidManifest.xml file to handle deep linking in Android for react-native init projects. It adds an intent-filter for the MainActivity to handle VIEW actions with a custom scheme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Tabs in React Navigation\nDESCRIPTION: Example showing how to implement navigation between tabs using the navigation.navigate method. Each screen component receives the navigation prop which can be used to navigate to other tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        title=\"Go to Settings\"\n        onPress={() => navigation.navigate('Settings')}\n      />\n    </View>\n  );\n}\n\nfunction SettingsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Custom Header Height in React Navigation\nDESCRIPTION: This snippet illustrates how to specify a custom height for the header in React Navigation using the `headerStyle` option. Explicitly setting the height avoids measurement glitches, especially with custom headers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n};\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Screen Instance with `push` in React Navigation (JavaScript)\nDESCRIPTION: Shows a `Button` component whose `onPress` handler uses `this.props.navigation.push('Details')`. Unlike `navigate`, `push` always adds a new instance of the specified route ('Details') to the navigation stack, allowing multiple instances of the same screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Button\n  title=\"Go to Details... again\"\n  onPress={() => this.props.navigation.push('Details')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing HomeNavigator with Bottom Tabs\nDESCRIPTION: This code creates a bottom tab navigator using createBottomTabNavigator from React Navigation, connecting TodoNavigator and ProfileNavigator with custom icons and a custom tab bar component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { TodoNavigator } from './todo.navigator';\nimport { ProfileNavigator } from './profile.navigator';\nimport { AppRoute } from './app-routes';\nimport { HomeTabBar } from '../scenes/home';\nimport { LayoutIcon, PersonIcon } from '../assets/icons';\n\nconst BottomTab = createBottomTabNavigator();\n\nexport const HomeNavigator = (): React.ReactElement => (\n  <BottomTab.Navigator tabBar={props => <HomeTabBar {...props} />}>\n    <BottomTab.Screen\n      name={AppRoute.TODO}\n      component={TodoNavigator}\n      options={{ title: 'TODO', tabBarIcon: LayoutIcon }}\n    />\n    <BottomTab.Screen\n      name={AppRoute.PROFILE}\n      component={ProfileNavigator}\n      options={{ title: 'PROFILE', tabBarIcon: PersonIcon }}\n    />\n  </BottomTab.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer State with React Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates toggling the drawer navigator between open and closed states using the 'toggleDrawer' method on the navigation prop. Intended to be used inside a component rendered within a drawer navigator, this helper switches the visibility state of the drawer. Make sure the component has access to the navigation prop configured for a drawer, or this function will fail.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Identification with `getId` in React Navigation using JavaScript\nDESCRIPTION: Illustrates setting the `getId` prop on a `Tab.Screen` component. This function uses `params.userId` to generate a unique ID for the screen instance, affecting navigation behavior (specifically how `navigate` determines if a screen already exists) when navigating to screens with the same name but different parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Screen\n  name={Profile}\n  component={ProfileScreen}\n  getId={({ params }) => params.userId}\n/>\n```\n\n----------------------------------------\n\nTITLE: Going Back from a Specific Screen Key with goBack (JavaScript)\nDESCRIPTION: Illustrates using 'goBack' with a specific key to pop back multiple screens in the navigation stack. This pattern requires careful key management to ensure correct navigation history. The method takes in the key of a route, and outputs a navigation action reverting the stack to before the specified entry, popping several screens at once.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.goBack(SCREEN_KEY_B) // will go to screen A FROM screen B\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing FAB Icon based on Active Tab in React Navigation (JSX)\nDESCRIPTION: This snippet demonstrates changing the FAB's icon dynamically based on the currently focused route within the Bottom Tab Navigator. It retrieves the route name (using `getFocusedRouteNameFromRoute` which needs to be imported from `@react-navigation/native`) and uses a switch statement to determine the correct icon ('feather' or 'email-plus-outline') to display.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport color from 'color';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { Portal, FAB } from 'react-native-paper';\nimport { useIsFocused, getFocusedRouteNameFromRoute } from '@react-navigation/native'; // Added getFocusedRouteNameFromRoute assuming it's needed\n\nimport { Feed } from './feed';\nimport { Message } from './message';\nimport { Notifications } from './notifications';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport const BottomTabs = (props) => {\n  const { route } = props; // Assuming route prop is passed\n  // Get a name of current screen\n  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';\n  const isFocused = useIsFocused();\n\n  let icon = 'feather';\n\n  switch (routeName) {\n    case 'Messages':\n      icon = 'email-plus-outline';\n      break;\n    default:\n      icon = 'feather';\n      break;\n  }\n  \n  // Assuming tabBarColor is defined elsewhere\n  const tabBarColor = '#6200ee'; \n\n  return (\n    <React.Fragment>\n      <Tab.Navigator initialRouteName=\"Feed\" shifting={true}>\n        <Tab.Screen\n          name=\"Feed\"\n          component={Feed}\n          options={{\n            tabBarIcon: 'home-account',\n            tabBarColor,\n          }}\n        />\n        <Tab.Screen\n          name=\"Notifications\"\n          component={Notifications}\n          options={{\n            tabBarIcon: 'bell-outline',\n            tabBarColor,\n          }}\n        />\n        <Tab.Screen\n          name=\"Messages\"\n          component={Message}\n          options={{\n            tabBarIcon: 'message-text-outline',\n            tabBarColor,\n          }}\n        />\n      </Tab.Navigator>\n      <Portal>\n        <FAB\n          visible={isFocused}\n          icon={icon}\n          style={{\n            position: 'absolute',\n            bottom: 100,\n            right: 16,\n          }}\n          color=\"white\"\n        />\n      </Portal>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Top Tab Navigator Basic Options\nDESCRIPTION: Example showing basic configuration of Material Top Tab Navigator with custom styles for labels, tabs, and background color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  tabBarOptions={{\n    labelStyle: { fontSize: 12 },\n    tabStyle: { width: 100 },\n    style: { backgroundColor: 'powderblue' },\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator for Authentication Flow\nDESCRIPTION: Implements a stack navigator for authentication screens including Sign In, Sign Up, and Reset Password using React Navigation 5.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { AppRoute } from './app-routes';\nimport { SignInScreen, SignUpScreen, ResetPasswordScreen } from '../scenes/auth';\n\nconst Stack = createStackNavigator();\n\nexport const AuthNavigator = (): React.ReactElement => (\n  <Stack.Navigator headerMode='none'>\n    <Stack.Screen name={AppRoute.SIGN_IN} component={SignInScreen}/>\n    <Stack.Screen name={AppRoute.SIGN_UP} component={SignUpScreen}/>\n    <Stack.Screen name={AppRoute.RESET_PASSWORD} component={ResetPasswordScreen}/>\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useLinkTo with a React Class Component via Wrapper (JavaScript)\nDESCRIPTION: This example illustrates how to integrate the `useLinkTo` hook with a React class component. Since hooks cannot be used directly in class components, it wraps the class component (`Home`) in a functional component, calls `useLinkTo` within the wrapper, and then passes the resulting `linkTo` function down as a prop to the instance of the class component (`Profile` in the example, likely intended to be `Home`). This requires React and `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-link-to.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Home extends React.Component {\n  render() {\n    // Get it from props\n    const { linkTo } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const linkTo = useLinkTo();\n\n  return <Profile {...props} linkTo={linkTo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic ScreenProps Type in TypeScript\nDESCRIPTION: Demonstrates an alternative way to define screen props using the generic `StackScreenProps` type from `@react-navigation/stack`. This type combines both `route` and `navigation` prop types based on the provided `RootStackParamList` and route name ('Profile'). Similar types exist for other navigators (`DrawerScreenProps`, `BottomTabScreenProps`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackScreenProps } from '@react-navigation/stack';\n\ntype RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Feed: { sort: 'latest' | 'top' } | undefined;\n};\n\ntype Props = StackScreenProps<RootStackParamList, 'Profile'>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Style Interpolators\nDESCRIPTION: Demonstrates how to use CardStyleInterpolators to create Android Oreo style vertical screen fade animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CardStyleInterpolators } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    title: 'Profile',\n    cardStyleInterpolator: CardStyleInterpolators.forFadeFromBottomAndroid,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Listening to Parent Navigator Events in React Navigation (JS)\nDESCRIPTION: Shows how a screen within a nested navigator can listen to events (e.g., `tabPress`) from a specific parent navigator. It uses `navigation.getParent('ParentID').addListener()` to attach the listener, where 'ParentID' matches the `id` prop assigned to the target parent navigator. The call returns an `unsubscribe` function to clean up the listener.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = navigation\n  .getParent('MyTabs')\n  .addListener('tabPress', (e) => {\n    // Do something\n  });\n```\n\n----------------------------------------\n\nTITLE: Replacing the Current Screen in the Stack - React Navigation (JavaScript)\nDESCRIPTION: Shows how to use navigation.replace to swap the current screen with a new one by name, passing route params as the second argument. Useful for redirecting users or resetting the navigation stack. No external dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nnavigation.replace('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Injecting the Navigation Prop with withNavigation HOC in React Navigation (JavaScript)\nDESCRIPTION: Presents the recommended technique to automatically provide the navigation prop to a non-screen component (MyBackButton) using React Navigation's withNavigation higher-order component. Required dependencies: react, react-native (Button), and react-navigation (withNavigation). MyBackButton receives navigation via context, enabling the use of navigation.goBack() in descendants. Inputs: no explicit navigation prop required; outputs: fully functional Back button in any component hierarchy. There are no special constraints beyond requiring a properly configured React Navigation environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/connecting-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\\nimport { Button } from 'react-native';\\nimport { withNavigation } from 'react-navigation';\\n\\nclass MyBackButton extends React.Component {\\n  render() {\\n    return (\\n      <Button\\n        title=\"Back\"\\n        onPress={() => {\\n          this.props.navigation.goBack();\\n        }}\\n      />\\n    );\\n  }\\n}\\n\\n// withNavigation returns a component that wraps MyBackButton and passes in the\\n// navigation prop\\nexport default withNavigation(MyBackButton);\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux-Connected Component in JavaScript\nDESCRIPTION: Shows how to create a simple functional component (`Counter`) and wrap it with `react-redux`'s `connect` higher-order component to create a container component (`CounterContainer`) that subscribes to Redux store updates and receives the `count` state as a prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/redux-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction Counter({ value }) {\n  return <Text>Count: {value}</Text>;\n}\n\nconst CounterContainer = connect((state) => ({ value: state.count }))(Counter);\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating useScrollToTop with Dynamic Tabs in React Navigation (JavaScript)\nDESCRIPTION: This code snippet illustrates using the useScrollToTop hook within a dynamic tab navigation setup with React Navigation and React Native. The NavigationContainer and createBottomTabNavigator are used to organize navigation, while useScrollToTop attaches scroll-to-top behavior to a ScrollView via a ref in the Albums screen. Dependencies are '@react-navigation/bottom-tabs', '@react-navigation/native', and 'react-native'. Expected input is navigation tab interaction; output is the ScrollView scrolled to the top. This approach supports dynamic tab configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-scroll-to-top.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { View, Image } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n// codeblock-focus-start\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  // highlight-next-line\n  useScrollToTop(ref);\n\n  return (\n    <ScrollView ref={ref}>\n      {/* content */}\n      // codeblock-focus-end\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"1\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"2\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"3\"\n      />\n      <Image\n        source={{ uri: 'https://facebook.github.io/react/logo-og.png' }}\n        style={{ width: 400, height: 400 }}\n        key=\"4\"\n      />\n      // codeblock-focus-start\n    </ScrollView>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Albums\" component={Albums} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Parameters in React Navigation Stack (JavaScript)\nDESCRIPTION: Expanding on the previous example, this snippet configures the Chat screen to accept a 'user' parameter from the path 'chat/:user'. This enables URI-based deep linking with dynamic path segment extraction. Dependencies include react-navigation and the corresponding ChatScreen implementation to receive the parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SimpleApp = createAppContainer(\n  createStackNavigator({\n    Home: { screen: HomeScreen },\n    Chat: {\n      screen: ChatScreen,\n      path: 'chat/:user',\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer with Static Navigation in React Native\nDESCRIPTION: Demonstrates how to dispatch the `toggleDrawer` action using `DrawerActions.toggleDrawer()` within a React Native component. This example uses the static navigation setup with `createStaticNavigation` and `useNavigation` hook to get the navigation object. The action opens the drawer if closed, and closes it if open.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js name=\"Drawer Actions - toggleDrawer\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.toggleDrawer());\n          // codeblock-focus-end\n        }}\n      >\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Prop in Static Navigation (React Native)\nDESCRIPTION: This React Native code demonstrates how to access the `route` prop within a screen component (`ProfileScreen`) when using static navigation defined with `createStaticNavigation` and `createNativeStackNavigator`. It shows destructuring the `route` prop and displaying its `name` property. Requires `react`, `react-native`, `@react-navigation/native`, and `@react-navigation/native-stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/route-object.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Profile: ProfileScreen,\n  },\n});\n\n// codeblock-focus-start\nfunction ProfileScreen({ route }) {\n  return (\n    <View>\n      <Text>This is the profile screen of the app</Text>\n      <Text>{route.name}</Text>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Stack Header Title Based on Child Tab State (React Navigation/JavaScript)\nDESCRIPTION: This snippet demonstrates how to dynamically set the `headerTitle` option for a parent `Stack.Screen`. It uses a function within the `options` prop that receives the `route` and calls the `getHeaderTitle` helper (defined previously) to determine the title based on the currently focused screen in the nested `HomeTabs` navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options-resolution.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeTabs}\n  options={({ route }) => ({\n    headerTitle: getHeaderTitle(route),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Title Formatting (Static)\nDESCRIPTION: Example of customizing the web document title using the `documentTitle` prop on the `<Navigation>` component. It provides a custom `formatter` function that takes screen options and route, returning a formatted string (e.g., appending the app name).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n<Navigation\n  // highlight-start\n  documentTitle={{\n    formatter: (options, route) =>\n      `${options?.title ?? route?.name} - My Cool App`,\n  }}\n  // highlight-end\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useDrawerProgress Hook with Reanimated\nDESCRIPTION: Demonstrates using the `useDrawerProgress` hook from `react-native-drawer-layout` to get a Reanimated `SharedValue`. This shared value represents the drawer's opening progress (from 0 for closed to 1 for open) and can be used with `useAnimatedStyle` and `interpolate` from `react-native-reanimated` (v2+) to animate component styles based on the drawer's state. Note this returns a mock value (0 or 1) on Web.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { Animated } from 'react-native-reanimated';\nimport { useDrawerProgress } from 'react-native-drawer-layout';\n\n// ...\n\nfunction MyComponent() {\n  const progress = useDrawerProgress();\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: interpolate(progress, [0, 1], [-100, 0]),\n        },\n      ],\n    };\n  });\n\n  return <Animated.View style={animatedStyle}>{/* ... */}</Animated.View>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using jumpTo Method in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the jumpTo method to navigate to a specific screen in a Bottom Tab Navigator. It includes passing parameters to the destination route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animation for React Navigation Stack Transitions\nDESCRIPTION: This snippet demonstrates how to create a spring animation configuration object for transitions between screens in Stack Navigator. It defines stiffness, damping, mass, and other properties for the spring animation effect.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  animation: 'spring',\n  config: {\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting URI Prefix in React Native Projects (JavaScript)\nDESCRIPTION: Defines the URI prefix directly in the navigation container for react-native CLI projects. The prefix is passed into the app container to instruct it where to extract navigation paths from incoming URLs. Useful for non-Expo projects where Expo linking utilities are unavailable.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SimpleApp = createAppContainer(createStackNavigator({...}));\n\nconst prefix = 'example://';\n\nconst MainApp = () => <SimpleApp uriPrefix={prefix} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator (Dynamic) in React Native\nDESCRIPTION: This code creates a dynamic stack navigator using `createStackNavigator` and `Stack.Navigator`.  It defines HomeScreen and SurpriseScreen components. The SurpriseScreen uses `useEffect` and `useState` to conditionally display text after a navigation event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useEffect, useState } from 'react';\nimport { Button, Text, View } from 'react-native';\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n      <Button\n        onPress={() => navigation.navigate('Surprise')}\n        title=\"Click here!\"\n      />\n    </View>\n  );\n};\n\nconst SurpriseScreen = () => {\n  const navigation = useNavigation();\n\n  const [textVisible, setTextVisible] = useState(false);\n\n  useEffect(() => {\n    navigation.addListener('transitionEnd', () => setTextVisible(true));\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {textVisible ? <Text>Surprise!</Text> : ''}\n    </View>\n  );\n};\n\nconst Stack = createStackNavigator();\n\nexport const MyStack = () => {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Surprise\" component={SurpriseScreen} />\n    </Stack.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Expo Managed Project\nDESCRIPTION: This command installs react-native-screens and react-native-safe-area-context in an Expo managed project. It uses the expo install command to ensure compatible versions are installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-screens react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Modifying Tab Bar to Include Drawer Toggle in React Native\nDESCRIPTION: This code modifies the Todo tab bar to include a menu icon for opening the drawer. It uses UI Kitten components like TabBar and Tab, and includes a Toolbar component with a menu icon to toggle the drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { TabBar, Tab, Divider, TabElement } from '@ui-kitten/components';\nimport { SafeAreaLayout, SaveAreaInset, SafeAreaLayoutElement } from '../../components/safe-area-layout.component';\nimport { Toolbar } from '../../components/toolbar.component';\nimport { MenuIcon } from '../../assets/icons';\n\nexport const TodoTabBar = (props): SafeAreaLayoutElement => {\n\n  const onTabSelect = (index: number): void => {\n    const selectedTabRoute: string = props.state.routeNames[index];\n    props.navigation.navigate(selectedTabRoute);\n  };\n\n  const createNavigationTabForRoute = (route): TabElement => {\n    const { options } = props.descriptors[route.key];\n    return (\n      <Tab\n        key={route.key}\n        title={options.title}\n        icon={options.tabBarIcon}\n      />\n    );\n  };\n\n  return (\n    <SafeAreaLayout insets={SaveAreaInset.TOP}>\n      <Toolbar\n        title='React Navigation Ex üê±'\n        backIcon={MenuIcon}\n        onBackPress={props.navigation.toggleDrawer}\n      />\n      <TabBar selectedIndex={props.state.index} onSelect={onTabSelect}>\n        {props.state.routes.map(createNavigationTabForRoute)}\n      </TabBar>\n      <Divider/>\n    </SafeAreaLayout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sharing Common Header Styles Across Screens (JavaScript)\nDESCRIPTION: Demonstrates applying consistent header styling across multiple screens in a stack navigator by defining common styles in the `defaultNavigationOptions` property of the `createStackNavigator` configuration. This avoids repeating style definitions in individual screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n    /* No more header config here! */\n  };\n\n  /* render function, etc */\n}\n\n/* other code... */\n\nconst AppNavigator = createStackNavigator(\n  {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n  {\n    initialRouteName: 'Home',\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: '#f4511e',\n      },\n      headerTintColor: '#fff',\n      headerTitleStyle: {\n        fontWeight: 'bold',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Ensuring Container View Fills Screen\nDESCRIPTION: Demonstrates a React component where the `NavigationContainer` is wrapped in a `View`. The `View` component is styled with `flex: 1` to ensure it expands to fill its parent container, making the navigation content visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1 }}>\n      <NavigationContainer>{/* ... */}</NavigationContainer>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Header Title Implementation (Static)\nDESCRIPTION: Demonstrates the correct way to define the `headerTitle` option in a static native stack navigator configuration.  It passes a function which then returns the React element `<MyTitle {...props} />`. This function is correctly called by react navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: Home,\n      options: {\n        // highlight-next-line\n        headerTitle: (props) => <MyTitle {...props} />,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Tabbar with Dynamic Navigation (React Navigation)\nDESCRIPTION: This code demonstrates how to hide the tab bar on specific screens ('Profile' and 'Settings') using dynamic React Navigation. A `HomeTabs` function creates a bottom tab navigator for 'Home', 'Feed', and 'Notifications'. The `App` function defines a stack navigator, placing `HomeTabs` as the first screen.  Since `Profile` and `Settings` are defined within the stack navigator, but outside the tab navigator, the tab bar is not displayed on those screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hiding-tabbar-in-screens.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nfunction EmptyScreen() {\n  return <View />;\n}\n\nfunction Home() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Feed\" component={EmptyScreen} />\n      <Tab.Screen name=\"Notifications\" component={EmptyScreen} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeTabs} />\n        <Stack.Screen name=\"Profile\" component={EmptyScreen} />\n        <Stack.Screen name=\"Settings\" component={EmptyScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n// codeblock-focus-end\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Mocking Native Dependencies for Jest in JavaScript\nDESCRIPTION: Provides the necessary mocks for `react-native-gesture-handler` and `react-native-reanimated` within a Jest setup file (e.g., `jest/setup.js`). This is required for testing React Navigation components, particularly when using Drawer or Stack navigators. It imports the gesture handler's Jest setup, mocks the reanimated library (overriding the default `call` behavior), and mocks `NativeAnimatedHelper` to suppress warnings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// include this line for mocking react-native-gesture-handler\nimport 'react-native-gesture-handler/jestSetup';\n\n// include this section and the NativeAnimatedHelper section for mocking react-native-reanimated\njest.mock('react-native-reanimated', () => {\n  const Reanimated = require('react-native-reanimated/mock');\n\n  // The mock for `call` immediately calls the callback which is incorrect\n  // So we override it with a no-op\n  Reanimated.default.call = () => {};\n\n  return Reanimated;\n});\n\n// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n```\n\n----------------------------------------\n\nTITLE: Configuring useLinking with Prefixes and Screen Config (JavaScript)\nDESCRIPTION: This snippet shows how to initialize the `useLinking` hook with an array of URL prefixes and a navigation config that maps screen names to path patterns. It is used to specify which URL patterns the navigator handles and how URLs should be parsed into navigation state. The main parameters include the navigation reference, `prefixes` for deep links, and a `config` object mapping screens to path templates. This setup is only supported on iOS and Android, and correct configuration ensures deep linking works as intended.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseLinking(ref, {\\n  prefixes: ['https://example.com', 'example://'],\\n  config: {\\n    screens: {\\n      Chat: 'feed/:sort',\\n    },\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing HeaderButton in React Navigation\nDESCRIPTION: Uses the new HeaderButton component to render buttons in the header with appropriate styling. This example shows how to use it with an icon from MaterialCommunityIcons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nheaderRight: ({ tintColor }) => (\n  <HeaderButton\n    accessibilityLabel=\"More options\"\n    onPress={() => {\n      /* do something */\n    }}\n  >\n    <MaterialCommunityIcons\n      name=\"dots-horizontal-circle-outline\"\n      size={24}\n      color={tintColor}\n    />\n  </HeaderButton>\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing Linking Configuration in React Navigation (JS)\nDESCRIPTION: This code snippet demonstrates how to initialize the linking configuration in React Navigation using the `NavigationContainer` component. It defines the `linking` object with `prefixes` (URL schemes) and `config` (mapping paths to screens). The `NavigationContainer` uses this `linking` prop to handle incoming links and a `fallback` prop for displaying a loading state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst linking = {\n  prefixes: [\n    /* your linking prefixes */\n  ],\n  config: {\n    /* configuration for matching screens with paths */\n  },\n};\n\nfunction App() {\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Bare React Native Projects (Bash)\nDESCRIPTION: Installs required dependencies (`react-native-reanimated`, `react-native-gesture-handler`, `react-native-screens`, `react-native-safe-area-context`, `@react-native-community/masked-view`) using npm for a bare React Native project. Peer dependency warnings might occur but can often be ignored if the app builds successfully.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drawers with Static Configuration\nDESCRIPTION: Example of implementing multiple drawers in React Navigation using static configuration. This approach uses react-native-drawer-layout directly for the second drawer while using createDrawerNavigator for the primary drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/multiple-drawers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <LeftDrawerScreen />\n    </Drawer>\n  );\n}\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Drawer and Stack Navigators in React Navigation (JS)\nDESCRIPTION: Provides an example setup where a `Drawer.Navigator` (defined in the `Root` component) is nested as a screen within a `Stack.Navigator` (defined in the `App` component). The `Root` screen within the stack has its header hidden using `options={{ headerShown: false }}`. This structure facilitates demonstrating navigation patterns involving nested navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction Root() {\n  return (\n    <Drawer.Navigator>\n      <Drawer.Screen name=\"Home\" component={Home} />\n      <Drawer.Screen name=\"Profile\" component={Profile} />\n      <Drawer.Screen name=\"Settings\" component={Settings} />\n    </Drawer.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Root\"\n          component={Root}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen name=\"Feed\" component={Feed} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App Navigator with MobX Provider in React\nDESCRIPTION: Example of using the MobX Provider component to wrap the AppNavigator, allowing access to MobX objects throughout the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/MST-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Provider myObject={this.myObject}>\n  <AppNavigator />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Adding Badge to Tab Icon in React Navigation\nDESCRIPTION: Snippet demonstrating how to add a numeric badge to a tab icon using the tabBarBadge option in React Navigation's Tab.Screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Screen name=\"Home\" component={HomeScreen} options={{ tabBarBadge: 3 }} />\n```\n\n----------------------------------------\n\nTITLE: Hiding Headers in All Nested Navigators\nDESCRIPTION: This example shows how to hide headers in all navigators by setting headerShown: false in the screenOptions for both parent Stack Navigator and child Tab Navigator. This creates a completely header-free navigation experience.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Home() {\n  return (\n    <Tab.Navigator screenOptions={{ headerShown: false }}>\n      <Tab.Screen name=\"Profile\" component={Profile} />\n      <Tab.Screen name=\"Settings\" component={Settings} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"EditPost\" component={EditPost} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Path Configuration in Navigation Container (JS)\nDESCRIPTION: This snippet demonstrates how to integrate the `config` option (defined previously) into the `linking` prop of the `NavigationContainer`. It includes example prefixes and showcases how the overall linking object is passed to `NavigationContainer` for handling deep links.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst config = {\n  screens: {\n    Chat: 'feed/:sort',\n    Profile: 'user',\n  },\n};\n\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config,\n};\n\nfunction App() {\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Gesture Handler in React Navigation\nDESCRIPTION: Explains how to use the `configureGestureHandler` callback option to customize the underlying `react-native-gesture-handler` instance associated with the drawer swipe gesture. The callback receives the `gesture` object, allowing modification of its properties. This example disables the trackpad two-finger gesture. This option is not supported on Web.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconfigureGestureHandler: ({ gesture }) => {\n  return gesture.enableTrackpadTwoFingerGesture(false);\n},\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Navigation State Persistence with AsyncStorage in JavaScript\nDESCRIPTION: This snippet demonstrates the core implementation of navigation state persistence. It defines two async functions: `persistNavigationState` saves the navigation state to `AsyncStorage` as a JSON string, and `loadNavigationState` retrieves and parses the JSON string from `AsyncStorage`. These functions are then passed as props to the `AppNavigator` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/state-persistence.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst AppNavigator = createStackNavigator({...});\nconst persistenceKey = \"persistenceKey\"\nconst persistNavigationState = async (navState) => {\n  try {\n    await AsyncStorage.setItem(persistenceKey, JSON.stringify(navState))\n  } catch(err) {\n    // handle the error according to your needs\n  }\n}\nconst loadNavigationState = async () => {\n  const jsonString = await AsyncStorage.getItem(persistenceKey)\n  return JSON.parse(jsonString)\n}\n\nconst App = () => <AppNavigator persistNavigationState={persistNavigationState} loadNavigationState={loadNavigationState} />;\n```\n\n----------------------------------------\n\nTITLE: Programmatic Tab Navigation with jumpTo - JavaScript\nDESCRIPTION: Illustrates calling the jumpTo method to programmatically switch tabs within a scene. Typically used inside a scene component to navigate to another tab. The input is a route key string, and there is no return value. Requires the jumpTo prop passed by TabView.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nprops.jumpTo('albums');\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drawers with Dynamic Configuration\nDESCRIPTION: Example of implementing multiple drawers in React Navigation using dynamic configuration. This approach combines a standard drawer navigator with react-native-drawer-layout for the second drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/multiple-drawers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useNavigation } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <LeftDrawerScreen />\n    </Drawer>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Native UI Theme with App Theme using React Native Platform API - JavaScript\nDESCRIPTION: Demonstrates a React useEffect hook configured to update the device or browser theme when the application theme changes. Uses Platform.OS check to distinguish between web (sets 'colorScheme' on document.documentElement) and native (calls Appearance.setColorScheme). Relies on the 'theme.dark' property and dependencies: React, Platform, Appearance, and correct theme object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\\n  const colorScheme = theme.dark ? 'dark' : 'light';\\n\\n  if (Platform.OS === 'web') {\\n    document.documentElement.style.colorScheme = colorScheme;\\n  } else {\\n    Appearance.setColorScheme(colorScheme);\\n  }\\n}, [theme.dark]);\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Drawer Navigation with React Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates a static configuration of a drawer navigator using React Navigation in a React Native app. It uses the `createDrawerNavigator` function with predefined screens, and integrates the `createStaticNavigation` API for rendering navigation. Required dependencies include `@react-navigation/drawer`, `@react-navigation/native`, and `@react-navigation/elements`. The navigation between \"Home\" and \"Notifications\" screens is triggered by button presses. Inputs include the navigation components and output is a functional drawer navigator UI in the app. This form of configuration is less flexible than the dynamic approach and may not support all runtime adjustments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Notifications')}>\n        Go to notifications\n      </Button>\n    </View>\n  );\n}\n\nfunction NotificationsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back home</Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  screens: {\n    Home: HomeScreen,\n    Notifications: NotificationsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Layout to TabView with Window Width (JavaScript)\nDESCRIPTION: Passes an initial layout object with specific height and width (using Dimensions.get('window').width) to TabView, preventing one-frame render delay and enabling faster initial scene measurement. Requires Dimensions from react-native. Should be set in TabView's initialLayout prop. The width value is dynamically determined based on window dimensions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nconst initialLayout = {\n  height: 0,\n  width: Dimensions.get('window').width,\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Navigation Prop to Child Component - React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates a functional React component, GoToButton, that uses the navigation prop to navigate to a screen whose name is supplied via props. It requires React, react-native's Button, and expects navigation (a React Navigation prop) and screenName as arguments. The button, when pressed, calls navigation.navigate with the provided screenName. The expected input is a navigation object and a valid screenName; it returns a rendered Button element. Limitations: The navigation prop must be passed explicitly to GoToButton when used outside a navigation-aware component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/connecting-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Button } from 'react-native';\\n\\nfunction GoToButton({ navigation, screenName }) {\\n  return (\\n    <Button\\n      title={`Go to ${screenName}`}\\n      onPress={() => navigation.navigate(screenName)}\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Start Example with TabView - React Native JavaScript\nDESCRIPTION: Implements a simple two-tab React Native tab view using functional components and the useWindowDimensions hook. Demonstrates required setup, controlled navigation state, dynamic layout, and modular scene mapping via SceneMap. Inputs include two routes and tab states; outputs the TabView component configured for material design navigation between 'First' and 'Second' tabs. Requires react-native-tab-view and react-native-pager-view as dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, useWindowDimensions } from 'react-native';\nimport { TabView, SceneMap } from 'react-native-tab-view';\n\nconst FirstRoute = () => (\n  <View style={{ flex: 1, backgroundColor: '#ff4081' }} />\n);\n\nconst SecondRoute = () => (\n  <View style={{ flex: 1, backgroundColor: '#673ab7' }} />\n);\n\nconst renderScene = SceneMap({\n  first: FirstRoute,\n  second: SecondRoute,\n});\n\nexport default function TabViewExample() {\n  const layout = useWindowDimensions();\n\n  const [index, setIndex] = React.useState(0);\n  const [routes] = React.useState([\n    { key: 'first', title: 'First' },\n    { key: 'second', title: 'Second' },\n  ]);\n\n  return (\n    <TabView\n      navigationState={{ index, routes }}\n      renderScene={renderScene}\n      onIndexChange={setIndex}\n      initialLayout={{ width: layout.width }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Blur View Header Background Example\nDESCRIPTION: Example showing how to create a translucent header using BlurView from expo-blur.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n\n// ...\n\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{\n    headerTransparent: true,\n    headerBackground: () => (\n      <BlurView tint=\"light\" intensity={100} style={StyleSheet.absoluteFill} />\n    ),\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Custom getPathFromState Usage with useLinking (JavaScript)\nDESCRIPTION: Here, the useLinking hook is configured with a custom `getPathFromState` function to serialize navigation state objects back into URL string paths. This pattern is essential for web support if a custom `getStateFromPath` is provided, maintaining consistent roundtrip navigation between URLs and state. The callback receives the navigation state and config, and should return a string path representation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseLinking(ref, {\\n  prefixes: ['https://example.com', 'example://'],\\n  config: {\\n    screens: {\\n      Chat: 'feed/:sort',\\n    },\\n  },\\n  getPathFromState(state, config) {\\n    // Return a path string here\\n    // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Focus Events in React Components\nDESCRIPTION: Shows how to use the `React.useEffect` hook within a screen component to subscribe to the 'focus' event using `navigation.addListener`. The listener executes a callback when the screen becomes focused, and the effect returns an unsubscribe function for cleanup when the component unmounts or the `navigation` prop changes. Requires the `navigation` prop passed to the screen and the `React` library.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // do something\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useScrollToTop Implementation with Functional Component\nDESCRIPTION: Demonstrates the basic usage of useScrollToTop hook with a ScrollView component in a functional component. The hook accepts a ref to the scrollable component to enable scroll-to-top behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-scroll-to-top.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  useScrollToTop(ref);\n\n  return <ScrollView ref={ref}>{/* content */}</ScrollView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Navigating Tab Icon in React Navigation\nDESCRIPTION: This code demonstrates how to create a tab icon that performs a custom action instead of navigating to a screen. It uses createBottomTabNavigator with a placeholder screen and overrides the tabBarOnPress handler to execute custom logic without triggering navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-based-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncreateBottomTabNavigator({\n  ...,\n  Placeholder: {\n      screen: () => null,\n      navigationOptions: {\n        tabBarOnPress: () => {\n          // do something custom here\n        },\n      },\n  }\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full-Screen Modal with Nested Navigation in React Navigation\nDESCRIPTION: This code demonstrates how to create a modal interface by nesting StackNavigators. It configures a RootStack with 'modal' mode that contains a MainStack navigator and a modal screen. The implementation shows how to trigger a modal from the home screen and how to dismiss it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const params = navigation.state.params || {};\n\n    return {\n      headerLeft: (\n        <Button\n          onPress={() => navigation.navigate('MyModal')}\n          title=\"Info\"\n          color=\"#fff\"\n        />\n      ),\n      /* the rest of this config is unchanged */\n    };\n  };\n\n  /* render function, etc */\n}\n\nclass ModalScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n        <Button\n          onPress={() => this.props.navigation.goBack()}\n          title=\"Dismiss\"\n        />\n      </View>\n    );\n  }\n}\n\nconst MainStack = StackNavigator(\n  {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n  {\n    /* Same configuration as before */\n  }\n);\n\nconst RootStack = StackNavigator(\n  {\n    Main: {\n      screen: MainStack,\n    },\n    MyModal: {\n      screen: ModalScreen,\n    },\n  },\n  {\n    mode: 'modal',\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Handling Navigation with Static Configuration in React Navigation\nDESCRIPTION: This snippet demonstrates how to initialize and handle navigation using a static configuration in React Navigation. It shows the creation of a navigation container ref, a custom navigate function that checks if navigation is ready, and the setup of a basic navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  createNavigationContainerRef,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nconst navigationRef = createNavigationContainerRef();\n\nfunction navigate(name, params) {\n  if (navigationRef.isReady()) {\n    // Perform navigation if the react navigation is ready to handle actions\n    navigationRef.navigate(name, params);\n  } else {\n    // You can decide what to do if react navigation is not ready\n    // You can ignore this, or add these actions to a queue you can call later\n  }\n}\n\nfunction Home() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home</Text>\n      <Button onPress={() => navigate('Profile')}>Go to Profile</Button>\n    </View>\n  );\n}\n\nfunction Profile() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile</Text>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: Home,\n    Profile: Profile,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation ref={navigationRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Same Route Multiple Times\nDESCRIPTION: DetailsScreen component showing how navigation.navigate() doesn't add duplicate screens when navigating to the same route multiple times.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Screen Options with a Function in JSX\nDESCRIPTION: Shows how to dynamically configure screen options by providing a function to the `options` prop. This function receives `route` and `navigation` as arguments, allowing options to be set based on route parameters or navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={({ route, navigation }) => ({\n    title: route.params.userId,\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Root Navigator Component in JavaScript\nDESCRIPTION: This snippet shows how to define a root stack navigator using the dynamic API. It creates a `RootStack` using `createNativeStackNavigator()` and defines a component `RootStackScreen` that renders the navigator with its screens ('Home', 'Feed').\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst RootStack = createNativeStackNavigator();\n\nfunction RootStackScreen() {\n  return (\n    <RootStack.Navigator>\n      <RootStack.Screen name=\"Home\" component={HomeScreen} />\n      <RootStack.Screen name=\"Feed\" component={FeedScreen} />\n    </RootStack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using pop Method in React Navigation\nDESCRIPTION: Demonstrates the pop method which removes the current screen from the stack and navigates to the previous screen. It can optionally take a count parameter to pop multiple screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.pop();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Navigation Stack in React Native\nDESCRIPTION: Implements a basic navigation structure using React Navigation's native stack navigator. It sets up a HomeScreen component and wraps it in a NavigationContainer with a Stack.Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Navigate Action with React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import NavigationActions from react-navigation, construct a navigate action object with nested route parameters and a sub-action, and dispatch the action using the navigation.dispatch() method. It expects the presence of the react-navigation package and a navigation prop available in the current context (typically provided by a navigation container or screen component). Input parameters include the destination route name (required), optional parameters to pass, and an optional sub-action for child routers. The code outputs a transition to the specified route and does not throw if unhandled. There are no explicit limitations beyond requiring correct route registration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\\n\\nconst navigateAction = NavigationActions.navigate({\\n  routeName: 'Profile',\\n\\n  params: {},\\n\\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\\n});\\n\\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Drawer Content with Progress Interpolation\nDESCRIPTION: Implementation of animated drawer content using the progress value provided by the drawer. This example creates a parallax effect by translating drawer contents based on the drawer's open/close progress.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomDrawerContent({ progress, ...rest }) {\n  const translateX = Animated.interpolate(progress, {\n    inputRange: [0, 1],\n    outputRange: [-100, 0],\n  });\n\n  return (\n    <Animated.View style={{ transform: [{ translateX }] }}>\n      {/* ... drawer contents */}\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Omitting Screen from Path in React Navigation\nDESCRIPTION: This example demonstrates how to omit a screen name from the path by specifying an empty string as the path or not specifying a path at all in the navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: '',\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Refs with NavigationContainer in Static Configuration\nDESCRIPTION: Example of using refs with NavigationContainer in static configuration to access navigation methods outside of screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator({\n  initialRouteName: 'Empty',\n  screens: {\n    Empty: () => <View></View>,\n    Home: HomeScreen,\n  },\n});\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Navigation = createStaticNavigation(Stack);\n\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef(); // You can also use a regular ref with `React.useRef()`\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>\n      <Navigation ref={navigationRef} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Going back to previous screen in React Navigation\nDESCRIPTION: An enhanced DetailsScreen component that demonstrates how to navigate back to the previous screen using the goBack method provided by the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Event Listeners via listeners Prop Callback on a Tab.Screen (JSX/JavaScript)\nDESCRIPTION: Demonstrates the use of a dynamic listeners prop in Tab.Screen by providing a callback that receives navigation and route as arguments. This enables access to navigation methods (e.g., navigation.navigate) within event handlers, in this case on 'tabPress'. The handler can prevent the default action and perform custom navigation logic. Supports advanced use-cases with context-dependent behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-events.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Screen\n  name=\"Chat\"\n  component={Chat}\n  listeners={({ navigation, route }) => ({\n    tabPress: (e) => {\n      // Prevent default action\n      e.preventDefault();\n\n      // Do something with the `navigation` object\n      navigation.navigate('AnotherPlace');\n    },\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Navigation Appearance in React Native\nDESCRIPTION: This code snippet shows how to customize the appearance of tab navigation, including setting custom icons and colors for active and inactive tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport { createBottomTabNavigator, createAppContainer } from 'react-navigation';\n\nexport default createBottomTabNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    defaultNavigationOptions: ({ navigation }) => ({\n      tabBarIcon: ({ focused, horizontal, tintColor }) => {\n        const { routeName } = navigation.state;\n        let IconComponent = Ionicons;\n        let iconName;\n        if (routeName === 'Home') {\n          iconName = `ios-information-circle${focused ? '' : '-outline'}`;\n          IconComponent = HomeIconWithBadge;\n        } else if (routeName === 'Settings') {\n          iconName = `ios-options`;\n        }\n        return <IconComponent name={iconName} size={25} color={tintColor} />;\n      },\n    }),\n    tabBarOptions: {\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Object with NavigationContext and useContext in React Native\nDESCRIPTION: This snippet demonstrates how to directly access the React Navigation `navigation` object within a functional component. It imports `NavigationContext` from `@react-navigation/native` and uses the `React.useContext` hook to retrieve the `navigation` object provided by a higher-level navigator component. This requires the component to be rendered within a React Navigation container.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-context.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationContext } from '@react-navigation/native';\n\nfunction SomeComponent() {\n  // We can access navigation object via context\n  const navigation = React.useContext(NavigationContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering an action with a 'focus' event listener in React Navigation\nDESCRIPTION: This snippet demonstrates how to use a focus event listener to execute code when a screen becomes focused. It sets up an event listener in a useEffect hook and properly cleans it up on component unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/function-after-focusing-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\n\nfunction ProfileScreen({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // The screen is focused\n      // Call any action\n    });\n\n    // Return the function to unsubscribe from the event so it gets removed on unmount\n    return unsubscribe;\n  }, [navigation]);\n\n  return <View />;\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Linking Configuration for a Nested Navigation Structure\nDESCRIPTION: Example configuration for a bottom tabs navigator with a nested stack, mapping screens to URL paths that reflect the navigation hierarchy.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    HomeStack: {\n      screens: {\n        Home: 'home',\n        Profile: 'user',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Subdomains for Deep Linking\nDESCRIPTION: This code demonstrates how to configure deep linking to match multiple subdomains using wildcard notation. It sets up prefixes for both wildcard subdomains and the root domain to ensure all variations are handled.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['https://*.example.com', 'https://example.com'],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Inline Screen Component Definition Causing Remount Issues (JavaScript)\nDESCRIPTION: This example defines a screen component inline within the render of the App component, causing React to treat it as a new component on each re-render. This results in unnecessary remounts and state resets, breaking navigation state. Instead, define screen components at top level scope or in separate files. No external dependencies are required except React and React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={() => {\n          return <SomeComponent />;\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom 404 Screen in React Navigation\nDESCRIPTION: This snippet shows how to create a custom NotFoundScreen component that can either display a generic message or load a WebView based on the unmatched path.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NotFoundScreen({ route }) {\n  if (route.path) {\n    return <WebView source={{ uri: `https://mywebsite.com/${route.path}` }} />;\n  }\n\n  return <Text>This screen doesn't exist!</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Back Button in Stack Navigator\nDESCRIPTION: Example showing how to use HeaderBackButton component to customize the back button behavior in Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderBackButton } from '@react-navigation/stack';\n\n// ...\n\n<Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{\n    headerLeft: (props) => (\n      <HeaderBackButton\n        {...props}\n        onPress={() => {\n          // Do something\n        }}\n      />\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Navigation with Nested Stack and Tab Navigators (React Navigation)\nDESCRIPTION: This code snippet initializes a static navigation structure using React Navigation, nesting a stack navigator (HomeStack) within a bottom tab navigator (MyTabs). It defines routes for 'Home', 'Profile', and 'Settings' within the stack, and 'HomeStack', 'Feed', and 'Notifications' within the tab navigator. The Navigation component is then created using createStaticNavigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hiding-tabbar-in-screens.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeStack = createNativeStackNavigator({\n  screens: {\n    Home: Home,\n    Profile: Profile,\n    Settings: Settings,\n  },\n});\n\nconst MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeStack,\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme in Expo app.json\nDESCRIPTION: This snippet shows how to configure a URL scheme in an Expo project's app.json file. The scheme key defines the URL protocol handler for the app, which enables deep linking with custom URLs like 'example://'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linking Subscription in React Navigation (Static)\nDESCRIPTION: Demonstrates how to provide a custom `subscribe` function within the `linking` prop for the `<Navigation>` component. This function handles incoming URLs from both standard deep linking (`Linking.addEventListener`) and Firebase Cloud Messaging notifications (`messaging().onNotificationOpenedApp`), passing the URL to the React Navigation listener. It returns a cleanup function to remove the listeners.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n<Navigation\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    // highlight-start\n    subscribe(listener) {\n      const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n      // Listen to incoming links from deep linking\n      const subscription = Linking.addEventListener('url', onReceiveURL);\n\n      // Listen to firebase push notifications\n      const unsubscribeNotification = messaging().onNotificationOpenedApp(\n        (message) => {\n          const url = message.data?.url;\n\n          if (url) {\n            // Any custom logic to check whether the URL needs to be handled\n            //...\n\n            // Call the listener to let React Navigation handle the URL\n            listener(url);\n          }\n        }\n      );\n\n      return () => {\n        // Clean up the event listeners\n        subscription.remove();\n        unsubscribeNotification();\n      };\n    },\n    // highlight-end\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Drawer Style in React Navigation Drawer Navigator\nDESCRIPTION: This snippet demonstrates how to apply custom styles to the drawer component using the `drawerStyle` option within the `screenOptions` prop of `Drawer.Navigator`. It sets a custom background color and width for the drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n<Drawer.Navigator\n  screenOptions={{\n    drawerStyle: {\n      backgroundColor: '#c6cbef',\n      width: 240,\n    },\n  }}\n>\n  {/* screens */}\n</Drawer.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Parent of Nested Navigator in React Navigation (JavaScript)\nDESCRIPTION: Illustrates the basic usage of `navigation.navigate()` to navigate to the screen (`More`) that hosts a nested navigator. When navigating this way, the initial route defined within the nested navigator (`Feed` in the main examples) will be displayed. Requires the `navigation` object, typically obtained via `useNavigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js\nnavigation.navigate('More');\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Params via route Prop (JavaScript)\nDESCRIPTION: With React Navigation 5.x, route params are accessed via the route prop instead of navigation.state. This function component example shows destructuring route from props and reading route.params.user. Dependencies: @react-navigation/native. Input: a screen's route object. Output: userId value derived from params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ route }) {\\n  const userId = route.params.user;\\n\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Using FocusAwareStatusBar with Dynamic Navigation in React Native\nDESCRIPTION: Provides a full example of a React Native application using dynamic navigation (`NavigationContainer`, `createNativeStackNavigator`). It demonstrates two screens (`Screen1`, `Screen2`) applying different status bar styles using the `FocusAwareStatusBar` component. The app is wrapped in `SafeAreaProvider` for safe area handling. Dependencies include `React`, `React Native` components (`View`, `Text`, `StatusBar`, `StyleSheet`), `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/elements`, and `react-native-safe-area-context`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, StatusBar, StyleSheet } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction FocusAwareStatusBar(props) {\n  const isFocused = useIsFocused();\n\n  return isFocused ? <StatusBar {...props} /> : null;\n}\n\n// codeblock-focus-start\nfunction Screen1() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#6a51ae',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <FocusAwareStatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen2')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n\nfunction Screen2() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#ecf0f1',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <FocusAwareStatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen1')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Screen1\" component={Screen1} />\n          <Stack.Screen name=\"Screen2\" component={Screen2} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Param Merging in React Navigation 6 Navigation\nDESCRIPTION: Demonstrates how to explicitly opt-in to the parameter merging behavior (default in v5) when navigating in React Navigation 6. This is done by passing an object to `navigation.navigate` containing `name`, `params`, and `merge: true`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate({\n  name: 'Post',\n  params: { postTitle: 'An okay post' },\n  merge: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Deep Linking Prefix in React Navigation for Expo (JavaScript)\nDESCRIPTION: Imports `expo-linking` to generate a deep link prefix using `Linking.createURL('/')`. This prefix is then passed to the `linking` prop of the `Navigation` component (assumed context) for static configuration in an Expo app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\n\nconst prefix = Linking.createURL('/');\n\n/* content */\n\nfunction App() {\n  const linking = {\n    prefixes: [prefix],\n  };\n\n  return <Navigation linking={linking} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Navigator Implementation in React Navigation\nDESCRIPTION: Proper implementation of multiple navigators by composing them directly in the navigation configuration rather than rendering them within screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/common-mistakes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  /*\n   * Rather than being rendered by a screen component, the\n   * AuthenticationNavigator is a screen component\n   */\n  Auth: AuthenticationNavigator,\n  Home: HomeScreen,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Using the jumpTo Navigation Helper\nDESCRIPTION: Example of using the jumpTo helper method to programmatically navigate to a specific tab and pass parameters to the destination screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-bottom-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { name: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Handling Initial URL for Deep Linking (React Navigation)\nDESCRIPTION: Example of checking for an initial URL to handle deep linking, avoiding conflicts with web platforms and ensuring proper state restoration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialUrl = await Linking.getInitialURL();\n\nif (Platform.OS !== 'web' && initialUrl == null) {\n  // Only restore state if there's no deep link and we're not on web\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Active Item Tint Color in React Navigation Drawer Options\nDESCRIPTION: Provides an example of setting the `drawerActiveTintColor` option for a Drawer Navigator screen or the entire navigator via `screenOptions`. This option defines the color for the icon and label of the currently active drawer item.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n   drawerActiveTintColor: 'green',\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Title Option with Stack.Screen - JavaScript\nDESCRIPTION: The snippet configures a Stack.Screen component from React Navigation, demonstrating how to set a custom title for a given screen. This ensures that when rendered on the server, the correct page title is available for metadata. Depends on @react-navigation/stack, and the key parameter is 'options' which should include the 'title' property.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={ProfileScreen}\\n  options={{ title: 'My profile' }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drawers with Nested Drawer Navigators in React Navigation\nDESCRIPTION: This snippet shows how to implement multiple drawers by nesting two drawer navigators. It uses the 'id' prop and navigation.getParent() to control specific drawers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/multiple-drawers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.getParent('LeftDrawer').openDrawer()}\n        title=\"Open left drawer\"\n      />\n      <Button\n        onPress={() => navigation.getParent('RightDrawer').openDrawer()}\n        title=\"Open right drawer\"\n      />\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nfunction LeftDrawerScreen() {\n  return (\n    <LeftDrawer.Navigator\n      id=\"LeftDrawer\"\n      screenOptions={{ drawerPosition: 'left' }}\n    >\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n}\n\nconst RightDrawer = createDrawerNavigator();\n\nfunction RightDrawerScreen() {\n  return (\n    <RightDrawer.Navigator\n      id=\"RightDrawer\"\n      drawerContent={(props) => <RightDrawerContent {...props} />}\n      screenOptions={{\n        drawerPosition: 'right',\n        headerShown: false,\n      }}\n    >\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigation Helper in React Navigation\nDESCRIPTION: Shows how to create a custom navigation helper function 'insertBeforeLast' that inserts a new screen just before the last one in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nconst insertBeforeLast = (routeName, params) => (state) => {\n  const routes = [\n    ...state.routes.slice(0, -1),\n    { name: routeName, params },\n    state.routes[state.routes.length - 1],\n  ];\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drawers with react-native-drawer-layout in React Navigation\nDESCRIPTION: This snippet demonstrates how to implement multiple drawers using react-native-drawer-layout and a drawer navigator. It includes a context API implementation to control the right drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/multiple-drawers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst RightDrawerContext = React.createContext();\n\nfunction HomeScreen({ navigation }) {\n  const { openRightDrawer } = React.useContext(RightDrawerContext);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.openDrawer()}\n        title=\"Open left drawer\"\n      />\n      <Button onPress={() => openRightDrawer()} title=\"Open right drawer\" />\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  const value = React.useMemo(\n    () => ({\n      openRightDrawer: () => setRightDrawerOpen(true),\n      closeRightDrawer: () => setRightDrawerOpen(false),\n    }),\n    []\n  );\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <RightDrawerContext.Provider value={value}>\n        <LeftDrawerScreen />\n      </RightDrawerContext.Provider>\n    </Drawer>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Navigation in React Native with React Navigation\nDESCRIPTION: This snippet demonstrates how to create a basic drawer navigation setup using @react-navigation/drawer. It includes two screens (Home and Notifications) and shows how to configure the NavigationContainer and Drawer.Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.navigate('Notifications')}\n        title=\"Go to notifications\"\n      />\n    </View>\n  );\n}\n\nfunction NotificationsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()} title=\"Go back home\" />\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator initialRouteName=\"Home\">\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Notifications\" component={NotificationsScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction in React Navigation (Dynamic)\nDESCRIPTION: Demonstrates setting the text direction explicitly to Right-to-Left ('rtl') using the `direction` prop on the `<NavigationContainer>` component. This informs navigators (like the drawer) to adjust layout accordingly, but doesn't change the direction itself.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\n  // highlight-next-line\n  direction=\"rtl\"\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Stack Header Title from Nested Tab Navigator (React Navigation, JS)\nDESCRIPTION: Demonstrates how to dynamically set the `headerTitle` for a `StackNavigator` based on the active screen within a nested `TabNavigator`. The `navigationOptions` for the `TabNavigator` component is defined as a function receiving the `navigation` prop. It inspects `navigation.state` to find the current route name within the tabs and sets the `headerTitle` accordingly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedScreen,\n  Profile: ProfileScreen,\n});\n\nTabNavigator.navigationOptions = ({ navigation }) => {\n  const { routeName } = navigation.state.routes[navigation.state.index];\n\n  // You can do whatever you like here to pick the title based on the route name\n  const headerTitle = routeName;\n\n  return {\n    headerTitle,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Retrieved Screen Options in Server-Rendered HTML (JSX)\nDESCRIPTION: Illustrates how to use the screen `options` obtained from the `ServerContainer` ref to populate HTML elements during server-side rendering. This example shows setting the document title and meta description based on the options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-container.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<title>{options.title}</title>\n<meta name=\"description\" content={options.description} />\n```\n\n----------------------------------------\n\nTITLE: Migrating animationEnabled option to animation (JavaScript)\nDESCRIPTION: This snippet shows how to replace 'animationEnabled: false' with the more general 'animation: \\u0027none\\u0027' option for Stack Navigator transitions in React Navigation. No external dependencies are required beyond the navigator. The change is made within screen options objects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\\n  name=\"Details\"\\n  component={DetailsScreen}\\n  options={{\\n-     animationEnabled: false,\\n+     animation: 'none',\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Full Navigator Config with initialRouteName and Nested Screens (JavaScript)\nDESCRIPTION: This code snippet configures a nested navigation structure with an `initialRouteName`, custom path and parse logic for the Catalog screen, and a Feed screen. Used by the linking configuration to ensure that navigation state for deep links reflects the requested route hierarchy, including both nested screens and freshly-parsed params. Demonstrates expected state structure resulting from a deep link for `/item/42`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  screens: {\\n    Home: {\\n      initialRouteName: 'Feed',\\n      screens: {\\n        Catalog: {\\n          path: 'item/:id',\\n          parse: {\\n            id: Number,\\n          },\\n        },\\n        Feed: 'feed',\\n      },\\n    },\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Listening to Screen Options Changes with addListener\nDESCRIPTION: Example showing how to subscribe to screen options changes using the addListener method with the 'options' event from the NavigationContainer ref.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = navigationRef.current?.addListener('options', (e) => {\n  // You can get the new options for the currently focused screen\n  console.log(e.data.options);\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Screen Changes with onStateChange in React Navigation (JavaScript)\nDESCRIPTION: This React Native component demonstrates how to track screen navigation changes for analytics. It uses `useNavigationContainerRef` to access the navigation container and its methods, `useRef` to keep track of the previous route name, and the `onStateChange` prop of `NavigationContainer` to detect transitions. The `onReady` prop is used to capture the initial route name, as `onStateChange` doesn't fire initially. When a route change is detected (comparing previous and current route names obtained via `getCurrentRoute().name`), a placeholder `trackScreenView` function is called with the current route name. Requires `@react-navigation/native` and `react` dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  NavigationContainer,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { useRef } from 'react'; // Added missing import for useRef based on usage\n\nexport default () => {\n  const navigationRef = useNavigationContainerRef();\n  const routeNameRef = useRef();\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onReady={() => {\n        routeNameRef.current = navigationRef.getCurrentRoute().name;\n      }}\n      onStateChange={async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.getCurrentRoute().name;\n        const trackScreenView = (screenName) => { // Added screenName parameter based on call\n          // Your implementation of analytics goes here!\n          console.log(`Tracking screen view: ${screenName}`); // Example implementation\n        };\n\n        if (previousRouteName !== currentRouteName) {\n          // Save the current route name for later comparison\n          routeNameRef.current = currentRouteName;\n\n          // Replace the line below to add the tracker from a mobile analytics SDK\n          await trackScreenView(currentRouteName);\n        }\n      }}\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to the React Navigation Header\nDESCRIPTION: Example showing how to add a button to the right side of a header in React Navigation using the options prop. This demonstrates setting a custom headerTitle and a headerRight button that displays an alert when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          headerTitle: (props) => <LogoTitle {...props} />,\n          headerRight: () => (\n            <Button\n              onPress={() => alert('This is a button!')}\n              title=\"Info\"\n              color=\"#fff\"\n            />\n          ),\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Screen Configuration with Navigator Component\nDESCRIPTION: Shows how to configure screens dynamically using Stack.Navigator and Stack.Screen components\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Focus-Aware StatusBar Component in React Native using JavaScript\nDESCRIPTION: Defines a `FocusAwareStatusBar` component using React and React Navigation's `useIsFocused` hook. This component ensures that the `StatusBar` configuration is applied only when the corresponding screen is focused, preventing conflicts in Tab or Drawer navigators where multiple screens might be rendered. It accepts and forwards props to the underlying React Native `StatusBar` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { StatusBar } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction FocusAwareStatusBar(props) {\n  const isFocused = useIsFocused();\n\n  return isFocused ? <StatusBar {...props} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab View Scene Rendering in React Native\nDESCRIPTION: Example of a custom renderScene function for TabView, demonstrating how to handle different routes and pass additional props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'first':\n      return <FirstRoute foo={this.props.foo} />;\n    case 'second':\n      return <SecondRoute />;\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Expressing State from Deep Link Path and Query (React Navigation, JavaScript)\nDESCRIPTION: This snippet demonstrates how a URL path and query string is converted into a navigation state object pattern by React Navigation. Such state objects are used internally, representing navigators and params. No dependencies are required for the example itself, but such state objects are returned from React Navigation's path-to-state conversion or when handling deep links.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'rooms',\n      state: {\n        routes: [\n          {\n            name: 'chat',\n            params: { user: 'jane' },\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Specific Safe Area Insets for More Control\nDESCRIPTION: This example demonstrates how to use the useSafeAreaInsets hook to apply only specific insets (top and bottom) for more precise control over layout padding.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/handling-safe-area.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Component for a Screen\nDESCRIPTION: Basic example of how to specify a React component to render for a screen using the component prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen name=\"Profile\" component={ProfileScreen} />\n```\n\n----------------------------------------\n\nTITLE: Correctly Defining Navigation Screen Component at Top Level - JavaScript\nDESCRIPTION: Illustrates the recommended approach of defining screen components at the top-level scope or importing them before passing them to navigation. This prevents remounting issues by keeping the component identity stable across renders. Dependencies include React, React Navigation, and SomeComponent. Ensures state is maintained as expected during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Home = () => {\n  return <SomeComponent />;\n};\n\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\\\"Home\\\" component={Home} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Screen Options in React Navigation\nDESCRIPTION: Demonstrates how to configure screen options using the static navigation API. Shows setup of a stack navigator with custom screen titles for Home and Profile screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'Awesome app',\n      },\n    },\n    Profile: {\n      screen: ProfileScreen,\n      options: {\n        title: 'My profile',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for Custom URL Scheme Handling (XML)\nDESCRIPTION: Shows how to manually add an `intent-filter` to the `MainActivity` declaration in `AndroidManifest.xml`. This filter registers the app to handle URIs with the specified custom scheme (e.g., 'example') using the `VIEW` action and `BROWSABLE`/`DEFAULT` categories. The `launchMode` is set to `singleTask` to ensure the existing activity instance receives the intent.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Getting Header Title Based on Focused Route (React Navigation/JavaScript)\nDESCRIPTION: This snippet defines a helper function `getHeaderTitle` that uses the `getFocusedRouteNameFromRoute` utility from `@react-navigation/native`. It inspects the `route` object to find the name of the currently focused screen within a nested navigator and returns an appropriate title string based on that name, defaulting to 'Feed' if no route is focused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options-resolution.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getFocusedRouteNameFromRoute } from '@react-navigation/native';\n\nfunction getHeaderTitle(route) {\n  // If the focused route is not found, we need to assume it's the initial screen\n  // This can happen during if there hasn't been any navigation inside the screen\n  // In our case, it's \"Feed\" as that's the first screen inside the navigator\n  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';\n\n  switch (routeName) {\n    case 'Feed':\n      return 'News feed';\n    case 'Profile':\n      return 'My profile';\n    case 'Account':\n      return 'My account';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options with an Object\nDESCRIPTION: Example of how to set screen options using an object to configure how the screen is presented in the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{\n    title: 'Awesome app',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listening to the gestureStart Event - React Navigation (JavaScript)\nDESCRIPTION: Subscribes to the gestureStart event, which triggers when a swipe gesture begins. Uses React's useEffect to add/remove the event listener. The navigation object should be available via props or hooks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Route onto the Navigation Stack (JavaScript)\nDESCRIPTION: This snippet shows how to use the `push` action from `StackActions` to add a new route ('Profile') onto the top of the navigation stack and navigate to it. Unlike `navigate`, `push` always adds a new instance, allowing duplicates. The example creates a `pushAction` specifying the `routeName` and `params` to be passed to the new screen, and then dispatches the action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nconst pushAction = StackActions.push({\n  routeName: 'Profile',\n  params: {\n    myUserId: 9,\n  },\n});\n\nthis.props.navigation.dispatch(pushAction);\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Navigator - Old Static Configuration (JavaScript)\nDESCRIPTION: This code exemplifies the React Navigation 4.x pattern of creating stack navigators using a static object and configuration options. Dependencies include react-navigation-stack. The first argument to createStackNavigator is a routes config object with screens and options; the second is navigator config. Key options: initialRouteName, defaultNavigationOptions. Params and navigationOptions are set statically. Inputs are config objects, output is a navigator component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst RootStack = createStackNavigator(\\n  {\\n    Home: {\\n      screen: HomeScreen,\\n      navigationOptions: { title: 'My app' },\\n    },\\n    Profile: {\\n      screen: ProfileScreen,\\n      params: { user: 'me' },\\n    },\\n  },\\n  {\\n    initialRouteName: 'Home',\\n    defaultNavigationOptions: {\\n      gestureEnabled: false,\\n    },\\n  }\\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Scroll Offset with useScrollToTop\nDESCRIPTION: Demonstrates how to implement custom scroll offset behavior by wrapping the ref in an object with a custom scrollToTop method. This example scrolls to a specific Y position of 100.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-scroll-to-top.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  useScrollToTop(\n    React.useRef({\n      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),\n    })\n  );\n\n  return <ScrollView ref={ref}>{/* content */}</ScrollView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TabActions.jumpTo in React Navigation (Static Configuration)\nDESCRIPTION: This snippet demonstrates how to use TabActions.jumpTo in a React Native app with static navigation configuration. It shows the implementation in a HomeScreen component, creating a jumpTo action to navigate to the Profile screen with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  // highlight-next-line\n  const jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // highlight-next-line\n          navigation.dispatch(jumpToAction);\n        }}\n      >\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to First Screen with PopToTop in React Navigation\nDESCRIPTION: Shows how to use the popToTop action to navigate back to the first screen in the stack, dismissing all other screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screen in TypeScript\nDESCRIPTION: Shows the syntax for navigating to a screen ('Feed') within a nested navigator from a parent navigator ('Home'). It involves passing `screen` and `params` properties within the `navigate` call.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nnavigation.navigate('Home', {\n  screen: 'Feed',\n  params: { sort: 'latest' },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Screen Layout Wrapper - Dynamic Component - JavaScript\nDESCRIPTION: Utilizes the 'screenLayout' prop on <Stack.Navigator> to add error boundaries and suspense fallbacks to each screen. It promotes robust error handling and loading UI for asynchronous loading of screens, leveraging ErrorBoundary and React.Suspense. Requires core and UI dependencies, as well as all navigator scaffolding and style definitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator\\n      // highlight-start\\n      screenLayout={({ children }) => (\\n        <ErrorBoundary>\\n          <React.Suspense\\n            fallback={\\n              <View style={styles.fallback}>\\n                <Text style={styles.text}>Loading‚Ä¶</Text>\\n              </View>\\n            }\\n          >\\n            {children}\\n          </React.Suspense>\\n        </ErrorBoundary>\\n      )}\\n      // highlight-end\\n    >\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Search Bar Options\nDESCRIPTION: Demonstrates setting `headerSearchBarOptions` dynamically using `navigation.setOptions` within a `React.useLayoutEffect` hook. This configuration enables a search bar in the header, allowing customization of properties like `placeholder` and `onChangeText`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nReact.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      placeholder: 'Search',\n      onChangeText: (text) => {\n        // Do something\n      },\n    },\n  });\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Defining Theme-Aware Colors in Static Navigator Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates the recommended way to define theme-dependent colors in static navigator configurations (e.g., `tabBarOptions` for `createBottomTabNavigator`). Color options like `activeTintColor` are specified as objects with `light` and `dark` keys, allowing React Navigation to automatically apply the correct color based on the active theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlet Tabs = createBottomTabNavigator(\n  {\n    /* routes */\n  },\n  {\n    tabBarOptions: {\n      activeTintColor: {\n        light: '#000',\n        dark: '#fff',\n      },\n      inactiveTintColor: {\n        light: 'rgba(0,0,0,0.2)',\n        dark: 'rgba(255,255,255,0.2)',\n      },\n    },\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook with Class Components\nDESCRIPTION: Shows how to wrap a class component with a functional component to utilize the useTheme hook. The theme is passed as a prop to the class component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyButton extends React.Component {\n  render() {\n    // Get it from props\n    const { theme } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const theme = useTheme();\n\n  return <MyButton {...props} theme={theme} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with useRoute in Function Component - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the useRoute hook from @react-navigation/native to access the route object within a functional component. The code imports necessary modules, invokes useRoute, and uses a route parameter (caption) to display text in a React Native Text component. Dependencies include React, React Native, and @react-navigation/native. The key input is the route prop provided by the navigation stack, and the output is the rendered caption text based on route.params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-route.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text } from 'react-native';\nimport { useRoute } from '@react-navigation/native';\n\nfunction MyText() {\n  const route = useRoute();\n\n  return <Text>{route.params.caption}</Text>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using forFade SceneStyleInterpolator in React Navigation (Static)\nDESCRIPTION: This code snippet shows how to use the `forFade` scene style interpolator for a screen transition within a React Navigation Bottom Tab Navigator, utilizing a static configuration.  It imports `SceneStyleInterpolators` from `@react-navigation/bottom-tabs` and sets the `sceneStyleInterpolator` option to `SceneStyleInterpolators.forFade` for the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SceneStyleInterpolators } from '@react-navigation/bottom-tabs';\n\n// ...\n\n{\n  Profile: {\n    screen: Profile,\n    options: {\n      // highlight-start\n      sceneStyleInterpolator: SceneStyleInterpolators.forFade,\n      // highlight-end\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to navigateDeprecated in React Navigation 7\nDESCRIPTION: Illustrates how to use the new navigateDeprecated method as a temporary replacement for navigate, allowing gradual migration to the new navigation behavior in React Navigation 7.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- navigation.navigate('SomeScreen');\n+ navigation.navigateDeprecated('SomeScreen');\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with CommonActions in React Navigation\nDESCRIPTION: Demonstrates how to reset the entire navigation state to a new set of routes. This example resets to two routes ('Profile' with parameters and 'Home'), with the second route being active.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nCommonActions.reset({\n  index: 1,\n  routes: [\n    {\n      name: 'Profile',\n      params: { user: 'jane', key: route.params.key },\n    },\n    { name: 'Home' },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect with Class Components in React Navigation\nDESCRIPTION: Shows how to utilize useFocusEffect in class components by creating a separate functional component for the effect and including it in the class component's render method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-focus-effect.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FetchUserData({ userId, onUpdate }) {\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, onUpdate);\n\n      return () => unsubscribe();\n    }, [userId, onUpdate])\n  );\n\n  return null;\n}\n\n// ...\n\nclass Profile extends React.Component {\n  _handleUpdate = (user) => {\n    // Do something with user object\n  };\n\n  render() {\n    return (\n      <>\n        <FetchUserData\n          userId={this.props.userId}\n          onUpdate={this._handleUpdate}\n        />\n        {/* rest of your code */}\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to transitionStart Navigation Event in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to register a listener for the 'transitionStart' navigation event using React's useEffect hook in a functional component. Requires the React, react-navigation, and navigation object to be accessible. The event handler receives an event object, including a 'closing' boolean in 'e.data.closing'. The unsubscribe function cleans up the listener on component unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\\n    // Do something\\n  });\\n\\n  return unsubscribe;\\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Screen Options via Ref\nDESCRIPTION: Demonstrates how to access the current screen's options using the ref attached to ServerContainer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-container.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = ref.current.getCurrentOptions();\n```\n\n----------------------------------------\n\nTITLE: Using navigation.reset with Partial State in React Navigation (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the `navigation.reset` action with a partial state object. Although the `index` is set to 0, React Navigation will automatically correct it to 1 (the index of the last route, 'Profile') during the state rehydration process, demonstrating the handling of potentially inconsistent partial states.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-state.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnavigation.reset({\n  index: 0,\n  routes: [{ name: 'Home' }, { name: 'Profile' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Nested Navigator Component in JavaScript\nDESCRIPTION: This snippet shows a React component (`FeedScreen`) that renders a bottom tab navigator using React Navigation's dynamic API (`createBottomTabNavigator`). This component is intended to be used as a screen within a parent navigator defined using the static API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\nfunction FeedScreen() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Latest\" component={LatestScreen} />\n      <Tab.Screen name=\"Popular\" component={PopularScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Shared Element Transitions in React Navigation\nDESCRIPTION: Example demonstrating shared element transitions using dynamic navigation configuration with NavigationContainer and Stack.Navigator. Shows how to use Animated components with sharedTransitionTag for cross-screen animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/shared-element-transitions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nimport Animated from 'react-native-reanimated';\n\nconst Stack = createNativeStackNavigator();\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n      <Animated.Image\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\n        style={{ width: 300, height: 300 }}\n        sharedTransitionTag=\"tag\"\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      <Animated.Image\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\n        style={{ width: 100, height: 100 }}\n        sharedTransitionTag=\"tag\"\n      />\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback UI in React Navigation (Static)\nDESCRIPTION: Demonstrates how to specify a fallback React Element (e.g., a loading indicator) using the `fallback` prop on the `<Navigation>` component. This element is displayed while React Navigation resolves initial deep links. Defaults to `null` if not provided.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n<Navigation\n  // highlight-next-line\n  fallback={<Text>Loading...</Text>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Nested Navigator Example with Tab and Stack (JS)\nDESCRIPTION: This example illustrates a nested navigator setup. A Stack Navigator contains a `Home` screen, which in turn contains a Tab Navigator with `Chat` and other screens.  The deep linking configuration needs to reflect this nesting structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n\nfunction HomeScreen() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Chat\" component={ChatScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation State Object for a Catch-All Route (JS)\nDESCRIPTION: This code snippet shows the resulting state object when a catch-all route (NotFound) is matched. It demonstrates how React Navigation represents the state when a user navigates to an invalid URL, with the 'NotFound' route being the active route. This state object can be used to render a custom error page or redirect the user to a valid route. It provides an example of the data structure returned by React Navigation when handling unmatched routes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [{ name: 'NotFound' }],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Getting Header Height with HeaderHeightContext in React Navigation (JavaScript/React)\nDESCRIPTION: Shows how to utilize the `HeaderHeightContext.Consumer` component from `@react-navigation/elements` to retrieve the height of the nearest visible header in the parent screen. This is useful for layout calculations, such as applying appropriate padding. Depends on the `@react-navigation/elements` package. The consumer function receives the `headerHeight` (a number) as an argument.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderHeightContext } from '@react-navigation/elements';\n\n// ...\n\n<HeaderHeightContext.Consumer>\n  {(headerHeight) => {\n    /* render something */\n  }}\n</HeaderHeightContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Drawer Type based on Screen Width in React Navigation\nDESCRIPTION: This example shows how to dynamically set the `drawerType` based on the screen width using the `useWindowDimensions` hook from `react-native`. It configures the drawer to be 'permanent' on large screens (width >= 768) and 'front' on smaller screens. Requires `@react-navigation/drawer` and `react-native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { useWindowDimensions } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  const dimensions = useWindowDimensions();\n\n  return (\n    <Drawer.Navigator\n      screenOptions={{\n        drawerType: dimensions.width >= 768 ? 'permanent' : 'front',\n      }}\n    >\n      {/* Screens */}\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Multiple Navigators in React Navigation\nDESCRIPTION: This snippet shows the correct way to implement multiple navigators. Instead of rendering a navigator inside a screen component, the AuthenticationNavigator is directly used as a screen component in the AppNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/common-mistakes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default App extends React.Component {\n  render() {\n    return <AppNavigator />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  /*\n   * Rather than being rendered by a screen component, the\n   * AuthenticationNavigator is a screen component\n   */\n  Auth: AuthenticationNavigator,\n  Home: HomeScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Events using navigation.addListener (JavaScript)\nDESCRIPTION: This snippet demonstrates how to subscribe to navigation events (such as 'focus') using navigation.addListener within a useEffect hook. It's useful for triggering actions when the screen comes into focus. The effect returns an unsubscribe function to properly clean up the listener. This pattern is based on React Hooks with react-navigation, requiring access to the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile({ navigation }) {\\n  React.useEffect(() => {\\n    const unsubscribe = navigation.addListener('focus', () => {\\n      // do something\\n    });\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  return <ProfileContent />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Stack Navigator in React Navigation\nDESCRIPTION: Example demonstrating how to create a stack navigator using the new static API, defining screens as configuration objects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: Home,\n    },\n    Profile: {\n      screen: Profile,\n    },\n    Settings: {\n      screen: Settings,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Master-Detail Layout with Conditional Drawer Settings in React Navigation\nDESCRIPTION: Shows a more complex example using `useWindowDimensions` to create a master-detail layout. It conditionally sets `drawerType` ('permanent' vs 'back'), `drawerStyle` (null for default width vs '100%'), and sets `defaultStatus=\"open\"` and `overlayColor: 'transparent'` to refine the appearance, particularly on larger screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { useWindowDimensions } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  const dimensions = useWindowDimensions();\n\n  const isLargeScreen = dimensions.width >= 768;\n\n  return (\n    <Drawer.Navigator\n      defaultStatus=\"open\"\n      screenOptions={{\n        drawerType: isLargeScreen ? 'permanent' : 'back',\n        drawerStyle: isLargeScreen ? null : { width: '100%' },\n        overlayColor: 'transparent',\n      }}\n    >\n      {/* Screens */}\n    </Drawer.Navigator>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Assigning an ID Prop to a React Navigation Navigator\nDESCRIPTION: Example demonstrating how to assign a unique `id` prop (e.g., `\"LeftDrawer\"`) to a navigator component, such as `Drawer.Navigator`. This ID allows specific targeting of this navigator instance when using `navigation.getParent(id)` from deeply nested screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<Drawer.Navigator id=\"LeftDrawer\">{/* .. */}</Drawer.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Customizing Shared Element Transitions with Reanimated\nDESCRIPTION: Example showing how to customize shared element transitions using SharedTransition.custom() from react-native-reanimated. Demonstrates customizing animation properties like height, width, and origin points.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/shared-element-transitions.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SharedTransition } from 'react-native-reanimated';\n\nconst customTransition = SharedTransition.custom((values) => {\n  'worklet';\n  return {\n    height: withSpring(values.targetHeight),\n    width: withSpring(values.targetWidth),\n    originX: withSpring(values.targetOriginX),\n    originY: withSpring(values.targetOriginY),\n  };\n});\n\nfunction HomeScreen() {\n  return (\n    <Animated.Image\n      style={{ width: 300, height: 300 }}\n      sharedTransitionTag=\"tag\"\n      sharedTransitionStyle={customTransition}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Components Inside Another Component Leading to Remounts - JavaScript\nDESCRIPTION: Shows an example where the Home component is defined within the App component and used in the navigation stack, leading to remounting issues due to a new component definition on every render. The dependencies are React, React Navigation, and SomeComponent. This pattern should be avoided to maintain component state consistency during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App() {\n  const Home = () => {\n    return <SomeComponent />;\n  };\n\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\\\"Home\\\" component={Home} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RootNavigation module for React Navigation\nDESCRIPTION: This snippet shows how to create a RootNavigation module with a navigation ref and a navigate function. This module can be used to trigger navigation from any JavaScript module.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// RootNavigation.js\n\nimport { createNavigationContainerRef } from '@react-navigation/native';\n\nexport const navigationRef = createNavigationContainerRef();\n\nexport function navigate(name, params) {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate(name, params);\n  }\n}\n\n// add other navigation functions that you need and export them\n```\n\n----------------------------------------\n\nTITLE: Checking Header Visibility with HeaderShownContext.Consumer (JavaScript)\nDESCRIPTION: This shows how to use the HeaderShownContext to access the visibility state of a navigation header using a consumer component. The headerShown boolean can conditionally affect rendering within a header-aware component. Requires React Navigation elements. Outputs UI changes based on headerShown value; no props required.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderShownContext } from '@react-navigation/elements';\n\n// ...\n\n<HeaderShownContext.Consumer>\n  {(headerShown) => {\n    /* render something */\n  }}\n</HeaderShownContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Header and Tab Bar in React Navigation (Static Configuration)\nDESCRIPTION: This example demonstrates how to hide the default header and tab bar in React Navigation with static configuration, which can lead to content being hidden behind device notches and system UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/handling-safe-area.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction Demo() {\n  return (\n    <View\n      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n\nconst MyTabs = createBottomTabNavigator({\n  initialRouteName: 'Analytics',\n  tabBar: () => null,\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Analytics: Demo,\n    Profile: Demo,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Home: MyTabs,\n    Settings: Demo,\n  },\n});\n\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with Simplified Structure\nDESCRIPTION: Example of resetting navigation state using the reset method. This demonstrates how React Navigation allows using partial state objects where the index provided might be automatically corrected.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-state.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnavigation.reset({\n  index: 0,\n  routes: [{ name: 'Home' }, { name: 'Profile' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Elements Library\nDESCRIPTION: Command to install the @react-navigation/elements package which provides components designed to work with React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/elements\n```\n\n----------------------------------------\n\nTITLE: Configuring initialRouteName in React Navigation Deep Linking\nDESCRIPTION: Demonstrates how to use the initialRouteName option to ensure specific routes are present in the navigator state when processing deep links. This example shows a Home navigator with Feed as the initial route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Catalog: {\n          path: 'item/:id',\n          parse: {\n            id: Number,\n          },\n        },\n        Feed: 'feed',\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTheme in Class Components - React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to enable theme access in class components by creating a functional wrapper that injects the current theme via the useTheme hook. The class component consumes the theme as a prop and can use it for custom styling or logic. Dependencies are consistent with other examples: @react-navigation/native must be installed and configured in the project; the approach is compatible with React Native functional and class components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-theme.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyButton extends React.Component {\\n  render() {\\n    // Get it from props\\n    const { theme } = this.props;\\n  }\\n}\\n\\n// Wrap and export\\nexport default function (props) {\\n  const theme = useTheme();\\n\\n  return <MyButton {...props} theme={theme} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation State Object with Initial Route (JS)\nDESCRIPTION: This code snippet displays the state object that results from defining an `initialRouteName`. It showcases how React Navigation represents the state when a specific screen (Feed) is designated as the initial route within a navigator. The example also handles a case where the user navigates to the profile screen with id 42.  This state object can be used for rendering or debugging the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Home',\n      state: {\n        index: 1,\n        routes: [\n          { name: 'Feed' },\n          {\n            name: 'Profile',\n            params: { id: '42' },\n          },\n        ],\n      },\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Theming with React Context\nDESCRIPTION: A complete example of implementing a theme system using React's context API. This snippet demonstrates creating a theme context, theme constants, toggling between themes, and using themed components throughout the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\nconst ThemeContext = React.createContext(null);\nconst ThemeConstants = {\n  light: {\n    backgroundColor: '#fff',\n    fontColor: '#000',\n  },\n  dark: {\n    backgroundColor: '#000',\n    fontColor: '#fff',\n  },\n};\n\nexport default class AppContainer extends React.Component {\n  state = {\n    theme: 'light',\n  };\n\n  toggleTheme = () => {\n    this.setState(({ theme }) => ({\n      theme: theme === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}\n      >\n        <HomeScreen />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <ThemedView\n        style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      >\n        <ThemeContext.Consumer>\n          {({ toggleTheme }) => (\n            <ThemedButton title=\"Toggle theme\" onPress={toggleTheme} />\n          )}\n        </ThemeContext.Consumer>\n      </ThemedView>\n    );\n  }\n}\n\nclass ThemedButton extends React.Component {\n  render() {\n    let { title, ...props } = this.props;\n    return (\n      <TouchableOpacity {...props}>\n        <ThemeContext.Consumer>\n          {({ theme }) => (\n            <Text style={{ color: ThemeConstants[theme].fontColor }}>\n              {title}\n            </Text>\n          )}\n        </ThemeContext.Consumer>\n      </TouchableOpacity>\n    );\n  }\n}\n\nclass ThemedView extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {({ theme }) => (\n          <View\n            {...this.props}\n            style={[\n              this.props.style,\n              { backgroundColor: ThemeConstants[theme].backgroundColor },\n            ]}\n          />\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Route with jumpTo in React Navigation Drawer\nDESCRIPTION: Code example demonstrating how to jump to an existing route in a drawer navigator using the jumpTo action. This method takes a route name and optional parameters to pass to the destination screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nconst jumpToAction = DrawerActions.jumpTo('Profile', { name: 'Satya' });\n\nnavigation.dispatch(jumpToAction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stack Navigator in React Native\nDESCRIPTION: This snippet demonstrates how to create a minimal version of a Stack Navigator with two screens: Feed and Details. It uses the createStackNavigator function from @react-navigation/stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport { Feed } from './feed';\nimport { Details } from './details';\n\nexport const FeedStack = () => {\n  return (\n    <Stack.Navigator initialRouteName=\"Feed\">\n      <Stack.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{ headerTitle: 'Twitter' }}\n      />\n      <Stack.Screen\n        name=\"Details\"\n        component={Details}\n        options={{ headerTitle: 'Tweet' }}\n      />\n    </Stack.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Structure for React Navigation Screens\nDESCRIPTION: Basic configuration for setting up paths for a stack navigator with Home and Profile screens using both static and dynamic approaches.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: ProfileScreen,\n      linking: {\n        path: 'home',\n      },\n    },\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'home',\n    },\n    Profile: 'users/:id',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Navigation State Object for Nested Catch-All Route (JS)\nDESCRIPTION: This code snippet presents the state object resulting from a nested catch-all route. It showcases the hierarchical structure of the state object when a user navigates to an invalid path within a specific route (Settings), which leads to the `InvalidSettings` route being active. This object is helpful for understanding how nested routes and error handling are represented within the React Navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Home',\n      state: {\n        index: 1,\n        routes: [\n          { name: 'Feed' },\n          {\n            name: 'Settings',\n            state: {\n              routes: [{ name: 'InvalidSettings' }],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing back navigation in React Navigation\nDESCRIPTION: This snippet shows how to implement back navigation in React Navigation. It includes buttons for pushing new screens, navigating home, going back, and popping to the top of the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button\n        title=\"Go to Details... again\"\n        onPress={() => navigation.push('Details')}\n      />\n      <Button title=\"Go to Home\" onPress={() => navigation.navigate('Home')} />\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n      <Button\n        title=\"Go back to first screen in stack\"\n        onPress={() => navigation.popToTop()}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Non-Serializable State Warnings\nDESCRIPTION: Shows how to use `LogBox.ignoreLogs` from `react-native` to suppress the specific warning \"Non-serializable values were found in the navigation state\". This should only be used if state persistence and deep linking features impacted by non-serializable params are not required or the implications are understood.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { LogBox } from 'react-native';\n\nLogBox.ignoreLogs([\n  'Non-serializable values were found in the navigation state',\n]);\n```\n\n----------------------------------------\n\nTITLE: Popping to the Top of the Navigation Stack (JavaScript)\nDESCRIPTION: This snippet shows how to use the `popToTop` action from `StackActions` to navigate back to the very first screen in the navigation stack, dismissing all intermediate screens. It directly dispatches `StackActions.popToTop()` without any parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Replacing Navigation State with `reset` in React Navigation using JavaScript\nDESCRIPTION: Shows how to use `navigation.reset` to completely replace the current navigation state. It sets the active route index to 0 and defines a new route stack containing only the 'Profile' screen, discarding the previous navigation history.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnavigation.reset({\n  index: 0,\n  routes: [{ name: 'Profile' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Route to Navigation Stack with StackActions\nDESCRIPTION: Demonstrates using StackActions.push to add a route on top of the stack. Unlike navigate, push always adds a new instance of the route even if it already exists in the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nconst pushAction = StackActions.push('Profile', { user: 'Wojtek' });\n\nnavigation.dispatch(pushAction);\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Navigators for Deep Linking (JavaScript)\nDESCRIPTION: This snippet demonstrates configuring nested stack navigators with path specifications at each level to enable deep linking to nested screens (e.g., \"friends/chat/:user\"). The structure includes AuthSwitch as the root container, an AuthLoadingScreen, nested AppStack and FriendsScreen navigators, and path mappings. Dependencies are multiple screen components and react-navigation. Paths are concatenated to form the full route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst AuthSwitch = createAppContainer(\n  createStackNavigator({\n    AuthLoading: { screen: AuthLoadingScreen },\n    App: {\n      screen: AppStack,\n      path: '',\n    },\n    Auth: { screen: AuthStack },\n  })\n);\n\nconst AppStack = createStackNavigator({\n  Home: { screen: HomeScreen },\n  Friends: {\n    screen: FriendsScreen,\n    path: 'friends',\n  },\n});\n\nconst FriendsScreen = createStackNavigator({\n  Overview: { screen: OverviewScreen },\n  Chat: {\n    screen: ChatScreen,\n    path: 'chat/:user',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Focus and Blur Event Listeners in Function Component\nDESCRIPTION: Implementation of focus and blur event listeners using React hooks in a functional component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // Screen was focused\n    });\n    return unsubscribe;\n  }, [navigation]);\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('blur', () => {\n      // Screen was unfocused\n    });\n    return unsubscribe;\n  }, [navigation]);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Header Title Implementation (Static)\nDESCRIPTION: Illustrates the incorrect way to define the `headerTitle` option in a static native stack navigator configuration. It directly assigns a React component (`MyTitle`) to the `headerTitle` property, which can lead to \"Invalid hook call\" errors. The correct way is to pass a function that returns a React element.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: Home,\n      options: {\n        // This is not correct\n        // highlight-next-line\n        headerTitle: MyTitle,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Bottom Tab Navigator Using Custom Views in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to re-implement and extend the Bottom Tab Navigator by composing built-in navigation logic and exposing BottomTabView as the UI layer in a new navigator. It leverages React Navigation's useNavigationBuilder and createNavigatorFactory, while accepting and forwarding relevant props for customization. This approach enables adding new features or behaviors by customizing routing, screen options, or event handling. Dependencies include '@react-navigation/native', '@react-navigation/bottom-tabs', and 'react'. The implementation is flexible, but limited by the requirement to keep the API compatible with BottomTabView.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  useNavigationBuilder,\\n  createNavigatorFactory,\\n  TabRouter,\\n} from '@react-navigation/native';\\nimport { BottomTabView } from '@react-navigation/bottom-tabs';\\n\\nfunction BottomTabNavigator({\\n  initialRouteName,\\n  backBehavior,\\n  children,\\n  screenOptions,\\n  ...rest\\n}) {\\n  const { state, descriptors, navigation, NavigationContent } =\\n    useNavigationBuilder(TabRouter, {\\n      initialRouteName,\\n      backBehavior,\\n      children,\\n      screenOptions,\\n    });\\n\\n  return (\\n    <NavigationContent>\\n      <BottomTabView\\n        {...rest}\\n        state={state}\\n        navigation={navigation}\\n        descriptors={descriptors}\\n      />\\n    </NavigationContent>\\n  );\\n}\\n\\nexport default createNavigatorFactory(BottomTabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Drawer Navigator with react-navigation-drawer in JavaScript\nDESCRIPTION: This code demonstrates how to import and use the createDrawerNavigator function from react-navigation-drawer to create a drawer-based navigation structure. It requires react-navigation-drawer installed as a dependency. Two arguments are needed: RouteConfigs (defines routes and their components) and DrawerNavigatorConfig (configuration options for appearance and behavior). The function returns a configured navigator that can be integrated into the app's navigation hierarchy. Inputs are route configuration objects, and the output is a React component for navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDrawerNavigator } from 'react-navigation-drawer';\n\ncreateDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Installing a Missing NPM Dependency\nDESCRIPTION: Installs a specified npm package as a project dependency. This is used to fix 'Unable to resolve module' errors when the error indicates a missing package dependency.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install name-of-the-module\n```\n\n----------------------------------------\n\nTITLE: Applying Themes in navigationOptions via screenProps in React Navigation (JSX)\nDESCRIPTION: This snippet demonstrates using the `screenProps` property to pass the current theme to navigationOptions in a stack navigator. It defines a HomeScreen component with navigationOptions dynamically reading colors from ThemeConstants via screenProps, ensuring that header style updates with theme changes. The navigation stack is set up with `createStackNavigator` and `createAppContainer`, and theme toggling is provided through context. Dependencies include react-navigation, React, and React Native. The input is the current theme; the output is the styled navigation bar that updates on theme change.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n  createAppContainer,\n  createStackNavigator,\n  ThemeContext,\n} from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ screenProps }) => {\n    let currentTheme = ThemeConstants[screenProps.theme];\n\n    return {\n      title: 'Home',\n      headerTintColor: currentTheme.fontColor,\n      headerStyle: { backgroundColor: currentTheme.backgroundColor },\n    };\n  };\n\n  render() {\n    return (\n      <ThemedView\n        style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      >\n        <ThemeContext.Consumer>\n          {({ toggleTheme }) => (\n            <ThemedButton title=\"Toggle theme\" onPress={toggleTheme} />\n          )}\n        </ThemeContext.Consumer>\n      </ThemedView>\n    );\n  }\n}\n\nconst Stack = createStackNavigator({ Home: HomeScreen });\nconst Navigation = createAppContainer(Stack);\n\nexport default class AppContainer extends React.Component {\n  state = {\n    theme: 'light',\n  };\n\n  toggleTheme = () => {\n    this.setState(({ theme }) => ({\n      theme: theme === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}\n      >\n        <Navigation screenProps={{ theme: this.state.theme }} />\n      </ThemeContext.Provider>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using navigate with pop Option in React Navigation 7\nDESCRIPTION: Shows how to achieve behavior similar to the old navigate method by using the pop option in the new navigate method in React Navigation 7.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- navigation.navigate('PreviousScreen', { foo: 42 });\n+ navigation.navigate('PreviousScreen', { foo: 42 }, { pop: true });\n```\n\n----------------------------------------\n\nTITLE: Styling Drawer Item Labels in React Navigation\nDESCRIPTION: Example of using the `drawerLabelStyle` option, likely within `screenOptions` or screen-specific `options`, to apply custom text styles (like color, font size, font family) specifically to the label `Text` component within each drawer item.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n   drawerLabelStyle: {\n      color: 'black',\n      fontSize: 20,\n      fontFamily: 'Georgia',\n    },\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators Statically with React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates defining a nested navigation structure using React Navigation's static configuration approach. It creates stack navigators for Feed and Profile screens, nests them within a bottom tab navigator (`HomeTabs`), and places this tab navigator within a root stack navigator alongside a Settings screen. The entire structure is then passed to `createStaticNavigation` for rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeedStackScreen = createNativeStackNavigator({\n  screens: {\n    Feed: FeedScreen,\n    /* other screens */\n  },\n});\n\nconst ProfileStackScreen = createNativeStackNavigator({\n  screens: {\n    Profile: ProfileScreen,\n    /* other screens */\n  },\n});\n\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: FeedStackScreen,\n    Profile: ProfileStackScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeTabs,\n    Settings: SettingsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Blocking Navigation Actions in a Stack Router\nDESCRIPTION: This snippet demonstrates how to create a custom Stack Router that prevents navigation when certain conditions are met. It checks if a route has 'isEditing' set to true and blocks pushing new screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackRouter } from '@react-navigation/native';\n\nconst MyStackRouter = (options) => {\n  const router = StackRouter(options);\n\n  return {\n    ...router,\n    getStateForAction(state, action, options) {\n      const result = router.getStateForAction(state, action, options);\n\n      if (\n        result != null &&\n        result.index > state.index &&\n        state.routes[state.index].params?.isEditing\n      ) {\n        // Returning the current state means that the action has been handled, but we don't have a new state\n        return state;\n      }\n\n      return result;\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Annotating Navigator Options Object in TypeScript\nDESCRIPTION: Illustrates how to annotate a standalone options object using the specific options type exported by the navigator package, such as `StackNavigationOptions` from `@react-navigation/stack`. This is useful when extracting options into separate variables or functions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { StackNavigationOptions } from '@react-navigation/stack';\n\nconst options: StackNavigationOptions = {\n  headerShown: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Popping Screens from Stack with StackActions in React Native (JavaScript)\nDESCRIPTION: Uses `StackActions.pop` to navigate back one screen in the stack. The `pop` action optionally accepts a count argument to specify how many screens to pop. Here, it creates an action to pop one screen and dispatches it using the `navigation` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nconst popAction = StackActions.pop(1);\n\nnavigation.dispatch(popAction);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Drawer Actions in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to import the `DrawerActions` object from the `react-navigation-drawer` library. It then demonstrates dispatching the `toggleDrawer` action via the `navigation` prop, typically available within a React component connected to a React Navigation navigator. This action toggles the visibility state of the drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { DrawerActions } from 'react-navigation-drawer';\n\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Enable Fake Timers in Jest for React Navigation Tests\nDESCRIPTION: This JavaScript snippet enables fake timers in Jest. This allows for simulating the passage of time, which is essential when testing components with animations, such as navigation transitions in React Navigation. Using fake timers speeds up the tests by allowing instant skipping of animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers();\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Screens using getId in JavaScript\nDESCRIPTION: Shows how `getId` can ensure a screen with a specific ID doesn't appear multiple times in the stack. Navigating to a screen whose name and ID (derived from params via `getId`) already exists will navigate to the existing instance, potentially removing screens pushed after it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Let's say you have a stack with the screens: `Home` -> `Profile` with `userId: 1` -> `Settings`\n// Then you navigate to `Profile` screen with `userId: 1` again\nnavigation.navigate('Profile', { userId: 1 });\n\n// Now the stack will have: `Home` -> `Profile` with `userId: 1`\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer Ref with useRef in TypeScript\nDESCRIPTION: Shows how to type the `ref` for a `NavigationContainer` component when using the `React.useRef` hook. It uses the `NavigationContainerRef` type imported from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport { NavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef = React.useRef<NavigationContainerRef>(null);\n```\n\n----------------------------------------\n\nTITLE: Complete Material Bottom Tab Navigator Example with Icons\nDESCRIPTION: Comprehensive example showing a Material Bottom Tab Navigator with three tabs (Feed, Notifications, Profile), custom icons using MaterialCommunityIcons, custom labels, and styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-bottom-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      activeColor=\"#e91e63\"\n      barStyle={{ backgroundColor: 'tomato' }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{\n          tabBarLabel: 'Updates',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"bell\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"account\" color={color} size={26} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Drawer Progress in Class Components\nDESCRIPTION: Shows how to access the drawer progress value within a React class component using `DrawerProgressContext` from `react-native-drawer-layout`. By setting the static `contextType` property, the progress value (a Reanimated `SharedValue` on native, a mock value on web) becomes available via `this.context`. This allows class components to react to drawer state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { DrawerProgressContext } from 'react-native-drawer-layout';\n\n// ...\n\nclass MyComponent extends React.Component {\n  static contextType = DrawerProgressContext;\n\n  render() {\n    const progress = this.context;\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State in React Navigation (Static Config)\nDESCRIPTION: Demonstrates how to use the CommonActions.reset() method to reset the navigation state in a React Navigation app with static configuration. The example shows resetting the state to include a Profile screen and a Home screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(\n  CommonActions.reset({\n    index: 1,\n    routes: [\n      {\n        name: 'Profile',\n        params: { user: 'jane', key: route.params.key },\n      },\n      { name: 'Home' },\n    ],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Passing keyboardHandlingEnabled Option in Stack.Navigator - JavaScript\nDESCRIPTION: This code shows how to move the 'keyboardHandlingEnabled' option from a prop on Stack.Navigator to the 'screenOptions' property, in line with React Navigation 6.x changes. This applies the option to all contained screens. Dependencies: React Navigation 6.x and @react-navigation/stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Navigator screenOptions={{ keyboardHandlingEnabled: false }}>\n  <Stack.Screen name=\"Home\" component={Home} />\n  <Stack.Screen name=\"Profile\" component={Profile} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Correctly Integrating Sub-Navigators in React Navigation (JavaScript)\nDESCRIPTION: Illustrates the recommended pattern for including a sub-navigator (`AuthenticationNavigator`) directly as a screen component within a parent navigator (`AppNavigator`). This method ensures proper navigation state management and allows seamless interaction between the parent and child navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/common-mistakes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  /*\n   * Rather than being rendered by a screen component, the\n   * AuthenticationNavigator is a screen component\n   */\n  Auth: AuthenticationNavigator,\n  Home: HomeScreen,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Navigation Container with Conditional Screens (React)\nDESCRIPTION: This snippet demonstrates how to conditionally render screens within a `NavigationContainer` based on the authentication state. It uses the `state` object from the authentication context to determine which screens to display. A loading screen (`SplashScreen`) is shown while the token is being checked. If no token is found, the `SignInScreen` is displayed. Otherwise, the `HomeScreen` is shown.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer>\n        <Stack.Navigator>\n          {state.isLoading ? (\n            // We haven't finished checking for the token yet\n            <Stack.Screen name=\"Splash\" component={SplashScreen} />\n          ) : state.userToken == null ? (\n            // No token found, user isn't signed in\n            <Stack.Screen\n              name=\"SignIn\"\n              component={SignInScreen}\n              options={{\n                title: 'Sign in',\n                // When logging out, a pop animation feels intuitive\n                animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n              }}\n            />\n          ) : (\n            // User is signed in\n            <Stack.Screen name=\"Home\" component={HomeScreen} />\n          )}\n        </Stack.Navigator>\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links on Android using adb or uri-scheme\nDESCRIPTION: Bash commands for testing Android deep linking after configuration. These commands demonstrate how to use adb or the uri-scheme package to open the app with a test deep link.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open example://chat/jane --android\n\n# or use adb directly:\n\nadb shell am start -W -a android.intent.action.VIEW -d \"example://chat/jane\" com.simpleapp\n```\n\n----------------------------------------\n\nTITLE: Defining a Transparent Modal Screen in React Navigation Stack (JavaScript/JSX)\nDESCRIPTION: Illustrates how to configure a `Stack.Screen` within a `Stack.Navigator` to behave as a transparent modal. This is achieved by setting the `presentation` option to `'transparentModal'`, allowing the underlying screen to remain visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeStack} />\n  <Stack.Screen\n    name=\"Modal\"\n    component={ModalScreen}\n    options={{ presentation: 'transparentModal' }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Configuring MainActivity for Android (Kotlin)\nDESCRIPTION: Kotlin code snippet to configure MainActivity for proper functioning of react-native-screens on Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity: ReactActivity() {\n  // ...\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(null)\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StatusBar per Screen in React Native Components (JSX)\nDESCRIPTION: Shows how to define React Native components (`Screen1`, `Screen2`) that directly render the `StatusBar` component with route-specific configurations (barStyle, backgroundColor). This approach is suitable for stack or drawer navigators where only one screen is typically active at a time. Requires `React` and components from `react-native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Screen1 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n        <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen2')}\n          color={isAndroid ? 'blue' : '#fff'}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Navigation with React Navigation in React.js\nDESCRIPTION: Demonstrates setting up web-based navigation using React Navigation's createBrowserApp and Link components. Shows how to create routes, define navigation paths, and use the Link component for client-side navigation with URL parameter support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-17-react-navigation-3.0.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSwitchNavigator } from \"@react-navigation/core\";\nimport { createBrowserApp, Link } from \"@react-navigation/web\";\n\nclass Home extends React.Component {\n  static path = \"\";\n  static navigationOptions = {\n    title: \"Home\",\n  };\n  render () {\n    return (\n      <div>\n        <h2>Home Screen</h2>\n        <Link toRoute=\"Profile\" params={{ name: \"Brent\", view: \"photos\" }}>\n          Brent's photos\n        </Link>\n      </div>\n    );\n  }\n}\nclass Profile extends React.Component {\n  static path = \"/profile/:name\";\n  ...\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Home,\n  Profile,\n});\n\nconst App = createBrowserApp(AppNavigator);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header in Stack Navigator\nDESCRIPTION: Code example showing how to implement a custom header for Stack Navigator screens by defining a header function that returns a custom component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nheader: ({ scene, previous, navigation }) => {\n  const { options } = scene.descriptor;\n  const title =\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n        ? options.title\n        : scene.route.name;\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        previous ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Material Top Tabs Navigator\nDESCRIPTION: Minimal implementation of the Material Top Tabs Navigator with two screens. This example demonstrates how to create a tab navigator and define routes within it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst Tab = createMaterialTopTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Default and Dark Themes in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to import the built-in `DefaultTheme` and `DarkTheme` provided by React Navigation (`@react-navigation/native`). These themes offer pre-configured light and dark mode styles consistent with OS defaults.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tab Bar for Material Top Tabs\nDESCRIPTION: Example of implementing a custom tab bar component for Material Top Tabs Navigator with custom styling and behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Animated, View, TouchableOpacity, Platform } from 'react-native';\nimport { useLinkBuilder, useTheme } from '@react-navigation/native';\n\nfunction MyTabBar({ state, descriptors, navigation, position }) {\n  const { colors } = useTheme();\n  const { buildHref } = useLinkBuilder();\n\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n              ? options.title\n              : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name, route.params);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        const inputRange = state.routes.map((_, i) => i);\n        const opacity = position.interpolate({\n          inputRange,\n          outputRange: inputRange.map((i) => (i === index ? 1 : 0)),\n        });\n\n        return (\n          <TouchableOpacity\n            href={buildHref(route.name, route.params)}\n            accessibilityRole={Platform.OS === 'web' ? 'link' : 'button'}\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarButtonTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Animated.Text style={{ opacity, color: colors.text }}>\n              {label}\n            </Animated.Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\n// ...\n\n<Tab.Navigator tabBar={(props) => <MyTabBar {...props} />}>\n  {/* ... */}\n</Tab.Navigator>;\n```\n\n----------------------------------------\n\nTITLE: Lazy-Loading Screen Components with getComponent\nDESCRIPTION: Example of using getComponent to lazily load a screen component, which is useful for improving initial load performance with RAM bundles.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  getComponent={() => require('./ProfileScreen').default}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding URL Scheme to iOS Project\nDESCRIPTION: Command to add a URL scheme to an iOS project using the uri-scheme package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme add example --ios\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Stack Navigator in TypeScript\nDESCRIPTION: Imports `createStackNavigator` from `@react-navigation/stack` and uses it to create a navigator instance (`RootStack`). It passes the previously defined `RootStackParamList` as a generic type parameter to enable type checking for this navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst RootStack = createStackNavigator<RootStackParamList>();\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Screen Events with the Listeners Prop in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to attach listeners to a Tab.Screen in React Navigation using the listeners prop. The example attaches a tabPress listener, preventing default tab behavior and programmatically navigating to a different screen. Dependencies: React Navigation v5.x+, a Tab.Navigator setup. Key parameters are navigation and route. Use cases include custom navigation behavior and overriding tab presses for analytics, permissions, etc.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Screen\\n  name=\\\"Chat\\\"\\n  component={Chat}\\n  listeners={({ navigation, route }) => ({\\n    tabPress: (e) => {\\n      // Prevent default action\\n      e.preventDefault();\\n\\n      // Do something with the `navigation` object\\n      navigation.navigate('AnotherPlace');\\n    },\\n  })}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CommonActions.goBack with Static Configuration in React Native\nDESCRIPTION: This snippet demonstrates how to use the `CommonActions.goBack()` action creator with `navigation.dispatch` to navigate to the previous screen in a stack navigator configured using `createStaticNavigation`. It requires `@react-navigation/native`, `@react-navigation/stack`, `@react-navigation/elements`, `react`, and `react-native`. The example shows a 'Go back' button in the `HomeScreen` triggering the action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Common actions goBack\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  CommonActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(CommonActions.goBack());\n          // codeblock-focus-end\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Integrating a Custom Router in React Navigation (JavaScript)\nDESCRIPTION: This code example demonstrates how to define a custom router object compatible with the React Navigation router interface, implementing methods to handle state, actions, and route-to-component mapping. It also illustrates integrating the custom router into a navigator by attaching it as a static property to a React component. The main dependencies are React and React Navigation. The router requires you to implement handler methods such as getStateForAction, getActionForPathAndParams, and others that control navigation flow and linking between routes and UI components. Key parameters include action (for navigation dispatch), state (for current navigation state), path, params, and routeName. The custom navigator component will utilize this router to manage navigation state in an application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyRouter = {\n  getStateForAction: (action, state) => ({}),\n  getActionForPathAndParams: (path, params) => null,\n  getPathAndParamsForState: (state) => null,\n  getComponentForState: (state) => MyScreen,\n  getComponentForRouteName: (routeName) => MyScreen,\n};\n\n// Now, you can make a navigator by putting the router on it:\nclass MyNavigator extends React.Component {\n  static router = MyRouter;\n  render() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting goBack Action with Static Configuration in React Native\nDESCRIPTION: This snippet demonstrates how to target the `goBack` action to a specific navigator using the `source` (route key) and `target` (navigator key) properties within the dispatched action object. This is useful in nested navigation scenarios. The example uses static configuration with `createStaticNavigation` and shows the targeted call within the `ProfileScreen`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Common actions goBack\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  CommonActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n      <Button onPress={() => navigation.dispatch(CommonActions.goBack())}>\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(CommonActions.navigate('Home'));\n        }}\n      >\n        Navigate to Home\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.reset({\n              index: 1,\n              routes: [\n                {\n                  name: 'Profile',\n                  params: { user: 'jane', key: route.params.key },\n                },\n                { name: 'Home' },\n              ],\n            })\n          );\n        }}\n      >\n        Reset navigation state\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch({\n            ...CommonActions.setParams({ user: 'Wojtek' }),\n            source: route.key,\n          });\n        }}\n      >\n        Change user param\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch({\n            ...CommonActions.goBack(),\n            source: route.key,\n            target: route?.params?.key,\n          });\n          // codeblock-focus-end\n        }}\n      >\n        Go back\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using useRoute with Class Components via a Wrapper Function (JavaScript)\nDESCRIPTION: Shows a pattern for using the `useRoute` hook with React class components. Since hooks cannot be called directly in classes, a function component wrapper (`export default function`) is created. This wrapper calls `useRoute` and passes the obtained `route` object as a prop to the underlying class component (`MyText`). The class component then accesses the `route` object via `this.props.route`. Requires React and `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-route.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nclass MyText extends React.Component {\n  render() {\n    // Get it from props\n    const { route } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const route = useRoute();\n\n  return <MyText {...props} route={route} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Navigator Type Definition - TypeScript\nDESCRIPTION: Specifies the param list for a nested navigator explicitly to ensure type safety when using the dynamic API. This involves defining the types for the `route` prop the screen component receives and using `NavigatorScreenParams`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype HomeTabsParamList = {\n  Feed: undefined;\n  Profile: undefined;\n};\n\n// highlight-start\ntype HomeTabsProps = StaticScreenProps<\n  NavigatorScreenParams<HomeTabsParamList>\n>;\n// highlight-end\n\n// highlight-next-line\nfunction HomeTabs(_: HomeTabsProps) {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods for Bare React Native >= 0.60 (Bash)\nDESCRIPTION: Navigates into the `ios` directory, installs necessary Cocoapods dependencies using `pod install`, and returns to the project root. This step completes the native linking process for iOS in React Native 0.60+ projects on macOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ios; pod install; cd ..\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Pop Action in React Navigation (Static)\nDESCRIPTION: This snippet demonstrates how to use the pop action in a static navigation configuration. It shows a ProfileScreen with buttons to pop one screen, push the same screen, or pop to the top of the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(StackActions.pop(1));\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation State Changes with addListener ‚Äì 'state' Event (React Navigation, JavaScript)\nDESCRIPTION: Registers an event listener for navigation state changes using addListener with the 'state' event on the navigation ref. The listener receives a partial state object, and may access the full state via getRootState. Returns an unsubscribe function for cleanup. Useful for logging, analytics, or persisting navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = navigationRef.addListener('state', (e) => {\\n  // You can get the raw navigation state (partial state object of the root navigator)\\n  console.log(e.data.state);\\n\\n  // Or get the full state object with `getRootState()`\\n  console.log(navigationRef.getRootState());\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Shadow Visibility in React Navigation\nDESCRIPTION: This snippet demonstrates how to hide the elevation shadow or bottom border on the header using the headerShadowVisible option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  elevation: 0,\n  shadowOpacity: 0,\n  borderBottomWidth: 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Routes in Deep Linking\nDESCRIPTION: Example of how to define initialRouteName in a navigator when configuring deep linking, allowing proper back navigation behavior between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    HomeStack: {\n      initialRouteName: 'Profile',\n      screens: {\n        Home: 'home',\n        Profile: 'user',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Screen Options via Ref with ServerContainer (JS)\nDESCRIPTION: Shows how to retrieve the navigation options for the currently focused screen after server rendering. By attaching a ref to `ServerContainer`, you can call the `getCurrentOptions()` method on the ref's `current` property to get an object containing screen options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-container.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst options = ref.current.getCurrentOptions();\n```\n\n----------------------------------------\n\nTITLE: Defining Component Outside Component (Static)\nDESCRIPTION: Demonstrates the correct way to define a screen component outside of the `App` component to prevent unnecessary unmounting and remounting. The `Home` component is defined at the top level and then used within the `Stack.Screen` configuration. This approach promotes stability and proper state management.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = () => {\n  // ...\n\n  return <SomeComponent />;\n};\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: Home,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nfunction App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Bottom Tab Navigator in React Native\nDESCRIPTION: Demonstrates the minimal setup for creating a bottom tab navigator. It imports `createBottomTabNavigator`, creates a `Tab` navigator instance, and defines a `MyTabs` component containing two screens ('Home' and 'Settings') wrapped within `Tab.Navigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Drawer Header Using Options in React Navigation (JavaScript)\nDESCRIPTION: Shows how to override the default header for Drawer Navigator screens by providing a function to the header option. Depends on a custom MyHeader component and DrawerToggleButton; expects scene.descriptor to contain options and navigation props. Accepts scene as argument, computes the header title from options or route name, and injects a custom left button to toggle the drawer. Output is a custom header per screen, and all style and functional props are passed manually.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nheader: ({ scene }) => {\n  const { options } = scene.descriptor;\n  const title =\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n        ? options.title\n        : scene.route.name;\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        <DrawerToggleButton\n          onPress={scene.descriptor.navigation.toggleDrawer}\n        />\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating Back to a Specific Screen Instance by Key using React Navigation in JavaScript\nDESCRIPTION: Illustrates navigating back to a specific screen instance identified by its `key` (`SCREEN_KEY_A`) using `navigation.navigate`. This allows jumping back multiple steps in the stack to a known screen instance, effectively popping intermediate screens (D, C, B in the example context).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate({ key: SCREEN_KEY_A }); // will go to screen A FROM screen D\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Transition Modes in React Navigation Stack\nDESCRIPTION: Demonstrates how to configure different transition modes (modal or card) for specific screens in a stack navigator using custom transition configuration. Uses a predefined list of routes that should use modal transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStackNavigator,\n  StackViewTransitionConfigs,\n} from 'react-navigation';\n\n/* The screens you add to IOS_MODAL_ROUTES will have the modal transition.  */\nconst IOS_MODAL_ROUTES = ['OptionsScreen'];\n\nlet dynamicModalTransition = (transitionProps, prevTransitionProps) => {\n  const isModal = IOS_MODAL_ROUTES.some(\n    (screenName) =>\n      screenName === transitionProps.scene.route.routeName ||\n      (prevTransitionProps &&\n        screenName === prevTransitionProps.scene.route.routeName)\n  );\n  return StackViewTransitionConfigs.defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n};\n\nconst HomeStack = createStackNavigator(\n  { DetailScreen, HomeScreen, OptionsScreen },\n  { initialRouteName: 'HomeScreen', transitionConfig: dynamicModalTransition }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Static Transition Spec for Bottom Tab in React Navigation\nDESCRIPTION: This code snippet shows how to configure the `transitionSpec` option for a specific screen within a React Navigation Bottom Tab Navigator using a static configuration.  It defines a custom transition animation using the 'timing' animation type with a specified duration and easing function.  This configuration is applied to the 'Profile' screen's options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Profile: {\n    screen: Profile,\n    options: {\n      // highlight-start\n      transitionSpec: {\n        animation: 'timing',\n        config: {\n          duration: 150,\n          easing: Easing.inOut(Easing.ease),\n        },\n      },\n      // highlight-end\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux DevTools Extension\nDESCRIPTION: Example showing how to implement Redux DevTools Extension integration in a React Navigation app using the useReduxDevToolsExtension hook.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/devtools.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  NavigationContainer,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n\n  useReduxDevToolsExtension(navigationRef);\n\n  return (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions in React Navigation\nDESCRIPTION: Demonstrates how to use the dispatch method to send navigation actions. It shows importing CommonActions and using it to navigate to a Profile screen with optional parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  CommonActions.navigate({\n    name: 'Profile',\n    params: {},\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback UI in React Navigation (Dynamic)\nDESCRIPTION: Demonstrates how to specify a fallback React Element (e.g., a loading indicator) using the `fallback` prop on the `<NavigationContainer>` component. This element is displayed while React Navigation resolves initial deep links. Defaults to `null` if not provided.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n<NavigationContainer\n  // highlight-next-line\n  fallback={<Text>Loading...</Text>}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Implementing useSafeAreaInsets Hook with Static Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to use the useSafeAreaInsets hook from react-native-safe-area-context to apply safe area padding to a component. It shows the setup for static navigation using createStaticNavigation and wraps the app in SafeAreaProvider.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/handling-safe-area.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// codeblock-focus-start\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst MyTabs = createBottomTabNavigator({\n  initialRouteName: 'Analytics',\n  tabBar: () => null,\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Analytics: Demo,\n    Profile: Demo,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screenOptions: {\n    headerShown: false,\n  },\n  screens: {\n    Home: MyTabs,\n    Settings: Demo,\n  },\n});\n\n// codeblock-focus-start\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <Navigation />\n    </SafeAreaProvider>\n  );\n}\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Combining React Navigation and React Native Paper Themes (JSX)\nDESCRIPTION: This snippet illustrates how to merge the theme objects from React Navigation and React Native Paper into a single, combined theme. It uses the spread operator to merge properties from `NavigationDarkTheme` and `PaperDarkTheme`, specifically deep-merging the `colors` object. This `CombinedDarkTheme` is then passed to both `PaperProvider` and `NavigationContainer` for consistent styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  NavigationContainer,\n  DarkTheme as NavigationDarkTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  Provider as PaperProvider,\n} from 'react-native-paper';\n\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: { ...PaperDarkTheme.colors, ...NavigationDarkTheme.colors },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={CombinedDarkTheme}>\n      <NavigationContainer theme={CombinedDarkTheme}>\n        {/* content */}\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Navigation with Dynamic Configuration in React Navigation\nDESCRIPTION: This snippet shows how to implement an independent navigation tree using the dynamic configuration approach in React Navigation. It wraps a NavigationContainer component inside NavigationIndependentTree to create a nested navigation container that's isolated from the parent.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  NavigationContainer,\n  NavigationIndependentTree,\n} from '@react-navigation/native';\n\nfunction NestedApp() {\n  return (\n    // highlight-start\n    <NavigationIndependentTree>\n      <NavigationContainer>{/* content */}</NavigationContainer>\n    </NavigationIndependentTree>\n    // highlight-end\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Focus Events (Dynamic Config) in React Native\nDESCRIPTION: Shows how to use the `navigation.addListener` method within a `React.useEffect` hook to subscribe to the 'focus' event for a screen in a dynamically configured React Navigation setup using `NavigationContainer` and `Tab.Navigator`. An alert confirms focus, and the listener is properly unsubscribed on component unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/function-after-focusing-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// codeblock-focus-start\nimport * as React from 'react';\nimport { View } from 'react-native';\n\n// codeblock-focus-end\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      alert('Screen is focused');\n      // The screen is focused\n      // Call any action\n    });\n\n    // Return the function to unsubscribe from the event so it gets removed on unmount\n    return unsubscribe;\n  }, [navigation]);\n\n  return <View />;}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigator Structure in React Navigation\nDESCRIPTION: This snippet demonstrates how to set up a nested navigation structure with a stack navigator at the root and a tab navigator inside the Home screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Home() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Profile\" component={Profile} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Native Screens for Navigation\nDESCRIPTION: Code snippet showing how to initialize react-native-screens before rendering navigation stacks. This setup enables native screen optimization for better performance and memory usage.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/react-native-screens.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before rendering any navigation stack\nimport { useScreens } from 'react-native-screens';\nuseScreens();\n```\n\n----------------------------------------\n\nTITLE: Migrating Material Bottom Tab Navigator imports\nDESCRIPTION: Shows how to update import statements for Material Bottom Tab Navigator which has moved from @react-navigation/material-bottom-tabs to react-native-paper/react-navigation package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n- import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\n+ import { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect hook for focus-based actions in React Navigation\nDESCRIPTION: This snippet shows how to use the useFocusEffect hook to perform actions when a screen gains focus and clean up when it loses focus. It demonstrates subscribing to an API when focused and unsubscribing when unfocused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/function-after-focusing-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile({ userId }) {\n  const [user, setUser] = React.useState(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, (user) => setUser(data));\n\n      return () => unsubscribe();\n    }, [userId])\n  );\n\n  return <ProfileContent user={user} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TabBar Appearance in TabView (JavaScript/React Native)\nDESCRIPTION: Demonstrates how to customize the TabBar component within a TabView by providing a custom `renderTabBar` function. This function receives the default props, spreads them onto a TabBar component, and overrides styles like `indicatorStyle` (for the active tab indicator) and `style` (for the tab bar background).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst renderTabBar = props => (\n  <TabBar\n    {...props}\n    indicatorStyle={{ backgroundColor: 'white' }}\n    style={{ backgroundColor: 'pink' }}\n  />\n);\n\n//...\n\n\nreturn (\n  <TabView\n    renderTabBar={renderTabBar}\n    ...\n  />\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Navigator Screen Links Using useLinkBuilder (React Navigation, JavaScript)\nDESCRIPTION: Demonstrates how to use the useLinkBuilder hook from @react-navigation/native to generate paths for navigation links dynamically within a custom drawer component. The code imports necessary dependencies, obtains the buildLink function, and uses it to produce <Link /> components corresponding to each screen in the current navigator's routes. Requires @react-navigation/native and a navigator state as input; outputs navigation links correctly tied to local navigator screens. Intended for use within custom navigator UI, not for general application-level routing.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-link-builder.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';\n\n// ...\n\nfunction DrawerContent({ state, descriptors }) {\n  const buildLink = useLinkBuilder();\n\n  return state.routes((route) => (\n    <Link\n      to={buildLink(route.name, route.params)}\n      action={CommonActions.navigate(route.name)}\n    >\n      {descriptors[route.key].options.title}\n    </Link>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Modal Stack Navigator with Custom Screen Transitions in React Navigation (JavaScript)\nDESCRIPTION: This snippet constructs a modal-style stack navigator with custom transition animations by configuring 'transitionConfig' and disabling gestures. Dependencies: React Navigation (createStackNavigator), Animated, Easing, Main and Login components. The configuration sets 'headerMode' to 'none', disables gestures, and defines a transition with a specific duration, easing function, and custom opacity/translation animations for modal transitions. The transition interpolator controls vertical slide and fade effects. Limitations: Relies on Animated/Easing, must be used within a React Native app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst ModalNavigator = createStackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    defaultNavigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: (sceneProps) => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles in React Navigation\nDESCRIPTION: Shows how to customize header appearance by setting headerStyle, headerTintColor, and headerTitleStyle properties in the options object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'My home',\n          headerStyle: {\n            backgroundColor: '#f4511e',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Navigation App on Server with ServerContainer\nDESCRIPTION: Example showing how to use ServerContainer for server-side rendering of a React Navigation app. It demonstrates creating a ref, defining a location object, rendering to string, and accessing current screen options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-container.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Ref which will be populated with the screen options\nconst ref = React.createRef();\n\n// Location object containing the `pathname` and `search` fields of the current URL\nconst location = { pathname: '/profile', search: '?user=jane' };\n\n// Get rendered HTML\nconst html = ReactDOMServer.renderToString(\n  <ServerContainer ref={ref} location={location}>\n    <App />\n  </ServerContainer>\n);\n\n// Then you can access the options for the current screen in the ref\nconst options = ref.current.getCurrentOptions(); // { title: 'My Profile' }\n```\n\n----------------------------------------\n\nTITLE: Setting Params for a Route using NavigationActions in React Navigation\nDESCRIPTION: This example demonstrates how to create and dispatch a setParams action using NavigationActions. It allows updating the parameters of a specific route identified by its key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n```\n\n----------------------------------------\n\nTITLE: Comparing Web Navigation with React Navigation (HTML)\nDESCRIPTION: Provides a conceptual example of a standard HTML anchor tag used for navigating to a different page ('details.html') in traditional web development. This serves as a comparison point for React Navigation's approach.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"details.html\">Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Nesting Stack Navigators with Header Configuration in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to nest one stack navigator inside another in a React Navigation setup, controlling the visibility of headers to avoid duplicates. The outer (RootStack) navigator contains Home and EditPost screens; the Home screen nests another stack (NestedStack) with Profile and Settings screens and applies the \\\"headerShown: false\\\" option to hide the parent header for Home. Dependencies include the React Navigation stack and container components. Input: screen components and navigation structure; Output: a functioning nested navigation flow without extra headers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/nesting-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Home() {\n  return (\n    <NestedStack.Navigator>\n      <NestedStack.Screen name=\"Profile\" component={Profile} />\n      <NestedStack.Screen name=\"Settings\" component={Settings} />\n    </NestedStack.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator mode=\"modal\">\n        <RootStack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ headerShown: false }}\n        />\n        <RootStack.Screen name=\"EditPost\" component={EditPost} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing and Retrieving Parameters in React Navigation\nDESCRIPTION: This code snippet demonstrates how to pass parameters when navigating to a new screen and how to retrieve those parameters in the destination screen. It includes examples of using navigation.navigate() with params and navigation.getParam() to access the passed data.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => {\n            /* 1. Navigate to the Details route with params */\n            this.props.navigation.navigate('Details', {\n              itemId: 86,\n              otherParam: 'anything you want here',\n            });\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nclass DetailsScreen extends React.Component {\n  render() {\n    /* 2. Get the param, provide a fallback value if not available */\n    const { navigation } = this.props;\n    const itemId = navigation.getParam('itemId', 'NO-ID');\n    const otherParam = navigation.getParam('otherParam', 'some default value');\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Text>itemId: {JSON.stringify(itemId)}</Text>\n        <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() =>\n            this.props.navigation.push('Details', {\n              itemId: Math.floor(Math.random() * 100),\n            })\n          }\n        />\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Rendering with React Navigation using ServerContainer\nDESCRIPTION: Example showing how to use the ServerContainer component from React Navigation to render the correct screens based on the request URL. This example uses Koa as the server framework.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\napp.use(async (ctx) => {\n  const location = new URL(ctx.url, 'https://example.org/');\n\n  const { element, getStyleElement } = AppRegistry.getApplication('App');\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={location}>{element}</ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const document = `\n    <!DOCTYPE html>\n    <html style=\"height: 100%\">\n    <meta charset=\"utf-8\">\n    <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\"\n    >\n    ${css}\n    <body style=\"min-height: 100%\">\n    <div id=\"root\" style=\"display: flex; min-height: 100vh\">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Render Scene with Props - React Native JavaScript\nDESCRIPTION: Presents a custom renderScene function that allows passing additional props to route components and handling unknown routes gracefully by returning null. Useful for custom parameterization and fallback behaviors in TabView. The function takes a route and selectively returns specific components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'first':\n      return <FirstRoute foo={this.props.foo} />;\n    case 'second':\n      return <SecondRoute />;\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bare React Native Projects using npm\nDESCRIPTION: Command to install or update `react-native-safe-area-context` and `react-native-screens` using npm in a bare React Native project. These are necessary dependencies for React Navigation 6.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context react-native-screens\n```\n\n----------------------------------------\n\nTITLE: Setting up Navigation Structure with Switch and Stack Navigators\nDESCRIPTION: Creates the basic navigation structure using createSwitchNavigator and createStackNavigator for handling authentication flow. Defines separate stacks for authenticated and non-authenticated routes with an authentication loading screen as the initial route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/auth-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSwitchNavigator, createStackNavigator } from 'react-navigation';\n\nconst AppStack = createStackNavigator({ Home: HomeScreen, Other: OtherScreen });\nconst AuthStack = createStackNavigator({ SignIn: SignInScreen });\n\nexport default createSwitchNavigator(\n  {\n    AuthLoading: AuthLoadingScreen,\n    App: AppStack,\n    Auth: AuthStack,\n  },\n  {\n    initialRouteName: 'AuthLoading',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Native Core Package v6 using npm\nDESCRIPTION: Command to install version 6.x of the core `@react-navigation/native` package using npm. This upgrade is necessary to use React Navigation 6 features and changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native@^6.x\n```\n\n----------------------------------------\n\nTITLE: Using useDrawerProgress Hook with Static Navigation\nDESCRIPTION: This snippet demonstrates using the `useDrawerProgress` hook within a screen component managed by a static drawer navigator (`createStaticNavigation`). It obtains the drawer's animation progress (a Reanimated SharedValue) and uses `useAnimatedStyle` from `react-native-reanimated` to animate a component's style based on the drawer's open/close transition.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport {\n  createDrawerNavigator,\n  useDrawerProgress,\n} from '@react-navigation/drawer';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction HomeScreen() {\n  // highlight-next-line\n  const progress = useDrawerProgress();\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: progress.value * -100 }],\n  }));\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Animated.View\n        style={[\n          {\n            height: 100,\n            aspectRatio: 1,\n            backgroundColor: 'tomato',\n          },\n          animatedStyle,\n        ]}\n      />\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst MyDrawer = createDrawerNavigator({\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(MyDrawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Navigation Emit Helper to Dispatch Custom Events (JavaScript)\nDESCRIPTION: This snippet shows how to emit a custom navigation event from within a navigator using the navigation.emit method as exposed by React Navigation. The emitted event sends a 'transitionStart' event with data to a specific route.key, enabling custom business logic or UI responses per screen. The method accepts a type (event name), data (event payload), and target (route reference). Dependency: React Navigation's navigation helpers. Intended for use inside custom navigator components to trigger events on child screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.emit({\\n  type: 'transitionStart',\\n  data: { blurring: false },\\n  target: route.key,\\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Screen Path and Parse Configuration for useLinking (JavaScript)\nDESCRIPTION: This object literal provides a complex configuration for the `useLinking` hook, showcasing nested navigators and custom param parsing. It defines a nested screen structure, matches the `item/:id` path to the `Catalog` screen, and parses the `id` parameter into a Number. The configuration object controls how URLs map to navigation state, handling route nesting and parameter types. This is used when fine-tuning deep link mappings for advanced React Navigation setups.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  screens: {\\n    Home: {\\n      screens: {\\n        Catalog: {\\n          path: 'item/:id',\\n          parse: {\\n            id: Number,\\n          },\\n        },\\n      },\\n    },\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Drawers with Context API (Dynamic Configuration)\nDESCRIPTION: Example of using React Context API to control multiple drawers independently in React Navigation with dynamic configuration. This approach allows screens to access both drawers while maintaining a clean interface.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/multiple-drawers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useNavigation } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nconst RightDrawerContext = React.createContext();\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const { openRightDrawer } = React.useContext(RightDrawerContext);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open left drawer</Button>\n      <Button onPress={() => openRightDrawer()}>Open right drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  const value = React.useMemo(\n    () => ({\n      openRightDrawer: () => setRightDrawerOpen(true),\n      closeRightDrawer: () => setRightDrawerOpen(false),\n    }),\n    []\n  );\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <RightDrawerContext.Provider value={value}>\n        <LeftDrawerScreen />\n      </RightDrawerContext.Provider>\n    </Drawer>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Stack Navigator Inside Tab Navigator (Tab Bar Always Visible)\nDESCRIPTION: This code shows the initial navigation structure where a Stack Navigator is nested inside a Tab Navigator. In this configuration, the tab bar remains visible on all screens including Profile and Settings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hiding-tabbar-in-screens.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeStack} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n      <Tab.Screen name=\"Notifications\" component={Notifications} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Navigator Example (JS)\nDESCRIPTION: This is a simple example of setting up a Stack Navigator with two screens: `Chat` and `Profile`.  This demonstrates the basic structure to which the linking `config` will map the URL paths.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Chat\" component={ChatScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Screen Props to Stack Navigator Screens in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to pass additional props to all screens in a stack navigator by providing the 'screenProps' prop to the created navigator component. Dependencies: React Navigation (createStackNavigator) and any child screen components that read from this.props.screenProps. 'screenProps' is typically used for injecting global settings or data needed by all screens. Any object provided via the 'screenProps' prop will be available on every screen as this.props.screenProps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst SomeStack = createStackNavigator({\n  // config\n});\n\n<SomeStack\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Back Navigation in React Navigation\nDESCRIPTION: Shows how to create and dispatch a back navigation action using NavigationActions.back(). The action can optionally specify a key to determine which screen to navigate back from.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n```\n\n----------------------------------------\n\nTITLE: Opening a Drawer with DrawerActions in React Navigation\nDESCRIPTION: Code example showing how to open a drawer pane in a drawer-based navigator using the openDrawer action from DrawerActions. This requires importing DrawerActions from @react-navigation/native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nnavigation.dispatch(DrawerActions.openDrawer());\n```\n\n----------------------------------------\n\nTITLE: Header Interaction with Screen Component in React Navigation\nDESCRIPTION: This example shows how to make a header button interact with the screen component using navigation params. It implements a counter that can be incremented by pressing a button in the header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerTitle: <LogoTitle />,\n      headerRight: (\n        <Button\n          onPress={navigation.getParam('increaseCount')}\n          title=\"+1\"\n          color=\"#fff\"\n        />\n      ),\n    };\n  };\n\n  componentDidMount() {\n    this.props.navigation.setParams({ increaseCount: this._increaseCount });\n  }\n\n  state = {\n    count: 0,\n  };\n\n  _increaseCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  /* later in the render function we display the count */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Header Button in React Navigation\nDESCRIPTION: Demonstrates how to add a simple button to the header right section using React Navigation's navigationOptions. Shows implementation of a basic info button with an alert action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    headerTitle: <LogoTitle />,\n    headerRight: (\n      <Button\n        onPress={() => alert('This is a button!')}\n        title=\"Info\"\n        color=\"#fff\"\n      />\n    ),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Event Listeners for Gesture Cancel\nDESCRIPTION: Example of using the gestureCancel event listener with React hooks to detect when a swipe gesture is cancelled without dismissing the screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureCancel', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationService for React Navigation\nDESCRIPTION: This code defines the NavigationService module, which provides functions for navigation. It includes a setTopLevelNavigator function to store the navigator reference, and a navigate function that dispatches navigation actions. This service can be used to navigate from any part of the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// NavigationService.js\n\nimport { NavigationActions } from 'react-navigation';\n\nlet _navigator;\n\nfunction setTopLevelNavigator(navigatorRef) {\n  _navigator = navigatorRef;\n}\n\nfunction navigate(routeName, params) {\n  _navigator.dispatch(\n    NavigationActions.navigate({\n      routeName,\n      params,\n    })\n  );\n}\n\n// add other navigation functions that you need and export them\n\nexport default {\n  navigate,\n  setTopLevelNavigator,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Navigator TransitionPresets\nDESCRIPTION: Demonstrates how to apply iOS modal presentation style transitions to all screens in a stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Navigator\n  initialRouteName=\"Home\"\n  screenOptions={({ route, navigation }) => ({\n    headerShown: false,\n    gestureEnabled: true,\n    ...TransitionPresets.ModalPresentationIOS,\n  })}\n>\n  <Stack.Screen name=\"Home\" component={Home} />\n  <Stack.Screen name=\"Profile\" component={Profile} />\n</Stack.Navigator>;\n```\n\n----------------------------------------\n\nTITLE: Displaying a Loading Indicator During State Restoration\nDESCRIPTION: This JavaScript snippet demonstrates how to display a loading indicator (e.g., `ActivityIndicator`) while the persisted navigation state is being restored asynchronously. It checks the `isReady` state variable; if it's `false`, indicating that state restoration is in progress, it renders the loading component instead of the main app content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/state-persistence.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nif (!isReady) {\n  return <ActivityIndicator />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigator Layout Prop in React Navigation 7\nDESCRIPTION: Example showing how to use the new layout prop for navigators to augment them with additional UI that has access to navigator state and context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator\n  layout={({ children, state, descriptors, navigation }) => (\n    <View style={styles.container}>\n      <Breadcrumbs />\n      {children}\n    </View>\n  )}\n>\n  {/* ... */}\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Listening to Parent Navigator Events in React Navigation (Static Configuration)\nDESCRIPTION: This code demonstrates how to listen to events from a parent navigator in a nested navigation structure using React Navigation's static configuration. It shows how to use navigation.getParent() to access the parent navigator and listen to its events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.navigate('Messages')}>\n        Go to Messages\n      </Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    // codeblock-focus-start\n    const unsubscribe = navigation\n      .getParent('MyTabs')\n      .addListener('tabPress', (e) => {\n        // Do something\n        alert('Tab pressed!');\n      });\n    // codeblock-focus-end\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n    </View>\n  );\n}\n\nconst HomeStack = createNativeStackNavigator({\n  screens: {\n    Feed: FeedScreen,\n    Messages: MessagesScreen,\n  },\n});\n\nconst RootTabs = createBottomTabNavigator({\n  id: 'MyTabs',\n  screens: {\n    Home: {\n      screen: HomeStack,\n      options: {\n        headerShown: false,\n      },\n    },\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nested Stack Navigator in Drawer Navigator in React Navigation\nDESCRIPTION: Example of nesting a Stack Navigator inside a Drawer Navigator. The Root component contains a Stack Navigator with Profile and Settings screens, which is then used as a screen in the Drawer Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/nesting-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Root() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator>\n        <Drawer.Screen name=\"Home\" component={Home} />\n        <Drawer.Screen name=\"Root\" component={Root} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Open State in React Navigation\nDESCRIPTION: Using the useIsDrawerOpen hook to determine if the drawer is currently open or closed in a React component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-based-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useIsDrawerOpen();\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Navigation State with useNavigationState in JavaScript\nDESCRIPTION: Shows how to use the `useNavigationState` hook to retrieve the entire navigation state object by returning the state directly from the selector function. Use this cautiously as it can lead to unnecessary re-renders.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation-state.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst state = useNavigationState((state) => state);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Action with Custom Properties in React Navigation\nDESCRIPTION: Shows how to dispatch a navigation action with additional properties like 'source' and 'target'. These properties control the behavior of the action within the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...CommonActions.navigate('Profile'),\n  source: 'someRoutekey',\n  target: 'someStatekey',\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Nested Navigator Screens in React Navigation\nDESCRIPTION: Example of how to pass parameters to a screen in a nested navigator. This snippet demonstrates passing a user parameter to the Settings screen within a nested navigator structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/nesting-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate('Root', {\n  screen: 'Settings',\n  params: { user: 'jane' },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Stack Navigation (Dynamic) with React Native Testing Library\nDESCRIPTION: This test validates stack navigation by pressing a button and confirming that the 'Surprise!' text is displayed after navigation to the Surprise screen.  It uses `NavigationContainer` and `@testing-library/react-native`. Requires jest for mocking timers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, jest, test } from '@jest/globals';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyStack } from './MyStack';\n\njest.useFakeTimers();\n\ntest('shows surprise text after navigating to surprise screen', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n\n  await user.press(screen.getByLabelText('Click here!'));\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Surprise!')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Background with Linear Gradient in React Navigation\nDESCRIPTION: Example showing how to customize the header background using a LinearGradient component. The gradient flows horizontally from pink to purple colors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nheaderBackground: () => (\n      <LinearGradient\n        colors={['#c17388', '#90306f']}\n        style={{ flex: 1 }}\n        start={{ x: 0, y: 0 }}\n        end={{ x: 1, y: 0 }}\n      />\n      ),\n```\n\n----------------------------------------\n\nTITLE: Wrapping NavigationContainer with MobX Provider in React\nDESCRIPTION: Demonstrates how to wrap the main `NavigationContainer` with the `Provider` component from `mobx-react`. This makes the specified MST object (`myObject` in this case) available to any descendant component via the `inject` function, facilitating access to the MST store throughout the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/MST-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Provider myObject={this.myObject}>\n  <NavigationContainer>{/* Screen configuration */}</NavigationContainer>\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus-Aware StatusBar in React Native Screens using JSX\nDESCRIPTION: Illustrates the usage of the custom `FocusAwareStatusBar` component within screen components (`Screen1`, `Screen2`). By replacing the standard `StatusBar` with `FocusAwareStatusBar`, the correct status bar style is applied based on screen focus, suitable for Tab and Drawer navigators. It depends on React, React Native, SafeAreaContext, React Navigation, and the `FocusAwareStatusBar` component itself.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Screen1({ navigation }) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#6a51ae',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <FocusAwareStatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen2')}\n        color=\"#fff\"\n      />\n    </View>\n  );\n}\n\nfunction Screen2({ navigation }) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#ecf0f1',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <FocusAwareStatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen1')}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Navigation Options Across Screens\nDESCRIPTION: Demonstrates how to share common navigation options across multiple screens using StackNavigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = StackNavigator(\n  {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n  {\n    initialRouteName: 'Home',\n    navigationOptions: {\n      headerStyle: {\n        backgroundColor: '#f4511e',\n      },\n      headerTintColor: '#fff',\n      headerTitleStyle: {\n        fontWeight: 'bold',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Stack Navigation Behavior with getId in JavaScript\nDESCRIPTION: This example demonstrates how stack navigation changes when `getId` is implemented. If navigation occurs to the same screen name but with parameters that yield a different ID via the `getId` callback, a new instance of the screen is pushed onto the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Let's say you're on `Home` screen\n// Then you navigate to `Profile` screen with `userId: 1`\nnavigation.navigate('Profile', { userId: 1 });\n\n// Now the stack will have: `Home` -> `Profile` with `userId: 1`\n\n// Then you navigate to `Profile` screen again with `userId: 2`\nnavigation.navigate('Profile', { userId: 2 });\n\n// The stack will now have: `Home` -> `Profile` with `userId: 1` -> `Profile` with `userId: 2`\n```\n\n----------------------------------------\n\nTITLE: Customizing Linking State Parsing in React Navigation (Static)\nDESCRIPTION: Shows how to override the default URL path parsing behavior in React Navigation by providing a custom `getStateFromPath` function within the `linking` prop of the `<Navigation>` component. This function receives the path and configuration and should return a navigation state object. You can reuse the default logic by importing it from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n<Navigation\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    // highlight-start\n    getStateFromPath(path, config) {\n      // Return a state object here\n      // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n    },\n    // highlight-end\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Stack Navigator with React Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates the setup process for a Native Stack Navigator using react-native-screens and react-navigation in a React Native app. Required dependencies include '@react-navigation/native', 'react-native-screens', and 'react-native-screens/native-stack'. Key parameters are the screen names and their associated components (Home, Notifications, Profile, Settings). Calling enableScreens() improves memory usage and performance by using native navigation primitives. The Stack.Navigator component wraps registered screens, each associated with a unique name and React component, and returns the stack navigator for use within the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/native-stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { enableScreens } from 'react-native-screens';\\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\\n\\nenableScreens();\\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\\\"Home\\\" component={Home} />\\n      <Stack.Screen name=\\\"Notifications\\\" component={Notifications} />\\n      <Stack.Screen name=\\\"Profile\\\" component={Profile} />\\n      <Stack.Screen name=\\\"Settings\\\" component={Settings} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Screen Options in React Navigation\nDESCRIPTION: Shows how to set options for individual screens in React Navigation. This example sets a custom title for the Home screen using the options prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hello-react-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{ title: 'Overview' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Assert Visibility with React Native Testing Library\nDESCRIPTION: This JavaScript snippet shows how to assert the visibility of a component using the `toBeVisible` matcher from React Native Testing Library. This is the recommended approach for testing components in React Navigation, as previous screens remain mounted but are not visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpect(screen.getByText('Settings screen')).toBeVisible();\n```\n\n----------------------------------------\n\nTITLE: Setting Header Style Interpolator for iOS Animation (JavaScript)\nDESCRIPTION: This example applies a UIKit-style header animation where the title transitions into the back button label during navigation. It uses HeaderStyleInterpolators.forUIKit from @react-navigation/stack and configures the headerStyleInterpolator on the Stack.Screen's options. External dependencies include React Navigation Stack and the appropriate React components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { HeaderStyleInterpolators } from '@react-navigation/stack';\\n\\n// ...\\n\\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={Profile}\\n  options={{\\n    title: 'Profile',\\n    headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\\n  }}\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Initializing FAB with Portal in React Navigation Bottom Tabs (JSX)\nDESCRIPTION: This snippet demonstrates the initial setup of a Material Bottom Tab Navigator using `@react-navigation/material-bottom-tabs` and rendering a static Floating Action Button (FAB) using `react-native-paper`. The `Portal` component ensures the FAB is rendered above the tab navigator interface.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { useTheme, Portal, FAB } from 'react-native-paper';\n\nimport { Feed } from './feed';\nimport { Message } from './message';\nimport { Notifications } from './notifications';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport const BottomTabs = () => {\n  return (\n    <React.Fragment>\n      <Tab.Navigator\n        initialRouteName=\"Feed\"\n        backBehavior=\"initialRoute\"\n        shifting={true}\n        sceneAnimationEnabled={false}\n      >\n        <Tab.Screen\n          name=\"Feed\"\n          component={Feed}\n          options={{\n            tabBarIcon: 'home-account',\n          }}\n        />\n        <Tab.Screen\n          name=\"Notifications\"\n          component={Notifications}\n          options={{\n            tabBarIcon: 'bell-outline',\n          }}\n        />\n        <Tab.Screen\n          name=\"Messages\"\n          component={Message}\n          options={{\n            tabBarIcon: 'message-text-outline',\n          }}\n        />\n      </Tab.Navigator>\n      <Portal>\n        <FAB\n          icon=\"feather\"\n          style={{\n            position: 'absolute',\n            bottom: 100,\n            right: 16,\n          }}\n        />\n      </Portal>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Linking Dependencies for Bare React Native < 0.60 (Bash)\nDESCRIPTION: Executes `react-native link` commands to manually link the required native dependencies (`react-native-reanimated`, `react-native-gesture-handler`, `react-native-screens`, `react-native-safe-area-context`) for older React Native versions (0.59 and lower).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-reanimated\nreact-native link react-native-gesture-handler\nreact-native link react-native-screens\nreact-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Restructuring Navigators to Control Tab Bar Visibility in React Navigation (JavaScript)\nDESCRIPTION: This snippet presents an alternative, recommended approach for controlling tab bar visibility. Instead of dynamically hiding the tab bar, the navigation structure is reorganized. A new parent `HomeStack` contains both the `TabNavigator` and screens like `DetailsScreen` that should appear *above* the tab bar. Screens intended to be *within* a tab (`FeedHome`) remain in a separate `FeedStack` inside the `TabNavigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route you want to render under the tab bar */\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst HomeStack = createStackNavigator({\n  Tabs: TabNavigator,\n  Details: DetailsScreen,\n  /* any other route you want to render above the tab bar */\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: HomeStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating react-native-screens with React Navigation\nDESCRIPTION: react-native-screens exposes native navigation container components to React Native and integrates with React Navigation since version 2.14.0. It improves memory consumption and supports iOS reachability feature.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/community-libraries-and-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[github.com/software-mansion/react-native-screens](https://github.com/software-mansion/react-native-screens)\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Header Titles in React Navigation\nDESCRIPTION: Demonstrates how to set static header titles for screens using the navigationOptions property in React components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n  };\n\n  /* render function, etc */\n}\n\nclass DetailsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Details',\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator with useFocusEffect (Static)\nDESCRIPTION: This code snippet demonstrates how to create a bottom tab navigator using `createBottomTabNavigator` from `@react-navigation/bottom-tabs`. It includes the `useFocusEffect` hook to fetch data when the 'Pokemon' screen is focused. The `PokemonScreen` component fetches data from a mock API and updates its state based on the loading status.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useCallback, useState } from 'react';\nimport { Text, View } from 'react-native';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n}\n\nconst url = 'https://pokeapi.co/api/v2/pokemon/ditto';\n\nfunction PokemonScreen() {\n  const [profileData, setProfileData] = useState({ status: 'loading' });\n\n  useFocusEffect(\n    useCallback(() => {\n      if (profileData.status === 'success') {\n        return;\n      }\n\n      setProfileData({ status: 'loading' });\n\n      const controller = new AbortController();\n\n      const fetchUser = async () => {\n        try {\n          const response = await fetch(url, { signal: controller.signal });\n          const data = await response.json();\n\n          setProfileData({ status: 'success', data: data });\n        } catch (error) {\n          setProfileData({ status: 'error' });\n        }\n      };\n\n      fetchUser();\n\n      return () => {\n        controller.abort();\n      };\n    }, [profileData.status])\n  );\n\n  if (profileData.status === 'loading') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (profileData.status === 'error') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>An error occurred!</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>{profileData.data.name}</Text>\n    </View>\n  );\n}\n\nexport const MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Pokemon: PokemonScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing headerLeft in Static Configuration\nDESCRIPTION: Shows how to provide a custom component for the left side of the header using the `headerLeft` option in a static Native Stack navigator configuration. It assigns a function returning a custom component (`MyButton`) which receives props like `tintColor` and `pressColor` and includes an `onPress` handler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        headerLeft: (props) => (\n          <MyButton {...props} onPress={() => {\n            // Do something\n          }}>\n        )\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dispatching DrawerActions in React Navigation\nDESCRIPTION: This snippet demonstrates how to import DrawerActions from react-navigation-drawer and dispatch a toggleDrawer action using the navigation prop. It's typically used within a React component to control the drawer state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from 'react-navigation-drawer';\n\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook in React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates how to access the currently active theme ('light' or 'dark') within a functional component using the `useTheme` hook provided by React Navigation. The retrieved theme value can then be used to apply conditional styling based on the theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from 'react-navigation';\n\n// Black background and white text in light theme, inverted on dark theme\nfunction MyButton() {\n  let theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}\n    >\n      <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>\n        Button!\n      </Text>\n    </TouchableOpacity>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Status with getDrawerStatusFromState Helper - JavaScript\nDESCRIPTION: This code shows an alternative method to check if the drawer is open by calling the getDrawerStatusFromState helper from @react-navigation/drawer. It extracts the status from the current navigation state by using navigation.getState(). This requires access to the navigation object and is suitable for cases where hooks are unavailable, such as outside functional components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getDrawerStatusFromState } from '@react-navigation/drawer';\\n\\n// ...\\n\\nconst isDrawerOpen = getDrawerStatusFromState(navigation.getState()) === 'open';\n```\n\n----------------------------------------\n\nTITLE: Optimizing Scene Component with React.memo (JavaScript/React Native)\nDESCRIPTION: Shows how to optimize a functional scene component (HomeComponent) by wrapping it with `React.memo`. Similar to `PureComponent`, this prevents re-renders if the component's props are shallowly equal, enhancing TabView performance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction HomeComponent() {\n  return (\n    <View style={styles.page}>\n      <Avatar />\n      <NewsFeed />\n    </View>\n  );\n}\n\nexport default React.memo(HomeComponent);\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Initial Route when Navigating to Nested Navigator in React Navigation (JS)\nDESCRIPTION: Explains how to ensure that when navigating to a screen within a nested navigator (e.g., 'Settings' within 'Root'), the nested navigator first renders its own defined initial route, rather than immediately showing the target screen. This is achieved by setting `initial: false` in the navigation parameters. This impacts back button behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate('Root', {\n  screen: 'Settings',\n  initial: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Colors within Components using useTheme Hook (JavaScript)\nDESCRIPTION: This snippet illustrates how to use the `useTheme` hook from `@react-navigation/native` within a functional component (`MyButton`). The hook returns the current theme object, allowing access to its `colors` property. These colors can then be used to dynamically style components (e.g., setting `backgroundColor` and text `color`) based on the active theme (light or dark).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\n\n// Black background and white text in light theme, inverted on dark theme\nfunction MyButton() {\n  const { colors } = useTheme();\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\n      <Text style={{ color: colors.text }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URI Scheme in Expo App Configuration (JSON)\nDESCRIPTION: Configures the Expo app's scheme in app.json, enabling custom URI prefixes for deep linking within standalone Expo apps. This key must be added under the top-level 'expo' object. The value determines the URI scheme and requires rebuilding the app to take effect. Only affects standalone builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Standalone Theme Object for React Navigation - JavaScript\nDESCRIPTION: Shows the full structure required for a custom theme object including all key color fields ('dark', 'primary', 'background', 'card', 'text', 'border', 'notification'). No functional code, but serves as reference for required property names and expected types when working with React Navigation themes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyTheme = {\\n  dark: false,\\n  colors: {\\n    primary: 'rgb(255, 45, 85)',\\n    background: 'rgb(242, 242, 242)',\\n    card: 'rgb(255, 255, 255)',\\n    text: 'rgb(28, 28, 30)',\\n    border: 'rgb(199, 199, 204)',\\n    notification: 'rgb(255, 69, 58)',\\n  },\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Alternative Structure: Independent Stacks per Tab (React Navigation, JS)\nDESCRIPTION: Shows an alternative navigation architecture where each tab (`Feed`, `Profile`) in the `TabNavigator` contains its own `StackNavigator` (`FeedStack`, `ProfileStack`). The `TabNavigator` itself is then placed within the main `AppNavigator`. The `headerShown: false` option is set on the `TabNavigator`'s `navigationOptions` to hide the header of the parent `AppNavigator` when the tab screen is focused, allowing each inner stack (`FeedStack`, `ProfileStack`) to manage its own header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* other routes here */\n});\n\nconst ProfileStack = createStackNavigator({\n  ProfileHome: ProfileScreen,\n  /* other routes here */\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileStack,\n});\n\nTabNavigator.navigationOptions = {\n  // Hide the header from AppNavigator stack\n  headerShown: false,\n};\n\nconst AppNavigator = createStackNavigator({\n  Home: TabNavigator,\n  Settings: SettingsScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing independent NavigationContainer with NavigationIndependentTree in React Navigation 7\nDESCRIPTION: Shows the change from using the independent prop on NavigationContainer to wrapping it with the new NavigationIndependentTree component for creating independent navigation trees.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- <NavigationContainer independent>\n-   {/* ... */}\n- </NavigationContainer>\n+ <NavigationIndependentTree>\n+   <NavigationContainer>\n+     {/* ... */}\n+   </NavigationContainer>\n+ </NavigationIndependentTree>\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration with Screen Path (JS)\nDESCRIPTION: This snippet configures a route for a 'Home' screen with a specified path.  It demonstrates how a screen's path can be defined, enabling React Navigation to serialize the navigation state to a URL and vice versa. When this state is serialized, it will result in the '/home' path.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'home',\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Stack Navigator with Static Configuration (JavaScript)\nDESCRIPTION: Demonstrates setting up a Native Stack Navigator using the static configuration approach in React Navigation. It imports `createNativeStackNavigator`, defines screen components (`HomeScreen`, `ProfileScreen`), configures the stack with these screens, and wraps it using `createStaticNavigation`. This method defines the navigation structure statically.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n// codeblock-focus-end\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation for Stack Navigator Card in React Navigation\nDESCRIPTION: This snippet shows how to create a custom fade animation for the card in Stack Navigator and apply it using the cardStyleInterpolator option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current }) => ({\n  cardStyle: {\n    opacity: current.progress,\n  },\n});\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{ cardStyleInterpolator: forFade }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Bottom Tabs Package\nDESCRIPTION: Command to install the required bottom tabs package for React Navigation. The command includes npm2yarn syntax to show equivalent commands for both npm and Yarn package managers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/tab-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/bottom-tabs@^5.x\n```\n\n----------------------------------------\n\nTITLE: String-Based Screen Path Config for useLinking (JavaScript)\nDESCRIPTION: This configuration object for useLinking demonstrates a simple mapping from the 'Catalog' screen to the path 'item/:id' using a string. It is functionally equivalent to specifying a `path` property, associating the URL structure with a screen in the navigation state. Used for straightforward cases where only one path needs to be matched to a screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  screens: {\\n    Catalog: 'item/:id',\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using FocusAwareStatusBar in Screen Components for Tab/Drawer Navigators (JSX)\nDESCRIPTION: Updates the `Screen1` and `Screen2` components to use the custom `FocusAwareStatusBar` instead of the standard `StatusBar` from React Native. This ensures the correct status bar style is applied based on the currently focused screen, which is necessary for tab and drawer navigators. Depends on `React`, `react-native` components, and the previously defined `FocusAwareStatusBar` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nclass Screen1 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n        <FocusAwareStatusBar\n          barStyle=\"light-content\"\n          backgroundColor=\"#6a51ae\"\n        />\n        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen2')}\n          color={isAndroid ? 'blue' : '#fff'}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <FocusAwareStatusBar\n          barStyle=\"dark-content\"\n          backgroundColor=\"#ecf0f1\"\n        />\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking All Screen Props in Stack Navigator with TypeScript\nDESCRIPTION: Demonstrates using `NavigationStackScreenProps` from `react-navigation-stack` to type all props (`navigation`, `theme`, `screenProps`) received by a React class component screen within a Stack Navigator. It accepts optional generic arguments for route `Params` (`{ userId: string }`) and `ScreenProps` (`{ language: string }`) passed down from the navigator configuration, consolidating type definitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\n\ntype Params = { userId: string };\n\ntype ScreenProps = { language: string };\n\nclass ProfileScreen extends React.Component<\n  NavigationStackScreenProps<Params, ScreenProps>\n> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Popping the Current Screen in React Navigation Stack (JavaScript)\nDESCRIPTION: This snippet demonstrates the `pop` method on the `navigation` object in React Navigation. It removes the topmost screen from the stack, navigating the user back to the previous screen. An optional `count` argument (not shown) can be provided to pop multiple screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nnavigation.pop();\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with Custom Logic in React Navigation (JavaScript)\nDESCRIPTION: This advanced example demonstrates dispatching a function to update the navigation state dynamically, removing all screens after the 'Profile' screen. It leverages a state transformation function in navigation.dispatch and constructs a reset action with the new state. This requires '@react-navigation/native' and assumes access to the navigation object. Inputs are the current state object; outputs are custom navigation states returned by the function. This approach avoids mutating the original state and must only rely on 'index' and 'routes' unless absolutely necessary.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch((state) => {\n  // Remove all the screens after `Profile`\n  const index = state.routes.findIndex((r) => r.name === 'Profile');\n  const routes = state.routes.slice(0, index + 1);\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling State Persistence in Development Mode\nDESCRIPTION: This JavaScript snippet shows how to conditionally enable the state persistence feature based on the development environment (`__DEV__`). It initializes the `isReady` state variable to `false` only in development mode, triggering the asynchronous state restoration process. In production (`__DEV__` is false), `isReady` starts as `true`, skipping state restoration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/state-persistence.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst [isReady, setIsReady] = React.useState(__DEV__ ? false : true);\n```\n\n----------------------------------------\n\nTITLE: Using OS Theme Preference with react-native-appearance (JavaScript)\nDESCRIPTION: This code shows how to integrate the operating system's color scheme preference (light/dark mode) into a React Navigation app using the `react-native-appearance` library. It utilizes the `useColorScheme` hook within an `AppearanceProvider` to dynamically get the current OS theme and passes it to the `Navigation` container's `theme` prop. Requires `react-native-appearance` to be installed and configured.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\n\n// Other navigation code goes here...\nlet Navigation = createAppContainer(RootStack);\n\nexport default () => {\n  let theme = useColorScheme();\n\n  return (\n    <AppearanceProvider>\n      <Navigation theme={theme} />\n    </AppearanceProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using useNavigationState with Class Components via Wrapper in JavaScript\nDESCRIPTION: Demonstrates a pattern to integrate the `useNavigationState` hook with React class components. A function component wrapper is created which uses the hook and passes the derived state (`routesLength`) as a prop to the wrapped class component (`Profile`). This allows class components to access reactive navigation state data. Depends on React and `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation-state.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Get it from props\n    const { routesLength } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const routesLength = useNavigationState((state) => state.routes.length);\n\n  return <Profile {...props} routesLength={routesLength} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Routes in React Navigation\nDESCRIPTION: This code demonstrates how to set up a catch-all route for handling unmatched paths, commonly known as 404 errors, using the '*' pattern in the navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: 'settings',\n      },\n    },\n    NotFound: '*',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Web platform stub for gesture-handler - JavaScript (React Native Web)\nDESCRIPTION: Creates a module (gesture-handler.js) for the web platform that intentionally does not import react-native-gesture-handler, preventing unnecessary bundle size increase for web builds. Use this file alongside gesture-handler.native.js to optimize navigation setup for multi-platform projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Don't import react-native-gesture-handler on web\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Definitions for Auth Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to add TypeScript type definitions for Auth screens in a React Navigation 5 project. It defines types for navigation props and route params, enabling better type checking and autocomplete functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteProp } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { AppRoute } from './app-routes';\n\ntype AuthNavigatorParams = {\n  [AppRoute.SIGN_IN]: undefined;\n  [AppRoute.SIGN_UP]: undefined;\n  [AppRoute.RESET_PASSWORD]: undefined;\n}\n\nexport interface SignInScreenProps {\n  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.SIGN_IN>;\n  route: RouteProp<AuthNavigatorParams, AppRoute.SIGN_IN>;\n}\n\nexport interface SignUpScreenProps {\n  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.SIGN_UP>;\n  route: RouteProp<AuthNavigatorParams, AppRoute.SIGN_UP>;\n}\n\nexport interface ResetPasswordScreenProps {\n  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.RESET_PASSWORD>;\n  route: RouteProp<AuthNavigatorParams, AppRoute.RESET_PASSWORD>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Native Stack Navigator in React Navigation\nDESCRIPTION: Command to install the Native Stack Navigator package using npm or yarn. This is a prerequisite for using the navigator in your React Navigation project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native-stack@^6.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Navigator Structure with Tabs and Stacks in React Navigation\nDESCRIPTION: This example demonstrates how to set up a complex navigation structure with a Tab Navigator that contains two Stack Navigators. It shows how to maintain separate navigation states for different tab stacks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"First\">\n          {() => (\n            <SettingsStack.Navigator>\n              <SettingsStack.Screen\n                name=\"Settings\"\n                component={SettingsScreen}\n              />\n              <SettingsStack.Screen name=\"Profile\" component={ProfileScreen} />\n            </SettingsStack.Navigator>\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Second\">\n          {() => (\n            <HomeStack.Navigator>\n              <HomeStack.Screen name=\"Home\" component={HomeScreen} />\n              <HomeStack.Screen name=\"Details\" component={DetailsScreen} />\n            </HomeStack.Navigator>\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom URIs in React Navigation\nDESCRIPTION: This example shows how to extend the router's getActionForPathAndParams method to handle custom URIs. It demonstrates parsing a custom path and parameters to generate a specific navigation action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/routers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyApp = StackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\nconst previousGetActionForPathAndParams =\n  MyApp.router.getActionForPathAndParams;\n\nObject.assign(MyApp.router, {\n  getActionForPathAndParams(path, params) {\n    if (path === 'my/custom/path' && params.magic === 'yes') {\n      // returns a profile navigate action for /my/custom/path?magic=yes\n      return NavigationActions.navigate({\n        routeName: 'Profile',\n        action: NavigationActions.navigate({\n          // This child action will get passed to the child router\n          // ProfileScreen.router.getStateForAction to get the child\n          // navigation state.\n          routeName: 'Friends',\n        }),\n      });\n    }\n    return previousGetActionForPathAndParams(path, params);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing renderScene for a Large Number of Routes (JavaScript/React Native)\nDESCRIPTION: Provides a strategy within `renderScene` to optimize performance when dealing with many routes. It checks the distance between the current `index` and the `route`'s index, rendering the actual scene component only if it's within a certain range (e.g., +/- 2) and rendering an empty View otherwise.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst renderScene = ({ route }) => {\n  if (Math.abs(index - routes.indexOf(route)) > 2) {\n    return <View />;\n  }\n\n  return <MySceneComponent route={route} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using Function-Based Screen Options in Dynamic Group Configuration\nDESCRIPTION: Example of using a function to dynamically determine screen options based on route and navigation in a Stack.Group component. The function receives route and navigation objects as parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Group\n  screenOptions={({ route, navigation }) => ({\n    title: route.params.title,\n  })}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Using the Custom LinkButton Component (JavaScript)\nDESCRIPTION: Demonstrates how to use the custom `LinkButton` component within another component (`Home`). It passes the target path `/profile/jane` to the `to` prop, which the `LinkButton` will use via `useLinkProps` to navigate to the corresponding screen when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-link-props.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Home() {\n  return <LinkButton to=\"/profile/jane\">Go to Jane's profile</LinkButton>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Tab Navigation for TODO Screens\nDESCRIPTION: Creates a material top tab navigator for TODO screens with custom tab bar using UI Kitten components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { AppRoute } from './app-routes';\nimport { TodoTabBar, TodoInProgressScreen, TodoDoneScreen } from '../scenes/todo';\nimport { DoneAllIcon, GridIcon } from '../assets/icons';\n\nconst TopTab = createMaterialTopTabNavigator();\n\nexport const TodoNavigator = (): React.ReactElement => (\n  <TopTab.Navigator tabBar={props => <TodoTabBar {...props} />}>\n    <TopTab.Screen\n      name={AppRoute.TODO_IN_PROGRESS}\n      component={TodoInProgressScreen}\n      options={{ title: 'IN PROGRESS', tabBarIcon: GridIcon }}\n    />\n    <TopTab.Screen\n      name={AppRoute.TODO_DONE}\n      component={TodoDoneScreen}\n      options={{ title: 'DONE', tabBarIcon: DoneAllIcon }}\n    />\n  </TopTab.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Bar Component\nDESCRIPTION: Example of implementing a custom tab bar component with custom styling using the BottomTabBar component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator, BottomTabBar } from 'react-navigation-tabs';\n\nconst TabBarComponent = (props) => <BottomTabBar {...props} />;\n\nconst TabScreens = createBottomTabNavigator({\n  tabBarComponent: (props) => (\n    <TabBarComponent {...props} style={{ borderTopColor: '#605F60' }} />\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Using RootNavigation to navigate in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the RootNavigation module to navigate from any JavaScript module, even outside of React components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// any js module\nimport * as RootNavigation from './path/to/RootNavigation.js';\n\n// ...\n\nRootNavigation.navigate('ChatScreen', { userName: 'Lucy' });\n```\n\n----------------------------------------\n\nTITLE: Using CrossFadeSpec Transition in React Navigation (Static)\nDESCRIPTION: This snippet demonstrates how to use the `CrossFadeSpec` for a screen transition in a React Navigation Bottom Tab Navigator using a static configuration. It imports `TransitionSpecs` from `@react-navigation/bottom-tabs` and sets the `transitionSpec` option to `TransitionSpecs.CrossFadeSpec` for the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionSpecs } from '@react-navigation/bottom-tabs';\n\n// ...\n\n{\n  Profile: {\n    screen: Profile,\n    options: {\n      // highlight-start\n      transitionSpec: TransitionSpecs.CrossFadeSpec,\n      // highlight-end\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Individual Drawer Items in React Navigation\nDESCRIPTION: Shows how to use the `drawerItemStyle` option, likely within `screenOptions` or screen-specific `options`, to apply custom styles (like background color, border color/width, opacity) to the wrapper `View` of each individual drawer item.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n   drawerItemStyle: {\n    backgroundColor: '#9dd3c8',\n    borderColor: 'black',\n    orderWidth: 2,\n    opacity: 0.6,\n  },\n```\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook for Manual Insets - react-native-safe-area-context - JavaScript/JSX\nDESCRIPTION: This code demonstrates the use of the useSafeAreaInsets React hook from react-native-safe-area-context to obtain inset values. These values can then be applied manually to the style prop of any View for precise placement of content, offering maximized control over layout. Dependency: react-native-safe-area-context. Typical use case includes custom layout or when integrating with FlatList via contentContainerStyle. Insets object contains top, bottom, left, and right properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/handling-iphonex.md#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options for React Navigation\nDESCRIPTION: Examples of setting the title option for screens in React Navigation, both statically and dynamically. This is used to set the correct page title during server rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-rendering.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My App',\n      },\n    },\n    Profile: {\n      screen: ProfileScreen,\n      options: ({ route }) => ({\n        title: `${route.params.name}'s Profile`,\n      }),\n    },\n  },\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen\n    name=\"Home\"\n    component={HomeScreen}\n    options={{\n      title: 'My App',\n    }}\n  />\n  <Stack.Screen\n    name=\"Profile\"\n    component={ProfileScreen}\n    options={({ route }) => ({\n      title: `${route.params.name}'s Profile`,\n    })}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Specifying Drawer Content Options in DrawerNavigatorConfig JavaScript Object\nDESCRIPTION: This sample configures the contentOptions property in DrawerNavigatorConfig to customize styles and active tint color for items in the drawer. It modifies the color of selected drawer items and the style of item and icon containers. Integrate this object as the contentOptions prop in the drawer navigator config to control appearance. Inputs are configuration values for color and style; output is a style object used by the drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontentOptions: {\n  activeTintColor: '#e91e63',\n  itemsContainerStyle: {\n    marginVertical: 0,\n  },\n  iconContainerStyle: {\n    opacity: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView for iPhone X Compatibility in React Navigation\nDESCRIPTION: This code shows how to use the SafeAreaView component from react-navigation to ensure content is not hidden behind hardware elements on iPhone X. It wraps the screen content in SafeAreaView.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/handling-iphonex.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaView } from 'react-navigation';\n\nclass MyHomeScreen extends Component {\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.paragraph}>This is top text.</Text>\n        <Text style={styles.paragraph}>This is bottom text.</Text>\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Navigation Actions Using Stack Actions\nDESCRIPTION: Example of adding more advanced navigation actions like push to the RootNavigation module. This demonstrates how to access stack-specific actions through the navigation ref.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\n// ...\n\nexport function push(...args) {\n  if (navigationRef.isReady()) {\n    navigationRef.dispatch(StackActions.push(...args));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Route using DrawerActions in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the jumpTo action from DrawerActions to navigate to a specific route in a React Navigation drawer navigator. It includes passing a route name and optional parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nconst jumpToAction = DrawerActions.jumpTo('Profile', { name: 'Satya' });\n\nnavigation.dispatch(jumpToAction);\n```\n\n----------------------------------------\n\nTITLE: Defining a Screen Component with Name Property\nDESCRIPTION: Example showing how to define a Screen component with a name property, which is required and used for navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen name=\"Profile\" component={ProfileScreen} />\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Route with StackActions in React Navigation\nDESCRIPTION: Shows how to use the push action to add a new route on top of the stack and navigate to it. This example pushes a Profile screen with a user ID parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nconst pushAction = StackActions.push({\n  routeName: 'Profile',\n  params: {\n    myUserId: 9,\n  },\n});\n\nthis.props.navigation.dispatch(pushAction);\n```\n\n----------------------------------------\n\nTITLE: Accessing Tab Bar Height with Context API\nDESCRIPTION: Illustrates how to consume the `BottomTabBarHeightContext` using React's Context API Consumer pattern to get the height of the bottom tab bar. This height can be used to adjust the layout of screen content, especially when the tab bar is absolutely positioned.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { BottomTabBarHeightContext } from '@react-navigation/bottom-tabs';\n\n// ...\n\n<BottomTabBarHeightContext.Consumer>\n  {tabBarHeight => (\n    /* render something */\n  )}\n</BottomTabBarHeightContext.Consumer>\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Long Press Events in React Navigation\nDESCRIPTION: Example of implementing a tab long press event listener in React Navigation. Shows how to handle extended tab press interactions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabLongPress', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Drawer Content Component in React Navigation\nDESCRIPTION: Illustrates how to integrate a custom drawer content component (`CustomDrawerContent`) into the `Drawer.Navigator`. This is achieved by passing a function to the `drawerContent` prop, which renders the custom component and spreads the received props onto it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<Drawer.Navigator drawerContent={(props) => <CustomDrawerContent {...props} />}>\n  {/* screens */}\n</Drawer.Navigator>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal and Main Stack Navigators in React Navigation\nDESCRIPTION: This code snippet demonstrates how to create a modal stack using nested stack navigators in React Navigation. It includes a HomeScreen with a button to open the modal, a ModalScreen component, and the configuration for both MainStack and RootStack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const params = navigation.state.params || {};\n\n    return {\n      headerLeft: (\n        <Button\n          onPress={() => navigation.navigate('MyModal')}\n          title=\"Info\"\n          color=\"#fff\"\n        />\n      ),\n      /* the rest of this config is unchanged */\n    };\n  };\n\n  /* render function, etc */\n}\n\nclass ModalScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n        <Button\n          onPress={() => this.props.navigation.goBack()}\n          title=\"Dismiss\"\n        />\n      </View>\n    );\n  }\n}\n\nconst MainStack = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n  {\n    /* Same configuration as before */\n  }\n);\n\nconst RootStack = createStackNavigator(\n  {\n    Main: {\n      screen: MainStack,\n    },\n    MyModal: {\n      screen: ModalScreen,\n    },\n  },\n  {\n    mode: 'modal',\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Scene Style Interpolator for Bottom Tab in React Navigation\nDESCRIPTION: This code snippet illustrates configuring the `sceneStyleInterpolator` option dynamically within a React Navigation Bottom Tab Navigator. It applies a fade-in/fade-out effect to the screen content during tab transitions by interpolating the opacity based on the transition progress. This is done directly within the `<Tab.Screen>` component for the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    // highlight-start\n    sceneStyleInterpolator: ({ current }) => ({\n      sceneStyle: {\n        opacity: current.progress.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [0, 1, 0],\n        }),\n      },\n    }),\n    // highlight-end\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling State Persistence Only in Development Mode\nDESCRIPTION: This code snippet shows how to conditionally enable navigation state persistence only in development mode using the __DEV__ flag. This is useful for maintaining a consistent developer experience while testing.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/state-persistence.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isReady, setIsReady] = React.useState(__DEV__ ? false : true);\n```\n\n----------------------------------------\n\nTITLE: Closing Drawer using DrawerActions in React Navigation\nDESCRIPTION: This snippet shows how to use the closeDrawer action from DrawerActions to close the drawer pane in a React Navigation drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nnavigation.dispatch(DrawerActions.closeDrawer());\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Android Back Button Behavior in React Navigation\nDESCRIPTION: This code snippet demonstrates how to create a React component with custom Android back button handling. It uses the BackHandler API and subscribes to navigation lifecycle updates to add and remove a custom hardwareBackPress listener.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { BackHandler } from \"react-native\";\n\nclass ScreenWithCustomBackBehavior extends React.Component {\n  _didFocusSubscription;\n  _willBlurSubscription;\n\n  constructor(props) {\n    super(props);\n    this._didFocusSubscription = props.navigation.addListener('didFocus', payload =>\n      BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPressAndroid)\n    );\n  }\n\n  componentDidMount() {\n    this._willBlurSubscription = this.props.navigation.addListener('willBlur', payload =>\n      BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPressAndroid)\n    );\n  }\n\n  onBackButtonPressAndroid = () => {\n    if (this.isSelectionModeEnabled()) {\n      this.disableSelectionMode();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  componentWillUnmount() {\n    this._didFocusSubscription && this._didFocusSubscription.remove();\n    this._willBlurSubscription && this._willBlurSubscription.remove();\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RCTLinkingIOS Subspec to Podfile for Hybrid iOS Apps\nDESCRIPTION: This snippet shows how to include the RCTLinkingIOS subspec in the Podfile for hybrid iOS applications using React Navigation. This is necessary to ensure proper deep linking functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_11\n\nLANGUAGE: pod\nCODE:\n```\n pod 'React', :path => '../node_modules/react-native', :subspecs => [\n    . . . // other subspecs\n    'RCTLinkingIOS',\n    . . .\n  ]\n```\n\n----------------------------------------\n\nTITLE: Checking Focus State using navigation.isFocused (JavaScript)\nDESCRIPTION: This line of code checks whether the current screen is focused by calling navigation.isFocused. It is typically used within callbacks or effect hooks to conditionally execute logic based on focus state. The method returns a boolean indicating the screen's focus status. Requires react-navigation and the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst isFocused = navigation.isFocused();\n```\n\n----------------------------------------\n\nTITLE: Custom Header Title Component\nDESCRIPTION: Demonstrates how to replace the default header title with a custom component, such as an image logo.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass LogoTitle extends React.Component {\n  render() {\n    return (\n      <Image\n        source={require('./spiro.png')}\n        style={{ width: 30, height: 30 }}\n      />\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    headerTitle: <LogoTitle />,\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Index with useNavigationState in JavaScript\nDESCRIPTION: Demonstrates using the `useNavigationState` hook with a selector function to retrieve the current `index` from the navigation state. This approach ensures the component only re-renders when the index changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation-state.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst index = useNavigationState((state) => state.index);\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Press Events in React Navigation\nDESCRIPTION: Example of preventing default tab press behavior using event listeners. Shows how to intercept tab press events and implement custom handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Listening to Parent Navigator Events using `getParent` (JavaScript)\nDESCRIPTION: Demonstrates how to listen to an event (e.g., `tabPress`) from a parent navigator when nested. It uses `navigation.getParent('MyTabs')` to get the navigation prop of the specified parent navigator (identified by its `id` prop) and then calls `addListener` on it. 'MyTabs' should match the `id` assigned to the parent `Tab.Navigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-events.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = navigation\n  .getParent('MyTabs')\n  .addListener('tabPress', (e) => {\n    // Do something\n  });\n```\n\n----------------------------------------\n\nTITLE: Specifying Root Navigator Type for TypeScript in React Navigation\nDESCRIPTION: This TypeScript code globally augments the ReactNavigation namespace with a custom RootParamList, so type inference for useNavigation, Link, and related hooks/components works automatically across the app. It requires TypeScript setup and proper definition of RootStackParamList elsewhere in the codebase.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the resetRoot Method from NavigationContainer Ref\nDESCRIPTION: Example demonstrating how to use the resetRoot method available on the NavigationContainer ref to reset the entire navigation state to a specific configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigationRef.current?.resetRoot({\n  index: 0,\n  routes: [{ name: 'Profile' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial Route Using Dynamic Object Config - React Navigation (JavaScript)\nDESCRIPTION: This dynamic config object marks the 'Feed' screen as the initial route under 'Home' by using the initialRouteName property. Used as input to navigation containers, it shapes the internal navigation state so that 'Feed' is always present at the beginning. It has no required dependencies other than an object-compatible stack of named screens, and does not carry browser history if used in web context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      // highlight-next-line\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: 'settings',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Route Params in Header Title with Dynamic Configuration\nDESCRIPTION: This example shows how to use route parameters in the header title using the dynamic configuration approach. The Profile screen's title is dynamically set to the 'name' parameter passed during navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() =>\n          navigation.navigate('Profile', {\n            name: 'Jane',\n          })\n        }\n      >\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={({ route }) => ({\n          title: route.params.name,\n        })}\n      />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation State with All Params (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows the navigation state when both required and optional params are present in the URL path (e.g., '/user/jane/settings'). It illustrates how the deep link and param-parsing config combine to produce a routes array with all relevant param values for the 'Profile' screen. This pattern assists with programmatic navigation and restoring state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Profile',\n      params: { id: 'user-jane', section: 'settings' },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation State Structure in React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates the canonical structure of a navigation state object in React Navigation. It demonstrates the required and optional properties, such as type, key, routeNames, routes, index, and stale. This object is central to storing the navigator's structure and navigation history. It expects string identifiers for keys and route names, an array of route objects (with possible params), and an index indicating the current active route. No special external dependencies are required; the format serves as internal data for React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-state.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    { key: 'home-1', name: 'Home', params: { sortBy: 'latest' } },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n  stale: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Navigator Dependencies\nDESCRIPTION: Commands to install the required packages for Stack Navigator implementation including @react-navigation/stack and react-native-gesture-handler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/stack\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-gesture-handler\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-native-masked-view/masked-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-native-masked-view/masked-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-masked-view/masked-view with npm - Bash\nDESCRIPTION: Installs the @react-native-masked-view/masked-view dependency via npm for bare React Native projects. Provides masked view features for UIKit-style header animation in Stack Navigator. Execute in the project root with Node.js and npm available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-native-masked-view/masked-view\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Props to Screen Components\nDESCRIPTION: Using a render callback to pass extra props to screen components in React Navigation. This approach removes some optimizations and may require manual memoization.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hello-react-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen name=\"Home\">\n  {(props) => <HomeScreen {...props} extraData={someData} />}\n</Stack.Screen>\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Top Tabs Navigator Options\nDESCRIPTION: Example of customizing the Material Top Tabs Navigator appearance through screen options like font size, tab width, and background color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Tab.Navigator\n  screenOptions={{\n    tabBarLabelStyle: { fontSize: 12 },\n    tabBarItemStyle: { width: 100 },\n    tabBarStyle: { backgroundColor: 'powderblue' },\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Route Parameters in React Navigation Stack Navigator (JavaScript)\nDESCRIPTION: This snippet defines a stack navigator and injects default route parameters into each screen by passing a 'params' object for each route. Dependencies: React Navigation (createStackNavigator), and the referenced ProductScreen component. The routes 'Playstation' and 'Xbox' each receive a static 'product' string in route params, which will be available as navigation parameters within ProductScreen. This pattern is useful for passing static data or configuration to screens at the time of navigator construction.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst Store = createStackNavigator({\n  Playstation: { screen: ProductScreen, params: { product: 'Playstation' } },\n  Xbox: { screen: ProductScreen, params: { product: 'Xbox' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to transitionEnd Navigation Event in React Navigation (JavaScript)\nDESCRIPTION: Provides a sample for subscribing to the 'transitionEnd' event in a React component to respond to the completion of screen transition animations. Dependencies include the navigation object from react-navigation, and useEffect for lifecycle management. The event data indicates whether the screen was opened or closed. The listener is unsubscribed during cleanup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\\n  const unsubscribe = navigation.addListener('transitionEnd', (e) => {\\n    // Do something\\n  });\\n\\n  return unsubscribe;\\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Params in Header Title (JavaScript)\nDESCRIPTION: Shows how to make the header title dynamic by accessing navigation parameters. `navigationOptions` is defined as a function receiving the `navigation` prop, allowing retrieval of params using `navigation.getParam()` to set the `title`. A default title is provided if the parameter is not found.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      title: navigation.getParam('otherParam', 'A Nested Details Screen'),\n    };\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to the gestureEnd Event - React Navigation (JavaScript)\nDESCRIPTION: Uses React useEffect to listen for the gestureEnd event on the navigation object, indicating that the swipe gesture has completed successfully (e.g., a screen was dismissed). Clean-up is handled on unmount. Requires React and a valid navigation object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration with Exact Path Matching (JS)\nDESCRIPTION: This code snippet illustrates how to use the `exact` property to override the default relative path matching behavior in React Navigation. When `exact` is set to `true` for a screen, it ignores the parent screen's path and matches the URL directly. This allows you to define independent paths for nested screens. The `Profile` screen will ignore the parent `Home` screen's path and match URLs like `users/cal` directly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'feed',\n      screens: {\n        Profile: {\n          path: 'users/:id',\n          exact: true,\n        },\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Header Button using React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to add a right-aligned button to a screen's header in React Navigation using static navigationOptions in a React class component. It utilizes the headerRight property to place a Button component in the header, triggering an alert when pressed. Dependencies include React, React Navigation, and the Button component from React Native. Required parameters include a function for onPress and a title for display; this configuration does not have access to the component instance or its state. Inputs are handled via Touchable events, and there is no output except for the alert side effect.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    headerTitle: () => <LogoTitle />, \n    headerRight: () => (\n      <Button\n        onPress={() => alert('This is a button!')}\n        title=\"Info\"\n        color=\"#fff\"\n      />\n    ),\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Title Formatting in React Navigation\nDESCRIPTION: Demonstrates how to customize the document title on web using the documentTitle prop. This example shows how to append a suffix to the screen title for all pages in the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction App() {\n  return (\n    <NavigationContainer\n      documentTitle={{\n        formatter: (options, route) =>\n          `${options?.title ?? route?.name} - My Cool App`,\n      }}\n    >\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Navigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to set up a basic Navigator using NavigationContainer and Stack.Navigator components. It shows the structure of a simple navigation setup in a React Native app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator> // <---- This is a Navigator\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the new TabView options API in React Native Tab View\nDESCRIPTION: Example of the new API for TabView component in react-native-tab-view, which replaces props like getLabelText, renderIcon, etc. with commonOptions and options props for improved performance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<TabView\n  commonOptions={{\n    icon: ({ route, focused, color }) => (\n      <Icon name={route.icon} color={color} />\n    ),\n  }}\n  options={{\n    albums: {\n      labelText: 'Albums',\n    },\n    profile: {\n      labelText: 'Profile',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Providing Status Object via StatusCodeContext - JavaScript\nDESCRIPTION: This snippet shows how to provide an HTTP status object through the StatusCodeContext when rendering the app server-side. It initializes a status object (default 200), passes it via context, and subsequently updates the server's HTTP response code based on the final rendered screen (e.g., a NotFound component changing status.code to 404). Dependencies include React, ReactDOMServer, StatusCodeContext, and a server environment (e.g. Koa or Express).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a status object\\nconst status = { code: 200 };\\n\\nconst html = ReactDOMServer.renderToString(\\n  // Pass the status object via context\\n  <StatusCodeContext.Provider value={status}>\\n    <ServerContainer ref={ref} location={location}>\\n      {element}\\n    </ServerContainer>\\n  </StatusCodeContext.Provider>\\n);\\n\\n// After rendering, get the status code and use it for server's response\\nctx.status = status.code;\n```\n\n----------------------------------------\n\nTITLE: Customizing Path-to-State Conversion in React Navigation\nDESCRIPTION: This snippet shows how to override the default path-to-state conversion in React Navigation by providing a custom `getPathFromState` function. This is necessary for proper web support if a custom `getStateFromPath` is specified.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    getPathFromState(state, config) {\n      // Return a path string here\n      // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gesture Handler for Native Platforms\nDESCRIPTION: Configuration files to conditionally import gesture handler based on platform\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Only import react-native-gesture-handler on native platforms\nimport 'react-native-gesture-handler';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport './gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Parsing Configuration\nDESCRIPTION: Example showing how to customize parameter parsing and stringify functions for URL parameters in the navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Profile: {\n      path: 'user/:id/:section?',\n      parse: {\n        id: (id) => `user-${id}`,\n      },\n      stringify: {\n        id: (id) => id.replace(/^user-/, ''),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tab View in React Native\nDESCRIPTION: A basic implementation of TabView component with two routes and a simple scene renderer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, useWindowDimensions } from 'react-native';\nimport { TabView, SceneMap } from 'react-native-tab-view';\n\nconst FirstRoute = () => (\n  <View style={{ flex: 1, backgroundColor: '#ff4081' }} />\n);\n\nconst SecondRoute = () => (\n  <View style={{ flex: 1, backgroundColor: '#673ab7' }} />\n);\n\nconst renderScene = SceneMap({\n  first: FirstRoute,\n  second: SecondRoute,\n});\n\nconst routes = [\n  { key: 'first', title: 'First' },\n  { key: 'second', title: 'Second' },\n];\n\nexport default function TabViewExample() {\n  const layout = useWindowDimensions();\n  const [index, setIndex] = React.useState(0);\n\n  return (\n    <TabView\n      navigationState={{ index, routes }}\n      renderScene={renderScene}\n      onIndexChange={setIndex}\n      initialLayout={{ width: layout.width }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Route with getCurrentRoute Method\nDESCRIPTION: Example showing how to get information about the currently focused screen using the getCurrentRoute method from the NavigationContainer ref.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst route = navigationRef.current?.getCurrentRoute();\n```\n\n----------------------------------------\n\nTITLE: Defining a Stack Navigator with React Navigation (JavaScript)\nDESCRIPTION: This code initializes a simple React Navigation stack navigator containing two screens, Home and Chat, using createAppContainer and createStackNavigator. It demonstrates basic navigator setup without custom path configuration. Prerequisites include react-navigation installed in the project. The SimpleApp object is ready for usage as the root navigation container.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SimpleApp = createAppContainer(\n  createStackNavigator({\n    Home: { screen: HomeScreen },\n    Chat: { screen: ChatScreen },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Native Stack in React Native\nDESCRIPTION: Command to install the @react-navigation/native-stack package using npm or yarn. This package is required for implementing the native stack navigator in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native-stack@^6.x\n```\n\n----------------------------------------\n\nTITLE: Correct Header Title Implementation (Dynamic)\nDESCRIPTION: Demonstrates the correct way to define the `headerTitle` option in a dynamic native stack navigator configuration.  It passes a function which then returns the React element `<MyTitle {...props} />`. This function is correctly called by react navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={Home}\n  option={{\n    // highlight-next-line\n    headerTitle: (props) => <MyTitle {...props} />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Store Model with MobX State Tree\nDESCRIPTION: Example of a NavigationStore model using MobX State Tree, including definitions for product detail and user profile screen params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/MST-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { types, onSnapshot, getRoot } from 'mobx-state-tree';\nimport { Product } from '../models/Product';\nimport { User } from '../models/User';\n\nexport const NavigationStore = types\n  .model('NavigationStore', {\n    productDetailScreenParams: types.map(\n      types.model('ProductDetailScreenParams', {\n        product: types.optional(types.safeReference(Product)),\n      })\n    ),\n    userProfileScreenParams: types.model('UserProfileScreenParams', {\n      user: types.maybe(types.safeReference(User)),\n    }),\n  })\n  .actions(self => ({\n    ...\n  }));\n```\n\n----------------------------------------\n\nTITLE: Defining Component Outside Component (Dynamic)\nDESCRIPTION: Demonstrates the correct way to define a screen component outside of the `App` component to prevent unnecessary unmounting and remounting. The `Home` component is defined at the top level and then used within the `Stack.Screen` configuration. This approach promotes stability and proper state management.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = () => {\n  // ...\n\n  return <SomeComponent />;\n};\n\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Param Parsing Function in Linking Config (JavaScript)\nDESCRIPTION: This snippet shows how to supply a custom parsing function for a URL parameter (here, `id`) in a useLinking configuration. The provided function converts the string parameter to an integer, allowing precise type control over navigation parameters parsed from URLs. Used when parameters must be interpreted as types other than strings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  screens: {\\n    Catalog: {\\n      path: 'item/:id',\\n      parse: {\\n        id: id => parseInt(id, 10),\\n      },\\n    },\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Built-in Light and Dark Themes from React Navigation - JavaScript\nDESCRIPTION: Illustrates how to import the built-in DefaultTheme and DarkTheme objects from @react-navigation/native. These can be used as-is or extended for custom themes. No additional parameters or outputs; for use wherever themes are required in NavigationContainer or theme-aware components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Bare React Native Project\nDESCRIPTION: This command installs react-native-screens and react-native-safe-area-context in a bare React Native project. These libraries are commonly used with React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-screens react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Focus Events with Hooks in React Navigation (JavaScript)\nDESCRIPTION: This React functional component demonstrates how to use the navigation object's addListener method within useEffect to react when the screen gains focus. It sets up the listener on mount and ensures proper cleanup by unsubscribing when the component unmounts or navigation prop changes. Dependencies: React, React Navigation (v5.x or later). Inputs: navigation prop. Outputs: triggers the provided callback when the screen is focused. Use for running side-effects tied to screen visibility.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile({ navigation }) {\\n  React.useEffect(() => {\\n    const unsubscribe = navigation.addListener('focus', () => {\\n      // do something\\n    });\\n\\n    return unsubscribe;\\n  }, [navigation]);\\n\\n  return <ProfileContent />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Bar in React Native Tab View\nDESCRIPTION: Example of customizing the tab bar in TabView by using the renderTabBar prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabBar } from 'react-native-tab-view';\n\n<TabView\n  renderTabBar={props => <TabBar {...props} />}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for Verified App Links (XML)\nDESCRIPTION: Extends the `AndroidManifest.xml` configuration to support Android App Links (verified web links). It adds `android:autoVerify=\"true\"` to a new `intent-filter` and includes `<data>` elements specifying the `http` and `https` schemes along with the verified host (e.g., 'www.example.com'). Requires hosting a Digital Asset Links JSON file on the specified domain.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"http\" />\n        <data android:scheme=\"https\" />\n        <data android:host=\"www.example.com\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Dependencies in Bare React Native Projects\nDESCRIPTION: Installs `react-native-gesture-handler` and `react-native-reanimated` using npm for bare React Native projects. These are essential dependencies for the drawer navigator's functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Static Conditional Navigation with Shared Screens (React Navigation)\nDESCRIPTION: This code improves upon the previous static configuration by moving the `Help` screen into both the `LoggedIn` and `LoggedOut` groups. This ensures that when the sign-in state changes, the `navigationKey` (derived from the group name) also changes, effectively removing the `Help` screen and navigating the user to the appropriate root screen within the new group.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  groups: {\n    LoggedIn: {\n      if: useIsSignedIn,\n      screens: {\n        Home: HomeScreen,\n        Profile: ProfileScreen,\n        Help: HelpScreen,\n      },\n    },\n    LoggedOut: {\n      if: useIsSignedOut,\n      screens: {\n        SignIn: SignInScreen,\n        SignUp: SignUpScreen,\n        Help: HelpScreen,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Higher-Order Components Inside Another Component in Navigation - JavaScript\nDESCRIPTION: Highlights a problematic pattern where a higher-order component (withSomeData) wraps a screen component inside the App function, causing unnecessary remounting on each App render. Dependencies include React, React Navigation, withSomeData HOC, and Home component. Hoist HOC invocations outside of the functional component or to top-level module scope.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\\\"Home\\\" component={withSomeData(Home)} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsFocused Hook in React Navigation (Static Configuration)\nDESCRIPTION: This snippet demonstrates how to use the useIsFocused hook in a React Navigation app with static configuration. It shows a ProfileScreen component that displays different text based on whether the screen is focused or not.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-is-focused.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction ProfileScreen() {\n  // This hook returns `true` if the screen is focused, `false` otherwise\n  const isFocused = useIsFocused();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{isFocused ? 'focused' : 'unfocused'}</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createMaterialTopTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Tab);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Tab Press Behavior\nDESCRIPTION: Example of using an event listener to prevent the default behavior when a tab is pressed, allowing for custom handling of the tab press event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-bottom-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n\n    e.preventDefault();\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Re-rendering components with useIsFocused hook in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the useIsFocused hook to conditionally render content based on whether a screen is currently focused. The component will re-render whenever focus changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/function-after-focusing-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction Profile() {\n  // This hook returns `true` if the screen is focused, `false` otherwise\n  const isFocused = useIsFocused();\n\n  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Nesting Navigators in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates a common mistake where an `AuthenticationNavigator` (wrapped in `AuthenticationContainer`) is rendered directly within the `AuthenticationScreen` component, which itself is a screen in the main `AppNavigator`. This approach isolates the nested navigator's state, preventing interaction with the parent navigator and potentially causing unexpected behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/common-mistakes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    /* In the root component we are rendering the app navigator */\n    return <AppContainer />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AuthenticationContainer = createAppContainer(AuthenticationNavigator);\n\nclass AuthenticationScreen extends React.Component {\n  render() {\n    /*\n     * In a screen inside of the navigator we are rendering another navigator\n     * You should avoid this! It will have its own navigation state and be unable\n     * To interact with any parent navigator, eg: it would not know the route \"Home\" exists\n     */\n    return <AuthenticationContainer />;\n  }\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthenticationScreen, // This screen renders a navigator!\n  Home: HomeScreen,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation with NavigationContext in Dynamic Navigation Configuration\nDESCRIPTION: This example shows how to use NavigationContext to access the navigation object in a nested component within a React Navigation setup using dynamic configuration with NavigationContainer. Both approaches demonstrate accessing navigation properties like navigate() and goBack().\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-context.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { NavigationContext } from '@react-navigation/native';\n// codeblock-focus-end\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return <SomeComponent />;\n}\n\n// codeblock-focus-start\n\nfunction SomeComponent() {\n  // We can access navigation object via context\n  const navigation = React.useContext(NavigationContext);\n  // codeblock-focus-end\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Some component inside HomeScreen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = React.useContext(NavigationContext);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Fade Animation for Stack Navigator Headers\nDESCRIPTION: This snippet defines a custom header style interpolator that creates a fade effect for header elements during screen transitions. It adjusts the opacity of various header components based on the combined progress of current and next screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current, next }) => {\n  const opacity = Animated.add(\n    current.progress,\n    next ? next.progress : 0\n  ).interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 1, 0],\n  });\n\n  return {\n    leftButtonStyle: { opacity },\n    rightButtonStyle: { opacity },\n    titleStyle: { opacity },\n    backgroundStyle: { opacity },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Global Lazy Loading for TabView Scenes - React Native JavaScript\nDESCRIPTION: Enables lazy rendering for all scenes in TabView using the lazy boolean prop, causing non-focused scenes to load only when navigated to. Input is a boolean prop; output is performance optimization for larger tab sets. No function arguments required.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<TabView lazy />\n```\n\n----------------------------------------\n\nTITLE: Animated Drawer Content Implementation\nDESCRIPTION: Example of implementing animated drawer content using Reanimated\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomDrawerContent(props) {\n  const progress = useDrawerProgress();\n\n  const translateX = Animated.interpolateNode(progress, {\n    inputRange: [0, 1],\n    outputRange: [-100, 0],\n  });\n\n  return (\n    <Animated.View style={{ transform: [{ translateX }] }}>\n      {/* ... drawer contents */}\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Conditional Gesture Handler\nDESCRIPTION: Imports the conditional gesture handler setup file (`./gesture-handler`) at the very top of the application's entry file (e.g., `index.js` or `App.js`). This step is crucial for `react-native-gesture-handler` to work correctly on native platforms.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport './gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Using forFade SceneStyleInterpolator in React Navigation (Dynamic)\nDESCRIPTION: This code illustrates the use of the `forFade` scene style interpolator for a screen transition in React Navigation's Bottom Tab Navigator using dynamic configuration. It imports `SceneStyleInterpolators` from `@react-navigation/bottom-tabs` and applies the `SceneStyleInterpolators.forFade` directly within the `<Tab.Screen>` component for the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SceneStyleInterpolators } from '@react-navigation/bottom-tabs';\n\n// ...\n\n<Tab.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    // highlight-start\n    sceneStyleInterpolator: SceneStyleInterpolators.forFade,\n    // highlight-end\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Dependencies in Expo Managed Projects\nDESCRIPTION: Installs `react-native-gesture-handler` and `react-native-reanimated` using `npx expo install` for projects managed by Expo. These libraries are required dependencies for the drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: HeaderBackContext Usage Example\nDESCRIPTION: Example demonstrating how to use HeaderBackContext to access the back title of the parent screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeaderBackContext } from '@react-navigation/elements';\n\n// ...\n\n<HeaderBackContext.Consumer>\n  {(headerBack) => {\n    if (headerBack) {\n      const backTitle = headerBack.title;\n\n      /* render something */\n    }\n\n    /* render something */\n  }}\n</HeaderBackContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Animating and Cross-Fading the Header (React Navigation, JavaScript)\nDESCRIPTION: This advanced snippet demonstrates how to use the Animated API (from react-native) to interpolate header opacity for custom animated header transitions. It adds two animation progress values and uses them to interpolate the opacity for a cross-fade effect. Animated and React must be available, and this should be used within a header rendering function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst progress = Animated.add(scene.progress.current, scene.progress.next || 0);\n\nconst opacity = progress.interpolate({\n  inputRange: [0, 1, 2],\n  outputRange: [0, 1, 0],\n});\n\nreturn (\n  <Animated.View style={{ opacity }}>{/* Header content */}</Animated.View>\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Open Status with useDrawerStatus Hook\nDESCRIPTION: Code example showing how to determine if a drawer is open or closed using the useDrawerStatus hook from @react-navigation/drawer. This hook returns the current status which can be compared to 'open'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { useDrawerStatus } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useDrawerStatus() === 'open';\n```\n\n----------------------------------------\n\nTITLE: Accessing Tab Bar Height with useBottomTabBarHeight Hook\nDESCRIPTION: Shows how to use the `useBottomTabBarHeight` hook provided by `@react-navigation/bottom-tabs` to get the height of the bottom tab bar within a functional component. This is a more concise way to access the tab bar height compared to using the Context Consumer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\n\n// ...\n\nconst tabBarHeight = useBottomTabBarHeight();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Drawer Screen Options in React Navigation\nDESCRIPTION: Demonstrates setting multiple drawer screen options within the `screenOptions` prop of `Drawer.Navigator`. It configures `drawerActiveTintColor`, `drawerActiveBackgroundColor`, and `drawerLabelStyle` to customize the appearance of active items and their labels.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n    screenOptions={{\n      drawerActiveTintColor: 'white',\n      drawerActiveBackgroundColor: '#003CB3',\n      drawerLabelStyle: {\n        color: 'white',\n      },\n    }}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an App Container with React Navigation\nDESCRIPTION: This snippet demonstrates how to create an app container using createAppContainer and a stack navigator. The resulting AppContainer becomes the main component for React to render.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/app-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAppContainer, createStackNavigator } from 'react-navigation';\n// you can also import from @react-navigation/native\n\nconst AppNavigator = createStackNavigator(...);\n\nconst AppContainer = createAppContainer(AppNavigator);\n\n// Now AppContainer is the main component for React to render\n\nexport default AppContainer;\n```\n\n----------------------------------------\n\nTITLE: Integrating useLinkTo into Class Components in React Navigation - JavaScript\nDESCRIPTION: This snippet illustrates how to use the useLinkTo hook in a class component by wrapping it with a functional component. The class Home receives linkTo as a prop provided by the wrapper function, which calls useLinkTo and passes the result into the class component via props. This approach allows hooks to be used with class components despite hooks being functional-only in React. The wrapper expects any additional props to be forwarded, and the output is a class component with navigation capability via the linkTo prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-to.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Home extends React.Component {\n  render() {\n    // Get it from props\n    const { linkTo } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const linkTo = useLinkTo();\n\n  return <Profile {...props} linkTo={linkTo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Basic Screen Navigation\nDESCRIPTION: Implementation of a HomeScreen component with navigation to Details screen using React Navigation's navigate method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing data fetching with useFocusEffect (Static)\nDESCRIPTION: This test verifies that data is fetched and displayed correctly in the Pokemon info screen after it gains focus, using a static navigation setup.  It mocks the API call using MSW, navigates to the Pokemon screen, waits for the loading state, and asserts that the data is displayed.  It then navigates back to the Home screen and back to the Pokemon screen to verify cached data is displayed without showing loading state again.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport './msw-node';\n\nimport { expect, jest, test } from '@jest/globals';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('loads data on Pokemon info screen after focus', async () => {\n  const user = userEvent.setup();\n\n  const Navigation = createStaticNavigation(MyTabs);\n\n  render(<Navigation />);\n\n  const homeTabButton = screen.getByLabelText('Home, tab, 1 of 2');\n  const profileTabButton = screen.getByLabelText('Profile, tab, 2 of 2');\n\n  await user.press(profileTabButton);\n\n  expect(screen.getByText('Loading...')).toBeVisible();\n\n  await act(() => jest.runAllTimers());\n\n  expect(screen.getByText('ditto')).toBeVisible();\n\n  await user.press(homeTabButton);\n\n  await act(() => jest.runAllTimers());\n\n  await user.press(profileTabButton);\n\n  expect(screen.queryByText('Loading...')).not.toBeVisible();\n  expect(screen.getByText('ditto')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer ref with React.useRef in TypeScript\nDESCRIPTION: This example demonstrates how to create and annotate a ref for NavigationContainer using the React.useRef hook with the NavigationContainerRef type to ensure type-checking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef =\n  React.useRef<NavigationContainerRef<RootStackParamList>>(null);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Drawer Actions in React Navigation\nDESCRIPTION: This snippet shows how to dispatch drawer actions directly using the navigation object in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(DrawerActions.openDrawer());\nnavigation.dispatch(DrawerActions.closeDrawer());\nnavigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Navigation Stack in React Navigation\nDESCRIPTION: Creates a nested stack navigator structure with modal functionality using React Navigation. Demonstrates how to configure modal transitions, implement navigation between screens, and handle modal dismissal. Uses nested stack navigators to achieve different transition styles for modal vs regular screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const params = navigation.state.params || {};\n\n    return {\n      headerLeft: (\n        <Button\n          onPress={() => navigation.navigate('MyModal')}\n          title=\"Info\"\n          color=\"#fff\"\n        />\n      ),\n      /* the rest of this config is unchanged */\n    };\n  };\n\n  /* render function, etc */\n}\n\nclass ModalScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n        <Button\n          onPress={() => this.props.navigation.goBack()}\n          title=\"Dismiss\"\n        />\n      </View>\n    );\n  }\n}\n\nconst MainStack = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n  {\n    /* Same configuration as before */\n  }\n);\n\nconst RootStack = createStackNavigator(\n  {\n    Main: {\n      screen: MainStack,\n    },\n    MyModal: {\n      screen: ModalScreen,\n    },\n  },\n  {\n    mode: 'modal',\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Android Back Button Handler in React Navigation\nDESCRIPTION: React component implementation that shows how to handle Android hardware back button presses using BackHandler and navigation lifecycle events. The component subscribes to navigation focus events to properly manage back button listeners and implements custom logic for handling back presses during selection mode.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { BackHandler } from \"react-native\";\n\nclass ScreenWithCustomBackBehavior extends React.Component {\n  _didFocusSubscription;\n  _willBlurSubscription;\n\n  constructor(props) {\n    super(props);\n    this._didFocusSubscription = props.navigation.addListener('didFocus', payload =>\n      BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPressAndroid)\n    );\n  }\n\n  componentDidMount() {\n    this._willBlurSubscription = this.props.navigation.addListener('willBlur', payload =>\n      BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPressAndroid)\n    );\n  }\n\n  onBackButtonPressAndroid = () => {\n    if (this.isSelectionModeEnabled()) {\n      this.disableSelectionMode();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  componentWillUnmount() {\n    this._didFocusSubscription && this._didFocusSubscription.remove();\n    this._willBlurSubscription && this._willBlurSubscription.remove();\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Parameters in React Navigation\nDESCRIPTION: Demonstrates how to update parameters for the current screen using the navigation.setParams method. This example updates a query parameter with new text.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/params.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.setParams({\n  query: 'someText',\n});\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer ref with useNavigationContainerRef in TypeScript\nDESCRIPTION: This snippet shows how to create and annotate a ref for NavigationContainer using the useNavigationContainerRef hook to ensure type-checking for navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef = useNavigationContainerRef<RootStackParamList>();\n```\n\n----------------------------------------\n\nTITLE: Typing Navigation Prop for Stack Screen in TypeScript\nDESCRIPTION: Shows how to type the `navigation` prop for a specific screen ('Profile'). It imports `StackNavigationProp` from `@react-navigation/stack` and uses it with the `RootStackParamList` and the current route name ('Profile') to create a specific navigation prop type (`ProfileScreenNavigationProp`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackNavigationProp } from '@react-navigation/stack';\n\ntype ProfileScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'Profile'\n>;\n\ntype Props = {\n  navigation: ProfileScreenNavigationProp;\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigator State in React Navigation (Static Configuration)\nDESCRIPTION: This code snippet demonstrates how to use the reset method to replace the current navigator state with a new state in a React Navigation app using static configuration. It includes a complete app setup with multiple screens and navigation options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>This is the home screen of the app</Text>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brents profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile Screen</Text>\n      <Text>Friends: </Text>\n      <Text>{route.params.names[0]}</Text>\n      <Text>{route.params.names[1]}</Text>\n      <Text>{route.params.names[2]}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      <Button\n        onPress={() => {\n          navigation.replace('Settings', {\n            someParam: 'Param',\n          });\n        }}\n      >\n        Replace this screen with Settings\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.reset({\n            index: 0,\n            routes: [\n              {\n                name: 'Settings',\n                params: { someParam: 'Param1' },\n              },\n            ],\n          });\n          // codeblock-focus-end\n        }}\n      >\n        Reset navigator state to Settings\n      </Button>\n      <Button onPress={() => navigation.navigate('Home')}> Go to Home </Button>\n      <Button\n        onPress={() => navigation.navigate('Settings', { someParam: 'Param1' })}\n      >\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\nfunction SettingsScreen({ route }) {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Settings screen</Text>\n      <Text>{route.params.someParam}</Text>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', {\n            names: ['Brent', 'Satya', 'Micha≈õ'],\n          });\n        }}\n      >\n        Go to Brents profile\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n    Settings: SettingsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using useLogger Hook with Static Navigation - React Navigation - JavaScript\nDESCRIPTION: Demonstrates using the useLogger hook from @react-navigation/devtools to log navigation state and actions in a static navigation setup. Assumes installation of @react-navigation/native and @react-navigation/devtools. Accepts a navigationRef initialized via useNavigationContainerRef as parameter. Outputs navigation logs to the developer console. Should only be used in development builds; no extra steps needed to exclude from production.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/devtools.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  createStaticNavigation,\\n  useNavigationContainerRef,\\n} from '@react-navigation/native';\\nimport { useLogger } from '@react-navigation/devtools';\\n\\n/* content */\\n\\nexport default function App() {\\n  const navigationRef = useNavigationContainerRef();\\n\\n  useLogger(navigationRef);\\n\\n  return <Navigation ref={navigationRef} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Switch Navigator with React Navigation for Web (JavaScript)\nDESCRIPTION: This snippet shows how to set up a switch navigator using React Navigation's core and web packages in a standard React app. Dependencies include '@react-navigation/core' for navigation logic and '@react-navigation/web' for browser-based integration. The snippet demonstrates how to create a navigator, wrap it for browser usage, and render it as a normal React component. The \"routes\" parameter should contain your route configuration. The output is a React component named 'App' ready to serve as the root navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/web-support.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSwitchNavigator } from '@react-navigation/core';\nimport { createBrowserApp } from '@react-navigation/web';\n\nconst MyNavigator = createSwitchNavigator(routes);\n\nconst App = createBrowserApp(MyNavigator);\n\n// now you can render \"App\" normally\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer in React Navigation\nDESCRIPTION: This code demonstrates how to toggle the drawer state (open/close) in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Setting headerBackTitle in StackNavigator (v1.x)\nDESCRIPTION: Example showing how to configure the `headerBackTitle` navigation option within a StackNavigator. It demonstrates setting the back button title to `null` (disabling it) on the *origin* screen (Screen A) for the transition *to* the destination screen (Screen B). This option controls the text next to the back arrow on iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nStackNavigator({\n  A: {\n    screen: AScreen,\n    navigationOptions: () => ({\n      title: `A`,\n      headerBackTitle: null,\n    }),\n  },\n  B: {\n    screen: BScreen,\n    navigationOptions: () => ({\n      title: `B`,\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bare React Native Projects\nDESCRIPTION: Commands to install and link required dependencies for React Navigation in bare React Native projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-screens react-native-safe-area-context\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Illustrating Default Stack Navigation Behavior without getId in JavaScript\nDESCRIPTION: This example shows the default behavior of a stack navigator when `getId` is not used. Navigating to the same screen name multiple times with different parameters updates the parameters of the current screen instance rather than pushing a new screen onto the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Let's say you're on `Home` screen\n// Then you navigate to `Profile` screen with `userId: 1`\nnavigation.navigate('Profile', { userId: 1 });\n\n// Now the stack will have: `Home` -> `Profile` with `userId: 1`\n\n// Then you navigate to `Profile` screen again with `userId: 2`\nnavigation.navigate('Profile', { userId: 2 });\n\n// The stack will now have: `Home` -> `Profile` with `userId: 2`\n```\n\n----------------------------------------\n\nTITLE: Integrating useIsFocused with Class Components in React Navigation (JavaScript)\nDESCRIPTION: Illustrates a pattern to use the useIsFocused hook in class components by wrapping the class with a function component that passes the focus state as a prop. This approach requires both React and @react-navigation/native. The class Profile component reads isFocused from props, and the wrapper function injects this value using the hook. The pattern allows legacy or non-hook codebases to take advantage of useIsFocused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-is-focused.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Get it from props\n    const { isFocused } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const isFocused = useIsFocused();\n\n  return <Profile {...props} isFocused={isFocused} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Routing Rewrites for React Navigation on Vercel - JSON\nDESCRIPTION: This JSON configuration enables SPA-style routing on Vercel by specifying rewrites that always serve index.html, regardless of the incoming URL. It should be added to vercel.json at the project root to prevent 404 errors on route refreshes for web apps using React Navigation. The rewrites array maps all route patterns to /index.html for client-side navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/web-support.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/index.html\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack PopToTop Action in React Navigation (Dynamic)\nDESCRIPTION: This snippet demonstrates how to use the popToTop action in a dynamic navigation configuration. It shows a ProfileScreen with a button to pop to the top of the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Store with MobX State Tree\nDESCRIPTION: Example of a navigation store implementation using MobX State Tree, showing how to model navigation parameters for different screens with type safety and references to other models.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/MST-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { types, onSnapshot, getRoot } from 'mobx-state-tree';\nimport { Product } from '../models/Product';\nimport { User } from '../models/User';\n\nexport const NavigationStore = types\n  .model('NavigationStore', {\n    productDetailScreenParams: types.map(\n      types.model('ProductDetailScreenParams', {\n        product: types.optional(types.safeReference(Product)),\n      })\n    ),\n    userProfileScreenParams: types.model('UserProfileScreenParams', {\n      user: types.maybe(types.safeReference(User)),\n    }),\n  })\n  .actions(self => ({\n    ...\n  }));\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator (Dynamic) in React Native\nDESCRIPTION: This code snippet showcases how to create a bottom tab navigator dynamically using `createBottomTabNavigator` from `@react-navigation/bottom-tabs`.  It defines HomeScreen and SettingsScreen components and uses Tab.Navigator and Tab.Screen to configure the tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Text, View } from 'react-native';\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n};\n\nconst SettingsScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings screen</Text>\n    </View>\n  );\n};\n\nconst Tab = createBottomTabNavigator();\n\nexport const MyTabs = () => {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Update @react-native/babel-preset\nDESCRIPTION: This command updates the `@react-native/babel-preset` package. It is used to resolve syntax errors related to newer JavaScript syntax.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @react-native/babel-preset\n```\n\n----------------------------------------\n\nTITLE: React Navigation State Object with Chat Route and Params (JS)\nDESCRIPTION: This code snippet shows a React Navigation state object containing a `Chat` route with a timestamp parameter (`at`). This represents a user navigating to a chat screen with a specific date and time. This configuration is later used to demonstrate serialization and parsing of parameters in URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Chat',\n      params: { at: 1589842744264 },\n    },\n  ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Navigators with Deep Linking Paths in React Navigation\nDESCRIPTION: This snippet shows how to set up deep linking paths for nested navigators. It demonstrates concatenating paths and using empty strings for parent screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst AuthSwitch = createAppContainer(\n  createStackNavigator({\n    AuthLoading: { screen: AuthLoadingScreen },\n    App: {\n      screen: AppStack,\n      path: '',\n    },\n    Auth: { screen: AuthStack },\n  })\n);\n\nconst AppStack = createStackNavigator({\n  Home: { screen: HomeScreen },\n  Friends: {\n    screen: FriendsScreen,\n    path: 'friends',\n  },\n});\n\nconst FriendsScreen = createStackNavigator({\n  Overview: { screen: OverviewScreen },\n  Chat: {\n    screen: ChatScreen,\n    path: 'chat/:user',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationEvents Component in React Native\nDESCRIPTION: Example showing how to use the NavigationEvents component to subscribe to navigation lifecycle events (willFocus, didFocus, willBlur, didBlur) in a React Native screen component. The component automatically handles subscription and unsubscription of navigation events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { NavigationEvents } from 'react-navigation';\n\nconst MyScreen = () => (\n  <View>\n    <NavigationEvents\n      onWillFocus={(payload) => console.log('will focus', payload)}\n      onDidFocus={(payload) => console.log('did focus', payload)}\n      onWillBlur={(payload) => console.log('will blur', payload)}\n      onDidBlur={(payload) => console.log('did blur', payload)}\n    />\n    {/*\n      Your view code\n    */}\n  </View>\n);\n\nexport default MyScreen;\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation DevTools Package\nDESCRIPTION: Command to install the @react-navigation/devtools package for version 5.x using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/devtools.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/devtools@^5.x\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Screen in a Nested Navigator in React Navigation (JS)\nDESCRIPTION: Shows how to navigate to a specific screen ('Profile') inside a nested navigator contained within the 'Root' screen. This is achieved by passing an object as the second argument to `navigate`, specifying the target screen name using the `screen` key: `navigation.navigate('Root', { screen: 'Profile' })`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate('Root', { screen: 'Profile' });\n```\n\n----------------------------------------\n\nTITLE: Integrating ServerContainer with Koa for Server Rendering (JS)\nDESCRIPTION: Provides a basic example of using `ServerContainer` within a Koa web server. It shows how to extract the request's path (`ctx.path`) and search string (`ctx.search`) and pass them as the `location` prop to `ServerContainer` before rendering the React app to an HTML string. This example is illustrative and not intended for direct production use without modifications.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-container.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\napp.use(async (ctx) => {\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={{ pathname: ctx.path, search: ctx.search }}>\n      <App />\n    </ServerContainer>\n  );\n\n  ctx.body = html;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Bottom Tab Bar with UI Kitten Components\nDESCRIPTION: This snippet shows how to create a custom bottom tab bar using UI Kitten's BottomNavigation and BottomNavigationTab components, integrating with React Navigation's state and navigation props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { BottomNavigation, BottomNavigationTab, Divider, BottomNavigationTabElement } from '@ui-kitten/components';\nimport { SafeAreaLayout, SafeAreaLayoutElement, SaveAreaInset } from '../../components/safe-area-layout.component';\n\nexport const HomeTabBar = (props): SafeAreaLayoutElement => {\n\n  const onSelect = (index: number): void => {\n    const selectedTabRoute: string = props.state.routeNames[index];\n    props.navigation.navigate(selectedTabRoute);\n  };\n\n  const createNavigationTabForRoute = (route): BottomNavigationTabElement => {\n    const { options } = props.descriptors[route.key];\n    return (\n      <BottomNavigationTab\n        key={route.key}\n        title={options.title}\n        icon={options.tabBarIcon}\n      />\n    );\n  };\n\n  return (\n    <SafeAreaLayout insets={SaveAreaInset.BOTTOM}>\n      <Divider/>\n      <BottomNavigation\n        appearance='noIndicator'\n        selectedIndex={props.state.index}\n        onSelect={onSelect}>\n        {props.state.routes.map(createNavigationTabForRoute)}\n      </BottomNavigation>\n    </SafeAreaLayout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Card Style Interpolator to Stack Screen in React Navigation\nDESCRIPTION: This code demonstrates how to apply a custom card style interpolator (the fade effect) to a Stack.Screen component using the cardStyleInterpolator option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{ cardStyleInterpolator: forFade }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Material Bottom Tab Navigator\nDESCRIPTION: Minimal implementation of Material Bottom Tab Navigator with two screens - Home and Settings. This shows how to import the navigator, create an instance, and define basic tab screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Lifecycle Event Listener\nDESCRIPTION: Shows how to subscribe to navigation lifecycle events and handle the event payload.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst didBlurSubscription = this.props.navigation.addListener(\n  'didBlur',\n  (payload) => {\n    console.debug('didBlur', payload);\n  }\n);\n\n// Remove the listener when you are done\ndidBlurSubscription.remove();\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigator with Custom Router in React Navigation\nDESCRIPTION: Example demonstrating how to customize a navigator by replacing the default TabRouter with a custom router implementation. This shows how to extend navigator functionality by substituting core behavior components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport MyRouter from './MyRouter';\n\n// ...\n\nconst { state, descriptors, navigation } = useNavigationBuilder(MyRouter, {\n  initialRouteName,\n  backBehavior,\n  children,\n  screenOptions,\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Checking Header Visibility with HeaderShownContext in React Navigation (JavaScript/React)\nDESCRIPTION: Demonstrates how to use the `HeaderShownContext.Consumer` component from `@react-navigation/elements` to access a boolean value indicating whether a header is visible in the parent screen. The consumer function receives the `headerShown` boolean as an argument, which can be used for conditional rendering. Requires the `@react-navigation/elements` package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderShownContext } from '@react-navigation/elements';\n\n// ...\n\n<HeaderShownContext.Consumer>\n  {(headerShown) => {\n    /* render something */\n  }}\n</HeaderShownContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Screen Options - Static API - JavaScript\nDESCRIPTION: Uses the 'screenOptions' property on the static configuration to set default options for all screens in the navigator, such as hiding the header with headerShown: false. This pattern is useful for setting common behavior and appearance across all managed screens. Dependencies include HomeScreen, ProfileScreen, and the required navigator creator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\\n  // highlight-start\\n  screenOptions: {\\n    headerShown: false,\\n  },\\n  // highlight-end\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationEvents Component in React Navigation\nDESCRIPTION: Example showing how to implement the NavigationEvents component to subscribe to navigation lifecycle events including willFocus, didFocus, willBlur, and didBlur. The component automatically handles subscription on mount and cleanup on unmount.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { NavigationEvents } from 'react-navigation';\n\nconst MyScreen = () => (\n  <View>\n    <NavigationEvents\n      onWillFocus={(payload) => console.log('will focus', payload)}\n      onDidFocus={(payload) => console.log('did focus', payload)}\n      onWillBlur={(payload) => console.log('will blur', payload)}\n      onDidBlur={(payload) => console.log('did blur', payload)}\n    />\n    {/*\n      Your view code\n    */}\n  </View>\n);\n\nexport default MyScreen;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Drawer Navigation in React Native\nDESCRIPTION: A complete example showing how to set up a basic drawer navigator with two screens (Home and Notifications) in React Navigation. Includes screen components and navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Button, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.navigate('Notifications')}\n        title=\"Go to notifications\"\n      />\n    </View>\n  );\n}\n\nfunction NotificationsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()} title=\"Go back home\" />\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator initialRouteName=\"Home\">\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Notifications\" component={NotificationsScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Drawer Content with Additional Items\nDESCRIPTION: Example of custom drawer content that adds a Help link to the default drawer items. Uses DrawerContentScrollView, DrawerItemList, and DrawerItem components to create a custom drawer content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Help\"\n        onPress={() => Linking.openURL('https://mywebsite.com/help')}\n      />\n    </DrawerContentScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drawer Content with React Native Paper\nDESCRIPTION: Creates an enhanced drawer UI using components from React Navigation Drawer and React Native Paper. This implementation includes user profile information, navigation items with icons, and toggle switches for preferences like dark theme and RTL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  DrawerItem,\n  DrawerContentScrollView,\n} from '@react-navigation/drawer';\nimport {\n  useTheme,\n  Avatar,\n  Title,\n  Caption,\n  Paragraph,\n  Drawer,\n  Text,\n  TouchableRipple,\n  Switch,\n} from 'react-native-paper';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nexport function DrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <View\n        style={\n          styles.drawerContent,\n        }\n      >\n        <View style={styles.userInfoSection}>\n          <Avatar.Image\n            source={{\n              uri:\n                'https://pbs.twimg.com/profile_images/952545910990495744/b59hSXUd_400x400.jpg',\n            }}\n            size={50}\n          />\n          <Title style={styles.title}>Dawid Urbaniak</Title>\n          <Caption style={styles.caption}>@trensik</Caption>\n          <View style={styles.row}>\n            <View style={styles.section}>\n              <Paragraph style={[styles.paragraph, styles.caption]}>\n                202\n              </Paragraph>\n              <Caption style={styles.caption}>Following</Caption>\n            </View>\n            <View style={styles.section}>\n              <Paragraph style={[styles.paragraph, styles.caption]}>\n                159\n              </Paragraph>\n              <Caption style={styles.caption}>Followers</Caption>\n            </View>\n          </View>\n        </View>\n        <Drawer.Section style={styles.drawerSection}>\n          <DrawerItem\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons\n                name=\"account-outline\"\n                color={color}\n                size={size}\n              />\n            )}\n            label=\"Profile\"\n            onPress={() => {}}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name=\"tune\" color={color} size={size} />\n            )}\n            label=\"Preferences\"\n            onPress={() => {}}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons\n                name=\"bookmark-outline\"\n                color={color}\n                size={size}\n              />\n            )}\n            label=\"Bookmarks\"\n            onPress={() => {}}\n          />\n        </Drawer.Section>\n        <Drawer.Section title=\"Preferences\">\n          <TouchableRipple onPress={() => {}}>\n            <View style={styles.preference}>\n              <Text>Dark Theme</Text>\n              <View pointerEvents=\"none\">\n                <Switch value={false} />\n              </View>\n            </View>\n          </TouchableRipple>\n          <TouchableRipple onPress={() => {}}>\n            <View style={styles.preference}>\n              <Text>RTL</Text>\n              <View pointerEvents=\"none\">\n                <Switch value={false} />\n              </View>\n            </View>\n          </TouchableRipple>\n        </Drawer.Section>\n      </View>\n    </DrawerContentScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  drawerContent: {\n    flex: 1,\n  },\n  userInfoSection: {\n    paddingLeft: 20,\n  },\n  title: {\n    marginTop: 20,\n    fontWeight: 'bold',\n  },\n  caption: {\n    fontSize: 14,\n    lineHeight: 14,\n  },\n  row: {\n    marginTop: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginRight: 15,\n  },\n  paragraph: {\n    fontWeight: 'bold',\n    marginRight: 3,\n  },\n  drawerSection: {\n    marginTop: 15,\n  },\n  preference: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Modal/Card Transitions for Stack Navigator Screens in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to use a custom 'transitionConfig' to dynamically choose between modal and card transitions for specific screens in a stack navigator. Dependencies: React Navigation (createStackNavigator, StackViewTransitionConfigs), screen components (DetailScreen, HomeScreen, OptionsScreen). The logic checks if the current or previous screen is listed in 'IOS_MODAL_ROUTES' and accordingly applies a modal transition using defaultTransitionConfig. This allows fine-grained per-screen transition behavior, primarily used to force modal transitions on select routes without configuring at the root options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  createStackNavigator,\n  StackViewTransitionConfigs,\n} from 'react-navigation';\n\n/* The screens you add to IOS_MODAL_ROUTES will have the modal transition.  */\nconst IOS_MODAL_ROUTES = ['OptionsScreen'];\n\nlet dynamicModalTransition = (transitionProps, prevTransitionProps) => {\n  const isModal = IOS_MODAL_ROUTES.some(\n    (screenName) =>\n      screenName === transitionProps.scene.route.routeName ||\n      (prevTransitionProps &&\n        screenName === prevTransitionProps.scene.route.routeName)\n  );\n  return StackViewTransitionConfigs.defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n};\n\nconst HomeStack = createStackNavigator(\n  { DetailScreen, HomeScreen, OptionsScreen },\n  { initialRouteName: 'HomeScreen', transitionConfig: dynamicModalTransition }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Screen Options with getCurrentOptions Method\nDESCRIPTION: Example demonstrating how to retrieve the options of the currently focused screen using the getCurrentOptions method from the NavigationContainer ref.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = navigationRef.current?.getCurrentOptions();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stack Navigator in React Native\nDESCRIPTION: This snippet demonstrates how to create a simple stack navigator using React Navigation. It sets up a single HomeScreen component and exports it as the root component of the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In App.js in a new project\n\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStackNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n      </View>\n    );\n  }\n}\n\nexport default createStackNavigator({\n  Home: {\n    screen: HomeScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking in iOS AppDelegate\nDESCRIPTION: This Objective-C code modifies the AppDelegate to handle incoming URLs for deep linking in iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this above the `@end`:\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n  return [RCTLinkingManager application:application openURL:url\n                      sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with ServerContainer and Custom Location - JavaScript\nDESCRIPTION: This snippet illustrates how to render the correct screen for a given URL by integrating ServerContainer from React Navigation. It showcases how to utilize Koa's context to extract the incoming request URL and use it to determine which screen to render on the server. Required dependencies include Koa, React Native Web, React Navigation's ServerContainer, and ReactDOMServer. The input is the request context, and the output is the HTML string tailored to the requested route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.use(async (ctx) => {\\n  const location = new URL(ctx.url, 'https://example.org/');\\n\\n  const { element, getStyleElement } = AppRegistry.getApplication('App');\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ServerContainer location={location}>{element}</ServerContainer>\\n  );\\n\\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\\n\\n  const document = `\\n    <!DOCTYPE html>\\n    <html style=\\\"height: 100%\\\">\\n    <meta charset=\\\"utf-8\\\">\\n    <meta httpEquiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\\\"\\n    >\\n    ${css}\\n    <body style=\\\"min-height: 100%\\\">\\n    <div id=\\\"root\\\" style=\\\"display: flex; min-height: 100vh\\\">\\n    ${html}\\n    </div>\\n`;\n\\n  ctx.body = document;\\n});\n```\n\n----------------------------------------\n\nTITLE: Using TransitionPresets for Individual Screens\nDESCRIPTION: Example of applying iOS modal slide transition preset to a single screen in the stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    title: 'Profile',\n    ...TransitionPresets.ModalSlideFromBottomIOS,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Options Dynamically with setParams (JavaScript)\nDESCRIPTION: Illustrates how to dynamically update navigation parameters from within a screen component using `this.props.navigation.setParams`. This is often used in conjunction with dynamic `navigationOptions` (like setting the title from params) to update the header based on user interaction, such as a button press.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/* Inside of render() */\n<Button\n  title=\"Update the title\"\n  onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Wiring Linking Configuration into NavigationContainer (React Navigation, JavaScript)\nDESCRIPTION: This snippet integrates the linking configuration into the React Navigation container, enabling parsing incoming URLs based on mapping rules and path prefixes. It demonstrates how to import dependencies, define the linking prop (prefixes and config), and render the container with fallback content. Dependencies include '@react-navigation/native' and any components/screens referenced in the navigator. The config must represent your app's navigation hierarchy and will handle deep link routing to the proper screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst config = {\n  screens: {\n    Chat: 'feed/:sort',\n    Profile: 'user',\n  },\n};\n\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config,\n};\n\nfunction App() {\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Header Style Configuration for Custom Headers\nDESCRIPTION: Example of specifying a custom header height in the headerStyle option to prevent measurement glitches. This is important when implementing custom headers with non-standard heights.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Key in Dynamic Group Configuration\nDESCRIPTION: Example of setting a navigation key for a group using the Stack.Group component. The key changes based on authentication state, which will reset or remove screens when the key changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Group\n  navigationKey={isSignedIn ? 'user' : 'guest'}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files for React Navigation Testing (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure Jest to run the native module mock setup file before executing tests. It should be placed in a `jest.config.js` file or under the `jest` key in `package.json`. The `setupFiles` array must contain the correct relative path to the JavaScript file containing the mocks (e.g., `<rootDir>/jest/setup.js`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"react-native\",\n  \"setupFiles\": [\"<rootDir>/jest/setup.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Route Name in React Navigation (JS)\nDESCRIPTION: This code snippet demonstrates how to configure the `initialRouteName` property in React Navigation. Setting `initialRouteName` ensures that a specific screen is always the first screen in the navigator's state. This is useful for displaying a default screen when the app is launched or when navigating to a specific navigator. In this example, the 'Feed' screen will always be the initial route under the 'Home' navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: 'settings',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Route in React Navigation\nDESCRIPTION: This example demonstrates how to specify an initial route for a navigator using the 'initialRouteName' property in the navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: 'settings',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Applying System Theme Preference in React Navigation (JavaScript)\nDESCRIPTION: This code demonstrates how to use the `useColorScheme` hook from `react-native` to detect the user's operating system color scheme preference ('dark' or 'light'). Based on the detected scheme, it conditionally applies either the `DarkTheme` or `DefaultTheme` to the `NavigationContainer`, ensuring the app's theme matches the system setting. Requires React Native 0.63+ or `react-native-appearance` for older versions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { useColorScheme } from 'react-native';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\n\nexport default () => {\n  const scheme = useColorScheme();\n\n  return (\n    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>\n      {/* content */}\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation for Stack Navigator Header in React Navigation\nDESCRIPTION: This interpolator function creates a fade effect for the header elements during screen transitions. It interpolates the opacity of various header components based on the current and next screen progress.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current, next }) => {\n  const opacity = Animated.add(\n    current.progress,\n    next ? next.progress : 0\n  ).interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 1, 0],\n  });\n\n  return {\n    leftButtonStyle: { opacity },\n    rightButtonStyle: { opacity },\n    titleStyle: { opacity },\n    backgroundStyle: { opacity },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Link Filtering Configuration\nDESCRIPTION: Example of how to filter specific URLs from being handled by the navigation system using the filter option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['example://', 'https://example.com'],\n  filter: (url) => !url.includes('+expo-auth-session'),\n};\n```\n\n----------------------------------------\n\nTITLE: Using jumpTo Method in Material Bottom Tab Navigator\nDESCRIPTION: Example of using the jumpTo method to programmatically navigate to a specific tab in the Material Bottom Tab Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-bottom-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.jumpTo('Profile', { name: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Source Extensions (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the necessary `sourceExts` configuration within a `metro.config.js` file. Ensure `ts` and `tsx` are included if your project uses TypeScript, as omitting them can cause module resolution errors for `.tsx` files in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsourceExts: ['js', 'json', 'ts', 'tsx'];\n```\n\n----------------------------------------\n\nTITLE: Creating a Material Bottom Tab Navigator Example in JavaScript\nDESCRIPTION: Example demonstrating the creation of a material bottom tab navigator with four tabs (Album, Library, History, Cart). It specifies screen components for each route and configures options such as the `initialRouteName`, `activeColor`, `inactiveColor`, and `barStyle`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-bottom-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nexport default createMaterialBottomTabNavigator(\n  {\n    Album: { screen: Album },\n    Library: { screen: Library },\n    History: { screen: History },\n    Cart: { screen: Cart },\n  },\n  {\n    initialRouteName: 'Album',\n    activeColor: '#f0edf6',\n    inactiveColor: '#3e2465',\n    barStyle: { backgroundColor: '#694fad' },\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Listing React Navigation Library Exports\nDESCRIPTION: Enumerates the primary components, functions, and contexts exported by the updated React Navigation library. This includes the stack navigator creator, core view components (`StackView`, `Header`), header customization components, style/transition helpers (`CardStyleInterpolators`, `TransitionPresets`), and hooks/contexts for accessing navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n- `createStackNavigator`\n- `StackView`\n- `Header`\n- `HeaderTitle`\n- `HeaderBackButton`\n- `HeaderBackground`\n- `CardStyleInterpolators`\n- `HeaderStyleInterpolators`\n- `TransitionSpecs`\n- `TransitionPresets`\n- `CardAnimationContext`\n- `GestureHandlerRefContext`\n- `HeaderHeightContext`\n- `useCardAnimation`\n- `useHeaderHeight`\n- `useGestureHandlerRef`\n```\n\n----------------------------------------\n\nTITLE: Using useLinkTo Hook in a Functional Component (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of the `useLinkTo` hook within a React functional component. It imports the hook from `@react-navigation/native`, calls it to get the `linkTo` function, and then uses this function within a Button's `onPress` handler to navigate to the specified path ('/profile/jane') based on the application's linking configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-link-to.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useLinkTo } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  const linkTo = useLinkTo();\n\n  return (\n    <Button onPress={() => linkTo('/profile/jane')}>\n      Go to Jane's profile\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Routes\nDESCRIPTION: Example showing how to configure routes in a stack navigator including screen components, deep linking paths, and navigation options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateStackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Router State Handling in a Custom Navigator - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates advanced customization of a navigator by overriding the getStateForAction method of the router, enabling interception and customization of navigation state for specific actions. It also shows how to observe prop changes in componentDidUpdate and render extra UI elements around the stack navigator. Depends on react-navigation, createStackNavigator, and React. Key parameters: navigation prop, custom router logic. Output: Extra wrapped view with stack navigator and customized state transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createStackNavigator({ ... });\n\nclass CustomNavigator extends React.Component {\n  static router = {\n    ...MyStack.router,\n    getStateForAction: (action, lastState) => {\n      // check for custom actions and return a different navigation state.\n      return MyStack.router.getStateForAction(action, lastState);\n    },\n  };\n  componentDidUpdate(lastProps) {\n    // Navigation state has changed from lastProps.navigation.state to this.props.navigation.state\n  }\n  render() {\n    const { navigation } = this.props;\n\n    return (\n      <View>\n        <MyStack navigation={navigation} />\n        {...}\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Open State with useIsDrawerOpen Hook (JavaScript)\nDESCRIPTION: Illustrates how to check if the drawer is open using the useIsDrawerOpen hook from '@react-navigation/drawer'. Requires importing and calling useIsDrawerOpen. Returns a boolean indicating whether the drawer is currently open, useful for conditional rendering or logic depending on drawer state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useIsDrawerOpen();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Non-Serializable Value Warning in React Navigation\nDESCRIPTION: This snippet demonstrates how to suppress the \"Non-serializable values were found in the navigation state\" warning using `LogBox.ignoreLogs`.  This is useful when state persistence or deep linking are not used for the screens where these warnings are triggered.  Import the LogBox from react-native and call ignoreLogs with an array containing the warning message.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LogBox } from 'react-native';\n\nLogBox.ignoreLogs([\n  'Non-serializable values were found in the navigation state',\n]);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigate Action in React Navigation\nDESCRIPTION: This snippet demonstrates how to create and dispatch a Navigate action using NavigationActions. It includes options for specifying the route name, parameters, and nested actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow with Static API\nDESCRIPTION: Demonstrates how to implement conditional screen rendering for authentication flows using the 'if' property.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      if: useIsSignedIn,\n      screen: HomeScreen,\n    },\n    SignIn: {\n      if: useIsSignedOut,\n      screen: SignInScreen,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Links in React Navigation\nDESCRIPTION: Example configuration for setting up URL routing in React Navigation using the linking prop. Demonstrates how to map screen names to URL paths and handle parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-05-16-web-support.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config: {\n    screens: {\n      Home: '',\n      Profile: ':id/profile',\n      Settings: ':id/blog',\n    },\n  },\n};\n\nfunction App() {\n  return (\n    <NavigationContainer linking={linking} fallback={<SplashScreen />}>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Stack Navigator in React Navigation\nDESCRIPTION: Example showing how to create and configure a basic Stack Navigator with multiple screens using createStackNavigator from @react-navigation/stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Notifications\" component={Notifications} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme in Expo app.json\nDESCRIPTION: Specifies a URL scheme for an Expo app in the app.json configuration file. This defines the string before '://' in a URL for deep linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Top Tab Navigator with ScrollPager in React Navigation 5\nDESCRIPTION: Shows how to use the ScrollPager component from react-native-tab-view as a custom pager for the Material Top Tab Navigator in React Navigation 5.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-02-06-react-navigation-5.0.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ScrollPager } from 'react-native-tab-view';\n\n// ...\n\n<Tab.Navigator pager={props => <ScrollPager {...props} />}>\n  {...}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Providing Minimal (Partial) Navigation State for Automatic Rehydration (JavaScript)\nDESCRIPTION: This snippet provides a partial navigation state object with only the routes array and route names, omitting keys and other details. React Navigation can automatically rehydrate and fill in missing properties during initialization or reset operations. This pattern simplifies code for state persistence or dynamic navigation configuration. The code presumes the use of React Navigation's container or router logic for full object construction.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-state.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [{ name: 'Home' }, { name: 'Profile' }],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator for Modal Presentation Style (JavaScript)\nDESCRIPTION: This snippet shows how to configure a whole Stack.Navigator to use the ModalPresentationIOS preset for all screens, applying consistent modal transitions and header options. It demonstrates setting screenOptions as a function to customize each screen, using TransitionPresets.ModalPresentationIOS, and adding other navigation options such as headerShown, gestureEnabled, and cardOverlayEnabled. Dependencies include React Navigation Stack, and correct routing structure is essential. The mode prop is set to 'modal' for modal-style transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/stack';\\n\\n// ...\\n\\n<Stack.Navigator\\n  initialRouteName=\\\"Home\\\"\\n  screenOptions={({ route, navigation }) => ({\\n    headerShown: false,\\n    gestureEnabled: true,\\n    cardOverlayEnabled: true,\\n    headerStatusBarHeight:\\n      navigation.getState().routes.findIndex((r) => r.key === route.key) > 0\\n        ? 0\\n        : undefined,\\n    ...TransitionPresets.ModalPresentationIOS,\\n  })}\\n  mode=\\\"modal\\\"\\n>\\n  <Stack.Screen name=\\\"Home\\\" component={Home} />\\n  <Stack.Screen name=\\\"Profile\\\" component={Profile} />\\n</Stack.Navigator>;\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links Manually in React Native\nDESCRIPTION: These JavaScript snippets demonstrate how to manually handle deep links in React Native components using the Linking API. It shows how to add and remove event listeners for URL events and how to handle the deep link.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncomponentDidMount() {\n    // [...]\n    Linking.addEventListener('url', this.handleDeepLink)\n}\ncomponentWillUnmount() {\n    // [...]\n    Linking.removeEventListener('url', this.handleDeepLink);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhandleDeepLink(e) {\n    const route = e.url.replace(/.*?:\\/\\//g, '')\n    // use route to navigate\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation View Rendering Structure\nDESCRIPTION: Shows the structure of how a NavigationView component is rendered with its required props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationView\n  screenProps={screenProps}\n  navigation={navigation}\n  navigationConfig={navigationConfig}\n  descriptors={descriptors}\n/>\n```\n\n----------------------------------------\n\nTITLE: Passing and Reading Route Parameters in React Native Components\nDESCRIPTION: Demonstrates passing parameters (`itemId`, `otherParam`) from a `HomeScreen` component to a `DetailsScreen` component using `this.props.navigation.navigate`. The `DetailsScreen` component then retrieves these parameters using `navigation.getParam('paramName', 'defaultValue')`. It also shows using `navigation.push` to navigate to the same route type with different parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => {\n            this.props.navigation.navigate('Details', {\n              itemId: 86,\n              otherParam: 'anything you want here',\n            });\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nclass DetailsScreen extends React.Component {\n  render() {\n    const { navigation } = this.props;\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Text>\n          itemId: {JSON.stringify(navigation.getParam('itemId', 'NO-ID'))}\n        </Text>\n        <Text>\n          otherParam:\n          {JSON.stringify(navigation.getParam('otherParam', 'default value'))}\n        </Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() =>\n            navigation.push('Details', {\n              itemId: Math.floor(Math.random() * 100),\n            })\n          }\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Material Top Tab Navigator Component - React Navigation - JavaScript\nDESCRIPTION: This comprehensive snippet demonstrates how to set up a Material Top Tab Navigator using the createMaterialTopTabNavigator function in React Navigation. It configures initial route settings, customizes tab styles and labels, and defines three separate screens within the navigator. Dependencies include '@react-navigation/material-top-tabs' and the specific screen components (Feed, Notifications, Profile). Inputs include screen definitions and styling objects; output is a functional MyTabs component rendering the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst Tab = createMaterialTopTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      screenOptions={{\n        tabBarActiveTintColor: '#e91e63',\n        tabBarLabelStyle: { fontSize: 12 },\n        tabBarStyle: { backgroundColor: 'powderblue' },\n      }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{ tabBarLabel: 'Home' }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{ tabBarLabel: 'Updates' }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{ tabBarLabel: 'Profile' }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wiring Locale State into React Navigation with screenProps - JavaScript\nDESCRIPTION: This code defines a root App React component that holds the user's locale in state and provides a translation function (`t`) and setters via screenProps to downstream navigation components. Dependencies include React, a configured `i18n` instance, and a navigation AppContainer. The \"t\" function enables components to fetch localized strings for the current locale, while the setter allows changing locales. The main output is a React App component; changing locale updates translations throughout the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/localization.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport default class App extends React.Component {\\n  state = {\\n    locale: Localization.locale,\\n  };\\n\\n  setLocale = (locale) => {\\n    this.setState({ locale });\\n  };\\n\\n  t = (scope, options) => {\\n    return i18n.t(scope, { locale: this.state.locale, ...options });\\n  };\\n\\n  render() {\\n    return (\\n      <AppContainer\\n        screenProps={{\\n          t: this.t,\\n          locale: this.state.locale,\\n          setLocale: this.setLocale,\\n        }}\\n      />\\n    );\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modal Slide Transition Preset for a Single Screen (JavaScript)\nDESCRIPTION: This snippet demonstrates how to apply the ModalSlideFromBottomIOS transition preset to a Profile screen within a stack navigator. The TransitionPresets object from @react-navigation/stack is imported and spread into the options prop. This preset provides a standard iOS modal animation. Dependencies include React Navigation Stack and properly structured React components. The preset should be spread in the options object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TransitionPresets } from '@react-navigation/stack';\\n\\n// ...\\n\\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={Profile}\\n  options={{\\n    title: 'Profile',\\n    ...TransitionPresets.ModalSlideFromBottomIOS,\\n  }}\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Route State Access Example\nDESCRIPTION: Demonstrates how to access route state and parameters in a screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return <Text>Name: {this.props.navigation.state.params.name}</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Memoized Functional Scene Component with React.memo (JavaScript)\nDESCRIPTION: Here, a functional scene component is wrapped in React.memo to avoid unnecessary rerenders unless props change. This pattern is optimal for lightweight and stateless scenes in TabView. Requires React and react-native dependencies. The component outputs the complete scene UI and is exported as default.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nfunction HomeComponent() {\n  return (\n    <View style={styles.page}>\n      <Avatar />\n      <NewsFeed />\n    </View>\n  );\n}\n\nexport default React.memo(HomeComponent);\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Drawer with React Navigation Helper Methods in JavaScript\nDESCRIPTION: This snippet shows how to programmatically open or close the drawer navigator using built-in navigation helpers in a React Navigation setup. It is intended for use within React components where the navigation prop is available. The key parameters are the navigation methods 'openDrawer' and 'closeDrawer', which trigger drawer state changes. The output is the immediate opening or closing of the drawer; ensure the enclosing component is within a drawer navigator to avoid errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.openDrawer();\nthis.props.navigation.closeDrawer();\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Drawer Navigation Methods\nDESCRIPTION: Navigation methods to programmatically open and close the drawer in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnavigation.openDrawer();\nnavigation.closeDrawer();\n```\n\n----------------------------------------\n\nTITLE: Proper AppContainer Wrapping with Flex Style\nDESCRIPTION: Example showing the correct way to wrap AppContainer in a View component using flex styling to ensure proper rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/common-mistakes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createBottomTabNavigator, createAppContainer } from 'react-navigation';\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\nconst TabNavigator = createBottomTabNavigator({\n  Home: HomeScreen,\n  Settings: SettingsScreen,\n});\nconst AppContainer = createAppContainer(TabNavigator);\n// without the style you will see a blank screen\nexport default () => (\n  <View style={{ flex: 1 }}>\n    <AppContainer />\n  </View>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Theme Context in React Native (JSX)\nDESCRIPTION: This snippet sets up a global theming system in a React Native app using React's context API. It defines a `ThemeContext`, theme constants, and several components (`AppContainer`, `HomeScreen`, `ThemedButton`, and `ThemedView`) that access and apply the current theme from context. The current theme is kept in component state, and a `toggleTheme` function updates it, triggering re-renders across themed components. Dependencies include React and React Native core modules, and it assumes all themed components consume the `ThemeContext` for current theme and toggling. Inputs include a user interaction (toggle button); outputs are visual theme changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\nconst ThemeContext = React.createContext(null);\nconst ThemeConstants = {\n  light: {\n    backgroundColor: '#fff',\n    fontColor: '#000',\n  },\n  dark: {\n    backgroundColor: '#000',\n    fontColor: '#fff',\n  },\n};\n\nexport default class AppContainer extends React.Component {\n  state = {\n    theme: 'light',\n  };\n\n  toggleTheme = () => {\n    this.setState(({ theme }) => ({\n      theme: theme === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}\n      >\n        <HomeScreen />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <ThemedView\n        style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      >\n        <ThemeContext.Consumer>\n          {({ toggleTheme }) => (\n            <ThemedButton title=\"Toggle theme\" onPress={toggleTheme} />\n          )}\n        </ThemeContext.Consumer>\n      </ThemedView>\n    );\n  }\n}\n\nclass ThemedButton extends React.Component {\n  render() {\n    let { title, ...props } = this.props;\n    return (\n      <TouchableOpacity {...props}>\n        <ThemeContext.Consumer>\n          {({ theme }) => (\n            <Text style={{ color: ThemeConstants[theme].fontColor }}>\n              {title}\n            </Text>\n          )}\n        </ThemeContext.Consumer>\n      </TouchableOpacity>\n    );\n  }\n}\n\nclass ThemedView extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {({ theme }) => (\n          <View\n            {...this.props}\n            style={[\n              this.props.style,\n              { backgroundColor: ThemeConstants[theme].backgroundColor },\n            ]}\n          />\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AppNavigator to Use HomeNavigator\nDESCRIPTION: This code updates the main AppNavigator to replace TodoNavigator with the new HomeNavigator, which includes the bottom tabs navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { AuthNavigator } from './auth.navigator';\nimport { HomeNavigator } from './home.navigator';\nimport { AppRoute } from './app-routes';\n\nconst Stack = createStackNavigator();\n\nexport const AppNavigator = (props): React.ReactElement => (\n  <Stack.Navigator {...props} headerMode='none'>\n    <Stack.Screen name={AppRoute.AUTH} component={AuthNavigator}/>\n    <Stack.Screen name={AppRoute.HOME} component={HomeNavigator}/>\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering React Navigation App on Server with ServerContainer (JS)\nDESCRIPTION: This snippet demonstrates the basic usage of `ServerContainer` to render a React Navigation app (`<App />`) on the server using `ReactDOMServer.renderToString`. It utilizes a React ref to potentially access screen options after rendering and passes a `location` object representing the current URL path and search parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-container.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Ref which will be populated with the screen options\nconst ref = React.createRef();\n\n// Location object containing the `pathname` and `search` fields of the current URL\nconst location = { pathname: '/profile', search: '?user=jane' };\n\n// Get rendered HTML\nconst html = ReactDOMServer.renderToString(\n  <ServerContainer ref={ref} location={location}>\n    <App />\n  </ServerContainer>\n);\n\n// Then you can access the options for the current screen in the ref\nconst options = ref.current.getCurrentOptions(); // { title: 'My Profile' }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for React Navigation\nDESCRIPTION: Demonstrates how to configure TypeScript types for React Navigation using declaration merging to enable better type safety and autocompletion.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2021-08-14-react-navigation-6.0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList {\n      Home: undefined;\n      Profile: { userId: string };\n      NotFound: undefined;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Headers and Tab Bars in React Navigation - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to disable the default tab bar and headers in a React Navigation navigator by providing render functions that output null or specifying headerMode as 'none'. This can be helpful when building highly customized navigation experiences or when implementing bespoke headers and footers. Dependencies include @react-navigation/native and @react-navigation/stack or @react-navigation/bottom-tabs; routes and components should be defined elsewhere. No UI for headers or tab bars will be shown.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/handling-iphonex.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst Tabs = createBottomTabNavigator({\n  ...\n}, {\n  tabBarComponent: () => null,\n});\n\nexport default createStackNavigator({\n  ...\n}, {\n  headerMode: 'none',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up NavigationService with React Navigation in JavaScript\nDESCRIPTION: This snippet shows how to set up a top-level navigator and connect it to a NavigationService in a React app. It demonstrates creating a ref to the navigator and passing it to the NavigationService.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\n\nimport NavigationService from './NavigationService';\n\nconst TopLevelNavigator = StackNavigator({ /* ... */ })\n\nclass App extends React.Component {\n  // ...\n\n  render(): {\n    return (\n      <TopLevelNavigator\n        ref={navigatorRef => {\n          NavigationService.setTopLevelNavigator(navigatorRef);\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Container with Ref in Static Navigation\nDESCRIPTION: Example of setting up a static navigation container with a ref for external navigation access. This creates a NavigationContainer and assigns a navigation ref to it for use in external modules.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { navigationRef } from './RootNavigation';\n\n/* ... */\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation ref={navigationRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a MobX State Tree Store for Navigation Parameters in JavaScript\nDESCRIPTION: Illustrates a MobX State Tree model (`NavigationStore`) designed to manage navigation parameters. It uses `types.map` for screens that might have multiple instances (like `productDetailScreenParams`) and `types.model` for unique screens (`userProfileScreenParams`). `types.safeReference` is used to link parameters to other MST models (Product, User) without causing serialization issues, addressing the limitation of storing complex objects directly in React Navigation's state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/MST-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { types, onSnapshot, getRoot } from 'mobx-state-tree';\nimport { Product } from '../models/Product';\nimport { User } from '../models/User';\n\nexport const NavigationStore = types\n  .model('NavigationStore', {\n    productDetailScreenParams: types.map(\n      types.model('ProductDetailScreenParams', {\n        product: types.optional(types.safeReference(Product)),\n      })\n    ),\n    userProfileScreenParams: types.model('UserProfileScreenParams', {\n      user: types.maybe(types.safeReference(User)),\n    }),\n  })\n  .actions(self => ({\n    ...\n  }));\n```\n\n----------------------------------------\n\nTITLE: Opening, Closing, and Toggling the Drawer Programmatically (JavaScript)\nDESCRIPTION: Demonstrates how to control the drawer via navigation helper methods openDrawer(), closeDrawer(), and toggleDrawer() from the navigation prop. Requires that the code runs within a component that receives navigation. Invoking these methods directly controls the open/close state of the drawer, with no arguments or return values; use for imperative navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.openDrawer();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.closeDrawer();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing React Navigation Drawer (Static Config) in JavaScript\nDESCRIPTION: Demonstrates opening a drawer from a screen component using `navigation.openDrawer()` and closing it from custom drawer content using `props.navigation.closeDrawer()`. This example uses a static navigation setup with `createStaticNavigation` and defines screens and custom drawer content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Drawer open and close\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      // codeblock-focus-end\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating and Passing Redux State as a Param to a Screen in JavaScript\nDESCRIPTION: This code shows how to navigate to another screen while passing part of the Redux state as a navigation param. The Button's onPress handler calls navigation.navigate, setting count to this.props.count (sourced from Redux via connect on this component). This requires that the source component is already connected to Redux and that the target screen retrieves the param as shown elsewhere. The count value passed here is static at navigation time and will not update unless navigation occurs again.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/redux-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Button\n  title=\"Go to static count screen\"\n  onPress={() =>\n    this.props.navigation.navigate('StaticCounter', {\n      count: this.props.count,\n    })\n  }\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the route prop in a React Navigation screen component\nDESCRIPTION: This example demonstrates how to access and use the route prop in a React Navigation screen component. The route.name property is displayed on the screen. The route prop contains information about the current screen in the navigation hierarchy.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/route-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfileScreen({ route }) {\n  return (\n    <View>\n      <Text>This is the profile screen of the app</Text>\n      <Text>{route.name}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Safe Area Sides with Edges Prop - SafeAreaView - JavaScript/JSX\nDESCRIPTION: This snippet illustrates the use of the edges prop in SafeAreaView from react-native-safe-area-context to selectively apply safe area padding only on specific sides (top, left, and right) of the screen. Passing an array to edges controls which insets are respected, allowing for more granular layout decisions. This requires react-native-safe-area-context; the style object is passed as usual. This does not affect sides excluded from the array.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/handling-iphonex.md#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<SafeAreaView style={styles.container} edges={['top', 'left', 'right']}>\n  <Text style={styles.paragraph}>This is top text.</Text>\n  <Text style={styles.paragraph}>This is bottom text.</Text>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Testing Stack Navigation (Static) with React Native Testing Library\nDESCRIPTION: This test uses `@testing-library/react-native` to simulate navigating between screens in a React Native application using the `createStaticNavigation` helper with stack navigator. It verifies that pressing the 'Click here!' button navigates to the Surprise screen and displays 'Surprise!'. Requires jest for mocking timers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, jest, test } from '@jest/globals';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyStack } from './MyStack';\n\njest.useFakeTimers();\n\ntest('shows surprise text after navigating to surprise screen', async () => {\n  const user = userEvent.setup();\n\n  const Navigation = createStaticNavigation(MyStack);\n\n  render(<Navigation />);\n\n  await user.press(screen.getByLabelText('Click here!'));\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Surprise!')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic TabView Usage with Navigation State - React Native JavaScript\nDESCRIPTION: Shows minimal usage of the TabView component, including wiring a controlled navigationState, onIndexChange callback, and a renderScene prop for page rendering. Requires the TabView component and an appropriate scene map. Inputs are navigation state and scene mapping; outputs a basic tabbed interface. Needs react-native-tab-view as a dependency.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<TabView\n  navigationState={{ index, routes }}\n  onIndexChange={setIndex}\n  renderScene={SceneMap({\n    first: FirstRoute,\n    second: SecondRoute,\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the Created Navigator in React Navigation\nDESCRIPTION: This code snippet shows how to use a navigator created with `createNavigatorFactory`. The `My.Navigator` and `My.Screen` components can be used to define the navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMyNavigator } from './myNavigator';\n\nconst My = createMyNavigator();\n\nfunction App() {\n  return (\n    <My.Navigator>\n      <My.Screen name=\"Home\" component={HomeScreen} />\n      <My.Screen name=\"Feed\" component={FeedScreen} />\n    </My.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Navigation in a Web Application\nDESCRIPTION: This snippet demonstrates how to set up a navigator in a React web app using createSwitchNavigator and createBrowserApp. It creates a switch navigator and wraps it with a browser app for web rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/web-support.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSwitchNavigator } from '@react-navigation/core';\nimport { createBrowserApp } from '@react-navigation/web';\n\nconst MyNavigator = createSwitchNavigator(routes);\n\nconst App = createBrowserApp(MyNavigator);\n\n// now you can render \"App\" normally\n```\n\n----------------------------------------\n\nTITLE: Using useLogger Hook with Dynamic NavigationContainer - React Navigation - JavaScript\nDESCRIPTION: Illustrates the use of the useLogger hook in a dynamic navigation context with the NavigationContainer component from @react-navigation/native. After setting up navigationRef with useNavigationContainerRef, the ref is passed to useLogger to enable real-time navigation logging. Requires @react-navigation/native and @react-navigation/devtools as dependencies. Use in development only; outputs state/actions to the console.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/devtools.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  NavigationContainer,\\n  useNavigationContainerRef,\\n} from '@react-navigation/native';\\nimport { useLogger } from '@react-navigation/devtools';\\n\\nexport default function App() {\\n  const navigationRef = useNavigationContainerRef();\\n\\n  useLogger(navigationRef);\\n\\n  return (\\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Specific Route with Source and Target in React Navigation\nDESCRIPTION: Shows how to replace a specific route by adding source and target properties to the StackActions.replace action. The source references the route key to replace, while the target specifies the navigation state key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...StackActions.replace('Profile', {\n    user: 'jane',\n  }),\n  source: route.key,\n  target: navigation.getState().key,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Web Navigation Examples in JavaScript\nDESCRIPTION: Examples of how navigation works in web browsers using anchor tags with href and onClick handlers, shown for comparison with React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<a href=\"details.html\">Go to Details</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<a\n  onClick={() => {\n    window.location.href = 'details.html';\n  }}\n>\n  Go to Details\n</a>\n```\n\n----------------------------------------\n\nTITLE: Listening to transitionEnd Events in React Navigation\nDESCRIPTION: Example of how to subscribe to the 'transitionEnd' event in React Navigation using the useEffect hook. This event fires when the transition animation ends for the current screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Renaming customAnimationOnGesture to animationMatchesGesture (JavaScript)\nDESCRIPTION: This diff-styled snippet demonstrates renaming the 'customAnimationOnGesture' option to 'animationMatchesGesture' in Native Stack Navigator. It requires React Navigation Native Stack and is used in Navigator options. The code change is limited to the options object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n- <Stack.Navigator options={{ customAnimationOnGesture: true }}>\\n+ <Stack.Navigator options={{ animationMatchesGesture: true }}>\n```\n\n----------------------------------------\n\nTITLE: Custom Header Component Usage in Navigation Options (React Navigation, JavaScript)\nDESCRIPTION: This function-based header configuration shows how to render a custom header per screen using properties from the scene and navigation objects. It demonstrates extracting the header title, conditionally rendering a back button, and passing style options. Your custom header component must accept the specified properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nheader: ({ scene, previous, navigation }) => {\n  const { options } = scene.descriptor;\n  const title =\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n        ? options.title\n        : scene.route.routeName;\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        previous ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Stack and Drawer Navigator Setup\nDESCRIPTION: Initial setup showing the basic structure of nested stack navigator inside a drawer navigator with authentication flow.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nconst DrawerNavigator = createDrawerNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: DrawerNavigator,\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Linking Dependencies (React Native < 0.60)\nDESCRIPTION: Shows how to manually link the `react-native-reanimated` and `react-native-gesture-handler` libraries for older React Native versions (0.59 and lower) where autolinking is not available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-reanimated\nreact-native link react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: React Navigation Linking Configuration with Custom `getStateFromPath` and `getPathFromState` (JS)\nDESCRIPTION: This code snippet showcases how to provide custom `getStateFromPath` and `getPathFromState` functions in React Navigation's linking configuration. This allows you to completely override the default URL parsing and serialization logic, enabling you to handle advanced routing scenarios that are not covered by the standard configuration options.  It allows to return a state object based on a custom path logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config: {\n    screens: {\n      Chat: 'feed/:sort',\n    },\n  },\n  getStateFromPath: (path, options) => {\n    // Return a state object here\n    // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n  },\n  getPathFromState(state, config) {\n    // Return a path string here\n    // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Routes to a Stack Navigator with Options - React Navigation (JavaScript)\nDESCRIPTION: Illustrates how to add a second route (Details) to a stack navigator and specify the initial route with the initialRouteName option. The DetailsScreen is defined as a new class component similar to HomeScreen. This pattern enables multi-screen navigation, allowing users to transition between Home and Details screens. The stack options object is passed as the second argument to createStackNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/hello-react-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Other code for HomeScreen here...\n\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n      </View>\n    );\n  }\n}\n\nconst AppNavigator = createStackNavigator(\n  {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\n// Other code for App component here...\n```\n\n----------------------------------------\n\nTITLE: Mapping Old React Navigation TypeScript Types to New Types\nDESCRIPTION: Provides a mapping for upgrading TypeScript types after React Navigation navigators were extracted into separate packages. It details the replacements for generic types like `NavigationScreenProp`, `NavigationScreenProps`, `NavigationScreenOptions`, and `NavigationScreenComponent` with their specific counterparts (e.g., `NavigationStackProp`, `NavigationSwitchScreenProps`, `NavigationBottomTabOptions`, `NavigationDrawerScreenComponent`) found in packages like `react-navigation`, `react-navigation-stack`, `react-navigation-tabs`, and `react-navigation-drawer`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n- Replace `NavigationScreenProp` with:\n  - `NavigationSwitchProp` for `createSwitchNavigator` from `react-navigation`\n  - `NavigationStackProp` for `createStackNavigator` from `react-navigation-stack`\n  - `NavigationTabProp` for `createBottomTabNavigator` and `createMaterialTopTabNavigator` from `react-navigation-tabs`\n  - `NavigationDrawerProp` for `createDrawerNavigator` from `react-navigation-drawer`\n- Replace `NavigationScreenProps` with:\n  - `NavigationSwitchScreenProps` for `createSwitchNavigator` from `react-navigation`\n  - `NavigationStackScreenProps` for `createStackNavigator` from `react-navigation-stack`\n  - `NavigationTabScreenProps` for `createBottomTabNavigator` and `createMaterialTopTabNavigator` from `react-navigation-tabs`\n  - `NavigationDrawerScreenProps` for `createDrawerNavigator` from `react-navigation-drawer`\n- Replace `NavigationScreenOptions` with:\n  - `NavigationStackOptions` for `createStackNavigator` from `react-navigation-stack`\n  - `NavigationBottomTabOptions` for `createBottomTabNavigator` from `react-navigation-tabs`\n  - `NavigationMaterialTabOptions` for `createMaterialTopTabNavigator` from `react-navigation-tabs`\n  - `NavigationDrawerOptions` for `createDrawerNavigator` from `react-navigation-drawer`\n- Replace `NavigationScreenComponent` with:\n  - `NavigationSwitchScreenComponent` for `createSwitchNavigator` from `react-navigation`\n  - `NavigationStackScreenComponent` for `createStackNavigator` from `react-navigation-stack`\n  - `NavigationBottomTabScreenComponent` for `createBottomTabNavigator` from `react-navigation-tabs`\n  - `NavigationMaterialTabScreenComponent` for `createMaterialTopTabNavigator` from `react-navigation-tabs`\n  - `NavigationDrawerScreenComponent` for `createDrawerNavigator` from `react-navigation-drawer`\n```\n\n----------------------------------------\n\nTITLE: Custom Header with Navigation Elements in React Navigation\nDESCRIPTION: This code demonstrates how to create a custom header component in React Navigation using the `header` option. It retrieves the title using `getHeaderTitle` and renders a custom `MyHeader` component with the title and header style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return <MyHeader title={title} style={options.headerStyle} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Stack Navigator Behavior with React Component - React Navigation (JavaScript)\nDESCRIPTION: This code example shows how to create a custom navigator by wrapping an existing stack navigator (MyStack) inside a React component. It sets the static router property to inherit navigation routing logic and forwards the navigation prop, allowing observation or augmentation of behavior. Requires react-navigation and a stack navigator (createStackNavigator). Inputs: navigation prop; Output: rendered MyStack with custom handling. Useful for extending functionality while leveraging base navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createStackNavigator({ ... });\n\nclass CustomNavigator extends React.Component {\n  static router = MyStack.router;\n  render() {\n    const { navigation } = this.props;\n\n    return <MyStack navigation={navigation} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServerContainer with Location Props\nDESCRIPTION: Example of setting up ServerContainer with location props for server-side rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-container.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ServerContainer location={{ pathname: '/profile', search: '' }}>\n  <App />\n</ServerContainer>\n```\n\n----------------------------------------\n\nTITLE: SetParams Implementation Example\nDESCRIPTION: Demonstrates how to update route parameters using setParams within a component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return (\n      <Button\n        onPress={() => this.props.navigation.setParams({ name: 'Lucy' })}\n        title=\"Set title name to 'Lucy'\"\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Header Title Component in React Navigation\nDESCRIPTION: Shows how to replace the default header title with a custom component, in this case an image logo.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction LogoTitle() {\n  return (\n    <Image\n      style={{ width: 50, height: 50 }}\n      source={require('@expo/snack-static/react-native-logo.png')}\n    />\n  );\n}\n\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ headerTitle: (props) => <LogoTitle {...props} /> }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Screen Options in JavaScript for React Navigation\nDESCRIPTION: This snippet demonstrates how to retrieve navigation options for a screen using the getScreenOptions function. It shows how to prepare a navigation prop for a child component and how to extract the title from the options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-routers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// First, prepare a navigation prop for your child, or re-use one if already available.\nconst screenNavigation = addNavigationHelpers({\n  // In this case we use navigation.state.index because we want the title for the active route.\n  state: navigation.state.routes[navigation.state.index],\n  dispatch: navigation.dispatch,\n});\nconst options = this.props.router.getScreenOptions(screenNavigation, {});\nconst title = options.title;\n```\n\n----------------------------------------\n\nTITLE: Using a Connected Component in Stack Screen Options (JavaScript)\nDESCRIPTION: Illustrates how to use a Redux-connected component (`CounterContainer`) within the `options` prop of a `Stack.Screen`. The `title` option is configured as a function that returns the connected component, allowing the header title to display data from the Redux store.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/redux-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<Stack.Screen\n  name=\"Test\"\n  component={TestScreen}\n  options={{ title: () => <CounterContainer /> }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Using NavigationContainer with Static Configuration in React Navigation\nDESCRIPTION: Example of how to use the static API with createStaticNavigation, which returns a component equivalent to NavigationContainer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator({\n  screens: {\n    /* ... */\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getHeaderTitle Function for Dynamic Header Titles\nDESCRIPTION: This function determines the header title based on the focused route in the child navigator. It uses the getFocusedRouteNameFromRoute helper from React Navigation to get the current route name.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getFocusedRouteNameFromRoute } from '@react-navigation/native';\n\nfunction getHeaderTitle(route) {\n  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';\n\n  switch (routeName) {\n    case 'Feed':\n      return 'News feed';\n    case 'Profile':\n      return 'My profile';\n    case 'Account':\n      return 'My account';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Navigation Key in Stack Screen (JSX)\nDESCRIPTION: This example shows how to dynamically set a navigation key for a screen using the Stack.Screen component. The key is conditionally set based on the 'isSignedIn' state, allowing for different navigation behaviors for signed-in and guest users.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  // highlight-next-line\n  navigationKey={isSignedIn ? 'user' : 'guest'}\n  name=\"Profile\"\n  component={ProfileScreen}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Server Rendering with React Native Web\nDESCRIPTION: Example showing how to implement server-side rendering with React Native Web without React Navigation. It creates HTML output using ReactDOMServer with styles from AppRegistry.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppRegistry } from 'react-native-web';\nimport ReactDOMServer from 'react-dom/server';\nimport App from './src/App';\n\nconst { element, getStyleElement } = AppRegistry.getApplication('App');\n\nconst html = ReactDOMServer.renderToString(element);\nconst css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\nconst document = `\n  <!DOCTYPE html>\n  <html style=\"height: 100%\">\n  <meta charset=\"utf-8\">\n  <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\"\n  >\n  ${css}\n  <body style=\"min-height: 100%\">\n  <div id=\"root\" style=\"display: flex; min-height: 100vh\">\n  ${html}\n  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Navigating Back with CommonActions.goBack in JavaScript\nDESCRIPTION: Provides a basic example of dispatching the `CommonActions.goBack()` action to navigate to the previous screen in the navigation history. This action creator takes no arguments for its simplest use case.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch(CommonActions.goBack());\n```\n```\n\n----------------------------------------\n\nTITLE: Going Back to Previous Screen using NavigationActions in React Navigation\nDESCRIPTION: This code snippet shows how to create and dispatch a back action using NavigationActions. It includes an optional key parameter to specify which screen to go back from.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Events for Status Bar Management in TabNavigator\nDESCRIPTION: This code demonstrates how to use navigation events to change the StatusBar configuration when a tab becomes active. It sets up listeners in componentDidMount and removes them in componentWillUnmount for proper cleanup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen1 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('light-content');\n      isAndroid && StatusBar.setBackgroundColor('#6a51ae');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n\nclass Screen2 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('dark-content');\n      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView for Content Insets - React Native Safe Area Context - JavaScript/JSX\nDESCRIPTION: This code sample shows how to use the SafeAreaView component from the react-native-safe-area-context library to wrap screen content in a React Native app, ensuring it avoids display notches and overlaps. SafeAreaView should only wrap screen content, not entire navigators. Required dependency: react-native-safe-area-context. The style prop is used to provide layout style, and all nested content is protected from UI cutouts. This component supports both iOS and Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/handling-iphonex.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nclass MyHomeScreen extends Component {\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.paragraph}>This is top text.</Text>\n        <Text style={styles.paragraph}>This is bottom text.</Text>\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with Ref to Access Screen Options - JavaScript\nDESCRIPTION: This snippet shows how to render a React Native app server-side while accessing the current screen's options, such as the title, for dynamic metadata. It utilizes a React ref to access methods on the ServerContainer component, enabling features like setting the page title. Requires 'react', 'react-native-web', 'react-dom/server', React Navigation's ServerContainer, and Koa. Inputs include the URL and React ref; outputs are HTML with a dynamic title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.use(async (ctx) => {\\n  const location = new URL(ctx.url, 'https://example.org/');\\n\\n  const { element, getStyleElement } = AppRegistry.getApplication('App');\\n\\n  const ref = React.createRef<ServerContainerRef>();\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ServerContainer\\n      ref={ref}\\n      location={location}\\n    >\\n      {element}\\n    </ServerContainer>\\n  );\\n\\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\\n\\n  const options = ref.current?.getCurrentOptions();\\n\\n  const document = `\\n    <!DOCTYPE html>\\n    <html style=\\\"height: 100%\\\">\\n    <meta charset=\\\"utf-8\\\">\\n    <meta httpEquiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\\\"\\n    >\\n    ${css}\\n    <title>${options.title}</title>\\n    <body style=\\\"min-height: 100%\\\">\\n    <div id=\\\"root\\\" style=\\\"display: flex; min-height: 100vh\\\">\\n    ${html}\\n    </div>\\n`;\n\\n  ctx.body = document;\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Linking Intents on Android (Bash)\nDESCRIPTION: Executes an adb command for Android devices to open the app with a specific deep link. The URI and package name should correspond to the configured app. Useful for verifying that intent-based navigation is correctly wired up on Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d \"example://chat/Eric\" com.simpleapp\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tab Navigator Component in React Navigation (JavaScript)\nDESCRIPTION: This code implements a custom tab navigator by utilizing the useNavigationBuilder hook with TabRouter from React Navigation. It wires up navigation state and descriptor management, renders a tab bar and its respective screens, and demonstrates how to forward props and handle tab selection using navigation helpers. Dependencies include React, react-native components, and @react-navigation/native functions. Key parameters include initialRouteName, children (for screen definitions), and style props for customization. The component exposes a flexible structure for integrating tab-based navigation logic and is intended as part of a larger custom navigator architecture.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\nimport { Text, Pressable, View, StyleSheet } from 'react-native';\\nimport {\\n  NavigationHelpersContext,\\n  useNavigationBuilder,\\n  TabRouter,\\n  TabActions,\\n} from '@react-navigation/native';\\n\\nfunction TabNavigator({\\n  initialRouteName,\\n  children,\\n  screenOptions,\\n  tabBarStyle,\\n  contentStyle,\\n}) {\\n  const { state, navigation, descriptors } = useNavigationBuilder(TabRouter, {\\n    children,\\n    screenOptions,\\n    initialRouteName,\\n  });\\n\\n  return (\\n    <NavigationHelpersContext.Provider value={navigation}>\\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\\n        {state.routes.map((route) => (\\n          <Pressable\\n            key={route.key}\\n            onPress={() => {\\n              const event = navigation.emit({\\n                type: 'tabPress',\\n                target: route.key,\\n                canPreventDefault: true,\\n              });\\n\\n              if (!event.defaultPrevented) {\\n                navigation.dispatch({\\n                  ...TabActions.jumpTo(route.name),\\n                  target: state.key,\\n                });\\n              }\\n            }}\\n            style={{ flex: 1 }}\\n          >\\n            <Text>{descriptors[route.key].options.title || route.name}</Text>\\n          </Pressable>\\n        ))}\\n      </View>\\n      <View style={[{ flex: 1 }, contentStyle]}>\\n        {state.routes.map((route, i) => {\\n          return (\\n            <View\\n              key={route.key}\\n              style={[\\n                StyleSheet.absoluteFill,\\n                { display: i === state.index ? 'flex' : 'none' },\\n              ]}\\n            >\\n              {descriptors[route.key].render()}\\n            </View>\\n          );\\n        })}\\n      </View>\\n    </NavigationHelpersContext.Provider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets using useSafeAreaInsets Hook\nDESCRIPTION: This snippet shows how to use the useSafeAreaInsets hook from react-native-safe-area-context to apply safe area insets to content, ensuring it's not hidden by device UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/handling-safe-area.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Demo() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'space-between',\n        alignItems: 'center',\n\n        // Paddings to handle safe area\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n        paddingLeft: insets.left,\n        paddingRight: insets.right,\n      }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>{/*(...) */}</NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Navigator Props - React Navigation v5 vs v6 Comparison\nDESCRIPTION: Demonstrates the migration from tabBarOptions in v5 to screenOptions in v6 for configuring tab navigator appearance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2021-08-14-react-navigation-6.0.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before (v5)\n<Tab.Navigator\n  tabBarOptions={{\n    inactiveTintColor: 'rgba(255, 255, 255, 0.5)',\n    activeTintColor: '#fff',\n    style: {\n      position: 'absolute',\n      borderTopColor: 'rgba(0, 0, 0, .2)',\n    },\n  }}\n>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After (v6)\n<Tab.Navigator\n  screenOptions={{\n    tabBarInactiveTintColor: 'rgba(255, 255, 255, 0.5)',\n    tabBarActiveTintColor: '#fff',\n    tabBarStyle: {\n      position: 'absolute',\n      borderTopColor: 'rgba(0, 0, 0, .2)',\n    },\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Root Component with StackNavigator\nDESCRIPTION: Demonstrates how to properly structure the root component of a React Native app using StackNavigator by wrapping it in an App component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = StackNavigator({\n  Home: {\n    screen: HomeScreen,\n  },\n});\n\nexport default class App extends React.Component {\n  render() {\n    return <RootStack />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Transition for Stack Navigator in React Navigation\nDESCRIPTION: This example shows how to configure the default transition animation for all screens in a stack navigator. It uses the ModalPresentationIOS preset and sets additional options like modal mode and gesture handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionPresets } from 'react-navigation-stack';\n\n// ...\n\nconst Stack = createStackNavigator(\n  {\n    Home,\n    Profile,\n    Settings,\n  },\n  {\n    mode: 'modal',\n    headerMode: 'none',\n    defaultNavigationOptions: {\n      gestureEnabled: true,\n      cardOverlayEnabled: true,\n      ...TransitionPresets.ModalPresentationIOS,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters with setParams in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to update the parameters for a given route by dispatching a setParams action using NavigationActions from react-navigation. The setParams object requires a params field (the new parameter object) and a key field (route key to apply the params to). The snippet expects react-navigation to be available, and the navigation prop to be in scope, as found in a navigation-aware React component. The output is a merged set of parameters for the target route; the operation performs no action if the key does not map to an existing route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\\n\\nconst setParamsAction = NavigationActions.setParams({\\n  params: { title: 'Hello' },\\n  key: 'screen-123',\\n});\\nthis.props.navigation.dispatch(setParamsAction);\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links with ADB - Bash\nDESCRIPTION: These Bash command snippets provide examples of how to trigger deep links on Android devices or emulators using adb. They use adb shell with the am start command, specifying the android.intent.action.VIEW action and passing custom deep link URLs and target package names. The first snippet shows the generic command structure, while the others offer concrete examples, including integration with the Expo client. Requires an Android SDK environment with adb installed and either a connected device or emulator. Replace [your deep link] and [your android package name] as instructed; outputs launch target apps or triggers routing according to the provided URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d [your deep link] [your android package name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d \"example://chat/jane\" com.simpleapp\n```\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/chat/jane\" host.exp.exponent\n```\n\n----------------------------------------\n\nTITLE: Redux Navigation Integration Setup\nDESCRIPTION: Core implementation showing how to integrate React Navigation with Redux, including reducer setup, middleware configuration, and component connection\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/redux-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  StackNavigator,\n  addNavigationHelpers,\n} from 'react-navigation';\nimport {\n  createStore,\n  applyMiddleware,\n  combineReducers,\n} from 'redux';\nimport {\n  createReduxBoundAddListener,\n  createReactNavigationReduxMiddleware,\n} from 'react-navigation-redux-helpers';\nimport { Provider, connect } from 'react-redux';\nimport React from 'react';\n\nconst AppNavigator = StackNavigator(AppRouteConfigs);\n\nconst initialState = AppNavigator.router.getStateForAction(AppNavigator.router.getActionForPathAndParams('Login'));\n\nconst navReducer = (state = initialState, action) => {\n  const nextState = AppNavigator.router.getStateForAction(action, state);\n\n  // Simply return the original `state` if `nextState` is null or undefined.\n  return nextState || state;\n};\n\nconst appReducer = combineReducers({\n  nav: navReducer,\n  ...\n});\n\n// Note: createReactNavigationReduxMiddleware must be run before createReduxBoundAddListener\nconst middleware = createReactNavigationReduxMiddleware(\n  \"root\",\n  state => state.nav,\n);\nconst addListener = createReduxBoundAddListener(\"root\");\n\nclass App extends React.Component {\n  render() {\n    return (\n      <AppNavigator navigation={addNavigationHelpers({\n        dispatch: this.props.dispatch,\n        state: this.props.nav,\n        addListener,\n      })} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  nav: state.nav\n});\n\nconst AppWithNavigationState = connect(mapStateToProps)(App);\n\nconst store = createStore(\n  appReducer,\n  applyMiddleware(middleware),\n);\n\nclass Root extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AppWithNavigationState />\n      </Provider>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Screens Using CommonActions.preload - React Navigation Dynamic - JavaScript\nDESCRIPTION: This dynamic navigation snippet demonstrates leveraging CommonActions.preload to mount a profile screen in the background using React Navigation's stack navigator and NavigationContainer. Dependencies include @react-navigation/native, @react-navigation/stack, and @react-navigation/elements. The code measures render timing to show preloading's performance advantages. Users can dispatch navigation and preload actions with or without params, but preloaded screens are limited in dispatching navigation actions or listening to navigator events until focused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  CommonActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(\n            CommonActions.preload('Profile', { user: 'jane' })\n          );\n          // codeblock-focus-end\n        }}\n      >\n        Preload Profile\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            CommonActions.navigate('Profile', { user: 'jane' })\n          );\n        }}\n      >\n        Navigate to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  const [startTime] = React.useState(Date.now());\n  const [endTime, setEndTime] = React.useState(null);\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      setEndTime(Date.now());\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [navigation]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Text>Preloaded for: {endTime ? endTime - startTime : 'N/A'}ms</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Index Parameter in StackActions Reset for React Navigation\nDESCRIPTION: Illustrates how to use the index parameter in the reset action to specify the current active route. It resets the state to have Settings screen active, stacked on top of a Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header Background Color in React Navigation\nDESCRIPTION: This example shows how to set a custom background color for the header using the headerStyle option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  backgroundColor: 'tomato',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Action with useLinkProps (JavaScript)\nDESCRIPTION: Shows how to customize the navigation behavior when using the `LinkButton` component (which internally uses `useLinkProps`). Instead of the default `navigate` action derived from the `to` prop, it explicitly provides a `replace` action using `StackActions.replace` via the `action` prop. This replaces the current screen in the stack with the 'Profile' screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-link-props.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  return (\n    <LinkButton\n      to=\"/profile/jane\"\n      action={StackActions.replace('Profile', { id: 'jane' })}\n    >\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Drawer Navigator with React Navigation 5\nDESCRIPTION: Implements a basic drawer navigation structure using createDrawerNavigator from React Navigation 5. The example shows how to create a drawer navigator with custom drawer content and a home screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction DrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Drawer content</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nexport const RootNavigator = () => {\n  return (\n    <Drawer.Navigator drawerContent={() => <DrawerContent />}>\n      <Drawer.Screen name=\"Home\" component={HomeScreen} />\n    </Drawer.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking in Android Manifest\nDESCRIPTION: XML configuration for the AndroidManifest.xml file to set up deep linking and App Links in an Android app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"http\" />\n        <data android:scheme=\"https\" />\n        <data android:host=\"www.example.com\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Server-side Rendering with Status Code Handling\nDESCRIPTION: Example of server-side rendering that incorporates status code handling using the StatusCodeContext. It demonstrates how to set and use the status code for the server's response.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-rendering.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst status = { code: 200 };\n\nconst html = ReactDOMServer.renderToString(\n  <StatusCodeContext.Provider value={status}>\n    <ServerContainer ref={ref} location={location}>\n      {element}\n    </ServerContainer>\n  </StatusCodeContext.Provider>\n);\n\nctx.status = status.code;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation for Stack Navigator Header in React Navigation\nDESCRIPTION: This snippet shows how to create a custom fade animation for the header in Stack Navigator and apply it using the headerStyleInterpolator option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current, next }) => {\n  const opacity = Animated.add(\n    current.progress,\n    next ? next.progress : 0\n  ).interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 1, 0],\n  });\n\n  return {\n    leftButtonStyle: { opacity },\n    rightButtonStyle: { opacity },\n    titleStyle: { opacity },\n    backgroundStyle: { opacity },\n  };\n};\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{ headerStyleInterpolator: forFade }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Drawer Layout and Dependencies\nDESCRIPTION: Commands to install the drawer layout package and its required dependencies using npm or Expo CLI.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-layout.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-drawer-layout\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-gesture-handler react-native-reanimated\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsFocused Hook in React Navigation\nDESCRIPTION: Example showing how to use the useIsFocused hook to conditionally render content based on screen focus state. Returns a boolean indicating whether the screen is currently focused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/function-after-focusing-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction Profile() {\n  // This hook returns `true` if the screen is focused, `false` otherwise\n  const isFocused = useIsFocused();\n\n  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Route Configuration for Stack Navigator - React Navigation (JavaScript)\nDESCRIPTION: Demonstrates the shorthand configuration for routes in a stack navigator when only the screen component is required. Instead of passing an object with a screen property, the screen component itself (HomeScreen) is used directly as the value for the route key. No additional options or configuration is present in this snippet.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/hello-react-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({\n  Home: HomeScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Deep Links and Firebase Notifications in React Navigation\nDESCRIPTION: This snippet shows how to implement a custom `subscribe` function in React Navigation to handle both deep linking and Firebase notifications. It sets up event listeners for URL changes and Firebase notifications, and provides a cleanup function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    subscribe(listener) {\n      const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n      // Listen to incoming links from deep linking\n      Linking.addEventListener('url', onReceiveURL);\n\n      // Listen to firebase push notifications\n      const unsubscribeNotification = messaging().onNotificationOpenedApp(\n        (message) => {\n          const url = message.notification.url;\n\n          if (url) {\n            // Any custom logic to check whether the URL needs to be handled\n            //...\n\n            // Call the listener to let React Navigation handle the URL\n            listener(url);\n          }\n        }\n      );\n\n      return () => {\n        // Clean up the event listeners\n        Linking.removeEventListener('url', onReceiveURL);\n        unsubscribeNotification();\n      };\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Tab Bar in Nested Stack via navigationOptions (JavaScript)\nDESCRIPTION: This code demonstrates how to dynamically hide the bottom tab bar when navigating within a nested StackNavigator (`FeedStack`). It sets `navigationOptions` directly on the `FeedStack` component, checking the `navigation.state.index`. If the index is greater than 0 (meaning navigation has occurred beyond the initial screen), `tabBarVisible` is set to `false`, hiding the parent tab bar.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nFeedStack.navigationOptions = ({ navigation }) => {\n  let tabBarVisible = true;\n  if (navigation.state.index > 0) {\n    tabBarVisible = false;\n  }\n\n  return {\n    tabBarVisible,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing a Route with StackActions in React Navigation\nDESCRIPTION: Demonstrates how to use the StackActions.replace method to replace the current route in the navigation stack. This example shows replacing the current screen with a 'Profile' screen and passing user data as a parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  StackActions.replace('Profile', {\n    user: 'jane',\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Drawer Content with useDrawerProgress\nDESCRIPTION: Example of creating custom drawer content using the useDrawerProgress hook in React Navigation 6.x.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nfunction CustomDrawerContent(props) {\n  const progress = useDrawerProgress();\n\n  // ...\n}\n\n// ...\n\n<Drawer.Navigator drawerContent={(props) => <CustomDrawerContent {...props} />}>\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Navigator - New Component-based API (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a stack navigator using the new React Navigation 5.x API. It uses functional components, Navigator and Screen pairs, and passes configuration as props. Required dependency: @react-navigation/stack. Route names, components, options, and initialParams are specified in JSX. Inputs are screens/components and config props; output is a navigator ready to render. Limitation: does not statically define routes‚Äîscreens must be components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\\nconst Stack = createStackNavigator();\\n\\nfunction RootStack() {\\n  return (\\n    <Stack.Navigator\\n      initialRouteName=\\\"Home\\\"\\n      screenOptions={{ gestureEnabled: false }}\\n    >\\n      <Stack.Screen\\n        name=\\\"Home\\\"\\n        component={HomeScreen}\\n        options={{ title: 'My app' }}\\n      />\\n      <Stack.Screen\\n        name=\\\"Profile\\\"\\n        component={ProfileScreen}\\n        initialParams={{ user: 'me' }}\\n      />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Reorganized Navigation Structure with Stack Navigators Inside Tab Navigator\nDESCRIPTION: This example shows an alternative navigation structure with individual stack navigators inside each tab, which can provide better control over screen options and more flexibility for navigation within each tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeedStack = createStackNavigator();\n\nfunction FeedStackScreen() {\n  return (\n    <FeedStack.Navigator>\n      <FeedStack.Screen name=\"Feed\" component={FeedScreen} />\n      {/* other screens */}\n    </FeedStack.Navigator>\n  );\n}\n\nconst ProfileStack = createStackNavigator();\n\nfunction ProfileStackScreen() {\n  return (\n    <ProfileStack.Navigator>\n      <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n      {/* other screens */}\n    </ProfileStack.Navigator>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={FeedStackScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst RootStack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator>\n        <RootStack.Screen name=\"Home\" component={HomeTabs} />\n        <RootStack.Screen name=\"Settings\" component={SettingsScreen} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Connected Component in Navigation Options\nDESCRIPTION: Shows how to use a Redux-connected component within navigation options to display dynamic title based on Redux state. Creates a Count component that connects to Redux store and uses it in the screen's title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/redux-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Count extends React.Component {\n  render() {\n    return <Text>Count: {this.props.value}</Text>;\n  }\n}\n\nlet CountContainer = connect((state) => ({ value: state.count }))(Count);\n\nclass Counter extends React.Component {\n  static navigationOptions = {\n    title: <CountContainer />,\n  };\n\n  /* .. the rest of the code */\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor Tag for Basic Web Navigation\nDESCRIPTION: This snippet shows a standard HTML anchor tag (`<a>`) used for hyperlink navigation in web browsers. The `href` attribute specifies the target URL ('details.html'). This serves as a basic comparison point for React Navigation's approach.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<a href=\"details.html\">Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Using Default Theme Colors from ThemeColors in React Navigation (JavaScript)\nDESCRIPTION: This code demonstrates how to use the predefined color palette provided by React Navigation via `ThemeColors`. It accesses the `ThemeColors` object using the current theme (obtained via `useTheme`) to get theme-appropriate colors like `bodyContent` and `label` for styling components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ThemeColors, useTheme } from 'react-navigation';\n\nfunction MyButton() {\n  let theme = useTheme();\n  let colors = ThemeColors[theme];\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.bodyContent }}>\n      <Text style={{ color: colors.label }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Parameters for a Screen in JSX\nDESCRIPTION: Illustrates how to use the `initialParams` prop to set default parameters for a screen. These parameters are merged with any params passed during navigation and are available via the `route.params` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Details\"\n  component={DetailsScreen}\n  initialParams={{ itemId: 42 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Options with an Object in JSX\nDESCRIPTION: Demonstrates configuring screen-specific presentation options (like the header title) by passing a static configuration object to the `options` prop of the `Screen` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{\n    title: 'Awesome app',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing headerTitle in Dynamic Configuration\nDESCRIPTION: Demonstrates how to customize the header title using the `headerTitle` option within a `Stack.Screen` component in a dynamic Native Stack navigator configuration. It provides a function that receives props like `allowFontScaling`, `tintColor`, `style`, and `children`, returning a customized React Native `Text` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{\n    headerTitle: ({ allowFontScaling, tintColor, style, children }) => (\n      <Text\n        style={[style, { color: tintColor }]}\n        allowFontScaling={allowFontScaling}\n      >\n        {children}\n      </Text>\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Route Index during Navigation Stack Reset (JavaScript)\nDESCRIPTION: This snippet illustrates how to use the `index` parameter within `StackActions.reset` to specify the active route in the newly defined navigation state. It resets the stack to contain two routes ('Profile' and 'Settings'), setting the `index` to 1, which makes 'Settings' the active screen upon reset. This is useful for resetting the stack to a specific point with a designated active screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Custom getStateFromPath Usage with useLinking (JavaScript)\nDESCRIPTION: This snippet demonstrates how to customize the URL-to-navigation-state parsing logic in useLinking by overriding the `getStateFromPath` option. Users can implement their own path parsing logic or wrap the default implementation by importing it explicitly. The example shows the required parameters (`path`, `config`) and notes the extensibility of React Navigation's deep linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-linking.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseLinking(ref, {\\n  prefixes: ['https://example.com', 'example://'],\\n  config: {\\n    screens: {\\n      Chat: 'feed/:sort',\\n    },\\n  },\\n  getStateFromPath(path, config) {\\n    // Return a state object here\\n    // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links with uri-scheme\nDESCRIPTION: Commands to test deep links using the uri-scheme package for both iOS and Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open \"example://chat/jane\" --ios\n\nnpx uri-scheme open \"exp://127.0.0.1:19000/--/chat/jane\" --ios\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Material Top Tabs Navigator\nDESCRIPTION: Example of how to import and use the createMaterialTopTabNavigator function to create a basic tab navigation structure with two screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst Tab = createMaterialTopTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Transition Events\nDESCRIPTION: Example of subscribing to transition start event using navigation.addListener\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-gesture-handler with Expo - Bash\nDESCRIPTION: Uses the Expo CLI to install the react-native-gesture-handler library, required for enabling gesture support in stack navigators. Should be run in the project root of an Expo-managed project. Requires Expo CLI (npx expo) and a working Expo project setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Core Package\nDESCRIPTION: Command to install the core React Navigation package. This is the primary package needed to implement navigation in your React Native application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native@^5.x\n```\n\n----------------------------------------\n\nTITLE: Using getActiveChildNavigationOptions for Dynamic Parent Options (React Navigation, JSX)\nDESCRIPTION: Illustrates how to use the `getActiveChildNavigationOptions` helper function within a navigator's `navigationOptions`. This allows the navigator (e.g., `HomeStack`) to dynamically inherit options (like `tabBarLabel` or `title`) from its currently active child screen (`A`). The options are merged using the spread operator, allowing for fallback values or overrides.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass A extends React.Component {\n  static navigationOptions = {\n    title: 'Welcome',\n    tabBarLabel: 'Home!',\n  };\n\n  render() {\n    return <Placeholder text=\"A!\" />;\n  }\n}\n\nconst HomeStack = createStackNavigator(\n  { A },\n  {\n    navigationOptions: ({ navigation, screenProps }) => ({\n      // you can put fallback values before here, eg: a default tabBarLabel\n      ...getActiveChildNavigationOptions(navigation, screenProps),\n      // put other navigationOptions that you don't want the active child to\n      // be able to override here!\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Stack Action: Popping Screens with pop in React Navigation (JavaScript)\nDESCRIPTION: Utilizes the 'pop' method to return to a previous screen by a specified number of stack entries. Requires stack navigator. Input: (optional) number n specifying how many screens to pop; output: modified navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.pop(n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Bottom Tab Navigator with Custom Options\nDESCRIPTION: Example of creating a material bottom tab navigator with custom configuration options such as initial route, active and inactive colors, and bar style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/material-bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createMaterialBottomTabNavigator(\n  {\n    Album: { screen: Album },\n    Library: { screen: Library },\n    History: { screen: History },\n    Cart: { screen: Cart },\n  },\n  {\n    initialRouteName: 'Album',\n    activeColor: '#f0edf6',\n    inactiveColor: '#3e2465',\n    barStyle: { backgroundColor: '#694fad' },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using the useLocale Hook in React Navigation\nDESCRIPTION: Demonstrates how to access the configured text direction (`ltr` or `rtl`) within a custom component using the `useLocale` hook provided by `@react-navigation/native`. This allows components to adapt their behavior or styling based on the app's locale direction.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { useLocale } from '@react-navigation/native';\n\nfunction MyComponent() {\n  const { direction } = useLocale();\n\n  // Use the direction\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial Route Using Static Navigator Config - React Navigation (JavaScript)\nDESCRIPTION: This snippet extends the RootStack and HomeTabs setup by explicitly specifying initialRouteName: 'Feed' for the Home screen in the navigator's linking configuration. This guarantees the Feed screen is the initial route in the navigation stack state regardless of the URL. It requires matching React Navigation components (FeedScreen, etc.) and works in environments where navigation state can be customized. Limitations include that browser history may not reflect this initial state if the app is served on the web.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HomeTabs = createBottomTabNavigator({\n  screens: {\n    Feed: {\n      screen: FeedScreen,\n    },\n    Profile: {\n      screen: HomeScreen,\n      linking: {\n        path: 'users/:id',\n      },\n    },\n    Settings: {\n      screen: SettingsScreen,\n      linking: {\n        path: 'settings',\n      },\n    },\n  },\n});\n\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeTabs,\n      linking: {\n        // highlight-next-line\n        initialRouteName: 'Feed',\n      },\n    },\n    NotFound: {\n      screen: NotFoundScreen,\n      linking: {\n        path: '*',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Navigation with Material Bottom Tabs in React Native\nDESCRIPTION: This code snippet shows how to implement a Bottom Navigation component using the createMaterialBottomTabNavigator from @react-navigation/material-bottom-tabs. It creates a tab navigator with three tabs: Feed, Notifications, and Messages.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\n\nimport { Feed } from './feed';\nimport { Messages } from './messages';\nimport { Notifications } from './notifications';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport const BottomTabs = () => {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      shifting={true}\n      sceneAnimationEnabled={false}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{\n          tabBarIcon: 'home-account',\n        }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{\n          tabBarIcon: 'bell-outline',\n        }}\n      />\n      <Tab.Screen\n        name=\"Messages\"\n        component={Messages}\n        options={{\n          tabBarIcon: 'message-text-outline',\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Flex 1 View - Static Navigation\nDESCRIPTION: This snippet shows a View component wrapped around the main navigation with `flex: 1` style. This ensures that the View stretches to fill the container, making the content visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\n\n/* ... */\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return (\n    // highlight-next-line\n    <View style={{ flex: 1 }}>\n      <Navigation />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Bottom Tabs Package (Bash)\nDESCRIPTION: Installs the `@react-navigation/bottom-tabs` package using npm, which is required to implement bottom tab navigation in a React Navigation project. The command specifies version 6.x or higher.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/bottom-tabs@^6.x\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tab Badge Component (JavaScript/React Native)\nDESCRIPTION: Demonstrates using the `badge` option function to render a custom React Element as a badge on a tab. The function receives the `route` object and returns the desired badge component, like a simple styled View.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nbadge: ({ route }) => (\n  <View\n    style={{ backgroundColor: 'red', width: 20, height: 20, borderRadius: 10 }}\n  />\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Route Parameters in Stack Navigator\nDESCRIPTION: Example showing how to provide default parameters to routes in a stack navigator. This allows screens to receive specific props when they are rendered.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Store = createStackNavigator({\n  Playstation: { screen: ProductScreen, params: { product: 'Playstation' } },\n  Xbox: { screen: ProductScreen, params: { product: 'Xbox' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Returning to the Previous Screen using `goBack` in React Navigation with JavaScript\nDESCRIPTION: Shows a simple `ProfileScreen` component that uses the `goBack` function (obtained via destructuring from the `navigation` prop) to navigate back to the previous screen in the stack when a button is pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ navigation: { goBack } }) {\n  return (\n    <View>\n      <Button onPress={() => goBack()} title=\"Go back from ProfileScreen\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Nested Navigators in React Navigation State using JavaScript\nDESCRIPTION: This JavaScript object example shows the React Navigation state structure when a navigator (e.g., Tab) is nested within a screen ('Home') of another navigator (e.g., Stack). The nested navigator's state is contained within the `state` property of the parent route object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-state.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    {\n      key: 'home-1',\n      name: 'Home',\n      state: {\n        key: 'tab-1',\n        routeNames: ['Feed', 'Library', 'Favorites'],\n        routes: [\n          { key: 'feed-1', name: 'Feed', params: { sortBy: 'latest' } },\n          { key: 'library-1', name: 'Library' },\n          { key: 'favorites-1', name: 'Favorites' },\n        ],\n        index: 0,\n      },\n    },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Modal Screens\nDESCRIPTION: Basic configuration for creating a transparent modal screen in stack navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen name=\"Home\" component={HomeStack} />\n  <Stack.Screen\n    name=\"Modal\"\n    component={ModalScreen}\n    options={{ presentation: 'transparentModal' }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Loading Screen\nDESCRIPTION: Creates an authentication loading screen component that checks for existing authentication tokens and directs users to either the main app or authentication flow. Uses AsyncStorage for token persistence.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/auth-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {\n  ActivityIndicator,\n  AsyncStorage,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nclass AuthLoadingScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this._bootstrapAsync();\n  }\n\n  // Fetch the token from storage then navigate to our appropriate place\n  _bootstrapAsync = async () => {\n    const userToken = await AsyncStorage.getItem('userToken');\n\n    // This will switch to the App screen or Auth screen and this loading\n    // screen will be unmounted and thrown away.\n    this.props.navigation.navigate(userToken ? 'App' : 'Auth');\n  };\n\n  // Render any loading content that you like here\n  render() {\n    return (\n      <View>\n        <ActivityIndicator />\n        <StatusBar barStyle=\"default\" />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding intent-filter for Deep Linking in AndroidManifest.xml (XML)\nDESCRIPTION: Modifies the AndroidManifest.xml to enable deep linking by setting the MainActivity launch mode to singleTask and adding an intent-filter that captures VIEW actions for a specific URI scheme. This configuration enables the app to respond to deep link intents launched from browsers or other apps. Place inside the MainActivity element of the manifest.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Ensuring Container View Fills Space (JavaScript)\nDESCRIPTION: This React component demonstrates wrapping the `NavigationContainer` in a `View` with `flex: 1` style. This ensures the wrapping view expands to fill its parent, which is often necessary for the navigation container and its screens to be visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1 }}>\n      <NavigationContainer>{/* ... */}</NavigationContainer>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Accessibility Label in TabBar via getAccessibilityLabel (JavaScript)\nDESCRIPTION: This snippet customizes the accessibility label for each tab by providing a getAccessibilityLabel function to TabBar, which selects the route's accessibilityLabel property. If unavailable, the route's title is used by default. Use for enhancing accessibility in React Navigation tabs and testing. Expects routes to have accessibilityLabel properties where needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n<TabBar\n  getAccessibilityLabel={({ route }) => route.accessibilityLabel}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Navigation Setup in React Native\nDESCRIPTION: Demonstrates minimal implementation of tab-based navigation using TabNavigator with Home and Settings screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { TabNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\n\nexport default TabNavigator({\n  Home: { screen: HomeScreen },\n  Settings: { screen: SettingsScreen },\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Screen by Name in JavaScript\nDESCRIPTION: Shows how the `name` prop defined on a `Screen` component is used as the target identifier when navigating using the `navigation.navigate()` function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate('Profile');\n```\n\n----------------------------------------\n\nTITLE: Emit Custom Events in React Navigation\nDESCRIPTION: This code snippet demonstrates how to emit custom events from a navigator to its child screens using the `emit` method of the navigation object. The `target` property specifies the screen that will receive the event.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.emit({\n  type: 'transitionStart',\n  data: { blurring: false },\n  target: route.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Structure of a Route Object in React Navigation\nDESCRIPTION: This code snippet illustrates the structure of a Route object in React Navigation. It shows how route information is organized with a unique key, screen name, and optional parameters for passing data between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/glossary-of-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  name: 'Profile',\n  params: { id: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Event Listeners for Transition Start\nDESCRIPTION: Example of using the transitionStart event listener with React hooks to detect when a screen transition animation begins. The event provides data about whether the screen is being opened or closed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-drawer-layout using npm/yarn\nDESCRIPTION: Command to add the `react-native-drawer-layout` library to a React Native project using either npm or yarn. This command should be run in the project's root directory. Requires Node.js and npm/yarn to be installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-drawer-layout\n```\n\n----------------------------------------\n\nTITLE: Static Conditional Navigation Configuration (React Navigation)\nDESCRIPTION: This snippet demonstrates a static approach to conditionally rendering screens within a React Navigation setup. It utilizes the `createNativeStackNavigator` and defines groups of screens (`LoggedIn`, `LoggedOut`) based on authentication state using custom hooks (`useIsSignedIn`, `useIsSignedOut`). The `Help` screen is placed outside the groups, accessible regardless of the login state. This can lead to unexpected behavior when authentication state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  groups: {\n    LoggedIn: {\n      if: useIsSignedIn,\n      screens: {\n        Home: HomeScreen,\n        Profile: ProfileScreen,\n      },\n    },\n    LoggedOut: {\n      if: useIsSignedOut,\n      screens: {\n        SignIn: SignInScreen,\n        SignUp: SignUpScreen,\n      },\n    },\n  },\n  screens: {\n    Help: HelpScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Tab Bar with Absolute Position\nDESCRIPTION: Demonstrates how to apply absolute positioning to the tab bar using the `style` property within `tabBarOptions`. This allows screen content to render underneath the tab bar.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nstyle: {\n  position: 'absolute';\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Lifecycle Listener Implementation\nDESCRIPTION: Example of subscribing to navigation lifecycle events and handling the payload.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst didBlurSubscription = this.props.navigation.addListener(\n  'didBlur',\n  (payload) => {\n    console.debug('didBlur', payload);\n  }\n);\n\n// Remove the listener when you are done\ndidBlurSubscription.remove();\n```\n\n----------------------------------------\n\nTITLE: Initializing StackNavigator with Custom Screens in React Navigation (JSX)\nDESCRIPTION: Demonstrates creating a stack navigator using `createStackNavigator` from React Navigation. It registers `Screen1` and `Screen2` and disables the default header (`headerMode: 'none'`), indicating that status bar styling will be handled within the screen components themselves. Depends on `createStackNavigator` and the screen components defined elsewhere.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default createStackNavigator(\n  {\n    Screen1: {\n      screen: Screen1,\n    },\n    Screen2: {\n      screen: Screen2,\n    },\n  },\n  {\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Class Component to Inject useIsFocused Prop - React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to wrap a class-based React component to inject the isFocused prop using the useIsFocused hook, enabling focus state awareness within legacy or class components. The exported default function is a functional component that passes isFocused to the wrapped Profile class component. Dependencies include React, @react-navigation/native, and corresponding navigation setup; input props are merged and output is the rendered Profile component with focus state prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-is-focused.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Get it from props\n    const { isFocused } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const isFocused = useIsFocused();\n\n  return <Profile {...props} isFocused={isFocused} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Loading View Implementation\nDESCRIPTION: Implementation of a custom loading view while the persisted navigation state is being restored from AsyncStorage.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/state-persistence.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<AppNavigator\n  persistenceKey={...}\n  renderLoadingExperimental={() => <ActivityIndicator />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Localization with Expo and i18n-js - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure localization using the `expo-localization` and `i18n-js` libraries in a React (JSX) environment. It sets up English and French translations, enables fallbacks, assigns translations to the i18n instance, and logs the system locale. Dependencies: `expo-localization` and `i18n-js`. Inputs are locale values; the output is localized translation retrieval based on the system's locale; fallbacks to English are handled if no translation is provided.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/localization.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as Localization from 'expo-localization'; // or whatever library you want\\nimport i18n from 'i18n-js'; // or whatever library you want\\n\\nconst en = {\\n  foo: 'Foo',\\n  bar: 'Bar {{someValue}}',\\n};\\n\\nconst fr = {\\n  foo: 'Fou',\\n  bar: 'B√°r {{someValue}}',\\n};\\n\\ni18n.fallbacks = true;\\ni18n.translations = { fr, en };\\n\\n// This will log 'en' for me, as I'm an English speaker\\nconsole.log(Localization.locale);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tab Navigation with React Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic tab-based navigation using createBottomTabNavigator from react-navigation. It sets up two screens: Home and Settings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createBottomTabNavigator, createAppContainer } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: HomeScreen,\n  Settings: SettingsScreen,\n});\n\nexport default createAppContainer(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Configuring Podfile for Hybrid iOS Applications\nDESCRIPTION: Podfile configuration to include RCTLinkingIOS subspec for hybrid iOS applications using React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n pod 'React', :path => '../node_modules/react-native', :subspecs => [\n    . . . // other subspecs\n    'RCTLinkingIOS',\n    . . .\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining RouteConfigs for Stack Navigator (React Navigation, JavaScript)\nDESCRIPTION: This code defines how to map route names to React components in the stack navigator. It specifies a Profile screen with support for deep linking, route parameters, and customized navigation options via a functional navigationOptions property. You must provide valid React components and any additional route configurations as needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncreateStackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Navigation State Warnings with LogBox (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use `LogBox.ignoreLogs` (available in React Native 0.64+) to suppress the 'Non-serializable values were found in the navigation state' warning. This is useful if you understand the implications and don't need state persistence or deep linking for the affected screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nimport { LogBox } from 'react-native';\n\nLogBox.ignoreLogs([\n  'Non-serializable values were found in the navigation state',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Animation for Stack Navigator in React Navigation\nDESCRIPTION: This complex interpolator function creates a sliding effect for screen transitions. It translates the previous screen slightly to the left and the current screen from the right edge.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst forSlide = ({ current, next, inverted, layouts: { screen } }) => {\n  const progress = Animated.add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  return {\n    cardStyle: {\n      transform: [\n        {\n          translateX: Animated.multiply(\n            progress.interpolate({\n              inputRange: [0, 1, 2],\n              outputRange: [\n                screen.width, // Focused, but offscreen in the beginning\n                0, // Fully focused\n                screen.width * -0.3, // Fully unfocused\n              ],\n              extrapolate: 'clamp',\n            }),\n            inverted\n          ),\n        },\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming statusBarColor to statusBarBackgroundColor (JavaScript)\nDESCRIPTION: This code snippet illustrates renaming the 'statusBarColor' option to 'statusBarBackgroundColor' in Native Stack Navigator. It depends on React Navigation Native Stack. The change occurs in the Navigator options object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n- <Stack.Navigator options={{ statusBarColor: 'tomato' }}>\\n+ <Stack.Navigator options={{ statusBarBackgroundColor: 'tomato' }}>\n```\n\n----------------------------------------\n\nTITLE: Listening for Drawer State Events in Class Components - JavaScript\nDESCRIPTION: This snippet demonstrates how to check the drawer's open or closed status in a class-based React component by listening to the 'state' event on the navigation object. It uses getDrawerStatusFromState to determine the drawer's status when navigation state changes and handles cleanup by removing the listener in componentWillUnmount. This method is essential for class components and relies on the availability of the navigation prop and the @react-navigation/drawer package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Profile extends React.Component {\\n  componentDidMount() {\\n    this._unsubscribe = navigation.addListener('state', () => {\\n      const isDrawerOpen =\\n        getDrawerStatusFromState(navigation.getState()) === 'open';\\n\\n      // do something\\n    });\\n  }\\n\\n  componentWillUnmount() {\\n    this._unsubscribe();\\n  }\\n\\n  render() {\\n    // Content of the component\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Long Press Events\nDESCRIPTION: Example showing how to handle tab long press events using navigation event listeners.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabLongPress', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking for iOS in AppDelegate.m\nDESCRIPTION: Adds necessary code to AppDelegate.m to handle incoming app links and Universal Links in a bare React Native iOS project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n// Add this inside `@implementation AppDelegate` above `@end`:\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Screens for Performance\nDESCRIPTION: Example showing how to use the new preload method to improve perceived performance by pre-rendering screens likely to be navigated to next.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nnavigation.preload('Details', { id: 42 });\n```\n\n----------------------------------------\n\nTITLE: Wrapping Navigator with Custom Layout - Dynamic Component - JavaScript\nDESCRIPTION: Attaches a 'layout' function as a prop to <Stack.Navigator> for advanced UI wrapping and direct access to navigation state inside the wrapper. This setup facilitates contextual additions (like breadcrumbs or layouts) for every rendered screen stack. Proper usage requires React, React Navigation stack, and relevant UI/utility components such as View and Breadcrumbs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator\\n      // highlight-start\\n      layout={({ children, state, descriptors, navigation }) => (\\n        <View style={styles.container}>\\n          <Breadcrumbs\\n            state={state}\\n            descriptors={descriptors}\\n            navigation={navigation}\\n          />\\n          {children}\\n        </View>\\n      )}\\n      // highlight-end\\n    >\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Localization in a React Navigation Screen - JavaScript\nDESCRIPTION: This example shows a React Navigation screen component accessing translation and locale data via screenProps. It sets the navigation title using a localized value and dynamically presents either an English or French translation, along with buttons to switch locales. Dependencies include styles, the translation framework, and React Navigation's screenProps mechanism. The screen renders locale-aware content and allows users to switch app language on the fly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/localization.md#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nclass Screen extends React.Component {\\n  static navigationOptions = ({ screenProps: { t } }) => ({\\n    title: t('foo'),\\n  });\\n\\n  render() {\\n    let { t, locale } = this.props.screenProps;\\n\\n    return (\\n      <View style={styles.container}>\\n        <Text style={styles.text}>\\n          Current locale: {locale}.{\\' \\'\\n          {locale !== 'en' && locale !== 'fr'\\n            ? 'Translations will fall back to \\\"en\\\" because none available'\\n            : null}\\n        </Text>\\n        <Text>{t('bar', { someValue: Date.now() })}</Text>\\n        {locale === 'en' ? (\\n          <Button\\n            title=\\\"Switch to French\\\"\\n            onPress={() => this.props.screenProps.setLocale('fr')}\\n          />\\n        ) : (\\n          <Button\\n            title=\\\"Switch to English\\\"\\n            onPress={() => this.props.screenProps.setLocale('en')}\\n          />\\n        )}\\n      </View>\\n    );\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refs with withNavigation HOC Components\nDESCRIPTION: Shows how to properly use refs with components wrapped by withNavigation by using the onRef prop instead of the ref prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/with-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// MyBackButton.ts\nexport default withNavigation(MyBackButton);\n\n// MyNavBar.ts\n<MyBackButton onRef={(elem) => this.backButton = elem} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Bottom Tab Navigator\nDESCRIPTION: Example configuration for createMaterialBottomTabNavigator, showing how to set up routes, customize colors, and set initial route and bar style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/material-bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createMaterialBottomTabNavigator(\n  {\n    Album: { screen: Album },\n    Library: { screen: Library },\n    History: { screen: History },\n    Cart: { screen: Cart },\n  },\n  {\n    initialRouteName: 'Album',\n    activeColor: '#f0edf6',\n    inactiveColor: '#3e2465',\n    barStyle: { backgroundColor: '#694fad' },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Tab Navigation (Dynamic) with React Native Testing Library\nDESCRIPTION: This test verifies that tab navigation works correctly by pressing the settings tab button and asserting the visibility of the Settings screen. It utilizes `NavigationContainer` and `@testing-library/react-native`. Requires jest for mocking timers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, jest, test } from '@jest/globals';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('navigates to settings by tab bar button press', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n\n  const button = screen.getByLabelText('Settings, tab, 2 of 2');\n\n  await user.press(button);\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Settings screen')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Actions in Navigation Container (React Navigation)\nDESCRIPTION: Examples of setting the onUnhandledAction prop in both static and dynamic Navigation configurations. This function is called when a navigation action is not handled by any of the navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Navigation\n  // highlight-next-line\n  onUnhandledAction={(action) => console.error('Unhandled action', action)}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  // highlight-next-line\n  onUnhandledAction={(action) => console.error('Unhandled action', action)}\n>\n  {/* ... */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Deep Linking Config in React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates the old format for configuring deep links in React Navigation, where routes are defined as a flat key-value map. Dependencies include React Navigation 5.x. The config object accepts route names as keys and path strings as values; however, this pattern is deprecated due to lack of strictness and inability to control access or implement 404 screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  Home: 'home',\n  Feed: 'feed',\n  Profile: 'profile',\n  Settings: 'settings',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Combined Screen Props Type in TypeScript\nDESCRIPTION: Summarizes the process of defining a `Props` type for a screen component by combining the specific `RouteProp` and `NavigationProp` types derived for that screen. This ensures both `route` and `navigation` props are correctly typed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\ntype RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Feed: { sort: 'latest' | 'top' } | undefined;\n};\n\ntype ProfileScreenRouteProp = RouteProp<RootStackParamList, 'Profile'>;\n\ntype ProfileScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'Profile'\n>;\n\ntype Props = {\n  route: ProfileScreenRouteProp;\n  navigation: ProfileScreenNavigationProp;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-drawer-layout Package\nDESCRIPTION: Demonstrates how to install the new standalone package for drawer implementation used in React Navigation. This package can be used independently of React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-06-27-react-navigation-7.0-rc.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-drawer-layout@next\n```\n\n----------------------------------------\n\nTITLE: Applying Card Style Interpolator to Navigation Options\nDESCRIPTION: Implementation of card style interpolator in navigation options for a Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nProfile.navigationOptions = {\n  cardStyleInterpolator: forFade,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Full-Screen Modal Navigator with React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement full-screen modal functionality in a React Native app using React Navigation's stack navigator. It shows how to nest navigators by defining a main stack for primary screens and a root stack that incorporates a modal screen with custom transition behavior using the `mode: 'modal'` setting. Dependencies include React Native, react-navigation, and compatible navigation components such as Button and View. The key inputs are navigation events and routes; the output is a modal interface with platform-specific transitions. The `navigate` and `goBack` methods manage modal presentation and dismissal, and the modal transition is only visually distinct on iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const params = navigation.state.params || {};\n\n    return {\n      headerLeft: () => (\n        <Button\n          onPress={() => navigation.navigate('MyModal')}\n          title=\"Info\"\n          color=\"#fff\"\n        />\n      ),\n      /* the rest of this config is unchanged */\n    };\n  };\n\n  /* render function, etc */\n}\n\nclass ModalScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n        <Button\n          onPress={() => this.props.navigation.goBack()}\n          title=\"Dismiss\"\n        />\n      </View>\n    );\n  }\n}\n\nconst MainStack = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n  {\n    /* Same configuration as before */\n  }\n);\n\nconst RootStack = createStackNavigator(\n  {\n    Main: {\n      screen: MainStack,\n    },\n    MyModal: {\n      screen: ModalScreen,\n    },\n  },\n  {\n    mode: 'modal',\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Service Module in React Navigation JavaScript\nDESCRIPTION: This code defines the `NavigationService` module. It maintains a private reference (`_navigator`) to the top-level navigator, set via `setTopLevelNavigator`. It exports a `navigate` function that uses the stored navigator reference to dispatch a `NavigationActions.navigate` action, allowing navigation from anywhere the service is imported. Requires `NavigationActions` from `react-navigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// NavigationService.js\n\nimport { NavigationActions } from 'react-navigation';\n\nlet _navigator;\n\nfunction setTopLevelNavigator(navigatorRef) {\n  _navigator = navigatorRef;\n}\n\nfunction navigate(routeName, params) {\n  _navigator.dispatch(\n    NavigationActions.navigate({\n      routeName,\n      params,\n    })\n  );\n}\n\n// add other navigation functions that you need and export them\n\nexport default {\n  navigate,\n  setTopLevelNavigator,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-pager-view with Expo - Bash\nDESCRIPTION: Installs the react-native-pager-view dependency using Expo, ensuring compatibility for iOS and Android platforms in React Native projects. Run this command inside your Expo project directory. No arguments are required aside from having Expo CLI installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexpo install react-native-pager-view\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Key for Group State Management\nDESCRIPTION: Demonstrates using navigationKey prop to manage group-level screen state based on authentication status.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/group.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Group navigationKey={isSignedIn ? 'user' : 'guest'}>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Running Jetifier Postinstall Script Manually (Bash)\nDESCRIPTION: Manually executes the `postinstall` script defined in `package.json` using `npm run postinstall`. This is typically done once after adding the script to ensure dependencies are immediately patched with jetifier.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run postinstall\n```\n\n----------------------------------------\n\nTITLE: Building and Running React Native App on iOS (Bash)\nDESCRIPTION: The command `npx react-native run-ios` builds the native iOS project and installs/launches the application on a connected iOS device or simulator. This step is necessary after making native configuration changes for deep linking to ensure they are applied.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native run-ios\n```\n\n----------------------------------------\n\nTITLE: Customizing headerRight in Dynamic Configuration\nDESCRIPTION: Shows how to provide a custom component for the right side of the header using the `headerRight` option within a `Stack.Screen` component in a dynamic Native Stack navigator configuration. It assigns a function returning a custom component (`MyButton`) which receives props like `tintColor` and `pressColor` and includes an `onPress` handler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{\n    headerLeft: (props) => (\n      <MyButton\n        {...props}\n        onPress={() => {\n          // Do something\n        }}\n      />\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Flex 1 View - Dynamic Navigation\nDESCRIPTION: This snippet shows a View component wrapped around the NavigationContainer with `flex: 1` style. This ensures that the View stretches to fill the container, making the content visible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    // highlight-next-line\n    <View style={{ flex: 1 }}>\n      <NavigationContainer>{/* ... */}</NavigationContainer>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Screen StackNavigator Configuration\nDESCRIPTION: Expands the navigation setup to include multiple screens (Home and Details) with initialRouteName configuration. Shows how to define multiple routes in the stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n      </View>\n    );\n  }\n}\n\nconst RootStack = StackNavigator(\n  {\n    Home: {\n      screen: HomeScreen,\n    },\n    Details: {\n      screen: DetailsScreen,\n    },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme via Props in React Navigation 4.x (JavaScript)\nDESCRIPTION: This line shows how a theme (e.g., 'dark') was formerly applied to a navigation tree via the theme prop. Only basic theming was available and fine-grained color customization required extra manual coding. Inputs: string (theme name). Outputs: changes certain navigation component appearances based on predefined themes. In React Navigation 5.x, theming is customizable with theme objects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n<App theme=\\\"dark\\\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator with Screen Components\nDESCRIPTION: This code snippet shows how to set up a Stack Navigator with multiple screens. It demonstrates the usage of createNativeStackNavigator and how to define screen components within the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\n\nconst StackNavigator = (\n  <Stack.Navigator>\n    <Stack.Screen\n      name=\"Home\"\n      component={HomeScreen} // <----\n    />\n    <Stack.Screen\n      name=\"Details\"\n      component={DetailsScreen} // <----\n    />\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing from @react-navigation/elements\nDESCRIPTION: Example of importing a component from the @react-navigation/elements package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport { useHeaderHeight } from '@react-navigation/elements';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Screen Options in JavaScript for React Navigation\nDESCRIPTION: This snippet demonstrates how to retrieve screen options using the getScreenOptions function of a custom router. It shows how to prepare a navigation prop for a child component and how to access the configured title from the options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-routers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// First, prepare a navigation prop for your child, or re-use one if already available.\nconst screenNavigation = addNavigationHelpers({\n  // In this case we use navigation.state.index because we want the title for the active route.\n  state: navigation.state.routes[navigation.state.index],\n  dispatch: navigation.dispatch,\n});\nconst options = this.props.router.getScreenOptions(screenNavigation, {});\nconst title = options.title;\n```\n\n----------------------------------------\n\nTITLE: Configuration for Deep Linking with Nested Navigators (JS)\nDESCRIPTION: This snippet demonstrates the configuration for handling deep links when using nested navigators.  The `config` object mirrors the navigator hierarchy, allowing React Navigation to correctly resolve the deep link to the intended screen within the nested structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Repository - React Navigation (Bash)\nDESCRIPTION: This code snippet provides the sequence of commands needed to fork, clone, and set up the React Navigation repository locally. Dependencies include Git and Yarn. You clone your fork, add the upstream repository, and install project dependencies via Yarn. Input includes a GitHub username placeholder; outputs are a local repository ready for contributions. Make sure Yarn and Git are installed before running these commands.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/react-navigation.git\\ncd react-navigation\\ngit remote add upstream https://github.com/react-navigation/react-navigation.git\\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Nested Navigator Setup with Stack and Tabs (JS)\nDESCRIPTION: This code provides an example of a nested navigator setup. A Stack Navigator contains a `Home` screen, which in turn contains a Tab Navigator with `Profile` and `Feed` screens.  The configuration for deep linking must reflect this nesting.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Home() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Profile\" component={Profile} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping IconWithBadge for Specific Use in React Native (JavaScript)\nDESCRIPTION: This snippet shows a simple functional component `HomeIconWithBadge` that wraps the `IconWithBadge` component. It demonstrates passing props down and provides a hardcoded `badgeCount` (value 3). The comment emphasizes that in a real application, the `badgeCount` should be passed dynamically via state management (Context, Redux, MobX) or event emitters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/tab-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst HomeIconWithBadge = (props) => {\n  // You should pass down the badgeCount in some other ways like React Context API, Redux, MobX or event emitters.\n  return <IconWithBadge {...props} badgeCount={3} />;\n};\nexport default HomeIconWithBadge;\n```\n\n----------------------------------------\n\nTITLE: Toggling a Drawer with DrawerActions in React Navigation\nDESCRIPTION: Code example showing how to toggle a drawer pane (open if closed, close if open) in a drawer-based navigator using the toggleDrawer action from DrawerActions. This requires importing DrawerActions from @react-navigation/native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nnavigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Router in React Navigation Component\nDESCRIPTION: Shows how to add a static router property to a React component to define its navigation logic using StackRouter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNavigator extends React.Component {\n  static router = StackRouter(routes, config);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting headerTruncatedBackTitle in StackNavigator (v1.x)\nDESCRIPTION: Example demonstrating how to define a truncated back button title using `headerTruncatedBackTitle`. This title is used when the full `headerBackTitle` doesn't fit on the screen. Like `headerBackTitle`, it must be defined in the `navigationOptions` of the *origin* screen (Screen A) for the transition *to* the destination screen (Screen B).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nStackNavigator({\n  A: {\n    screen: AScreen,\n    navigationOptions: () => ({\n      title: `A`,\n      headerBackTitle: 'A much too long text for back button from B to A',\n      headerTruncatedBackTitle: `to A`,\n    }),\n  },\n  B: {\n    screen: BScreen,\n    navigationOptions: () => ({\n      title: `B`,\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ProfileNavigator with React Navigation Stack\nDESCRIPTION: This snippet demonstrates how to create a simple stack navigator for the Profile screens using React Navigation's createStackNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { AppRoute } from './app-routes';\nimport { ProfileScreen } from '../scenes/profile';\n\nconst Stack = createStackNavigator();\n\nexport const ProfileNavigator = (): React.ReactElement => (\n  <Stack.Navigator headerMode='none'>\n    <Stack.Screen name={AppRoute.PROFILE} component={ProfileScreen}/>\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Correctly Setting Tab Navigator Options on Nested Stack Components (React Navigation, JS)\nDESCRIPTION: Demonstrates the correct method to configure options for a parent navigator (a `createBottomTabNavigator`) by setting the `navigationOptions` property directly on the child navigator components (`HomeStack`, `SettingsStack`) which are used as screens in the parent. This allows `HomeStack` and `SettingsStack` to control their appearance (e.g., `tabBarLabel`) within the tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst HomeStack = createStackNavigator({ A });\nconst SettingsStack = createStackNavigator({ B });\n\nHomeStack.navigationOptions = {\n  tabBarLabel: 'Home!',\n};\n\nSettingsStack.navigationOptions = {\n  tabBarLabel: 'Settings!',\n};\n\nexport default createAppContainer(\n  createBottomTabNavigator({\n    HomeStack,\n    SettingsStack,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Correctly Setting Tab Options for Nested Stacks (Static)\nDESCRIPTION: Illustrates the correct static configuration approach. The `options` (including `tabBarLabel`) are defined directly within the `createBottomTabNavigator` configuration for the screens that render the nested stack navigators (`HomeStackScreen`, `SettingsStackScreen`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// codeblock-focus-start\nconst Tab = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeStackScreen,\n      options: {\n        tabBarLabel: 'Home!',\n      },\n    },\n    Settings: {\n      screen: SettingsStackScreen,\n      options: {\n        tabBarLabel: 'Settings!',\n      },\n    },\n  },\n});\n// codeblock-focus-start\n```\n\n----------------------------------------\n\nTITLE: Using useHeaderHeight Hook in React Navigation Stack\nDESCRIPTION: Example demonstrating how to get the header height using the useHeaderHeight hook from react-navigation-stack. This hook provides a simpler alternative to using the Context API directly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useHeaderHeight } from 'react-navigation-stack';\n\n// ...\n\nconst headerHeight = useHeaderHeight();\n```\n\n----------------------------------------\n\nTITLE: Customizing Test ID for TabBar Tabs via getTestID (JavaScript)\nDESCRIPTION: Here, the getTestID prop is used to assign a unique test id to each tab by referencing route.testID, facilitating automated testing or element targeting. This is used in conjunction with React Navigation's TabBar component. Ensure routes include a testID property if testability is required.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n<TabBar\n  getTestID={({ route }) => route.testID}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Stack.Group for Organizing Screens Instead of Nesting\nDESCRIPTION: This example demonstrates using the Stack.Group component to organize screens rather than nesting navigators. It shows conditionally rendering different groups of screens based on authentication state and setting modal presentation for specific screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  {isLoggedIn ? (\n    // Screens for logged in users\n    <Stack.Group>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n    </Stack.Group>\n  ) : (\n    // Auth screens\n    <Stack.Group screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"SignIn\" component={SignIn} />\n      <Stack.Screen name=\"SignUp\" component={SignUp} />\n    </Stack.Group>\n  )}\n  {/* Common modal screens */}\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Help\" component={Help} />\n    <Stack.Screen name=\"Invite\" component={Invite} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Sign In Screen (React)\nDESCRIPTION: This React component implements a simple sign-in screen with username and password input fields. It uses the `AuthContext` to access the `signIn` function, which is called when the user presses the 'Sign in' button. The component maintains the username and password state using the `useState` hook.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button onPress={() => signIn({ username, password })}>Sign in</Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Native Stack Navigator v6 (Bash)\nDESCRIPTION: Provides the npm command (with yarn alternative indicated by `npm2yarn`) to install version 6.x of the `@react-navigation/native-stack` package, which is required for using the native stack navigator functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native-stack@^6.x\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tab Router in React Navigation\nDESCRIPTION: This code snippet demonstrates how to create a custom tab router by implementing the required router interface functions including getInitialState, getRehydratedState, getStateForRouteNamesChange, getStateForRouteFocus, getStateForAction, and shouldActionChangeFocus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = {\n  type: 'tab',\n\n  getInitialState({ routeNames, routeParamList }) {\n    const index =\n      options.initialRouteName === undefined\n        ? 0\n        : routeNames.indexOf(options.initialRouteName);\n\n    return {\n      stale: false,\n      type: 'tab',\n      key: shortid(),\n      index,\n      routeNames,\n      routes: routeNames.map(name => ({\n        name,\n        key: name,\n        params: routeParamList[name],\n      })),\n    };\n  },\n\n  getRehydratedState(partialState, { routeNames, routeParamList }) {\n    const state = partialState;\n\n    if (state.stale === false) {\n      return state as NavigationState;\n    }\n\n    const routes = state.routes\n      .filter(route => routeNames.includes(route.name))\n      .map(\n        route =>\n          ({\n            ...route,\n            key: route.key || `${route.name}-${shortid()}`,\n            params:\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                  }\n                : route.params,\n          } as Route<string>)\n      );\n\n    return {\n      stale: false,\n      type: 'tab',\n      key: shortid(),\n      index:\n        typeof state.index === 'number' && state.index < routes.length\n          ? state.index\n          : 0,\n      routeNames,\n      routes,\n    };\n  },\n\n  getStateForRouteNamesChange(state, { routeNames }) {\n    const routes = state.routes.filter(route =>\n      routeNames.includes(route.name)\n    );\n\n    return {\n      ...state,\n      routeNames,\n      routes,\n      index: Math.min(state.index, routes.length - 1),\n    };\n  },\n\n  getStateForRouteFocus(state, key) {\n    const index = state.routes.findIndex(r => r.key === key);\n\n    if (index === -1 || index === state.index) {\n      return state;\n    }\n\n    return { ...state, index };\n  },\n\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'NAVIGATE': {\n        const index = state.routes.findIndex(\n          route => route.name === action.payload.name\n        );\n\n        if (index === -1) {\n          return null;\n        }\n\n        return { ...state, index };\n      }\n\n      default:\n        return BaseRouter.getStateForAction(state, action);\n    }\n  },\n\n  shouldActionChangeFocus() {\n    return false;\n  },\n};\n\nconst SimpleRouter = () => router;\n\nexport default SimpleRouter;\n```\n\n----------------------------------------\n\nTITLE: Managing Navigation Focus State with React Navigation Hooks (JavaScript)\nDESCRIPTION: This snippet defines a custom React hook called useFocusState that leverages NavigationContext to detect and manage navigation focus state in a component. It imports useContext, useState, and useEffect from React and depends on NavigationContext from 'react-navigation'. The hook subscribes to various navigation events ('action', 'willFocus', 'didFocus', 'willBlur', 'didBlur') using navigation.addListener, updating the local focus state accordingly. Required dependencies include react, react-navigation, and appropriate parent context setup. Inputs are navigation event types; the hook returns the current focus state. Surrounding context and external helper functions getInitialFocusState and focusStateOfEvent are assumed to be defined elsewhere.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-context.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useContext, useEffect } from 'react';\\nimport { NavigationContext } from 'react-navigation';\\n\\nexport function useFocusState() {\\n  const navigation = useContext(NavigationContext);\\n  const isFocused = navigation.isFocused();\\n  const [focusState, setFocusState] = useState(getInitialFocusState(isFocused));\\n  function handleEvt(e) {\\n    const newState = focusStateOfEvent(e.type);\\n    newState && setFocusState(newState);\\n  }\\n  useEffect(() => {\\n    const subsA = navigation.addListener('action', handleEvt);\\n    const subsWF = navigation.addListener('willFocus', handleEvt);\\n    const subsDF = navigation.addListener('didFocus', handleEvt);\\n    const subsWB = navigation.addListener('willBlur', handleEvt);\\n    const subsDB = navigation.addListener('didBlur', handleEvt);\\n    return () => {\\n      subsA.remove();\\n      subsWF.remove();\\n      subsDF.remove();\\n      subsWB.remove();\\n      subsDB.remove();\\n    };\\n  });\\n  return focusState;\\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Screen Options in Nested Stack-Tab Navigation in React Navigation\nDESCRIPTION: This example shows the correct implementation where tabBarLabel options are set directly on the Tab.Screen components that render the stack navigators, allowing control of the tab navigator options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeStackScreen}\n          options={{ tabBarLabel: 'Home!' }}\n        />\n        <Tab.Screen\n          name=\"Settings\"\n          component={SettingsStackScreen}\n          options={{ tabBarLabel: 'Settings!' }}\n        />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Navigation State from Deep Link with initialRouteName\nDESCRIPTION: Shows the resulting navigation state when following a deep link with the initialRouteName configuration. This demonstrates how the state structure contains both the initial route and the deep-linked route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  routes: [\n    {\n      name: 'Home',\n      state: {\n        index: 1,\n        routes: [\n          {\n            name: 'Feed'\n          },\n          {\n            name: 'Catalog',\n            params: { id: 42 },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Navigator with dangerouslyGetParent - React Navigation - JavaScript\nDESCRIPTION: This snippet shows how to use the 'dangerouslyGetParent' method in a React Navigation screen component to dynamically adjust navigation options based on parent navigator context. The example checks if the parent route name matches a specific stack, enabling or disabling gestures conditionally. It assumes usage within a React.Component class, and a valid navigation prop is required. The returned object sets the screen title and whether gestures are enabled. This method is marked as 'dangerous' because it bypasses typical encapsulation, so null checks are essential to avoid runtime errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nclass UserCreateScreen extends Component {\n  static navigationOptions = ({ navigation }) => {\n    const parent = navigation.dangerouslyGetParent();\n    const gesturesEnabled =\n      parent &&\n      parent.state &&\n      parent.state.routeName === 'StackWithEnabledGestures';\n\n    return {\n      title: 'New User',\n      gesturesEnabled,\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Params in Header Title\nDESCRIPTION: Shows how to use navigation parameters to dynamically set the header title using a function-based navigationOptions configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      title: navigation.getParam('otherParam', 'A Nested Details Screen'),\n    };\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Header Component Usage\nDESCRIPTION: Example showing how to use the Header component in a simple React component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Header } from '@react-navigation/elements';\n\nfunction MyHeader() {\n  return <Header title=\"My app\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Route Object Structure in React Navigation\nDESCRIPTION: This example shows the structure of a route object in React Navigation. It includes a unique key, a name to designate the route type, and optional params object for passing data between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/glossary-of-terms.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  name: 'Profile',\n  params: { id: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking navigation Prop in Stack Navigator with TypeScript\nDESCRIPTION: Imports `NavigationStackProp` from `react-navigation-stack` and uses it to type the `navigation` prop within a React class component. The generic type argument `{ userId: string }` specifies the expected shape of the navigation parameters, providing type safety for accessing params and navigation methods specific to a Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationStackProp } from 'react-navigation-stack';\n\ntype Props = {\n  navigation: NavigationStackProp<{ userId: string }>;\n};\n\nclass ProfileScreen extends React.Component<Props> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up App Navigator with Authentication\nDESCRIPTION: Creates the main app navigator that includes the authentication navigator as the initial screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { AuthNavigator } from './auth.navigator';\nimport { AppRoute } from './app-routes';\n\nconst Stack = createStackNavigator();\n\nexport const AppNavigator = (): React.ReactElement => (\n  <Stack.Navigator headerMode='none'>\n    <Stack.Screen name={AppRoute.AUTH} component={AuthNavigator}/>\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Custom Navigator in React Navigation\nDESCRIPTION: This code snippet demonstrates how to create a basic custom navigator component in React Navigation. It uses the router's API to determine the active component to render based on the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNavigator extends React.Component {\n  static router = MyRouter;\n  render() {\n    const { state, dispatch, addListener } = this.props.navigation;\n    const { routes, index } = state;\n\n    // Figure out what to render based on the navigation state and the router:\n    const Component = MyRouter.getComponentForState(state);\n\n    // The state of the active child screen can be found at routes[index]\n    let childNavigation = { dispatch, addListener, state: routes[index] };\n    // If we want, we can also tinker with the dispatch function here, to limit\n    // or augment our children's actions\n    // addListener is needed to support children Stack and Drawer navigators\n\n    // Assuming our children want the convenience of calling .navigate() and so on,\n    // we should call addNavigationHelpers to augment our navigation prop:\n    childNavigation = addNavigationHelpers(childNavigation);\n\n    return <Component navigation={childNavigation} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clean Reinstalling Dependencies with NPM\nDESCRIPTION: Performs a clean reinstall of project dependencies using npm. It removes the `node_modules` directory and the `package-lock.json` file before running `npm install`. This can resolve issues caused by corrupted installations or lock file inconsistencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm package-lock.json\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Bottom Tabs Package\nDESCRIPTION: Installs the `@react-navigation/bottom-tabs` package using npm. This package is required to use the Bottom Tabs Navigator in a React Navigation project. It's assumed that `@react-navigation/native` and its dependencies are already installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/bottom-tabs@^5.x\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Drawer Content in React Native with UI Kitten\nDESCRIPTION: This snippet shows how to create a custom drawer content component using UI Kitten's Drawer and DrawerItem components. It handles item selection and navigation, and uses SafeAreaLayout for proper layout on devices with notches.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Drawer, DrawerItem, DrawerElement DrawerItemElement } from '@ui-kitten/components';\nimport { SafeAreaLayout, SaveAreaInset } from '../../components/safe-area-layout.component';\n\nexport const HomeDrawer = (props): DrawerElement => {\n\n  const onItemSelect = (index: IndexPath): void => {\n    const selectedTabRoute: string = props.state.routeNames[index.row];\n    props.navigation.navigate(selectedTabRoute);\n    props.navigation.closeDrawer();\n  };\n\n  const createDrawerItemForRoute = (route, index: number): DrawerItemElement => {\n    const { options } = props.descriptors[route.key];\n    return (\n      <DrawerItem\n        key={index}\n        title={route.name}\n        accessoryLeft={options.drawerIcon}\n      />\n    );\n  };\n\n  return (\n    <SafeAreaLayout insets={SaveAreaInset.TOP}>\n      <Drawer\n        data={props.state.routes.map(createNavigationItemForRoute)}\n        onSelect={onMenuItemSelect}\n      />\n    </SafeAreaLayout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Restructuring Navigators to Lock Drawer (JavaScript)\nDESCRIPTION: Presents the recommended alternative structure for locking the drawer. A new parent `HomeStack` contains both the `DrawerNavigator` (as the `Drawer` screen) and the `DetailsScreen` as direct children. Screens where the drawer should be available are defined within `FeedStack` inside `DrawerNavigator`. Screens like `Details` where the drawer should be locked are placed directly in `HomeStack`. This controls drawer availability through navigator structure rather than dynamic options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route where you want the drawer to remain available */\n  /* keep in mind that it will conflict with the swipe back gesture on ios */\n});\n\nconst DrawerNavigator = createDrawerNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst HomeStack = createStackNavigator({\n  Drawer: DrawerNavigator,\n  Details: DetailsScreen,\n  /* add routes here where you want the drawer to be locked */\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: HomeStack,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Root of a Nested Navigator in React Navigation (JS)\nDESCRIPTION: Demonstrates a basic navigation call `navigation.navigate('Root')` from a screen (like `Feed`) to another screen (`Root`) which contains a nested navigator. By default, this displays the initial route defined within the nested navigator ('Home' in the example structure).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/nesting-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate('Root');\n```\n\n----------------------------------------\n\nTITLE: Controlling Drawer Navigation in React Navigation\nDESCRIPTION: This snippet shows how to programmatically control the drawer navigation using navigation props and DrawerActions. It includes methods to open, close, and toggle the drawer, as well as how to check if the drawer is open.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.openDrawer();\nthis.props.navigation.closeDrawer();\n\nthis.props.navigation.toggleDrawer();\n\nthis.props.navigation.dispatch(DrawerActions.openDrawer());\nthis.props.navigation.dispatch(DrawerActions.closeDrawer());\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n\nconst parent = this.props.navigation.dangerouslyGetParent();\nconst isDrawerOpen = parent && parent.state && parent.state.isDrawerOpen;\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView to Fix Content Hidden by Notches\nDESCRIPTION: This example shows how to implement SafeAreaView from react-native-safe-area-context to ensure content is properly inset and not hidden behind device notches or system UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/handling-safe-area.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context';\n\nfunction Demo() {\n  return (\n    <SafeAreaView\n      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </SafeAreaView>\n  );\n}\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>{/*(...) */}</NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Theme-Aware Colors in Static Navigator Configuration (JavaScript)\nDESCRIPTION: This code shows the older, non-theme-aware method for specifying colors in static navigator configurations. Colors defined directly as strings (e.g., `activeTintColor: '#000'`) will not adapt when the application theme changes between light and dark modes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlet Tabs = createBottomTabNavigator(\n  {\n    /* routes */\n  },\n  {\n    tabBarOptions: {\n      activeTintColor: '#000',\n      inactiveTintColor: 'rgba(0,0,0,0.2)',\n    },\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Drawer Navigator Implementation\nDESCRIPTION: Basic implementation of a drawer navigator with two screens\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator>\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Article\" component={Article} />\n    </Drawer.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Screen Focus with didFocus Event Listener (React Navigation, JavaScript)\nDESCRIPTION: This code snippet demonstrates listening for the 'didFocus' event using react-navigation's navigation prop, allowing you to call actions when a screen becomes focused in React Native. It sets up the listener in componentDidMount and cleans it up in componentWillUnmount to avoid memory leaks. Dependencies include react-navigation and react-native. Key parameters are the navigation prop and focusListener. The approach is suitable for cases where actions should only occur on focus, such as data fetching, but does not handle unfocus events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/function-after-focusing-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\\nimport { View } from 'react-native';\\nimport { withNavigation } from 'react-navigation';\\n\\nclass TabScreen extends Component {\\n  componentDidMount() {\\n    const { navigation } = this.props;\\n    this.focusListener = navigation.addListener('didFocus', () => {\\n      // The screen is focused\\n      // Call any action\\n    });\\n  }\\n\\n  componentWillUnmount() {\\n    // Remove the event listener\\n    this.focusListener.remove();\\n  }\\n\\n  render() {\\n    return <View />;\\n  }\\n}\\n\\nexport default withNavigation(TabScreen);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Nesting Navigators via Router Static (JavaScript)\nDESCRIPTION: Presents an alternative correct approach where a screen component (`AuthenticationScreen`) renders a sub-navigator (`AuthenticationNavigator`). This pattern works because the screen component explicitly exposes the sub-navigator's `router` static property and correctly passes the `navigation` prop down, thereby integrating the sub-navigator into the parent's navigation context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/common-mistakes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    /* In the root component we are rendering the app navigator */\n    return <AppContainer />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nclass AuthenticationScreen extends React.Component {\n  static router = AuthenticationNavigator.router;\n\n  render() {\n    return <AuthenticationNavigator navigation={this.props.navigation} />;\n  }\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthenticationScreen, // This screen renders a navigator!\n  Home: HomeScreen,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Label Rendering in TabBar via renderLabel (JavaScript)\nDESCRIPTION: The renderLabel prop lets you supply a function that returns a custom React Element as the label for each tab, allowing for style adjustments such as color or margin. Requires a custom Text component and the route object with title, plus color and focused status. Outputs a styled element with the route title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n<TabBar\n  renderLabel={({ route, focused, color }) => (\n    <Text style={{ color, margin: 8 }}>\n      {route.title}\n    </Text>\n  )}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling State Persistence for Development in JavaScript\nDESCRIPTION: This code shows how to conditionally apply state persistence functions based on the development environment. The `getPersistenceFunctions` helper returns an object with `persistNavigationState` and `loadNavigationState` only if the `__DEV__` global variable is true, otherwise it returns `undefined`. This allows enabling persistence conveniently during development without affecting production builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/state-persistence.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst AppNavigator = createStackNavigator({...});\nfunction getPersistenceFunctions() {\n  return __DEV__ ? {\n    persistNavigationState: ...,\n    loadNavigationState: ...,\n  } : undefined;\n}\nconst App = () => <AppNavigator {...getPersistenceFunctions()} />;\n```\n\n----------------------------------------\n\nTITLE: Using organized types with useRoute hook in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the organized types with the useRoute hook in a React Navigation component for type-safe access to route information.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HomeTabScreenProps } from './navigation/types';\n\nfunction PopularScreen() {\n  const route = useRoute<HomeTabScreenProps<'Popular'>['route']>();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Screens in React Navigation 7.0\nDESCRIPTION: Shows how to preload a screen using the new preload method on the navigation object. This feature can improve perceived performance by rendering off-screen and executing side-effects like data fetching.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-06-27-react-navigation-7.0-rc.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.preload('Details', { id: 42 });\n```\n\n----------------------------------------\n\nTITLE: Unlink react-native-gesture-handler\nDESCRIPTION: This command unlinks the `react-native-gesture-handler` library. It's used in bare React Native projects when the library was manually linked before autolinking was enabled.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Screen Options via getCurrentOptions (React Navigation, JavaScript)\nDESCRIPTION: Retrieves the options configured for the currently focused screen by calling getCurrentOptions on the navigation ref. Can be used for accessing dynamic screen options (like custom headers) outside the screen component. Returns undefined if there are no navigators rendered.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-container.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst options = navigationRef.getCurrentOptions();\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer in React Navigation\nDESCRIPTION: This code demonstrates how to toggle the drawer state (open/close) using a single method call. This is useful when you want to switch the drawer's visibility without explicitly checking its current state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links with xcrun on iOS\nDESCRIPTION: Command to test deep links using xcrun with the iOS simulator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl openurl booted \"example://chat/jane\"\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/elements\nDESCRIPTION: Command to install the @react-navigation/elements package for UI components related to navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/elements@^6.x\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting a Custom Navigator with createNavigatorFactory (JavaScript)\nDESCRIPTION: This code demonstrates how to create and export a custom navigator factory by wrapping a navigator component using React Navigation's createNavigatorFactory function. This approach ensures that the custom navigator behaves consistently with navigation expectations and can be imported as a reusable module. Dependencies: @react-navigation/native, a defined navigator component. The exported function (createMyNavigator) can then be used to generate Navigator/Screen pairs elsewhere in the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\\n  useNavigationBuilder,\\n  createNavigatorFactory,\\n} from '@react-navigation/native';\\n\\n// ...\\n\\nexport const createMyNavigator = createNavigatorFactory(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Using Label Component in React Navigation\nDESCRIPTION: Demonstrates the new Label component from @react-navigation/elements that can be used to render text labels, such as the labels in tab bar buttons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\n<Label>Home</Label>\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/compat and Dependencies with npm (bash)\nDESCRIPTION: This snippet illustrates how to install the @react-navigation/compat package along with required peer dependencies for React Navigation 5 using npm. It ensures the correct versions of @react-navigation/native, @react-navigation/compat, and @react-navigation/stack are added to the project's package.json. No specific input or output is expected except the successful installation of these modules, which are prerequisites for using the compatibility layer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/compatibility.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native@^5.x @react-navigation/compat@^5.x @react-navigation/stack@^5.x\n```\n\n----------------------------------------\n\nTITLE: Animating Stack Navigator Header with Opacity Transition\nDESCRIPTION: Example showing how to create a cross-fade animation for a custom header in Stack Navigator by interpolating progress values.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst progress = Animated.add(scene.progress.current, scene.progress.next || 0);\n\nconst opacity = progress.interpolate({\n  inputRange: [0, 1, 2],\n  outputRange: [0, 1, 0],\n});\n\nreturn (\n  <Animated.View style={{ opacity }}>{/* Header content */}</Animated.View>\n)\n```\n\n----------------------------------------\n\nTITLE: Koa Server Implementation with ServerContainer\nDESCRIPTION: Basic example showing how to use ServerContainer in a Koa server. It demonstrates how to extract the path and search parameters from the Koa context and pass them to the ServerContainer component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-container.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx) => {\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={{ pathname: ctx.path, search: ctx.search }}>\n      <App />\n    </ServerContainer>\n  );\n\n  ctx.body = html;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Navigation Example\nDESCRIPTION: Example showing traditional HTML navigation using anchor tags.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"details.html\">Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Providing a Custom 'href' for Web Accessibility (JavaScript/React)\nDESCRIPTION: This example shows how to provide a custom `href` attribute for the anchor tag generated on the Web, particularly when using the `action` prop without `screen` and `params`. Explicitly setting the `href` ensures the link remains accessible (e.g., supports right-click -> open in new tab) even if `useLinkProps` cannot automatically determine it from `screen`/`params`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-props.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction Home() {\n  return (\n    <LinkButton\n      action={StackActions.replace('Profile', { id: 'jane' })}\n      href=\"/users/jane\"\n    >\n      Getting Started\n    </LinkButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Action: Resetting the Navigator with reset in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates clearing the navigation stack and replacing it with one or more specific actions using 'reset'. This can be used for scenarios like logging out or switching app flows. Inputs: array of navigation actions, and the index of the active route; output: replaced stack state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.reset([NavigationActions.navigate({ routeName: 'Profile' })], 0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Focus State Hook with NavigationContext\nDESCRIPTION: A custom React hook implementation that uses NavigationContext to track navigation focus state changes. It subscribes to various navigation events (action, willFocus, didFocus, willBlur, didBlur) and manages the focus state accordingly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-context.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useContext, useEffect } from 'react';\nimport { NavigationContext } from '@react-navigation/core';\n\nexport function useFocusState() {\n  const navigation = useContext(NavigationContext);\n  const isFocused = navigation.isFocused();\n  const [focusState, setFocusState] = useState(getInitialFocusState(isFocused));\n  function handleEvt(e) {\n    const newState = focusStateOfEvent(e.type);\n    newState && setFocusState(newState);\n  }\n  useEffect(() => {\n    const subsA = navigation.addListener('action', handleEvt);\n    const subsWF = navigation.addListener('willFocus', handleEvt);\n    const subsDF = navigation.addListener('didFocus', handleEvt);\n    const subsWB = navigation.addListener('willBlur', handleEvt);\n    const subsDB = navigation.addListener('didBlur', handleEvt);\n    return () => {\n      subsA.remove();\n      subsWF.remove();\n      subsDF.remove();\n      subsWB.remove();\n      subsDB.remove();\n    };\n  });\n  return focusState;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Params in Header Title\nDESCRIPTION: Shows how to use navigation parameters to dynamically set the header title using a function-based navigationOptions configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const { params } = navigation.state;\n\n    return {\n      title: params ? params.otherParam : 'A Nested Details Screen',\n    };\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Material Bottom Tab Navigator in React Navigation\nDESCRIPTION: Basic example of creating a Material Bottom Tab Navigator using createMaterialBottomTabNavigator from @react-navigation/material-bottom-tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Area Context in Expo Managed Workflow\nDESCRIPTION: Uses the `expo install` command to install the version of `react-native-safe-area-context` compatible with the project's Expo SDK version. This helps resolve version conflicts and errors like 'Tried to register two views with the same name RNCSafeAreaProvider' in Expo managed projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Navigating to First Screen with StackActions.popToTop\nDESCRIPTION: Demonstrates using StackActions.popToTop to return to the first screen in the stack, dismissing all other screens. This is equivalent to popping multiple screens based on the current index.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Stack Action: Navigating with push in React Navigation (JavaScript)\nDESCRIPTION: Call the 'push' method on navigation to add a new route to the stack, with routeName, optional params, and an action for nested navigators. Prerequisite is a configured stack navigator. Inputs are the route name, params, and actions; output is a navigation event that pushes a new screen onto the stack. Will not deduplicate routes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.push(routeName, params, action);\n```\n\n----------------------------------------\n\nTITLE: Disabling Deep Linking in React Navigation\nDESCRIPTION: This JavaScript snippet shows how to disable deep linking handling in React Navigation by passing the enableURLHandling prop set to false to the app container.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = createAppContainer(createStackNavigator({...}));\n\nconst MainApp = () => <SimpleApp enableURLHandling={false} />;\n```\n\n----------------------------------------\n\nTITLE: Adding URL Handling in AppDelegate for iOS (Objective-C)\nDESCRIPTION: Enhances the native iOS code to intercept and forward URLs to React Native via RCTLinkingManager. Includes an import statement and a method implementation to handle openURL events. Required for deep link URIs to trigger navigation in the app. Place the code in SimpleApp/ios/SimpleApp/AppDelegate.m.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_8\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this above the `@end`:\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url\n            options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:app openURL:url options:options];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Stack with Hidden UI Elements\nDESCRIPTION: Example of creating bottom tab navigator and stack navigator with hidden navigation and tab bars.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/handling-iphonex.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Tabs = createBottomTabNavigator({\n  ...\n}, {\n  tabBarComponent: () => null,\n});\n\nexport default createStackNavigator({\n  ...\n}, {\n  headerMode: 'none',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Stack Actions to RootNavigation - React Navigation JavaScript\nDESCRIPTION: Extends the RootNavigation utility with custom navigation actions such as 'push', leveraging StackActions from @react-navigation/native. This function dispatches a push action to the root navigator via the shared navigationRef. Requires a stack navigator to be present in the navigation hierarchy.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating-without-navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions } from '@react-navigation/native';\n\nexport function push(...args) {\n  navigationRef.current?.dispatch(StackActions.push(...args));\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Styling a View Wrapping AppContainer in React Native (JavaScript)\nDESCRIPTION: Demonstrates the necessity of applying `flex: 1` style to a parent `View` component that wraps the `AppContainer` from React Navigation. Without `flex: 1`, the container might not expand to fill the available space, potentially resulting in the navigator content not being visible or appearing as a blank screen. This example shows a basic Tab Navigator setup within a correctly styled wrapping View.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/common-mistakes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createAppContainer } from 'react-navigation';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: HomeScreen,\n  Settings: SettingsScreen,\n});\n\nconst AppContainer = createAppContainer(TabNavigator);\n\n// without the style you will see a blank screen\nexport default () => (\n  <View style={{ flex: 1 }}>\n    <AppContainer />\n  </View>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators: Stack Containing Tabs (React Navigation, JS)\nDESCRIPTION: Sets up a navigation structure where a `createStackNavigator` (`AppNavigator`) has a `createBottomTabNavigator` (`TabNavigator`) as one of its screens (`Home`). This creates a common pattern where tabs are nested within a primary stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedScreen,\n  Profile: ProfileScreen,\n});\n\nconst AppNavigator = createStackNavigator({\n  Home: TabNavigator,\n  Settings: SettingsScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Server Rendering with React Navigation and Koa\nDESCRIPTION: Example of server rendering a React Native app with React Navigation using Koa. It shows how to use ServerContainer to render the correct screens based on the request URL and set page metadata.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-rendering.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx) => {\n  const location = new URL(ctx.url, 'https://example.org/');\n\n  const { element, getStyleElement } = AppRegistry.getApplication('App');\n\n  const ref = React.createRef<ServerContainerRef>();\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer\n      ref={ref}\n      location={location}\n    >\n      {element}\n    </ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const options = ref.current?.getCurrentOptions();\n\n  const document = `\n    <!DOCTYPE html>\n    <html style=\"height: 100%\">\n    <meta charset=\"utf-8\">\n    <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\"\n    >\n    ${css}\n    <title>${options.title}</title>\n    <body style=\"min-height: 100%\">\n    <div id=\"root\" style=\"display: flex; min-height: 100vh\">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n```\n\n----------------------------------------\n\nTITLE: Annotating Function Component Props in TSX\nDESCRIPTION: Illustrates how to apply the previously defined `Props` type to annotate the props of a function component (`ProfileScreen`). Destructuring `route` and `navigation` from props provides typed access within the component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ProfileScreen({ route, navigation }: Props) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook for Theme-Aware Components in React Navigation\nDESCRIPTION: Demonstrates how to use the useTheme hook to create components that adapt to the current theme in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from 'react-navigation';\n\n// Black background and white text in light theme, inverted on dark theme\nfunction MyButton() {\n  let theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}\n    >\n      <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>\n        Button!\n      </Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Header Mode in React Navigation v6 (JavaScript)\nDESCRIPTION: Illustrates setting the `headerMode` option (e.g., `'screen'`) globally for a Stack Navigator via `screenOptions`. This option, controlling header animation behavior, was previously a prop on the navigator itself.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Navigator screenOptions={{ headerMode: 'screen' }}>\n  <Stack.Screen name=\"Home\" component={Home} />\n  <Stack.Screen name=\"Profile\" component={Profile} />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Old React Navigation Config Example (JavaScript)\nDESCRIPTION: This snippet shows the older React Navigation configuration format, where a simple key-value pair is used, regardless of navigator nesting. It's more permissive but will be removed in future versions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  Home: 'home',\n  Feed: 'feed',\n  Profile: 'profile',\n  Settings: 'settings',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators for Drawer Locking (JavaScript)\nDESCRIPTION: Sets up an initial React Navigation configuration with a Stack Navigator (`FeedStack`) nested within a Drawer Navigator (`DrawerNavigator`). This `DrawerNavigator` is then used within a Switch Navigator (`AppNavigator`). This structure serves as the base example for demonstrating how to lock the drawer on specific screens within the nested stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nconst DrawerNavigator = createDrawerNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: DrawerNavigator,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Redux State to Navigation Params in StaticCounter Screen in JavaScript\nDESCRIPTION: This code modifies the StaticCounter screen so that whenever the backing Redux store's count value updates, the navigation param 'count' is also updated via setParams. React's componentDidMount and componentDidUpdate life cycle methods trigger updateCount, which synchronizes the value in navigation state. This ensures that the navigation title and content remain in sync with Redux even after the initial navigation. Limitations: excessive setParams calls on every update can impact navigation performance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/redux-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass StaticCounter extends React.Component {\n  static navigationOptions = ({ navigation }) => ({\n    title: navigation.getParam('count'),\n  });\n\n  componentDidMount() {\n    this.updateCount();\n  }\n\n  componentDidUpdate() {\n    this.updateCount();\n  }\n\n  updateCount() {\n    this.props.navigation.setParams({ count: this.props.count });\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.paragraph}>\n          {this.props.navigation.getParam('count')}\n        </Text>\n      </View>\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Router in React Navigation\nDESCRIPTION: Shows how to create a basic navigator component by adding a static router property using StackRouter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNavigator extends React.Component {\n  static router = StackRouter(routes, config);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing headerLeft in Dynamic Configuration\nDESCRIPTION: Shows how to provide a custom component for the left side of the header using the `headerLeft` option within a `Stack.Screen` component in a dynamic Native Stack navigator configuration. It assigns a function returning a custom component (`MyButton`) which receives props like `tintColor` and `pressColor` and includes an `onPress` handler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{\n    headerLeft: (props) => (\n      <MyButton\n        {...props}\n        onPress={() => {\n          // Do something\n        }}\n      />\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with ThemeContext.Consumer in React Navigation (JavaScript)\nDESCRIPTION: This code demonstrates accessing the current theme within a component using the `ThemeContext.Consumer` render prop pattern provided by React Navigation. This is an alternative to the `useTheme` hook, suitable for components where hooks might not be usable or preferred.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ThemeContext } from 'react-navigation';\n\nfunction MyButton() {\n  return (\n    <ThemeContext.Consumer>\n      {(theme) => (\n        <TouchableOpacity\n          style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}\n        >\n          <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>\n            Button!\n          </Text>\n        </TouchableOpacity>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying MainActivity.java for Gesture Handler (Diff/Java)\nDESCRIPTION: Shows the necessary modifications to the `MainActivity.java` file for Android projects to finalize the installation of `react-native-gesture-handler`. It involves importing required classes and overriding `createReactActivityDelegate` to return a `ReactActivityDelegate` that uses `RNGestureHandlerEnabledRootView`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\npackage com.reactnavigation.example;\n\nimport com.facebook.react.ReactActivity;\n+ import com.facebook.react.ReactActivityDelegate;\n+ import com.facebook.react.ReactRootView;\n+ import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n\n+  @Override\n+  protected ReactActivityDelegate createReactActivityDelegate() {\n+    return new ReactActivityDelegate(this, getMainComponentName()) {\n+      @Override\n+      protected ReactRootView createRootView() {\n+        return new RNGestureHandlerEnabledRootView(MainActivity.this);\n+      }\n+    };\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom isFirstRouteInParent Hook Using useNavigationState (JavaScript)\nDESCRIPTION: Implements a custom React hook in React Navigation 5.x to determine if the current route is the first in its parent navigator. Uses useRoute and useNavigationState from react-navigation. Returns a boolean. Required: @react-navigation/native, correct navigator setup. Inputs: none, hook context. Output: Boolean indicating if this route is first. Limitation: precise only for stack-like navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction useIsFirstRouteInParent() {\\n  const route = useRoute();\\n  const isFirstRouteInParent = useNavigationState(\\n    (state) => state.routes[0].key === route.key\\n  );\\n\\n  return isFirstRouteInParent;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gesture Handler for React Native\nDESCRIPTION: Creation of platform-specific files to conditionally import react-native-gesture-handler and avoid unnecessary imports on web.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-layout.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gesture-handler.native.js\n// Only import react-native-gesture-handler on native platforms\nimport 'react-native-gesture-handler';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// gesture-handler.js\n// Don't import react-native-gesture-handler on web\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Add to entry file (e.g., index.js or App.js)\nimport './gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Using dangerouslyGetParent in React Navigation\nDESCRIPTION: Shows how to use the dangerouslyGetParent method to access the parent navigator's state and conditionally set navigation options based on the parent navigator context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserCreateScreen extends Component {\n  static navigationOptions = ({ navigation }) => {\n    const parent = navigation.dangerouslyGetParent();\n    const gesturesEnabled =\n      parent &&\n      parent.state &&\n      parent.state.routeName === 'StackWithEnabledGestures';\n\n    return {\n      title: 'New User',\n      gesturesEnabled,\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Actions in React Navigation\nDESCRIPTION: This example shows how to override the default getStateForAction method of a StackNavigator to implement custom navigation behavior. It adds a custom 'PushTwoProfiles' action that adds two Profile routes to the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyApp = StackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyApp.router.getStateForAction;\n\nMyApp.router.getStateForAction = (action, state) => {\n  if (state && action.type === 'PushTwoProfiles') {\n    const routes = [\n      ...state.routes,\n      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },\n      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },\n    ];\n    return {\n      ...state,\n      routes,\n      index: routes.length - 1,\n    };\n  }\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Structure of a Navigation State Object in React Navigation\nDESCRIPTION: This snippet shows the typical structure of a navigation state object. It includes a root key, an index indicating the active route, and an array of route objects that represent the screens in the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/glossary-of-terms.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'StackRouterRoot',\n  index: 1,\n  routes: [\n    { key: 'A', name: 'Home' },\n    { key: 'B', name: 'Profile' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Screen Stack Navigator Setup\nDESCRIPTION: Shows how to configure a stack navigator with multiple screens and specify the initial route using navigation options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/hello-react-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n      </View>\n    );\n  }\n}\n\nconst AppNavigator = createStackNavigator(\n  {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Animated Drawer Content Implementation\nDESCRIPTION: Example showing how to create animated drawer content using the drawerOpenProgress prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomDrawerContentComponent = (props) => {\n  const translateX = props.drawerOpenProgress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [-100, 0],\n  });\n\n  return (\n    <Animated.View style={{ transform: [{ translateX }] }}>\n      {/* ... drawer contents */}\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Header Height in React Navigation\nDESCRIPTION: This snippet shows how to specify an explicit height within the `headerStyle` option when using a custom header. This helps prevent layout glitches caused by asynchronous measurement of the custom header's height.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-drawer-layout Package\nDESCRIPTION: Command to install the standalone react-native-drawer-layout package, which contains the drawer implementation used in @react-navigation/drawer. This allows using the drawer functionality without needing the full React Navigation setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-drawer-layout\n```\n\n----------------------------------------\n\nTITLE: Overriding getStateForAction to Handle Custom Navigation Actions in React Navigation (JavaScript)\nDESCRIPTION: This snippet overrides the 'getStateForAction' method of a navigator's router to handle a custom action type ('PushTwoProfiles'). When this action is dispatched, two Profile routes are added to the routes array with specific parameters. The default 'getStateForAction' is called for all other cases. Required dependencies include createStackNavigator and that the navigator is constructed as shown.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/routers.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst MyApp = createStackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyApp.router.getStateForAction;\n\nMyApp.router.getStateForAction = (action, state) => {\n  if (state && action.type === 'PushTwoProfiles') {\n    const routes = [\n      ...state.routes,\n      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },\n      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },\n    ];\n    return {\n      ...state,\n      routes,\n      index: routes.length - 1,\n    };\n  }\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Jest Transform Ignore Patterns for React Navigation\nDESCRIPTION: This configuration snippet modifies the `transformIgnorePatterns` setting in the Jest configuration to include React Navigation packages. This is necessary because Jest doesn't natively support ES modules, and React Navigation ships with ES modules. This configuration transforms the code to CommonJS during testing.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"preset\": \"react-native\",\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(@react-native|react-native|@react-navigation)/)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Screen Conditional Navigation in React Navigation\nDESCRIPTION: Demonstrates how to conditionally render multiple screens for both authenticated and non-authenticated states using React Fragment syntax.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstate.userToken == null ? (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    <Stack.Screen name=\"ResetPassword\" component={ResetPassword} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Static Navigation\nDESCRIPTION: Demonstrates how to configure TypeScript types for static navigation using the StaticParamList interface.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends StaticParamList<typeof RootStack> {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-pager-view for React Native\nDESCRIPTION: Command to install react-native-pager-view in a bare React Native project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-pager-view\n```\n\n----------------------------------------\n\nTITLE: Using isFocused Method in React Navigation\nDESCRIPTION: This code snippet demonstrates how to check if a screen is currently focused using the navigation.isFocused() method. This method returns a boolean indicating the focus state but doesn't trigger re-renders, making it primarily useful in callbacks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst isFocused = navigation.isFocused();\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeAreaView in Screen Component\nDESCRIPTION: Example of wrapping screen content in SafeAreaView to handle safe areas properly on devices with notches.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/handling-iphonex.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-navigation';\n\nclass MyHomeScreen extends Component {\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.paragraph}>This is top text.</Text>\n        <Text style={styles.paragraph}>This is bottom text.</Text>\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating with Link Component in React Navigation (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Link component from @react-navigation/native to navigate to a 'Profile' screen, passing an id parameter. The Link component acts as an anchor tag on web and a Text component on native platforms, integrating platform-specific behaviors out-of-the-box. Dependencies: @react-navigation/native must be installed; the Profile screen must be registered in your navigation configuration. The screen and params props specify the navigation target and parameters, and the child defines the link's visible content. This approach preserves browser behaviors (open in new tab, ctrl/cmd+click, etc.) and provides a unified cross-platform navigation API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/link.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@react-navigation/native';\\n\\n// ...\\n\\nfunction Home() {\\n  return (\\n    <Link screen=\\\"Profile\\\" params={{ id: 'jane' }}>\\n      Go to Jane's profile\\n    </Link>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing the Expo Metro Bundler Cache - Bash\nDESCRIPTION: This command clears the Metro bundler cache in Expo projects, which helps resolve module resolution or caching issues that can occur after updating dependencies. It requires the Expo CLI to be installed globally or invoked through npx. The main parameter '-c' forces the cache clear. No output is expected unless errors occur. This operation should be run from the root of the Expo project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo start -c\n\n```\n\n----------------------------------------\n\nTITLE: Initializing StackNavigator in React Navigation\nDESCRIPTION: Basic syntax for creating a StackNavigator with route configurations and navigator options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nStackNavigator(RouteConfigs, StackNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Dispatching DrawerActions in React Navigation\nDESCRIPTION: This snippet demonstrates how to import DrawerActions from react-navigation-drawer and dispatch a toggleDrawer action using the navigation prop. It's typically used in a React component to control the drawer state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from 'react-navigation-drawer';\n\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Toggling the Drawer Programmatically\nDESCRIPTION: This snippet demonstrates how to programmatically toggle the drawer's state (open if closed, close if open) using the `toggleDrawer` helper method available on the `navigation` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nnavigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tab Bar with UI Kitten Components\nDESCRIPTION: Implements a custom tab bar using UI Kitten components for the TODO navigator, handling tab selection and navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { TabBar, Tab, Divider, TabElement } from '@ui-kitten/components';\nimport { SafeAreaLayout, SaveAreaInset, SafeAreaLayoutElement } from '../../components/safe-area-layout.component';\nimport { Toolbar } from '../../components/toolbar.component';\n\nexport const TodoTabBar = (props): SafeAreaLayoutElement => {\n\n  const onTabSelect = (index: number): void => {\n    const selectedTabRoute: string = props.state.routeNames[index];\n    props.navigation.navigate(selectedTabRoute);\n  };\n\n  const createNavigationTabForRoute = (route): TabElement => {\n    const { options } = props.descriptors[route.key];\n    return (\n      <Tab\n        key={route.key}\n        title={options.title}\n        icon={options.tabBarIcon}\n      />\n    );\n  };\n\n  return (\n    <SafeAreaLayout insets={SaveAreaInset.TOP}>\n      <Toolbar title='React Navigation Ex üê±'/>\n      <TabBar selectedIndex={props.state.index} onSelect={onTabSelect}>\n        {props.state.routes.map(createNavigationTabForRoute)}\n      </TabBar>\n      <Divider/>\n    </SafeAreaLayout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Gesture Events\nDESCRIPTION: Example of subscribing to gesture events using navigation.addListener\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureCancel', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Using Themed Components in React Navigation\nDESCRIPTION: Demonstrates how to use themed components provided by React Navigation, such as Themed.Text and Themed.StatusBar.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Themed } from 'react-navigation';\n\nfunction MyButton() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <TouchableOpacity style={{ backgroundColor: colors.bodyContent }}>\n        <Themed.Text>Button!</Themed.Text>\n      </TouchableOpacity>\n      <Themed.StatusBar />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent Navigator Options (JavaScript)\nDESCRIPTION: Illustrates setting navigator-specific options using the `navigationOptions` property within a navigator's configuration (e.g., `createStackNavigator`). This is useful for configuring how a navigator appears within a parent navigator, such as setting a `tabBarLabel` for a stack nested within a bottom tab navigator. Also shows the use of `defaultNavigationOptions` for internal header styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    Feed: ExampleScreen,\n    Profile: ExampleScreen,\n  },\n  {\n    defaultNavigationOptions: {\n      headerTintColor: '#fff',\n      headerStyle: {\n        backgroundColor: '#000',\n      },\n    },\n    navigationOptions: {\n      tabBarLabel: 'Home!',\n    },\n  }\n);\n\nconst Tabs = createBottomTabNavigator({ Home });\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Navigation Options in Stack Navigator\nDESCRIPTION: Shows the updated way to configure default navigation options in stack navigator using defaultNavigationOptions instead of the previous navigationOptions property.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-17-react-navigation-3.0.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    Feed: ExampleScreen,\n    Profile: ExampleScreen,\n  },\n  {\n    defaultNavigationOptions: {\n      headerTintColor: '#fff',\n      headerStyle: {\n        backgroundColor: '#000',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Parsing in React Navigation\nDESCRIPTION: Adding a custom parsing function to convert the date parameter from a string to a number using the Number constructor.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Chat: {\n      screen: ChatScreen,\n      linking: {\n        path: 'chat/:date',\n        parse: {\n          date: Number,\n        },\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: {\n      path: 'chat/:date',\n      parse: {\n        date: Number,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Static contextType for Theme-Aware Class Components in React Navigation\nDESCRIPTION: Demonstrates how to use static contextType to create class components that adapt to the current theme in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ThemeContext } from 'react-navigation';\n\nclass MyButton extends React.Component {\n  static contextType = ThemeContext;\n\n  render() {\n    return (\n      <TouchableOpacity\n        style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}\n      >\n        <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>\n          Button!\n        </Text>\n      </TouchableOpacity>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Theme in React Native Paper (JSX)\nDESCRIPTION: This snippet demonstrates applying the `DarkTheme` from React Native Paper. It imports `PaperProvider` and `PaperDarkTheme` from `react-native-paper` and wraps the application content (including the `NavigationContainer`) with `PaperProvider`, passing the theme to its `theme` prop. It also shows setting the React Navigation theme separately.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { NavigationContainer, DarkTheme } from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  Provider as PaperProvider,\n} from 'react-native-paper';\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={PaperDarkTheme}>\n      <NavigationContainer theme={DarkTheme}>\n        {/* content */}\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Localization Setup with i18n-js\nDESCRIPTION: Basic setup for localization using expo-localization and i18n-js libraries. Defines translation objects for English and French, sets fallback behavior, and configures the translation system.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/localization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Localization from 'expo-localization'; // or whatever library you want\nimport i18n from 'i18n-js'; // or whatever library you want\n\nconst en = {\n  foo: 'Foo',\n  bar: 'Bar {{someValue}}',\n};\n\nconst fr = {\n  foo: 'Fou',\n  bar: 'B√°r {{someValue}}',\n};\n\ni18n.fallbacks = true;\ni18n.translations = { fr, en };\n\n// This will log 'en' for me, as I'm an English speaker\nconsole.log(Localization.locale);\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links on Android with adb (Bash)\nDESCRIPTION: Runs adb shell commands to start a VIEW intent with a custom URI, simulating deep linking in the Android environment. Replace the package name and URI as needed. Requires Android development environment, adb, and a running emulator or connected device.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d \"[ put your URI prefix in here ]\" host.exp.exponent\n\n# for example\n\nadb shell am start -W -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/chat/jane\" host.exp.exponent\n```\n\n----------------------------------------\n\nTITLE: Using HeaderHeightContext in React Navigation\nDESCRIPTION: Example of accessing header height using HeaderHeightContext.Consumer from @react-navigation/stack\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeaderHeightContext } from '@react-navigation/stack';\n\n// ...\n\n<HeaderHeightContext.Consumer>\n  {headerHeight => (\n    /* render something */\n  )}\n</HeaderHeightContext.Consumer>\n```\n\n----------------------------------------\n\nTITLE: Installing Jetifier for AndroidX Support (Bash)\nDESCRIPTION: Installs the `jetifier` tool as a development dependency using npm. Jetifier is needed to patch dependencies that haven't migrated to AndroidX, which is required for React Native 0.59 and lower when using libraries that depend on AndroidX.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jetifier\n```\n\n----------------------------------------\n\nTITLE: Configuring AppDelegate for Deep Linking in iOS (React Native)\nDESCRIPTION: This Objective-C snippet shows how to modify the AppDelegate.m file to handle deep linking in iOS for react-native init projects. It imports the necessary header and adds a method to handle incoming URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: objectivec\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this above the `@end`:\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n  return [RCTLinkingManager application:application openURL:url\n                      sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pre-made Header Style Interpolators\nDESCRIPTION: Implementation of built-in header style interpolators for iOS-style animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeaderStyleInterpolators } from 'react-navigation-stack';\n\n// ...\n\nstatic navigationOptions = {\n  title: 'Profile',\n  headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for a Screen with Dynamic Nested Navigator\nDESCRIPTION: This snippet demonstrates how to define TypeScript props (`Props`) for the `FeedScreen` component when it renders a dynamically defined navigator. It uses `NavigatorScreenParams` to wrap the param list (`FeedParamList`) of the nested dynamic navigator and `StaticScreenProps` to type the screen component itself within the static parent navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/combine-static-with-dynamic.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  StaticScreenProps,\n  NavigatorScreenParams,\n} from '@react-navigation/native';\n\ntype FeedParamList = {\n  Latest: undefined;\n  Popular: undefined;\n};\n\n// highlight-next-line\ntype Props = StaticScreenProps<NavigatorScreenParams<FeedParamList>>;\n\n// highlight-next-line\nfunction FeedScreen(_: Props) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Drawer Navigator in React Navigation\nDESCRIPTION: Basic syntax for creating a drawer navigator with route configs and navigator config options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions in React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to dispatch a navigation action using React Navigation's action creators and the dispatch method. It requires the react-navigation library, and specifically imports NavigationActions. The core operation creates a nested navigate action and sends it to the router via this.props.navigation.dispatch. Inputs include the target route (\\'Profile\\'), optional params, and an optional nested navigation action. The expected behavior is a navigation stack change in the app. This method is recommended for advanced use cases when the standard navigate and goBack methods are insufficient.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n  params: {},\n\n  // navigate can have a nested navigate action that will be run inside the child router\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar in Dynamic Navigation Stack\nDESCRIPTION: Implementation of a stack navigator with custom status bar configuration using dynamic navigation. Demonstrates status bar customization with SafeAreaProvider and NavigationContainer setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, StatusBar, StyleSheet } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nfunction Screen1() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#6a51ae',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen2')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n\nfunction Screen2() {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#ecf0f1',\n          paddingTop: insets.top,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n        },\n      ]}\n    >\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button onPress={() => navigation.navigate('Screen1')}>\n        Next screen\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Screen1\" component={Screen1} />\n          <Stack.Screen name=\"Screen2\" component={Screen2} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating AuthContext for React Navigation\nDESCRIPTION: This snippet creates a React context for authentication, which will be used to expose authentication methods to other components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nconst AuthContext = React.createContext();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Routes to Stack Navigator in React Native\nDESCRIPTION: This snippet shows how to add multiple routes to a stack navigator and set an initial route. It includes two screens: HomeScreen and DetailsScreen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/hello-react-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Other code for HomeScreen here...\n\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n      </View>\n    );\n  }\n}\n\nconst RootStack = createStackNavigator(\n  {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\n// Other code for App component here...\n```\n\n----------------------------------------\n\nTITLE: Annotating useNavigationContainerRef Hook (TypeScript)\nDESCRIPTION: This code shows how to annotate a `NavigationContainer` ref created using `useNavigationContainerRef` hook with a type parameter to enable type-checking of navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef = useNavigationContainerRef<RootStackParamList>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Options for Android in React Navigation\nDESCRIPTION: Example of configuring tab bar options for Android using 'tabBarOptions'. This includes setting label style, tab style, and background color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-gesture-handler with npm - Bash\nDESCRIPTION: Installs the react-native-gesture-handler library via npm in a bare React Native project. This package is essential for handling gestures in navigation stacks and should be executed inside the project directory. Requires npm and a Node.js environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Rendering App with React Native Web - JavaScript\nDESCRIPTION: This snippet demonstrates the basic setup for rendering a React Native app server-side using React Native Web and ReactDOMServer. It utilizes AppRegistry and ReactDOMServer to render the app to an HTML string and extract server-rendered styles. Dependencies include 'react-native-web', 'react-dom/server', and the main App module registered with AppRegistry. Inputs are the root App component, and the output is a complete HTML string with embedded styles and content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AppRegistry } from 'react-native-web';\\nimport ReactDOMServer from 'react-dom/server';\\nimport App from './src/App';\\n\\nconst { element, getStyleElement } = AppRegistry.getApplication('App');\\n\\nconst html = ReactDOMServer.renderToString(element);\\nconst css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\\n\\nconst document = `\\n  <!DOCTYPE html>\\n  <html style=\\\"height: 100%\\\">\\n  <meta charset=\\\"utf-8\\\">\\n  <meta httpEquiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n  <meta\\n    name=\\\"viewport\\\"\\n    content=\\\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\\\"\\n  >\\n  ${css}\\n  <body style=\\\"min-height: 100%\\\">\\n  <div id=\\\"root\\\" style=\\\"display: flex; min-height: 100vh\\\">\\n  ${html}\\n  </div>\\n`;\n```\n\n----------------------------------------\n\nTITLE: Using getParam Function in React Navigation\nDESCRIPTION: This example shows how to use the getParam function to safely access a specific param value with a fallback option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst name = this.props.navigation.getParam('name', 'Peter');\n```\n\n----------------------------------------\n\nTITLE: Modifying MainActivity.java for Android Gesture Handler\nDESCRIPTION: Code changes required in MainActivity.java to finalize installation of react-native-gesture-handler for Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.reactnavigation.example;\n\nimport com.facebook.react.ReactActivity;\n+ import com.facebook.react.ReactActivityDelegate;\n+ import com.facebook.react.ReactRootView;\n+ import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n\n+  @Override\n+  protected ReactActivityDelegate createReactActivityDelegate() {\n+    return new ReactActivityDelegate(this, getMainComponentName()) {\n+      @Override\n+      protected ReactRootView createRootView() {\n+       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n+      }\n+    };\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal StackNavigator with Custom Transitions in React Navigation\nDESCRIPTION: Example of configuring a StackNavigator with modal behavior and custom screen transition animations using the transitionConfig option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/stack-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ModalNavigator = StackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    navigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: (sceneProps) => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Simplified Route Configuration in React Navigation\nDESCRIPTION: This snippet demonstrates a shorthand syntax for configuring routes in a stack navigator when only the screen component needs to be specified.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  Home: HomeScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: React Navigation Config with Nested Screens (JavaScript)\nDESCRIPTION: This snippet shows a deep linking configuration for a React Navigation app with nested screens within a bottom-tabs navigator and a stack navigator. It defines the path segments for each screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    HomeStack: {\n      screens: {\n        Home: 'home',\n        Profile: 'user',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting React Native Metro Bundler Cache\nDESCRIPTION: Starts the React Native Metro bundler with the cache reset flag. This command is used in non-Expo (bare) React Native projects to fix 'Unable to resolve module' errors possibly caused by a stale cache.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Example Initial Route Params in React Navigation\nDESCRIPTION: Illustrates an example JavaScript object representing initial route parameters for a hypothetical 'Post' screen, containing 'postTitle' and 'postBody'. This serves as the starting state before demonstrating navigation param changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  postTitle: 'An amazing post',\n  postBody: 'Amazing content for amazing post'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DrawerNavigator with Custom Screens in React Navigation (JSX)\nDESCRIPTION: Shows how to create a drawer navigator using `createDrawerNavigator` from React Navigation, registering `Screen1` and `Screen2`. Similar to the stack navigator example, status bar styling is expected to be handled within the individual screen components. Depends on `createDrawerNavigator` and the screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default createDrawerNavigator({\n  Screen1: {\n    screen: Screen1,\n  },\n  Screen2: {\n    screen: Screen2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Root App Component with Localization\nDESCRIPTION: Root App component implementation that manages locale state and provides translation functions through screenProps. Includes methods for setting locale and handling translations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/localization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class App extends React.Component {\n  state = {\n    locale: Localization.locale,\n  };\n\n  setLocale = (locale) => {\n    this.setState({ locale });\n  };\n\n  t = (scope, options) => {\n    return i18n.t(scope, { locale: this.state.locale, ...options });\n  };\n\n  render() {\n    return (\n      <AppContainer\n        screenProps={{\n          t: this.t,\n          locale: this.state.locale,\n          setLocale: this.setLocale,\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Missing npm Dependency\nDESCRIPTION: This command installs a missing npm package. It is used to resolve 'Unable to resolve module' errors when the module is an npm package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install name-of-the-module\n```\n\n----------------------------------------\n\nTITLE: Correctly Setting Tab Options for Nested Stack Screens (React Navigation/JavaScript)\nDESCRIPTION: This snippet shows the correct way to set `tabBarLabel` options for a `TabNavigator`. The options are applied directly to the `Tab.Screen` components within the `Tab.Navigator` that render the nested `HomeStackScreen` and `SettingsStackScreen` components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeStackScreen}\n          options={{ tabBarLabel: 'Home!' }}\n        />\n        <Tab.Screen\n          name=\"Settings\"\n          component={SettingsStackScreen}\n          options={{ tabBarLabel: 'Settings!' }}\n        />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Router State Structure in React Navigation (JavaScript)\nDESCRIPTION: This code snippet displays a sample navigation state structure for a custom router in React Navigation, illustrating the index, routes array, and expected route object parameters such as routeName and key. It is meant to guide implementing getStateForAction to return navigation state objects in the correct format. No third-party dependencies are required, but conventions of React Navigation must be followed: routes should have both a unique key and a routeName. The example input and output is a plain JavaScript object representing navigation state. Key constraints are adhering to the documented structure so React Navigation can interpret the state correctly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  index: 1, // identifies which route in the routes array is active\n  routes: [\n    {\n      // Each route needs a name to identify the type.\n      routeName: 'MyRouteName',\n\n      // A unique identifier for this route in the routes array:\n      key: 'myroute-123',\n      // (used to specify the re-ordering of routes)\n\n      // Routes can have any data, as long as key and routeName are correct\n      ...randomRouteData,\n    },\n    ...moreRoutes,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options Object\nDESCRIPTION: Shows how to configure screen options as an object for Group components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/group.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Group\n  screenOptions={{\n    presentation: 'modal',\n  }}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Extending getActionForPathAndParams to Handle Custom URIs in React Navigation (JavaScript)\nDESCRIPTION: This snippet extends the router's getActionForPathAndParams to handle a specific custom URI and extract custom parameters. When a matching path and params are detected, a navigation action is returned to route to 'Profile', with a nested action for 'Friends'. This enables deep-linking-like behavior. Dependencies include NavigationActions and createStackNavigator from react-navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/routers.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyApp = createStackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\nconst previousGetActionForPathAndParams =\n  MyApp.router.getActionForPathAndParams;\n\nObject.assign(MyApp.router, {\n  getActionForPathAndParams(path, params) {\n    if (path === 'my/custom/path' && params.magic === 'yes') {\n      // returns a profile navigate action for /my/custom/path?magic=yes\n      return NavigationActions.navigate({\n        routeName: 'Profile',\n        action: NavigationActions.navigate({\n          // This child action will get passed to the child router\n          // ProfileScreen.router.getStateForAction to get the child\n          // navigation state.\n          routeName: 'Friends',\n        }),\n      });\n    }\n    return previousGetActionForPathAndParams(path, params);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Component Inside Component (Dynamic)\nDESCRIPTION: Illustrates creating a component `Home` inside another component `App`. While syntactically valid, this pattern can lead to unexpected unmounting and remounting of screens in React Navigation when used as a screen component.  The component should be defined outside of the parent component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const Home = () => {\n    return <SomeComponent />;\n  };\n\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Routes in React Navigation\nDESCRIPTION: Example showing how to configure routes in a StackNavigator with screen components. Demonstrates setting up Home and Details routes with initial route configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = StackNavigator(\n  {\n    Home: {\n      screen: HomeScreen, // <----\n    },\n    Details: {\n      screen: DetailsScreen, // <----\n    },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sharing Common NavigationOptions Across Screens in React Navigation\nDESCRIPTION: Demonstrates how to share common navigationOptions across multiple screens by configuring them in the stack navigator using defaultNavigationOptions in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n    /* No more header config here! */\n  };\n\n  /* render function, etc */\n}\n\n/* other code... */\n\nconst RootStack = createStackNavigator(\n  {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n  {\n    initialRouteName: 'Home',\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: '#f4511e',\n      },\n      headerTintColor: '#fff',\n      headerTitleStyle: {\n        fontWeight: 'bold',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing NotFound Screen with Status Code\nDESCRIPTION: Example of a NotFound screen component that uses the StatusCodeContext to set a 404 status code when rendered. This is used to handle unmatched routes during server rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-rendering.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NotFound() {\n  const status = React.useContext(StatusCodeContext);\n\n  if (status) {\n    staus.code = 404;\n  }\n\n  return (\n    <View>\n      <Text>Oops! This URL doesn't exist.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linking Package using Bash\nDESCRIPTION: Command to install the `expo-linking` library using `npx expo install`. This package is required to generate the correct deep link prefix dynamically for Expo apps, handling differences between Expo Go and standalone builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linking\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Material Bottom Tab Navigator\nDESCRIPTION: Commands to install the required dependencies for using the material bottom tab navigator. This includes react-navigation-material-bottom-tabs and react-native-paper.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/material-bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-material-bottom-tabs react-native-paper\n```\n\n----------------------------------------\n\nTITLE: Installing Bottom Tabs Navigator Package\nDESCRIPTION: Command to install the Bottom Tabs Navigator package using npm or yarn for React Navigation v6.x\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/bottom-tabs@^6.x\n```\n\n----------------------------------------\n\nTITLE: Replacing Header Title with Custom Component in React Navigation\nDESCRIPTION: Shows how to replace the default header title with a custom component, such as an image, using the headerTitle property in navigationOptions in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass LogoTitle extends React.Component {\n  render() {\n    return (\n      <Image\n        source={require('./spiro.png')}\n        style={{ width: 30, height: 30 }}\n      />\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    // headerTitle instead of title\n    headerTitle: <LogoTitle />,\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator with Options\nDESCRIPTION: Example of creating and configuring a Stack Navigator with custom screen options and navigation modes\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      headerMode=\"screen\"\n      screenOptions={{\n        headerTintColor: 'white',\n        headerStyle: { backgroundColor: 'tomato' },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={Home}\n        options={{\n          title: 'Awesome app',\n        }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          title: 'My profile',\n        }}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        component={Settings}\n        options={{\n          gestureEnabled: false,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods Dependencies for iOS (React Native >= 0.60)\nDESCRIPTION: Navigates into the iOS project directory and runs `pod install` to link native dependencies like `react-native-gesture-handler` and `react-native-reanimated` via CocoaPods. This step is necessary for bare React Native projects version 0.60 and higher after installing the dependencies via npm/yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Importing createDrawerNavigator in React Navigation\nDESCRIPTION: Example of importing the createDrawerNavigator from react-navigation. This navigator provides a drawer that slides in from the left of the screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigator-overview.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[createDrawerNavigator](drawer-navigator.md)\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Theme in React Navigation (JSX)\nDESCRIPTION: This snippet shows how to apply the built-in `DarkTheme` provided by React Navigation. The `DarkTheme` object is imported from `@react-navigation/native` and passed to the `theme` prop of the `NavigationContainer` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer, DarkTheme } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer theme={DarkTheme}>{/* content */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Navigating Tab Icon in React Native\nDESCRIPTION: This snippet shows how to create a tab icon that doesn't navigate to a new screen, but instead performs a custom action when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateBottomTabNavigator({\n  ...,\n  Placeholder: {\n      screen: () => null,\n      navigationOptions: {\n        tabBarOnPress: () => {\n          // do something custom here\n        },\n      },\n  }\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters for a Route with SetParams Action in React Navigation\nDESCRIPTION: This code demonstrates how to use the SetParams action to update the parameters of a specific route. It requires specifying the new params and the key of the target route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Options with SetParams\nDESCRIPTION: Example of updating navigation options dynamically using the setParams method within a component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Inside of render() */\n<Button\n  title=\"Update the title\"\n  onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Manually Clearing Metro Bundler Cache\nDESCRIPTION: Forcefully removes Metro bundler cache directories from the temporary system directory. This is an alternative method to clear the bundler cache if other methods fail.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf $TMPDIR/metro-bundler-cache-*\n```\n\n----------------------------------------\n\nTITLE: Defining URL Scheme for Expo Project in JSON\nDESCRIPTION: Specifies the custom URL scheme (e.g., 'example') within the `expo` configuration object in `app.json`. This scheme is used to identify the app when handling deep links in standalone Expo apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Screens in React Navigation\nDESCRIPTION: This snippet demonstrates conditional rendering of screens based on authentication state, including shared screens that appear in both authenticated and unauthenticated states.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/auth-flow.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nisSignedIn ? (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    <Stack.Screen name=\"Help\" component={HelpScreen} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    <Stack.Screen name=\"Help\" component={HelpScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Android URL Scheme via uri-scheme Command (Bash)\nDESCRIPTION: Uses the `npx uri-scheme add` command to automatically configure the specified URL scheme (e.g., 'example') by adding the necessary intent filter to the `AndroidManifest.xml` file for the Android project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme add example --android\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator (Static) in React Native\nDESCRIPTION: This code snippet demonstrates how to create a bottom tab navigator with two tabs (Home and Settings) using `createBottomTabNavigator` from `@react-navigation/bottom-tabs`.  It imports necessary React Native components and defines the HomeScreen and SettingsScreen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Text, View } from 'react-native';\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n};\n\nconst SettingsScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings screen</Text>\n    </View>\n  );\n};\n\nexport const MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using withNavigationFocus HOC with a React Component\nDESCRIPTION: Example demonstrating how to use the withNavigationFocus higher order component to create a component that displays different text based on whether the screen is focused or not. The HOC passes the isFocused prop to the wrapped component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/with-navigation-focus.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text } 'react-native';\nimport { withNavigationFocus } from 'react-navigation';\n\nclass FocusStateLabel extends React.Component {\n  render() {\n    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;\n  }\n}\n\n// withNavigationFocus returns a component that wraps FocusStateLabel and passes\n// in the navigation prop\nexport default withNavigationFocus(FocusStateLabel);\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators (Stack within Drawer within Switch) in React Navigation (JavaScript)\nDESCRIPTION: This snippet sets up a React Navigation structure where a StackNavigator (`FeedStack`) is nested inside a DrawerNavigator (`DrawerNavigator`), which is then part of a SwitchNavigator (`AppNavigator`). This configuration serves as the basis for demonstrating how to lock the drawer on specific screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nconst DrawerNavigator = createDrawerNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: DrawerNavigator,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Redux State in Navigation Title via Connected Component in JavaScript\nDESCRIPTION: This example shows how to inject Redux state into a navigationOptions title field by creating a component connected to the Redux store using connect, then using it directly in the static navigationOptions property of a screen. Dependencies include React, React Navigation, React Redux, and implementation of the Redux store structure. The CountContainer receives the current count from state.count and renders it inside the title; Count and Counter must be connected appropriately. Limitations: using inline components in static navigationOptions may affect performance or cause warnings in non-standard navigation implementations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/redux-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Count extends React.Component {\n  render() {\n    return <Text>Count: {this.props.value}</Text>;\n  }\n}\n\nlet CountContainer = connect((state) => ({ value: state.count }))(Count);\n\nclass Counter extends React.Component {\n  static navigationOptions = {\n    title: <CountContainer />,\n  };\n\n  /* .. the rest of the code */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of Navigation State Structure in React Navigation\nDESCRIPTION: This code snippet demonstrates the structure of a typical navigation state object in React Navigation. It shows how routes are represented and how the active route is indicated.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/glossary-of-terms.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'StackRouterRoot',\n  index: 1,\n  routes: [\n    { key: 'A', name: 'Home' },\n    { key: 'B', name: 'Profile' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Navigator Implementation in React Native\nDESCRIPTION: Basic implementation of a stack navigator with a single HomeScreen component. This shows how to set up a NavigationContainer and a basic stack navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In App.js in a new project\n\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Up URI Prefix for Deep Linking in Expo React Navigation Project\nDESCRIPTION: This code sets up the URI prefix for deep linking in an Expo project using React Navigation. It uses Expo.Linking.makeUrl to generate the prefix.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = StackNavigator({...});\n\nconst prefix = Expo.Linking.makeUrl('/');\n\nconst MainApp = () => <SimpleApp uriPrefix={prefix} />;\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with StackActions in React Navigation\nDESCRIPTION: Demonstrates how to use the reset action to wipe the whole navigation state and replace it with new actions. It shows importing necessary modules and dispatching the reset action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Setting up MSW in Node.js\nDESCRIPTION: This code snippet demonstrates how to set up Mock Service Worker (MSW) in a Node.js environment. It imports the `setupServer` function from `msw/node` and passes the defined handlers to it, creating a mock server instance. This server can then be used in tests to intercept and mock API requests.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setupServer } from 'msw/node';\nimport { handlers } from './msw-handlers';\n\nconst server = setupServer(...handlers);\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators (Stack within Tab within Switch) in React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates a common React Navigation setup where a StackNavigator (`FeedStack`) is nested within a BottomTabNavigator (`TabNavigator`), which itself is part of a SwitchNavigator (`AppNavigator`). This structure is used as the initial configuration for demonstrating how to hide the tab bar on specific screens within the `FeedStack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: TabNavigator,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Higher-Order Component Inside Component\nDESCRIPTION: Demonstrates using a higher-order component (HOC) `withSomeData` within the `component` prop of `Stack.Screen`. This can cause the screen to unmount and remount on every render. Define the screen outside the parent component to avoid this.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={withSomeData(Home)} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Restructuring Navigators to Hide Tab Bar (JavaScript)\nDESCRIPTION: Presents the recommended alternative structure for hiding the tab bar. A new parent `HomeStack` is introduced, which contains both the `TabNavigator` (as the `Tabs` screen) and the `DetailsScreen` as direct children. Screens where the tab bar should be visible are defined within `FeedStack` inside `TabNavigator`. Screens like `Details` where the tab bar should be hidden are placed directly in `HomeStack`. This avoids dynamic logic by controlling visibility through navigator structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route you want to render under the tab bar */\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst HomeStack = createStackNavigator({\n  Tabs: TabNavigator,\n  Details: DetailsScreen,\n  /* any other route you want to render above the tab bar */\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: HomeStack,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Navigator Prop without ID (Discouraged)\nDESCRIPTION: Illustrates the less recommended method of accessing a parent navigator's navigation prop by chaining `getParent()` calls. This approach is discouraged because it tightly couples the component to the specific nesting structure of navigators, making it brittle to changes. Using navigator IDs with `getParent(id)` is preferred.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Avoid this\nconst drawerNavigation = navigation.getParent().getParent();\n\n// ...\n\ndrawerNavigation?.openDrawer();\n```\n\n----------------------------------------\n\nTITLE: Drawer Content Options Configuration\nDESCRIPTION: Example configuration object for customizing drawer content appearance including active colors, styling, and item container properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncontentOptions: {\n  activeTintColor: '#e91e63',\n  itemsContainerStyle: {\n    marginVertical: 0,\n  },\n  iconContainerStyle: {\n    opacity: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting onReady Callback in Navigation Container (React Navigation)\nDESCRIPTION: Examples of setting the onReady prop in both static and dynamic Navigation configurations. This function is called after the navigation container and all its children finish mounting for the first time.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Navigation\n  // highlight-next-line\n  onReady={() => console.log('Navigation container is ready')}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  // highlight-next-line\n  onReady={() => console.log('Navigation container is ready')}\n>\n  {/* ... */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Running Example App with Expo\nDESCRIPTION: Command to start the example app using Expo for manual integration testing of changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Not Found Screen with Status Code Context\nDESCRIPTION: Example of a NotFound screen component that uses StatusCodeContext to set the HTTP status code to 404 when rendered, signaling to the server that the URL doesn't exist.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction NotFound() {\n  const status = React.useContext(StatusCodeContext);\n\n  if (status) {\n    staus.code = 404;\n  }\n\n  return (\n    <View>\n      <Text>Oops! This URL doesn't exist.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating App Navigator with TODO Screens\nDESCRIPTION: Adds the TODO navigator to the main app navigator, allowing navigation to the home screen with TODO tabs after sign-in.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { AuthNavigator } from './auth.navigator';\nimport { TodoNavigator } from './todo.navigator';\nimport { AppRoute } from './app-routes';\n\nconst Stack = createStackNavigator();\n\nexport const AppNavigator = (props): React.ReactElement => (\n  <Stack.Navigator {...props} headerMode='none'>\n    <Stack.Screen name={AppRoute.AUTH} component={AuthNavigator}/>\n    <Stack.Screen name={AppRoute.HOME} component={TodoNavigator}/>\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Back Title Style in Native Stack Navigator (JavaScript)\nDESCRIPTION: Example configuration object demonstrating how to customize the style of the header back button's title on iOS using the `headerBackTitleStyle` option. This allows setting properties like `fontSize` and `fontFamily` specifically for the back button title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  headerBackTitleStyle: {\n      fontSize: 14,\n      fontFamily: 'Georgia',\n  },\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Navigator Component\nDESCRIPTION: Demonstrates how to render a custom navigator with navigation state, dispatch, and additional props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<AppNavigator\n  navigation={{ state, dispatch, addListener }}\n  screenProps={...}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Stack Dependencies - Bash\nDESCRIPTION: Demonstrates the installation of the required React Navigation libraries using npm. Includes react-navigation-stack, @react-native-community/masked-view, and react-native-safe-area-context. This step is a prerequisite for using stack-based navigation in a React Native application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-stack @react-native-community/masked-view react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Screen Focus with withNavigationFocus (React Navigation, JavaScript)\nDESCRIPTION: This snippet shows how to use react-navigation's withNavigationFocus higher order component to receive an isFocused prop and trigger actions when a React Native screen gains or loses focus. It demonstrates the use of componentDidUpdate to compare previous and current focus status before executing an action. Dependencies include react-navigation and react-native. The main input is the focus change event, and actions should be carefully managed to avoid redundant renders. Exports the wrapped component for use in navigation flows.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/function-after-focusing-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\\nimport { View } from 'react-native';\\nimport { withNavigationFocus } from 'react-navigation';\\n\\nclass TabScreen extends Component {\\n  componentDidUpdate(prevProps) {\\n    if (prevProps.isFocused !== this.props.isFocused) {\\n      // Use the `this.props.isFocused` boolean\\n      // Call any action\\n    }\\n  }\\n\\n  render() {\\n    return <View />;\\n  }\\n}\\n\\n// withNavigationFocus returns a component that wraps TabScreen and passes\\n// in the navigation prop\\nexport default withNavigationFocus(TabScreen);\n```\n\n----------------------------------------\n\nTITLE: Basic StackNavigator Implementation in React Native\nDESCRIPTION: Initial setup of a StackNavigator with a single HomeScreen component. Creates a basic navigation structure with a centered text display.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { StackNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n      </View>\n    );\n  }\n}\n\nexport default StackNavigator({\n  Home: {\n    screen: HomeScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Navigation Config with Initial Route (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set an initial route name for a navigator in the deep linking configuration. The `initialRouteName` property allows specifying which screen should be opened first when navigating to the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    HomeStack: {\n      initialRouteName: 'Profile',\n      screens: {\n        Home: 'home',\n        Profile: 'user',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Paper Provider Setup\nDESCRIPTION: Initial React Native Paper setup with Provider component wrapping the main application component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport Main from './src/Main';\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <Main />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Drawer Content Component Implementation\nDESCRIPTION: Example of creating a custom drawer content component with ScrollView and SafeAreaView, including proper styling and iPhone X support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerItems, SafeAreaView } from 'react-navigation';\n\nconst CustomDrawerContentComponent = (props) => (\n  <ScrollView>\n    <SafeAreaView\n      style={styles.container}\n      forceInset={{ top: 'always', horizontal: 'never' }}\n    >\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to the Header in React Navigation\nDESCRIPTION: This snippet demonstrates how to add a button to the right side of the header in a React Navigation stack. It uses the navigationOptions static property to define the header configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    headerTitle: <LogoTitle />,\n    headerRight: (\n      <Button\n        onPress={() => alert('This is a button!')}\n        title=\"Info\"\n        color=\"#fff\"\n      />\n    ),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Drawer in React Navigation\nDESCRIPTION: This snippet shows how to programmatically open and close the drawer using navigation helpers in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.openDrawer();\nnavigation.closeDrawer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Header Button with Component State\nDESCRIPTION: Shows how to create a header button that interacts with the screen component's state using navigation params. Implements a counter example where the header button increments a state value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const params = navigation.state.params || {};\n\n    return {\n      headerTitle: <LogoTitle />,\n      headerRight: (\n        <Button onPress={params.increaseCount} title=\"+1\" color=\"#fff\" />\n      ),\n    };\n  };\n\n  componentWillMount() {\n    this.props.navigation.setParams({ increaseCount: this._increaseCount });\n  }\n\n  state = {\n    count: 0,\n  };\n\n  _increaseCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  /* later in the render function we display the count */\n}\n```\n\n----------------------------------------\n\nTITLE: Using StatusCodeContext in NotFound Screen - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the StatusCodeContext inside a NotFound React component to set the HTTP status code to 404 when a non-existent route is matched. It highlights integrating React context with UI state. The function consumes StatusCodeContext and modifies its code property when rendering the not-found screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction NotFound() {\\n  const status = React.useContext(StatusCodeContext);\\n\\n  if (status) {\\n    staus.code = 404;\\n  }\\n\\n  return (\\n    <View>\\n      <Text>Oops! This URL doesn't exist.</Text>\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Navigation Options Setup\nDESCRIPTION: Demonstrates proper configuration of navigation options by setting them directly on stack navigator components rather than on individual screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeStack = createStackNavigator({ A });\nconst SettingsStack = createStackNavigator({ B });\n\nHomeStack.navigationOptions = {\n  tabBarLabel: 'Home!',\n};\n\nSettingsStack.navigationOptions = {\n  tabBarLabel: 'Settings!',\n};\n\nexport default createAppContainer(\n  createBottomTabNavigator({\n    HomeStack,\n    SettingsStack,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Screen Component Implementation in React Navigation\nDESCRIPTION: Example demonstrating incorrect usage of screen components where DetailsScreen is rendered as a child component instead of through navigation, which will cause navigation prop to be undefined.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n        <DetailsScreen />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Preset to Individual Screen in React Navigation\nDESCRIPTION: This snippet demonstrates how to apply a transition preset to a specific screen in React Navigation. It uses the ModalSlideFromBottomIOS preset from TransitionPresets.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionPresets } from 'react-navigation-stack';\n\n// ...\n\nstatic navigationOptions = {\n  title: 'Profile',\n  ...TransitionPresets.ModalSlideFromBottomIOS\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Static Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates testing a React component (`MyComponent`) with React Navigation using a static navigation setup. It uses `@testing-library/react-native` and `createStaticNavigation` to render the component within the test navigator and asserts the visibility of a modal based on the focus state. The test verifies that the modal is shown only when the component is focused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { act, render, screen } from '@testing-library/react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createTestStackNavigator } from './TestStackNavigator';\nimport { MyComponent } from './MyComponent';\n\ntest('does not show modal when not focused', () => {\n  const TestStack = createTestStackNavigator({\n    screens: {\n      A: MyComponent,\n      B: () => null,\n    },\n  });\n\n  const Navigation = createStaticNavigation(TestStack);\n\n  render(\n    <Navigation\n      initialState={{\n        routes: [{ name: 'A' }, { name: 'B' }],\n      }}\n    />\n  );\n\n  expect(screen.queryByText('Modal')).not.toBeVisible();\n});\n\ntest('shows modal when focused', () => {\n  const TestStack = createTestStackNavigator({\n    screens: {\n      A: MyComponent,\n      B: () => null,\n    },\n  });\n\n  const Navigation = createStaticNavigation(TestStack);\n\n  render(\n    <Navigation\n      initialState={{\n        routes: [{ name: 'B' }, { name: 'A' }],\n      }}\n    />\n  );\n\n  expect(screen.getByText('Modal')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods\nDESCRIPTION: Runs `pod install` within the `ios` directory using `npx pod-install`. This command is necessary for Mac users developing for iOS to link the native dependencies installed via Cocoapods.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Disabling React Navigation Header per Screen (JavaScript)\nDESCRIPTION: Demonstrates disabling the built-in React Navigation header for a specific screen by setting the `headerShown` option to `false` within the screen component's static `navigationOptions`. This is often used when implementing custom header components like `react-native-header-scroll-view`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/community-libraries-and-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nstatic navigationOptions = {\n  headerShown: false\n};\n```\n\n----------------------------------------\n\nTITLE: Minimal Partial Navigation State Example\nDESCRIPTION: Example of a minimal partial state object containing only routes. React Navigation will automatically rehydrate this to add missing properties like keys, type, and index.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-state.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  routes: [{ name: 'Home' }, { name: 'Profile' }],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Animation with Duration and Easing\nDESCRIPTION: Example showing how to configure transition timing parameters including duration and easing function using the configureTransition prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/transitioner.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n_configureTransition(transitionProps, prevTransitionProps) {\n  return {\n    // duration in milliseconds, default: 250\n    duration: 500,\n    // An easing function from `Easing`, default: Easing.inOut(Easing.ease)\n    easing: Easing.bounce,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator with Deep Linking Path in React Navigation\nDESCRIPTION: This snippet demonstrates how to configure a stack navigator with a deep linking path for a chat screen. It sets up a path spec 'chat/:user' to match against and extract params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = createAppContainer(\n  createStackNavigator({\n    Home: { screen: HomeScreen },\n    Chat: {\n      screen: ChatScreen,\n      path: 'chat/:user',\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Passing Refs with Wrapped Components - React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to pass a ref to a component wrapped with withNavigation by using the onRef prop instead of the standard ref. This is required because higher-order components like withNavigation do not automatically forward refs. The implementation assumes MyBackButton is the wrapped component and shows proper usage by passing a callback via onRef. Key dependencies are react-navigation (for withNavigation). Input is a functional or class component, output is the correct setup of a component reference.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/with-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// MyBackButton.ts\\nexport default withNavigation(MyBackButton);\\n\\n// MyNavBar.ts\\n<MyBackButton onRef={(elem) => (this.backButton = elem)} />;\n```\n\n----------------------------------------\n\nTITLE: Listing Updated Props for React Navigation `HeaderBackButton` Component\nDESCRIPTION: Lists the props received by the `HeaderBackButton` component (used via the `headerLeft` option) in the updated React Navigation. Custom back button components must be updated to accept these props, covering state (`disabled`, `canGoBack`), styling (`pressColorAndroid`, `tintColor`, `labelStyle`), content (`backImage`, `label`, `truncatedLabel`), layout (`labelVisible`, `screenLayout`, `titleLayout`), and callbacks (`onPress`, `onLabelLayout`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n- `disabled`\n- `onPress`\n- `pressColorAndroid`\n- `backImage`\n- `tintColor`\n- `label`\n- `truncatedLabel`\n- `labelVisible`\n- `labelStyle`\n- `allowFontScaling`\n- `onLabelLayout`\n- `screenLayout`\n- `titleLayout`\n- `canGoBack`\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerContainer with React Navigation\nDESCRIPTION: Example showing how to use ServerContainer for server-side rendering with React Navigation, including ref usage for accessing screen options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-container.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Ref which will be populated with the screen options\nconst ref = React.createRef();\n\n// Location object containing the `pathname` and `search` fields of the current URL\nconst location = { pathname: '/profile', search: '?user=jane' };\n\n// Get rendered HTML\nconst html = ReactDOMServer.renderToString(\n  <ServerContainer ref={ref} location={location}>\n    <App />\n  </ServerContainer>\n);\n\n// Then you can access the options for the current screen in the ref\nconst options = ref.current.getCurrentOptions(); // { title: 'My Profile' }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Stack Navigator Implementation\nDESCRIPTION: Example of implementing Stack Navigator using dynamic configuration in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Options Configuration\nDESCRIPTION: Examples of configuring screen options both statically and dynamically\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      options: {\n        title: 'Awesome app',\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{\n    title: 'Awesome app',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigation Event Payload Structure (JavaScript)\nDESCRIPTION: Outlines the structure of the JavaScript object payload provided to navigation event listeners. No dependencies; meant as a reference for developers handling navigation events. Lists relevant fields such as action, context, lastState, state, and type. Inputs: event; outputs: payload object describing navigation state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  action: { type: 'Navigation/COMPLETE_TRANSITION', key: 'StackRouterRoot' },\n  context: 'id-1518521010538-2:Navigation/COMPLETE_TRANSITION_Root',\n  lastState: undefined,\n  state: undefined,\n  type: 'didBlur',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with Static Navigation in React Navigation\nDESCRIPTION: Sets up screen tracking functionality using React Navigation's static navigation approach. Uses useNavigationContainerRef and onStateChange to track route changes and implement analytics tracking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigationContainerRef,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction Home() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Settings')}>\n        Go to Settings\n      </Button>\n    </View>\n  );\n}\n\nfunction Settings() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: Home,\n    Settings: Settings,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n  const routeNameRef = React.useRef();\n\n  return (\n    <Navigation\n      ref={navigationRef}\n      onReady={() => {\n        routeNameRef.current = navigationRef.current.getCurrentRoute().name;\n      }}\n      onStateChange={async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\n        const trackScreenView = () => {\n          // Your implementation of analytics goes here!\n        };\n\n        if (previousRouteName !== currentRouteName) {\n          // Replace the line below to add the tracker from a mobile analytics SDK\n          await trackScreenView(currentRouteName);\n        }\n\n        // Save the current route name for later comparison\n        routeNameRef.current = currentRouteName;\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Navigation Structure (Bash)\nDESCRIPTION: This shows the example app's navigation structure, consisting of a BottomTabs navigator with a nested Stack (HomeStack) and a Settings screen. The HomeStack contains Home and Profile screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nBottomTabs\n‚îú‚îÄ‚îÄ Stack (HomeStack)\n‚îÇ  ‚îú‚îÄ‚îÄ Home\n‚îÇ  ‚îî‚îÄ‚îÄ Profile\n‚îî‚îÄ‚îÄ Settings\n```\n\n----------------------------------------\n\nTITLE: Investigating Dependency Conflicts with Yarn\nDESCRIPTION: Uses the `yarn why` command to display the dependency tree for `react-native-safe-area-context`. This helps identify which packages depend on it and potentially cause version conflicts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn why react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Header and Tab Bar in React Navigation\nDESCRIPTION: This snippet demonstrates setting up a React Navigation app with hidden header and tab bar, which can cause content to be obscured by device notches and system UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/handling-safe-area.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction Demo() {\n  return (\n    <View\n      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\" headerMode=\"none\">\n        <Stack.Screen name=\"Home\">\n          {() => (\n            <Tab.Navigator initialRouteName=\"Analytics\" tabBar={() => null}>\n              <Tab.Screen name=\"Analytics\" component={Demo} />\n              <Tab.Screen name=\"Profile\" component={Demo} />\n            </Tab.Navigator>\n          )}\n        </Stack.Screen>\n\n        <Stack.Screen name=\"Settings\" component={Demo} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createStackNavigator API in JavaScript\nDESCRIPTION: Basic API structure for creating a stack navigator using createStackNavigator function. It takes RouteConfigs and StackNavigatorConfig as parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateStackNavigator(RouteConfigs, StackNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Deep Linking in React Native\nDESCRIPTION: This XML configuration modifies the Android manifest to handle deep links. It adds an intent-filter to the MainActivity for the custom URI scheme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Navigating with Keys in React Navigation 2.0\nDESCRIPTION: Demonstrates how to use keys when navigating to routes in React Navigation 2.0, which allows for more precise control over navigation behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-05-07-react-navigation-2.0.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigate({routeName: 'MyRoute', key: data.uniqueId, params: data})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Navigation Container with URI Prefix in Expo\nDESCRIPTION: This JavaScript code configures the navigation container to use the Expo linking URL as the URI prefix for deep linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = createStackNavigator({...});\n\nconst prefix = Expo.Linking.makeUrl('/');\n\nconst MainApp = () => <SimpleApp uriPrefix={prefix} />;\n```\n\n----------------------------------------\n\nTITLE: Using useNavigationState with a Class Component via a Wrapper in JavaScript (React)\nDESCRIPTION: Provides a pattern for using the `useNavigationState` hook with a React class component. A functional component wraps the class component, uses the hook to get the desired state (`routesLength`), and passes it down as a prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation-state.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Get it from props\n    const { routesLength } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const routesLength = useNavigationState((state) => state.routes.length);\n\n  return <Profile {...props} routesLength={routesLength} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Area Context in Expo Managed Workflow (Bash)\nDESCRIPTION: This command uses `expo install` to add or update `react-native-safe-area-context`. Use this in Expo managed projects to ensure the installed version is compatible with the Expo SDK, helping to resolve errors like \"Tried to register two views with the same name RNCSafeAreaProvider\".\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Defining Static Screen Component at Top Level for React Navigation (JavaScript)\nDESCRIPTION: This snippet correctly defines the 'Home' screen at the top level before using it in the Stack.Navigator. This preserves component identity, prevents unwanted remounts, and ensures persistent navigation and local state. No additional dependencies are required besides React and React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst Home = () => {\n  return <SomeComponent />;\n};\n\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Stack Navigation within Tabs\nDESCRIPTION: Shows implementation of stack navigation within tab navigation for handling nested navigation flows.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabNavigator, StackNavigator } from 'react-navigation';\n\nconst HomeStack = StackNavigator({\n  Home: { screen: HomeScreen },\n  Details: { screen: DetailsScreen },\n});\n\nconst SettingsStack = StackNavigator({\n  Settings: { screen: SettingsScreen },\n  Details: { screen: DetailsScreen },\n});\n\nexport default TabNavigator(\n  {\n    Home: { screen: HomeStack },\n    Settings: { screen: SettingsStack },\n  },\n  {\n    /* Other configuration remains unchanged */\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Multiple Screens for Auth States in React Navigation\nDESCRIPTION: Illustrates how to conditionally render multiple screens for different authentication states using React Fragments (`<>`) within a navigator. Based on the `state.userToken`, it renders either a set of authentication-related screens (SignIn, SignUp, ResetPassword) if the token is null, or a set of application screens (Home, Profile) if the token exists. This allows grouping related screens for each authentication state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/auth-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nstate.userToken == null ? (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    <Stack.Screen name=\"ResetPassword\" component={ResetPassword} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up React Navigation Repository\nDESCRIPTION: Commands to fork, clone, and set up the React Navigation repository locally. This includes adding the upstream remote and installing dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/react-navigation.git\ncd react-navigation\ngit remote add upstream https://github.com/react-community/react-navigation.git\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Press Events with PreventDefault in TabBar (JavaScript)\nDESCRIPTION: This snippet shows how to override the default behavior on tab press events by calling preventDefault within the onTabPress handler on TabBar. Allows custom logic on tab press (e.g., blocking navigation for the 'home' key). Receives the route and preventDefault as parameters. If preventDefault is called, the default behavior of tab switching is stopped.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n<TabBar\n  onTabPress={({ route, preventDefault }) => {\n    if (route.key === 'home') {\n      preventDefault();\n\n      // Do something else\n    }\n  }}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing React Navigation with Redux Provider in JavaScript\nDESCRIPTION: This snippet demonstrates creating a React Navigation stack and wrapping its app container in a Redux Provider to enable shared Redux state across the entire navigation hierarchy. Dependencies include React, React Navigation, React Redux, and a properly configured Redux store. The RootStack is created with two containers and rendered inside the Provider, ensuring that all navigated screens can access Redux state via connect. Parameters like store must be provided, and all screens should be container components when Redux access is needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/redux-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet RootStack = createStackNavigator({\n  Counter: CounterContainer,\n  StaticCounter: StaticCounterContainer,\n});\n\nlet Navigation = createAppContainer(RootStack);\n\n// Render the app container component with the provider around it\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Navigation />\n      </Provider>\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating @babel/core\nDESCRIPTION: Installs or updates the `@babel/core` development dependency. This might be necessary alongside updating `metro-react-native-babel-preset` to resolve syntax errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/core\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation Stack in React Navigation\nDESCRIPTION: Demonstrates how to use the StackActions.reset() method to wipe the whole navigation state and replace it with new actions. It includes an example of resetting to a Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tab Bar Component in JavaScript\nDESCRIPTION: Illustrates how to override the default tab bar with a custom React component. It imports the default `BottomTabBar` component, defines a functional wrapper component (`TabBarComponent`) that spreads the received props onto `BottomTabBar` and allows applying additional styles (like `borderTopColor`), and then assigns this custom component to the `tabBarComponent` option in the `TabNavigatorConfig`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/bottom-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator, BottomTabBar } from 'react-navigation-tabs';\n\nconst TabBarComponent = (props) => <BottomTabBar {...props} />;\n\nconst TabScreens = createBottomTabNavigator(\n  {\n    // other screens\n  },\n  {\n    tabBarComponent: (props) => (\n      <TabBarComponent {...props} style={{ borderTopColor: '#605F60' }} />\n    ),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Configuration to Navigation Options\nDESCRIPTION: Implementation of transition specifications in navigation options for a Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nProfile.navigationOptions = {\n  transitionSpec: {\n    open: config,\n    close: config,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerContainer with Koa Server\nDESCRIPTION: Basic example of implementing ServerContainer in a Koa server environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-container.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx) => {\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={{ pathname: ctx.path, search: ctx.search }}>\n      <App />\n    </ServerContainer>\n  );\n\n  ctx.body = html;\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Render Callback (children prop) for Screen Rendering in JSX\nDESCRIPTION: Shows using a render callback function as the children of the `Screen` component. This provides flexibility, such as passing additional props, but bypasses React Navigation's default screen optimizations, potentially requiring manual performance management (e.g., using `React.memo`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen name=\"Profile\">\n  {(props) => <ProfileScreen {...props} />}\n</Stack.Screen>\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pod Dependencies\nDESCRIPTION: Command using `npx pod-install ios` (or alternatively `cd ios && pod install`) to install the necessary native dependencies via Cocoapods for the iOS platform. This step is required after adding native modules like `react-native-gesture-handler` and `react-native-reanimated` to a bare React Native project. Requires Cocoapods installed and development environment on macOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Navigator Key in React Navigation\nDESCRIPTION: Example showing how to obtain a route's navigator key using the dangerouslyGetParent method. This is used primarily when resetting navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-key.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.dangerouslyGetParent().state.key\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Header Height (React Navigation, JavaScript)\nDESCRIPTION: This configuration object sets a custom height for the header by defining a height property in headerStyle, helping avoid layout glitches due to asynchronous measurement. It works in conjunction with custom headers, and you must ensure the header uses this specified height for consistent visuals.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Back Button Without Navigation Prop in React Native JavaScript\nDESCRIPTION: Demonstrates a React Native class component (MyBackButton) that attempts to use the navigation prop without being a direct screen component. The code shows a usage bug where the navigation prop is undefined, resulting in an exception. Key dependencies are React and react-native's Button component; the navigation prop is assumed but not provided, causing .goBack() to fail. Inputs: none except the assumed navigation prop. Outputs: a button UI and (if used incorrectly) a runtime error.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/connecting-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\\nimport { Button } from 'react-native';\\n\\nexport default class MyBackButton extends React.Component {\\n  render() {\\n    // This will throw an 'undefined is not a function' exception because the navigation\\n    // prop is undefined.\\n    return (\\n      <Button\\n        title=\"Back\"\\n        onPress={() => {\\n          this.props.navigation.goBack();\\n        }}\\n      />\\n    );\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Example Navigation State with Customized Parameters (JS)\nDESCRIPTION: This code shows the resulting navigation state object after applying the custom parameter parsing from the previous snippet. The `id` parameter has been transformed by the `parse` function, prepending 'user-' to the original value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Profile',\n      params: { id: 'user-wojciech', section: 'settings' },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Animation in React Navigation\nDESCRIPTION: Examples of how to use the configureTransition prop to customize animation parameters. It shows how to set duration and easing for Animated.timing, and how to use Animated.spring with custom parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/transitioner.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n_configureTransition(transitionProps, prevTransitionProps) {\n  return {\n    // duration in milliseconds, default: 250\n    duration: 500,\n    // An easing function from `Easing`, default: Easing.inOut(Easing.ease)\n    easing: Easing.bounce,\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n_configureTransition(transitionProps, prevTransitionProps) {\n  return {\n    // A timing function, default: Animated.timing.\n    timing: Animated.spring,\n    // Some parameters relevant to Animated.spring\n    friction: 1,\n    tension: 0.5,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with NavigationContainer in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows the new practice in React Navigation 5.x where apps are wrapped with NavigationContainer, replacing the old createAppContainer method. Required dependency: @react-navigation/native. The App component must return a NavigationContainer as the root, which sets up context for screens. No inputs or outputs beyond the standard React component render. Failing to use NavigationContainer will result in navigation not working.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\\n\\nexport default function App() {\\n  return <NavigationContainer>{/*...*/}</NavigationContainer>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Navigator Appearance in React Native\nDESCRIPTION: This code snippet shows how to customize the appearance of a bottom tab navigator, including custom icons and colors for active and inactive tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport { createBottomTabNavigator } from 'react-navigation';\n\nexport default createBottomTabNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    navigationOptions: ({ navigation }) => ({\n      tabBarIcon: ({ focused, horizontal, tintColor }) => {\n        const { routeName } = navigation.state;\n        let iconName;\n        if (routeName === 'Home') {\n          iconName = `ios-information-circle${focused ? '' : '-outline'}`;\n        } else if (routeName === 'Settings') {\n          iconName = `ios-options${focused ? '' : '-outline'}`;\n        }\n\n        return (\n          <Ionicons\n            name={iconName}\n            size={horizontal ? 20 : 25}\n            color={tintColor}\n          />\n        );\n      },\n    }),\n    tabBarOptions: {\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using ThemeContext.Consumer for Theme-Aware Components in React Navigation\nDESCRIPTION: Shows how to use ThemeContext.Consumer to create components that adapt to the current theme in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ThemeContext } from 'react-navigation';\n\nfunction MyButton() {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <TouchableOpacity\n          style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}>\n          <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>Button!</Text>\n        </TouchableOpacity>\n      )}\n    <ThemeContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Screens and Navigator with React Navigation in JavaScript\nDESCRIPTION: This example demonstrates how to set up a drawer-based navigator in a React Native application using React Navigation. It defines two screens (Home and Notifications), customizes their drawer icons and labels, and creates a drawer navigator and app container. Dependencies include react-navigation, react-native, and proper image assets for the drawer. Key parameters used are navigationOptions for screen settings and the structure of the createDrawerNavigator call. The inputs are React components, and the output is a navigation-enabled app container. Ensure all dependencies and assets are configured before use.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyHomeScreen extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'Home',\n    drawerIcon: ({ tintColor }) => (\n      <Image\n        source={require('./chats-icon.png')}\n        style={[styles.icon, { tintColor: tintColor }]}\n      />\n    ),\n  };\n\n  render() {\n    return (\n      <Button\n        onPress={() => this.props.navigation.navigate('Notifications')}\n        title=\"Go to notifications\"\n      />\n    );\n  }\n}\n\nclass MyNotificationsScreen extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'Notifications',\n    drawerIcon: ({ tintColor }) => (\n      <Image\n        source={require('./notif-icon.png')}\n        style={[styles.icon, { tintColor: tintColor }]}\n      />\n    ),\n  };\n\n  render() {\n    return (\n      <Button\n        onPress={() => this.props.navigation.goBack()}\n        title=\"Go back home\"\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    width: 24,\n    height: 24,\n  },\n});\n\nconst MyDrawerNavigator = createDrawerNavigator({\n  Home: {\n    screen: MyHomeScreen,\n  },\n  Notifications: {\n    screen: MyNotificationsScreen,\n  },\n});\n\nconst MyApp = createAppContainer(MyDrawerNavigator);\n```\n\n----------------------------------------\n\nTITLE: Annotating useNavigation with Type Parameter (TypeScript)\nDESCRIPTION: This snippet demonstrates how to annotate the `navigation` object obtained from the `useNavigation` hook with a type parameter for type safety. It's recommended to prefer specifying a global default type instead, if possible.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst navigation = useNavigation<ProfileScreenNavigationProp>();\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Keys in Static Group Configuration\nDESCRIPTION: Example showing how navigation keys are used in static group configuration. The group names (User and Guest) serve as navigation keys, which can cause screens to remount when switching between groups.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/group.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  groups: {\n    User: {\n      screens: {\n        /* screens */\n      },\n    },\n    Guest: {\n      screens: {\n        /* screens */\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Object in React Navigation State (JSON)\nDESCRIPTION: This JSON snippet displays the structure of a single route object within the React Navigation state. Each route has a unique `key`, a `routeName` designating the type of route (often matching the screen component name), and an optional `params` object for passing data to the screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/glossary-of-terms.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"key\": \"B\",\n  \"routeName\": \"Profile\",\n  \"params\": { \"id\": \"123\" }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigation with Hidden Bars in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a bottom tab navigator and a stack navigator with hidden navigation and tab bars. This setup can potentially cause display issues on iPhone X.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/handling-iphonex.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tabs = createBottomTabNavigator({\n  ...\n}, {\n  tabBarComponent: () => null,\n});\n\nexport default createStackNavigator({\n  ...\n}, {\n  headerMode: 'none',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Drawer Navigator with Different Status Bar Configurations\nDESCRIPTION: This snippet shows how to create a drawer navigator with two screens that have different status bar configurations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default createDrawerNavigator({\n  Screen1: {\n    screen: Screen1,\n  },\n  Screen2: {\n    screen: Screen2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Switching to type-safe Link component props in React Navigation (JSX)\nDESCRIPTION: This snippet demonstrates updating the Link component in React Navigation from using the 'to' prop with a path string to using type-safe 'screen' and 'params' props. No external dependencies beyond React Navigation and related setup are necessary. 'screen' should match a registered screen name, and 'params' is an object for screen parameters; input is a component usage declaration, and the output is the rendered navigation link.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n- <Link to=\"/details?foo=42\">Go to Details</Link>\\n+ <Link screen=\"Details\" params={{ foo: 42 }}>Go to Details</Link>\n```\n\n----------------------------------------\n\nTITLE: Custom Drawer Content Component Implementation\nDESCRIPTION: Example of creating a custom drawer content component with ScrollView and SafeAreaView for proper iOS X support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerItems, SafeAreaView } from 'react-navigation';\n\nconst CustomDrawerContentComponent = (props) => (\n  <ScrollView>\n    <SafeAreaView\n      style={styles.container}\n      forceInset={{ top: 'always', horizontal: 'never' }}\n    >\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Options Dynamically in React Navigation 5\nDESCRIPTION: Shows how to use the new setOptions method to dynamically update screen options, such as adding a header button that interacts with screen state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-02-06-react-navigation-5.0.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.setOptions({\n  headerRight: () => (\n    <DoneButton\n      onPress={async () => {\n        await saveNote();\n        navigation.replace('Notes');\n      }}\n    />\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Correct Implementation Using Static Router Property\nDESCRIPTION: This snippet demonstrates another correct approach to implementing multiple navigators. It uses a static router property on the AuthenticationScreen and passes the navigation prop to the AuthenticationNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/common-mistakes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default App extends React.Component {\n  render() {\n    /* In the root component we are rendering the app navigator */\n    return <AppNavigator />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nclass AuthenticationScreen extends React.Component {\n  static router = AuthenticationNavigator.router;\n\n  render() {\n    return (\n      <AuthenticationNavigator navigation={this.props.navigation} />\n    );\n  }\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthenticationScreen, // This screen renders a navigator!\n  Home: HomeScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Navigation State Object (JS)\nDESCRIPTION: This code snippet illustrates a sample navigation state object representing the routing information. The `routes` array contains route objects, each with a `name` and potentially a nested `state` for nested navigators or `params` for passing data to the screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'rooms',\n      state: {\n        routes: [\n          {\n            name: 'chat',\n            params: { user: 'jane' },\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite with Jest - Bash\nDESCRIPTION: Executes the project's tests using Yarn, which invokes Jest as the test runner. Ensures code correctness before merging pull requests. Dependencies are Jest, configured with test files and scripts in the project. Displays output for all tests, failing on errors or assertion mismatches.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Route using NavigationActions in React Navigation\nDESCRIPTION: This snippet demonstrates how to create and dispatch a navigate action using NavigationActions. It includes options for specifying the route name, params, nested actions, and route keys.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Options with SetParams\nDESCRIPTION: Example of updating navigation options dynamically using setParams within a component's render method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Inside of render() */\n<Button\n  title=\"Update the title\"\n  onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Checking Drawer Status in React Navigation\nDESCRIPTION: This code demonstrates how to determine if the drawer is open or closed using the useDrawerStatus hook from @react-navigation/drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDrawerStatus } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useDrawerStatus() === 'open';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Source Extensions for TypeScript\nDESCRIPTION: Specifies the required `sourceExts` array in `metro.config.js` to ensure Metro recognizes JavaScript (`.js`), JSON (`.json`), and TypeScript (`.ts`, `.tsx`) files. Missing TS/TSX extensions can cause module resolution errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsourceExts: ['js', 'json', 'ts', 'tsx'];\n```\n\n----------------------------------------\n\nTITLE: Installing Core React Navigation Package (Bash)\nDESCRIPTION: Installs the main `react-navigation` package using npm. This is the first step when adding React Navigation to an existing project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation\n```\n\n----------------------------------------\n\nTITLE: Using NavigationContext in a Class Component in React Navigation\nDESCRIPTION: This example demonstrates how to use NavigationContext directly in a React class component to access the navigation object. The navigation object is accessed via the context system by setting the static contextType property.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-context.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContext } from '@react-navigation/native';\n\nclass SomeComponent extends React.Component {\n  static contextType = NavigationContext;\n\n  render() {\n    // We can access navigation object via context\n    const navigation = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gesture Handler and Reanimated for Expo\nDESCRIPTION: Command to install compatible versions of react-native-gesture-handler and react-native-reanimated for Expo projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Setting up Forked React Navigation Repository using Bash\nDESCRIPTION: This sequence of bash commands clones a user's fork of the 'navigation-ex' repository (likely intended to be 'react-navigation'), navigates into the cloned directory, adds the original React Navigation repository as an upstream remote, and installs project dependencies using Yarn. This setup is necessary for local development and contribution.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/navigation-ex.git\ncd navigation-ex\ngit remote add upstream https://github.com/react-navigation/react-navigation.git\nyarn\n```\n\n----------------------------------------\n\nTITLE: Navigating Back with Back Action in React Navigation\nDESCRIPTION: This snippet shows how to use the Back action to navigate to a previous screen. It includes an optional key parameter to specify which screen to go back to.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n```\n\n----------------------------------------\n\nTITLE: Screen State Access Example\nDESCRIPTION: Shows how to access and render route parameters from the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return <Text>Name: {this.props.navigation.state.params.name}</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Screen Tracking Middleware to Redux Store in React Navigation\nDESCRIPTION: This code demonstrates how to apply the screen tracking middleware when creating a Redux store. It shows the integration of the custom screenTracking middleware with other Redux components in the store configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/screen-tracking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = createStore(\n  combineReducers({\n    navigation: navigationReducer,\n    ...\n  }),\n  applyMiddleware(\n    screenTracking,\n    ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Header Title Component in React Navigation\nDESCRIPTION: Shows how to replace the default header title text with a custom component, in this case an image logo, using the headerTitle option.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction LogoTitle() {\n  return (\n    <Image\n      style={{ width: 50, height: 50 }}\n      source={require('@expo/snack-static/react-native-logo.png')}\n    />\n  );\n}\n\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ headerTitle: (props) => <LogoTitle {...props} /> }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation State Structure in JavaScript for React Navigation\nDESCRIPTION: This snippet illustrates the typical structure of a navigation state object in React Navigation. It includes an index to identify the active route and an array of route objects with required properties like routeName and key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1, // identifies which route in the routes array is active\n  routes: [\n    {\n      // Each route needs a name to identify the type.\n      routeName: 'MyRouteName',\n\n      // A unique identifier for this route in the routes array:\n      key: 'myroute-123',\n      // (used to specify the re-ordering of routes)\n\n      // Routes can have any data, as long as key and routeName are correct\n      ...randomRouteData,\n    },\n    ...moreRoutes,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottom Tab Navigator Position in React Navigation\nDESCRIPTION: Sets the position of tabs in the Bottom Tab Navigator using the tabBarPosition option. This allows displaying tabs on the left, right, top, or bottom, supporting responsive layouts for different screen sizes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab.Navigator\n  screenOptions={{\n    // highlight-next-line\n    tabBarPosition: 'left',\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Screen Component Implementation in React Navigation\nDESCRIPTION: Example demonstrating incorrect usage of screen components where DetailsScreen is rendered as a child component instead of through navigation, which will cause navigation prop to be undefined.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n        <DetailsScreen />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Appearance with tabBarOptions in JavaScript\nDESCRIPTION: Provides an example of customizing the appearance of the tab bar using the `tabBarOptions` object within `TabNavigatorConfig`. This snippet shows how to set the active tab's tint color, customize the label's style (e.g., font size), and apply custom styles to the tab bar container itself (e.g., background color).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking API with MSW\nDESCRIPTION: This code snippet demonstrates how to mock an API endpoint using Mock Service Worker (MSW). It defines a handler that intercepts requests to `https://pokeapi.co/api/v2/pokemon/ditto` and returns a mocked response with a delay of 1000ms to simulate network latency. It depends on the 'msw' library.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { delay, http, HttpResponse } from 'msw';\n\nexport const handlers = [\n  http.get('https://pokeapi.co/api/v2/pokemon/ditto', async () => {\n    await delay(1000);\n\n    return HttpResponse.json({\n      id: 132,\n      name: 'ditto',\n    });\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Starting React Navigation Example App with Expo using Bash\nDESCRIPTION: Runs the example application located within the React Navigation monorepo using the Expo CLI via a Yarn script. This allows contributors to manually test their changes and explore various navigation patterns implemented in the example.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Transitions with Animation\nDESCRIPTION: Example showing how to create animated transitions between scenes using Animated.View and interpolation of position values.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/transitioner.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n_renderScene(transitionProps, scene) {\n  const { position } = transitionProps;\n  const { index } = scene;\n  const opacity = position.interpolate({\n    inputRange: [index-1, index, index+1],\n    outputRange: [0, 1, 0],\n  });\n  // The prop `router` is populated when we call `createNavigator`.\n  const Scene = this.props.router.getComponent(scene.route.routeName);\n  return (\n    <Animated.View style={{ opacity }}>\n      { Scene }\n    </Animated.View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Focus Actions with didFocus Event Listener in React Navigation\nDESCRIPTION: This snippet shows how to use the 'didFocus' event listener to trigger actions when a screen comes into focus. It sets up the listener in componentDidMount and removes it in componentWillUnmount to prevent memory leaks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/function-after-focusing-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass TabScreen extends Component {\n  componentDidMount() {\n    const { navigation } = this.props;\n    this.focusListener = navigation.addListener('didFocus', () => {\n      // The screen is focused\n      // Call any action\n    });\n  }\n\n  componentWillUnmount() {\n    // Remove the event listener\n    this.focusListener.remove();\n  }\n\n  render() {\n    return <View />;\n  }\n}\n\nexport default withNavigation(TabScreen);\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Stack Navigator Parent Options (React Navigation, JS)\nDESCRIPTION: Provides an alternative syntax for configuring a `createStackNavigator`. Instead of setting `navigationOptions` on the resulting component externally, it places a `navigationOptions` key *within* the second argument (the `navigatorConfig`) of `createStackNavigator`. This object defines how the stack should appear in a parent navigator. It also shows `defaultNavigationOptions` for child routes within the same config object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst HomeStack = createStackNavigator(\n  { A },\n  {\n    // This applies to the parent navigator\n    navigationOptions: {\n      tabBarLabel: 'Home!',\n    },\n    // This applies to child routes\n    defaultNavigationOptions: {\n      title: 'Welcome',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods for Safe Area Context\nDESCRIPTION: Navigates to the `ios` directory, runs `pod install` to install native iOS dependencies (like `react-native-safe-area-context`), and returns to the project root. This ensures native parts are correctly set up after linking/unlinking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Update @babel/core\nDESCRIPTION: This command updates the `@babel/core` package. It is used to resolve syntax errors related to newer JavaScript syntax.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/core\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the React Navigation Repository - Bash\nDESCRIPTION: This snippet outlines the step-by-step process for forking, cloning, and configuring a local copy of the React Navigation repository. Dependencies include Git for version control and Yarn for dependency management. Users replace <USERNAME> with their actual GitHub username, initialize remotes, and install project dependencies, enabling local development and contribution.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/navigation-ex.git\\ncd navigation-ex\\ngit remote add upstream https://github.com/react-navigation/react-navigation.git\\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux-connected component for navigation options\nDESCRIPTION: Example of creating a component that is connected to Redux store and using it in the title option of a screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/redux-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ value }) {\n  return <Text>Count: {value}</Text>;\n}\n\nconst CounterContainer = connect((state) => ({ value: state.count }))(Counter);\n```\n\n----------------------------------------\n\nTITLE: Defining a Router for a Custom Navigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a custom navigator by assigning a static router property to a React component. The router is created using the StackRouter function with routes and configuration parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNavigator extends React.Component {\n  static router = StackRouter(routes, config);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Spec Compliant Babel Plugin Configuration - Bash (JSON Extract)\nDESCRIPTION: This JSON array snippet displays a Babel plugin configuration using the 'loose' mode for '@babel/plugin-proposal-class-properties'. This non-spec compliant setting may result in runtime errors when class properties are transpiled, and should be avoided when using React Native Metro bundler. The context warns to avoid such settings for correct React Native operation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[\"@babel/plugin-proposal-class-properties\", { \"loose\": true}]\n\n```\n\n----------------------------------------\n\nTITLE: Explicitly controlling modal presentation in Stack.Screen (JSX)\nDESCRIPTION: This code demonstrates how to force a Stack.Screen to be presented as a card instead of a modal by specifying the 'presentation' option. It depends on @react-navigation/stack and compatible navigators. Input is a screen configuration, with behavior determined by the 'presentation' option's value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\\n  name=\"MyModal\"\\n  component={MyModalScreen}\\n  options={{\\n    // highlight-next-line\\n    presentation: 'card',\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigators for Each Tab in React Native\nDESCRIPTION: This snippet demonstrates how to create separate stack navigators for each tab in a tab-based navigation setup, allowing for nested navigation within each tab.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  createBottomTabNavigator,\n  createStackNavigator,\n  createAppContainer,\n} from 'react-navigation';\n\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Details!</Text>\n      </View>\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\nconst HomeStack = createStackNavigator({\n  Home: HomeScreen,\n  Details: DetailsScreen,\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: SettingsScreen,\n  Details: DetailsScreen,\n});\n\nexport default createAppContainer(\n  createBottomTabNavigator(\n    {\n      Home: HomeStack,\n      Settings: SettingsStack,\n    },\n    {\n      /* Other configuration remains unchanged */\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking with Static API\nDESCRIPTION: Shows how to configure deep linking paths directly in the navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      linking: {\n        path: 'user/:id',\n      },\n    },\n    Settings: {\n      screen: SettingsScreen,\n      linking: {\n        path: 'settings',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Router Object in JavaScript for React Navigation\nDESCRIPTION: This snippet demonstrates the structure of a custom router object for React Navigation. It includes placeholder functions for getStateForAction, getActionForPathAndParams, getPathAndParamsForState, getComponentForState, and getComponentForRouteName.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyRouter = {\n  getStateForAction: (action, state) => ({}),\n  getActionForPathAndParams: (path, params) => null,\n  getPathAndParamsForState: (state) => null,\n  getComponentForState: (state) => MyScreen,\n  getComponentForRouteName: (routeName) => MyScreen,\n};\n\n// Now, you can make a navigator by putting the router on it:\nclass MyNavigator extends React.Component {\n  static router = MyRouter;\n  render() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Back Button with withNavigation in React Navigation\nDESCRIPTION: This example demonstrates how to create a reusable back button component using withNavigation. The component receives the navigation prop and uses it to trigger the goBack action when pressed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/with-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Running CocoaPods Install in iOS Directory - Bash\nDESCRIPTION: This compound command changes into the 'ios/' folder, runs 'pod install' to (re)install native dependencies for iOS, and then returns to the root directory. It is essential after linking or updating native dependencies in React Native projects, especially following changes to gesture handler libraries. Requires CocoaPods to be installed and should be executed from the project's root directory.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ios; pod install; cd ..\n\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods for Gesture Handler\nDESCRIPTION: Navigates to the `ios` directory, runs `pod install` to install native iOS dependencies (like `react-native-gesture-handler`), and returns to the project root. This is crucial after linking/unlinking native modules for iOS builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Setting up Navigation Structure with SwitchNavigator\nDESCRIPTION: Implementation of basic navigation structure using StackNavigator and SwitchNavigator to handle authentication flow, including app and auth stacks\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/auth-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackNavigator, SwitchNavigator } from 'react-navigation';\n\nconst AppStack = StackNavigator({ Home: HomeScreen, Other: OtherScreen });\nconst AuthStack = StackNavigator({ SignIn: SignInScreen });\n\nexport default SwitchNavigator(\n  {\n    AuthLoading: AuthLoadingScreen,\n    App: AppStack,\n    Auth: AuthStack,\n  },\n  {\n    initialRouteName: 'AuthLoading',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Material Top Tabs Navigator and Its Dependencies\nDESCRIPTION: Commands to install the Material Top Tabs Navigator package and its required dependencies based on your project type (Expo managed or bare React Native project).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/material-top-tabs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-pager-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-pager-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Header Titles in React Navigation\nDESCRIPTION: Demonstrates how to set static header titles for different screens using the navigationOptions property in React components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n  };\n\n  /* render function, etc */\n}\n\nclass DetailsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Details',\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Gesture Handler in App Entry Point (JavaScript)\nDESCRIPTION: Imports the `react-native-gesture-handler` library at the very top of the application's entry file (e.g., `index.js` or `App.js`). This import is crucial for the gesture handler library to function correctly.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Stack Navigator in React Navigation\nDESCRIPTION: Example showing how to create a stack navigator using the traditional dynamic API with three screens: Home, Profile, and Settings.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createStackNavigator();\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n      <Stack.Screen name=\"Settings\" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods After Yarn Resolutions\nDESCRIPTION: Navigates to the `ios` directory, runs `pod install`, and returns to the project root. This step is necessary after modifying JavaScript dependencies (e.g., using yarn resolutions) to ensure the corresponding native iOS dependencies are correctly installed or updated.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Navigator with StackRouter in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a React component-based navigator by assigning a static 'router' property using StackRouter. 'routes' and 'config' are supplied to StackRouter to configure available routes and options. This pattern enables the component to be used as a screen in other navigators while encapsulating its navigation logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/routers.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass MyNavigator extends React.Component {\n  static router = StackRouter(routes, config);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Factory-Created Custom Navigator in a React Application (JavaScript)\nDESCRIPTION: This snippet illustrates how to instantiate and use a custom navigator, as created using createNavigatorFactory, within a React application. It imports the factory function, creates a navigator pair, and uses the resulting My.Navigator and My.Screen components to define application navigation structure. The code expects dependencies such as appropriate Screen components (e.g., HomeScreen, FeedScreen). This setup allows for flexible and modular navigation definitions conforming to React Navigation's architecture.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMyNavigator } from './myNavigator';\\n\\nconst My = createMyNavigator();\\n\\nfunction App() {\\n  return (\\n    <My.Navigator>\\n      <My.Screen name=\"Home\" component={HomeScreen} />\\n      <My.Screen name=\"Feed\" component={FeedScreen} />\\n    </My.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Drawer Component in React Native\nDESCRIPTION: A simple React functional component demonstrating the basic usage of the `Drawer` component from `react-native-drawer-layout`. It initializes state to control the drawer's open/closed status, provides functions for `onOpen` and `onClose` callbacks, renders content inside the drawer using `renderDrawerContent`, and includes a button to toggle the drawer. Depends on `react`, `react-native`, `react-native-drawer-layout`, and optionally `@react-navigation/elements` for the Button component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { Button } from '@react-navigation/elements';\n\nexport default function DrawerExample() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Drawer\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderDrawerContent={() => {\n        return <Text>Drawer content</Text>;\n      }}\n    >\n      <Button\n        onPress={() => setOpen((prevOpen) => !prevOpen)}\n        title={`${open ? 'Close' : 'Open'} drawer`}\n      />\n    </Drawer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up URI Prefix in Expo Projects (JavaScript)\nDESCRIPTION: This code sets up the URI prefix in a React Navigation container using Expo's expo-linking package. It imports Linking, creates the navigation container, and calculates the URI prefix using Linking.createURL, then passes it to the navigation container via the uriPrefix prop. Requires expo-linking@2.0.1 or later and react-navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Install this package with `npx expo install expo-linking`\nimport * as Linking from 'expo-linking';\n\nconst SimpleApp = createAppContainer(createStackNavigator({...}));\n\n// Linking.createURL is available as of expo@40.0.1 and expo-linking@2.0.1. If\n// you are using older versions, you can upgrade or use Linking.makeUrl instead,\n// but note that your deep links in standalone apps will be in the format\n// scheme:/// rather than scheme:// if you use makeUrl.\nconst prefix = Linking.createURL('/');\n\nconst MainApp = () => <SimpleApp uriPrefix={prefix} />;\n```\n\n----------------------------------------\n\nTITLE: Example Merged Route Params in React Navigation 5\nDESCRIPTION: Shows the resulting parameters after navigating to the 'Post' screen with `{ postTitle: 'An okay post' }` using React Navigation 5's default behavior, where new params are merged with existing ones.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  postTitle: 'An okay post',\n  postBody: 'Amazing content for amazing post'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Options\nDESCRIPTION: Example of customizing tab bar appearance with tabBarOptions including active/inactive colors, label styles, and background color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Navigator Type Information in React Navigation 7\nDESCRIPTION: This diff shows the enhanced type information now required for custom navigators in React Navigation 7 to provide better type-checking and autocompletion in TypeScript.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n- export const createMyNavigator =  createNavigatorFactory<\n-   MyNavigationState<ParamListBase>,\n-   MyNavigationOptions,\n-   MyNavigationEventMap,\n-   typeof MyNavigator\n- >(MyNavigator);\n+ export function createMyNavigator<\n+   const ParamList extends ParamListBase,\n+   const NavigatorID extends string | undefined = undefined,\n+   const TypeBag extends NavigatorTypeBagBase = {\n+     ParamList: ParamList;\n+     NavigatorID: NavigatorID;\n+     State: TabNavigationState<ParamList>;\n+     ScreenOptions: TabNavigationOptions;\n+     EventMap: TabNavigationEventMap;\n+     NavigationList: {\n+       [RouteName in keyof ParamList]: TabNavigationProp<\n+         ParamList,\n+         RouteName,\n+         NavigatorID\n+       >;\n+     };\n+     Navigator: typeof TabNavigator;\n+   },\n+   const Config extends StaticConfig<TypeBag> = StaticConfig<TypeBag>,\n+ >(config?: Config): TypedNavigator<TypeBag, Config> {\n+   return createNavigatorFactory(MyNavigator)(config);\n+ }\n```\n\n----------------------------------------\n\nTITLE: Navigate to iOS Folder and Pod Install\nDESCRIPTION: These commands changes to the ios directory and runs pod install command.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Bar Configuration in Stack Navigator Screens\nDESCRIPTION: This snippet shows how to configure the status bar differently for two screens in a stack navigator using the StatusBar component from React Native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Screen1 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n        <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen2')}\n          color={isAndroid ? 'blue' : '#fff'}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gesture Handler\nDESCRIPTION: Implementation of gesture handler configuration files for native and web platforms.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gesture-handler.native.js\n// Only import react-native-gesture-handler on native platforms\nimport 'react-native-gesture-handler';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// gesture-handler.js\n// Don't import react-native-gesture-handler on web\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport './gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Retrieving Route Length with navigation.getState() in Function Component (React Navigation, JavaScript)\nDESCRIPTION: This code snippet shows a common pitfall: using navigation.getState() in a rendered component to access the route count. navigation.getState() does not trigger a re-render when the state changes, so UI will not update as expected. navigation (the navigation prop) is required. This snippet should be avoided for reactive rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation-state.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile() {\n  const routesLength = navigation.getState().routes.length; // Don't do this\n\n  return <Text>Number of routes: {routesLength}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme-Aware Colors in React Navigation Tab Navigator\nDESCRIPTION: Demonstrates how to specify theme-aware colors in the static configuration of a bottom tab navigator in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet Tabs = createBottomTabNavigator(\n  {\n    /* routes */\n  },\n  {\n    tabBarOptions: {\n      activeTintColor: {\n        light: '#000',\n        dark: '#fff',\n      },\n      inactiveTintColor: {\n        light: 'rgba(0,0,0,0.2)',\n        dark: 'rgba(255,255,255,0.2)',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Drawer Navigator in React Navigation\nDESCRIPTION: Basic syntax for creating a drawer navigator with route configurations and drawer navigator config options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Replacing Header Title with Custom Component (Dynamic) in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates replacing the default header title with a custom React component (`LogoTitle` displaying an image) for a specific screen within a dynamically configured native stack navigator using `createNativeStackNavigator`, `NavigationContainer`, and the `headerTitle` screen option. This approach uses the standard dynamic navigation setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n```js name=\"Custom title\" snack\nimport * as React from 'react';\nimport { Text, View, Image } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\n// codeblock-focus-start\nfunction LogoTitle() {\n  return (\n    <Image\n      style={{ width: 50, height: 50 }}\n      source={require('@expo/snack-static/react-native-logo.png')}\n    />\n  );\n}\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          // highlight-next-line\n          headerTitle: (props) => <LogoTitle {...props} />,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Representing Child Navigation State within a Route (JSON)\nDESCRIPTION: This JSON snippet demonstrates how nesting navigators is represented in the navigation state. A route object can contain its own `index` and `routes` array, effectively embedding the state of a child navigator within the parent navigator's route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/glossary-of-terms.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  key: 'B',\n  routeName: 'Profile',\n  params: { id: '123' },\n  index: 1,\n  routes: [ {...}, {...} ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Refs with NavigationContainer to Access Navigation Methods\nDESCRIPTION: Example showing how to create and use a ref with the NavigationContainer to access navigation methods outside of screens. This allows programmatic navigation from components that don't have access to the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const navigationRef = React.useRef(null);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Button onPress={() => navigationRef.current?.navigate('Home')}>\n        Go home\n      </Button>\n      <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Localized Screen Component\nDESCRIPTION: Screen component implementation that uses the localization screenProps to display translated content and handle language switching. Demonstrates usage of translation function and locale state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/localization.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Screen extends React.Component {\n  static navigationOptions = ({ screenProps: { t } }) => ({\n    title: t('foo'),\n  });\n\n  render() {\n    let { t, locale } = this.props.screenProps;\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>\n          Current locale: {locale}.{' '}\n          {locale !== 'en' && locale !== 'fr'\n            ? 'Translations will fall back to \"en\" because none available'\n            : null}\n        </Text>\n        <Text>{t('bar', { someValue: Date.now() })}</Text>\n        {locale === 'en' ? (\n          <Button\n            title=\"Switch to French\"\n            onPress={() => this.props.screenProps.setLocale('fr')}\n          />\n        ) : (\n          <Button\n            title=\"Switch to English\"\n            onPress={() => this.props.screenProps.setLocale('en')}\n          />\n        )}\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In Screen Implementation\nDESCRIPTION: Example implementation of sign-in screen component with authentication handling and navigation\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/auth-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SignInScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Please sign in',\n  };\n\n  render() {\n    return (\n      <View>\n        <Button title=\"Sign in!\" onPress={this._signInAsync} />\n      </View>\n    );\n  }\n\n  _signInAsync = async () => {\n    await AsyncStorage.setItem('userToken', 'abc');\n    this.props.navigation.navigate('App');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Performing TypeScript Type Check in React Navigation Project using Bash\nDESCRIPTION: Executes the TypeScript compiler (tsc) via Yarn to perform static type checking on the entire codebase. This ensures that the TypeScript code is type-safe and helps catch potential errors during development.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Header in React Navigation Stack\nDESCRIPTION: Example of creating a custom header for a Stack Navigator screen by implementing a header function that receives navigation properties and returns a custom component. The code shows how to access the title and implement a back button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options, back }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        back ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Router Object in JavaScript for React Navigation\nDESCRIPTION: This snippet demonstrates the structure of a custom router object in React Navigation. It includes placeholder functions for getStateForAction, getActionForPathAndParams, getPathAndParamsForState, getComponentForState, and getComponentForRouteName.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyRouter = {\n  getStateForAction: (action, state) => ({}),\n  getActionForPathAndParams: (path, params) => null,\n  getPathAndParamsForState: (state) => null,\n  getComponentForState: (state) => MyScreen,\n  getComponentForRouteName: (routeName) => MyScreen,\n};\n\n// Now, you can make a navigator by putting the router on it:\nclass MyNavigator extends React.Component {\n  static router = MyRouter;\n  render() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Conditional Navigation Configuration (React Navigation)\nDESCRIPTION: This snippet illustrates a dynamic method for conditional screen rendering within React Navigation. Based on the `isSignedIn` boolean, different sets of screens are rendered within the Stack Navigator. The `Help` screen is also included, but its rendering is dependent on the authentication status. Similar to the previous example, changes in the authentication state while on the Help screen may not trigger the desired navigation behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/auth-flow.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nisSignedIn ? (\n  <>\n    <Stack.Screen name=\"Home\" component={HomeScreen} />\n    <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    <Stack.Screen name=\"Help\" component={HelpScreen} />\n  </>\n) : (\n  <>\n    <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n    <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\n    <Stack.Screen name=\"Help\" component={HelpScreen} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing DrawerNavigator with Screen Props\nDESCRIPTION: Example showing how to pass screen props to DrawerNavigator components and navigation options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst DrawerNav = DrawerNavigator({\n  // config\n});\n\n<DrawerNav\n  screenProps={/* this prop will get passed to the screen components and nav options as props.screenProps */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Reading Navigation State Directly in Render with JavaScript\nDESCRIPTION: Shows an incorrect way to display navigation state data in a component. Using `navigation.getState()` directly within the render logic will not cause the component to re-render when the navigation state changes (e.g., pushing a new screen), leading to stale data display. The `useNavigationState` hook should be used instead for reactive state updates.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation-state.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile() {\n  const routesLength = navigation.getState().routes.length; // Don't do this\n\n  return <Text>Number of routes: {routesLength}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating TypeScript (Bash)\nDESCRIPTION: This command installs or updates the `typescript` development dependency using npm. Outdated TypeScript versions can lead to errors like \"Module has no exported member 'xxx'\" when importing from React Navigation packages.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Upgrading react-navigation-stack Package via npm/yarn\nDESCRIPTION: Command to upgrade the `react-navigation-stack` package to its latest version (likely 2.x). This upgrade introduces significant API changes, moving many configurations into `navigationOptions` and requiring new peer dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-stack\n```\n\n----------------------------------------\n\nTITLE: Android Back Button Handler\nDESCRIPTION: Implementation of hardware back button handling for Android devices using React Navigation with Redux\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/redux-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { BackHandler } from 'react-native';\nimport { addNavigationHelpers, NavigationActions } from 'react-navigation';\n\nconst AppNavigation = TabNavigator({\n  Home: { screen: HomeScreen },\n  Settings: { screen: SettingScreen },\n});\n\nclass ReduxNavigation extends React.Component {\n  componentDidMount() {\n    BackHandler.addEventListener('hardwareBackPress', this.onBackPress);\n  }\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);\n  }\n  onBackPress = () => {\n    const { dispatch, nav } = this.props;\n    if (nav.index === 0) {\n      return false;\n    }\n    dispatch(NavigationActions.back());\n    return true;\n  };\n\n  render() {\n    const { dispatch, nav } = this.props;\n    const navigation = addNavigationHelpers({\n      dispatch,\n      state: nav,\n      addListener,\n    });\n\n    return <AppNavigation navigation={navigation} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SwitchNavigator in React Navigation\nDESCRIPTION: Basic syntax for creating a SwitchNavigator instance with RouteConfigs and SwitchNavigatorConfig parameters. The navigator handles switching between different routes based on specified configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/switch-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack PopToTop Action in React Navigation (Static)\nDESCRIPTION: This snippet shows how to use the popToTop action in a static navigation configuration. It demonstrates a ProfileScreen with a button to pop to the top of the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-actions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Navigator Screen Components in React Navigation\nDESCRIPTION: Example showing how to create a stack navigator with Home and Details screens using the createStackNavigator configuration object. Demonstrates proper screen component setup with initialRouteName.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen, // <----\n    },\n    Details: {\n      screen: DetailsScreen, // <----\n    },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Navigation Options for a Screen with addNavigationHelpers (JavaScript)\nDESCRIPTION: This snippet demonstrates how to prepare a navigation prop for a child screen, using addNavigationHelpers and the current navigation state to retrieve screen options. It shows calling the router's getScreenOptions function, passing a navigation object and optional props to extract options such as the screen title. Dependencies include addNavigationHelpers from React Navigation and the router instance. The key parameters are the navigation state (focused on the active route via navigation.state.index), the router instance, and props. Inputs are navigation state and dispatch; output is a screen options object retrieved from the router.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-routers.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// First, prepare a navigation prop for your child, or re-use one if already available.\nconst screenNavigation = addNavigationHelpers({\n  // In this case we use navigation.state.index because we want the title for the active route.\n  state: navigation.state.routes[navigation.state.index],\n  dispatch: navigation.dispatch,\n});\nconst options = this.props.router.getScreenOptions(screenNavigation, {});\nconst title = options.title;\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters in React Navigation\nDESCRIPTION: Demonstrates how to update route parameters using NavigationActions.setParams(). This action requires both the new params object and the target route key to identify which route's parameters should be updated.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n```\n\n----------------------------------------\n\nTITLE: Upgrading react-navigation-drawer Package via npm/yarn\nDESCRIPTION: Command to upgrade the `react-navigation-drawer` package to its latest version. This version uses `react-native-reanimated` for animations, potentially requiring code migration if `drawerProgress` was used.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-drawer\n```\n\n----------------------------------------\n\nTITLE: Manually Handling Deep Links with React Native Linking API\nDESCRIPTION: These JavaScript snippets demonstrate how to manually handle deep links using the Linking API from React Native, including setting up event listeners and parsing the incoming URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncomponentDidMount() {\n    // [...]\n    Linking.addEventListener('url', this.handleDeepLink)\n}\ncomponentWillUnmount() {\n    // [...]\n    Linking.removeEventListener('url', this.handleDeepLink);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhandleDeepLink(e) {\n    const route = e.url.replace(/.*?:\\/\\//g, '')\n    // use route to navigate\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Yarn Resolutions\nDESCRIPTION: Runs the `yarn` command to install or update dependencies according to the `package.json` and `yarn.lock` files, applying any overrides specified in the `resolutions` block.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links on iOS Simulator (Bash)\nDESCRIPTION: Uses xcrun simctl to trigger deep link URLs in the iOS simulator. The command format opens a specified URI. Useful for testing deep links both in development and production-style builds. Replace the URI string with the actual deep link to test.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nxcrun simctl openurl booted [ put your URI prefix in here ]\n\n// for example\n\nxcrun simctl openurl booted exp://127.0.0.1:19000/--/chat/Eric\n```\n\n----------------------------------------\n\nTITLE: Android Deep Linking Configuration in AndroidManifest.xml\nDESCRIPTION: XML configuration for Android deep linking by adding an intent-filter to the MainActivity in AndroidManifest.xml. This setup enables the app to respond to custom URL scheme links like 'example://'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Accessing navigation parameters in a screen component\nDESCRIPTION: Example of a component that accesses state passed via navigation parameters rather than directly from Redux.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/redux-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StaticCounter({ route }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{route.params.count}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a New Screen using `navigate` in React Navigation (JavaScript)\nDESCRIPTION: Defines a `HomeScreen` component in React Native. It includes a `Button` that, when pressed, calls `this.props.navigation.navigate('Details')` to transition the user to the 'Details' screen within the stack navigator. Requires the `navigation` prop passed by React Navigation and assumes 'Details' is a defined route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\n// ... other code from the previous section\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigators for Tab Bar Hiding (JavaScript)\nDESCRIPTION: Sets up an initial React Navigation configuration with a Stack Navigator (`FeedStack`) nested within a Bottom Tab Navigator (`TabNavigator`). This `TabNavigator` is then used within a Switch Navigator (`AppNavigator`). This structure serves as the base example for demonstrating how to hide the tab bar on specific screens within the nested stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: TabNavigator,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigators within Tab Navigator in React Native\nDESCRIPTION: This code snippet shows how to create separate stack navigators for each tab in a bottom tab navigator, allowing for nested navigation within tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  createBottomTabNavigator,\n  createStackNavigator,\n} from 'react-navigation';\n\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Details!</Text>\n      </View>\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\nconst HomeStack = createStackNavigator({\n  Home: HomeScreen,\n  Details: DetailsScreen,\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: SettingsScreen,\n  Details: DetailsScreen,\n});\n\nexport default createBottomTabNavigator(\n  {\n    Home: HomeStack,\n    Settings: SettingsStack,\n  },\n  {\n    /* Other configuration remains unchanged */\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Stack Manipulation via Navigation Actions (JavaScript)\nDESCRIPTION: Simulates complex navigation stack manipulation by dispatching navigation actions with specific keys. No UI framework required‚Äîjust usage of navigation object. Each navigation action creates a stack entry with designated keys to control history and allow precise back navigation. Inputs are objects specifying route names and keys; outputs are navigation actions applied sequentially to the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_A });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_B });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_C });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_D });\n```\n\n----------------------------------------\n\nTITLE: Going Back in Stack with goBack in React Navigation (JavaScript)\nDESCRIPTION: Shows how to implement back navigation on a React Navigation screen using the 'goBack' method. This requires the navigation prop to be available (in a screen component). The code provides three buttons: one to go back from the current screen, one to go back from anywhere (passing null), and one to go back from a route with a specific key. Inputs include optional keys or null; outputs are navigation actions that move back in the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { goBack } = this.props.navigation;\n    return (\n      <View>\n        <Button onPress={() => goBack()} title=\"Go back from this HomeScreen\" />\n        <Button onPress={() => goBack(null)} title=\"Go back anywhere\" />\n        <Button\n          onPress={() => goBack('key-123')}\n          title=\"Go back from key-123\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Transitions for AnimatedSwitchNavigator (JSX)\nDESCRIPTION: Demonstrates creating an `AnimatedSwitchNavigator` named `MySwitch` with custom transitions. It imports the `Transition` component from `react-native-reanimated` and uses `Transition.Together` to combine a `slide-bottom` out transition and a `fade` in transition. This customizes the default cross-fade animation between the `HomeScreen` and `OtherScreen` routes. Requires `react-native-reanimated >= 1.0.0`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/animated-switch-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport createAnimatedSwitchNavigator from 'react-navigation-animated-switch';\nimport { Transition } from 'react-native-reanimated';\n\nconst MySwitch = createAnimatedSwitchNavigator(\n  {\n    Home: HomeScreen,\n    Other: OtherScreen,\n  },\n  {\n    // The previous screen will slide to the bottom while the next screen will fade in\n    transition: (\n      <Transition.Together>\n        <Transition.Out\n          type=\"slide-bottom\"\n          durationMs={400}\n          interpolation=\"easeIn\"\n        />\n        <Transition.In type=\"fade\" durationMs={500} />\n      </Transition.Together>\n    ),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Top Tab Navigator with ViewPager in React Navigation 5\nDESCRIPTION: Demonstrates how to use a custom pager component (ViewPagerAdapter) with the Material Top Tab Navigator for native-like performance in React Navigation 5.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-02-06-react-navigation-5.0.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ViewPagerAdapter from 'react-native-tab-view-viewpager-adapter';\n\n// ...\n\n<Tab.Navigator pager={props => <ViewPagerAdapter {...props} />}>\n  {...}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: New React Navigation Config Example (JavaScript)\nDESCRIPTION: This snippet demonstrates the new React Navigation configuration format for deep linking, emphasizing the need to match the config's shape to the navigation structure's nesting. It uses a 'screens' property for nested configurations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'home',\n      screens: {\n        Feed: 'feed',\n        Profile: 'profile',\n      },\n    },\n    Settings: 'settings',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Elements Package\nDESCRIPTION: Command to install the @react-navigation/elements package using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/elements@^6.x\n```\n\n----------------------------------------\n\nTITLE: React Navigation State Object for Home Screen (JS)\nDESCRIPTION: Illustrates a simple navigation state with a single 'Home' route, intended to show its serialization to a path in React Navigation's configuration. This state object represents a basic scenario where the user is at the top level of the application and the Home screen is active.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [{ name: 'Home' }],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Header Height via useHeaderHeight Hook (JavaScript)\nDESCRIPTION: Illustrates the use of useHeaderHeight to retrieve the nearest visible header's height in functional components. Automatically hooks into navigation context. Requires React Navigation elements and React. Inputs: none; output: headerHeight numeric value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nimport { useHeaderHeight } from '@react-navigation/elements';\n\n// ...\n\nconst headerHeight = useHeaderHeight();\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Bar Configuration in Tab Navigator Screens\nDESCRIPTION: This snippet demonstrates how to configure the status bar for screens in a tab navigator using React Navigation's event system and StatusBar's implicit API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen1 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('light-content');\n      isAndroid && StatusBar.setBackgroundColor('#6a51ae');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n\nclass Screen2 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('dark-content');\n      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Gesture Handler in Entry File\nDESCRIPTION: Code snippet showing how to import the gesture handler at the top of the entry file (index.js or App.js). This step is crucial for Android and iOS builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Creating HTML-like navigation with anchor tag\nDESCRIPTION: A basic example showing how navigation would work in a web browser using an HTML anchor tag.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"details.html\">Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Scene Component with React.PureComponent (JavaScript/React Native)\nDESCRIPTION: Demonstrates how to define a scene component (HomeComponent) as a `React.PureComponent`. This optimization helps prevent re-renders if the component's props and state remain shallowly equal, improving performance within the TabView.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport default class HomeComponent extends React.PureComponent {\n  render() {\n    return (\n      <View style={styles.page}>\n        <Avatar />\n        <NewsFeed />\n      </View>\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transition Specification to Stack Screen in React Navigation\nDESCRIPTION: This code shows how to apply a custom transition specification to a Stack.Screen component. It uses the previously defined spring animation config for both opening and closing transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    transitionSpec: {\n      open: config,\n      close: config,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links via uri-scheme Command (Bash)\nDESCRIPTION: Demonstrates the basic syntax for using the `npx uri-scheme open` command line tool to trigger a deep link on a specified platform (iOS or Android). Replace `[your deep link]` with the actual URI to test.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open [your deep link] --[ios|android]\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Components in React Navigation\nDESCRIPTION: This example shows how to set up a Stack Navigator with multiple screen components. It demonstrates the structure for defining routes using Stack.Screen components with name and component props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createStackNavigator();\n\nconst StackNavigator = (\n  <Stack.Navigator>\n    <Stack.Screen\n      name=\"Home\"\n      component={HomeScreen} // <----\n    />\n    <Stack.Screen\n      name=\"Details\"\n      component={DetailsScreen} // <----\n    />\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Material Bottom Tab Navigator in React Navigation\nDESCRIPTION: Basic structure for creating a material bottom tab navigator using createMaterialBottomTabNavigator function. It takes RouteConfigs and MaterialBottomTabNavigatorConfig as parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/material-bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateMaterialBottomTabNavigator(\n  RouteConfigs,\n  MaterialBottomTabNavigatorConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Web App with React Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a web application using React Navigation's new web support. It shows the usage of createSwitchNavigator, createBrowserApp, and the Link component for navigation between Home and Profile screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-01-react-navigation-3.0-rc.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSwitchNavigator } from \"@react-navigation/core\";\nimport { createBrowserApp, Link } from \"@react-navigation/web\";\n\nclass Home extends React.Component {\n  static path = \"\";\n  static navigationOptions = {\n    title: \"Home\",\n  };\n  render () {\n    return (\n      <div>\n        <h2>Home Screen</h2>\n        <Link toRoute=\"Profile\" params={{ name: \"Brent\", view: \"photos\" }}>\n          Brent's photos\n        </Link>\n      </div>\n    );\n  }\n}\nclass Profile extends React.Component {\n  static path = \"/profile/:name\";\n  ...\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Home,\n  Profile,\n});\n\nconst App = createBrowserApp(AppNavigator);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating NavigationOptions with setParams in React Navigation\nDESCRIPTION: Demonstrates how to update navigationOptions from within a component using the setParams method of the navigation prop in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Inside of render() */\n<Button\n  title=\"Update the title\"\n  onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tab Router in React Navigation\nDESCRIPTION: Example implementation of a basic tab router with core functionality including state management, route handling, and navigation actions. Includes methods for initialization, rehydration, and action handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = {\n  type: 'tab',\n\n  getInitialState({ routeNames, routeParamList }) {\n    const index =\n      options.initialRouteName === undefined\n        ? 0\n        : routeNames.indexOf(options.initialRouteName);\n\n    return {\n      stale: false,\n      type: 'tab',\n      key: shortid(),\n      index,\n      routeNames,\n      routes: routeNames.map(name => ({\n        name,\n        key: name,\n        params: routeParamList[name],\n      })),\n    };\n  },\n\n  getRehydratedState(partialState, { routeNames, routeParamList }) {\n    const state = partialState;\n\n    if (state.stale === false) {\n      return state as NavigationState;\n    }\n\n    const routes = state.routes\n      .filter(route => routeNames.includes(route.name))\n      .map(\n        route =>\n          ({\n            ...route,\n            key: route.key || `${route.name}-${shortid()}`,\n            params:\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                  }\n                : route.params,\n          } as Route<string>)\n      );\n\n    return {\n      stale: false,\n      type: 'tab',\n      key: shortid(),\n      index:\n        typeof state.index === 'number' && state.index < routes.length\n          ? state.index\n          : 0,\n      routeNames,\n      routes,\n    };\n  },\n\n  getStateForRouteNamesChange(state, { routeNames }) {\n    const routes = state.routes.filter(route =>\n      routeNames.includes(route.name)\n    );\n\n    return {\n      ...state,\n      routeNames,\n      routes,\n      index: Math.min(state.index, routes.length - 1),\n    };\n  },\n\n  getStateForRouteFocus(state, key) {\n    const index = state.routes.findIndex(r => r.key === key);\n\n    if (index === -1 || index === state.index) {\n      return state;\n    }\n\n    return { ...state, index };\n  },\n\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'NAVIGATE': {\n        const index = state.routes.findIndex(\n          route => route.name === action.payload.name\n        );\n\n        if (index === -1) {\n          return null;\n        }\n\n        return { ...state, index };\n      }\n\n      default:\n        return BaseRouter.getStateForAction(state, action);\n    }\n  },\n\n  shouldActionChangeFocus() {\n    return false;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Redirects for React Navigation on Netlify - TOML\nDESCRIPTION: This TOML snippet is used to configure Netlify hosting for React Navigation-based SPAs. It sets up a redirect rule in netlify.toml to serve index.html for all routes, ensuring client-side routing works without server 404 errors. The configuration must be placed at the project root, and Netlify will automatically apply this redirect for single-page application compatibility.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/web-support.md#2025-04-23_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n```\n\n----------------------------------------\n\nTITLE: Rendering Transitioner Component in React\nDESCRIPTION: Example of how to use the Transitioner component within a React component's render method. It demonstrates setting up the required props for Transitioner.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/transitioner.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyNavView extends Component {\n  ...\n  render() {\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        navigation={this.props.navigation}\n        render={this._render}\n        onTransitionStart={this.onTransitionStart}\n        onTransitionEnd={this.onTransitionEnd}\n      />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator with Static API in React Navigation 7.0\nDESCRIPTION: Demonstrates the new static API for configuring a Stack Navigator in React Navigation 7.0. This simplified configuration uses a configuration object to define screens, similar to React Navigation 4.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-06-27-react-navigation-7.0-rc.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: Home,\n    },\n    Profile: {\n      screen: Profile,\n    },\n    Settings: {\n      screen: Settings,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modified Screen Component for TabNavigator\nDESCRIPTION: This shows a modified version of Screen2 for use in a TabNavigator. It doesn't include the StatusBar component directly since StatusBar configs are handled through the navigation events instead.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n        {/* <Button\n          title=\"Toggle Drawer\"\n          onPress={() => this.props.navigation.navigate('DrawerToggle')}\n        /> */}\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Scheme in app.json for Deep Linking\nDESCRIPTION: This JSON configuration specifies the URI scheme for an Expo app, which is necessary for deep linking to work.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Setting Tab Options from Nested Stack Screens (React Navigation/JavaScript)\nDESCRIPTION: This snippet demonstrates an incorrect approach where `tabBarLabel` options for a parent `TabNavigator` are defined within the screens (`A`, `B`) of nested `NativeStackNavigators` (`HomeStack`, `SettingsStack`). This fails because options can only be set by a navigator's direct screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen-options-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createTabNavigator();\nconst HomeStack = createNativeStackNavigator();\nconst SettingsStack = createNativeStackNavigator();\n\nfunction HomeStackScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen\n        name=\"A\"\n        component={A}\n        options={{ tabBarLabel: 'Home!' }}\n      />\n    </HomeStack.Navigator>\n  );\n}\n\nfunction SettingsStackScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen\n        name=\"B\"\n        component={B}\n        options={{ tabBarLabel: 'Settings!' }}\n      />\n    </SettingsStack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeStackScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsStackScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Gesture Libraries\nDESCRIPTION: Commands to install gesture handler and reanimated libraries for Expo and bare React Native projects\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Navigating Routes with NavigationActions in React Navigation\nDESCRIPTION: Demonstrates how to create and dispatch a navigation action to navigate to a Profile route with optional params and nested navigation. Uses NavigationActions.navigate() with routeName, params, and nested action parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Installing Core React Navigation 4 Packages via npm/yarn\nDESCRIPTION: Installs the main `react-navigation` package and the extracted navigator packages (`react-navigation-stack`, `react-navigation-tabs`, `react-navigation-drawer`) compatible with v3.x code structure. This is the first step in upgrading from React Navigation 3.x to 4.x.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation react-navigation-stack@^1.7.3 react-navigation-tabs@^1.2.0 react-navigation-drawer@^1.4.0\n```\n\n----------------------------------------\n\nTITLE: Navigation State Structure Example in React Navigation\nDESCRIPTION: Shows the typical structure of a navigation state object containing routes and active index.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/glossary-of-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'StackRouterRoot',\n  index: 1,\n  routes: [\n    { key: 'A', routeName: 'Home' },\n    { key: 'B', routeName: 'Profile' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Popping to Top of Navigation Stack in React Navigation\nDESCRIPTION: Demonstrates how to use StackActions.popToTop() to navigate back to the first screen in the stack, dismissing all other screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(StackActions.popToTop());\n```\n\n----------------------------------------\n\nTITLE: Custom Themed Bottom Tab Bar for React Navigation (JSX)\nDESCRIPTION: This snippet illustrates how to create a fully themed bottom tab bar for a React Navigation tab navigator by overriding the default tab bar component. It defines a `ThemedBottomTabBar` class that uses context to set `activeTintColor`, `inactiveTintColor`, and `backgroundColor` of the tab bar according to the current theme. This component is provided to the navigator as `tabBarComponent`. Required dependencies include React Navigation and React Native. The approach allows dynamic updating of tab bar styles in response to theme changes, with inputs being the theme in context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n  createAppContainer,\n  createStackNavigator,\n  createBottomTabNavigator,\n  BottomTabBar,\n  ThemeContext,\n} from 'react-navigation';\n\nconst ThemeConstants = {\n  light: {\n    backgroundColor: '#fff',\n    fontColor: '#000',\n    activeTintColor: 'blue',\n    inactiveTintColor: '#ccc',\n  },\n  dark: {\n    backgroundColor: '#000',\n    fontColor: '#fff',\n    activeTintColor: '#fff',\n    inactiveTintColor: '#888',\n  },\n};\n\n// Notice how we override the `activeTintColor`, `inactiveTintColor` and\n// `backgroundColor` of the tab bar with our theme styles.\nclass ThemedBottomTabBar extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {({ theme }) => (\n          <BottomTabBar\n            {...this.props}\n            activeTintColor={ThemeConstants[theme].activeTintColor}\n            inactiveTintColor={ThemeConstants[theme].inactiveTintColor}\n            style={{\n              backgroundColor: ThemeConstants[theme].backgroundColor,\n            }}\n          />\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\nconst Stack = createStackNavigator({ Home: HomeScreen });\nconst Tabs = createBottomTabNavigator(\n  { Stack },\n  { tabBarComponent: ThemedBottomTabBar }\n);\nconst Navigation = createAppContainer(Tabs);\n\n// And the rest of the code goes here...\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Options\nDESCRIPTION: Example of customizing tab bar appearance including active/inactive colors, label styles, and background colors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Setting Tab Options within Nested Stacks (Static)\nDESCRIPTION: Demonstrates an incorrect attempt to set `tabBarLabel` for a `createBottomTabNavigator` by placing the `options` within the screen definitions of the nested `createNativeStackNavigator`. This approach fails because options for the Tab Navigator must be set on its direct screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// codeblock-focus-start\nconst HomeStackScreen = createNativeStackNavigator({\n  screens: {\n    A: {\n      screen: A,\n      options: {\n        tabBarLabel: 'Home',\n      },\n    },\n  },\n});\n\nconst SettingsStackScreen = createNativeStackNavigator({\n  screens: {\n    B: {\n      screen: B,\n      options: {\n        tabBarLabel: 'Settings!',\n      },\n    },\n  },\n});\n\nconst Tab = createBottomTabNavigator({\n  screens: {\n    Home: HomeStackScreen,\n    Settings: SettingsStackScreen,\n  },\n});\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Level Navigation with React References\nDESCRIPTION: Example showing how to implement navigation at the top level component using React refs. This pattern allows calling navigation methods directly from the component where the navigator is declared. This approach should only be used for top-level navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-navigator-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst AppNavigator = createStackNavigator(SomeAppRouteConfigs);\n\nclass App extends React.Component {\n  someEvent() {\n    // call navigate for AppNavigator here:\n    this.navigator &&\n      this.navigator.dispatch(\n        NavigationActions.navigate({ routeName: someRouteName })\n      );\n  }\n  render() {\n    return (\n      <AppNavigator\n        ref={(nav) => {\n          this.navigator = nav;\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation State Persistence Setup\nDESCRIPTION: Basic implementation of navigation state persistence using persistenceKey prop with a Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/state-persistence.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({...});\n\nconst App = () => <AppNavigator persistenceKey={\"NavigationState\"} />;\n```\n\n----------------------------------------\n\nTITLE: Passing Redux state as navigation parameter\nDESCRIPTION: Shows how to pass Redux state from a connected component to another screen as a navigation parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/redux-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  title=\"Go to static counter screen\"\n  onPress={() =>\n    props.navigation.navigate('StaticCounter', {\n      count,\n    })\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Options - React Navigation\nDESCRIPTION: Example configuration for tab bar styling including font size, tab width, and background color customization.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/material-top-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Navigation and Paper Provider Setup\nDESCRIPTION: Complete setup combining both React Navigation Container and React Native Paper Provider components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Main from './src/Main';\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <NavigationContainer>\n        <Main />\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Navigation in React Navigation\nDESCRIPTION: Example showing how to import and use the Link component from React Navigation to navigate to a profile screen using a path. The Link component preserves default browser anchor tag behaviors like opening in new tabs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/link.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  return <Link to=\"/profile/jane\">Go to Jane's profile</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Layout Prop for Error Boundary and Suspense\nDESCRIPTION: Example demonstrating the new layout prop for screens to provide error boundaries and suspense fallbacks without requiring HOCs for each screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"MyScreen\"\n  component={MyScreenComponent}\n  layout={({ children }) => (\n    <ErrorBoundary>\n      <React.Suspense\n        fallback={\n          <View style={styles.fallback}>\n            <Text style={styles.text}>Loading‚Ä¶</Text>\n          </View>\n        }\n      >\n        {children}\n      </React.Suspense>\n    </ErrorBoundary>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Transition Modes in Stack Navigator\nDESCRIPTION: Creates a Stack Navigator with route-specific transition modes using a custom transition configuration. It determines whether to use modal or card transitions based on the route name, allowing specific screens to have modal transitions while others use the default card transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStackNavigator,\n  StackViewTransitionConfigs,\n} from 'react-navigation';\n\n/* The screens you add to IOS_MODAL_ROUTES will have the modal transition.  */\nconst IOS_MODAL_ROUTES = ['OptionsScreen'];\n\nlet dynamicModalTransition = (transitionProps, prevTransitionProps) => {\n  const isModal = IOS_MODAL_ROUTES.some(\n    (screenName) =>\n      screenName === transitionProps.scene.route.routeName ||\n      (prevTransitionProps &&\n        screenName === prevTransitionProps.scene.route.routeName)\n  );\n  return StackViewTransitionConfigs.defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n};\n\nconst HomeStack = createStackNavigator(\n  { DetailScreen, HomeScreen, OptionsScreen },\n  { initialRouteName: 'HomeScreen', transitionConfig: dynamicModalTransition }\n);\n```\n\n----------------------------------------\n\nTITLE: Using useIsFocused Hook (Static Config) in React Native\nDESCRIPTION: Shows how to use the `useIsFocused` hook from React Navigation within a statically configured setup. The hook returns a boolean value indicating if the screen is currently focused, which is then used to conditionally render text ('focused' or 'unfocused').\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/function-after-focusing-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { useIsFocused, createStaticNavigation } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\n// codeblock-focus-start\nfunction ProfileScreen() {\n  // codeblock-focus-end\n  // This hook returns `true` if the screen is focused, `false` otherwise\n  // codeblock-focus-start\n  const isFocused = useIsFocused();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{isFocused ? 'focused' : 'unfocused'}</Text>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return <View />;}\n\nconst MyTabs = createMaterialTopTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(MyTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Navigation Event Listeners (JavaScript)\nDESCRIPTION: Demonstrates subscribing to navigation lifecycle events such as 'didBlur' using the 'addListener' method. This code should be used in a screen component with access to props.navigation. The listener will invoke a callback when the event occurs (e.g., when the screen is blurred), and can be unsubscribed from by calling 'remove' on the returned subscription. Inputs: event name ('didBlur'), callback function; outputs: subscription object for later removal.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst didBlurSubscription = this.props.navigation.addListener(\n  'didBlur',\n  (payload) => {\n    console.debug('didBlur', payload);\n  }\n);\n\n// Remove the listener when you are done\ndidBlurSubscription.remove();\n```\n\n----------------------------------------\n\nTITLE: Fetching Route Params Using useRoute Hook - React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to leverage the useRoute hook from @react-navigation/native within a functional React Native component to extract route parameters and display them in a Text component. It requires React Native and the React Navigation library as dependencies. The route object holds all route-specific data, and developers can access values like route.params.caption for rendering or logic. The snippet assumes the screen is within a navigation stack and route parameters are properly supplied.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-route.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\\nimport { Text } from 'react-native';\\nimport { useRoute } from '@react-navigation/native';\\n\\nfunction MyText() {\\n  const route = useRoute();\\n\\n  return <Text>{route.params.caption}</Text>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-based StatusBar Configuration in Stack Navigator\nDESCRIPTION: A complete example showing how to set different status bar colors and styles based on the current screen in a Stack Navigator. The example uses React Navigation with SafeAreaView to properly handle status bar appearance changes between a light and dark themed screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, StatusBar, Button, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport SafeAreaView from 'react-native-safe-area-view';\n\nfunction Screen1({ navigation }) {\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen2')}\n        color=\"#fff\"\n      />\n    </SafeAreaView>\n  );\n}\n\nfunction Screen2({ navigation }) {\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen1')}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator headerMode=\"none\">\n          <Stack.Screen name=\"Screen1\" component={Screen1} />\n          <Stack.Screen name=\"Screen2\" component={Screen2} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up React Navigation Repository\nDESCRIPTION: Commands to fork, clone, and set up the React Navigation repository locally. This includes adding the upstream remote and installing dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/react-navigation.git\ncd react-navigation\ngit remote add upstream https://github.com/react-community/react-navigation.git\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Top Tab Navigator with Dynamic Configuration\nDESCRIPTION: Example of setting up Material Top Tabs Navigator with dynamic configuration using React Navigation's component-based API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst Tab = createMaterialTopTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Website in Production Mode\nDESCRIPTION: Command to run the React Navigation website in production mode with server rendering. This is useful for testing production builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run prod\n```\n\n----------------------------------------\n\nTITLE: Navigation State Structure Example - React Navigation (JavaScript)\nDESCRIPTION: This snippet describes the structure of the navigation state object provided to navigators, detailing fields such as index, routes, routeName, key, and params. It is not executable code but serves as a template or reference for implementers working with navigation state. No dependencies beyond understanding React Navigation state conventions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-navigators.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  index: 1, // identifies which route in the routes array is active\n  routes: [\n    {\n      // Each route needs a name, which routers will use to associate each route\n      // with a react component\n      routeName: 'MyRouteName',\n\n      // A unique id for this route, used to keep order in the routes array:\n      key: 'myroute-123',\n\n      // Routes can have any additional data. The included routers have `params`\n      ...customRouteData,\n    },\n    ...moreRoutes,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Screen with Name and Component in JSX\nDESCRIPTION: Illustrates the essential usage of the `Screen` component, providing the required `name` prop (a string identifier for the screen) and the `component` prop (the React component to render for this screen).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen name=\"Profile\" component={ProfileScreen} />\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links with adb on Android Emulator or Device\nDESCRIPTION: This snippet shows how to use the adb command to test deep links on an Android emulator or connected device. It includes examples for a regular app and an Expo client app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d [your deep link] [your android package name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d \"example://chat/jane\" com.simpleapp\n```\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/chat/jane\" host.exp.exponent\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator in React Navigation 2.0\nDESCRIPTION: Demonstrates the new syntax for creating a stack navigator in React Navigation 2.0, using a function instead of a constructor-like call.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-05-07-react-navigation-2.0.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateStackNavigator()\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Accessing State with navigation.getState in JavaScript (React)\nDESCRIPTION: Illustrates an incorrect approach to getting reactive navigation state within a React component using `navigation.getState()`. This method retrieves the state at the time of render but does not subscribe to updates, so the component won't re-render when the state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-navigation-state.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile() {\n  const routesLength = navigation.getState().routes.length; // Don't do this\n\n  return <Text>Number of routes: {routesLength}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Multiple Navigators in React Navigation\nDESCRIPTION: This snippet demonstrates an incorrect way of rendering multiple navigators, where a navigator is rendered inside a screen component of another navigator. This approach leads to isolated navigation states and inability to interact with the parent navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/common-mistakes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default App extends React.Component {\n  render() {\n    /* In the root component we are rendering the app navigator */\n    return <AppNavigator />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\n\nclass AuthenticationScreen extends React.Component {\n  render() {\n    /*\n     * In a screen inside of the navigator we are rendering another navigator\n     * You should avoid this! It will have its own navigation state and be unable\n     * To interact with any parent navigator, eg: it would not know the route \"Home\" exists\n     */\n    return (\n      <AuthenticationNavigator />\n    );\n  }\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthenticationScreen, // This screen renders a navigator!\n  Home: HomeScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Stack Action: Returning to Top of Stack with popToTop (JavaScript)\nDESCRIPTION: Invokes 'popToTop' to reset navigation history and return to the initial route of the stack navigator. No inputs; output is navigation state reset to root screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.popToTop();\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Routes\nDESCRIPTION: Stack navigator configuration that defines the routes for Screen1 and Screen2 with no headers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createStackNavigator(\n  {\n    Screen1: {\n      screen: Screen1,\n    },\n    Screen2: {\n      screen: Screen2,\n    },\n  },\n  {\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding Shared NavigationOptions in React Navigation\nDESCRIPTION: Demonstrates how to override shared navigationOptions for a specific screen by merging them with the screen's own navigationOptions in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  static navigationOptions = ({ navigation, navigationOptions }) => {\n    const { params } = navigation.state;\n\n    return {\n      title: params ? params.otherParam : 'A Nested Details Screen',\n      /* These values are used instead of the shared configuration! */\n      headerStyle: {\n        backgroundColor: navigationOptions.headerTintColor,\n      },\n      headerTintColor: navigationOptions.headerStyle.backgroundColor,\n    };\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional native import of gesture-handler - JavaScript (React Native)\nDESCRIPTION: Creates a module (gesture-handler.native.js) that imports react-native-gesture-handler only on native platforms (iOS/Android). This is intended to be part of platform-specific code splitting and helps avoid unnecessary imports on web targets. No exports are needed; simply placing the import side-effect is sufficient.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Only import react-native-gesture-handler on native platforms\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Navigator Implementation in React Navigation\nDESCRIPTION: Example showing incorrect implementation of rendering multiple navigators within components. This anti-pattern demonstrates nested navigator creation that leads to isolated navigation states.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/common-mistakes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    /* In the root component we are rendering the app navigator */\n    return <AppContainer />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AuthenticationContainer = createAppContainer(AuthenticationNavigator);\n\nclass AuthenticationScreen extends React.Component {\n  render() {\n    /*\n     * In a screen inside of the navigator we are rendering another navigator\n     * You should avoid this! It will have its own navigation state and be unable\n     * To interact with any parent navigator, eg: it would not know the route \"Home\" exists\n     */\n    return <AuthenticationContainer />;\n  }\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthenticationScreen, // This screen renders a navigator!\n  Home: HomeScreen,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Using defaultNavigationOptions instead of navigationOptions in React Navigation 3.0\nDESCRIPTION: Shows how to update navigator configuration from using navigationOptions to defaultNavigationOptions in React Navigation 3.0. This breaking change affects how default options are set for screens inside a navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-01-react-navigation-3.0-rc.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    Feed: ExampleScreen,\n    Profile: ExampleScreen,\n  },\n  {\n    defaultNavigationOptions: {\n      headerTintColor: '#fff',\n      headerStyle: {\n        backgroundColor: '#000',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive Param List in TypeScript\nDESCRIPTION: Expands the `RootStackParamList` type to include multiple routes ('Home', 'Profile', 'Feed'). It demonstrates routes with no parameters (`undefined`) and routes with optional parameters (`{ sort: 'latest' | 'top' } | undefined`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Feed: { sort: 'latest' | 'top' } | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up React Navigation Repository\nDESCRIPTION: Commands to clone the React Navigation repository, set up the upstream remote, and install dependencies using yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/navigation-ex.git\ncd navigation-ex\ngit remote add upstream https://github.com/react-navigation/react-navigation.git\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Bare React Native Project\nDESCRIPTION: Command to install required dependencies for React Navigation in a bare React Native project using npm.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Checking Dependency Tree with npm (Bash)\nDESCRIPTION: This command lists occurrences of `react-native-safe-area-context` in the dependency tree using npm. Similar to `yarn why`, it helps find which packages depend on it when troubleshooting version conflicts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm ls react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up React Navigation Repository\nDESCRIPTION: Commands to fork, clone, and set up the React Navigation repository locally. This includes adding the upstream remote and installing dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<USERNAME>/react-navigation.git\ncd react-navigation\ngit remote add upstream https://github.com/react-community/react-navigation.git\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Comparing Programmatic Web Navigation (JSX)\nDESCRIPTION: Demonstrates programmatic navigation in a web context using an `onClick` handler and JavaScript's `document.location.href`. This illustrates an alternative web navigation method closer to React Navigation's imperative API, although using global document properties which React Navigation avoids.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<a onClick={() => { document.location.href = \"details.html\"; }}>Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Opening Drawer in React Navigation 2.0\nDESCRIPTION: Shows the new method for opening a drawer in React Navigation 2.0, replacing the previous route-based approach with a direct action.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-05-07-react-navigation-2.0.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.openDrawer()\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Tab Icons in React Native\nDESCRIPTION: This snippet demonstrates how to add badges to tab icons using a custom IconWithBadge component. It uses absolute positioning to place the badge on top of the icon.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class IconWithBadge extends React.Component {\n  render() {\n    const { name, badgeCount, color, size } = this.props;\n    return (\n      <View style={{ width: 24, height: 24, margin: 5 }}>\n        <Ionicons name={name} size={size} color={color} />\n        {badgeCount > 0 && (\n          <View\n            style={{\n              position: 'absolute',\n              right: -6,\n              top: -3,\n              backgroundColor: 'red',\n              borderRadius: 6,\n              width: 12,\n              height: 12,\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>\n              {badgeCount}\n            </Text>\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst HomeIconWithBadge = (props) => {\n  return <IconWithBadge {...props} badgeCount={3} />;\n};\nexport default HomeIconWithBadge;\n```\n\n----------------------------------------\n\nTITLE: MainActivity.java: Override onCreate (Java)\nDESCRIPTION: This Java code snippet shows how to override the onCreate method in MainActivity.java to avoid crashes related to View state being not persisted consistently across Activity restarts on Android. This modification is required by `react-native-screens`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends ReactActivity {\n  // ...\n  // highlight-start\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(null);\n  }\n  // highlight-end\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useHeaderHeight Hook in React Navigation (JavaScript/React)\nDESCRIPTION: Illustrates the usage of the `useHeaderHeight` hook from `@react-navigation/elements` within a React functional component. This hook provides a more direct way to access the height of the nearest visible header compared to the context consumer. Requires the `@react-navigation/elements` package and a React functional component context. Returns the header height as a number.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { useHeaderHeight } from '@react-navigation/elements';\n\n// ...\n\nconst headerHeight = useHeaderHeight();\n```\n\n----------------------------------------\n\nTITLE: Advanced Navigator Extension with Custom Behavior\nDESCRIPTION: Demonstrates extending a stack navigator with custom action handling, state management, and additional rendering capabilities.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createStackNavigator({ ... });\n\nclass CustomNavigator extends React.Component {\n  static router = {\n    ...MyStack.router,\n    getStateForAction: (action, lastState) => {\n      // check for custom actions and return a different navigation state.\n      return MyStack.router.getStateForAction(action, lastState);\n    },\n  };\n  componentDidUpdate(lastProps) {\n    // Navigation state has changed from lastProps.navigation.state to this.props.navigation.state\n  }\n  render() {\n    const { navigation } = this.props;\n\n    return (\n      <View>\n        <MyStack navigation={navigation} />\n        {...}\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying navigationOptions as a Static Property (Class Component, JavaScript)\nDESCRIPTION: Demonstrates React Navigation 4.x's class-based screen with static navigationOptions property to configure the screen header. Dependency: react-navigation. Static options disable header, but are less flexible and discouraged in 5.x onward. Input: none, options hard-coded. Output: modifies screen header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nclass ProfileScreen extends React.Component {\\n  static navigationOptions = {\\n    headerShown: false,\\n  };\\n\\n  render() {\\n    // ...\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Screen Implementation\nDESCRIPTION: Demonstrates basic usage of the navigate function in a React component to move between screens with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { navigate } = this.props.navigation;\n\n    return (\n      <View>\n        <Text>This is the home screen of the app</Text>\n        <Button\n          onPress={() => navigate('Profile', { name: 'Brent' })}\n          title=\"Go to Brent's profile\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Babel Config for React Native - JavaScript\nDESCRIPTION: This configuration sets up Babel for standard React Native projects, using just the 'module:metro-react-native-babel-preset' preset. It ensures compatibility and avoids issues with class property transformations by not including plugins with non-standard behavior. Save as babel.config.js in the project root. No additional plugins should be included unless necessary.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cocoapods Dependencies for iOS\nDESCRIPTION: Commands to install Cocoapods dependencies for iOS projects using React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Navigation State Structure Example in React Navigation\nDESCRIPTION: Example showing the structure of a navigation state object with routes and active index.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/glossary-of-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'StackRouterRoot',\n  index: 1,\n  routes: [\n    { key: 'A', routeName: 'Home' },\n    { key: 'B', routeName: 'Profile' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Router State Example with Multiple Routes\nDESCRIPTION: Example of router state configuration with multiple routes defined.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1,\n  routes: [\n    { key: 'A', routeName: 'Foo' },\n    { key: 'B', routeName: 'Bar' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Android Notch Handling\nDESCRIPTION: Example of handling Android device notches using react-native-device-info and SafeAreaView configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/handling-iphonex.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { SafeAreaView } from 'react-navigation';\nimport DeviceInfo from 'react-native-device-info';\n\nif (Platform.OS === 'android' && DeviceInfo.hasNotch()) {\n  SafeAreaView\n    .setStatusBarHeight\n    /* Some value for status bar height + notch height */\n    ();\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Navigation Actions via getStateForAction in StackRouter (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use getStateForAction to block navigation from occurring, such as preventing a back action if the user is editing. It checks specific conditions (i.e., action type and params) and returns null to signify blocked navigation. This requires NavigationActions and StackRouter from react-navigation, and assumes the router is configured as shown.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/routers.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyStackRouter = StackRouter(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyStackRouter.router.getStateForAction;\n\nMyStackRouter.router.getStateForAction = (action, state) => {\n  if (\n    state &&\n    action.type === NavigationActions.BACK &&\n    state.routes[state.index].params.isEditing\n  ) {\n    // Returning null from getStateForAction means that the action\n    // has been handled/blocked, but there is not a new state\n    return null;\n  }\n\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Scenes in React Navigation Transitioner\nDESCRIPTION: Example of how to implement the render prop for Transitioner. It demonstrates rendering a stack of scenes and creating a cross-fade animation during transitions using Animated.View.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/transitioner.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n_render(transitionProps, prevTransitionProps) {\n  const scenes = transitionProps.scenes.map(scene => this._renderScene(transitionProps, scene));\n  return (\n    <View style={styles.stack}>\n      {scenes}\n    </View>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n_renderScene(transitionProps, scene) {\n  const { position } = transitionProps;\n  const { index } = scene;\n  const opacity = position.interpolate({\n    inputRange: [index-1, index, index+1],\n    outputRange: [0, 1, 0],\n  });\n  // The prop `router` is populated when we call `createNavigator`.\n  const Scene = this.props.router.getComponent(scene.route.routeName);\n  return (\n    <Animated.View style={{ opacity }}>\n      { Scene }\n    </Animated.View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Stack Navigator in JavaScript\nDESCRIPTION: Example of defining route configurations for a stack navigator. It shows how to set up a Profile screen with custom navigation options and deep linking path.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateStackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Navigation Options in Nested Navigators\nDESCRIPTION: Example showing incorrect placement of navigationOptions in nested navigator setup where tabBarLabel is not applied because it's set on screens inside stacks rather than on the stack components themselves.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Home!',\n  };\n\n  // etc..\n}\n\nclass B extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Settings!',\n  };\n\n  // etc..\n}\n\nconst HomeStack = createStackNavigator({ A });\nconst SettingsStack = createStackNavigator({ B });\n\nexport default createAppContainer(\n  createBottomTabNavigator({\n    HomeStack,\n    SettingsStack,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Partial Navigation State in JavaScript\nDESCRIPTION: This JavaScript object represents a minimal, partial navigation state containing only the `routes` array with screen names. It lacks keys, index, type, and other properties, relying on React Navigation's rehydration mechanism to automatically fill in the missing details and create a valid state object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-state.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  routes: [{ name: 'Home' }, { name: 'Profile' }],\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Linking Dependencies for React Native 0.59 and Lower\nDESCRIPTION: Commands to manually link react-native-reanimated and react-native-gesture-handler for older React Native versions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-reanimated\nreact-native link react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Material Top Tab Navigator - TabBar Options Configuration\nDESCRIPTION: Example configuration of tabBarOptions showing customization of label style, tab width, and background color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/material-top-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Theming Tab Navigators with Custom Components\nDESCRIPTION: Implementation of theming for bottom tab navigators by creating a custom tab bar component that consumes the theme context. This approach works for navigators that are configured at initialization time rather than through navigationOptions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  createAppContainer,\n  createStackNavigator,\n  createBottomTabNavigator,\n  BottomTabBar,\n} from 'react-navigation';\n\nconst ThemeConstants = {\n  light: {\n    backgroundColor: '#fff',\n    fontColor: '#000',\n    activeTintColor: 'blue',\n    inactiveTintColor: '#ccc',\n  },\n  dark: {\n    backgroundColor: '#000',\n    fontColor: '#fff',\n    activeTintColor: '#fff',\n    inactiveTintColor: '#888',\n  },\n};\n\n// Notice how we override the `activeTintColor`, `inactiveTintColor` and\n// `backgroundColor` of the tab bar with our theme styles.\nclass ThemedBottomTabBar extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {({ theme }) => (\n          <BottomTabBar\n            {...this.props}\n            activeTintColor={ThemeConstants[theme].activeTintColor}\n            inactiveTintColor={ThemeConstants[theme].inactiveTintColor}\n            style={{\n              backgroundColor: ThemeConstants[theme].backgroundColor,\n            }}\n          />\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\nconst Stack = createStackNavigator({ Home: HomeScreen });\nconst Tabs = createBottomTabNavigator(\n  { Stack },\n  { tabBarComponent: ThemedBottomTabBar }\n);\nconst Navigation = createAppContainer(Tabs);\n\n// And the rest of the code goes here...\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Events from Navigator - React Navigation (JavaScript)\nDESCRIPTION: This snippet highlights how to dispatch custom events from within a navigator using the navigation.emit method. This mechanism allows developers to trigger custom events (such as transitionStart) to child screens, passing custom data and specifying event targets. The navigation object is provided via React Navigation's useNavigationBuilder and other APIs. The event object must include a type, and may include data and a target property. This pattern is essential for advanced custom navigator features or cross-screen event handling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.emit({\\n  type: 'transitionStart',\\n  data: { blurring: false },\\n  target: route.key,\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Gesture Handler and Reanimated for Non-Expo Projects\nDESCRIPTION: Command to install react-native-gesture-handler and react-native-reanimated for non-Expo React Native projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration with Relative Path Matching (JS)\nDESCRIPTION: This code snippet showcases the default behavior of React Navigation, where paths defined for each screen are matched against the URL relative to their parent screen's path. The configuration shows the Home screen defined with path 'feed' and Profile screen with path 'users/:id'. Because Profile is nested inside Home, the url /feed/users/:id will navigate to the Profile screen. This demonstrates how nested paths are resolved by default.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: 'feed',\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Style Consistency\nDESCRIPTION: Command to run ESLint on the project to ensure code style consistency. This helps contributors match the style of the existing codebase.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run eslint\n```\n\n----------------------------------------\n\nTITLE: Replacing navigate with popTo for Backward Navigation in React Navigation 7\nDESCRIPTION: Demonstrates the change from using navigate to popTo for navigating back to a previous screen in the stack. This change is part of the new navigation behavior in React Navigation 7.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- navigation.navigate('PreviousScreen', { foo: 42 });\n+ navigation.popTo('PreviousScreen', { foo: 42 });\n```\n\n----------------------------------------\n\nTITLE: Initializing Top-Level Navigator Ref in React Navigation JavaScript\nDESCRIPTION: This snippet shows how to create a top-level Stack Navigator using `createStackNavigator` and `createAppContainer`. It demonstrates capturing a reference (`ref`) to the `AppContainer` instance and passing it to `NavigationService.setTopLevelNavigator` within the `App` component's `render` method, enabling navigation control from outside the component hierarchy. Depends on `react-navigation` and a custom `./NavigationService` module.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\n\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\nimport NavigationService from './NavigationService';\n\nconst TopLevelNavigator = createStackNavigator({\n  /* ... */\n});\n\nconst AppContainer = createAppContainer(TopLevelNavigator);\n\nexport default class App extends React.Component {\n  // ...\n\n  render() {\n    return (\n      <AppContainer\n        ref={(navigatorRef) => {\n          NavigationService.setTopLevelNavigator(navigatorRef);\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Navigator Package for React Navigation\nDESCRIPTION: Command to install the drawer navigator package for React Navigation v5.x using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/drawer@^5.x\n```\n\n----------------------------------------\n\nTITLE: Configuring DrawerNavigator with Different Status Bar Styles\nDESCRIPTION: This code demonstrates how to configure a DrawerNavigator with the two screens that have different status bar configurations. The StatusBar component in each screen will handle the style changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default DrawerNavigator({\n  Screen1: {\n    screen: Screen1,\n  },\n  Screen2: {\n    screen: Screen2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Back Action with React Navigation (JavaScript)\nDESCRIPTION: This code imports NavigationActions from react-navigation and demonstrates creating a 'back' action that, when dispatched, navigates back from the specified route identified by key. The key parameter can be a string or null; when set, navigation returns from that specific route, or from any route if left null. This snippet assumes react-navigation is installed and that the navigation prop is used within a component context. The main effect is to pop the navigation stack and return to the previous screen; the output is silent if the stack cannot be popped.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\\n\\nconst backAction = NavigationActions.back({\\n  key: 'Profile',\\n});\\nthis.props.navigation.dispatch(backAction);\n```\n\n----------------------------------------\n\nTITLE: Using StatusCodeContext in Server Rendering\nDESCRIPTION: Integration of StatusCodeContext with ServerContainer to properly set HTTP status codes in server responses based on the rendered screen's requirements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Create a status object\nconst status = { code: 200 };\n\nconst html = ReactDOMServer.renderToString(\n  // Pass the status object via context\n  <StatusCodeContext.Provider value={status}>\n    <ServerContainer ref={ref} location={location}>\n      {element}\n    </ServerContainer>\n  </StatusCodeContext.Provider>\n);\n\n// After rendering, get the status code and use it for server's response\nctx.status = status.code;\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Helper Methods for Pop to Top\nDESCRIPTION: Example of using the popToTop navigation method to remove all screens except the first one in the stack and navigate to it.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.popToTop();\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Navigator Routes\nDESCRIPTION: Drawer navigator configuration that defines the routes for Screen1 and Screen2.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createDrawerNavigator({\n  Screen1: {\n    screen: Screen1,\n  },\n  Screen2: {\n    screen: Screen2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Screen Group Layout with Error Handling\nDESCRIPTION: Example showing how to use screenLayout prop on a group of screens to provide consistent error handling and loading states for multiple screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Group\n  screenLayout={({ children }) => (\n    <ErrorBoundary>\n      <React.Suspense\n        fallback={\n          <View style={styles.fallback}>\n            <Text style={styles.text}>Loading‚Ä¶</Text>\n          </View>\n        }\n      >\n        {children}\n      </React.Suspense>\n    </ErrorBoundary>\n  )}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Running Jest Test Suite in Watch Mode using Bash\nDESCRIPTION: Executes the Jest test suite via Yarn in watch mode. This command monitors code files for changes and automatically re-runs relevant tests, providing quick feedback during the development and testing cycle.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --watch\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in Screen Options\nDESCRIPTION: Example showing how to use the theme object now available in the options callback to style UI elements in React Navigation 7.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Details\"\n  component={DetailsScreen}\n  options={({ theme }) => ({\n    headerRight: () => (\n      <IconButton\n        icon=\"dots-horizontal\"\n        onPress={() => {}}\n        color={theme.colors.primary}\n      />\n    ),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom URI Handling in React Navigation\nDESCRIPTION: Demonstrates how to extend the router to handle custom URIs by implementing custom getActionForPathAndParams logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/routers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyApp = createStackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\nconst previousGetActionForPathAndParams =\n  MyApp.router.getActionForPathAndParams;\n\nObject.assign(MyApp.router, {\n  getActionForPathAndParams(path, params) {\n    if (path === 'my/custom/path' && params.magic === 'yes') {\n      // returns a profile navigate action for /my/custom/path?magic=yes\n      return NavigationActions.navigate({\n        routeName: 'Profile',\n        action: NavigationActions.navigate({\n          // This child action will get passed to the child router\n          // ProfileScreen.router.getStateForAction to get the child\n          // navigation state.\n          routeName: 'Friends',\n        }),\n      });\n    }\n    return previousGetActionForPathAndParams(path, params);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing react-navigation-drawer via npm in Bash\nDESCRIPTION: This command installs the react-navigation-drawer package using npm, which is required for implementing drawer navigation in a React Navigation project. It should be run in the terminal at the root of your React Native or React project. Ensure you have react-navigation and related dependencies installed before running the command. No input or output aside from library installation; requires npm to be available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-drawer\n```\n\n----------------------------------------\n\nTITLE: Creating gesture-handler.js for Web Compatibility\nDESCRIPTION: Creates an empty file named `gesture-handler.js`. This file acts as a placeholder for web builds, ensuring that the import statement in the main application entry point resolves without error but does not include the `react-native-gesture-handler` library, as it's not used by this drawer layout on the web.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Don't import react-native-gesture-handler on web\n```\n\n----------------------------------------\n\nTITLE: Using Pre-made Transition Specs\nDESCRIPTION: Example of using built-in transition specifications from react-navigation-stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionSpecs } from 'react-navigation-stack';\n\n// ...\n\nstatic navigationOptions = {\n  title: 'Profile',\n  transitionSpec: {\n    open: TransitionSpecs.TransitionIOSSpec,\n    close: TransitionSpecs.TransitionIOSSpec,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Navigation Options in React Component\nDESCRIPTION: Demonstrates how to set static navigation options directly on a React component class.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Great',\n  };\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating HTML-like navigation with onClick event\nDESCRIPTION: An example showing how navigation would work in a web browser using an onClick event handler to change location.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a onClick={() => { document.location.href = \"details.html\"; }}>Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Using useLinkBuilder hook to build hrefs/actions (JavaScript)\nDESCRIPTION: This snippet shows usage of the new object-returning useLinkBuilder hook in React Navigation, which now provides 'buildHref' and 'buildAction' functions instead of a single builder function. It depends on React Navigation >= the version introducing this change. 'buildHref' receives a screen name and parameters, returning a path string; 'buildAction' takes a path string and returns a navigation action object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst { buildHref, buildAction } = useLinkBuilder();\\n\\nconst href = buildHref('Details', { foo: 42 }); // '/details?foo=42'\\nconst action = buildAction('/details?foo=42'); // { type: 'NAVIGATE', payload: { name: 'Details', params: { foo: 42 } } }\n```\n\n----------------------------------------\n\nTITLE: Applying Screen Tracking Middleware to Redux Store in React Navigation\nDESCRIPTION: This snippet shows how to apply the screen tracking middleware when creating the Redux store. It combines the navigation reducer with other reducers and applies the screenTracking middleware along with any other middleware.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/screen-tracking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = createStore(\n  combineReducers({\n    navigation: navigationReducer,\n    ...\n  }),\n  applyMiddleware(\n    screenTracking,\n    ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Screen Options from ServerContainer Ref\nDESCRIPTION: Shows how to access the options for the currently focused screen after rendering a React Navigation app with ServerContainer. This enables extracting title, meta descriptions, and other screen metadata.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-container.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = ref.current.getCurrentOptions();\n```\n\n----------------------------------------\n\nTITLE: Using NavigationContext API Reference\nDESCRIPTION: NavigationContext provides access to the navigation object. It's primarily used internally by withNavigation HOC and useNavigation hook to provide navigation capabilities to components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-context.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nNavigationContext\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Transitioner Component in React Navigation\nDESCRIPTION: Basic example showing how to implement the Transitioner component with essential props including configuration, navigation, rendering, and transition handlers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/transitioner.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyNavView extends Component {\n  ...\n  render() {\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        navigation={this.props.navigation}\n        render={this._render}\n        onTransitionStart={this.onTransitionStart}\n        onTransitionEnd={this.onTransitionEnd}\n      />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation DevTools Package\nDESCRIPTION: Command to install the @react-navigation/devtools package for debugging capabilities.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/devtools.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/devtools@^6.x\n```\n\n----------------------------------------\n\nTITLE: Optimized Scene Rendering in TabView using Component Extraction (JavaScript)\nDESCRIPTION: This optimization snippet extracts each scene into a separate component (e.g., HomeComponent), returning it from the renderScene switch. This allows for memoization and prevents unnecessary rerenders if scenes are independent of the tab index. Expects external scene component definitions and route keys mapping to components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return <HomeComponent />;\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Expo Managed Projects\nDESCRIPTION: Command using `npx expo install` to add and link required dependencies (`react-native-gesture-handler` and `react-native-reanimated`) in an Expo managed project. This ensures compatibility and proper linking within the Expo ecosystem. Requires Expo CLI installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Gesture Handler Import (Web)\nDESCRIPTION: Creates an empty file named `gesture-handler.js`. This file is used in the conditional import setup to prevent `react-native-gesture-handler` from being included in web bundles, where it's not needed by the drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Don't import react-native-gesture-handler on web\n```\n\n----------------------------------------\n\nTITLE: Example of Navigation Prop Access Error\nDESCRIPTION: Demonstrates a component that will throw an error due to undefined navigation prop, showing the incorrect way of implementing navigation access.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/connecting-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\n\nexport default class MyBackButton extends React.Component {\n  render() {\n    // This will throw an 'undefined is not a function' exception because the navigation\n    // prop is undefined.\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator in React Navigation 2.0\nDESCRIPTION: Shows how to create a bottom tab navigator in React Navigation 2.0, which is now a separate component from the general tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-05-07-react-navigation-2.0.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateBottomTabNavigator()\n```\n\n----------------------------------------\n\nTITLE: Navigating from Home to Details screen in React Navigation\nDESCRIPTION: React Native code for a HomeScreen component that includes a button to navigate to the Details screen using the navigation prop provided by React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { StackNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n\n// ... other code from the previous section\n```\n\n----------------------------------------\n\nTITLE: Defining Static Routes in React Navigation (Pre-v5) using JavaScript\nDESCRIPTION: This JavaScript example demonstrates the standard static definition of navigators (Drawer, Stack, Switch) in React Navigation versions prior to 5. It shows how `createDrawerNavigator`, `createStackNavigator`, and `createSwitchNavigator` are used to build a nested navigation structure, which is then wrapped in `createAppContainer`. This static approach highlights the limitation regarding dynamic route creation discussed in the surrounding text, which was difficult before version 5.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/limitations.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst FriendsNavigator = createDrawerNavigator({\n  Feed: FeedScreen,\n  FriendList: FriendListScreen,\n});\n\nconst AuthNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  App: FriendsNavigator,\n  Auth: AuthNavigator,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default class MyApp extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Stack Navigator\nDESCRIPTION: Code package reference for installing the stack navigator component from its dedicated package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-09-16-react-navigation-4.0.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreact-navigation-stack\n```\n\n----------------------------------------\n\nTITLE: Component with withNavigation HOC\nDESCRIPTION: Solution using withNavigation HOC to automatically provide the navigation prop to any component through React context, eliminating the need to pass navigation explicitly through props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/connecting-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Automatic Deep Linking Path Generation\nDESCRIPTION: Example showing how to enable automatic path generation for deep linking based on screen names.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n    },\n    Profile: {\n      screen: ProfileScreen,\n    },\n    NewsFeed: {\n      screen: NewsFeedScreen,\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nfunction App() {\n  return (\n    <Navigation\n      linking={{\n        prefixes: ['https://example.com', 'example://'],\n        enabled: 'auto',\n      }}\n    >\n      <Navigation />\n    </Navigation>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Stack Navigator Creation to Compatibility Layer (React Navigation, diff, JavaScript)\nDESCRIPTION: This diff snippet demonstrates how to refactor existing code that uses React Navigation 4's createStackNavigator API to employ the compatibility layer for React Navigation 5. The imports shift from 'react-navigation-stack' to '@react-navigation/stack' and '@react-navigation/compat', and the navigator is wrapped with createCompatNavigatorFactory to maintain the v4 API. Key parameters include navigator screen definitions and initial route options. Outputs include a compatible stack navigator. This approach requires the mentioned dependencies from the previous install step and does not support v4-only options deprecated in v5.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/compatibility.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { createStackNavigator } from 'react-navigation-stack';\n+import { createStackNavigator } from '@react-navigation/stack';\n+import { createCompatNavigatorFactory } from '@react-navigation/compat';\n\n-const RootStack = createStackNavigator(\n+const RootStack = createCompatNavigatorFactory(createStackNavigator)(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Profile',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect in React Class Components via a Wrapper\nDESCRIPTION: Provides a pattern for integrating the `useFocusEffect` hook, which is only available in functional components, into a React class component. A separate functional component (`FetchUserData`) encapsulates the `useFocusEffect` logic and is rendered within the class component (`Profile`). Props (`userId`, `onUpdate`) are passed down to the functional component to manage data and callbacks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-focus-effect.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FetchUserData({ userId, onUpdate }) {\n  useFocusEffect(\n    React.useCallback(() => {\n      const unsubscribe = API.subscribe(userId, onUpdate);\n\n      return () => unsubscribe();\n    }, [userId, onUpdate])\n  );\n\n  return null;\n}\n\n// ...\n\nclass Profile extends React.Component {\n  _handleUpdate = (user) => {\n    // Do something with user object\n  };\n\n  render() {\n    return (\n      <>\n        <FetchUserData\n          userId={this.props.userId}\n          onUpdate={this._handleUpdate}\n        />\n        {/* rest of your code */}\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useScrollToTop with a React Class Component via Wrapping (React Native)\nDESCRIPTION: This example demonstrates how to integrate the `useScrollToTop` hook with a React class component, as hooks cannot be used directly within classes. A functional component wrapper is created which initializes a ref using `React.useRef` and calls `useScrollToTop` with it. The ref is then passed down as a prop (`scrollRef`) to the instance of the class component (`Albums`), which subsequently attaches it to its `ScrollView`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-scroll-to-top.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Albums extends React.Component {\n  render() {\n    return <ScrollView ref={this.props.scrollRef}>{/* content */}</ScrollView>;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const ref = React.useRef(null);\n\n  useScrollToTop(ref);\n\n  return <Albums {...props} scrollRef={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Loading Indicator While Restoring Navigation State\nDESCRIPTION: This snippet demonstrates how to display a loading indicator while the persisted navigation state is being restored. It renders an ActivityIndicator component when the isReady state is false.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/state-persistence.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (!isReady) {\n  return <ActivityIndicator />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createSwitchNavigator API in JavaScript\nDESCRIPTION: This snippet shows the basic API structure for creating a switch navigator in React Navigation. It takes RouteConfigs and SwitchNavigatorConfig as parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/switch-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator ID - Dynamic Component - JavaScript\nDESCRIPTION: Assigns a unique 'id' to the Stack.Navigator component for runtime referencing by parent navigators using navigation.getParent. The id prop is set directly on the navigator element. Dependencies remain the same: React, native stack creator, and valid screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator\\n      // highlight-next-line\\n      id=\"RootStack\"\\n    >\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Screens Version Reference\nDESCRIPTION: Reference to the minimum React Navigation version required for react-native-screens support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/supported-react-native-versions.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nreact-navigation@^2.14.0\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependency Version with Yarn Resolutions (JSON)\nDESCRIPTION: This JSON snippet, added to `package.json`, uses yarn's `resolutions` feature to force a specific version of `react-native-safe-area-context` for all dependencies. This is a temporary workaround for version conflicts until library maintainers update their peer dependency ranges.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-safe-area-context\": \"<version you want to use>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the dispatch function to send custom navigation actions to the router.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n  params: {},\n\n  // navigate can have a nested navigate action that will be run inside the child router\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator in React Navigation 2.0\nDESCRIPTION: Example of creating a stack navigator using the new createStackNavigator function in React Navigation 2.0. This demonstrates the new naming convention for navigator creators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-04-06-react-navigation-2.0-rc.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createStackNavigator } from 'react-navigation';\ncreateStackNavigator({routeName: Screen});\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode with Jest - Bash\nDESCRIPTION: Runs the Jest test suite in watch mode via Yarn, automatically re-running tests affected by changed files. This helps developers quickly verify changes and maintain code quality during iterative development. Requires identical prerequisites as standard test execution.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --watch\n```\n\n----------------------------------------\n\nTITLE: Popping Screens from the Navigation Stack (JavaScript)\nDESCRIPTION: This snippet demonstrates using the `pop` action from `StackActions` to navigate back one or more screens in the stack. It creates a `popAction` with the `n` parameter set to 1, indicating that one screen should be popped from the stack. The action is then dispatched using `this.props.navigation.dispatch`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nconst popAction = StackActions.pop({\n  n: 1,\n});\n\nthis.props.navigation.dispatch(popAction);\n```\n\n----------------------------------------\n\nTITLE: Defining createSwitchNavigator API in JavaScript\nDESCRIPTION: This snippet shows the basic API definition for createSwitchNavigator. It takes RouteConfigs and SwitchNavigatorConfig as parameters to create a switch navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/switch-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating App Container for Root Navigator in React Navigation 3.0\nDESCRIPTION: Demonstrates how to implement the required app container for the root navigator in React Navigation 3.0. This is a breaking change from previous versions where any navigator could act as the navigation container at the top-level.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-01-react-navigation-3.0-rc.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStackNavigator,\n  createAppContainer\n} from 'react-navigation';\nconst MainNavigator = createStackNavigator({...});\nconst App = createAppContainer(MainNavigator);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Bare React Native Projects\nDESCRIPTION: Command to install required dependencies (`react-native-gesture-handler` and `react-native-reanimated`) using npm or yarn in a bare React Native project. After installation, further configuration (Babel plugin, native linking via Pods) is required. Requires Node.js and npm/yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links on Android with uri-scheme or adb\nDESCRIPTION: Bash commands for testing deep linking functionality on Android devices or emulators. The commands use either the uri-scheme package or adb directly to open the app with a specific deep link URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open exp://127.0.0.1:19000/--/chat/jan --android\n\n# or use adb directly:\n\nadb shell am start -W -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/chat/jane\" host.exp.exponent\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Metro Bundler Cache Files (Bash)\nDESCRIPTION: This command manually removes all Metro bundler cache directories from the system's temporary directory. This is an alternative method to clear the cache if resetting via the start command doesn't resolve module resolution issues.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf $TMPDIR/metro-bundler-cache-*\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation Stack with StackActions in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `reset` action from `StackActions` to completely replace the current navigation state. It imports `StackActions` and `NavigationActions`, creates a `resetAction` configured to replace the stack with a single route ('Profile') at index 0, and then dispatches this action using `this.props.navigation.dispatch`. The `reset` action requires `index` (active route index in the new state) and `actions` (an array of navigation actions defining the new state).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-masked-view/masked-view with Expo - Bash\nDESCRIPTION: Uses the Expo CLI to install the @react-native-masked-view/masked-view library, which enables UIKit-style header animations in stack navigators. Required only if using certain header animation features. Run in the root directory of your Expo project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-native-masked-view/masked-view\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation 6.x Prerelease in NPM or Yarn\nDESCRIPTION: Command to install the prerelease version of React Navigation 6.x and its stack navigator. This demonstrates how to specify the version using the @^6.x syntax.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2021-03-12-react-navigation-6.0-next.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native@^6.x @react-navigation/stack@^6.x\n```\n\n----------------------------------------\n\nTITLE: Customizing SafeAreaView Insets in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the forceInset prop with SafeAreaView to have more control over which paddings are applied. In this example, bottom padding is removed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/handling-iphonex.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<SafeAreaView style={styles.container} forceInset={{ bottom: 'never' }}>\n  <Text style={styles.paragraph}>This is top text.</Text>\n  <Text style={styles.paragraph}>This is bottom text.</Text>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Creating StatusCodeContext with React.createContext - JavaScript\nDESCRIPTION: This snippet creates a React context object for sharing HTTP status codes between server and client. It is designed to support status code signaling (like 404 or 401) through React tree traversal. The only dependency is 'react' and it uses React.createContext for context creation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-rendering.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\\n\\nconst StatusCodeContext = React.createContext();\\n\\nexport default StatusCodeContext;\n```\n\n----------------------------------------\n\nTITLE: Android Hardware Back Button Handler\nDESCRIPTION: Implementation of Android back button handling with React Navigation and Redux\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/redux-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { BackHandler } from 'react-native';\nimport { NavigationActions } from 'react-navigation';\n\nclass ReduxNavigation extends React.Component {\n  componentDidMount() {\n    BackHandler.addEventListener('hardwareBackPress', this.onBackPress);\n  }\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);\n  }\n\n  onBackPress = () => {\n    const { dispatch, nav } = this.props;\n    if (nav.index === 0) {\n      return false;\n    }\n\n    dispatch(NavigationActions.back());\n    return true;\n  };\n\n  render() {\n    return <AppNavigator navigation={navigation} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions Using Ref on App Container\nDESCRIPTION: Demonstrates how to use React refs to access the navigation container and dispatch navigation actions from outside the navigation context, such as in response to external events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/app-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst AppContainer = createAppContainer(AppNavigator);\n\nclass App extends React.Component {\n  someEvent() {\n    // call navigate for AppNavigator here:\n    this.navigator &&\n      this.navigator.dispatch(\n        NavigationActions.navigate({ routeName: someRouteName })\n      );\n  }\n  render() {\n    return (\n      <AppContainer\n        ref={(nav) => {\n          this.navigator = nav;\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Consistency\nDESCRIPTION: Commands to run ESLint for checking and fixing code style consistency in the React Navigation project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration Omitting a Screen from Path (JS)\nDESCRIPTION: This code snippet demonstrates how to omit a screen's route name from the generated URL in React Navigation by specifying an empty string as the `path`. By setting `path` to an empty string, the `Home` screen's route name will not be included in the URL, resulting in a cleaner URL structure. This is useful for scenarios where you want the root of your app to map to a specific screen without explicitly including its name in the path.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      path: '',\n      screens: {\n        Profile: 'users/:id',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Listing Updated Props for React Navigation `Header` Component\nDESCRIPTION: Lists the props received by the `Header` component (used via the `header` option) in the updated React Navigation. Users providing a custom header component need to ensure it handles these props: `mode`, `layout`, `scene`, `previous`, `navigation`, and `styleInterpolator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n- `mode`\n- `layout`\n- `scene`\n- `previous`\n- `navigation`\n- `styleInterpolator`\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/elements using npm\nDESCRIPTION: Installs the `@react-navigation/elements` package using the Node Package Manager (npm). This command should be run in a project that already has `@react-navigation/native` and its dependencies installed. The `npm2yarn` directive suggests a corresponding yarn command is also available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/elements\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Params with Redux State\nDESCRIPTION: Shows how to automatically update navigation parameters when Redux state changes using component lifecycle methods. This approach keeps the navigation title in sync with Redux state changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/redux-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass StaticCounter extends React.Component {\n  static navigationOptions = ({ navigation }) => ({\n    title: navigation.getParam('count'),\n  });\n\n  componentDidMount() {\n    this.updateCount();\n  }\n\n  componentDidUpdate() {\n    this.updateCount();\n  }\n\n  updateCount() {\n    this.props.navigation.setParams({ count: this.props.count });\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.paragraph}>\n          {this.props.navigation.getParam('count')}\n        </Text>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bottom Tab Navigator in React Native\nDESCRIPTION: This snippet demonstrates how to create a simple bottom tab navigator with two screens using createBottomTabNavigator from react-navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createBottomTabNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\n\nexport default createBottomTabNavigator({\n  Home: HomeScreen,\n  Settings: SettingsScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Using onRef with withNavigation in React Navigation\nDESCRIPTION: This snippet shows how to use the onRef prop instead of ref when working with components wrapped by withNavigation. It allows access to the wrapped component's instance in the parent component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/with-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// MyBackButton.ts\nexport default withNavigation(MyBackButton);\n\n// MyNavBar.ts\n<MyBackButton onRef={(elem) => this.backButton = elem} />\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests\nDESCRIPTION: Command to run the Jest test suite for React Navigation. This is required to pass before any contributions can be merged.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run jest\n```\n\n----------------------------------------\n\nTITLE: Navigation State Structure Example\nDESCRIPTION: Example showing the expected structure of navigation state object with routes and index.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1, // identifies which route in the routes array is active\n  routes: [\n    {\n      // Each route needs a name to identify the type.\n      routeName: 'MyRouteName',\n\n      // A unique identifier for this route in the routes array:\n      key: 'myroute-123',\n      // (used to specify the re-ordering of routes)\n\n      // Routes can have any data, as long as key and routeName are correct\n      ...randomRouteData,\n    },\n    ...moreRoutes,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unlinking react-native-gesture-handler on React Native 0.60+ - Bash\nDESCRIPTION: This command removes a manually linked instance of the 'react-native-gesture-handler' library from a React Native project with version 0.60 or above, where autolinking is standard. Running this prevents conflicts caused by redundant linking. Requires the React Native CLI environment with the 'react-native' command available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-gesture-handler\n\n```\n\n----------------------------------------\n\nTITLE: Dispatching Drawer Actions in React Navigation\nDESCRIPTION: This snippet shows how to use the navigation.dispatch method to trigger drawer actions. These are the underlying implementations of the openDrawer, closeDrawer, and toggleDrawer methods.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.dispatch(DrawerActions.openDrawer());\nthis.props.navigation.dispatch(DrawerActions.closeDrawer());\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Drawer Route with Dynamic Navigation in React Native\nDESCRIPTION: Demonstrates dispatching the `jumpTo` action (`DrawerActions.jumpTo`) within a dynamic React Navigation setup using `NavigationContainer`. The action navigates to the specified route (`name`) within the drawer, passing along any provided `params`. The `navigation` object is accessed via props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-actions.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js name=\"Drawer Actions - jumpTo\" snack\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  DrawerActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen({ navigation }) {\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(jumpToAction);\n          // codeblock-focus-end\n        }}\n      >\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\n      >\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Server Rendering with Document Title and Screen Options\nDESCRIPTION: Enhanced server rendering implementation that extracts screen options such as title using a ref to the ServerContainer, allowing for proper SEO metadata in the rendered HTML document.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\napp.use(async (ctx) => {\n  const location = new URL(ctx.url, 'https://example.org/');\n\n  const { element, getStyleElement } = AppRegistry.getApplication('App');\n\n  const ref = React.createRef<ServerContainerRef>();\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer\n      ref={ref}\n      location={location}\n    >\n      {element}\n    </ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const options = ref.current?.getCurrentOptions();\n\n  const document = `\n    <!DOCTYPE html>\n    <html style=\"height: 100%\">\n    <meta charset=\"utf-8\">\n    <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\"\n    >\n    ${css}\n    <title>${options.title}</title>\n    <body style=\"min-height: 100%\">\n    <div id=\"root\" style=\"display: flex; min-height: 100vh\">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation State With Initial Route - React Navigation (JavaScript)\nDESCRIPTION: This snippet shows the navigation state object when navigating to '/users/42' with 'Feed' set as the initial route. It illustrates how both initial and path-matched screens are added to the state. Designed for inspecting navigation stack behavior; the state shows 'Feed' and 'Profile' as nested routes. Not executable, provided for documentation of navigation flow.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Home',\n      state: {\n        index: 1,\n        routes: [\n          { name: 'Feed' },\n          {\n            name: 'Profile',\n            params: { id: '42' },\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Options for a Navigator in React Navigation 3.0\nDESCRIPTION: Demonstrates how to set navigation options for a navigator itself in React Navigation 3.0, showing both the previous approach and the new approach using the navigationOptions property in navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-01-react-navigation-3.0-rc.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHome.navigationOptions = { tabBarLabel: 'Home!' };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    Feed: ExampleScreen,\n    Profile: ExampleScreen,\n  },\n  {\n    defaultNavigationOptions: {\n      headerTintColor: '#fff',\n      headerStyle: {\n        backgroundColor: '#000',\n      },\n    },\n    navigationOptions: {\n      tabBarLabel: 'Home!',\n    },\n  }\n);\n\nconst Tabs = createBottomTabNavigator({ Home });\n```\n\n----------------------------------------\n\nTITLE: Ignoring Navigation State Warnings with YellowBox (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates using `YellowBox.ignoreWarnings` (for React Native 0.63 and lower) to suppress the 'Non-serializable values were found in the navigation state' warning. This achieves the same goal as `LogBox` but uses the older API.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { YellowBox } from 'react-native';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners via `listeners` Prop on `Screen` (JavaScript/JSX)\nDESCRIPTION: Shows how to declaratively add event listeners directly on a `Screen` component using the `listeners` prop. This prop accepts either an object where keys are event names (e.g., `tabPress`) and values are listener callbacks, or a function that receives `{ navigation, route }` and returns such an object. This allows handling events like `tabPress` and preventing default actions within the navigator definition.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-events.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen\n  name=\"Chat\"\n  component={Chat}\n  listeners={{\n    tabPress: (e) => {\n      // Prevent default action\n      e.preventDefault();\n    },\n  }}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Screen\n  name=\"Chat\"\n  component={Chat}\n  listeners={({ navigation, route }) => ({\n    tabPress: (e) => {\n      // Prevent default action\n      e.preventDefault();\n\n      // Do something with the `navigation` object\n      navigation.navigate('AnotherPlace');\n    },\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with onNavigationStateChange in React Navigation\nDESCRIPTION: This code demonstrates how to track screen views using React Navigation's onNavigationStateChange prop with Google Analytics. It includes a helper function to extract the current route name from nested navigators and tracks screen changes when navigating between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';\n\nconst tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);\n\n// gets the current screen from navigation state\nfunction getCurrentRouteName(navigationState) {\n  if (!navigationState) {\n    return null;\n  }\n  const route = navigationState.routes[navigationState.index];\n  // dive into nested navigators\n  if (route.routes) {\n    return getCurrentRouteName(route);\n  }\n  return route.routeName;\n}\n\nconst AppNavigator = StackNavigator(AppRouteConfigs);\n\nexport default () => (\n  <AppNavigator\n    onNavigationStateChange={(prevState, currentState) => {\n      const currentScreen = getCurrentRouteName(currentState);\n      const prevScreen = getCurrentRouteName(prevState);\n\n      if (prevScreen !== currentScreen) {\n        // the line below uses the Google Analytics tracker\n        // change the tracker here to use other Mobile analytics SDK.\n        tracker.trackScreenView(currentScreen);\n      }\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Screen Options from Inside a Component (JavaScript)\nDESCRIPTION: Shows use of navigation.setOptions inside a function component with useLayoutEffect to set the screen's title based on a local state change. Dependencies: React, @react-navigation/native. Inputs: navigation prop, state value. Output: updates header title live. Limitation: must be called after navigation prop is available and inside a React component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfunction SelectionScreen({ navigation }) {\\n  const [selectionCount, setSelectionCount] = React.useState(0);\\n\\n  React.useLayoutEffect(() => {\\n    navigation.setOptions({\\n      title:\\n        selectionCount === 0\\n          ? 'Select items'\\n          : `${selectionCount} items selected`,\\n    });\\n  }, [navigation, selectionCount]);\\n\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Rehydrated Navigation State Post-Initialization (JavaScript)\nDESCRIPTION: This snippet depicts what a fully rehydrated navigation state object looks like after React Navigation fills in missing values. It contains type, key, routeNames, routes with keys and names, index, and sets stale to false. Serves as a comparison for how React Navigation corrects/augments user-provided partial state. No external dependencies; used internally by React Navigation for state management.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-state.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    { key: 'home-1', name: 'Home' },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n  stale: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Href Attributes with useLinkBuilder in JavaScript\nDESCRIPTION: This snippet demonstrates using the `buildHref` function returned by the `useLinkBuilder` hook to dynamically generate `href` attributes for `PlatformPressable` components within a custom DrawerContent. This allows creating links that correspond to routes within the current navigator based on the linking configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-link-builder.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useLinkBuilder } from '@react-navigation/native';\nimport { PlatformPressable } from '@react-navigation/elements';\n\n// ...\n\nfunction DrawerContent({ state, descriptors, navigation }) {\n  const { buildHref } = useLinkBuilder();\n\n  return state.routes((route) => (\n    <PlatformPressable\n      href={buildHref(route.name, route.params)}\n      onPress={() => navigation.navigate(route.name, route.params)}\n    >\n      {descriptors[route.key].options.title}\n    </PlatformPressable>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus State Tracking with withNavigationFocus in React Navigation\nDESCRIPTION: Example showing how to use withNavigationFocus HOC to create a component that displays its current focus state. The HOC wraps a custom component and provides an isFocused prop that updates based on the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/with-navigation-focus.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withNavigationFocus } from 'react-navigation';\n\nclass FocusStateLabel extends React.Component {\n  render() {\n    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;\n  }\n}\n\n// withNavigationFocus returns a component that wraps FocusStateLabel and passes\n// in the navigation prop\nexport default withNavigationFocus(FocusStateLabel);\n```\n\n----------------------------------------\n\nTITLE: Rendering Scenes with Stack Layout\nDESCRIPTION: Implementation of the render function showing how to layout scenes in a stack formation using the transitionProps parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/transitioner.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n_render(transitionProps, prevTransitionProps) {\n  const scenes = transitionProps.scenes.map(scene => this._renderScene(transitionProps, scene));\n  return (\n    <View style={styles.stack}>\n      {scenes}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Title from Navigation Params in StaticCounter Screen in JavaScript\nDESCRIPTION: This snippet defines a StaticCounter screen that fetches the 'count' navigation param and sets it as the navigationOptions title. The component renders the count value as text, with navigation.getParam('count') used both for the title and display. This pattern assumes the 'count' param was passed via navigation, and the value will not update unless navigation params are explicitly changed. Dependencies: React, React Navigation, and the parent navigation passing the param.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/redux-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass StaticCounter extends React.Component {\n  static navigationOptions = ({ navigation }) => ({\n    title: navigation.getParam('count'),\n  });\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.paragraph}>\n          {this.props.navigation.getParam('count')}\n        </Text>\n      </View>\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Navigation Options on TabNavigator\nDESCRIPTION: Demonstrates how to set default navigation options on a TabNavigator to affect all its screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyTabNavigator = TabNavigator({\n  profile: ProfileScreen,\n  ...\n}, {\n  navigationOptions: {\n    headerTintColor: 'blue',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Run Yarn\nDESCRIPTION: This command executes yarn install command after a yarn resolution has been modified.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Package\nDESCRIPTION: Command to install the react-navigation package using npm package manager in a React Native project. This is the basic setup requirement for using React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation\n```\n\n----------------------------------------\n\nTITLE: Attempting Multiple Navigations with React Navigation `navigate`\nDESCRIPTION: This React Native snippet shows the behavior of `navigation.navigate`. When on the `DetailsScreen`, pressing the button attempts to navigate to 'Details' again using `navigation.navigate('Details')`. However, because the app is already on the 'Details' route, this action has no effect. This illustrates that `navigate` typically won't add a duplicate route to the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigating.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      // highlight-start\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details... again\n      </Button>\n      // highlight-end\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Path Aliases in React Navigation\nDESCRIPTION: Configuration for creating multiple path patterns that map to the same screen, useful for maintaining backward compatibility during URL structure changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  screens: {\n    Profile: {\n      screen: ProfileScreen,\n      linking: {\n        path: ':id',\n        alias: ['users/:id'],\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Profile: {\n      path: ':id',\n      alias: ['users/:id'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal StackNavigator with Custom Screen Transitions in React Navigation\nDESCRIPTION: Creates a stack navigator with modal transition behavior and custom animation configurations. Implements custom opacity and translateY transitions with configurable duration and easing functions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ModalNavigator = createStackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    navigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: (sceneProps) => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial Layout for TabView - React Native JavaScript\nDESCRIPTION: Passes an initial screen layout (width) to TabView via the initialLayout prop to enhance initial rendering performance. Uses Dimensions.get to fetch the current window's width. Input is an object with width; output is a smoother app load for the user.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<TabView\n  initialLayout={{ width: Dimensions.get('window').width }}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Navigator Package in React Navigation\nDESCRIPTION: Command to install the drawer navigator package for React Navigation v5. This package is required to use drawer navigation functionality.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/drawer@^5.x\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Specs with React Navigation Stack (JavaScript)\nDESCRIPTION: This snippet shows how to configure a Stack.Screen in React Navigation to use a specific transition specification for screen opening and closing animations. It imports TransitionSpecs from @react-navigation/stack and sets both the open and close transitionSpec options to TransitionIOSSpec for consistent native-style navigation. Dependencies include React Navigation Stack and relevant React components, and options must be set at the screen configuration level.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TransitionSpecs } from '@react-navigation/stack';\\n\\n// ...\\n\\n<Stack.Screen\\n  name=\\\"Profile\\\"\\n  component={Profile}\\n  options={{\\n    transitionSpec: {\\n      open: TransitionSpecs.TransitionIOSSpec,\\n      close: TransitionSpecs.TransitionIOSSpec,\\n    },\\n  }}\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests for React Navigation\nDESCRIPTION: Command to run Jest tests for the React Navigation project, which is required to pass before contributions can be merged.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run jest\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animation for Transitions\nDESCRIPTION: Example demonstrating how to use Animated.spring for transition animations with custom friction and tension parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/transitioner.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n_configureTransition(transitionProps, prevTransitionProps) {\n  return {\n    // A timing function, default: Animated.timing.\n    timing: Animated.spring,\n    // Some parameters relevant to Animated.spring\n    friction: 1,\n    tension: 0.5,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-navigation-stack Dependencies (bash)\nDESCRIPTION: This bash command installs react-navigation-stack and its required dependency, @react-native-community/masked-view, necessary for stack-based navigation in React Native apps. Run this in the root directory of your project before using stack navigator components. It requires npm and the proper React Native environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-stack @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Restructuring Navigators to Control Drawer Lock Mode in React Navigation (JavaScript)\nDESCRIPTION: This snippet illustrates the recommended alternative structure for controlling drawer access. A parent `HomeStack` is introduced, containing both the `DrawerNavigator` and screens (like `DetailsScreen`) where the drawer should be locked or inaccessible. Screens where the drawer should be available (`FeedHome`) remain within a `FeedStack` inside the `DrawerNavigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route where you want the drawer to remain available */\n  /* keep in mind that it will conflict with the swipe back gesture on ios */\n});\n\nconst DrawerNavigator = createDrawerNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst HomeStack = createStackNavigator({\n  Drawer: DrawerNavigator,\n  Details: DetailsScreen,\n  /* add routes here where you want the drawer to be locked */\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: HomeStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Navigation Options in Screen Component\nDESCRIPTION: Shows how to override default navigation options set on a navigator within an individual screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  static navigationOptions = {\n    headerTintColor: 'black',\n  };\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking in Android Manifest\nDESCRIPTION: This XML configuration adds an intent filter to the Android manifest for handling deep links with the 'example' scheme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"example\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Enabling react-native-screens for React Navigation Optimization in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the `react-native-screens` library. Calling `enableScreens()` before rendering any navigation stack allows React Navigation to use native screen components, optimizing memory usage and performance. This function should be called early in the application's lifecycle, typically within the main `index.js` or `App.js` file.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/react-native-screens.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Before rendering any navigation stack\nimport { enableScreens } from 'react-native-screens';\nenableScreens();\n```\n\n----------------------------------------\n\nTITLE: Running the React Navigation Website Locally\nDESCRIPTION: Commands to run the React Navigation website locally in development mode with live-reloading and in production mode with server rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd website\nyarn install\nyarn start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run prod\n```\n\n----------------------------------------\n\nTITLE: Type Checking navigationOptions in Stack Navigator with TypeScript\nDESCRIPTION: Shows how to import `NavigationStackOptions` from `react-navigation-stack` and apply it to the static `navigationOptions` property of a React class component. This provides type safety for configuring screen-specific options like `headerTitle` applicable within a Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/typescript.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationStackOptions } from 'react-navigation-stack';\n\n// ...\n\nclass ProfileScreen extends React.Component<Props> {\n  static navigationOptions: NavigationStackOptions = {\n    headerTitle: 'Profile',\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running NavigationPlayground Example\nDESCRIPTION: Commands to set up and run the NavigationPlayground example app, which is used for manual integration testing of changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\ncd examples/NavigationPlayground\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Unlinking react-native-gesture-handler\nDESCRIPTION: Unlinks the `react-native-gesture-handler` library in a bare React Native project. This step is necessary if the library was manually linked previously, as React Native 0.60+ handles linking automatically. Incorrect linking can cause runtime errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating metro-react-native-babel-preset (Bash)\nDESCRIPTION: This command installs or updates the `metro-react-native-babel-preset` development dependency using npm. Outdated versions of this preset can cause syntax errors related to React Navigation code (often in `.tsx` files).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev metro-react-native-babel-preset\n```\n\n----------------------------------------\n\nTITLE: Dynamically Hiding Tab Bar in Nested Stack (JavaScript)\nDESCRIPTION: Demonstrates setting `navigationOptions` dynamically on the `FeedStack` navigator itself. It checks the navigation state's index; if the index is greater than 0 (indicating a screen has been pushed onto the stack, e.g., `DetailsScreen`), it sets `tabBarVisible` to `false`. This hides the tab bar associated with the parent `TabNavigator` only when navigating deeper into the `FeedStack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nFeedStack.navigationOptions = ({ navigation }) => {\n  let tabBarVisible = true;\n  if (navigation.state.index > 0) {\n    tabBarVisible = false;\n  }\n\n  return {\n    tabBarVisible,\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Route Object Structure in React Navigation\nDESCRIPTION: Example showing the structure of a route object with key, routeName and params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/glossary-of-terms.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  routeName: 'Profile',\n  params: { id: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Screen2 for Tab Navigation\nDESCRIPTION: Modified version of Screen2 without StatusBar component for use in tab navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Bottom Tab Navigator Example in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic setup for a bottom tab navigator using `createBottomTabNavigator` from `react-navigation-tabs`. It defines two simple screen components (`HomeScreen`, `SettingsScreen`) and creates a tab navigator to switch between them. The navigator is then wrapped in `createAppContainer` to make it the root component of the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/tab-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createAppContainer } from 'react-navigation';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: HomeScreen,\n  Settings: SettingsScreen,\n});\n\nexport default createAppContainer(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Front matter configuration for documentation page setup, defining the page ID, title and sidebar label.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/customize-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: customize-styles\ntitle: Custom styles\nsidebar_label: Custom styles\n---\n```\n\n----------------------------------------\n\nTITLE: Conditionally Controlling Screen Lifecycle with navigationKey in JSX\nDESCRIPTION: Illustrates the use of the `navigationKey` prop. Assigning a dynamic key (e.g., based on authentication state `isSignedIn`) allows controlling the screen's lifecycle. When the key changes, the existing screen associated with that name might be removed (stack) or reset (tab/drawer).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  navigationKey={isSignedIn ? 'user' : 'guest'}\n  name=\"Profile\"\n  component={ProfileScreen}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Inside Component (Static)\nDESCRIPTION: Illustrates creating a component `Home` inside another component `App`. While syntactically valid, this pattern can lead to unexpected unmounting and remounting of screens in React Navigation when used as a screen component.  The component should be defined outside of the parent component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const Home = () => {\n    return <SomeComponent />;\n  };\n\n  const RootStack = createNativeStackNavigator({\n    screens: {\n      Home: Home,\n    },\n  });\n\n  const Navigation = createStaticNavigation(RootStack);\n\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Navigator with dangerouslyGetParent in React Navigation - JavaScript\nDESCRIPTION: This example shows how to use navigation.dangerouslyGetParent to access a parent navigator from within a component's navigationOptions in React Navigation. Requires React, React Navigation, and an understanding of navigation prop structure. The method is used to conditionally enable gestures and set the screen title based on parent navigator state. It requires defensive coding to handle cases where no parent exists. Inputs include the navigation prop; outputs include dynamic navigationOptions. This reflects advanced customization in a multi-navigator structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass UserCreateScreen extends Component {\n  static navigationOptions = ({ navigation }) => {\n    const parent = navigation.dangerouslyGetParent();\n    const gesturesEnabled =\n      parent &&\n      parent.state &&\n      parent.state.routeName === 'StackWithEnabledGestures';\n\n    return {\n      title: 'New User',\n      gesturesEnabled,\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Header and Tab Bar in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a navigation structure with hidden header and tab bar, which can lead to content being obscured by device UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/handling-safe-area.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction Demo() {\n  return (\n    <View\n      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        initialRouteName=\"Home\"\n        screenOptions={{ headerShown: false }}\n      >\n        <Stack.Screen name=\"Home\">\n          {() => (\n            <Tab.Navigator\n              initialRouteName=\"Analytics\"\n              tabBar={() => null}\n              screenOptions={{ headerShown: false }}\n            >\n              <Tab.Screen name=\"Analytics\" component={Demo} />\n              <Tab.Screen name=\"Profile\" component={Demo} />\n            </Tab.Navigator>\n          )}\n        </Stack.Screen>\n\n        <Stack.Screen name=\"Settings\" component={Demo} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom Loading View during State Restoration in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `renderLoadingExperimental` prop on a navigator component. It allows specifying a custom React component, like `ActivityIndicator`, to be rendered while the `loadNavigationState` function is asynchronously retrieving the persisted state. This provides visual feedback to the user during the loading process.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/state-persistence.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<AppNavigator\n  persistNavigationState={...}\n  loadNavigationState={...}\n  renderLoadingExperimental={() => <ActivityIndicator />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation State Structure in React Navigation\nDESCRIPTION: Example of a navigation state object containing key properties like type, key, routeNames, routes, index, and stale flag. This structure represents the navigation history and configuration in a React Navigation app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-state.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    { key: 'home-1', name: 'Home', params: { sortBy: 'latest' } },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n  stale: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Actions in Stack Navigator\nDESCRIPTION: Demonstrates how to override the default getStateForAction to implement custom navigation behavior, specifically adding the ability to push two profile screens at once.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyApp = createStackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyApp.router.getStateForAction;\n\nMyApp.router.getStateForAction = (action, state) => {\n  if (state && action.type === 'PushTwoProfiles') {\n    const routes = [\n      ...state.routes,\n      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },\n      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },\n    ];\n    return {\n      ...state,\n      routes,\n      index: routes.length - 1,\n    };\n  }\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Screen Component as a Direct Child (JavaScript)\nDESCRIPTION: This React Native component (`HomeScreen`) illustrates a common pitfall. It renders `DetailsScreen` directly as a child element. When rendered this way, `DetailsScreen` will *not* automatically receive the `navigation` prop from React Navigation, potentially leading to errors if it tries to access navigation functions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n        <DetailsScreen />\n      </View>\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation 7.0 Release Candidate\nDESCRIPTION: Shows how to install the release candidate version of React Navigation 7.0 packages using npm or yarn. This allows users to try out the new features before the final release.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-06-27-react-navigation-7.0-rc.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native@next @react-navigation/bottom-tabs@next\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Service to Navigate in React Navigation JavaScript\nDESCRIPTION: This example illustrates how to use the previously defined `NavigationService` from any JavaScript module. By importing the service from its path, the `navigate` function can be called with a target `routeName` and optional `params` to trigger navigation programmatically, decoupling the navigation logic from component props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// any js module\nimport NavigationService from 'path-to-NavigationService.js';\n\n// ...\n\nNavigationService.navigate('ChatScreen', { userName: 'Lucy' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Level Navigation with React Navigation\nDESCRIPTION: Example showing how to implement navigation dispatch from the same level where navigator is declared using React refs. This pattern should only be used for top-level navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-navigator-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst AppNavigator = StackNavigator(SomeAppRouteConfigs);\n\nclass App extends React.Component {\n  someEvent() {\n    // call navigate for AppNavigator here:\n    this.navigator &&\n      this.navigator.dispatch(\n        NavigationActions.navigate({ routeName: someRouteName })\n      );\n  }\n  render() {\n    return (\n      <AppNavigator\n        ref={(nav) => {\n          this.navigator = nav;\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Tab Navigators\nDESCRIPTION: Code package reference for installing bottom tab and material top tab navigator components from their dedicated package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-09-16-react-navigation-4.0.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreact-navigation-tabs\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animation Transition in React Navigation\nDESCRIPTION: Example of configuring spring animation transition specifications with customizable properties like stiffness, damping, and mass.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  animation: 'spring',\n  config: {\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Component Inline Leading to Unmounting\nDESCRIPTION: This code shows how defining a component inline in the `component` prop of `Stack.Screen` causes the component to unmount and remount on every render.  Instead, define the component separately and pass it to the component prop to prevent this issue.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={() => {\n          return <SomeComponent />;\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Material Top Tabs Navigator dependencies\nDESCRIPTION: Commands to install the required packages for using Material Top Tabs Navigator in a React Native project. It includes installation steps for both Expo managed and bare React Native projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/material-top-tabs@^6.x react-native-tab-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-pager-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-pager-view\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Creating a Drawer with Theme Toggle Switch in React Navigation\nDESCRIPTION: Implements a drawer content component with a theme toggle switch. The component uses the useTheme hook to access the current theme and displays a switch that reflects the current theme state and allows toggling between light and dark themes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { DrawerContentScrollView } from '@react-navigation/drawer';\nimport {\n  useTheme,\n  Avatar,\n  Drawer,\n  Text,\n  TouchableRipple,\n  Switch,\n} from 'react-native-paper';\n\nexport function DrawerContent(props) {\n  const paperTheme = useTheme();\n\n  return (\n    <DrawerContentScrollView {...props}>\n      /* {...other - content} */\n      <Drawer.Section title=\"Preferences\">\n        <TouchableRipple onPress={props.toggleTheme}>\n          <View style={styles.preference}>\n            <Text>Dark Theme</Text>\n            <View pointerEvents=\"none\">\n              <Switch value={theme.dark} />\n            </View>\n          </View>\n        </TouchableRipple>\n      </Drawer.Section>\n    </DrawerContentScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Setting Tab Navigator Options from Nested Stack Screen (React Navigation, JS)\nDESCRIPTION: Shows an example where `navigationOptions` (specifically `tabBarLabel`) defined statically within screen components (`A`, `B`) inside stack navigators (`HomeStack`, `SettingsStack`) do not affect the parent `createBottomTabNavigator`. This illustrates the rule that options can only be modified from direct screen components of a navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass A extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Home!',\n  };\n\n  // etc..\n}\n\nclass B extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Settings!',\n  };\n\n  // etc..\n}\n\nconst HomeStack = createStackNavigator({ A });\nconst SettingsStack = createStackNavigator({ B });\n\nexport default createAppContainer(\n  createBottomTabNavigator({\n    HomeStack,\n    SettingsStack,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Generic Title Navigation Option in React Component\nDESCRIPTION: Shows how to set a generic title navigation option on a React component class.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Great',\n  };\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running the Website in Development Mode - React Navigation (Bash)\nDESCRIPTION: This bash snippet shows how to install website dependencies and start the local development server for React Navigation documentation. It requires Yarn and a working directory set to 'website'. It triggers live-reloading and outputs the dev server URL. All project dependencies must be installed beforehand.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd website\\nyarn install\\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Server Rendering React Native Web App\nDESCRIPTION: Example of server rendering a React Native Web app without React Navigation. It demonstrates how to use AppRegistry to get the application element and styles, then render them to HTML using ReactDOMServer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-rendering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppRegistry } from 'react-native-web';\nimport ReactDOMServer from 'react-dom/server';\nimport App from './src/App';\n\nconst { element, getStyleElement } = AppRegistry.getApplication('App');\n\nconst html = ReactDOMServer.renderToString(element);\nconst css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\nconst document = `\n  <!DOCTYPE html>\n  <html style=\"height: 100%\">\n  <meta charset=\"utf-8\">\n  <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\"\n  >\n  ${css}\n  <body style=\"min-height: 100%\">\n  <div id=\"root\" style=\"display: flex; min-height: 100vh\">\n  ${html}\n  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Running the Website in Production Mode\nDESCRIPTION: Command to run the website in production mode with server rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run prod\n```\n\n----------------------------------------\n\nTITLE: Clean Yarn Dependencies\nDESCRIPTION: These commands remove the `node_modules` folder and `yarn.lock` file, then reinstall dependencies using `yarn`. This resolves potential corruption issues.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm yarn.lock\nyarn\n```\n\n----------------------------------------\n\nTITLE: Unlinking react-native-safe-area-context (Bash)\nDESCRIPTION: This command attempts to unlink the `react-native-safe-area-context` library. Use this if you manually linked it in React Native versions below 0.60 or suspect linking issues. Incorrect linking can lead to errors like \"requireNativeComponent: 'RNCSafeAreaProvider' was not found in the UIManager\".\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation Stack with Multiple Screens in React Navigation\nDESCRIPTION: Shows how to use StackActions.reset() to reset the navigation state to a point where Settings is the active screen, stacked on top of a Profile screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator Basic Structure\nDESCRIPTION: Basic API definition showing how to create a stack navigator with route configs and navigator config options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateStackNavigator(RouteConfigs, StackNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Nested Navigation State Structure in React Navigation\nDESCRIPTION: Shows how a route can contain its own navigation state when composing navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/glossary-of-terms.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  routeName: 'Profile',\n  params: { id: '123' },\n  index: 1,\n  routes: [ {...}, {...} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run All Timers within an Act Block in Jest\nDESCRIPTION: This JavaScript snippet demonstrates how to run all timers within an `act` block from `react-test-renderer`. This is necessary to ensure that any state updates triggered by timers are properly handled, preventing errors related to state updates during testing, especially after animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { act } from 'react-test-renderer';\n\n// ...\n\nact(() => jest.runAllTimers());\n```\n\n----------------------------------------\n\nTITLE: Getting Root Navigation State with getRootState Method\nDESCRIPTION: Example showing how to retrieve the current navigation state using the getRootState method from the NavigationContainer ref. This returns the complete navigation state object for all navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = navigationRef.current?.getRootState();\n```\n\n----------------------------------------\n\nTITLE: Preloading a Screen with Dynamic Navigation in React Native\nDESCRIPTION: Demonstrates using `navigation.preload` within a `HomeScreen` component to preload a `ProfileScreen` in a React Native app configured dynamically using `NavigationContainer` and `createStackNavigator`. This example shows passing parameters during preload and includes a `ProfileScreen` that measures the time until focus after preloading.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// codeblock-focus-start\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // highlight-next-line\n          navigation.preload('Profile', { user: 'jane' });\n        }}\n      >\n        Preload Profile\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { user: 'jane' });\n        }}\n      >\n        Navigate to Profile\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  CommonActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\n// codeblock-focus-start\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // highlight-next-line\n          navigation.preload('Profile', { user: 'jane' });\n        }}\n      >\n        Preload Profile\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { user: 'jane' });\n        }}\n      >\n        Navigate to Profile\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  const [startTime] = React.useState(Date.now());\n  const [endTime, setEndTime] = React.useState(null);\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      setEndTime(Date.now());\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [navigation]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Text>Preloaded for: {endTime ? endTime - startTime : 'N/A'}ms</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Configuration with Custom Parameter Parsing (JS)\nDESCRIPTION: This code snippet demonstrates how to customize parameter parsing in React Navigation using the `parse` option.  By providing a custom parsing function (Number), you can control how URL parameters are converted to JavaScript data types. This is useful for ensuring that parameters are correctly interpreted as numbers, dates, or other complex data types. In this example, the 'date' parameter will be parsed as a Number.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: {\n      path: 'chat/:date',\n      parse: {\n        date: Number,\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running the Website in Development Mode\nDESCRIPTION: Commands to install dependencies and start the website in development mode with live-reloading.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd website\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: React Navigation State Object after Parameter Parsing (JS)\nDESCRIPTION: Illustrates the resulting navigation state after parsing the 'chat/:date' path, highlighting how parameters are initially parsed as strings in React Navigation.  This state object shows the default behavior where parameters from the URL are treated as strings unless a custom parsing function is provided.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Chat',\n      params: { date: '1589842744264' },\n    },\n  ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Navigator Factory in Application Code - React Navigation (JavaScript)\nDESCRIPTION: This code snippet provides an example of how to use a custom navigator factory (created via createNavigatorFactory) in a React application. It demonstrates how to define a navigator using the factory function, and how to structure navigation using the Navigator and Screen components. Inputs include custom navigator factory and React Native screen components, while outputs are the rendered navigation structure. This approach depends on React Navigation's custom navigator extension points.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMyNavigator } from './myNavigator';\\n\\nconst My = createMyNavigator();\\n\\nfunction App() {\\n  return (\\n    <My.Navigator>\\n      <My.Screen name=\"Home\" component={HomeScreen} />\\n      <My.Screen name=\"Feed\" component={FeedScreen} />\\n    </My.Navigator>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Icon Rendering in TabBar via renderIcon (JavaScript)\nDESCRIPTION: Demonstrates how to use the renderIcon prop to dynamically return a custom React Element as the icon for a tab. The icon's name changes based on focus status, receiving route, focused, and color parameters. Dependencies include a custom Icon component. Inputs: route object, focused boolean, and color string. Outputs an icon element with contextual coloring and naming.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n<TabBar\n  renderIcon={({ route, focused, color }) => (\n    <Icon\n      name={focused ? 'albums' : 'albums-outlined'}\n      color={color}\n    />\n  )}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Stack.Group for Better Screen Organization (Dynamic Configuration)\nDESCRIPTION: This code demonstrates how to use Stack.Group components to organize screens without excessive nesting in dynamic configuration. It implements conditional rendering for authenticated vs. guest users and special treatment for modal screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  {isLoggedIn ? (\n    // Screens for logged in users\n    <Stack.Group>\n      <Stack.Screen name=\"Home\" component={Home} />\n      <Stack.Screen name=\"Profile\" component={Profile} />\n    </Stack.Group>\n  ) : (\n    // Auth screens\n    <Stack.Group screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"SignIn\" component={SignIn} />\n      <Stack.Screen name=\"SignUp\" component={SignUp} />\n    </Stack.Group>\n  )}\n  {/* Common modal screens */}\n  <Stack.Group screenOptions={{ presentation: 'modal' }}>\n    <Stack.Screen name=\"Help\" component={Help} />\n    <Stack.Screen name=\"Invite\" component={Invite} />\n  </Stack.Group>\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Using Callback for Screen Listeners in React Navigation\nDESCRIPTION: This example shows how to use a callback function to return screen listeners for a navigator. The callback receives the 'navigation' object, allowing for more complex logic such as checking if it's the initial screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-events.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigatior({\n  screenListeners: ({ navigation }) => ({\n    state: (e) => {\n      // Do something with the state\n      console.log('state changed', e.data);\n\n      // Do something with the `navigation` object\n      if (!navigation.canGoBack()) {\n        console.log(\"we're on the initial screen\");\n      }\n    },\n  }),\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  screenListeners={({ navigation }) => ({\n    state: (e) => {\n      // Do something with the state\n      console.log('state changed', e.data);\n\n      // Do something with the `navigation` object\n      if (!navigation.canGoBack()) {\n        console.log(\"we're on the initial screen\");\n      }\n    },\n  })}\n>\n  <Tab.Screen name=\"Home\" component={HomeScreen} />\n  <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Correct Navigation Options in Nested Navigator\nDESCRIPTION: Example showing correct way of setting tab bar labels by applying navigation options directly to the stack navigator components that are children of the tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst HomeStack = createStackNavigator({ A });\nconst SettingsStack = createStackNavigator({ B });\n\nHomeStack.navigationOptions = {\n  tabBarLabel: 'Home!',\n};\n\nSettingsStack.navigationOptions = {\n  tabBarLabel: 'Settings!',\n};\n\nexport default createBottomTabNavigator({\n  HomeStack,\n  SettingsStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Navigation with React Navigation\nDESCRIPTION: This snippet demonstrates how to create a drawer navigator using createDrawerNavigator. It defines two screens (Home and Settings) and configures the drawer navigator with custom styling options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>\n      </View>\n    );\n  }\n}\n\nconst DrawerNavigator = createDrawerNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    hideStatusBar: true,\n    drawerBackgroundColor: 'rgba(255,255,255,.9)',\n    overlayColor: '#6b52ae',\n    contentOptions: {\n      activeTintColor: '#fff',\n      activeBackgroundColor: '#6b52ae',\n    },\n  }\n);\n\nexport default createAppContainer(DrawerNavigator);\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation with NavigationContext in Static Navigation Configuration\nDESCRIPTION: This example demonstrates how to use NavigationContext to access the navigation object in a nested component within a React Navigation setup using static configuration. The NavigationContext provides access to the same navigation prop that would normally be passed down to screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-context.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\n// codeblock-focus-start\nimport { NavigationContext } from '@react-navigation/native';\n// codeblock-focus-end\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return <SomeComponent />;\n}\n\n// codeblock-focus-start\n\nfunction SomeComponent() {\n  // We can access navigation object via context\n  const navigation = React.useContext(NavigationContext);\n  // codeblock-focus-end\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Some component inside HomeScreen</Text>\n      <Button onPress={() => navigation.navigate('Profile')}>\n        Go to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Selecting Full Navigation State using useNavigationState Hook (React Navigation, JavaScript)\nDESCRIPTION: This snippet exemplifies accessing the entire navigation state object by passing an identity selector to useNavigationState. Requires @react-navigation/native as a dependency. This approach triggers re-renders whenever any part of the state changes, and the returned state object includes all keys such as routes and index. Use with caution to avoid unnecessary renders.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation-state.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst state = useNavigationState((state) => state);\n```\n\n----------------------------------------\n\nTITLE: Overriding Shared Header Styles for Specific Screens (JavaScript)\nDESCRIPTION: Shows how a specific screen can override the `defaultNavigationOptions` set in the parent navigator. The `navigationOptions` function receives the default `navigationOptions` as an argument, allowing the screen to use or modify these defaults (e.g., inverting colors) for its own header configuration, while also setting the title dynamically.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  static navigationOptions = ({ navigation, navigationOptions }) => {\n    const { params } = navigation.state;\n\n    return {\n      title: params ? params.otherParam : 'A Nested Details Screen',\n      /* These values are used instead of the shared configuration! */\n      headerStyle: {\n        backgroundColor: navigationOptions.headerTintColor,\n      },\n      headerTintColor: navigationOptions.headerStyle.backgroundColor,\n    };\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a new screen using React Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the navigation prop to navigate to a new screen in a React Native application using React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigating.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { createStackNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Stack v6.x via npm - bash\nDESCRIPTION: This shell command installs version 6.x of the @react-navigation/stack package using npm. Prerequisite: an npm-compatible environment. Make sure to update your project dependencies and code for compatibility with this major release.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/stack@^6.x\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Stack Navigator with Custom Transitions\nDESCRIPTION: Configures a Stack Navigator with modal behavior and custom screen transitions. It defines custom animation durations, easing functions, and screen interpolation for height-based sliding animations with opacity changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ModalNavigator = createStackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    defaultNavigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: (sceneProps) => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Route using SwitchActions.jumpTo in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `jumpTo` action from `SwitchActions` to navigate to a specific route within a switch navigator. It requires importing `SwitchActions` from 'react-navigation' and dispatching the action using the navigation prop. The `routeName` parameter specifies the target route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/switch-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { SwitchActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(SwitchActions.jumpTo({ routeName }));\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for React Navigation\nDESCRIPTION: Jest configuration settings required for testing React Navigation with Redux integration\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/redux-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"transformIgnorePatterns\": [\n      \"node_modules/(?!(jest-)?react-native|react-navigation|react-navigation-redux-helpers)\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Material Bottom Tabs Navigator Dependencies\nDESCRIPTION: Command to install the required dependencies for using the Material Bottom Tabs Navigator, including @react-navigation/material-bottom-tabs, react-native-paper, and react-native-vector-icons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @react-navigation/material-bottom-tabs@^6.x react-native-paper react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Updating Stack Navigator Imports in JavaScript\nDESCRIPTION: Shows the required changes to JavaScript import statements when upgrading. Specifically, it demonstrates moving the `createStackNavigator` import from the core `react-navigation` package to the new `react-navigation-stack` package, while keeping `createAppContainer` imported from `react-navigation`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { createAppContainer, createStackNavigator } from 'react-navigation';\n+ import { createAppContainer } from 'react-navigation';\n+ import { createStackNavigator } from 'react-navigation-stack';\n```\n\n----------------------------------------\n\nTITLE: Providing Default Params in Route Definitions in React Navigation 3.0\nDESCRIPTION: Shows how to use the new feature in React Navigation 3.0 that allows providing default parameters inside route definitions, which can be useful for passing consistent data to screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-01-react-navigation-3.0-rc.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Store = createStackNavigator({\n  Playstation: { screen: ProductScreen, params: { product: 'Playstation' } },\n  Xbox: { screen: ProductScreen, params: { product: 'Xbox' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Prop in Dynamic Navigation (React Native)\nDESCRIPTION: This React Native code illustrates accessing the `route` prop in a screen component (`ProfileScreen`) within a dynamically configured stack navigator using `NavigationContainer` and `Stack.Navigator`. It demonstrates destructuring the `route` prop to access its `name`. Depends on `react`, `react-native`, `@react-navigation/native`, and `@react-navigation/native-stack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/route-object.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\n// codeblock-focus-start\nfunction ProfileScreen({ route }) {\n  return (\n    <View>\n      <Text>This is the profile screen of the app</Text>\n      <Text>{route.name}</Text>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RouteConfigs for createStackNavigator (v1.x)\nDESCRIPTION: Illustrates the structure of the `RouteConfigs` object passed to `createStackNavigator`. It shows how to map route names (e.g., 'Profile') to configurations specifying the screen component (`screen`), an optional path for deep linking (`path`), and screen-specific dynamic `navigationOptions` which receive the `navigation` prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncreateStackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests\nDESCRIPTION: Commands to run Jest tests for React Navigation, including an option for watch mode during development.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --watch\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Navigation Navigators in JavaScript\nDESCRIPTION: Creates and configures the core navigators (AppStack, AuthStack, and SwitchNavigator) for authentication flow management in a React Native app using React Navigation. Requires dependencies on 'react-navigation' and 'react-navigation-stack'. The setup uses createAppContainer to export the navigator, with initialRouteName set for bootstrapping authentication state. Screens referenced in the navigators (e.g., HomeScreen, AuthLoadingScreen) need to be defined elsewhere. Expects no input at runtime but configures navigation logic for the entire app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/auth-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createAppContainer, createSwitchNavigator } from 'react-navigation';\\nimport { createStackNavigator } from 'react-navigation-stack';\\n\\n// Implementation of HomeScreen, OtherScreen, SignInScreen, AuthLoadingScreen\\n// goes here.\\n\\nconst AppStack = createStackNavigator({ Home: HomeScreen, Other: OtherScreen });\\nconst AuthStack = createStackNavigator({ SignIn: SignInScreen });\\n\\nexport default createAppContainer(\\n  createSwitchNavigator(\\n    {\\n      AuthLoading: AuthLoadingScreen,\\n      App: AppStack,\\n      Auth: AuthStack,\\n    },\\n    {\\n      initialRouteName: 'AuthLoading',\\n    }\\n  )\\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tab Icon Component (JavaScript/React Native)\nDESCRIPTION: Shows how to use the `icon` option function to render a custom React Element as the tab icon. The function receives properties like `route`, `focused`, `color`, and `size`, enabling the display of different icons based on whether the tab is focused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nicon: ({ route, focused, color }) => (\n  <Icon name={focused ? 'albums' : 'albums-outlined'} color={color} />\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Native Stack Navigator Configuration in React Navigation\nDESCRIPTION: Example of creating a basic native stack navigator with initial route and screen options configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/static-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screenOptions: {\n    headerTintColor: 'white',\n    headerStyle: {\n      backgroundColor: 'tomato',\n    },\n  },\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createAnimatedSwitchNavigator in React Navigation\nDESCRIPTION: This snippet shows how to import and use the createAnimatedSwitchNavigator function. It requires react-native-reanimated >= 1.0.0 and Expo SDK >= 33 for managed projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/animated-switch-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport createAnimatedSwitchNavigator from 'react-navigation-animated-switch';\n\ncreateAnimatedSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Blur Header Background in React Navigation\nDESCRIPTION: Example of creating a translucent header using BlurView from expo-blur with headerTransparent option\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n\n// ...\n\n<Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{\n    headerTransparent: true,\n    headerBackground: () => (\n      <BlurView tint=\"light\" intensity={100} style={StyleSheet.absoluteFill} />\n    ),\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsFocused Hook in React Navigation (Dynamic Configuration)\nDESCRIPTION: This snippet shows how to use the useIsFocused hook in a React Navigation app with dynamic configuration. It includes a ProfileScreen component that displays different text based on the screen's focus state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-is-focused.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { useIsFocused } from '@react-navigation/native';\n\nfunction ProfileScreen() {\n  // This hook returns `true` if the screen is focused, `false` otherwise\n  const isFocused = useIsFocused();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{isFocused ? 'focused' : 'unfocused'}</Text>\n    </View>\n  );\n}\n\nfunction HomeScreen() {\n  return <View />;\n}\n\nconst Tab = createMaterialTopTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Header in Bottom Tab Navigator (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom header for screens in a Bottom Tab Navigator. It uses the getHeaderTitle function from @react-navigation/elements to set the title dynamically.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/bottom-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return <MyHeader title={title} style={options.headerStyle} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Current Screen Parameters with `setParams` in React Navigation using JavaScript\nDESCRIPTION: Example of a `ProfileScreen` component using `navigation.setParams` inside a button's `onPress` handler. It conditionally updates the `friends` and `title` properties within the screen's `route.params` based on their current values, demonstrating dynamic parameter modification. Requires access to `route.params`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ navigation: { setParams } }) {\n  return (\n    <Button\n      onPress={() =>\n        setParams({\n          friends:\n            route.params.friends[0] === 'Brent'\n              ? ['Wojciech', 'Szymon', 'Jakub']\n              : ['Brent', 'Satya', 'Micha≈õ'],\n          title:\n            route.params.title === \"Brent's Profile\"\n              ? \"Lucy's Profile\"\n              : \"Brent's Profile\",\n        })\n      }\n      title=\"Swap title and friends\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigationState with Class Components via Wrapper (React Navigation, JavaScript)\nDESCRIPTION: This example shows how to provide route length information as a prop to a class component by creating a functional wrapper that uses useNavigationState. The wrapper collects the number of routes from the navigation state and passes it to the Profile class component via props. This pattern allows usage of hooks in setups where class components cannot directly use them. Requires @react-navigation/native and React.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation-state.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Get it from props\n    const { routesLength } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const routesLength = useNavigationState((state) => state.routes.length);\n\n  return <Profile {...props} routesLength={routesLength} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Navigator State Structure in React Navigation\nDESCRIPTION: Example of a navigation state containing a nested navigator (tab navigator inside a stack navigator). Shows how the state property of a route can contain another complete navigation state for child navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-state.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    {\n      key: 'home-1',\n      name: 'Home',\n      state: {\n        key: 'tab-1',\n        routeNames: ['Feed', 'Library', 'Favorites'],\n        routes: [\n          { key: 'feed-1', name: 'Feed', params: { sortBy: 'latest' } },\n          { key: 'library-1', name: 'Library' },\n          { key: 'favorites-1', name: 'Favorites' },\n        ],\n        index: 0,\n      },\n    },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Stack Action: Dismissing a Nested Stack with dismiss in React Navigation (JavaScript)\nDESCRIPTION: Shows how to dismiss an entire nested stack and return to its parent using the 'dismiss' method. Only relevant in nested stack navigators. No inputs; output is the navigation stack rewound to parent context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Using Button Component as Regular Button in React Navigation\nDESCRIPTION: Shows how to use the Button component from @react-navigation/elements as a regular button with an onPress handler. The button follows Material Design 3 guidelines for styling and behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  onPress={() => {\n    /* do something */\n  }}\n>\n  Do something\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transitioner Component in React Navigation\nDESCRIPTION: Example of using the Transitioner component in a custom navigation view. It demonstrates how to set up the component with various props for configuring transitions, rendering, and handling transition events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/transitioner.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyNavView extends Component {\n  ...\n  render() {\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        navigation={this.props.navigation}\n        render={this._render}\n        onTransitionStart={this.onTransitionStart}\n        onTransitionEnd={this.onTransitionEnd}\n      />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Loading Screen\nDESCRIPTION: React component that handles loading authentication state from storage and redirecting to appropriate navigation stack\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/auth-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass AuthLoadingScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this._bootstrapAsync();\n  }\n\n  _bootstrapAsync = async () => {\n    const userToken = await AsyncStorage.getItem('userToken');\n    this.props.navigation.navigate(userToken ? 'App' : 'Auth');\n  };\n\n  render() {\n    return (\n      <View>\n        <ActivityIndicator />\n        <StatusBar barStyle=\"default\" />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation in React Native\nDESCRIPTION: Command to install the react-navigation package in a React Native project using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Example App Issues\nDESCRIPTION: Commands to reset the cache and watchman for troubleshooting issues with the example app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwatchman watch-del-all\nyarn start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Setting Static Header Title in React Navigation\nDESCRIPTION: This example demonstrates how to set a static header title for a screen using the options prop. The title is configured as 'My home' for the Home screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My home',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(MyStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pod Dependencies (Bash)\nDESCRIPTION: These commands navigate into the `ios` directory, run `pod install` to install native iOS dependencies (pods), and then navigate back. This is crucial after adding or updating native modules like `react-native-gesture-handler` or `react-native-safe-area-context` in bare React Native projects targeting iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Profile Screen in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the navigate function from the navigation prop to move to a Profile screen with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { navigate } = this.props.navigation;\n\n    return (\n      <View>\n        <Text>This is the home screen of the app</Text>\n        <Button\n          onPress={() => navigate('Profile', { name: 'Brent' })}\n          title=\"Go to Brent's profile\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Removed/Changed React Navigation `navigationOptions`\nDESCRIPTION: Lists `navigationOptions` that were removed or had their behavior changed in a React Navigation update. It provides alternatives like `safeAreaInsets`, `headerStatusBarHeight`, `gestureEnabled`, `headerShown: false`, and details changes to how `header`, `headerTitle`, `headerLeft`, `headerRight`, `headerBackImage`, `headerBackTitle`, and `headerBackground` accept functions or elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n- `headerForceInset` - use `safeAreaInsets` instead to control the safe areas, or use `headerStatusBarHeight` to control the padding for the status bar.\n- `gesturesEnabled` - renamed to `gestureEnabled` for consistency.\n- `header` - now accepts a function returning react element instead, use `headerShown: false` instead of `header: null` to hide the header.\n- `headerTitle` - now accepts a function returning a React element or a string.\n- `headerLeft` - now accepts a function returning a React element.\n- `headerRight` - now accepts a function returning a React element.\n- `headerBackImage` - now accepts a function returning a React element.\n- `headerBackTitle` - now specifies the back title visible in current screen instead of next, specifying `null` no longer hides back title, use `backTitleVisible` instead, for a screen to change next screen's back title, it can pass params.\n- `headerBackground` - now accepts a function returning a React element.\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions with React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to dispatch a custom navigation action using React Navigation's action creators in a React Native application. It requires the 'react-navigation' library and imports the NavigationActions collection to create the action. The key parameters are 'routeName' (target route), 'params' (optional parameters for the target screen), and an optional nested navigation 'action'. The dispatch function is called on the navigation prop to execute the action. The input is the desired navigation action object, and the output is a transition to the specified route. No error handling is demonstrated, and it assumes a valid navigation prop context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n  params: {},\n\n  // navigate can have a nested navigate action that will be run inside the child router\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Installing Material Bottom Tabs Navigator Dependencies\nDESCRIPTION: Command to install necessary dependencies for using Material Bottom Tabs Navigator, including the navigator package, react-native-paper for UI components, and react-native-vector-icons for icons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/material-bottom-tabs@^5.x react-native-paper react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation 2.0 RC with Yarn\nDESCRIPTION: Command to install the release candidate version of React Navigation 2.0 using Yarn package manager.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-04-06-react-navigation-2.0-rc.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-navigation@^2.0.0-rc.1\n```\n\n----------------------------------------\n\nTITLE: Preloading a Screen with Static Navigation in React Native\nDESCRIPTION: Demonstrates using `navigation.preload` within a `HomeScreen` component to preload a `ProfileScreen` in a React Native app configured with `createStaticNavigation`. The example shows passing parameters during preload and includes a `ProfileScreen` that measures the time elapsed since preloading until focus.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// codeblock-focus-start\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // highlight-next-line\n          navigation.preload('Profile', { user: 'jane' });\n        }}\n      >\n        Preload Profile\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { user: 'jane' });\n        }}\n      >\n        Navigate to Profile\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  CommonActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\n// codeblock-focus-start\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // highlight-next-line\n          navigation.preload('Profile', { user: 'jane' });\n        }}\n      >\n        Preload Profile\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.navigate('Profile', { user: 'jane' });\n        }}\n      >\n        Navigate to Profile\n      </Button>\n    </View>\n  );\n}\n// codeblock-focus-end\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  const [startTime] = React.useState(Date.now());\n  const [endTime, setEndTime] = React.useState(null);\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      setEndTime(Date.now());\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [navigation]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        gap: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Text>Preloaded for: {endTime ? endTime - startTime : 'N/A'}ms</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing navigation prop directly in React Native component\nDESCRIPTION: This snippet shows a React Native component that tries to access the navigation prop directly, which will result in an 'undefined is not a function' exception because the navigation prop is not passed to the component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/connecting-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\n\nexport default class MyBackButton extends React.Component {\n  render() {\n    // This will throw an 'undefined is not a function' exception because the navigation\n    // prop is undefined.\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Dependency\nDESCRIPTION: Installs or updates the `typescript` development dependency. This is recommended if encountering errors like \"Module '[...]' has no exported member 'xxx'\" which might indicate an outdated TypeScript version.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Accessing Drawer Progress in Class Components\nDESCRIPTION: Example of using DrawerProgressContext to access the drawer progress value in a class component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-layout.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerProgressContext } from 'react-native-drawer-layout';\n\nclass MyComponent extends React.Component {\n  static contextType = DrawerProgressContext;\n\n  render() {\n    const progress = this.context;\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stack and Tab Navigators in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a tab navigator with two tabs, where each tab is a stack navigator. It shows the structure of nested navigators in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst HomeStack = createStackNavigator({\n  Home: HomeScreen,\n  Details: DetailsScreen,\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: SettingsScreen,\n  Profile: ProfileScreen,\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: HomeStack,\n  Settings: SettingsStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Card Style Fade Animation Interpolator\nDESCRIPTION: Custom card style interpolator function that creates a fade effect for screen transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current, closing }) => ({\n  cardStyle: {\n    opacity: current.progress,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Initialization with onReady - React Navigation JavaScript\nDESCRIPTION: Enhances navigation safety by tracking app mount state using an isReadyRef and the NavigationContainer's onReady callback. The App.js file declares cleanup in a useEffect and updates isReadyRef on mount, ensuring navigation actions only occur when the app is fully initialized. Prevents errors resulting from premature navigation calls.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigating-without-navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// App.js\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { navigationRef, isReadyRef } from './RootNavigation';\n\nexport default function App() {\n  React.useEffect(() => {\n    return () => {\n      isReadyRef.current = false;\n    };\n  }, []);\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onReady={() => {\n        isReadyRef.current = true;\n      }}\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect headerTitle Assignment Causing Hook Errors in React Navigation - JavaScript\nDESCRIPTION: Illustrates a common mistake where the headerTitle option is passed a component reference directly, rather than a function. Doing so results in 'Invalid hook call' errors when hooks are used within MyTitle. Dependencies include React, React Navigation stack, and components such as Home and MyTitle. Correct usage requires providing a function rather than a direct reference in headerTitle.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Screen\n  name=\\\"Home\\\"\n  component={Home}\n  option={{\n    // This is not correct\n    headerTitle: MyTitle,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Assigning a Component Directly using the component Prop in JSX\nDESCRIPTION: Illustrates the standard method of assigning a React component directly to the `component` prop of the `Screen`. This component will be rendered when the screen is active.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen name=\"Profile\" component={ProfileScreen} />\n```\n\n----------------------------------------\n\nTITLE: Upgrading react-navigation-tabs Package via npm/yarn\nDESCRIPTION: Command to upgrade the `react-navigation-tabs` package to its latest version. This version upgrades underlying dependencies and may introduce breaking changes related to animations and requires `react-native-reanimated`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-tabs\n```\n\n----------------------------------------\n\nTITLE: Annotating Components Using Organized Types (TypeScript)\nDESCRIPTION: This shows how to import and use the organized types from the previous snippet to annotate a component's props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HomeTabScreenProps } from './navigation/types';\n\nfunction PopularScreen({ navigation, route }: HomeTabScreenProps<'Popular'>) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Material Bottom Tab Navigator API in JavaScript\nDESCRIPTION: Illustrates the API signature for `createMaterialBottomTabNavigator`. It accepts two arguments: `RouteConfigs` (mapping route names to screen configurations) and `MaterialBottomTabNavigatorConfig` (options to customize the navigator's appearance and behavior).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\ncreateMaterialBottomTabNavigator(\n  RouteConfigs,\n  MaterialBottomTabNavigatorConfig\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with static contextType in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to access the current theme within a class component using the `static contextType` feature with React Navigation's `ThemeContext`. The theme value is available via `this.context`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ThemeContext } from 'react-navigation';\n\nclass MyButton extends React.Component {\n  static contextType = ThemeContext;\n\n  render() {\n    const theme = this.context;\n    return (\n      <TouchableOpacity\n        style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}\n      >\n        <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>\n          Button!\n        </Text>\n      </TouchableOpacity>\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using jumpTo Navigation Helper in React Navigation\nDESCRIPTION: Example of using the jumpTo helper method to navigate between tabs with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/material-top-tab-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { name: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install React Navigation v5, React Native Paper, and related dependencies using npm.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native @react-navigation/stack @react-native-community/masked-view @react-navigation/drawer @react-navigation/material-bottom-tabs react-native-paper\n```\n\n----------------------------------------\n\nTITLE: Tab Navigation with Screen Switching\nDESCRIPTION: Implements navigation between tabs using the navigation.navigate method with interactive buttons.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n        <Button\n          title=\"Go to Settings\"\n          onPress={() => this.props.navigation.navigate('Settings')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Scheme in app.json\nDESCRIPTION: This JSON configuration specifies the URL scheme for an Expo project. It sets the scheme to 'example', which will be used as the prefix for deep links.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions in React Navigation\nDESCRIPTION: Demonstrates how to use the dispatch method with NavigationActions to programmatically navigate between routes. Shows setting up a navigation action with routeName, params, and nested navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n  params: {},\n\n  // navigate can have a nested navigate action that will be run inside the child router\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\nthis.props.navigation.dispatch(navigateAction);\n```\n\n----------------------------------------\n\nTITLE: Running the Website in Production Mode - React Navigation (Bash)\nDESCRIPTION: This snippet demonstrates launching the documentation website with server-side rendering in production mode. Prior to running, all dependencies need to be built and installed. Outputs a production-ready web server. Assumes commands are executed from the project root or correct directory.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn prod\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding FAB based on Screen Focus in React Navigation (JSX)\nDESCRIPTION: This snippet enhances the previous example by using the `useIsFocused` hook from `@react-navigation/native`. The FAB's visibility is now controlled by the `isFocused` state, ensuring it only appears when the screen containing the bottom tabs is active.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { useTheme, Portal, FAB } from 'react-native-paper';\nimport { useIsFocused } from '@react-navigation/native';\n\nimport { Feed } from './feed';\nimport { Message } from './message';\nimport { Notifications } from './notifications';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport const BottomTabs = () => {\n  const isFocused = useIsFocused();\n\n  return (\n    <React.Fragment>\n      <Tab.Navigator\n        initialRouteName=\"Feed\"\n        backBehavior=\"initialRoute\"\n        shifting={true}\n      >\n        <Tab.Screen\n          name=\"Feed\"\n          component={Feed}\n          options={{\n            tabBarIcon: 'home-account',\n          }}\n        />\n        <Tab.Screen\n          name=\"Notifications\"\n          component={Notifications}\n          options={{\n            tabBarIcon: 'bell-outline',\n          }}\n        />\n        <Tab.Screen\n          name=\"Messages\"\n          component={Message}\n          options={{\n            tabBarIcon: 'message-text-outline',\n          }}\n        />\n      </Tab.Navigator>\n      <Portal>\n        <FAB\n          visible={isFocused} // show FAB only when this screen is focused\n          icon=\"feather\"\n          style={{\n            position: 'absolute',\n            bottom: safeArea.bottom + 65, // Note: 'safeArea' is used but not defined in snippet\n            right: 16,\n          }}\n        />\n      </Portal>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createStackNavigator (v1.x)\nDESCRIPTION: Demonstrates how to import the `createStackNavigator` function from the `react-navigation-stack` package and its basic usage signature. It takes `RouteConfigs` and `StackNavigatorConfig` objects as arguments to define the routes and configure the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createStackNavigator } from 'react-navigation-stack';\n\ncreateStackNavigator(RouteConfigs, StackNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Material Bottom Tab Navigator\nDESCRIPTION: Command to install the required packages for using material bottom tab navigation in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/material-bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-material-bottom-tabs react-native-paper\n```\n\n----------------------------------------\n\nTITLE: Listening to Drawer Open and Close Events with useEffect (JavaScript)\nDESCRIPTION: Illustrates how to set up listeners for 'drawerOpen' and 'drawerClose' events using navigation.addListener within the useEffect hook. No external dependencies besides React, and expects navigation object as a dependency. This setup allows the app to execute custom logic when the drawer is opened or closed. Input is the navigation object; output is subscription to drawer open/close events, with teardown via the unsubscribe function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('drawerOpen', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('drawerClose', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Native Stack Navigator\nDESCRIPTION: Command to install the @react-navigation/native-stack package which provides the native stack navigator functionality for React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native-stack\n```\n\n----------------------------------------\n\nTITLE: Using useHeaderHeight Hook in React Navigation\nDESCRIPTION: Example of accessing header height using the useHeaderHeight hook from @react-navigation/stack\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useHeaderHeight } from '@react-navigation/stack';\n\n// ...\n\nconst headerHeight = useHeaderHeight();\n```\n\n----------------------------------------\n\nTITLE: Using FocusAwareStatusBar in Screen Components\nDESCRIPTION: Example showing how to implement the FocusAwareStatusBar component in screen components for Tab and Drawer navigators. This approach ensures that only the status bar configuration of the currently focused screen is applied.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Screen1({ navigation }) {\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n      <FocusAwareStatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n      <Text style={{ color: '#fff' }}>Light Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen2')}\n        color=\"#fff\"\n      />\n    </SafeAreaView>\n  );\n}\n\nfunction Screen2({ navigation }) {\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n      <FocusAwareStatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n      <Text>Dark Screen</Text>\n      <Button\n        title=\"Next screen\"\n        onPress={() => navigation.navigate('Screen1')}\n      />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createMaterialTopTabNavigator in JavaScript\nDESCRIPTION: Demonstrates the basic import and usage of the `createMaterialTopTabNavigator` function from the `react-navigation-tabs` library. It takes a `RouteConfigs` object (mapping route names to configurations) and an optional `TabNavigatorConfig` object for customization.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-top-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { createMaterialTopTabNavigator } from 'react-navigation-tabs';\n\ncreateMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig);\n```\n```\n\n----------------------------------------\n\nTITLE: Illustrating Rehydrated React Navigation State in JavaScript\nDESCRIPTION: This JavaScript object shows the result after React Navigation rehydrates a partial state object (like the one shown previously). React Navigation automatically adds missing properties such as `type`, `key`, `routeNames`, individual route `key`s, calculates the correct `index`, and sets `stale` to `false`, resulting in a complete and valid navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-state.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    { key: 'home-1', name: 'Home' },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n  stale: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stack Navigator - React Navigation (JavaScript)\nDESCRIPTION: Implements a simple stack navigator with a single Home screen using React Navigation in React Native. Dependencies include react-navigation, react-navigation-stack, and react-native. The HomeScreen class displays centered text, and the navigator is set up and exported using createAppContainer. The only required route configuration is the screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n      </View>\n    );\n  }\n}\n\nconst AppNavigator = createStackNavigator({\n  Home: {\n    screen: HomeScreen,\n  },\n});\n\nexport default createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Navigator Factory with createNavigatorFactory - React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a reusable navigator factory by wrapping a navigator component (such as TabNavigator) with createNavigatorFactory from @react-navigation/native. The exported createMyNavigator function enables usage of My.Navigator and My.Screen in other modules. Prerequisites include defining the custom navigator component and installing React Navigation. The resulting factory function can be imported and used to structure navigation with custom or built-in screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\\n  useNavigationBuilder,\\n  createNavigatorFactory,\\n} from '@react-navigation/native';\\n\\n// ...\\n\\nexport const createMyNavigator = createNavigatorFactory(TabNavigator);\\n\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading a Screen Component using getComponent in JSX\nDESCRIPTION: Demonstrates using the `getComponent` prop with a callback function that returns the screen component (e.g., using `require`). This allows the component module to be lazily loaded only when the screen is needed, improving initial application load performance, especially with RAM bundles.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  getComponent={() => require('./ProfileScreen').default}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Flipper Integration\nDESCRIPTION: Example showing how to implement Flipper integration in a React Navigation app using the useFlipper hook.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/devtools.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  NavigationContainer,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { useFlipper } from '@react-navigation/devtools';\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n\n  useFlipper(navigationRef);\n\n  return (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Build - React Navigation (Bash)\nDESCRIPTION: This command rebuilds the docs directory for the website. Required after changes to docs so updates appear on the site. Run from the repository root after editing documentation files. Outputs build artifacts for use by the production server.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build-docs\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer Navigation Method\nDESCRIPTION: Navigation method to toggle the drawer state (open/close) in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnavigation.toggleDrawer();\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Setting Tab Options within Nested Stacks (Dynamic)\nDESCRIPTION: Shows the dynamic configuration equivalent of incorrectly setting `tabBarLabel`. The options are placed on the `<HomeStack.Screen>` and `<SettingsStack.Screen>` components within their respective stack navigator components, which does not affect the parent Tab Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// codeblock-focus-start\nfunction HomeStackScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen\n        name=\"A\"\n        component={A}\n        options={{ tabBarLabel: 'Home!' }}\n      />\n    </HomeStack.Navigator>\n  );\n}\n\nfunction SettingsStackScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen\n        name=\"B\"\n        component={B}\n        options={{ tabBarLabel: 'Settings!' }}\n      />\n    </SettingsStack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeStackScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsStackScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n// codeblock-focus-end\n```\n\n----------------------------------------\n\nTITLE: Navigating to the same route multiple times in React Navigation\nDESCRIPTION: A DetailsScreen component that demonstrates how to navigate to the same screen multiple times, creating a stack of identical screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting React Native Metro Bundler Cache (Bash)\nDESCRIPTION: This command starts the React Native Metro bundler with the cache reset flag. Use this for non-Expo projects when facing 'Unable to resolve module' errors for local files, indicating a possible stale cache.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Jest\nDESCRIPTION: Command to run the Jest test suite for React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn run jest\n```\n\n----------------------------------------\n\nTITLE: Drawer Content Options Configuration\nDESCRIPTION: Example of configuring contentOptions for drawer items including styling and colors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/drawer-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontentOptions: {\n  activeTintColor: '#e91e63',\n  itemsContainerStyle: {\n    marginVertical: 0,\n  },\n  iconContainerStyle: {\n    opacity: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Navigation Component\nDESCRIPTION: Shows how to create and implement a static navigation component using createStaticNavigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Navigation = createStaticNavigation(RootStack);\n\nfunction App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drawer Navigators with Static Configuration\nDESCRIPTION: This code snippet demonstrates how to implement nested drawer navigators using static configuration in React Navigation. It creates left and right drawers, with custom content for the right drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/multiple-drawers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.getParent('LeftDrawer').openDrawer()}>\n        Open left drawer\n      </Button>\n      <Button onPress={() => navigation.getParent('RightDrawer').openDrawer()}>\n        Open right drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  id: 'LeftDrawer',\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nconst RightDrawerScreen = createDrawerNavigator({\n  id: 'RightDrawer',\n  drawerContent: (props) => <RightDrawerContent {...props} />,\n  screenOptions: {\n    drawerPosition: 'right',\n    headerShown: false,\n  },\n  screens: {\n    HomeDrawer: LeftDrawerScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in a React Navigation Screen Component (JavaScript/JSX)\nDESCRIPTION: This JavaScript snippet defines a functional React Native component named `ProfileScreen`. It demonstrates how to receive the `route` prop, automatically passed by React Navigation, and access its `name` property to display the name of the current screen using a `Text` component. It depends on React and React Native components (`View`, `Text`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/route-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction ProfileScreen({ route }) {\n  return (\n    <View>\n      <Text>This is the profile screen of the app</Text>\n      <Text>{route.name}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RCTLinkingIOS Subspec to Podfile for Hybrid iOS Apps\nDESCRIPTION: Podfile configuration to include the RCTLinkingIOS subspec for React Navigation in hybrid iOS applications. This is necessary for apps that combine Swift/ObjC and React Native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npod 'React', :path => '../node_modules/react-native', :subspecs => [\n    . . . // other subspecs\n    'RCTLinkingIOS',\n    . . .\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Flipper Integration Package\nDESCRIPTION: Command to install react-native-flipper package as a development dependency for Flipper integration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/devtools.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-native-flipper\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Tab View and Dependencies\nDESCRIPTION: Commands to install react-native-tab-view and its dependency react-native-pager-view using npm or Expo CLI.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-tab-view\n\n# For Expo users\nexpo install react-native-pager-view\n\n# For non-Expo users\nnpm install react-native-pager-view\n```\n\n----------------------------------------\n\nTITLE: Using navigation parameters in screen options\nDESCRIPTION: Demonstrates accessing navigation parameters within the options configuration of a screen to set dynamic titles.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/redux-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<RootStack.Screen\n  name=\"StaticCounter\"\n  component={StaticCounter}\n  options={({ route }) => ({ title: route.params.count })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Navigator Implementation in React Native\nDESCRIPTION: Demonstrates how to create a basic stack navigator with a single Home screen route using React Navigation. Shows the minimal setup required including imports, screen component definition, and navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n      </View>\n    );\n  }\n}\n\nconst AppNavigator = createStackNavigator({\n  Home: {\n    screen: HomeScreen,\n  },\n});\n\nexport default createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Params in a Screen Component (JavaScript)\nDESCRIPTION: Shows how a screen component (`StaticCounter`) can access data passed via navigation parameters. It retrieves the `count` value from the `route.params` object provided by React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/redux-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction StaticCounter({ route }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{route.params.count}</Text>\n    </View>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Android TabBarTop Options\nDESCRIPTION: Example configuration for Android top tab bar styling, showing label and tab customization.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Action Imports to Compatibility Layer (React Navigation, diff, JavaScript)\nDESCRIPTION: This snippet shows how to migrate imports of NavigationActions from react-navigation (v4) to the compatibility package for React Navigation 5. Only the import statements are changed, maintaining backward-compatible access to navigation actions within the codebase. No additional parameters or code modifications are required beyond updating the import path.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/compatibility.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-import { NavigationActions } from 'react-navigation';\n+import { NavigationActions } from '@react-navigation/compat';\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Drawer Layout in React Native\nDESCRIPTION: A quick start example demonstrating how to use the Drawer component with state management for opening and closing the drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-layout.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, Text } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\n\nexport default function DrawerExample() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Drawer\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderDrawerContent={() => {\n        return <Text>Drawer content</Text>;\n      }}\n    >\n      <Button\n        onPress={() => setOpen((prevOpen) => !prevOpen)}\n        title={`${open ? 'Close' : 'Open'} drawer`}\n      />\n    </Drawer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Redux State via Navigation Params in JavaScript\nDESCRIPTION: Demonstrates how to navigate to another screen (`StaticCounter`) and pass a value (`count`) obtained from the Redux state (or component props connected to Redux) as a route parameter using `props.navigation.navigate`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/redux-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<Button\n  title=\"Go to static counter screen\"\n  onPress={() =>\n    props.navigation.navigate('StaticCounter', {\n      count,\n    })\n  }\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator in React Navigation 5\nDESCRIPTION: Demonstrates the new component-based configuration for creating a stack navigator with initial route and screen options in React Navigation 5.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-02-06-react-navigation-5.0.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator initialRouteName=\"home\">\n      <Stack.Screen name=\"settings\" component={Settings} />\n      <Stack.Screen\n        name=\"profile\"\n        component={Profile}\n        options={{ title: 'John Doe' }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linting the Codebase with ESLint - Bash\nDESCRIPTION: This command runs ESLint on the project using Yarn, enforcing the project's code style rules across all files. ESLint must be configured in the repository, and Yarn should be installed. Outputs warnings and errors if style or formatting issues are detected, helping maintain a consistent codebase style.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Screen Options\nDESCRIPTION: Example of using a function to dynamically generate screen options based on route and navigation props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/group.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Group\n  screenOptions={({ route, navigation }) => ({\n    title: route.params.title,\n  })}\n>\n  {/* screens */}\n</Stack.Group>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Expo Managed Projects\nDESCRIPTION: Installs compatible versions of `react-native-gesture-handler` and `react-native-reanimated` dependencies required for the latest drawer and tabs navigators within an Expo managed project using the `expo install` command.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Navigation Behavior in React Navigation 7\nDESCRIPTION: Shows how to enable the legacy navigation behavior using the navigationInChildEnabled prop on NavigationContainer. This prop allows navigation to nested child navigators, which is no longer the default behavior in version 7.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<NavigationContainer navigationInChildEnabled>{/* ... */}</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Navigation Events with React Navigation in JavaScript\nDESCRIPTION: This code demonstrates how to use the NavigationEvents component from react-navigation within a React Native screen component. The component subscribes to navigation events such as will focus, did focus, will blur, and did blur, invoking the respective callback functions when those events occur. Dependencies: react, react-native, and react-navigation. The key parameters are the event callback props (onWillFocus, onDidFocus, onWillBlur, onDidBlur), each receiving the navigation event payload. Inputs are navigation lifecycle events; outputs are side effects such as logging the event payload. The NavigationEvents component should be used within a navigation-aware component tree. Limitations: requires react-navigation v3 or compatible and is not recommended in new projects using React Navigation v5+.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx harmony\nCODE:\n```\nimport React from 'react';\\nimport { View } from 'react-native';\\nimport { NavigationEvents } from 'react-navigation';\\n\\nconst MyScreen = () => (\\n  <View>\\n    <NavigationEvents\\n      onWillFocus={(payload) => console.log('will focus', payload)}\\n      onDidFocus={(payload) => console.log('did focus', payload)}\\n      onWillBlur={(payload) => console.log('will blur', payload)}\\n      onDidBlur={(payload) => console.log('did blur', payload)}\\n    />\\n    {/*\\n      Your view code\\n    */}\\n  </View>\\n);\\n\\nexport default MyScreen;\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation without Header and TabBar for iPhone X\nDESCRIPTION: Example showing how to create a TabNavigator and StackNavigator with no header and tab bar components, which could lead to content being hidden behind iPhone X UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/handling-iphonex.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tabs = TabNavigator({\n  ...\n}, {\n  tabBarComponent: () => null,\n});\n\nexport default StackNavigator({\n  ...\n}, {\n  headerMode: 'none',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation DevTools via npm - Bash\nDESCRIPTION: Installs the @react-navigation/devtools package using npm to enable developer hooks for logging and Redux DevTools integration. Required to use the developer tools as shown in the rest of the file. Run this command in your project root where package.json is located. Outputs installed dependencies or error message if installation fails.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/devtools.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @react-navigation/devtools\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Dynamic Header Titles Based on Focused Route in React Navigation\nDESCRIPTION: This function uses getFocusedRouteNameFromRoute to determine which tab is active in a nested tab navigator, then returns an appropriate header title for use in a parent stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getFocusedRouteNameFromRoute } from '@react-navigation/native';\n\nfunction getHeaderTitle(route) {\n  // If the focused route is not found, we need to assume it's the initial screen\n  // This can happen during if there hasn't been any navigation inside the screen\n  // In our case, it's \"Feed\" as that's the first screen inside the navigator\n  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';\n\n  switch (routeName) {\n    case 'Feed':\n      return 'News feed';\n    case 'Profile':\n      return 'My profile';\n    case 'Account':\n      return 'My account';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying prop access with react-navigation-props-mapper\nDESCRIPTION: react-navigation-props-mapper provides HOCs that map react-navigation props directly to screen components, simplifying prop access in components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/community-libraries-and-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[github.com/vonovak/react-navigation-props-mapper](https://github.com/vonovak/react-navigation-props-mapper)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Screen Components in React Navigation\nDESCRIPTION: Example showing how to define screen components in a stack navigator configuration. Demonstrates setting up routes for Home and Details screens with an initial route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen, // <----\n    },\n    Details: {\n      screen: DetailsScreen, // <----\n    },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Conditionally unmounting a screen using useIsFocused (JavaScript)\nDESCRIPTION: This snippet demonstrates how to unmount a React Navigation screen when it is not focused, using the useIsFocused hook. It requires @react-navigation/core or @react-navigation/native for the useIsFocused hook. The input is the focus state, and the output is either the screen's content or null.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst isFocused = useIsFocused();\\n\\nif (!isFocused) {\\n  return null;\\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Package Reference\nDESCRIPTION: Reference to the React Navigation 2.x package version in the context of React Native compatibility.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/supported-react-native-versions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nreact-navigation@2.x\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation State Changes with addListener\nDESCRIPTION: Example showing how to subscribe to navigation state changes using the addListener method with the 'state' event from the NavigationContainer ref.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = navigationRef.current?.addListener('state', (e) => {\n  // You can get the raw navigation state (partial state object of the root navigator)\n  console.log(e.data.state);\n\n  // Or get the full state object with `getRootState()`\n  console.log(navigationRef.current.getRootState());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Screen Options in HTML Output\nDESCRIPTION: Example demonstrating how to use navigation screen options to populate HTML title and meta tags in server-side rendering. This enables proper SEO for React Navigation apps.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-container.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<title>{options.title}</title>\n<meta name=\"description\" content={options.description} />\n```\n\n----------------------------------------\n\nTITLE: Comparing Static vs. Property Assignment for navigationOptions (React, JS)\nDESCRIPTION: Shows two equivalent ways to define `navigationOptions` for a React component. The first uses a static class property (`static navigationOptions`), and the second assigns the `navigationOptions` object directly as a property to the component class (`MyOtherComponent.navigationOptions`). Both methods achieve the same result of associating options with the component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nclass MyComponent extends React.Component {\n  static navigationOptions = {\n    title: 'Hello!',\n  };\n  // etc.\n}\n\nclass MyOtherComponent extends React.Component {\n  // etc.\n}\n\nMyOtherComponent.navigationOptions = {\n  title: 'Hello!',\n};\n```\n\n----------------------------------------\n\nTITLE: Class Component Integration with useScrollToTop\nDESCRIPTION: Shows how to use useScrollToTop with a class component by wrapping it in a functional component. The ref is passed as a prop to the class component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-scroll-to-top.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Albums extends React.Component {\n  render() {\n    return <ScrollView ref={this.props.scrollRef}>{/* content */}</ScrollView>;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const ref = React.useRef(null);\n\n  useScrollToTop(ref);\n\n  return <Albums {...props} scrollRef={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeaderTitle Component in React Navigation\nDESCRIPTION: This example shows how to use the HeaderTitle component to display the title text in the header of React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderTitle>Hello</HeaderTitle>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Navigation Actions to a Tab Router\nDESCRIPTION: Example of how to customize an existing TabRouter to add a custom 'CLEAR_HISTORY' action that clears the route key history. This extends the router with a new action creator and handling logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabRouter } from '@react-navigation/native';\n\nconst MyTabRouter = (options) => {\n  const router = TabRouter(options);\n\n  return {\n    ...router,\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'CLEAR_HISTORY':\n          return {\n            ...state,\n            routeKeyHistory: [],\n          };\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: {\n      ...router.actionCreators,\n      clearHistory() {\n        return { type: 'CLEAR_HISTORY' };\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: NPM List react-native-safe-area-context\nDESCRIPTION: This command uses npm to display the dependency graph for react-native-safe-area-context.  It's used in npm projects when multiple versions are installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm ls react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Parameter Passing in React Navigation\nDESCRIPTION: Demonstrates how to pass and retrieve route parameters between screens using React Navigation. Shows implementation of two screens (HomeScreen and DetailsScreen) with navigation and parameter handling. Includes examples of navigate(), push(), getParam(), and parameter fallback values.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/params.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => {\n            /* 1. Navigate to the Details route with params */\n            this.props.navigation.navigate('Details', {\n              itemId: 86,\n              otherParam: 'anything you want here',\n            });\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nclass DetailsScreen extends React.Component {\n  render() {\n    /* 2. Get the param, provide a fallback value if not available */\n    const { navigation } = this.props;\n    const itemId = navigation.getParam('itemId', 'NO-ID');\n    const otherParam = navigation.getParam('otherParam', 'some default value');\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Text>itemId: {JSON.stringify(itemId)}</Text>\n        <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() =>\n            this.props.navigation.push('Details', {\n              itemId: Math.floor(Math.random() * 100),\n            })\n          }\n        />\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with NavigationContainer\nDESCRIPTION: JavaScript code snippet demonstrating how to wrap the main App component with NavigationContainer from React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer>{/* Rest of your app code */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Component Implementation with Navigation Props\nDESCRIPTION: Example showing incorrect implementation of screen nesting that leads to navigation prop being undefined. Demonstrates why screens should be rendered through navigation rather than as direct children.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n        <DetailsScreen />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Native Stack Navigator Package\nDESCRIPTION: Command to install the `@react-navigation/native-stack` package using npm. This package provides the native stack navigator functionality. It requires `@react-navigation/native` and its dependencies to be installed beforehand.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/native-stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native-stack\n```\n\n----------------------------------------\n\nTITLE: Reset Metro Cache (React Native CLI)\nDESCRIPTION: This command clears the Metro bundler cache when using the React Native CLI. It is often necessary after updating dependencies or encountering module resolution errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Package\nDESCRIPTION: Command to install the react-navigation package using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation\n```\n\n----------------------------------------\n\nTITLE: Importing createAnimatedSwitchNavigator (JavaScript)\nDESCRIPTION: Imports the `createAnimatedSwitchNavigator` function from the `react-navigation-animated-switch` package. This function is the entry point for creating an animated switch navigator. It requires `react-native-reanimated >= 1.0.0` to be installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/animated-switch-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport createAnimatedSwitchNavigator from 'react-navigation-animated-switch';\n\ncreateAnimatedSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Navigation State with Optional Parameter Present (JS)\nDESCRIPTION: This snippet shows the resulting navigation state when the optional `section` parameter *is* present in the URL.  Both the `id` and `section` parameters are included in the `params` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Profile',\n      params: { id: 'user-wojciech', section: 'settings' },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters for Specific Routes in React Navigation\nDESCRIPTION: This code snippet focuses on how to set parameters for a specific route by adding a source property referring to the route key. The example uses CommonActions.setParams with static navigation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-actions.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch({\n  ...CommonActions.setParams({ user: 'Wojtek' }),\n  source: route.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Stack Navigator as Root Component in React Native\nDESCRIPTION: This snippet shows how to create a stack navigator and export it as part of a root App component. This approach provides more control over the root component of the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator({\n  Home: {\n    screen: HomeScreen,\n  },\n});\n\nexport default class App extends React.Component {\n  render() {\n    return <RootStack />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GoBack Navigation Implementation\nDESCRIPTION: Shows different ways to implement back navigation, including going back one screen, anywhere, or to a specific screen by key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { goBack } = this.props.navigation;\n    return (\n      <View>\n        <Button onPress={() => goBack()} title=\"Go back from this HomeScreen\" />\n        <Button onPress={() => goBack(null)} title=\"Go back anywhere\" />\n        <Button\n          onPress={() => goBack('key-123')}\n          title=\"Go back from key-123\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the API reference documentation page, specifying the page ID, title and sidebar label.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/api-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: api-reference\ntitle: API Reference\nsidebar_label: Overview\n---\n```\n\n----------------------------------------\n\nTITLE: Advanced Reset Action with Multiple Routes in React Navigation\nDESCRIPTION: This example demonstrates a more complex Reset action that sets up a navigation stack with multiple routes. It shows how to use the index parameter to specify the active screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst resetAction = NavigationActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Styling Tab Bar Labels (tabBarLabelStyle) in React Navigation\nDESCRIPTION: This code snippet shows how to style the tab bar label using the `tabBarLabelStyle` option in React Navigation. It defines the font size, font family, and font weight of the label.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/bottom-tab-navigator.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarLabelStyle: {\n  fontSize: 16,\n  fontFamily: 'Georgia',\n  fontWeight: 300,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigator using createNavigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the createNavigator utility to combine a router and a navigation view into a custom navigator. It also shows how to render the resulting navigator component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createNavigator } from 'react-navigation';\n\nconst AppNavigator = createNavigator(NavigationView, router, navigationConfig);\n\n<AppNavigator\n  navigation={{ state, dispatch, addListener }}\n  screenProps={...}\n/>\n```\n\n----------------------------------------\n\nTITLE: Supplying Global Screen Props in React Navigation 4.x (JavaScript)\nDESCRIPTION: This shows the legacy approach to providing global properties using the screenProps prop. Data supplied here is accessible on all child navigators but changes trigger re-rendering of all screens and type safety is poor. Use React Navigation 4.x. Inputs: arbitrary props object, outputs: passes props to screens. In React Navigation 5.x or later, prefer React Context for performance and maintainability.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n<App screenProps={{ /* some data here */ }}>\n```\n\n----------------------------------------\n\nTITLE: Type Checking Functional Screen Component in Stack Navigator with TypeScript\nDESCRIPTION: Illustrates using `NavigationStackScreenComponent` from `react-navigation-stack` to type a functional React screen component. It combines type checking for received props (via optional `Params` and `ScreenProps` generics) and the component's static `navigationOptions`. The example defines `Params` as `{ userId: string }` and `ScreenProps` as `{ language: string }`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/typescript.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationStackScreenComponent } from 'react-navigation-stack';\n\ntype Params = { userId: string };\n\ntype ScreenProps = { language: string };\n\nconst ProfileScreen: NavigationStackScreenComponent<Params, ScreenProps> = (\n  props\n) => {\n  // ...\n};\n\nProfileScreen.navigationOptions = {\n  headerTitle: 'Profile',\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Props to Screens using Render Callback - React Navigation - JavaScript\nDESCRIPTION: Demonstrates the technique of passing extra props to screen components in the dynamic API by using a render function instead of the component prop. Using this technique disables screen optimization in React Navigation, so React.memo or React.PureComponent should be used to avoid unnecessary re-renders. This approach is used when React context is not suitable or available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/hello-react-navigation.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Stack.Screen name=\"Home\">\\n  // highlight-next-line\\n  {(props) => <HomeScreen {...props} extraData={someData} />}\\n</Stack.Screen>\n```\n\n----------------------------------------\n\nTITLE: Legacy Linking Configuration Format in React Navigation\nDESCRIPTION: The older, flatter configuration format for deep linking in React Navigation using simple key-value pairs regardless of navigator nesting.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  Home: 'home',\n  Feed: 'feed',\n  Profile: 'profile',\n  Settings: 'settings',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing State Persistence in React Navigation\nDESCRIPTION: This snippet demonstrates how to enable persistence for a top-level navigator using persistNavigationState and loadNavigationState props. It uses AsyncStorage to save and load the navigation state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/state-persistence.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({...});\nconst persistenceKey = \"persistenceKey\"\nconst persistNavigationState = async (navState) => {\n  try {\n    await AsyncStorage.setItem(persistenceKey, JSON.stringify(navState))\n  } catch(err) {\n    // handle the error according to your needs\n  }\n}\nconst loadNavigationState = async () => {\n  const jsonString = await AsyncStorage.getItem(persistenceKey)\n  return JSON.parse(jsonString)\n}\n\nconst App = () => <AppNavigator persistNavigationState={persistNavigationState} loadNavigationState={loadNavigationState} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing navigation bar buttons with react-navigation-header-buttons\nDESCRIPTION: react-navigation-header-buttons helps render and style buttons in the navigation bar, mimicking the appearance of native navbar buttons and offering a simple interface for interaction.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/community-libraries-and-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[github.com/vonovak/react-navigation-header-buttons](https://github.com/vonovak/react-navigation-header-buttons)\n\n[Demo on expo](https://expo.io/@vonovak/navbar-buttons-demo)\n```\n\n----------------------------------------\n\nTITLE: Create Navigator Factory in React Navigation\nDESCRIPTION: This example illustrates how to use the `createNavigatorFactory` function to create a function that returns a `Navigator` and `Screen` pair.  This allows custom navigators to be used in a declarative way similar to the built-in navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/custom-navigators.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n} from '@react-navigation/native';\n\n// ...\n\nexport function createMyNavigator(config) {\n  return createNavigatorFactory(TabNavigator)(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Screen Options in Stack Navigator\nDESCRIPTION: Setting screen-specific options like the header title using the options prop on a Stack.Screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hello-react-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{ title: 'Overview' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Groups for Better Screen Organization (Static Configuration)\nDESCRIPTION: This code shows how to use the 'groups' property in static configuration to organize screens without excessive nesting. It demonstrates grouping screens for modals, logged-in users, and authentication flows.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createStackNavigator({\n  screens: {\n    // Common screens\n  },\n  groups: {\n    // Common modal screens\n    Modal: {\n      screenOptions: {\n        presentation: 'modal',\n      },\n      screens: {\n        Help,\n        Invite,\n      },\n    },\n    // Screens for logged in users\n    User: {\n      if: useIsLoggedIn,\n      screens: {\n        Home,\n        Profile,\n      },\n    },\n    // Auth screens\n    Guest: {\n      if: useIsGuest,\n      screens: {\n        SignIn,\n        SignUp,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation with JavaScript\nDESCRIPTION: Example showing HTML navigation using JavaScript location change.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a onClick={() => { document.location.href = \"details.html\"; }}>Go to Details</a>\n```\n\n----------------------------------------\n\nTITLE: Type-checking Custom Tab Navigator in React Navigation (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a fully type-checked custom tab navigator component using React Navigation and TypeScript. It defines the necessary type interfaces for props, options, and event maps, and shows how to build a navigator that handles navigation state, emits typed events, and switches between tab screens. Dependencies include 'react', 'react-native', and '@react-navigation/native'. The component expects specific configuration for styles and screen options, and supports emitting and preventing default tabPress events. Inputs include route config and child screens; outputs are fully rendered tab navigation interfaces. This pattern is limited by the need for TypeScript type definitions and proper event mapping.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\\nimport {\\n  View,\\n  Text,\\n  Pressable,\\n  StyleProp,\\n  ViewStyle,\\n  StyleSheet,\\n} from 'react-native';\\nimport {\\n  createNavigatorFactory,\\n  DefaultNavigatorOptions,\\n  ParamListBase,\\n  CommonActions,\\n  TabActionHelpers,\\n  TabNavigationState,\\n  TabRouter,\\n  TabRouterOptions,\\n  useNavigationBuilder,\\n} from '@react-navigation/native';\\n\\n// Props accepted by the view\\ntype TabNavigationConfig = {\\n  tabBarStyle: StyleProp<ViewStyle>;\\n  contentStyle: StyleProp<ViewStyle>;\\n};\\n\\n// Supported screen options\\ntype TabNavigationOptions = {\\n  title?: string;\\n};\\n\\n// Map of event name and the type of data (in event.data)\\n//\\n// canPreventDefault: true adds the defaultPrevented property to the\\n// emitted events.\\ntype TabNavigationEventMap = {\\n  tabPress: {\\n    data: { isAlreadyFocused: boolean };\\n    canPreventDefault: true;\\n  };\\n};\\n\\n// The props accepted by the component is a combination of 3 things\\ntype Props = DefaultNavigatorOptions<\\n  ParamListBase,\\n  TabNavigationState<ParamListBase>,\\n  TabNavigationOptions,\\n  TabNavigationEventMap\\n> &\\n  TabRouterOptions &\\n  TabNavigationConfig;\\n\\nfunction TabNavigator({\\n  initialRouteName,\\n  children,\\n  screenOptions,\\n  tabBarStyle,\\n  contentStyle,\\n}: Props) {\\n  const { state, navigation, descriptors, NavigationContent } =\\n    useNavigationBuilder<\\n      TabNavigationState<ParamListBase>,\\n      TabRouterOptions,\\n      TabActionHelpers<ParamListBase>,\\n      TabNavigationOptions,\\n      TabNavigationEventMap\\n    >(TabRouter, {\\n      children,\\n      screenOptions,\\n      initialRouteName,\\n    });\\n\\n  return (\\n    <NavigationContent>\\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\\n        {state.routes.map((route, index) => (\\n          <Pressable\\n            key={route.key}\\n            onPress={() => {\\n              const isFocused = state.index === index;\\n              const event = navigation.emit({\\n                type: 'tabPress',\\n                target: route.key,\\n                canPreventDefault: true,\\n                data: {\\n                  isAlreadyFocused: isFocused,\\n                },\\n              });\\n\\n              if (!isFocused && !event.defaultPrevented) {\\n                navigation.dispatch({\\n                  ...CommonActions.navigate(route),\\n                  target: state.key,\\n                });\\n              }\\n            }}\\n            style={{ flex: 1 }}\\n          >\\n            <Text>{descriptors[route.key].options.title ?? route.name}</Text>\\n          </Pressable>\\n        ))}\\n      </View>\\n      <View style={[{ flex: 1 }, contentStyle]}>\\n        {state.routes.map((route, i) => {\\n          return (\\n            <View\\n              key={route.key}\\n              style={[\\n                StyleSheet.absoluteFill,\\n                { display: i === state.index ? 'flex' : 'none' },\\n              ]}\\n            >\\n              {descriptors[route.key].render()}\\n            </View>\\n          );\\n        })}\\n      </View>\\n    </NavigationContent>\\n  );\\n}\\n\\nexport default createNavigatorFactory<\\n  TabNavigationState<ParamListBase>,\\n  TabNavigationOptions,\\n  TabNavigationEventMap,\\n  typeof TabNavigator\\n>(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Consistency\nDESCRIPTION: Command to run ESLint to ensure code consistency throughout the React Navigation project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run eslint\n```\n\n----------------------------------------\n\nTITLE: Dynamically Locking Drawer in Nested Stack (JavaScript)\nDESCRIPTION: Demonstrates setting `navigationOptions` dynamically on the `FeedStack` navigator. It checks the navigation state's index; if the index is greater than 0 (e.g., user navigated to `DetailsScreen`), it sets `drawerLockMode` to `'locked-closed'`. This prevents the drawer associated with the parent `DrawerNavigator` from being opened via gestures or programmatically when deeper in the `FeedStack`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-options-resolution.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nFeedStack.navigationOptions = ({ navigation }) => {\n  let drawerLockMode = 'unlocked';\n  if (navigation.state.index > 0) {\n    drawerLockMode = 'locked-closed';\n  }\n\n  return {\n    drawerLockMode,\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Navigation Helper Function in React Navigation\nDESCRIPTION: Demonstrates how to use the custom 'insertBeforeLast' helper function with the dispatch method to insert a 'Home' screen before the last screen in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(insertBeforeLast('Home'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files in JSON\nDESCRIPTION: Shows how to configure Jest to use the custom setup file (containing the native dependency mocks) by adding it to the `setupFiles` array within a `jest.config.js` file or the `jest` key in `package.json`. The `<rootDir>` placeholder refers to the project's root directory.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"react-native\",\n  \"setupFiles\": [\"<rootDir>/jest/setup.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Integration Setup with React Navigation\nDESCRIPTION: Complete example showing how to integrate Redux with React Navigation, including store setup, middleware configuration, and component connection\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/redux-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStackNavigator,\n} from 'react-navigation';\nimport {\n  createStore,\n  applyMiddleware,\n  combineReducers,\n} from 'redux';\nimport {\n  reduxifyNavigator,\n  createReactNavigationReduxMiddleware,\n  createNavigationReducer,\n} from 'react-navigation-redux-helpers';\nimport { Provider, connect } from 'react-redux';\nimport React from 'react';\n\nconst AppNavigator = createStackNavigator(AppRouteConfigs);\n\nconst navReducer = createNavigationReducer(AppNavigator);\nconst appReducer = combineReducers({\n  nav: navReducer,\n  ...\n});\n\n// Note: createReactNavigationReduxMiddleware must be run before reduxifyNavigator\nconst middleware = createReactNavigationReduxMiddleware(\n  \"root\",\n  state => state.nav,\n);\n\nconst App = reduxifyNavigator(AppNavigator, \"root\");\nconst mapStateToProps = (state) => ({\n  state: state.nav,\n});\nconst AppWithNavigationState = connect(mapStateToProps)(App);\n\nconst store = createStore(\n  appReducer,\n  applyMiddleware(middleware),\n);\n\nclass Root extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AppWithNavigationState />\n      </Provider>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Drawer Package\nDESCRIPTION: Installs the necessary `@react-navigation/drawer` package using npm. This package provides the drawer navigator component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/drawer\n```\n\n----------------------------------------\n\nTITLE: Using Button Component for Navigation in React Navigation\nDESCRIPTION: Demonstrates the new Button component from @react-navigation/elements that has built-in support for navigating to screens and renders an anchor tag on the Web when used for navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n<Button screen=\"Profile\" params={{ userId: 'jane' }}>\n  View Jane's Profile\n<Button>\n```\n\n----------------------------------------\n\nTITLE: Closing the Drawer Programmatically\nDESCRIPTION: This snippet demonstrates how to programmatically close the drawer pane using the `closeDrawer` helper method available on the `navigation` object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nnavigation.closeDrawer();\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-gesture-handler in React Native 0.59 and Lower - Bash\nDESCRIPTION: This command manually links the 'react-native-gesture-handler' library in React Native projects with version 0.59 or lower, where autolinking is unsupported. It modifies Android and iOS project files to integrate the native library. Requires the React Native CLI and should be run from the project root.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-gesture-handler\n\n```\n\n----------------------------------------\n\nTITLE: Delaying Effect Execution with InteractionManager in React Navigation\nDESCRIPTION: Demonstrates how to delay the execution of an effect until after animations or gestures have completed using InteractionManager with useFocusEffect.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-focus-effect.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseFocusEffect(\n  React.useCallback(() => {\n    const task = InteractionManager.runAfterInteractions(() => {\n      // Expensive task\n    });\n\n    return () => task.cancel();\n  }, [])\n);\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build the documentation before it's picked up by the website.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build-docs\n```\n\n----------------------------------------\n\nTITLE: Using useDrawerProgress Hook with Reanimated in React Native\nDESCRIPTION: Examples of using the useDrawerProgress hook with both modern and legacy implementations of react-native-reanimated for animating drawer content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-layout.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animated } from 'react-native-reanimated';\nimport { useDrawerProgress } from 'react-native-drawer-layout';\n\nfunction MyComponent() {\n  const progress = useDrawerProgress();\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: interpolate(progress, [0, 1], [-100, 0]),\n        },\n      ],\n    };\n  });\n\n  return <Animated.View style={animatedStyle}>{/* ... */}</Animated.View>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animated } from 'react-native-reanimated';\nimport { useDrawerProgress } from 'react-native-drawer-layout';\n\nfunction MyComponent() {\n  const progress = useDrawerProgress();\n\n  // If you are on react-native-reanimated 1.x, use `Animated.interpolate` instead of `Animated.interpolateNode`\n  const translateX = Animated.interpolateNode(progress, {\n    inputRange: [0, 1],\n    outputRange: [-100, 0],\n  });\n\n  return (\n    <Animated.View style={{ transform: [{ translateX }] }}>\n      {/* ... */}\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in Deep Linking Handling in React Navigation (JavaScript)\nDESCRIPTION: Overrides the default URL or intent event handling by React Navigation by setting enableURLHandling={false} on the navigation container. This allows developers to manually handle navigation events from deep links, which requires manual event subscription and handler logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SimpleApp = createAppContainer(createStackNavigator({...}));\n\nconst MainApp = () => <SimpleApp enableURLHandling={false} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Navigator in React Navigation with NavigationContainer\nDESCRIPTION: This code snippet demonstrates how to set up a basic Stack Navigator wrapped in a NavigationContainer. The NavigationContainer manages the navigation tree and contains the navigation state, while the Stack.Navigator defines how to render screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator> // <---- This is a Navigator\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling tabLongPress Event - React Navigation - JavaScript\nDESCRIPTION: This snippet shows how to listen for the 'tabLongPress' event on a navigation prop using React's useEffect hook. The listener can be used to trigger custom logic when a tab is long pressed. It requires a navigation object with an addListener method; inputs are the event name and a callback. The cleanup function returned by useEffect ensures the listener is properly removed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabLongPress', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Function-based Static Screen Options in React Navigation\nDESCRIPTION: Demonstrates using a function to define screen options in static navigation configuration. The function receives navigation props and can perform navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: ({ navigation }) => ({\n        title: 'Awesome app',\n        headerLeft: () => {\n          <DrawerButton onPress={() => navigation.toggleDrawer()} />;\n        },\n      }),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Switch Navigator API Signature in JavaScript\nDESCRIPTION: This code snippet shows the basic API signature for the `createSwitchNavigator` function in React Navigation. It takes two arguments: `RouteConfigs`, which defines the routes and their corresponding screen components, and `SwitchNavigatorConfig`, an optional object for configuring the navigator's behavior (e.g., initial route, back behavior).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/switch-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\ncreateSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n```\n```\n\n----------------------------------------\n\nTITLE: Customized Tab Navigation with Icons\nDESCRIPTION: Shows how to customize tab navigation with icons, colors, and position settings using TabNavigator configuration options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport { TabNavigator, TabBarBottom } from 'react-navigation';\n\nexport default TabNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Settings: { screen: SettingsScreen },\n  },\n  {\n    navigationOptions: ({ navigation }) => ({\n      tabBarIcon: ({ focused, tintColor }) => {\n        const { routeName } = navigation.state;\n        let iconName;\n        if (routeName === 'Home') {\n          iconName = `ios-information-circle${focused ? '' : '-outline'}`;\n        } else if (routeName === 'Settings') {\n          iconName = `ios-options${focused ? '' : '-outline'}`;\n        }\n        return <Ionicons name={iconName} size={25} color={tintColor} />;\n      },\n    }),\n    tabBarOptions: {\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray',\n    },\n    tabBarComponent: TabBarBottom,\n    tabBarPosition: 'bottom',\n    animationEnabled: false,\n    swipeEnabled: false,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React Navigation\nDESCRIPTION: This snippet illustrates how to handle server-side rendering with React Navigation in an Express.js app. It uses handleServerRequest to get navigation props and title, then renders the app to a string for server response.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/web-support.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpressApp.get('/*', (req, res) => {\n  const { path, query } = req;\n\n  const { navigation, title, options } = handleServerRequest(\n    AppNavigator.router,\n    path,\n    query\n  );\n\n  const markup = renderToString(<AppNavigator navigation={navigation} />);\n\n  res.send(\n    `<!doctype html>\n  <html lang=\"\">\n  <head>\n    <title>${title}</title>\n    <script src=\"main.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\">${markup}</div>\n  </body>\n</html>`\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Header Title Implementation (Dynamic)\nDESCRIPTION: Illustrates the incorrect way to define the `headerTitle` option in a dynamic native stack navigator configuration. It directly assigns a React component (`MyTitle`) to the `headerTitle` property, which can lead to \"Invalid hook call\" errors. The correct way is to pass a function that returns a React element.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={Home}\n  option={{\n    // This is not correct\n    // highlight-next-line\n    headerTitle: MyTitle,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Action Creators in React Navigation's dispatch Method\nDESCRIPTION: Demonstrates how to use a custom action creator function with dispatch. This example adds a Home route to the start of the navigation stack using CommonActions.reset.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch((state) => {\n  // Add the home route to the start of the stack\n  const routes = [{ name: 'Home' }, ...state.routes];\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions via App Container Ref (JavaScript/React)\nDESCRIPTION: Illustrates how to obtain a reference to the `AppContainer` instance using the `ref` prop in a React class component. This ref (`this.navigator`) can then be used to call the `dispatch` method on the navigator, allowing navigation actions (e.g., using `NavigationActions.navigate`) to be triggered programmatically from outside the navigation screens, such as in response to component events like `someEvent`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/app-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst AppContainer = createAppContainer(AppNavigator);\n\nclass App extends React.Component {\n  someEvent() {\n    // call navigate for AppNavigator here:\n    this.navigator &&\n      this.navigator.dispatch(\n        NavigationActions.navigate({ routeName: someRouteName })\n      );\n  }\n  render() {\n    return (\n      <AppContainer\n        ref={(nav) => {\n          this.navigator = nav;\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Navigation Actions in React Navigation\nDESCRIPTION: This snippet demonstrates how to prevent certain navigation actions based on the current route state. It overrides the getStateForAction method to block the BACK action when a specific condition is met.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyStackRouter = StackRouter(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyStackRouter.router.getStateForAction;\n\nMyStackRouter.router.getStateForAction = (action, state) => {\n  if (\n    state &&\n    action.type === NavigationActions.BACK &&\n    state.routes[state.index].params.isEditing\n  ) {\n    // Returning null from getStateForAction means that the action\n    // has been handled/blocked, but there is not a new state\n    return null;\n  }\n\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions with Button and onPress in React Navigation (JavaScript)\nDESCRIPTION: Shows usage of the Button component as a standard action button by providing an onPress handler that runs a custom function (here, logging a string on press). Useful for actions that do not require navigation. All Button props from PlatformPressable are available. No navigation setup is required unless Button is configured for screen/params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n<Button onPress={() => console.log('button pressed')}>Press me</Button>\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Tab Press Behavior in Material Bottom Tab Navigator\nDESCRIPTION: Example of using a useEffect hook to add a listener that prevents the default tab press behavior in the Material Bottom Tab Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-bottom-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n\n    e.preventDefault();\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Running Linter Check in React Navigation Project using Bash\nDESCRIPTION: Executes the ESLint check across the React Navigation codebase using Yarn. This command is used to verify that code contributions adhere to the project's established coding style and formatting guidelines.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Setting Static Header Title in React Navigation (JavaScript)\nDESCRIPTION: Demonstrates how to set a fixed header title for screens within a React Navigation stack by defining a `static navigationOptions` object with the `title` property within the screen component class. This provides a simple way to label screens in the header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n  };\n\n  /* render function, etc */\n}\n\nclass DetailsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Details',\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Parent Navigator Events in React Navigation (Dynamic Configuration)\nDESCRIPTION: This code illustrates how to listen to events from a parent navigator in a nested navigation structure using React Navigation's dynamic configuration. It demonstrates the use of navigation.getParent() to access the parent navigator and listen to its events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/nesting-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Button } from '@react-navigation/elements';\n\nfunction ProfileScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile Screen</Text>\n    </View>\n  );\n}\n\nfunction FeedScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.navigate('Messages')}>\n        Go to Messages\n      </Button>\n    </View>\n  );\n}\n\nfunction MessagesScreen() {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    // codeblock-focus-start\n    const unsubscribe = navigation\n      .getParent('MyTabs')\n      .addListener('tabPress', (e) => {\n        // Do something\n        alert('Tab pressed!');\n      });\n    // codeblock-focus-end\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Messages Screen</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nfunction HomeStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Feed\" component={FeedScreen} />\n      <Stack.Screen name=\"Messages\" component={MessagesScreen} />\n    </Stack.Navigator>\n  );\n}\n\nfunction RootTabs() {\n  return (\n    <Tab.Navigator id=\"MyTabs\">\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeStack}\n        options={{ headerShown: false }}\n      />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StackNavigator with Path for Deep Linking in React Navigation\nDESCRIPTION: This snippet shows how to configure a StackNavigator with a path for the Chat screen to enable deep linking. The path 'chat/:user' allows for dynamic user parameters in the URI.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = StackNavigator({\n  Home: { screen: HomeScreen },\n  Chat: {\n    screen: ChatScreen,\n    path: 'chat/:user',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Render Scene Function for TabView - React Native JavaScript\nDESCRIPTION: Provides an example of a custom renderScene function that returns different components based on the route's key, used for advanced scene configuration in TabView. Inputs are the route and jumpTo props; output is the appropriate scene component. Intended for performance tuning or dynamic prop passing.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderScene = ({ route, jumpTo }) => {\n  switch (route.key) {\n    case 'music':\n      return <MusicRoute jumpTo={jumpTo} />;\n    case 'albums':\n      return <AlbumsRoute jumpTo={jumpTo} />;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating headerBackTitleVisible to headerBackButtonDisplayMode (JavaScript)\nDESCRIPTION: This code uses the diff-style to show how to replace the deprecated 'headerBackTitleVisible' option with the more flexible 'headerBackButtonDisplayMode' in Stack and Native Stack navigators. It requires React Navigation and is applied in screen option objects; input is a Stack.Screen configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\\n  name=\"Details\"\\n  component={DetailsScreen}\\n  options={{\\n-     headerBackTitleVisible: false,\\n+     headerBackButtonDisplayMode: 'minimal',\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Navigator Dependencies\nDESCRIPTION: Command to install the drawer navigator package for React Navigation v6\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/drawer@^6.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Navigation Options\nDESCRIPTION: Shows how to configure shared navigation options across multiple screens using the stack navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/headers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst RootStack = createStackNavigator(\n  {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n  {\n    initialRouteName: 'Home',\n    navigationOptions: {\n      headerStyle: {\n        backgroundColor: '#f4511e',\n      },\n      headerTintColor: '#fff',\n      headerTitleStyle: {\n        fontWeight: 'bold',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling the TabBar in TabView - React Native JavaScript\nDESCRIPTION: Shows how to remove the tab bar from TabView by returning null in the renderTabBar callback. This disables all default tab bar UI. Input is just an empty function; output is no tab bar rendered. Useful for use cases where custom navigation or no visual tab indicator is desired.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<TabView\n  renderTabBar={() => null}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Router with History Clear Action\nDESCRIPTION: Implementation of a custom tab router that extends the base TabRouter with additional functionality to clear navigation history.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabRouter } from '@react-navigation/native';\n\nconst MyTabRouter = (options) => {\n  const router = TabRouter(options);\n\n  return {\n    ...router,\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'CLEAR_HISTORY':\n          return {\n            ...state,\n            routeKeyHistory: [],\n          };\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: {\n      ...router.actionCreators,\n      clearHistory() {\n        return { type: 'CLEAR_HISTORY' };\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Resulting Navigation State for Nested Navigator Link (JS)\nDESCRIPTION: This code shows the resulting navigation state object after resolving a deep link with the nested navigator configuration.  The state reflects the navigator hierarchy and includes the parsed parameters for the target screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/configuring-links.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  routes: [\n    {\n      name: 'Home',\n      state: {\n        routes: [\n          {\n            name: 'Profile',\n            params: { id: 'jane' },\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Navigation Helper Function in React Navigation\nDESCRIPTION: Shows how to create a custom navigation helper function 'insertBeforeLast' that inserts a new screen just before the last one in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-prop.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nconst insertBeforeLast = (routeName, params) => (state) => {\n  const routes = [\n    ...state.routes.slice(0, -1),\n    { name: routeName, params },\n    state.routes[state.routes.length - 1],\n  ];\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer ref with React.createRef in TypeScript\nDESCRIPTION: This snippet illustrates how to create and annotate a ref for NavigationContainer using React.createRef with the NavigationContainerRef type to ensure type-checking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef =\n  React.createRef<NavigationContainerRef<RootStackParamList>>();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modal Dialog with Animations\nDESCRIPTION: Comprehensive example of implementing a custom modal dialog with animations, overlay, and close functionality using useCardAnimation hook.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animated, View, Text, Pressable, StyleSheet } from 'react-native';\nimport { useTheme, useNavigation } from '@react-navigation/native';\nimport { useCardAnimation } from '@react-navigation/stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction ModalScreen() {\n  const navigation = useNavigation();\n  const { colors } = useTheme();\n  const { current } = useCardAnimation();\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Pressable\n        style={[\n          StyleSheet.absoluteFill,\n          { backgroundColor: 'rgba(0, 0, 0, 0.5)' },\n        ]}\n        onPress={navigation.goBack}\n      />\n      <Animated.View\n        style={{\n          padding: 16,\n          width: '90%',\n          maxWidth: 400,\n          borderRadius: 3,\n          backgroundColor: colors.card,\n          transform: [\n            {\n              scale: current.progress.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.9, 1],\n                extrapolate: 'clamp',\n              }),\n            },\n          ],\n        }}\n      >\n        <Text>\n          Mise en place is a French term that literally means \"put in place.\" It\n          also refers to a way cooks in professional kitchens and restaurants\n          set up their work stations‚Äîfirst by gathering all ingredients for a\n          recipes, partially preparing them (like measuring out and chopping),\n          and setting them all near each other. Setting up mise en place before\n          cooking is another top tip for home cooks, as it seriously helps with\n          organization. It'll pretty much guarantee you never forget to add an\n          ingredient and save you time from running back and forth from the\n          pantry ten times.\n        </Text>\n        <Button\n          color={colors.primary}\n          style={{ alignSelf: 'flex-end' }}\n          onPress={navigation.goBack}\n        >\n          Okay\n        </Button>\n      </Animated.View>\n    </View>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom tab bar for Material Top Tabs\nDESCRIPTION: Example of creating a custom tab bar component for the Material Top Tabs Navigator, demonstrating how to handle tab press events, styling, and accessibility properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/material-top-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animated, View, TouchableOpacity } from 'react-native';\n\nfunction MyTabBar({ state, descriptors, navigation, position }) {\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name, route.params);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        const inputRange = state.routes.map((_, i) => i);\n        const opacity = position.interpolate({\n          inputRange,\n          outputRange: inputRange.map(i => (i === index ? 1 : 0)),\n        });\n\n        return (\n          <TouchableOpacity\n            accessibilityRole=\"button\"\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Animated.Text style={{ opacity }}>\n              {label}\n            </Animated.Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\n// ...\n\n<Tab.Navigator tabBar={props => <MyTabBar {...props} />}>\n  {...}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom App Component with AppContainer - React Navigation (JavaScript)\nDESCRIPTION: Shows how to export a React component that renders the AppContainer created from a stack navigator, providing more control over the root component. This is useful for inserting additional logic at the app entry point or customizing app-wide wrappers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default class App extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refs with NavigationContainer in Dynamic Configuration\nDESCRIPTION: Example of using refs with NavigationContainer in dynamic configuration to access navigation methods outside of screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef(); // You can also use a regular ref with `React.useRef()`\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>\n      <NavigationContainer ref={navigationRef}>\n        <Stack.Navigator initialRouteName=\"Empty\">\n          <Stack.Screen name=\"Empty\" component={() => <View></View>} />\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TabBar Label Text via getLabelText (JavaScript)\nDESCRIPTION: This example shows how to customize the label text for each tab by supplying the getLabelText prop to TabBar. The function receives the current route and selects its title as the label. Designed for use with React Navigation's TabBar component; requires each route object to have a title property. Outputs a text string used as the tab label.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n<TabBar\n  getLabelText={({ route }) => route.title}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring ServerContainer with Location Prop\nDESCRIPTION: Example showing how to pass the location prop to the ServerContainer component. The location object should include pathname and search properties that match the browser's location object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-container.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ServerContainer location={{ pathname: '/profile', search: '' }}>\n  <App />\n</ServerContainer>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to URL Events for Custom Deep Linking (JavaScript)\nDESCRIPTION: Demonstrates subscribing to and unsubscribing from the 'url' event with the Linking module in a React component's lifecycle methods. The addEventListener and removeEventListener calls allow custom handling of deep link navigation. The handler function (this.handleDeepLink) processes incoming URLs.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponentDidMount() {\n    // [...]\n    Linking.addEventListener('url', this.handleDeepLink)\n}\ncomponentWillUnmount() {\n    // [...]\n    Linking.removeEventListener('url', this.handleDeepLink);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling react-native-screens Optimization in React Navigation (JavaScript)\nDESCRIPTION: Imports and calls `useScreens` from the `react-native-screens` library to enable native screen optimizations in a React Navigation application. This should be executed in the main application file (e.g., `index.js` or `App.js`) before any navigation stacks are rendered. This setup applies to both Expo (where `react-native-screens` is pre-included) and standard React Native projects (after installing the library).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/react-native-screens.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Before rendering any navigation stack\nimport { useScreens } from 'react-native-screens';\nuseScreens();\n```\n\n----------------------------------------\n\nTITLE: Using Screen Options in HTML Meta Tags\nDESCRIPTION: Shows how to utilize screen options to set HTML title and meta description tags for SEO purposes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/server-container.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<title>{options.title}</title>\n<meta name=\"description\" content={options.description} />\n```\n\n----------------------------------------\n\nTITLE: Animating Drawer Content with Animated and drawerOpenProgress in JavaScript\nDESCRIPTION: This snippet demonstrates how to animate custom drawer content using the drawerOpenProgress prop and Animated API in a React Native project. It interpolates the progress value to produce a translateX effect, creating parallax animation for drawer open/close actions. Requires an Animated implementation and drawerOpenProgress (a Reanimated Node). Inputs are animation props and style; outputs an Animated view component. Limitations: depends on correct prop and animation configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomDrawerContentComponent = (props) => {\n  const translateX = Animated.interpolate(drawerOpenProgress, {\n    inputRange: [0, 1],\n    outputRange: [-100, 0],\n  });\n\n  return (\n    <Animated.View style={{ transform: [{ translateX }] }}>\n      {/* ... drawer contents */}\n    </Animated.View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally Locking Drawer in Nested Stack via navigationOptions (JavaScript)\nDESCRIPTION: This code shows how to dynamically lock the drawer navigator when navigating within its nested StackNavigator (`FeedStack`). By setting `navigationOptions` on the `FeedStack`, it checks the `navigation.state.index`. If navigation has moved beyond the initial screen (index > 0), the `drawerLockMode` is set to `'locked-closed'`, preventing the drawer from being opened.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nFeedStack.navigationOptions = ({ navigation }) => {\n  let drawerLockMode = 'unlocked';\n  if (navigation.state.index > 0) {\n    drawerLockMode = 'locked-closed';\n  }\n\n  return {\n    drawerLockMode,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Navigator Specific Types - TypeScript\nDESCRIPTION: Demonstrates how to manually annotate `useNavigation` to access navigator-specific APIs. This involves defining a specific type for the navigator's param list and using it to type the navigation prop.  It's important to note this approach isn't fully type-safe.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype BottomTabParamList = StaticParamList<typeof BottomTabNavigator>;\ntype ProfileScreenNavigationProp = BottomTabNavigationProp<\n  BottomTabParamList,\n  'Profile'\n>;\n\n// ...\n\nconst navigation = useNavigation<ProfileScreenNavigationProp>();\n```\n\n----------------------------------------\n\nTITLE: Migrating sceneContainerStyle to sceneStyle in Tab.Navigator (JavaScript)\nDESCRIPTION: This snippet uses a diff-style to convert the deprecated 'sceneContainerStyle' prop to the new 'sceneStyle' inside 'screenOptions' in Tab.Navigator (or similar navigators). Requires React Navigation. Configure 'sceneStyle' within screenOptions for individual screen styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n- <Tab.Navigator sceneContainerStyle={{ backgroundColor: 'white' }}>\\n+ <Tab.Navigator screenOptions={{ sceneStyle: { backgroundColor: 'white' } }}>\n```\n\n----------------------------------------\n\nTITLE: Using withNavigation HOC in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the withNavigation higher-order component to automatically provide the navigation prop to a React Native component. This approach allows the component to be used anywhere in the app without explicitly passing the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/connecting-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Renaming tabBarTestID to tabBarButtonTestID in Tab Navigator (JavaScript)\nDESCRIPTION: This diff-style code snippet shows how to rename the 'tabBarTestID' property to 'tabBarButtonTestID' in the 'tabBarOptions' of Bottom Tab or Material Top Tab Navigators. Requires a project using these navigators. Change occurs in the Navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n- <Tab.Navigator tabBarOptions={{ tabBarTestID: 'test-id' }}>\\n+ <Tab.Navigator tabBarOptions={{ tabBarButtonTestID: 'test-id' }}>\n```\n\n----------------------------------------\n\nTITLE: Configure Jest Setup Files After Environment\nDESCRIPTION: This configuration specifies the `setupFilesAfterEnv` option in Jest to include a setup file (e.g., `jest/setup.js`). This file typically contains global mocks and setup code that needs to run before each test.  This is important for setting up mocks for React Navigation's dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"preset\": \"react-native\",\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(@react-native|react-native|@react-navigation)/)\"\n  ],\n  \"setupFilesAfterEnv\": [\"<rootDir>/jest/setup.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator with Multiple Screens\nDESCRIPTION: Extended configuration of a stack navigator with multiple screens (Home and Details) and setting an initial route. This demonstrates how to define multiple routes in a stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Header Height with HeaderHeightContext.Consumer (JavaScript)\nDESCRIPTION: Demonstrates consuming HeaderHeightContext to obtain the current header height from navigation context. Often used for layout adjustments or padding. Requires React Navigation elements and context provider in tree. Outputs/UI adapts to headerHeight value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderHeightContext } from '@react-navigation/elements';\n\n// ...\n\n<HeaderHeightContext.Consumer>\n  {(headerHeight) => {\n    /* render something */\n  }}\n</HeaderHeightContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Annotating useRoute with Type Parameter (TypeScript)\nDESCRIPTION: This snippet demonstrates annotating the `route` object obtained from the `useRoute` hook with a type parameter.  It is recommended to use the `route` object from the screen component props instead.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = useRoute<ProfileScreenRouteProp>();\n```\n\n----------------------------------------\n\nTITLE: Determining Drawer State in React Navigation in JavaScript\nDESCRIPTION: This snippet retrieves whether the drawer navigator is open or closed by accessing the parent navigator's state object. It relies on the navigation prop's 'dangerouslyGetParent' method and checks the 'isDrawerOpen' property. This is typically used for conditional rendering or logic based on drawer state and should be used when the component is nested inside a drawer navigator context. Ensure compatibility with the versions of react-navigation that support the described state structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst parent = this.props.navigation.dangerouslyGetParent();\nconst isDrawerOpen = parent && parent.state && parent.state.isDrawerOpen;\n```\n\n----------------------------------------\n\nTITLE: Interactive Header Button with Component State\nDESCRIPTION: Shows how to implement a header button that interacts with the screen component's state using navigation params. Includes a counter implementation that demonstrates component-header communication.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/header-buttons.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerTitle: <LogoTitle />,\n      headerRight: (\n        <Button\n          onPress={navigation.getParam('increaseCount')}\n          title=\"+1\"\n          color=\"#fff\"\n        />\n      ),\n    };\n  };\n\n  componentDidMount() {\n    this.props.navigation.setParams({ increaseCount: this._increaseCount });\n  }\n\n  state = {\n    count: 0,\n  };\n\n  _increaseCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  /* later in the render function we display the count */\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting useLinkTo Hook for a Class Component (JavaScript)\nDESCRIPTION: This snippet illustrates a pattern to make the `useLinkTo` hook available within a React class component. A functional component wrapper is created which invokes `useLinkTo` and passes the resulting `linkTo` function as a prop to the instance of the class component (`Home`). The class component can then access this navigation function via `this.props.linkTo`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-link-to.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Home extends React.Component {\n  render() {\n    // Get it from props\n    const { linkTo } = this.props;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const linkTo = useLinkTo();\n\n  return <Home {...props} linkTo={linkTo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Accessing Params and Using getParam with Fallback (JavaScript)\nDESCRIPTION: Shows how to extract parameters from navigation state, highlighting the potential failure if params is undefined, and the safer alternative using getParam with a fallback value. Requires the navigation prop. Inputs: param key and fallback default; outputs: the resolved value (name) for downstream usage.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { name } = this.props.navigation.state.params;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst name = this.props.navigation.getParam('name', 'Peter');\n```\n\n----------------------------------------\n\nTITLE: Navigation and Route Type Extraction - TS\nDESCRIPTION: Illustrates how to extract the types for `navigation` and `route` from the `Props` type. Also shows how to get the types for `navigation` and `route` separately.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ntype ProfileScreenNavigationProp = Props['navigation'];\n\ntype ProfileScreenRouteProp = Props['route'];\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n\ntype ProfileScreenNavigationProp = NativeStackNavigationProp<\n  RootStackParamList,\n  'Profile'\n>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RouteProp } from '@react-navigation/native';\n\ntype ProfileScreenRouteProp = RouteProp<RootStackParamList, 'Profile'>;\n```\n\n----------------------------------------\n\nTITLE: Using NavigationService to navigate in React Navigation from any JavaScript module\nDESCRIPTION: This snippet demonstrates how to use the NavigationService to navigate from any JavaScript module in a React Navigation app. It shows importing the service and calling its navigate function with route name and parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// any js module\nimport NavigationService from 'path-to-NavigationService.js';\n\n// ...\n\nNavigationService.navigate('ChatScreen', { userName: 'Lucy' });\n```\n\n----------------------------------------\n\nTITLE: Custom Stack Router with Navigation Blocking\nDESCRIPTION: Example of a custom stack router that extends StackRouter to implement conditional navigation blocking based on route parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackRouter } from '@react-navigation/native';\n\nconst MyStackRouter = (options) => {\n  const router = StackRouter(options);\n\n  return {\n    ...router,\n    getStateForAction(state, action, options) {\n      const result = router.getStateForAction(state, action, options);\n\n      if (\n        result != null &&\n        result.index > state.index &&\n        state.routes[state.index].params?.isEditing\n      ) {\n        return state;\n      }\n\n      return result;\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Auto-Fixing Lint Errors with ESLint - Bash\nDESCRIPTION: Executes ESLint in auto-fix mode via Yarn, attempting to automatically resolve fixable lint errors in the codebase. Requires ESLint setup and Yarn. This command may not resolve all issues, in which case manual intervention will be necessary.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Title in React Navigation for Web\nDESCRIPTION: This snippet demonstrates how to customize the document title formatting for web applications using React Navigation. It provides a custom formatter function to append a suffix to the default title.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction App() {\n  return (\n    <NavigationContainer\n      documentTitle={{\n        formatter: (options, route) =>\n          `${options?.title ?? route?.name} - My Cool App`,\n      }}\n    >\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation 7 Alpha\nDESCRIPTION: Command to install the alpha version of React Navigation 7 with the new Static API feature.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2024-03-25-introducing-static-api.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-navigation/native@next @react-navigation/native-stack@next\n```\n\n----------------------------------------\n\nTITLE: Using Organized Types with useRoute Hook (TypeScript)\nDESCRIPTION: This snippet demonstrates how to utilize the organized types to annotate the `useRoute` hook within a component. By referencing the type of `route` from `HomeTabScreenProps`, it ensures type safety and accurate type inference for the route object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HomeTabScreenProps } from './navigation/types';\n\nfunction PopularScreen() {\n  const route = useRoute<HomeTabScreenProps<'Popular'>['route']>();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Tab View with npm - Bash\nDESCRIPTION: Installs the react-native-tab-view package using npm, which is required for implementing tab views in React Native projects. Make sure you have npm installed and run this command from your project root directory. No additional inputs are required; this command updates the project's package.json and installs dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-tab-view\n```\n\n----------------------------------------\n\nTITLE: Initializing React Navigation App Container with Stack Navigator (JavaScript)\nDESCRIPTION: Demonstrates the basic setup for React Navigation by creating a stack navigator using `createStackNavigator` and wrapping it with `createAppContainer`. The resulting `AppContainer` is then exported as the main application component. This container manages navigation state and connects the navigator to the app environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/app-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\n\nconst RootStack = createStackNavigator({\n  /* your routes here */\n});\nconst AppContainer = createAppContainer(RootStack);\n\n// Now AppContainer is the main component for React to render\nexport default AppContainer;\n```\n\n----------------------------------------\n\nTITLE: Setting up Navigation Structure with SwitchNavigator\nDESCRIPTION: Creates the main navigation structure using createSwitchNavigator to handle authentication flow between authenticated and non-authenticated states. Includes setup of AppStack and AuthStack using createStackNavigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/auth-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createSwitchNavigator,\n  createStackNavigator,\n  createAppContainer,\n} from 'react-navigation';\n\n// Implementation of HomeScreen, OtherScreen, SignInScreen, AuthLoadingScreen\n// goes here.\n\nconst AppStack = createStackNavigator({ Home: HomeScreen, Other: OtherScreen });\nconst AuthStack = createStackNavigator({ SignIn: SignInScreen });\n\nexport default createAppContainer(\n  createSwitchNavigator(\n    {\n      AuthLoading: AuthLoadingScreen,\n      App: AppStack,\n      Auth: AuthStack,\n    },\n    {\n      initialRouteName: 'AuthLoading',\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Navigation Routes with handleServerRequest (JavaScript)\nDESCRIPTION: This snippet illustrates how to use React Navigation's 'handleServerRequest' function with Express for server-side rendering. It extracts the request path and query, computes the route's navigation object, page title, and options, then renders the app markup using 'renderToString'. The resulting HTML includes the correct title and initial markup for hydration. Dependencies include Express, React, and React Navigation. Key parameters are the Express request/response objects and the app's navigator router.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/web-support.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpressApp.get('/*', (req, res) => {\n  const { path, query } = req;\n\n  const { navigation, title, options } = handleServerRequest(\n    AppNavigator.router,\n    path,\n    query\n  );\n\n  const markup = renderToString(<AppNavigator navigation={navigation} />);\n\n  res.send(\n    `<!doctype html>\n  <html lang=\"\">\n  <head>\n    <title>${title}</title>\n    <script src=\"main.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\">${markup}</div>\n  </body>\n</html>`\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown List of React Navigation Examples\nDESCRIPTION: A formatted markdown document listing various mobile applications that use React Navigation, organized into selected highlights and other notable apps. Each entry includes app store links where available.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/used-by.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: used-by\ntitle: Apps using React Navigation\nsidebar_label: Apps using React Navigation\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Navigation with Static Configuration in React Navigation\nDESCRIPTION: This snippet demonstrates how to create an independent navigation tree using the static configuration approach in React Navigation. It wraps a Navigation component created with createStaticNavigation inside NavigationIndependentTree to isolate it from the parent navigation container.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStaticNavigation,\n  NavigationIndependentTree,\n} from '@react-navigation/native';\n\n/* content */\n\nconst Navigation = createStaticNavigation(RootStack);\n\nfunction NestedApp() {\n  return (\n    // highlight-start\n    <NavigationIndependentTree>\n      <Navigation />\n    </NavigationIndependentTree>\n    // highlight-end\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Multiple Navigation Example\nDESCRIPTION: Example showing navigation to the same route multiple times using the Details screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Params with setParams in React Navigation (JavaScript)\nDESCRIPTION: Illustrates how to merge new parameters into the current route using the 'setParams' function from the navigation prop. Typical usage involves updating screen options such as header titles or buttons. Requires React and React Navigation. Inputs: object of params to merge into the route; outputs: updated route information.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return (\n      <Button\n        onPress={() => this.props.navigation.setParams({ name: 'Lucy' })}\n        title=\"Set title name to 'Lucy'\"\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Dynamic Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates testing a React component (`MyComponent`) with React Navigation using a dynamic navigation setup and `NavigationContainer`. It uses `@testing-library/react-native` to render the component within the test navigator and asserts the visibility of a modal based on the focus state. The test verifies that the modal is shown only when the component is focused within the `NavigationContainer`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { act, render, screen } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createTestStackNavigator } from './TestStackNavigator';\nimport { MyComponent } from './MyComponent';\n\ntest('does not show modal when not focused', () => {\n  const Stack = createTestStackNavigator();\n\n  const TestStack = () => (\n    <Stack.Navigator>\n      <Stack.Screen name=\"A\" component={MyComponent} />\n      <Stack.Screen name=\"B\" component={() => null} />\n    </Stack.Navigator>\n  );\n\n  render(\n    <NavigationContainer\n      initialState={{\n        routes: [{ name: 'A' }, { name: 'B' }],\n      }}\n    >\n      <TestStack />\n    </NavigationContainer>\n  );\n\n  expect(screen.queryByText('Modal')).not.toBeVisible();\n});\n\ntest('shows modal when focused', () => {\n  const Stack = createTestStackNavigator();\n\n  const TestStack = () => (\n    <Stack.Navigator>\n      <Stack.Screen name=\"A\" component={MyComponent} />\n      <Stack.Screen name=\"B\" component={() => null} />\n    </Stack.Navigator>\n  );\n\n  render(\n    <NavigationContainer\n      initialState={{\n        routes: [{ name: 'B' }, { name: 'A' }],\n      }}\n    >\n      <TestStack />\n    </NavigationContainer>\n  );\n\n  expect(screen.getByText('Modal')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding iOS URL Scheme via uri-scheme Command (Bash)\nDESCRIPTION: Uses the `npx uri-scheme add` command to automatically configure the specified URL scheme (e.g., 'example') in the native iOS project files (Info.plist). This is an alternative to manual Xcode configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme add example --ios\n```\n\n----------------------------------------\n\nTITLE: Listening to the gestureCancel Event - React Navigation (JavaScript)\nDESCRIPTION: Attaches a listener for the gestureCancel event, which fires if the swipe gesture is canceled or not completed. The snippet leverages React useEffect for subscription and cleanup. Appropriate for screen components where custom logic is needed when gesture navigation fails.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureCancel', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux DevTools Extension with React Navigation\nDESCRIPTION: Example of how to implement the useReduxDevToolsExtension hook with a NavigationContainer to enable Redux DevTools debugging for React Navigation. The hook automatically sends navigation logs to Redux DevTools Extension during development.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/devtools.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  NavigationContainer,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n\n  useReduxDevToolsExtension(navigationRef);\n\n  return (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Focus Actions with withNavigationFocus in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the withNavigationFocus higher-order component to trigger actions when a screen comes into focus. It checks for changes in the isFocused prop to determine when to execute actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/function-after-focusing-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { withNavigationFocus } from 'react-navigation';\n\nclass TabScreen extends Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.isFocused !== this.props.isFocused) {\n      // Use the `this.props.isFocused` boolean\n      // Call any action\n    }\n  }\n\n  render() {\n    return <View />;\n  }\n}\n\n// withNavigationFocus returns a component that wraps TabScreen and passes\n// in the navigation prop\nexport default withNavigationFocus(TabScreen);\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with React Navigation Template\nDESCRIPTION: This command creates a new Expo-based React Native project using the React Navigation template. It's used as a quick start for new projects with static configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template react-navigation/template\n```\n\n----------------------------------------\n\nTITLE: Using getId to Uniquely Identify Screen Instances in JSX\nDESCRIPTION: Demonstrates using the `getId` prop, which accepts a callback receiving route `params`. Returning a unique ID from this callback changes navigation behavior, allowing multiple instances of the same screen name (differentiated by ID) within navigators like stacks.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/screen.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  getId={({ params }) => params.userId}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing back navigation in React Navigation\nDESCRIPTION: This snippet demonstrates how to implement back navigation using the goBack method, as well as navigation to home and pushing new routes in a React Native application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigating.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.push('Details')}\n        />\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to Bottom Tab Navigator in React Navigation\nDESCRIPTION: Enables animations for tab transitions in the Bottom Tab Navigator using the animation option. This was a highly requested feature that allows more interactive and visually appealing tab switching.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab.Navigator\n  screenOptions={{\n    // highlight-next-line\n    animation: 'fade',\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Querying Focus State with isFocused in React Navigation (JavaScript)\nDESCRIPTION: Shows how to use the 'isFocused' method on the navigation prop to check if the current screen is active. This requires access to the navigation prop. The method returns a boolean reflecting the screen's focus state. No parameters; output is a true/false value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet isFocused = this.props.navigation.isFocused();\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Navigator with NavigationService Reference\nDESCRIPTION: Setup code showing how to create the root navigator and connect it to the NavigationService using a ref callback. This enables global navigation access through the service.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\n\nimport NavigationService from './NavigationService';\n\nconst TopLevelNavigator = createStackNavigator({\n  /* ... */\n});\n\nclass App extends React.Component {\n  // ...\n\n  render() {\n    return (\n      <TopLevelNavigator\n        ref={(navigatorRef) => {\n          NavigationService.setTopLevelNavigator(navigatorRef);\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a PureComponent-based Scene for TabView (JavaScript)\nDESCRIPTION: Defines a class component extending React.PureComponent to optimize rendering of a scene in TabView. Used when route scenes don't depend on tab index and component state changes are well-contained. Enforces shallow comparison for props and state to minimize rerenders. Requires React and react-native View, Avatar, NewsFeed dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nexport default class HomeComponent extends React.PureComponent {\n  render() {\n    return (\n      <View style={styles.page}>\n        <Avatar />\n        <NewsFeed />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Expo Managed Projects (Bash)\nDESCRIPTION: Uses `npx expo install` to add required dependencies (`react-native-gesture-handler`, `react-native-reanimated`, `react-native-screens`, `react-native-safe-area-context`, `@react-native-community/masked-view`) to an Expo managed project. This command ensures compatible versions are installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header Style in Stack Navigator\nDESCRIPTION: Example of setting the height property in headerStyle to specify a custom header height and avoid measurement glitches.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n}\n```\n\n----------------------------------------\n\nTITLE: Using Params in Header Title in React Navigation\nDESCRIPTION: Shows how to use navigation params to dynamically set the header title in React Navigation. The navigationOptions is set as a function to access the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      title: navigation.getParam('otherParam', 'A Nested Details Screen'),\n    };\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up NavigationService with React Navigation in App.js\nDESCRIPTION: This snippet demonstrates how to set up the root navigator and integrate it with the NavigationService in the main App component. It uses createStackNavigator and createAppContainer from react-navigation, and sets a ref on the AppContainer to provide the navigator to the NavigationService.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating-without-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\n\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\nimport NavigationService from './NavigationService';\n\nconst TopLevelNavigator = createStackNavigator({\n  /* ... */\n});\n\nconst AppContainer = createAppContainer(TopLevelNavigator);\n\nexport default class App extends React.Component {\n  // ...\n\n  render() {\n    return (\n      <AppContainer\n        ref={(navigatorRef) => {\n          NavigationService.setTopLevelNavigator(navigatorRef);\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeAreaView for iPhone X Compatible Layout\nDESCRIPTION: Implementation of SafeAreaView to ensure content is properly displayed on iPhone X by avoiding interference with the notch and home indicator areas.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/handling-iphonex.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaView } from 'react-navigation';\n\nclass App extends Component {\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.paragraph}>This is top text.</Text>\n        <Text style={styles.paragraph}>This is bottom text.</Text>\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Drawer Style in React Navigation\nDESCRIPTION: Example showing how to style the drawer component by providing a drawerStyle prop. This allows customizing background color and width of the drawer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/drawer-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Drawer.Navigator\n  drawerStyle={{\n    backgroundColor: '#c6cbef',\n    width: 240,\n  }}\n>\n  {/* screens */}\n</Drawer.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Drawer Content Component in react-navigation-drawer with JavaScript\nDESCRIPTION: This snippet shows how to override the default drawer content by creating a custom component in JavaScript using React Native. It combines ScrollView, SafeAreaView, and DrawerItems to build a container that supports navigation item rendering and safe area insets. Requires react-native-safe-area-view, react-navigation-drawer, and React Native. The container style ensures the component fills the drawer space, and DrawerItems passes navigation props. Replace or extend this pattern to include additional content such as headers or footers. Takes the navigation props as input; outputs a styled custom drawer UI.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SafeAreaView from 'react-native-safe-area-view';\nimport { DrawerItems } from 'react-navigation-drawer';\n\nconst CustomDrawerContentComponent = (props) => (\n  <ScrollView>\n    <SafeAreaView\n      style={styles.container}\n      forceInset={{ top: 'always', horizontal: 'never' }}\n    >\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Component with Direct Props\nDESCRIPTION: Example of a component that requires navigation prop to be passed directly from a parent screen component. This approach needs explicit prop passing which can be cumbersome in deeply nested components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/connecting-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from 'react-native';\n\nfunction GoToButton({ navigation, screenName }) {\n  return (\n    <Button\n      title={`Go to ${screenName}`}\n      onPress={() => navigation.navigate(screenName)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Expo Metro Bundler Cache (Bash)\nDESCRIPTION: This command starts the Expo development server and clears the Metro bundler cache. Use this when encountering 'Unable to resolve module' errors pointing to local files in an Expo project, potentially caused by a stale cache.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo start -c\n```\n\n----------------------------------------\n\nTITLE: Using Group Component for Screen Organization in React Navigation 6\nDESCRIPTION: Shows how to use the new Group component to organize screens and share common screenOptions between different navigation groups.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2021-08-14-react-navigation-6.0.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Group>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Group>\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"CreatePost\" component={CreatePostScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Gesture Handler Import (Native)\nDESCRIPTION: Creates a file named `gesture-handler.native.js` that imports `react-native-gesture-handler`. This setup ensures the library is only imported on native platforms (iOS/Android), optimizing web builds.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Only import react-native-gesture-handler on native platforms\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack Navigator with Multiple Screen Components\nDESCRIPTION: This example shows how to configure a Stack Navigator with multiple screens. It demonstrates defining named routes using Stack.Screen components and associating them with specific screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/glossary-of-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\n\nconst StackNavigator = (\n  <Stack.Navigator>\n    <Stack.Screen\n      name=\"Home\"\n      component={HomeScreen} // <----\n    />\n    <Stack.Screen\n      name=\"Details\"\n      component={DetailsScreen} // <----\n    />\n  </Stack.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Material Top Tabs Navigator Dependencies\nDESCRIPTION: Command to install the required dependencies for using Material Top Tabs Navigator in a React Native project. This includes the @react-navigation/material-top-tabs package and react-native-tab-view.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/material-top-tabs@^5.x react-native-tab-view@^2.x\n```\n\n----------------------------------------\n\nTITLE: Implementing withNavigation HOC\nDESCRIPTION: Shows the correct implementation using withNavigation HOC to automatically provide the navigation prop to a component through React context, eliminating the need for explicit prop passing.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/connecting-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Fetching Params: Old navigation.getParam vs. New Optional Chaining (JavaScript)\nDESCRIPTION: The snippet compares 4.x's navigation.getParam with 5.x's use of optional chaining and nullish coalescing. Both provide default values for possibly undefined params. Assumes navigation (4.x) or route (5.x) objects are available. No dependencies beyond React Navigation and JS language features. Inputs: param keys and defaults. Outputs: resolved param or default value.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnavigation.getParam('someParam', 'defaultValue');\n```\n\nLANGUAGE: js\nCODE:\n```\nroute.params?.someParam ?? 'defaultValue';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Navigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to implement a basic Navigator using NavigationContainer and Stack.Navigator. NavigationContainer manages the navigation tree and contains the navigation state, while Stack.Navigator defines how screens are rendered.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator> // <---- This is a Navigator\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Specific iOS Deep Link via uri-scheme (Bash)\nDESCRIPTION: Provides a specific example of using `npx uri-scheme open` to test the deep link 'example://chat/jane' on an iOS device or simulator connected to the development machine.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open \"example://chat/jane\" --ios\n```\n\n----------------------------------------\n\nTITLE: Passing Static navigationOptions from Class to Stack.Screen (JavaScript)\nDESCRIPTION: Combines static navigationOptions from a class-based HomeScreen with passing them directly as the options prop to Stack.Screen in React Navigation 5.x. This preserves legacy static configuration for one-off cases but is discouraged for flexibility. Inputs: HomeScreen component. Output: options applied to Home screen. Limitation: limited type safety and no context awareness.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nclass HomeScreen extends React.Component {\\n  static navigationOptions = {\\n    // ...\\n  };\\n}\\n\\n// ...\\n\\n<Stack.Screen\\n  name=\\\"Home\\\"\\n  component={HomeScreen}\\n  options={HomeScreen.navigationOptions}\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Dynamic API Param Type Definition - TSX\nDESCRIPTION: Defines an object type with mappings for route names to the params of the route for dynamic API usage.  Specifying `undefined` indicates that the route has no parameters, while a union type with `undefined` makes the params optional.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype RootStackParamList = {\n  Profile: { userId: string };\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntype RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Feed: { sort: 'latest' | 'top' } | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation State Structure in JavaScript for React Navigation\nDESCRIPTION: This snippet shows the typical structure of a navigation state object in React Navigation. It includes an index to identify the active route and an array of routes with required properties like routeName and key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1, // identifies which route in the routes array is active\n  routes: [\n    {\n      // Each route needs a name to identify the type.\n      routeName: 'MyRouteName',\n\n      // A unique identifier for this route in the routes array:\n      key: 'myroute-123',\n      // (used to specify the re-ordering of routes)\n\n      // Routes can have any data, as long as key and routeName are correct\n      ...randomRouteData,\n    },\n    ...moreRoutes,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Scroll Offset with useScrollToTop (React Native)\nDESCRIPTION: This snippet illustrates how to customize the scroll-to-top behavior by providing a specific scroll offset. A primary ref (`ref`) is created and attached to the `ScrollView`. Instead of passing this ref directly to `useScrollToTop`, a new ref object is created inline using `React.useRef`. This new object contains a custom `scrollToTop` function which, when invoked, calls the `scrollTo` method on the actual `ScrollView` ref (`ref.current`) with a specified vertical offset (`{ y: 100 }`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/use-scroll-to-top.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { ScrollView } from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nfunction Albums() {\n  const ref = React.useRef(null);\n\n  useScrollToTop(\n    React.useRef({\n      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),\n    })\n  );\n\n  return <ScrollView ref={ref}>{/* content */}</ScrollView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Options for iOS in React Navigation\nDESCRIPTION: Example of configuring tab bar options for iOS using 'tabBarOptions'. This includes setting active tint color, label style, and background color.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links with xcrun on iOS Simulator\nDESCRIPTION: This snippet demonstrates how to use the xcrun command to test deep links in the iOS simulator. It provides a general syntax and a specific example for opening a deep link.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl openurl booted [your deep link]\n```\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl openurl booted \"example://chat/jane\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Header Height in Drawer Navigator\nDESCRIPTION: This snippet demonstrates how to specify a fixed height for a custom header using the `headerStyle` option. This is recommended if the custom header's height differs from the default to prevent visual glitches during measurement.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-navigator.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nheaderStyle: {\n  height: 80, // Specify the height of your custom header\n};\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pod Dependencies After Resolutions (Bash)\nDESCRIPTION: These commands install iOS Pod dependencies after potentially changing native module versions using yarn resolutions. This ensures the native iOS project links against the correct version specified in the resolution.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Dispatching Navigation Actions on App Container\nDESCRIPTION: This example demonstrates how to use a React ref to access the dispatch method on an AppContainer, allowing navigation actions to be triggered from outside the navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/app-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppContainer = createAppContainer(AppNavigator);\n\nclass App extends React.Component {\n  someEvent() {\n    // call navigate for AppNavigator here:\n    this.navigator &&\n      this.navigator.dispatch(\n        NavigationActions.navigate({ routeName: someRouteName })\n      );\n  }\n  render() {\n    return (\n      <AppContainer\n        ref={(nav) => {\n          this.navigator = nav;\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction in React Navigation (Static)\nDESCRIPTION: Demonstrates setting the text direction explicitly to Right-to-Left ('rtl') using the `direction` prop on the `<Navigation>` component. This informs navigators (like the drawer) to adjust layout accordingly, but doesn't change the direction itself.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n<Navigation\n  // highlight-next-line\n  direction=\"rtl\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigation State Structure Example in React Navigation\nDESCRIPTION: This snippet demonstrates the structure of a navigation state object in React Navigation. It shows the key properties including the router key, index of the active route, and an array of route objects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/glossary-of-terms.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'StackRouterRoot',\n  index: 1,\n  routes: [\n    { key: 'A', name: 'Home' },\n    { key: 'B', name: 'Profile' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Example in React Navigation\nDESCRIPTION: Demonstrates basic navigation between screens using the navigate function with route parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { navigate } = this.props.navigation;\n\n    return (\n      <View>\n        <Text>This is the home screen of the app</Text>\n        <Button\n          onPress={() => navigate('Profile', { name: 'Brent' })}\n          title=\"Go to Brent's profile\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options with options prop in Stack Navigator\nDESCRIPTION: This example shows how to use the 'options' prop on Stack.Screen components to set custom titles for different screens in a Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen\n    name=\"Home\"\n    component={HomeScreen}\n    options={{ title: 'Awesome app' }}\n  />\n  <Stack.Screen\n    name=\"Profile\"\n    component={ProfileScreen}\n    options={{ title: 'My profile' }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Updating Options Based on Focus State\nDESCRIPTION: Shows how to safely update navigation options (e.g., `setOptions`) or dispatch actions from a potentially preloaded screen. It uses `navigation.isFocused()` to ensure these operations only occur when the screen is fully focused and active, not just preloaded.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nif (navigation.isFocused()) {\n  navigation.setOptions({ title: 'Updated title' });\n}\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration (sourceExts)\nDESCRIPTION: This configures the `sourceExts` option in `metro.config.js` to include `ts` and `tsx` extensions, resolving module resolution issues in TypeScript projects. Requires Metro bundler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsourceExts: ['js', 'json', 'ts', 'tsx'];\n```\n\n----------------------------------------\n\nTITLE: Using withNavigation HOC with a custom back button in React Navigation\nDESCRIPTION: This example demonstrates how to use the withNavigation higher order component to wrap a custom back button component. It allows the component to access the navigation prop without having to pass it down explicitly from parent components, making it useful for deeply nested components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/with-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return <Button title=\"Back\" onPress={() => { this.props.navigation.goBack() }} />;\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Actions in React Navigation\nDESCRIPTION: Demonstrates how to override default navigation behavior by customizing the getStateForAction method to handle custom navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/routers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyApp = createStackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyApp.router.getStateForAction;\n\nMyApp.router.getStateForAction = (action, state) => {\n  if (state && action.type === 'PushTwoProfiles') {\n    const routes = [\n      ...state.routes,\n      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },\n      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },\n    ];\n    return {\n      ...state,\n      routes,\n      index: routes.length - 1,\n    };\n  }\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Static Configuration API for React Navigation\nDESCRIPTION: Example showing the new static configuration API in React Navigation 7, which provides simplified type-checking with TypeScript and easier deep linking setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My App',\n      },\n    },\n    Details: {\n      screen: DetailsScreen,\n      linking: 'details/:id',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus-Aware Component with withNavigationFocus in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the withNavigationFocus higher-order component to create a component that displays its current focus state. The FocusStateLabel component receives the isFocused prop from withNavigationFocus and renders different text based on the focus state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/with-navigation-focus.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withNavigationFocus } from 'react-navigation';\n\nclass FocusStateLabel extends React.Component {\n  render() {\n    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;\n  }\n}\n\n// withNavigationFocus returns a component that wraps FocusStateLabel and passes\n// in the navigation prop\nexport default withNavigationFocus(FocusStateLabel);\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Integration with React Navigation\nDESCRIPTION: Demonstrates the basic setup of combining Redux Provider with React Navigation's app container. Shows how to wrap the navigation container with Redux Provider to enable Redux state management throughout the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/redux-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet RootStack = createStackNavigator({\n  Counter: CounterContainer,\n  StaticCounter: StaticCounterContainer,\n});\n\nlet Navigation = createAppContainer(RootStack);\n\n// Render the app container component with the provider around it\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Navigation />\n      </Provider>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Screen Options (TypeScript)\nDESCRIPTION: This snippet shows how to annotate the `options` prop for a `Screen` component using types from the relevant navigator package (e.g., `StackNavigationOptions` from `@react-navigation/stack`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StackNavigationOptions } from '@react-navigation/stack';\n\nconst options: StackNavigationOptions = {\n  headerShown: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer Ref with useRef (TypeScript)\nDESCRIPTION: This example demonstrates how to annotate the ref object for `NavigationContainer` when using `React.useRef` hook. This enables type-checking for navigation actions triggered via the ref.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef =\n  React.useRef<NavigationContainerRef<RootStackParamList>>(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Lock with Navigation Options\nDESCRIPTION: Configuration of navigationOptions on the stack navigator to control drawer lock mode based on navigation state. Locks drawer when navigating deeper into the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  Details: DetailsScreen,\n});\n\nFeedStack.navigationOptions = ({ navigation }) => {\n  let drawerLockMode = 'unlocked';\n  if (navigation.state.index > 0) {\n    drawerLockMode = 'locked-closed';\n  }\n\n  return {\n    drawerLockMode,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack and Tab Navigators in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a tab navigator with two tabs, each containing a stack navigator. It shows the structure of nested navigation in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst HomeStack = createStackNavigator({\n  Home: HomeScreen,\n  Details: DetailsScreen,\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: SettingsScreen,\n  Profile: ProfileScreen,\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: HomeStack,\n  Settings: SettingsStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Imperatively Navigating to a Named Route (JavaScript)\nDESCRIPTION: This snippet demonstrates how to navigate to a specific route (here 'App') using the navigation object's navigate method. Typically used after user login in legacy authentication flows. Dependencies: React Navigation. Inputs: the route name as a string. Outputs: transitions the navigation state to the specified screen. Use with imperative navigator setups from React Navigation 4.x.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nnavigation.navigate('App');\n```\n\n----------------------------------------\n\nTITLE: Popping Back in Navigation Stack with StackActions in React Navigation\nDESCRIPTION: Demonstrates how to use the pop action to navigate back to a previous screen in the stack. The example shows popping back by one screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/stack-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nconst popAction = StackActions.pop({\n  n: 1,\n});\n\nthis.props.navigation.dispatch(popAction);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component for Header Title (JavaScript)\nDESCRIPTION: Demonstrates replacing the default text header title with a custom React component (e.g., rendering an Image). This is achieved by defining a component (`LogoTitle`) and assigning it to the `headerTitle` property within `static navigationOptions`, providing more flexibility in header appearance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/headers.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nclass LogoTitle extends React.Component {\n  render() {\n    return (\n      <Image\n        source={require('./spiro.png')}\n        style={{ width: 30, height: 30 }}\n      />\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    // headerTitle instead of title\n    headerTitle: () => <LogoTitle />,\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Index from Navigation State using useNavigationState Hook (React Navigation, JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the useNavigationState React hook to extract the index property from the navigation state object within a functional React component. It requires @react-navigation/native as a dependency. The selector function provided to useNavigationState optimizes re-rendering by only watching the specific value, in this case state.index. The expected output is the index value (number) of the current route stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/use-navigation-state.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst index = useNavigationState((state) => state.index);\n```\n\n----------------------------------------\n\nTITLE: Custom Param Serialization in React Navigation\nDESCRIPTION: This example demonstrates how to implement custom serialization and parsing for route params, converting between a timestamp and a formatted date string.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: {\n      path: 'chat/:date',\n      parse: {\n        date: (date) => new Date(date).getTime(),\n      },\n      stringify: {\n        date: (date) => {\n          const d = new Date(date);\n\n          return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Navigation View with Descriptors - React Navigation (JavaScript)\nDESCRIPTION: This code shows how the navigation view receives and uses props such as screenProps, navigation, navigationConfig, and an object of descriptors mapping route keys to scene descriptors. This forms the core of screen rendering in custom navigators, integrating configuration, routing, and screen data. Requires a compatible NavigationView component that can consume these props.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-navigators.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<NavigationView\n  screenProps={screenProps}\n  navigation={navigation}\n  navigationConfig={navigationConfig}\n  descriptors={descriptors}\n/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Navigator with Router Override in React Navigation\nDESCRIPTION: This code shows an advanced custom navigator that extends a Stack Navigator. It overrides the router's getStateForAction method, adds component lifecycle hooks, and renders additional content alongside the original navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createStackNavigator({ ... });\n\nclass CustomNavigator extends React.Component {\n  static router = {\n    ...MyStack.router,\n    getStateForAction: (action, lastState) => {\n      // check for custom actions and return a different navigation state.\n      return MyStack.router.getStateForAction(action, lastState);\n    },\n  };\n  componentDidUpdate(lastProps) {\n    // Navigation state has changed from lastProps.navigation.state to this.props.navigation.state\n  }\n  render() {\n    const { navigation } = this.props;\n\n    return (\n      <View>\n        <MyStack navigation={navigation} />\n        {...}\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useScrollToTop with a React Class Component (JavaScript)\nDESCRIPTION: This snippet shows how to apply the useScrollToTop hook to a React class component by wrapping it with a function component. The wrapper hook manages the scroll ref and passes it through props, enabling the scroll-to-top feature in class components, which cannot directly use hooks. Dependencies include 'react', 'react-native', and '@react-navigation/native'. Key parameter is the scrollRef prop; input is tab interaction, and output is that the ScrollView scrolls to the top within the Albums class-based component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-scroll-to-top.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Albums extends React.Component {\n  render() {\n    return <ScrollView ref={this.props.scrollRef}>{/* content */}</ScrollView>;\n  }\n}\n\n// Wrap and export\nexport default function (props) {\n  const ref = React.useRef(null);\n\n  useScrollToTop(ref);\n\n  return <Albums {...props} scrollRef={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Screen Options in React Navigation\nDESCRIPTION: Shows how to configure screen options using the dynamic navigation API with Stack.Navigator and Stack.Screen components. Demonstrates setting custom titles for different screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Navigator>\n  <Stack.Screen\n    name=\"Home\"\n    component={HomeScreen}\n    options={{ title: 'Awesome app' }}\n  />\n  <Stack.Screen\n    name=\"Profile\"\n    component={ProfileScreen}\n    options={{ title: 'My profile' }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Header Button in React Navigation Stack\nDESCRIPTION: Demonstrates how to add a simple button to the right side of the header in a Stack Navigator using the options prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          headerTitle: (props) => <LogoTitle {...props} />,\n          headerRight: () => (\n            <Button\n              onPress={() => alert('This is a button!')}\n              title=\"Info\"\n              color=\"#fff\"\n            />\n          ),\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Deep Linking in React Native\nDESCRIPTION: This Objective-C code modifies the iOS AppDelegate to handle deep links. It imports RCTLinkingManager and implements the openURL method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/deep-linking.md#2025-04-23_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n\n// Add this above the `@end`:\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n  return [RCTLinkingManager application:application openURL:url\n                      sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Action Creator with Dispatch in React Navigation\nDESCRIPTION: Demonstrates how to use a custom action creator function with dispatch. This example adds a 'Home' route to the start of the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from '@react-navigation/native';\n\nnavigation.dispatch((state) => {\n  // Add the home route to the start of the stack\n  const routes = [{ name: 'Home' }, ...state.routes];\n\n  return CommonActions.reset({\n    ...state,\n    routes,\n    index: routes.length - 1,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Drawer Content Component Implementation\nDESCRIPTION: Example of creating a custom drawer content component with ScrollView and SafeAreaView, supporting iPhone X safe area and custom styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerItems, SafeAreaView } from 'react-navigation';\n\nconst CustomDrawerContentComponent = (props) => (\n  <ScrollView>\n    <SafeAreaView\n      style={styles.container}\n      forceInset={{ top: 'always', horizontal: 'never' }}\n    >\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Event Listeners for Gesture End\nDESCRIPTION: Example of using the gestureEnd event listener with React hooks to detect when a swipe gesture successfully completes, such as when a screen is dismissed by gesture.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('gestureEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: GoBack Navigation Implementation\nDESCRIPTION: Shows different ways to implement back navigation, including going back one screen, anywhere, or to a specific screen by key.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { goBack } = this.props.navigation;\n    return (\n      <View>\n        <Button onPress={() => goBack()} title=\"Go back from this HomeScreen\" />\n        <Button onPress={() => goBack(null)} title=\"Go back anywhere\" />\n        <Button\n          onPress={() => goBack('key-123')}\n          title=\"Go back from key-123\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Labels in Bottom Tab Navigator with Label Component (JSX)\nDESCRIPTION: Illustrates rendering a label using the Label component, typically used for the Bottom Tab Navigator. The component accepts standard Text props as well as a tintColor for theming. Requires React/React Native components and likely usage within a navigation tab context. Outputs a styled text label.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Label>Home</Label>\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Component with withNavigation - React Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates importing and using the withNavigation higher order component to wrap a custom back button component. Wrapping MyBackButton ensures the navigation prop is accessible within the component, allowing it to trigger navigation actions (e.g., goBack). Dependencies are React, react-native (for UI components), and react-navigation (for withNavigation). The snippet expects a functional or class component as input and outputs an enhanced component with navigation injected.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/with-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Button } from 'react-native';\\nimport { withNavigation } from 'react-navigation';\\n\\nclass MyBackButton extends React.Component {\\n  render() {\\n    return (\\n      <Button\\n        title=\\\"Back\\\"\\n        onPress={() => {\\n          this.props.navigation.goBack();\\n        }}\\n      />\\n    );\\n  }\\n}\\n\\n// withNavigation returns a component that wraps MyBackButton and passes in the\\n// navigation prop\\nexport default withNavigation(MyBackButton);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Screen Options - Dynamic Component - JavaScript\nDESCRIPTION: Passes the 'screenOptions' prop to <Stack.Navigator> to apply default configuration‚Äîhere hiding headers‚Äîfor all child screens. This supports both object and function forms; the example uses a simple object. Requires React, navigator-creating functions, and defined screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator\\n      // highlight-start\\n      screenOptions={{ headerShown: false }}\\n      // highlight-end\\n    >\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Material Top Tab Navigator - React Navigation\nDESCRIPTION: Basic syntax for creating a material top tab navigator with route configs and navigator configuration options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/material-top-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with React Navigation and Firebase Analytics\nDESCRIPTION: Implementation of screen tracking using React Navigation's onNavigationStateChange prop combined with Firebase Analytics. The code tracks navigation state changes and reports screen views to analytics when the active route changes. It includes a helper function to extract the current route name from nested navigation states.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAppContainer, createStackNavigator } from 'react-navigation';\nimport analytics from '@react-native-firebase/analytics';\n\n// gets the current screen from navigation state\nfunction getActiveRouteName(navigationState) {\n  if (!navigationState) {\n    return null;\n  }\n  const route = navigationState.routes[navigationState.index];\n  // dive into nested navigators\n  if (route.routes) {\n    return getActiveRouteName(route);\n  }\n  return route.routeName;\n}\n\nconst AppNavigator = createStackNavigator(AppRouteConfigs);\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default () => (\n  <AppContainer\n    onNavigationStateChange={(prevState, currentState, action) => {\n      const currentRouteName = getActiveRouteName(currentState);\n      const previousRouteName = getActiveRouteName(prevState);\n\n      if (previousRouteName !== currentRouteName) {\n        // The line below uses the @react-native-firebase/analytics tracker\n        // change the tracker here to use other Mobile analytics SDK.\n        analytics().setCurrentScreen(currentRouteName, currentRouteName);\n      }\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Default Document Title Formatter Function\nDESCRIPTION: Shows the default JavaScript function used by React Navigation to format the document title on the web. It takes the screen options and route as arguments and returns the `options.title` if available, otherwise falling back to the `route.name`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n(options, route) => options?.title ?? route?.name;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Loading Screen\nDESCRIPTION: Creates a loading screen component that checks for authentication state using AsyncStorage and navigates to either the App or Auth stack based on the presence of a user token.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/auth-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {\n  ActivityIndicator,\n  AsyncStorage,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nclass AuthLoadingScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this._bootstrapAsync();\n  }\n\n  _bootstrapAsync = async () => {\n    const userToken = await AsyncStorage.getItem('userToken');\n    this.props.navigation.navigate(userToken ? 'App' : 'Auth');\n  };\n\n  render() {\n    return (\n      <View>\n        <ActivityIndicator />\n        <StatusBar barStyle=\"default\" />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Bar in Stack Navigator Screens\nDESCRIPTION: Implementation of two screens with different status bar configurations using SafeAreaView and StatusBar components. Screen1 shows a light theme with white text, while Screen2 shows a dark theme.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen1 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n        <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen2')}\n          color={isAndroid ? 'blue' : '#fff'}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Stack Navigator with Deep Linking Path in JavaScript\nDESCRIPTION: This snippet shows how to create a stack navigator with a deep linking path for the Chat screen. The path 'chat/:user' allows for dynamic user parameters in the URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = createStackNavigator({\n  Home: { screen: HomeScreen },\n  Chat: {\n    screen: ChatScreen,\n    path: 'chat/:user',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding fonts Property to Custom Theme in React Navigation 7\nDESCRIPTION: Demonstrates how to update a custom theme object to include the new fonts property, which is now required when passing a custom theme to NavigationContainer.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport { DefaultTheme } from '@react-navigation/native';\n\nconst theme = {\n  colors: {\n    // ...\n  },\n+   fonts: DefaultTheme.fonts,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Navigator with App Container in React Navigation 3.0\nDESCRIPTION: Demonstrates how to wrap the root navigator with createAppContainer, which is now required in React Navigation 3.0 to maintain navigation state and handle external interactions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-17-react-navigation-3.0.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStackNavigator,\n  createAppContainer\n} from 'react-navigation';\nconst MainNavigator = createStackNavigator({...});\nconst App = createAppContainer(MainNavigator);\n```\n\n----------------------------------------\n\nTITLE: Passing Redux State via Navigation Params\nDESCRIPTION: Demonstrates how to pass Redux state through navigation parameters to display in another screen's title. Shows both the navigation action and the receiving screen's configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/redux-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  title=\"Go to static count screen\"\n  onPress={() =>\n    this.props.navigation.navigate('StaticCounter', {\n      count: this.props.count,\n    })\n  }\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass StaticCounter extends React.Component {\n  static navigationOptions = ({ navigation }) => ({\n    title: navigation.getParam('count'),\n  });\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.paragraph}>\n          {this.props.navigation.getParam('count')}\n        </Text>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with npm (Bash)\nDESCRIPTION: These commands remove the `node_modules` directory and the `package-lock.json` file, then reinstall all project dependencies using npm. This is a more forceful step to resolve persistent syntax errors or dependency issues after attempting package upgrades.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm package-lock.json\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In and Home Screen Components\nDESCRIPTION: Implements the SignInScreen and HomeScreen components with authentication-related functionality including sign-in, sign-out, and navigation between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/auth-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass SignInScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Please sign in',\n  };\n\n  render() {\n    return (\n      <View>\n        <Button title=\"Sign in!\" onPress={this._signInAsync} />\n      </View>\n    );\n  }\n\n  _signInAsync = async () => {\n    await AsyncStorage.setItem('userToken', 'abc');\n    this.props.navigation.navigate('App');\n  };\n}\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Welcome to the app!',\n  };\n\n  render() {\n    return (\n      <View>\n        <Button title=\"Show me more of the app\" onPress={this._showMoreApp} />\n        <Button title=\"Actually, sign me out :)\" onPress={this._signOutAsync} />\n      </View>\n    );\n  }\n\n  _showMoreApp = () => {\n    this.props.navigation.navigate('Other');\n  };\n\n  _signOutAsync = async () => {\n    await AsyncStorage.clear();\n    this.props.navigation.navigate('Auth');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Themes in navigationOptions in React Navigation\nDESCRIPTION: Shows how to access and use the current theme within navigationOptions of a screen component in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  ThemeColors,\n  createAppContainer,\n  createStackNavigator,\n} from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ theme }) => {\n    return {\n      title: 'Home',\n      headerLeft: (\n        <Button\n          color={theme === 'dark' ? 'white' : 'blue'}\n          title=\"Press me\"\n          onPress={() => alert('success!')}\n        />\n      ),\n    };\n  };\n\n  render() {\n    // etc...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods\nDESCRIPTION: This command installs the necessary CocoaPods dependencies for iOS after installing react-native-screens. This step is required for bare React Native projects on macOS developing for iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Passing Header Component with Hooks in React Navigation (JavaScript)\nDESCRIPTION: This snippet demonstrates an improper usage of the 'header' option in the Stack.Navigator's screen options, where a React component (that may use hooks) is passed directly instead of as a function. This can lead to the 'Invalid hook call' error because hooks can only be used within React function components, not invoked as plain functions by navigation options. Ensure that you always provide a function returning a React element to the 'header' option. No external dependencies beyond React and @react-navigation/stack are required.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={Home}\n  option={{ header: (props) => <MyHeader {...props} /> }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Dismissing a Screen by Popping Navigation State (JavaScript)\nDESCRIPTION: Illustrates replacing the deprecated 'dismiss' method by manually invoking 'pop()' on the result of 'navigation.getState()', effectively removing the current screen from the stack. Requires React Navigation v5 or above and use of a navigation object. This method allows for dismissing screens programmatically now that the explicit 'dismiss' action has been removed. Returns to the previous screen in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigation.getState().pop();\n```\n\n----------------------------------------\n\nTITLE: Using NavigationService to Navigate in React Navigation\nDESCRIPTION: This snippet shows how to use the NavigationService to navigate from any JavaScript module in a React Navigation app. It demonstrates importing the service and calling its navigate function with route name and parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// any js module\nimport NavigationService from 'path-to-NavigationService.js';\n\n// ...\n\nNavigationService.navigate('ChatScreen', { userName: 'Lucy' });\n```\n\n----------------------------------------\n\nTITLE: Importing Conditional Gesture Handler Setup\nDESCRIPTION: Shows how to import the `./gesture-handler` setup at the very top of the application's entry file (e.g., `index.js` or `App.js`). This import leverages the `.native.js` extension to conditionally load `react-native-gesture-handler` only on native platforms. This step is crucial for native builds to prevent crashes in production.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport './gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Building and Running React Native App on Android (Bash)\nDESCRIPTION: The command `npx react-native run-android` builds the native Android project and installs/launches the application on a connected Android device or emulator. This step is necessary after making native configuration changes for deep linking to ensure they are applied.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native run-android\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating @babel/core (Bash)\nDESCRIPTION: This command installs or updates the `@babel/core` development dependency using npm. This package should also be updated alongside `metro-react-native-babel-preset` when troubleshooting syntax errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/core\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer Ref with createRef in TypeScript\nDESCRIPTION: Shows how to type the `ref` for a `NavigationContainer` component when using `React.createRef`. It uses the `NavigationContainerRef` type imported from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { NavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef = React.createRef<NavigationContainerRef>();\n```\n\n----------------------------------------\n\nTITLE: Screen Path Configuration\nDESCRIPTION: Configuration for mapping URL paths to specific screen names and handling nested navigation structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  screens: {\n    Chat: 'feed/:sort',\n    Profile: 'user',\n  },\n};\n\nconst linking = {\n  prefixes: ['https://example.com', 'example://'],\n  config,\n};\n\nfunction App() {\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      {/* content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Navigator with Dynamic Header Title\nDESCRIPTION: Example showing how to dynamically set stack header title based on active tab in a nested tab navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTabNavigator.navigationOptions = ({ navigation }) => {\n  const { routeName } = navigation.state.routes[navigation.state.index];\n\n  // You can do whatever you like here to pick the title based on the route name\n  const headerTitle = routeName;\n\n  return {\n    headerTitle,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Annotating NavigationContainer ref with createNavigationContainerRef in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and annotate a ref for NavigationContainer using the createNavigationContainerRef method to ensure type-checking for navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNavigationContainerRef } from '@react-navigation/native';\n\n// ...\n\nconst navigationRef = createNavigationContainerRef<RootStackParamList>();\n```\n\n----------------------------------------\n\nTITLE: Attempting Re-Navigation with `navigate` in React Navigation (JavaScript)\nDESCRIPTION: Defines a `DetailsScreen` component. It includes a button attempting to navigate to the 'Details' screen again using `this.props.navigation.navigate('Details')`. This action typically has no effect because the user is already on the 'Details' route; `navigate` jumps to the screen if it exists in the stack but doesn't add a new one if already there.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.navigate('Details')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator Instance\nDESCRIPTION: Example of creating a Stack Navigator instance that contains Screen and Navigator properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/group.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createStackNavigator();\n```\n\n----------------------------------------\n\nTITLE: Customizing Deep Linking with Third-Party Integrations in React Navigation\nDESCRIPTION: This JavaScript code demonstrates how to override React Navigation's default deep linking behavior to integrate third-party services like Branch.io. It provides custom implementations for getInitialURL and subscribe functions to handle various deep linking scenarios.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['myapp://', 'https://myapp.com'],\n\n  // Custom function to get the URL which was used to open the app\n  async getInitialURL() {\n    // First, you may want to do the default deep link handling\n    // Check if app was opened from a deep link\n    const url = await Linking.getInitialURL();\n\n    if (url != null) {\n      return url;\n    }\n\n    // Next, you would need to get the initial URL from your third-party integration\n    // It depends on the third-party SDK you use\n    // For example, to get the initial URL for branch.io:\n    const params = branch.getFirstReferringParams();\n\n    return params?.$canonical_url;\n  },\n\n  // Custom function to subscribe to incoming links\n  subscribe(listener) {\n    // First, you may want to do the default deep link handling\n    const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n    // Listen to incoming links from deep linking\n    Linking.addEventListener('url', onReceiveURL);\n\n    // Next, you would need to subscribe to incoming links from your third-party integration\n    // For example, to get to subscribe to incoming links from branch.io:\n    branch.subscribe(({ error, params, uri }) => {\n      if (error) {\n        console.error('Error from Branch: ' + error);\n        return;\n      }\n\n      if (params['+non_branch_link']) {\n        const nonBranchUrl = params['+non_branch_link'];\n        // Route non-Branch URL if appropriate.\n        return;\n      }\n\n      if (!params['+clicked_branch_link']) {\n        // Indicates initialization success and some other conditions.\n        // No link was opened.\n        return;\n      }\n\n      // A Branch link was opened\n      const url = params.$canonical_url;\n\n      listener(url);\n    });\n    );\n\n    return () => {\n      // Clean up the event listeners\n      Linking.removeEventListener('url', onReceiveURL);\n      branch.unsubscribe();\n    };\n  },\n\n  config: {\n    // Deep link configuration\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Simplified Route Configuration\nDESCRIPTION: Demonstrates the shorthand syntax for configuring routes when only the screen component needs to be specified.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/hello-react-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({\n  Home: HomeScreen,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Event Listener in a React Function Component with useEffect (JavaScript)\nDESCRIPTION: Shows how to subscribe to a 'focus' event using navigation.addListener inside a React function component with useEffect. Event listener executes logic when the screen gains focus. The unsubscribe function is returned for automatic cleanup when the component unmounts or dependencies change. Requires React, React Navigation, and a screen with the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-events.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Profile({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // do something\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return <ProfileContent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing react-native-screens in JavaScript\nDESCRIPTION: This code snippet shows how to import and initialize react-native-screens before rendering any navigation stack. It's typically placed in an index.js or App.js file.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/react-native-screens.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before rendering any navigation stack\nimport { useScreens } from 'react-native-screens';\nuseScreens();\n```\n\n----------------------------------------\n\nTITLE: Custom Screen Layout Wrapper - Static API - JavaScript\nDESCRIPTION: Applies a 'screenLayout' function to each screen, wrapping them in an ErrorBoundary and a React.Suspense fallback. This setup helps provide standardized error handling and lazy loading across all screens. Dependent on ErrorBoundary, React, View, and style objects, as well as the routine navigator and screen composition.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\\n  // highlight-start\\n  screenLayout: ({ children }) => (\\n    <ErrorBoundary>\\n      <React.Suspense\\n        fallback={\\n          <View style={styles.fallback}>\\n            <Text style={styles.text}>Loading‚Ä¶</Text>\\n          </View>\\n        }\\n      >\\n        {children}\\n      </React.Suspense>\\n    </ErrorBoundary>\\n  ),\\n  // highlight-end\\n  screens: {\\n    Home: HomeScreen,\\n    Profile: ProfileScreen,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationService Module\nDESCRIPTION: Implementation of the NavigationService module that provides global navigation functions. It maintains a reference to the root navigator and exposes methods for navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// NavigationService.js\n\nimport { NavigationActions } from 'react-navigation';\n\nlet _navigator;\n\nfunction setTopLevelNavigator(navigatorRef) {\n  _navigator = navigatorRef;\n}\n\nfunction navigate(routeName, params) {\n  _navigator.dispatch(\n    NavigationActions.navigate({\n      routeName,\n      params,\n    })\n  );\n}\n\n// add other navigation functions that you need and export them\n\nexport default {\n  navigate,\n  setTopLevelNavigator,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Router Implementation in React Navigation\nDESCRIPTION: Basic structure for implementing a custom router with essential functions for state management and component rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-routers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyRouter = {\n  getStateForAction: (action, state) => ({}),\n  getActionForPathAndParams: (path, params) => null,\n  getPathAndParamsForState: (state) => null,\n  getComponentForState: (state) => MyScreen,\n  getComponentForRouteName: (routeName) => MyScreen,\n};\n\n// Now, you can make a navigator by putting the router on it:\nclass MyNavigator extends React.Component {\n  static router = MyRouter;\n  render() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Header Title in React Navigation Stack Navigator\nDESCRIPTION: Demonstrates how to set a basic header title for a screen in a Stack Navigator using the options prop with a title property.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Header Title in React Navigation Stack\nDESCRIPTION: Demonstrates how to set a basic header title for a screen component using the options prop in a Stack.Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{ title: 'My home' }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Drawer in React Navigation\nDESCRIPTION: This snippet shows how to programmatically open and close the drawer using navigation props. These methods can be called within component methods or event handlers.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.openDrawer();\nthis.props.navigation.closeDrawer();\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Bar Component Implementation\nDESCRIPTION: Example showing how to implement a custom tab bar component with additional styling properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/bottom-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator, BottomTabBar } from 'react-navigation-tabs';\n\nconst TabBarComponent = (props) => <BottomTabBar {...props} />;\n\nconst TabScreens = createBottomTabNavigator({\n  tabBarComponent: (props) => (\n    <TabBarComponent {...props} style={{ borderTopColor: '#605F60' }} />\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Custom App Container Component Setup\nDESCRIPTION: Shows how to create a custom App root component that wraps the AppContainer for more control over the root component configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/hello-react-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default class App extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation State and Params (JavaScript)\nDESCRIPTION: Demonstrates reading the current route state, including its params, from the navigation prop. This example is used in a screen component and renders data from the navigation state. Main dependency is React and React Navigation. Inputs: navigation.state.params; output: JSX output displaying the 'name' parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigation-prop.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return <Text>Name: {this.props.navigation.state.params.name}</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Prefix for Deep Linking in React Navigation\nDESCRIPTION: This snippet demonstrates how to configure the navigation container to extract the path from the app's incoming URI, using Expo.Linking for Expo projects or a custom prefix for react-native init projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = createAppContainer(createStackNavigator({...}));\n\nconst prefix = Expo.Linking.makeUrl('/');\n\nconst MainApp = () => <SimpleApp uriPrefix={prefix} />;\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pod Dependencies for Safe Area Context (Bash)\nDESCRIPTION: These commands navigate into the `ios` directory, run `pod install` to install native iOS dependencies, and return. This step is needed after ensuring `react-native-safe-area-context` is correctly (un)linked, particularly when troubleshooting UIManager errors on iOS.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Using push Method in React Navigation\nDESCRIPTION: Shows how to use the push method to add a new screen to the top of the navigation stack. It accepts a route name and optional params object.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/native-stack-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.push('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationService for React Navigation in JavaScript\nDESCRIPTION: This code defines a NavigationService module with functions to set the top-level navigator and perform navigation. It uses the NavigationActions from react-navigation to dispatch navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigating-without-navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// NavigationService.js\n\nimport { NavigationActions } from 'react-navigation';\n\nlet _navigator;\n\nfunction setTopLevelNavigator(navigatorRef) {\n  _navigator = navigatorRef;\n}\n\nfunction navigate(routeName, params) {\n  _navigator.dispatch(\n    NavigationActions.navigate({\n      type: NavigationActions.NAVIGATE,\n      routeName,\n      params,\n    })\n  );\n}\n\n// add other navigation functions that you need and export them\n\nexport default {\n  navigate,\n  setTopLevelNavigator,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Navigation with Bottom Tabs in React Native\nDESCRIPTION: This code snippet demonstrates how to create a drawer navigator that includes a bottom tab navigator for the home screen. It uses createDrawerNavigator and createBottomTabNavigator from React Navigation 5, and includes custom components for the tab bar and drawer content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { TodoNavigator } from './todo.navigator';\nimport { ProfileNavigator } from './profile.navigator';\nimport { AppRoute } from './app-routes';\nimport { HomeTabBar, HomeDrawer, AboutScreen } from '../scenes/home';\nimport { HomeIcon, InfoIcon, LayoutIcon, PersonIcon } from '../assets/icons';\n\nconst Drawer = createDrawerNavigator();\nconst BottomTab = createBottomTabNavigator();\n\nconst HomeBottomNavigator = (): React.ReactElement => (\n  <BottomTab.Navigator tabBar={props => <HomeTabBar {...props} />}>\n    <BottomTab.Screen\n      name={AppRoute.TODO}\n      component={TodoNavigator}\n      options={{ title: 'TODO', tabBarIcon: LayoutIcon }}\n    />\n    <BottomTab.Screen\n      name={AppRoute.PROFILE}\n      component={ProfileNavigator}\n      options={{ title: 'PROFILE', tabBarIcon: PersonIcon }}\n    />\n  </BottomTab.Navigator>\n);\n\nexport const HomeNavigator = (): React.ReactElement => (\n  <Drawer.Navigator drawerContent={props => <HomeDrawer {...props} />}>\n    <Drawer.Screen\n      name={AppRoute.HOME}\n      component={HomeBottomNavigator}\n      options={{ title: 'Home', drawerIcon: HomeIcon }}\n    />\n    <Drawer.Screen\n      name={AppRoute.ABOUT}\n      component={AboutScreen}\n      options={{ title: 'About', drawerIcon: InfoIcon }}\n    />\n  </Drawer.Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In and Home Screens\nDESCRIPTION: Implements the sign-in screen for authentication and the home screen for authenticated users. Includes methods for signing in, signing out, and navigating through the app.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/auth-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass SignInScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Please sign in',\n  };\n\n  render() {\n    return (\n      <View>\n        <Button title=\"Sign in!\" onPress={this._signInAsync} />\n      </View>\n    );\n  }\n\n  _signInAsync = async () => {\n    await AsyncStorage.setItem('userToken', 'abc');\n    this.props.navigation.navigate('App');\n  };\n}\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Welcome to the app!',\n  };\n\n  render() {\n    return (\n      <View>\n        <Button title=\"Show me more of the app\" onPress={this._showMoreApp} />\n        <Button title=\"Actually, sign me out :)\" onPress={this._signOutAsync} />\n      </View>\n    );\n  }\n\n  _showMoreApp = () => {\n    this.props.navigation.navigate('Other');\n  };\n\n  _signOutAsync = async () => {\n    await AsyncStorage.clear();\n    this.props.navigation.navigate('Auth');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Automatically Fixing Linting Errors in React Navigation Project using Bash\nDESCRIPTION: Runs the ESLint command with the '--fix' flag via Yarn. This attempts to automatically correct any linting errors or style inconsistencies found in the codebase according to the project's ESLint configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable IconWithBadge Component in React Native (JavaScript)\nDESCRIPTION: This snippet defines a reusable React Native component `IconWithBadge` that displays an icon (`Ionicons`) and optionally overlays a badge with a count. The badge uses absolute positioning to appear at the top-right of the icon. It requires `name`, `badgeCount`, `color`, and `size` as props. Note the comment regarding potential overflow issues on older Android versions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/tab-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default class IconWithBadge extends React.Component {\n  render() {\n    const { name, badgeCount, color, size } = this.props;\n    return (\n      <View style={{ width: 24, height: 24, margin: 5 }}>\n        <Ionicons name={name} size={size} color={color} />\n        {badgeCount > 0 && (\n          <View\n            style={{\n              // If you're using react-native < 0.57 overflow outside of parent\n              // will not work on Android, see https://git.io/fhLJ8\n              position: 'absolute',\n              right: -6,\n              top: -3,\n              backgroundColor: 'red',\n              borderRadius: 6,\n              width: 12,\n              height: 12,\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>\n              {badgeCount}\n            </Text>\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Missing npm Dependency (Bash)\nDESCRIPTION: This command installs a specified npm package and adds it to the project's dependencies. Use this when an 'Unable to resolve module' error points to an external npm package, indicating it's missing from the project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install name-of-the-module\n```\n\n----------------------------------------\n\nTITLE: Updating Header Options Dynamically with setOptions\nDESCRIPTION: Demonstrates how to update header options at runtime from within a screen component using the navigation.setOptions method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/headers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Inside of render() of React class */\n<Button\n  title=\"Update the title\"\n  onPress={() => navigation.setOptions({ title: 'Updated!' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Header Title in React Navigation\nDESCRIPTION: Demonstrates how to set a static header title for different screens using the navigationOptions property in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n  };\n\n  /* render function, etc */\n}\n\nclass DetailsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Details',\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles\nDESCRIPTION: Demonstrates how to customize header styles including background color, tint color, and title text styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n    headerStyle: {\n      backgroundColor: '#f4511e',\n    },\n    headerTintColor: '#fff',\n    headerTitleStyle: {\n      fontWeight: 'bold',\n    },\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Yarn Why react-native-safe-area-context\nDESCRIPTION: This command uses yarn to display the dependency graph for react-native-safe-area-context.  It's used in yarn projects when multiple versions are installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn why react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer Navigation State\nDESCRIPTION: Demonstrates how to toggle the drawer state using a single navigation command that automatically determines whether to open or close.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// fires 'DrawerOpen'/'DrawerClose' accordingly\nthis.props.navigation.navigate('DrawerToggle');\n```\n\n----------------------------------------\n\nTITLE: Using Default Theme Colors in React Navigation\nDESCRIPTION: Shows how to use the ThemeColors object to access default theme colors in React Navigation components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ThemeColors, useTheme } from 'react-navigation';\n\nfunction MyButton() {\n  let theme = useTheme();\n  let colors = ThemeColors[theme];\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.bodyContent }}>\n      <Text style={{ color: colors.label }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS TabBarBottom Options\nDESCRIPTION: Example configuration for iOS bottom tab bar styling, including color settings and label styles.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Navigator Extension in React Navigation\nDESCRIPTION: Shows how to extend an existing stack navigator by creating a custom navigator component that inherits the router behavior.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createStackNavigator({ ... });\n\nclass CustomNavigator extends React.Component {\n  static router = MyStack.router;\n  render() {\n    const { navigation } = this.props;\n\n    return <MyStack navigation={navigation} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawer Content Options Configuration\nDESCRIPTION: Example of configuring contentOptions for DrawerItems including custom colors, styling, and container properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncontentOptions: {\n  activeTintColor: '#e91e63',\n  itemsContainerStyle: {\n    marginVertical: 0,\n  },\n  iconContainerStyle: {\n    opacity: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Animation in React Navigation\nDESCRIPTION: Example of implementing the configureTransition function to customize animation parameters like duration and easing. It shows how to return a configuration object for Animated.timing or Animated.spring.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/transitioner.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n_configureTransition(transitionProps, prevTransitionProps) {\n  return {\n    // duration in milliseconds, default: 250\n    duration: 500,\n    // An easing function from `Easing`, default: Easing.inOut(Easing.ease)\n    easing: Easing.bounce,\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n_configureTransition(transitionProps, prevTransitionProps) {\n  return {\n    // A timing function, default: Animated.timing.\n    timing: Animated.spring,\n    // Some parameters relevant to Animated.spring\n    friction: 1,\n    tension: 0.5,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator-level Navigation Options\nDESCRIPTION: Demonstrates how to set navigation options for the navigator itself using the navigationOptions property in the navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-17-react-navigation-3.0.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    Feed: ExampleScreen,\n    Profile: ExampleScreen,\n  },\n  {\n    defaultNavigationOptions: {\n      headerTintColor: '#fff',\n      headerStyle: {\n        backgroundColor: '#000',\n      },\n    },\n    navigationOptions: {\n      tabBarLabel: 'Home!',\n    },\n  }\n);\n\nconst Tabs = createBottomTabNavigator({ Home });\n```\n\n----------------------------------------\n\nTITLE: Extending Stack Navigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to extend an existing Stack Navigator in React Navigation. It shows the basic structure of a custom navigator class that uses the router from a Stack Navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createStackNavigator({ ... });\n\nclass CustomNavigator extends React.Component {\n  static router = MyStack.router;\n  render() {\n    const { navigation } = this.props;\n\n    return <MyStack navigation={navigation} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Back and Other Navigations in React Navigation (JavaScript)\nDESCRIPTION: Extends the `DetailsScreen` component to include three buttons: one using `push('Details')` to add another Details screen, one using `navigate('Home')` to jump back to the Home screen (potentially clearing screens in between depending on stack history), and one using `goBack()` to navigate back one step in the stack. This demonstrates different programmatic navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/navigating.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.push('Details')}\n        />\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Actions in React Navigation 2.0\nDESCRIPTION: Illustrates how to import and use stack-specific actions in React Navigation 2.0, which have been separated from general NavigationActions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-05-07-react-navigation-2.0.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\n// Using push action\nStackActions.push\n```\n\n----------------------------------------\n\nTITLE: Non-Navigating Tab Icon Implementation\nDESCRIPTION: Demonstrates how to create a tab icon that doesn't navigate to a new screen using custom tabBarOnPress handler.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-based-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew TabNavigator({\n  ...,\n  Placeholder: {\n      screen: () => null,\n      navigationOptions: {\n        tabBarOnPress: () => {\n          // do something custom here\n        },\n      },\n  }\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Install Expo react-native-safe-area-context\nDESCRIPTION: This command install react-native-safe-area-context using expo.  It's used in Expo managed workflow projects to ensure compatability.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in Static navigationOptions (React Navigation/JSX)\nDESCRIPTION: This example shows how to access the current theme within the static `navigationOptions` function of a screen component. The `theme` ('light' or 'dark') is passed as an argument, allowing theme-dependent configuration, such as setting the color of a header button.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/themes.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport {\n  ThemeColors,\n  createAppContainer,\n  createStackNavigator,\n} from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ theme }) => {\n    return {\n      title: 'Home',\n      headerLeft: () => (\n        <Button\n          color={theme === 'dark' ? 'white' : 'blue'}\n          title=\"Press me\"\n          onPress={() => alert('success!')}\n        />\n      ),\n    };\n  };\n\n  render() {\n    // etc...\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Link Prefix Configuration with Multiple Domains\nDESCRIPTION: Configuration example showing how to set up link prefixes for custom schemes and multiple domains including subdomains.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/configuring-links.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['example://', 'https://example.com', 'https://*.example.com'],\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to Navigation Container in React Navigation\nDESCRIPTION: Demonstrates how to apply a theme to the root navigation container using the 'theme' prop. The theme can be set to 'light' or 'dark'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet Navigation = createAppContainer(RootStack);\n\n// `theme` can be `light` or `dark`. It defaults to `light` if not specified.\nexport default () => <Navigation theme=\"light\">;\n```\n\n----------------------------------------\n\nTITLE: Using createAppContainer Props in React Native\nDESCRIPTION: This snippet shows how to use the onNavigationStateChange and uriPrefix props when rendering an AppContainer component in React Native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/app-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AppContainer\n  onNavigationStateChange={handleNavigationChange}\n  uriPrefix=\"/app\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Navigator with ID in React Navigation\nDESCRIPTION: Demonstrates how to use the getParent method with a specific navigator ID to directly access a parent navigator, such as a drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Do this\nconst drawerNavigation = navigation.getParent('LeftDrawer');\n\n// ...\n\ndrawerNavigation?.openDrawer();\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading View in React Navigation\nDESCRIPTION: This snippet demonstrates how to customize the loading view rendered while the navigation state is being loaded, using the renderLoadingExperimental prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/state-persistence.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<AppNavigator\n  persistNavigationState={...}\n  loadNavigationState={...}\n  renderLoadingExperimental={() => <ActivityIndicator />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Screen onto Navigation Stack in React Navigation\nDESCRIPTION: Demonstrates how to use StackActions.push() to add a new route on top of the stack and navigate to it. This example pushes a Profile screen with a user ID parameter.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nconst pushAction = StackActions.push({\n  routeName: 'Profile',\n  params: {\n    myUserId: 9,\n  },\n});\n\nthis.props.navigation.dispatch(pushAction);\n```\n\n----------------------------------------\n\nTITLE: Configuring StackNavigator without Headers\nDESCRIPTION: This snippet shows how to configure a StackNavigator with the two screens, setting headerMode to 'none' to hide the navigation header and allow full control of the status bar.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default StackNavigator(\n  {\n    Screen1: {\n      screen: Screen1,\n    },\n    Screen2: {\n      screen: Screen2,\n    },\n  },\n  {\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying App Scheme in Expo's app.json\nDESCRIPTION: This JSON snippet shows how to specify a scheme for an Expo app in the app.json file. This is necessary for deep linking in Expo projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/deep-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX Provider with React Navigation\nDESCRIPTION: Example showing how to wrap the navigation component with MobX Provider to make store objects accessible throughout the application.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/MST-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Provider myObject={this.myObject}>\n  <AppNavigator />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Initializing DrawerNavigator in React Navigation\nDESCRIPTION: Basic initialization syntax for creating a DrawerNavigator with route configurations and navigator config options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Annotating Class Component Props in TypeScript\nDESCRIPTION: Illustrates how to apply the previously defined `Props` type to annotate the props of a class component (`ProfileScreen`) using `React.Component<Props>`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/typescript.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nclass ProfileScreen extends React.Component<Props> {\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Potentially Inefficient renderScene Implementation (JavaScript/React Native)\nDESCRIPTION: Illustrates a basic `renderScene` function where scene components (like Avatar, NewsFeed) are defined directly within the switch statement. This approach can lead to unnecessary re-renders because the components are recreated on every index change.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return (\n        <View style={styles.page}>\n          <Avatar />\n          <NewsFeed />\n        </View>\n      );\n    default:\n      return null;\n  }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with Reset Action in React Navigation\nDESCRIPTION: This code shows how to use the Reset action to wipe the entire navigation state and replace it with a new state. It specifies the index of the active route and the actions to apply.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst resetAction = NavigationActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n```\n\n----------------------------------------\n\nTITLE: Clean Reinstalling Dependencies with Yarn\nDESCRIPTION: Performs a clean reinstall of project dependencies using yarn. It removes the `node_modules` directory and the `yarn.lock` file before running `yarn`. This addresses potential issues from corrupted installations or lock file problems.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm yarn.lock\nyarn\n```\n\n----------------------------------------\n\nTITLE: Handling Custom URIs in React Navigation\nDESCRIPTION: Demonstrates how to extend the router's getActionForPathAndParams to handle custom URI patterns and generate appropriate navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/routers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyApp = createStackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\nconst previousGetActionForPathAndParams =\n  MyApp.router.getActionForPathAndParams;\n\nObject.assign(MyApp.router, {\n  getActionForPathAndParams(path, params) {\n    if (path === 'my/custom/path' && params.magic === 'yes') {\n      // returns a profile navigate action for /my/custom/path?magic=yes\n      return NavigationActions.navigate({\n        routeName: 'Profile',\n        action: NavigationActions.navigate({\n          // This child action will get passed to the child router\n          // ProfileScreen.router.getStateForAction to get the child\n          // navigation state.\n          routeName: 'Friends',\n        }),\n      });\n    }\n    return previousGetActionForPathAndParams(path, params);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Dependency Tree with Yarn (Bash)\nDESCRIPTION: This command displays the dependency tree for `react-native-safe-area-context` using yarn. It helps identify which packages in your project depend on it and which versions they require, useful for diagnosing multiple-version conflicts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn why react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Material Bottom Tab Navigator\nDESCRIPTION: Example of how to import and use the createMaterialBottomTabNavigator function to create a material bottom tab navigator in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/material-bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from 'react-navigation-material-bottom-tabs';\n\ncreateMaterialBottomTabNavigator(\n  RouteConfigs,\n  MaterialBottomTabNavigatorConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Passing Screen Props to StackNavigator in React Navigation\nDESCRIPTION: Example of how to pass additional props to screen components within a StackNavigator using the screenProps property.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/stack-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst StackNav = StackNavigator({\n  // config\n});\n\n<StackNav\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Tabs in React Native\nDESCRIPTION: This snippet demonstrates how to implement navigation between tabs using the navigate method from the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-based-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n        <Button\n          title=\"Go to Settings\"\n          onPress={() => this.props.navigation.navigate('Settings')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Website in Development Mode\nDESCRIPTION: Commands to set up and run the React Navigation website in development mode with live-reloading. This is useful for contributors working on documentation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd website\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Popping Screens from Navigation Stack in React Navigation\nDESCRIPTION: Shows how to use StackActions.pop() to navigate back to a previous screen in the stack. The example demonstrates popping one screen from the stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/stack-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackActions } from 'react-navigation';\n\nconst popAction = StackActions.pop({\n  n: 1,\n});\n\nthis.props.navigation.dispatch(popAction);\n```\n\n----------------------------------------\n\nTITLE: Disabling Deep Linking in React Navigation\nDESCRIPTION: This JavaScript code shows how to disable the built-in deep linking handling in React Navigation by passing the enableURLHandling prop as false.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/deep-linking.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = createStackNavigator({...});\n\nconst MainApp = () => <SimpleApp enableURLHandling={false} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Navigator with createNavigator Utility - React Navigation (JavaScript)\nDESCRIPTION: This code demonstrates the usage of the createNavigator API to merge a custom navigation view with a router and a configuration object to form a new navigator component. It shows the import, instantiation, and input requirements (NavigationView, router, navigationConfig), resulting in a reusable AppNavigator. The AppNavigator expects navigation, screenProps, and internally injects descriptors and configuration. Dependencies: react-navigation package, NavigationView component, router definition.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createNavigator } from 'react-navigation';\n\nconst AppNavigator = createNavigator(NavigationView, router, navigationConfig);\n```\n\n----------------------------------------\n\nTITLE: Toggling Drawer using DrawerActions in React Navigation\nDESCRIPTION: This snippet illustrates how to use the toggleDrawer action from DrawerActions to toggle the drawer pane (open if closed, close if open) in a React Navigation drawer navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DrawerActions } from '@react-navigation/native';\n\nnavigation.dispatch(DrawerActions.toggleDrawer());\n```\n\n----------------------------------------\n\nTITLE: Navigator with ID Type Definition - TSX\nDESCRIPTION: Demonstrates how to include the optional `id` property as a generic type parameter when using a navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/typescript.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst RootStack = createStackNavigator<RootStackParamList, 'MyStack'>();\n```\n\n----------------------------------------\n\nTITLE: Using jumpTo Navigation Helper in React Navigation\nDESCRIPTION: Example of using the jumpTo helper method to navigate between tabs with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/bottom-tab-navigator.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { owner: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Links with Special Characters in React Navigation 7\nDESCRIPTION: Illustrates how to configure linking to support special characters in the URL path, such as using @ in a username for a profile URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst config = {\n  prefixes: ['https://mysite.com'],\n  config: {\n    screens: {\n      Profile: {\n        path: 'profile/:username',\n        parse: {\n          username: (username) => username.replace(/^@/, ''),\n        },\n        stringify: {\n          username: (username) => `@${username}`,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Dependencies\nDESCRIPTION: Command to install required Expo-specific dependencies for gesture handling, animations, and safe area context.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexpo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Params in React Navigation\nDESCRIPTION: This example shows how to access the params of the current route using the state property of the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return <Text>Name: {this.props.navigation.state.params.name}</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NavigationService for Navigation\nDESCRIPTION: Example showing how to use the NavigationService to perform navigation from any JavaScript module, whether inside or outside React components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigating-without-navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// any js module\nimport NavigationService from 'path-to-NavigationService.js';\n\n// ...\n\nNavigationService.navigate('ChatScreen', { userName: 'Lucy' });\n```\n\n----------------------------------------\n\nTITLE: Checking Navigation History in React Navigation\nDESCRIPTION: Shows how to use the canGoBack method to check if there's any navigation history available before calling goBack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nif (navigation.canGoBack()) {\n  navigation.goBack();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tabBarOptions for createMaterialTopTabNavigator (JavaScript)\nDESCRIPTION: Provides an example of customizing the appearance of the tab bar using the `tabBarOptions` object within the `TabNavigatorConfig`. This snippet demonstrates setting custom styles for the tab labels (`labelStyle`), individual tabs (`tabStyle`), and the overall tab bar container (`style`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-top-tab-navigator.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\ntabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing createStackNavigator in React Navigation\nDESCRIPTION: Example of importing the createStackNavigator from react-navigation. This navigator renders one screen at a time and provides transitions between screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigator-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[createStackNavigator](stack-navigator.md)\n```\n\n----------------------------------------\n\nTITLE: Using JumpTo Navigation Helper\nDESCRIPTION: Example demonstrating how to use the jumpTo helper method to navigate between tabs with parameters.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/material-top-tab-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { name: 'Micha≈õ' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetifier Postinstall Script (JSON)\nDESCRIPTION: Adds a `postinstall` script to the project's `package.json` file. This script runs `jetifier -r` automatically after `npm install` to patch dependencies, ensuring AndroidX compatibility for React Native 0.59 and lower. This should be removed when upgrading to RN 0.60+.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"postinstall\": \"jetifier -r\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Navigator Configuration\nDESCRIPTION: Example showing how to define a nested TabNavigator within a StackNavigator\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/redux-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({\n  Home: { screen: MyTabNavigator },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linking Package\nDESCRIPTION: Command to install the expo-linking package, which is needed to get the deep link prefix in Expo projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/deep-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linking\n```\n\n----------------------------------------\n\nTITLE: Mocking Native Modules for React Navigation Testing in Jest (JavaScript)\nDESCRIPTION: This JavaScript code sets up mocks for `react-native-reanimated` and `react-native-gesture-handler`, which are native dependencies required when testing React Navigation components using Jest. It imports the Jest setup for gesture handler, mocks `react-native-reanimated` (overriding `Reanimated.default.call`), and silences warnings related to `useNativeDriver` by mocking `NativeAnimatedHelper`. This setup file (e.g., `jest/setup.js`) should be included in the Jest configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport 'react-native-gesture-handler/jestSetup';\n\njest.mock('react-native-reanimated', () => {\n  const Reanimated = require('react-native-reanimated/mock');\n\n  // The mock for `call` immediately calls the callback which is incorrect\n  // So we override it with a no-op\n  Reanimated.default.call = () => {};\n\n  return Reanimated;\n});\n\n// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing\njest.mock('react-native/Libraries/Animated/src/NativeAnimatedHelper');\n\n// As of react-native@0.64.X file has moved\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Lifecycle Listener in React Navigation\nDESCRIPTION: This snippet demonstrates how to subscribe to navigation lifecycle events using the addListener function from the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst didBlurSubscription = this.props.navigation.addListener(\n  'didBlur',\n  (payload) => {\n    console.debug('didBlur', payload);\n  }\n);\n\n// Remove the listener when you are done\ndidBlurSubscription.remove();\n```\n\n----------------------------------------\n\nTITLE: Update TypeScript\nDESCRIPTION: This command updates the TypeScript package. It is used to resolve 'Module has no exported member' errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Installing Bottom Tab Navigator v6 (Bash)\nDESCRIPTION: Provides the npm command (with yarn alternative indicated by `npm2yarn`) to install version 6.x of the `@react-navigation/bottom-tabs` package for implementing bottom tab navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/bottom-tabs@^6.x\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/drawer 6.x\nDESCRIPTION: Command to install the 6.x version of @react-navigation/drawer package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/drawer@^6.x\n```\n\n----------------------------------------\n\nTITLE: Configuring MainActivity for Android (Java)\nDESCRIPTION: Java code snippet to configure MainActivity for proper functioning of react-native-screens on Android.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends ReactActivity {\n  // ...\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(null);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode for Navigation State Persistence\nDESCRIPTION: Example showing how to selectively enable navigation state persistence in development mode using the __DEV__ flag.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/state-persistence.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isReady, setIsReady] = React.useState(__DEV__ ? false : true);\n```\n\n----------------------------------------\n\nTITLE: Defining Stack and Switch Navigators (Legacy Pattern) in React Navigation (JavaScript)\nDESCRIPTION: This code illustrates the now-legacy approach for authenticated navigation, where createStackNavigator and createSwitchNavigator are used to organize authentication and main app flows. It statically defines stacks for Home and Settings, and switches between Login and App. Dependencies: React Navigation 4.x, navigation actions. Inputs are navigation prop and state. Outputs are navigation transitions based on authentication state. Replaced in v5.x by more dynamic, declarative configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/upgrading-from-4.x.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst AppNavigator = createStackNavigator({\\n  Home: HomeScreen,\\n  Settings: SettingsScreen,\\n});\\n\\nconst RootNavigator = createSwitchNavigator({\\n  Login: LoginScreen,\\n  App: AppNavigator,\\n});\n```\n\n----------------------------------------\n\nTITLE: Using Operating System Theme Preferences with React Navigation\nDESCRIPTION: Shows how to use react-native-appearance to detect and apply the operating system's color scheme preferences to React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\n\n// Other navigation code goes here...\nlet Navigation = createAppContainer(RootStack);\n\nexport default () => {\n  let theme = useColorScheme();\n\n  return (\n    <AppearanceProvider>\n      <Navigation theme={theme}>\n    </AppearanceProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Navigator Package for React Navigation\nDESCRIPTION: Command to install the Stack Navigator package for React Navigation v5.x using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/stack@^5.x\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Title Option for Navigation\nDESCRIPTION: Example of how to set the title option for a screen in React Navigation, which will be used for both the UI header and document title in server rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{ title: 'My profile' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Options in Stack Navigator\nDESCRIPTION: Configures screen transition animations in the Stack Navigator using the new animation option. This provides an alternative to the TransitionPresets API and eases migration between JS stack and native stack navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Navigator\n  screenOptions={{\n    // highlight-next-line\n    animation: 'slide_from_right',\n  }}\n>\n  {/* ... */}\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependencies for react-navigation-stack v2 via npm/yarn\nDESCRIPTION: Installs the required peer dependencies `react-native-safe-area-context` and `@react-native-community/masked-view` needed for `react-navigation-stack` version 2.x and above.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with onNavigationStateChange in React Navigation\nDESCRIPTION: This snippet shows how to track screen changes using onNavigationStateChange prop of the navigator. It uses a helper function getActiveRouteName to extract the current screen name from the navigation state and sends it to Google Analytics when the screen changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';\n\nconst tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);\n\n// gets the current screen from navigation state\nfunction getActiveRouteName(navigationState) {\n  if (!navigationState) {\n    return null;\n  }\n  const route = navigationState.routes[navigationState.index];\n  // dive into nested navigators\n  if (route.routes) {\n    return getActiveRouteName(route);\n  }\n  return route.routeName;\n}\n\nconst AppNavigator = createStackNavigator(AppRouteConfigs);\n\nexport default () => (\n  <AppNavigator\n    onNavigationStateChange={(prevState, currentState) => {\n      const currentScreen = getActiveRouteName(currentState);\n      const prevScreen = getActiveRouteName(prevState);\n\n      if (prevScreen !== currentScreen) {\n        // the line below uses the Google Analytics tracker\n        // change the tracker here to use other Mobile analytics SDK.\n        tracker.trackScreenView(currentScreen);\n      }\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Material Top Tab Navigator - Basic Implementation\nDESCRIPTION: Basic syntax for creating a material top tab navigator with route configs and navigator configuration options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/material-top-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Consuming Header Back Title via HeaderBackContext.Consumer (JavaScript)\nDESCRIPTION: Shows subscribing to the HeaderBackContext to retrieve the back button label (or title) from the parent navigation header. Used within a functional child of the context consumer, it expects headerBack (object) and can render based on that. Requires React Navigation elements and associated contexts. Inputs: none directly; output: usage of title in custom rendering.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport { HeaderBackContext } from '@react-navigation/elements';\n\n// ...\n\n<HeaderBackContext.Consumer>\n  {(headerBack) => {\n    if (headerBack) {\n      const backTitle = headerBack.title;\n\n      /* render something */\n    }\n\n    /* render something */\n  }}\n</HeaderBackContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator\nDESCRIPTION: Basic syntax for creating a bottom tab navigator with route configs and navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Component with Undefined Navigation Prop\nDESCRIPTION: Example showing a component that will throw an error due to undefined navigation prop. This demonstrates the common issue when navigation prop is not properly passed to child components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/connecting-navigation-prop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native';\n\nexport default class MyBackButton extends React.Component {\n  render() {\n    // This will throw an 'undefined is not a function' exception because the navigation\n    // prop is undefined.\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StackNavigator with Nested TabNavigator\nDESCRIPTION: Illustrates how to configure a StackNavigator with a nested TabNavigator as one of its routes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nStackNavigator({\n  route1: { screen: RouteOne },\n  route2: { screen: MyTabNavigator },\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Header Styles in React Navigation\nDESCRIPTION: Shows how to customize the header styles including background color, tint color, and title style using navigationOptions in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n    headerStyle: {\n      backgroundColor: '#f4511e',\n    },\n    headerTintColor: '#fff',\n    headerTitleStyle: {\n      fontWeight: 'bold',\n    },\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in StackNavigator for React Navigation\nDESCRIPTION: Example of defining route configurations for StackNavigator, including screen components, deep linking paths, and navigation options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/stack-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nStackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Lazy Loading of Stack Screens with React.lazy - JavaScript\nDESCRIPTION: This snippet showcases how to dynamically load navigation screens outside the component function using React.lazy for each screen, combined with Suspense to handle loading UI. The pattern avoids recreating new screen components on each render and is suitable for optimizing React Navigation stacks with web support. Required dependencies include React (Suspense, lazy), and a navigation library with Stack.Navigator and Stack.Screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/web-support.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Suspense, lazy } from 'react';\n\nconst HomeScreen = lazy(() => import('./HomeScreen'));\nconst ProfileScreen = lazy(() => import('./ProfileScreen'));\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      screenLayout={({ children }) => (\n        <Suspense fallback={<Loading />}>{children}</Suspense>\n      )}\n    >\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Navigation Status Bar Listeners\nDESCRIPTION: Implementation of navigation listeners to handle status bar style changes when tabs are focused.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen1 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('light-content');\n      isAndroid && StatusBar.setBackgroundColor('#6a51ae');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n\nclass Screen2 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('dark-content');\n      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Expo Go Deep Link via uri-scheme (Bash)\nDESCRIPTION: Shows how to use `npx uri-scheme open` to test a deep link targeting the Expo Go app running on a device/simulator. It uses the specific `exp://ADDRESS:PORT/--/` format, where ADDRESS and PORT match the details provided by `expo start`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open \"exp://127.0.0.1:19000/--/chat/jane\" --ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Store with MobX State Tree\nDESCRIPTION: Definition of a navigation store using MobX State Tree, demonstrating how to store and manage navigation parameters for different screens using models and references.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/MST-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { types, onSnapshot, getRoot } from 'mobx-state-tree';\nimport { Product } from '../models/Product';\nimport { User } from '../models/User';\n\nexport const NavigationStore = types\n  .model('NavigationStore', {\n    productDetailScreenParams: types.map(\n      types.model('ProductDetailScreenParams', {\n        product: types.optional(types.safeReference(Product)),\n      })\n    ),\n    userProfileScreenParams: types.model('UserProfileScreenParams', {\n      user: types.maybe(types.safeReference(User)),\n    }),\n  })\n  .actions(self => ({\n    ...\n  }));\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Screen by Name\nDESCRIPTION: Shows how to use the navigate method to navigate to a screen using the name defined in the Screen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate('Profile');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Navigation Helper in React Navigation\nDESCRIPTION: Demonstrates how to use the custom 'insertBeforeLast' navigation helper function with the dispatch method.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-object.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.dispatch(insertBeforeLast('Home'));\n```\n\n----------------------------------------\n\nTITLE: Clear Expo Cache\nDESCRIPTION: This command clears the Metro bundler cache when using Expo. It is often necessary after updating dependencies or encountering module resolution errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo start -c\n```\n\n----------------------------------------\n\nTITLE: Static Screen Configuration in React Navigation\nDESCRIPTION: Demonstrates how to define screens using static configuration with createNativeStackNavigator\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Navigator with Default Params\nDESCRIPTION: Creates a Stack Navigator with default parameters passed to routes. This example creates routes for PlayStation and Xbox products, passing the respective product name as a parameter to the ProductScreen component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Store = createStackNavigator({\n  Playstation: { screen: ProductScreen, params: { product: 'Playstation' } },\n  Xbox: { screen: ProductScreen, params: { product: 'Xbox' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Focus-Aware StatusBar Component using withNavigationFocus (JS)\nDESCRIPTION: Defines a `FocusAwareStatusBar` component using React Native's `StatusBar` and React Navigation's `withNavigationFocus` HOC. It ensures the `StatusBar` is only rendered and its configuration applied when the screen it's placed in is focused. This is crucial for tab or drawer navigators to prevent conflicts where multiple screens might be rendered simultaneously. Requires `React`, `StatusBar`, and `withNavigationFocus`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { StatusBar } from 'react-native';\nimport { withNavigationFocus } from 'react-navigation';\n\nconst FocusAwareStatusBar = withNavigationFocus(({ isFocused, ...rest }) =>\n  isFocused ? <StatusBar {...rest} /> : null\n);\n```\n\n----------------------------------------\n\nTITLE: Active Child Navigation Options\nDESCRIPTION: Example of using getActiveChildNavigationOptions to get navigation options from active child screens in nested navigators.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass A extends React.Component {\n  static navigationOptions = {\n    title: 'Welcome',\n    tabBarLabel: 'Home!',\n  };\n\n  render() {\n    return <Placeholder text=\"A!\" />;\n  }\n}\n\nconst HomeStack = createStackNavigator(\n  { A },\n  {\n    navigationOptions: ({ navigation, screenProps }) => ({\n      ...getActiveChildNavigationOptions(navigation, screenProps),\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Navigator with Navigation and ScreenProps - React Navigation (JavaScript)\nDESCRIPTION: This snippet provides an example of rendering the navigator by supplying required navigation state, dispatcher, and listeners via the navigation prop, as well as custom screenProps. It illustrates component usage at the React level, specifying the expected props and their structure. Requires a previously created AppNavigator and matching prop structure.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-navigators.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<AppNavigator\n  navigation={{ state, dispatch, addListener }}\n  screenProps={...}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Header Button in React Navigation\nDESCRIPTION: Demonstrates how to add a simple button to the right side of the navigation header using navigationOptions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/header-buttons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    headerTitle: <LogoTitle />,\n    headerRight: (\n      <Button\n        onPress={() => alert('This is a button!')}\n        title=\"Info\"\n        color=\"#fff\"\n      />\n    ),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Module with npm - Bash/Yarn\nDESCRIPTION: This command installs a missing npm package as a project dependency, often to resolve missing peer dependency errors in React Native projects. Replace 'name-of-the-module' with the actual package name. Executing this command requires either npm or yarn to be installed in your environment and should be run in your project directory.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install name-of-the-module\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Header and Tab Bar in React Navigation (Dynamic Configuration)\nDESCRIPTION: This example demonstrates how to hide the default header and tab bar in React Navigation with dynamic configuration, which can lead to content being hidden behind device notches and system UI elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/handling-safe-area.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction Demo() {\n  return (\n    <View\n      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}\n    >\n      <Text>This is top text.</Text>\n      <Text>This is bottom text.</Text>\n    </View>\n  );\n}\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        initialRouteName=\"Home\"\n        screenOptions={{ headerShown: false }}\n      >\n        <Stack.Screen name=\"Home\">\n          {() => (\n            <Tab.Navigator\n              initialRouteName=\"Analytics\"\n              tabBar={() => null}\n              screenOptions={{ headerShown: false }}\n            >\n              <Tab.Screen name=\"Analytics\" component={Demo} />\n              <Tab.Screen name=\"Profile\" component={Demo} />\n            </Tab.Navigator>\n          )}\n        </Stack.Screen>\n\n        <Stack.Screen name=\"Settings\" component={Demo} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Function-based Dynamic Screen Options in React Navigation\nDESCRIPTION: Shows how to use a function to define screen options in dynamic navigation configuration. The function can access navigation props and perform navigation actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/screen-options.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={({ navigation }) => ({\n    title: 'Awesome app',\n    headerLeft: () => (\n      <DrawerButton onPress={() => navigation.toggleDrawer()} />\n    ),\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator\nDESCRIPTION: Basic syntax for creating a bottom tab navigator with route configurations and navigator config options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createBottomTabNavigator in JavaScript\nDESCRIPTION: Demonstrates the basic import and usage pattern for `createBottomTabNavigator`. The function is imported from the `react-navigation-tabs` library and is called with route configurations (`RouteConfigs`) and optional navigator configurations (`TabNavigatorConfig`) to create a tab navigator component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\n\ncreateBottomTabNavigator(RouteConfigs, TabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Route Params in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the setParams function from the navigation prop to update the route params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  render() {\n    return (\n      <Button\n        onPress={() => this.props.navigation.setParams({ name: 'Lucy' })}\n        title=\"Set title name to 'Lucy'\"\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Components in React Navigation StackNavigator (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define screen components (`HomeScreen`, `DetailsScreen`) within the route configuration object passed to `createStackNavigator`. Each key in the object represents a route name, and the `screen` property specifies the component to render for that route. It also shows setting an `initialRouteName`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/glossary-of-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst AppNavigator = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen, // <----\n    },\n    Details: {\n      screen: DetailsScreen, // <----\n    },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Investigating Dependency Conflicts with NPM\nDESCRIPTION: Uses the `npm ls` command to list installed instances of `react-native-safe-area-context` and show which packages depend on them. This aids in diagnosing version conflicts in npm-based projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm ls react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Enabling State Persistence in Development Mode\nDESCRIPTION: This code snippet shows how to selectively enable state persistence in development mode using a conditional function.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/state-persistence.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({...});\nfunction getPersistenceFunctions() {\n  return __DEV__ ? {\n    persistNavigationState: ...,\n    loadNavigationState: ...,\n  } : undefined;\n}\nconst App = () => <AppNavigator {...getPersistenceFunctions()} />;\n```\n\n----------------------------------------\n\nTITLE: Changing HeaderBackButton to use displayMode instead of labelVisible\nDESCRIPTION: Example of migrating from the deprecated labelVisible prop to the new displayMode prop in HeaderBackButton component. The displayMode offers more flexibility with values like 'default', 'generic', and 'minimal'.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n<HeaderBackButton\n-   labelVisible={false}\n+   displayMode=\"minimal\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Header Assignment Causing Invalid Hook Call in React Navigation (JavaScript)\nDESCRIPTION: This snippet shows an incorrect approach, directly passing the 'MyHeader' component to the 'header' screen option. Since the navigation system will call 'MyHeader' as a function outside the normal React rendering context, hooks within 'MyHeader' will fail with an 'Invalid hook call' error. Always use a function that returns your header component to properly handle hooks. Only React, React Navigation dependencies are needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n<Stack.Screen\n  name=\"Home\"\n  component={Home}\n  option={{\n    // This is not correct\n    header: MyHeader,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Core Package\nDESCRIPTION: Command to install the core React Navigation package using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/native@^6.x\n```\n\n----------------------------------------\n\nTITLE: Creating Material Top Tab Navigator in React Navigation 2.0\nDESCRIPTION: Illustrates the creation of a material design top tab navigator in React Navigation 2.0, which is now a distinct component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-05-07-react-navigation-2.0.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateMaterialTopTabNavigator()\n```\n\n----------------------------------------\n\nTITLE: Referencing React Navigation Components\nDESCRIPTION: Examples of React Navigation component references in documentation, showing StackNavigator and TabNavigator usage patterns.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/next-steps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`StackNavigator`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`TabNavigator`\n```\n\n----------------------------------------\n\nTITLE: Modifying MainActivity.java for react-native-gesture-handler (Android)\nDESCRIPTION: Provides the necessary Java code changes within `MainActivity.java` for Android to correctly initialize and wrap the root view with `RNGestureHandlerEnabledRootView`. This is required to finalize the installation of `react-native-gesture-handler` in a bare React Native project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\npackage com.reactnavigation.example;\n\nimport com.facebook.react.ReactActivity;\n+ import com.facebook.react.ReactActivityDelegate;\n+ import com.facebook.react.ReactRootView;\n+ import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n\n+  @Override\n+  protected ReactActivityDelegate createReactActivityDelegate() {\n+    return new ReactActivityDelegate(this, getMainComponentName()) {\n+      @Override\n+      protected ReactRootView createRootView() {\n+       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n+      }\n+    };\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Navigation State in JavaScript for React Navigation\nDESCRIPTION: This snippet provides an example of a navigation state object with two routes. It demonstrates how the index property is used to indicate the active route and how routes are structured with key and routeName properties.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1,\n  routes: [\n    { key: 'A', routeName: 'Foo' },\n    { key: 'B', routeName: 'Bar' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of createAppContainer with React Navigation\nDESCRIPTION: Example showing how to create a basic app container with a stack navigator in React Navigation. The createAppContainer wraps the navigator component to make it the main component for React to render.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/app-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAppContainer, createStackNavigator } from 'react-navigation';\n// you can also import from @react-navigation/native\n\nconst AppNavigator = createStackNavigator(...);\n\nconst AppContainer = createAppContainer(AppNavigator);\n\n// Now AppContainer is the main component for React to render\n\nexport default AppContainer;\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Tabs in React Native\nDESCRIPTION: This code example shows how to implement navigation between tabs using the this.props.navigation.navigate method in React Native.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-based-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n        <Button\n          title=\"Go to Settings\"\n          onPress={() => this.props.navigation.navigate('Settings')}\n        />\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Screen Component Nesting in React Navigation\nDESCRIPTION: This example shows an incorrect implementation where a screen component (DetailsScreen) is directly rendered as a child of another screen component instead of being navigated to. This will cause issues as the child component won't receive the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/glossary-of-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n      <DetailsScreen />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pre-made Card Style Interpolators\nDESCRIPTION: Implementation of built-in card style interpolators for Android Oreo style animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CardStyleInterpolators } from 'react-navigation-stack';\n\n// ...\n\nstatic navigationOptions = {\n  title: 'Profile',\n  cardStyleInterpolator: CardStyleInterpolators.forFadeFromBottomAndroid,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Text Direction Attribute\nDESCRIPTION: Shows how to set the `dir` attribute on the root HTML element to ensure correct text direction rendering on the web, complementing the `direction` prop in React Navigation for RTL language support.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigation-container.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\">\n  <!-- App content -->\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Scene Components in TabView with Switch Statement (JavaScript)\nDESCRIPTION: Demonstrates a pattern where the renderScene function uses a switch statement on route.key to return different components per route. This approach introduces inline rendering, but may cause unnecessary rerenders if the scene is expensive. Inputs: scene descriptor with route. Outputs: relevant React element or null for fallback.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return (\n        <View style={styles.page}>\n          <Avatar />\n          <NewsFeed />\n        </View>\n      );\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for React Navigation\nDESCRIPTION: JSON configuration to make Jest tests work with React Navigation applications\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/redux-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"transformIgnorePatterns\": [\n      \"node_modules/(?!(jest-)?react-native|react-navigation)\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Stack History Example\nDESCRIPTION: Demonstrates navigation stack history with multiple screen navigation calls using keys.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_A });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_B });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_C });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_D });\n```\n\n----------------------------------------\n\nTITLE: Starting the Example App with Expo - Bash\nDESCRIPTION: This command launches the React Navigation example app in development mode through Yarn, typically using Expo. It allows contributors to run and test navigation features interactively during development. Prerequisites include a working Yarn installation, project setup, and Expo installed globally or in the project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links on iOS with uri-scheme or xcrun\nDESCRIPTION: Bash commands for testing deep linking functionality on iOS simulators. The commands use either the uri-scheme package or xcrun directly to open the app with a specific deep link URL.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/deep-linking.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme open exp://127.0.0.1:19000/--/chat/jan --ios\n\n# or use xcrun directly:\n\nxcrun simctl openurl booted exp://127.0.0.1:19000/--/chat/jane\n```\n\n----------------------------------------\n\nTITLE: Blocking Navigation Actions in React Navigation\nDESCRIPTION: Shows how to prevent navigation actions based on specific conditions by returning null from getStateForAction.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyStackRouter = StackRouter(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyStackRouter.router.getStateForAction;\n\nMyStackRouter.router.getStateForAction = (action, state) => {\n  if (\n    state &&\n    action.type === NavigationActions.BACK &&\n    state.routes[state.index].params.isEditing\n  ) {\n    // Returning null from getStateForAction means that the action\n    // has been handled/blocked, but there is not a new state\n    return null;\n  }\n\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with Redux Middleware in React Navigation\nDESCRIPTION: This code shows how to create a Redux middleware that tracks screen changes in a React Navigation app. The middleware intercepts navigation actions and tracks screen views when the current route changes, allowing for screen tracking in Redux-based navigation implementations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/screen-tracking.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\nimport { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';\n\nconst tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);\n\nconst screenTracking =\n  ({ getState }) =>\n  (next) =>\n  (action) => {\n    if (\n      action.type !== NavigationActions.NAVIGATE &&\n      action.type !== NavigationActions.BACK\n    ) {\n      return next(action);\n    }\n\n    const currentScreen = getCurrentRouteName(getState().navigation);\n    const result = next(action);\n    const nextScreen = getCurrentRouteName(getState().navigation);\n    if (nextScreen !== currentScreen) {\n      // the line below uses the Google Analytics tracker\n      // change the tracker here to use other Mobile analytics SDK.\n      tracker.trackScreenView(nextScreen);\n    }\n    return result;\n  };\n\nexport default screenTracking;\n```\n\n----------------------------------------\n\nTITLE: Blocking Navigation Actions in Stack Router\nDESCRIPTION: Shows how to prevent navigation actions based on route conditions by returning null from getStateForAction.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\n\nconst MyStackRouter = StackRouter(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyStackRouter.router.getStateForAction;\n\nMyStackRouter.router.getStateForAction = (action, state) => {\n  if (\n    state &&\n    action.type === NavigationActions.BACK &&\n    state.routes[state.index].params.isEditing\n  ) {\n    // Returning null from getStateForAction means that the action\n    // has been handled/blocked, but there is not a new state\n    return null;\n  }\n\n  return defaultGetStateForAction(action, state);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-navigation-tabs dependency using npm/yarn\nDESCRIPTION: Command to install the `react-navigation-tabs` package using either npm or yarn. This package is required to use the `createMaterialTopTabNavigator` component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-top-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash npm2yarn\nnpm install react-navigation-tabs\n```\n```\n\n----------------------------------------\n\nTITLE: Unlinking react-native-safe-area-context\nDESCRIPTION: Unlinks the `react-native-safe-area-context` library in a bare React Native project. Similar to gesture handler, manual linking should be removed if using React Native 0.60+ to avoid conflicts with automatic linking.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Navigation Helper Package\nDESCRIPTION: Command to install the react-navigation-redux-helpers package via npm or yarn\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/redux-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-redux-helpers\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator with Different Status Bar Configurations\nDESCRIPTION: This snippet demonstrates how to create a stack navigator with two screens that have different status bar configurations. The headerMode is set to 'none' to hide the navigation header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default createStackNavigator(\n  {\n    Screen1: {\n      screen: Screen1,\n    },\n    Screen2: {\n      screen: Screen2,\n    },\n  },\n  {\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using HeaderBackground Component in React Navigation\nDESCRIPTION: This snippet demonstrates how to use the HeaderBackground component to style the header background in React Navigation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderBackground style={{ backgroundColor: 'tomato' }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing State-to-Path Conversion in React Navigation\nDESCRIPTION: This snippet illustrates how to override the default state-to-path conversion in React Navigation by providing a custom `getStateFromPath` function. This is useful for implementing custom URL parsing logic.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-container.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<NavigationContainer\n  linking={{\n    prefixes: ['https://example.com', 'example://'],\n    config: {\n      screens: {\n        Chat: 'feed/:sort',\n      },\n    },\n    getStateFromPath(path, config) {\n      // Return a state object here\n      // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`\n    },\n  }}\n>\n  {/* content */}\n</NavigationContainer>\n```\n\n----------------------------------------\n\nTITLE: Tracking Screen Changes in React Navigation with JavaScript\nDESCRIPTION: This code example demonstrates how to use the `onStateChange` and `onReady` props of React Navigation's `NavigationContainer` to detect and handle active screen changes. The snippet uses two refs (`navigationRef` and `routeNameRef`) to keep track of the navigation state and the last active route name. Developers can hook in their analytics SDK by replacing or extending the `trackScreenView` function. Dependencies: `react`, `@react-navigation/native`. Main parameters are the navigation and route references, and the expected input is navigation state change events. The output is an analytics event whenever the screen changes. Limitations: this does not handle initial screen tracking automatically‚Äîyou must handle the initial screen separately.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-tracking.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef } from 'react';\\nimport { NavigationContainer } from '@react-navigation/native';\\n\\nexport default () => {\\n  const navigationRef = useRef();\\n  const routeNameRef = useRef();\\n\\n  return (\\n    <NavigationContainer\\n      ref={navigationRef}\\n      onReady={() =>\\n        (routeNameRef.current = navigationRef.current.getCurrentRoute().name)\\n      }\\n      onStateChange={async () => {\\n        const previousRouteName = routeNameRef.current;\\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\\n        const trackScreenView = () => {\\n          // Your implementation of analytics goes here!\\n        };\\n\\n        if (previousRouteName !== currentRouteName) {\\n          // Replace the line below to add the tracker from a mobile analytics SDK\\n          await trackScreenView(currentRouteName);\\n        }\\n\\n        // Save the current route name for later comparison\\n        routeNameRef.current = currentRouteName;\\n      }}\\n    >\\n      {/* ... */}\\n    </NavigationContainer>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Static Routes in React Navigation\nDESCRIPTION: This snippet demonstrates how to define static routes in React Navigation using createDrawerNavigator, createStackNavigator, and createSwitchNavigator. It shows the structure for setting up navigation for different parts of an app, including friends, authentication, and the main app navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/limitations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst FriendsNavigator = createDrawerNavigator({\n  Feed: FeedScreen,\n  FriendList: FriendListScreen,\n});\n\nconst AuthNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  App: FriendsNavigator,\n  Auth: AuthNavigator,\n});\n\nexport default class MyApp extends React.Component {\n  render() {\n    return <AppNavigator />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of a Route Object in React Navigation\nDESCRIPTION: This snippet shows the structure of a route object in React Navigation. It includes a key for identification, a name to designate the type of route, and optional params for additional data.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/glossary-of-terms.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  name: 'Profile',\n  params: { id: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Stack and Tab Navigator Configuration\nDESCRIPTION: Shows how to configure a stack navigator containing a tab navigator with proper header title management.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/navigation-options-resolution.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedScreen,\n  Profile: ProfileScreen,\n});\n\nTabNavigator.navigationOptions = ({ navigation }) => {\n  const { routeName } = navigation.state.routes[navigation.state.index];\n  const headerTitle = routeName;\n\n  return {\n    headerTitle,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Styles in React Navigation\nDESCRIPTION: Shows how to customize header styles including background color, tint color, and title text styling.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/headers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Home',\n    headerStyle: {\n      backgroundColor: '#f4511e',\n    },\n    headerTintColor: '#fff',\n    headerTitleStyle: {\n      fontWeight: 'bold',\n    },\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS Development\nDESCRIPTION: Command to install required CocoaPods for iOS development after linking the React Navigation dependencies.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependency Version with Yarn Resolutions\nDESCRIPTION: Adds a `resolutions` block to `package.json` to force yarn to install a specific version of `react-native-safe-area-context`, overriding versions specified by other dependencies. Replace `<version you want to use>` with the desired version number.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-safe-area-context\": \"<version you want to use>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring createAppContainer Props in React Native\nDESCRIPTION: Shows how to pass props to the app container, including onNavigationStateChange for tracking navigation state changes and uriPrefix for handling deep links.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/app-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppContainer\n  onNavigationStateChange={handleNavigationChange}\n  uriPrefix=\"/app\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to navigationOptions using screenProps\nDESCRIPTION: Example showing how to apply themes to navigationOptions in a stack navigator. Since navigationOptions can't directly access React context, this snippet demonstrates using screenProps as a workaround to apply theme styles to the header.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/themes.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createAppContainer, createStackNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ screenProps }) => {\n    let currentTheme = ThemeConstants[screenProps.theme];\n\n    return {\n      title: 'Home',\n      headerTintColor: currentTheme.fontColor,\n      headerStyle: { backgroundColor: currentTheme.backgroundColor },\n    };\n  };\n\n  render() {\n    return (\n      <ThemedView\n        style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      >\n        <ThemeContext.Consumer>\n          {({ toggleTheme }) => (\n            <ThemedButton title=\"Toggle theme\" onPress={toggleTheme} />\n          )}\n        </ThemeContext.Consumer>\n      </ThemedView>\n    );\n  }\n}\n\nconst Stack = createStackNavigator({ Home: HomeScreen });\nconst Navigation = createAppContainer(Stack);\n\nexport default class AppContainer extends React.Component {\n  state = {\n    theme: 'light',\n  };\n\n  toggleTheme = () => {\n    this.setState(({ theme }) => ({\n      theme: theme === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}\n      >\n        <Navigation screenProps={{ theme: this.state.theme }} />\n      </ThemeContext.Provider>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Inline Component Function to Stack.Screen Prop - JavaScript\nDESCRIPTION: Demonstrates an incorrect pattern where an inline function returning a React element is supplied to the component prop of Stack.Screen. This results in a new component instance on each render, causing remounts and loss of state. The example requires React, React Navigation, and SomeComponent. Avoid creating components on every render to preserve state and avoid unwanted unmounts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\\\"Home\\\"\n        component={() => {\n          return <SomeComponent />;\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking with Redux Middleware in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a Redux middleware for screen tracking in React Navigation. It intercepts navigation actions, compares the current and next screens, and sends tracking data to Google Analytics when the screen changes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/screen-tracking.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationActions } from 'react-navigation';\nimport { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';\n\nconst tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);\n\nconst screenTracking =\n  ({ getState }) =>\n  (next) =>\n  (action) => {\n    if (\n      action.type !== NavigationActions.NAVIGATE &&\n      action.type !== NavigationActions.BACK\n    ) {\n      return next(action);\n    }\n\n    const currentScreen = getActiveRouteName(getState().navigation);\n    const result = next(action);\n    const nextScreen = getActiveRouteName(getState().navigation);\n    if (nextScreen !== currentScreen) {\n      // the line below uses the Google Analytics tracker\n      // change the tracker here to use other Mobile analytics SDK.\n      tracker.trackScreenView(nextScreen);\n    }\n    return result;\n  };\n\nexport default screenTracking;\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Component Inside Parent Component Leads to Remounts (JavaScript)\nDESCRIPTION: This snippet creates a component ('Home') inside another component ('App'), then passes it as a screen to React Navigation. Each re-rendering redefines 'Home', so React sees a new component each time, causing unmount/mount cycles and losing local state. For optimal navigation and state management, always define screen components at the top level. No dependencies beyond React and React Navigation are necessary.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nfunction App() {\n  const Home = () => {\n    return <SomeComponent />;\n  };\n\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Metro Bundler Cache for React Native - Bash\nDESCRIPTION: This command resets the Metro bundler cache for React Native projects, particularly when not using Expo. It's useful for addressing incorrect local caching that may cause module resolution errors. The '--reset-cache' flag forces a cache reset. Run from the project root directory. Requires npx and a working React Native CLI setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native start --reset-cache\n\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Checking in Watch Mode - Bash\nDESCRIPTION: Runs the TypeScript compiler in watch mode via Yarn. Continuously monitors file changes and performs incremental type checks, providing real-time feedback during development. Useful for iterative development as it helps catch type errors early without restarting the check manually.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript --watch\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Android Back Button Behavior in React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom back button handler for Android devices in a React Native component. It uses the BackHandler API to listen for hardware back button presses and implements custom logic to handle selection mode deactivation before allowing the screen to be popped.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-android-back-button-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ScreenWithCustomBackBehavior extends React.Component {\n  componentDidMount() {\n    BackHandler.addEventListener(\n      'hardwareBackPress',\n      this.onBackButtonPressAndroid\n    );\n  }\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener(\n      'hardwareBackPress',\n      this.onBackButtonPressAndroid\n    );\n  }\n\n  onBackButtonPressAndroid = () => {\n    if (this.isSelectionModeEnabled()) {\n      this.disableSelectionMode();\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Transitions in Animated Switch Navigator\nDESCRIPTION: This example demonstrates how to customize the transition between screens using the transition option in the SwitchNavigatorConfig. It uses the Transition API from react-native-reanimated to create a combined slide and fade effect.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/animated-switch-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport createAnimatedSwitchNavigator from 'react-navigation-animated-switch';\nimport { Transition } from 'react-native-reanimated';\n\nconst MySwitch = createAnimatedSwitchNavigator(\n  {\n    Home: HomeScreen,\n    Other: OtherScreen,\n  },\n  {\n    // The previous screen will slide to the bottom while the next screen will fade in\n    transition: (\n      <Transition.Together>\n        <Transition.Out\n          type=\"slide-bottom\"\n          durationMs={400}\n          interpolation=\"easeIn\"\n        />\n        <Transition.In type=\"fade\" durationMs={500} />\n      </Transition.Together>\n    ),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Safe Area Context with SafeAreaProviderCompat (JavaScript)\nDESCRIPTION: Shows usage of SafeAreaProviderCompat to wrap application components for safe area layout handling. This wraps and initializes react-native-safe-area-context's provider, ensuring child screens can compute safe areas accurately even during SSR or initial mount. No extra parameters required; output is a context provider for safe area data.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n<SafeAreaProviderCompat>{/* Your components */}</SafeAreaProviderCompat>\n```\n\n----------------------------------------\n\nTITLE: Mock react-native-screens with Jest\nDESCRIPTION: This JavaScript snippet shows how to mock `react-native-screens` components with Jest.  It is only needed if mocking `react-native-screens` is required, which is not common. It involves mocking the `Screen` component as a `View`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Include this section for mocking react-native-screens\njest.mock('react-native-screens', () => {\n  // Require actual module instead of a mock\n  let screens = jest.requireActual('react-native-screens');\n\n  // All exports in react-native-screens are getters\n  // We cannot use spread for cloning as it will call the getters\n  // So we need to clone it with Object.create\n  screens = Object.create(\n    Object.getPrototypeOf(screens),\n    Object.getOwnPropertyDescriptors(screens)\n  );\n\n  // Add mock of the component you need\n  // Here is the example of mocking the Screen component as a View\n  Object.defineProperty(screens, 'Screen', {\n    value: require('react-native').View,\n  });\n\n  return screens;\n});\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Checking - Bash\nDESCRIPTION: This command runs the TypeScript compiler for static type checking across the codebase using Yarn. It validates type correctness according to the project's tsconfig settings. Dependencies include TypeScript and Yarn. Fails if any type errors are detected, ensuring type safety before code is committed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript\n```\n\n----------------------------------------\n\nTITLE: Development-Only State Persistence\nDESCRIPTION: Conditional implementation of navigation state persistence that only activates in development mode using __DEV__ flag.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/state-persistence.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator({...});\nconst navigationPersistenceKey = __DEV__ ? \"NavigationStateDEV\" : null;\nconst App = () => <AppNavigator persistenceKey={navigationPersistenceKey} />;\n```\n\n----------------------------------------\n\nTITLE: Using forceInset with SafeAreaView\nDESCRIPTION: Demonstrates how to control specific padding areas using the forceInset prop with SafeAreaView.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/handling-iphonex.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SafeAreaView style={styles.container} forceInset={{ bottom: 'never' }}>\n  <Text style={styles.paragraph}>This is top text.</Text>\n  <Text style={styles.paragraph}>This is bottom text.</Text>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Manually Remove Metro Cache\nDESCRIPTION: This command manually removes the Metro bundler cache directory. It is a more forceful way to clear the cache if the standard commands fail.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf $TMPDIR/metro-bundler-cache-*\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS dependencies - Bash\nDESCRIPTION: Runs pod-install for iOS, linking native dependencies for React Native projects. Necessary when developing on macOS for iOS platforms and required after installing new native dependencies such as gesture handlers or masked views. Assumes CocoaPods is installed and the iOS folder is present.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install ios\n```\n\n----------------------------------------\n\nTITLE: Navigation Views Structure Documentation\nDESCRIPTION: Documentation outlining the built-in navigation view components in React Navigation, including CardStack, Card, Header, Tabs, and Drawer views. Also mentions the Transitioner component for managing transition animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-views.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: navigation-views\ntitle: Navigation views\nsidebar_label: Navigation views\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Scenes in React Navigation Transitioner\nDESCRIPTION: Example of implementing the render function for the Transitioner component. It demonstrates how to render scenes as a stack of cards and create animations using Animated.View and interpolation.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/transitioner.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n_render(transitionProps, prevTransitionProps) {\n  const scenes = transitionProps.scenes.map(scene => this._renderScene(transitionProps, scene));\n  return (\n    <View style={styles.stack}>\n      {scenes}\n    </View>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n_renderScene(transitionProps, scene) {\n  const { position } = transitionProps;\n  const { index } = scene;\n  const opacity = position.interpolate({\n    inputRange: [index-1, index, index+1],\n    outputRange: [0, 1, 0],\n  });\n  // The prop `router` is populated when we call `createNavigator`.\n  const Scene = this.props.router.getComponent(scene.route.routeName);\n  return (\n    <Animated.View style={{ opacity }}>\n      { Scene }\n    </Animated.View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for React Navigation Limitations Page\nDESCRIPTION: YAML frontmatter defining the page metadata for the React Navigation limitations documentation page. It specifies the page ID, title, and sidebar label.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/limitations.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: limitations\ntitle: Limitations\nsidebar_label: Limitations\n---\n```\n\n----------------------------------------\n\nTITLE: Describing Nested Navigation State with Stack and Tab Navigators (JavaScript)\nDESCRIPTION: This snippet expands upon the previous one by showcasing a navigation state object that includes a nested tab navigator inside a stack navigator. The inner 'state' property embedded within a route's object indicates the child navigator's state, demonstrating support for composite navigation structures. This pattern requires no extra dependencies and is applicable when nesting navigators (e.g., stack containing tabs) in a React Navigation setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/navigation-state.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    {\n      key: 'home-1',\n      name: 'Home',\n      state: {\n        key: 'tab-1',\n        routeNames: ['Feed', 'Library', 'Favorites'],\n        routes: [\n          { key: 'feed-1', name: 'Feed', params: { sortBy: 'latest' } },\n          { key: 'library-1', name: 'Library' },\n          { key: 'favorites-1', name: 'Favorites' },\n        ],\n        index: 0,\n      },\n    },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Catch-All Routing for Invalid Sub-Paths (Dynamic Config) - React Navigation (JavaScript)\nDESCRIPTION: This dynamic config object defines layers of route matching, including a catch-all InvalidSettings screen for unmatched subpaths under 'settings' and a top-level NotFound for all others. Requires screen name mapping in the navigation implementation and supports highly granular error routing. Parameters include user id, settings path, and wildcards. All dependencies are via React Navigation‚Äôs configuration and available screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/configuring-links.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  screens: {\n    Home: {\n      initialRouteName: 'Feed',\n      screens: {\n        Profile: 'users/:id',\n        Settings: {\n          path: 'settings',\n          screens: {\n            InvalidSettings: '*',\n          },\n        },\n      },\n    },\n    NotFound: '*',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-pager-view for Expo\nDESCRIPTION: Command to install react-native-pager-view in an Expo managed project.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-pager-view\n```\n\n----------------------------------------\n\nTITLE: Incorrect SceneMap Usage Example - React Native JavaScript\nDESCRIPTION: Shows a bad practice of passing inline functions to SceneMap, which negatively affects performance and state persistence by causing components to unmount/remount. Intended as a cautionary example only. Inputs are route keys mapped to inline render functions; output is a renderScene function (but should be avoided).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nSceneMap({\n  first: () => <FirstRoute foo={props.foo} />, \n  second: SecondRoute,\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating React Navigation State Structure (JSON)\nDESCRIPTION: This JSON snippet shows a typical structure for a navigator's state in React Navigation. It includes a `key` for the navigator, an `index` indicating the currently active route, and an array of `routes`, where each object represents a screen in the navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/glossary-of-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"key\": \"StackRouterRoot\",\n  \"index\": 1,\n  \"routes\": [\n    { \"key\": \"A\", \"routeName\": \"Home\" },\n    { \"key\": \"B\", \"routeName\": \"Profile\" }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating metro-react-native-babel-preset\nDESCRIPTION: Installs or updates the `metro-react-native-babel-preset` development dependency to the latest version. An outdated version might cause syntax errors when processing React Navigation packages.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev metro-react-native-babel-preset\n```\n\n----------------------------------------\n\nTITLE: Incorrect Screen Options in Nested Stack-Tab Navigation in React Navigation\nDESCRIPTION: This example shows an incorrect implementation where screen options (tabBarLabel) are set on screens inside stack navigators, but they need to be on the Tab.Screen components directly to affect the tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen-options-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tab = createBottomTabNavigator();\nconst HomeStack = createStackNavigator();\nconst SettingsStack = createStackNavigator();\n\nfunction HomeStackScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen\n        name=\"A\"\n        component={A}\n        options={{ tabBarLabel: 'Home!' }}\n      />\n    </HomeStack.Navigator>\n  );\n}\n\nfunction SettingsStackScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen\n        name=\"B\"\n        component={B}\n        options={{ tabBarLabel: 'Settings!' }}\n      />\n    </SettingsStack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Home\" component={HomeStackScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsStackScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StatusCodeContext for HTTP Status Handling\nDESCRIPTION: Implementation of a React context to handle HTTP status codes across both server and client rendering. This allows components to set appropriate status codes for the server response.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/server-rendering.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nconst StatusCodeContext = React.createContext();\n\nexport default StatusCodeContext;\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/stack with npm - Bash\nDESCRIPTION: Installs the @react-navigation/stack package with npm, which provides the stack-based navigation functionality for React Native apps using React Navigation. This command should be run from the root directory of your React Native project. Requires npm and a Node.js environment.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/stack-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/stack@^6.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Navigation Options in React Component\nDESCRIPTION: Shows how to set dynamic navigation options using a function that receives props and returns an object of options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileScreen extends React.Component {\n  static navigationOptions = ({ navigation, screenProps }) => ({\n    title: navigation.state.params.name + \"'s Profile!\",\n    headerRight: <Button color={screenProps.tintColor} {...} />,\n  });\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Checks\nDESCRIPTION: Commands to run TypeScript checks on the codebase, including an option for watch mode during development.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript --watch\n```\n\n----------------------------------------\n\nTITLE: Rendering a Scrollable FlatList in a Tab Navigator with React Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to implement a FlatList within a bottom tab navigator using React Navigation and React Navigation Tabs, tailored for React Native apps. Dependencies include 'react', 'react-native', 'react-navigation', and 'react-navigation-tabs'; ensure all packages are installed. The 'HomeScreen' component renders a scrollable list of 150 items, and is used as a screen in a tab navigator created with createBottomTabNavigator and createAppContainer. The example expects no external data input but renders a static demo list, and highlights integration of navigation-aware scrolling. Custom renderItem and styles illustrate how to customize list contents and appearance.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/scrollables.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createAppContainer, FlatList } from 'react-navigation';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\n\nconst data = new Array(150).fill(0);\n\nclass HomeScreen extends React.Component {\n  renderItem = ({ index }) => {\n    return (\n      <View style={{ height: 50 }}>\n        <Text style={{ textAlign: 'center' }}>Item {index}</Text>\n      </View>\n    );\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <FlatList\n          data={data}\n          renderItem={this.renderItem}\n          contentContainerStyle={{ padding: 10 }}\n        />\n      </View>\n    );\n  }\n}\n\nconst TabNavigator = createBottomTabNavigator({\n  Home: { screen: HomeScreen },\n});\n\nexport default createAppContainer(TabNavigator);\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Drawer Navigator\nDESCRIPTION: Code package reference for installing the drawer navigator component from its dedicated package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2019-09-16-react-navigation-4.0.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreact-navigation-drawer\n```\n\n----------------------------------------\n\nTITLE: Installing Material Bottom Tabs Dependencies using npm/yarn\nDESCRIPTION: Command to install the necessary `react-navigation-material-bottom-tabs` and `react-native-paper` packages using either npm or yarn. These are required dependencies for using the material bottom tab navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash npm2yarn\nnpm install react-navigation-material-bottom-tabs react-native-paper\n```\n```\n\n----------------------------------------\n\nTITLE: Importing createMaterialBottomTabNavigator in JavaScript\nDESCRIPTION: JavaScript import statement to bring the `createMaterialBottomTabNavigator` factory function into the scope from the `react-navigation-material-bottom-tabs` library. This function is used to create the navigator component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-bottom-tab-navigator.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { createMaterialBottomTabNavigator } from 'react-navigation-material-bottom-tabs';\n```\n```\n\n----------------------------------------\n\nTITLE: Header Style Fade Animation Interpolator\nDESCRIPTION: Custom header style interpolator function that creates fade effects for header elements.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst forFade = ({ current, next }) => {\n  const opacity = Animated.add(\n    current.progress,\n    next ? next.progress : 0\n  ).interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 1, 0],\n  });\n\n  return {\n    leftButtonStyle: { opacity },\n    rightButtonStyle: { opacity },\n    titleStyle: { opacity },\n    backgroundStyle: { opacity },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Child Navigation State Structure in React Navigation\nDESCRIPTION: Example showing the structure of a nested navigation state with child routes.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/glossary-of-terms.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  routeName: 'Profile',\n  params: { id: '123' },\n  index: 1,\n  routes: [ {...}, {...} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Expo Project\nDESCRIPTION: Command to install required dependencies for React Navigation in an Expo managed project. This uses the Expo package manager to ensure compatibility.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Using goBack Function in React Navigation\nDESCRIPTION: This example shows different ways to use the goBack function from the navigation prop, including going back from a specific screen or anywhere in the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-prop.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    const { goBack } = this.props.navigation;\n    return (\n      <View>\n        <Button onPress={() => goBack()} title=\"Go back from this HomeScreen\" />\n        <Button onPress={() => goBack(null)} title=\"Go back anywhere\" />\n        <Button\n          onPress={() => goBack('key-123')}\n          title=\"Go back from key-123\"\n        />\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Yarn Resolutions (Bash)\nDESCRIPTION: This command runs `yarn` (or `yarn install`) to install dependencies according to the `package.json` and `yarn.lock` files. It applies any overrides specified in the `resolutions` field.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Stack Navigator with Tab Bar Visibility Control\nDESCRIPTION: Example demonstrating how to control tab bar visibility based on navigation state in a nested stack navigator.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFeedStack.navigationOptions = ({ navigation }) => {\n  let tabBarVisible = true;\n  if (navigation.state.index > 0) {\n    tabBarVisible = false;\n  }\n\n  return {\n    tabBarVisible,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing createSwitchNavigator in React Navigation\nDESCRIPTION: Example of importing the createSwitchNavigator from react-navigation. This navigator switches between screens with no UI on top, unmounting inactive screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigator-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[createSwitchNavigator](switch-navigator.md)\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/material-bottom-tabs 6.x\nDESCRIPTION: Command to install the 6.x version of @react-navigation/material-bottom-tabs package.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/material-bottom-tabs@^6.x\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Expo Projects using npx expo install\nDESCRIPTION: Command to install or update `react-native-safe-area-context` and `react-native-screens` to the latest compatible versions within an Expo managed project. These dependencies are required for React Navigation 6.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-safe-area-context react-native-screens\n```\n\n----------------------------------------\n\nTITLE: Alternative Correct Navigator Implementation with Router Prop\nDESCRIPTION: Another valid approach to implementing multiple navigators by exposing the router static and threading through the navigation prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/common-mistakes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    /* In the root component we are rendering the app navigator */\n    return <AppContainer />;\n  }\n}\n\nconst AuthenticationNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nclass AuthenticationScreen extends React.Component {\n  static router = AuthenticationNavigator.router;\n\n  render() {\n    return <AuthenticationNavigator navigation={this.props.navigation} />;\n  }\n}\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthenticationScreen, // This screen renders a navigator!\n  Home: HomeScreen,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n```\n\n----------------------------------------\n\nTITLE: Listing Added React Navigation `navigationOptions`\nDESCRIPTION: Lists new `navigationOptions` added in a React Navigation update. These options provide enhanced control over gestures, animations, header styling, card appearance, and transition lifecycle events.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/upgrading-from-3.x.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n- `gestureEnabled`\n- `animationEnabled`\n- `headerTitleAlign`\n- `cardShadowEnabled`\n- `cardOverlayEnabled`\n- `cardStyle`\n- `headerBackgroundStyle`\n- `headerBackTitleVisible`\n- `swipeVelocityImpact`\n- `onTransitionStart`\n- `onTransitionEnd`\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Navigation State with useNavigationState in JavaScript\nDESCRIPTION: Demonstrates retrieving the entire navigation state object using the `useNavigationState` hook by passing an identity selector function (`state => state`). This is generally discouraged due to potential performance issues, as the component will re-render on any state change. Requires `useNavigationState` from `@react-navigation/native`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/use-navigation-state.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst state = useNavigationState((state) => state);\n```\n\n----------------------------------------\n\nTITLE: Importing createBottomTabNavigator in React Navigation\nDESCRIPTION: Example of importing the createBottomTabNavigator from react-navigation. This navigator renders a tab bar that allows users to switch between several screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-navigator-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`createBottomTabNavigator`](bottom-tab-navigator.md)\n```\n\n----------------------------------------\n\nTITLE: Alternative Navigator Structure with Parent Stack\nDESCRIPTION: Recommended approach using a parent stack navigator that wraps the drawer navigator, allowing for better control over which screens have drawer access.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route where you want the drawer to remain available */\n  /* keep in mind that it will conflict with the swipe back gesture on ios */\n});\n\nconst DrawerNavigator = createDrawerNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n});\n\nconst HomeStack = createStackNavigator({\n  Drawer: DrawerNavigator,\n  Details: DetailsScreen,\n  /* add routes here where you want the drawer to be locked */\n});\n\nconst AppNavigator = createSwitchNavigator({\n  Auth: AuthScreen,\n  Home: HomeStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Unlink react-native-safe-area-context\nDESCRIPTION: This command unlinks the `react-native-safe-area-context` library. It's used in bare React Native projects when the library was manually linked before autolinking was enabled.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Screen Options Navigation Example\nDESCRIPTION: Example showing how to retrieve screen navigation options using the router.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/custom-routers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// First, prepare a navigation prop for your child, or re-use one if already available.\nconst screenNavigation = addNavigationHelpers({\n  // In this case we use navigation.state.index because we want the title for the active route.\n  state: navigation.state.routes[navigation.state.index],\n  dispatch: navigation.dispatch,\n});\nconst options = this.props.router.getScreenOptions(screenNavigation, {});\nconst title = options.title;\n```\n\n----------------------------------------\n\nTITLE: Initializing TabNavigator Component\nDESCRIPTION: Basic initialization syntax for creating a TabNavigator with route configs and navigator configuration options.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTabNavigator(RouteConfigs, TabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Navigator in React Navigation\nDESCRIPTION: Basic syntax for creating a tab navigator using the deprecated 'createTabNavigator' function. It takes RouteConfigs and TabNavigatorConfig as arguments.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTabNavigator(RouteConfigs, TabNavigatorConfig);\n```\n\n----------------------------------------\n\nTITLE: Rehydrated Navigation State Example\nDESCRIPTION: Example of how a partial state is rehydrated by React Navigation, showing the auto-generated properties like type, key, routeNames, and indexes that weren't in the original partial state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/navigation-state.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst state = {\n  type: 'stack',\n  key: 'stack-1',\n  routeNames: ['Home', 'Profile', 'Settings'],\n  routes: [\n    { key: 'home-1', name: 'Home' },\n    { key: 'settings-1', name: 'Settings' },\n  ],\n  index: 1,\n  stale: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Unlinking react-native-gesture-handler (Bash)\nDESCRIPTION: This command attempts to unlink the `react-native-gesture-handler` library. This is necessary only if you manually linked it in a React Native version below 0.60 or if automatic linking failed. Incorrect linking can cause errors like \"null is not an object (evaluating 'RNGestureHandlerModule.default.Direction')\".\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nreact-native unlink react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Reducer Implementation\nDESCRIPTION: Example of creating a custom navigation reducer for React Navigation with Redux\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/redux-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst AppNavigator = createStackNavigator(AppRouteConfigs);\n\nconst initialState = AppNavigator.router.getStateForAction(\n  AppNavigator.router.getActionForPathAndParams('Login')\n);\n\nconst navReducer = (state = initialState, action) => {\n  const nextState = AppNavigator.router.getStateForAction(action, state);\n\n  // Simply return the original `state` if `nextState` is null or undefined.\n  return nextState || state;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Status Bar Styles in Stack Navigator Screens\nDESCRIPTION: This code shows two screen components with different status bar configurations. Screen1 uses a light theme with dark content, while Screen2 uses a dark theme with light content. Each screen includes a button to navigate to the other screen.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Screen1 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n        <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen2')}\n          color={isAndroid ? 'blue' : '#fff'}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Object Structure in React Navigation\nDESCRIPTION: Demonstrates the structure of a route object with key, routeName, and optional params.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/glossary-of-terms.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'B',\n  routeName: 'Profile',\n  params: { id: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Drawer Navigation\nDESCRIPTION: Shows how to programmatically open and close the drawer navigation using navigation commands.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/drawer-based-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.props.navigation.navigate('DrawerOpen'); // open drawer\nthis.props.navigation.navigate('DrawerClose'); // close drawer\n```\n\n----------------------------------------\n\nTITLE: Using OptionsArgs Type for Screen Options in TypeScript\nDESCRIPTION: Example demonstrating the new XOptionsArgs type for typing the arguments of the options callback, providing better type safety in React Navigation 7.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/upgrading-from-6.x.md#2025-04-23_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nconst options = ({\n  route,\n}: StackOptionsArgs<RootStackParamList, 'Details'>) => {\n  return {\n    title: route.params.title,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Navigation Link in React Navigation Web\nDESCRIPTION: This code shows how to use the Link component to create a navigation link to a specific route in a React Navigation web app. It demonstrates passing route parameters and specifies the destination route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/web-support.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Link toRoute=\"Profile\" params={{ name: 'jamie' }}>\n  Jamie's Profile\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Using withNavigationFocus HOC in React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `withNavigationFocus` HOC from React Navigation. It defines a simple React Native component `FocusStateLabel` that displays text based on the `isFocused` prop. The component is then exported after being wrapped with `withNavigationFocus`, which provides the `isFocused` prop automatically based on the screen's focus state. Dependencies include React, React Native (`Text`), and React Navigation (`withNavigationFocus`).\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/with-navigation-focus.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withNavigationFocus } from 'react-navigation';\n\nclass FocusStateLabel extends React.Component {\n  render() {\n    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;\n  }\n}\n\n// withNavigationFocus returns a component that wraps FocusStateLabel and passes\n// in the navigation prop\nexport default withNavigationFocus(FocusStateLabel);\n```\n\n----------------------------------------\n\nTITLE: Static vs Direct Navigation Options\nDESCRIPTION: Example demonstrating two equivalent ways of setting navigation options - using static class property and setting options directly on the component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends React.Component {\n  static navigationOptions = {\n    title: 'Hello!',\n  };\n  // etc.\n}\n\nclass MyOtherComponent extends React.Component {\n  // etc.\n}\n\nMyOtherComponent.navigationOptions = {\n  title: 'Hello!',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Drawer Screens and Navigator in React Navigation\nDESCRIPTION: This snippet demonstrates how to create HomeScreen and SettingsScreen components, set up a DrawerNavigator, and export it as the main app container. It includes styling for the drawer and screen layouts.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/drawer-based-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>\n      </View>\n    );\n  }\n}\n\nconst DrawerNavigator = createDrawerNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    drawerBackgroundColor: 'rgba(255,255,255,.9)',\n    contentOptions: {\n      activeTintColor: '#fff',\n      activeBackgroundColor: '#6b52ae',\n    },\n  }\n);\n\nexport default createAppContainer(DrawerNavigator);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Screen Component in React Navigation\nDESCRIPTION: This snippet illustrates an incorrect way of using a screen component. It shows that rendering a screen component (DetailsScreen) directly as a child of another component (HomeScreen) will not provide it with the navigation prop, leading to errors.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/glossary-of-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n      <DetailsScreen />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Stack Navigator Package\nDESCRIPTION: Command to install the stack navigator library for React Navigation using npm or yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/hello-react-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/stack@^5.x\n```\n\n----------------------------------------\n\nTITLE: Example Navigation State in JavaScript for React Navigation\nDESCRIPTION: This snippet shows an example of a navigation state with two routes. It demonstrates how the index property is used to indicate the active route and how each route is structured with a key and routeName.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  index: 1,\n  routes: [\n    { key: 'A', routeName: 'Foo' },\n    { key: 'B', routeName: 'Bar' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using react-navigation-collapsible for collapsible headers\nDESCRIPTION: react-navigation-collapsible is a library and Higher Order Component that adjusts navigationOptions to make screen headers collapsible. It uses the Animated component to animate the header based on ScrollView or FlatList values.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/community-libraries-and-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[github.com/benevbright/react-navigation-collapsible](https://github.com/benevbright/react-navigation-collapsible)\n\n[Demo on Snack](https://snack.expo.io/@benevbright/react-navigation-collapsible)\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Prefix for Deep Linking in react-native init Project\nDESCRIPTION: This snippet shows how to set up the URI prefix for deep linking in a project initialized with react-native init. It uses a hardcoded prefix string.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/deep-linking.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleApp = StackNavigator({...}));\n\nconst prefix = 'example://';\n\nconst MainApp = () => <SimpleApp uriPrefix={prefix} />;\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-pager-view with npm - Bash\nDESCRIPTION: Installs the react-native-pager-view package directly via npm, required for supporting the Tab View component on iOS and Android platforms. Run this command in the root of a React Native project that is not using Expo. No additional parameters are necessary.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/tab-view.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-pager-view\n```\n\n----------------------------------------\n\nTITLE: Using TransitionSpecs in React Navigation Stack\nDESCRIPTION: Example showing how to configure iOS-style transition specifications for stack navigation screen animations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/stack-navigator.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TransitionSpecs } from '@react-navigation/stack';\n\n// ...\n\n<Stack.Screen\n  name=\"Profile\"\n  component={Profile}\n  options={{\n    transitionSpec: {\n      open: TransitionSpecs.TransitionIOSSpec,\n      close: TransitionSpecs.TransitionIOSSpec,\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Header Height with HeaderHeightContext in React Navigation\nDESCRIPTION: Example showing how to access the header height using HeaderHeightContext with React's Context API. This is useful when working with transparent headers to properly offset content.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeaderHeightContext } from 'react-navigation-stack';\n\n// ...\n\n<HeaderHeightContext.Consumer>\n  {headerHeight => (\n    /* render something */\n  )}\n</HeaderHeightContext.Consumer>\n```\n\n----------------------------------------\n\nTITLE: Providing Location Prop to ServerContainer (JS/JSX)\nDESCRIPTION: Demonstrates passing the `location` prop to the `ServerContainer` component. This prop should be an object containing `pathname` and `search` properties, mirroring the browser's location object, to set the initial navigation state for the server-rendered output.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/server-container.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<ServerContainer location={{ pathname: '/profile', search: '' }}>\n  <App />\n</ServerContainer>\n```\n\n----------------------------------------\n\nTITLE: Override Yarn Resolution\nDESCRIPTION: This configures yarn to override the version of react-native-safe-area-context.  It's used in yarn projects when multiple versions are installed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-safe-area-context\": \"<version you want to use>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Navigation Helpers\nDESCRIPTION: Command to install the react-navigation-redux-helpers package required for Redux integration\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/redux-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-redux-helpers\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Pager Component in createMaterialTopTabNavigator (JavaScript)\nDESCRIPTION: Shows how to replace the default pager component (which handles swipes and page switching) with a custom one. This example uses `ViewPagerAdapter` from `react-native-tab-view-viewpager-adapter` by passing it to the `pagerComponent` option within the `TabNavigatorConfig`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/material-top-tab-navigator.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport ViewPagerAdapter from 'react-native-tab-view-viewpager-adapter';\n\n// ...\n\nconst Tabs = createMaterialTopTabNavigator(\n  {\n    // routes\n  },\n  {\n    pagerComponent: ViewPagerAdapter,\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigator using createNavigator\nDESCRIPTION: Shows how to create a custom navigator using the createNavigator utility, combining a router and navigation view.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/custom-navigators.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createNavigator } from 'react-navigation';\n\nconst AppNavigator = createNavigator(NavigationView, router, navigationConfig);\n```\n\n----------------------------------------\n\nTITLE: Clearing Expo Metro Bundler Cache\nDESCRIPTION: Starts the Expo development server while clearing the Metro bundler cache. This is used to resolve 'Unable to resolve module' errors potentially caused by a stale cache in Expo projects.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo start -c\n```\n\n----------------------------------------\n\nTITLE: Navigation Stack History Example\nDESCRIPTION: Demonstrates the navigation stack history and how to navigate back to specific screens using keys.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-prop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_A });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_B });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_C });\nnavigation.navigate({ routeName: SCREEN, key: SCREEN_KEY_D });\n```\n\n----------------------------------------\n\nTITLE: Processing the Deep Link URL Manually (JavaScript)\nDESCRIPTION: Implements a method to extract the path and parameters from the incoming URL using a regular expression and use it for navigation actions. Typically called from an event handler subscribed to the 'url' event. Intended for use when deep linking is handled manually.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nhandleDeepLink(e) {\n    const route = e.url.replace(/.*?:\\/\\//g, '')\n    // use route to navigate\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing data fetching with useFocusEffect (Dynamic)\nDESCRIPTION: This test verifies that data is fetched and displayed correctly in the Pokemon info screen after it gains focus, using a dynamic navigation setup.  It mocks the API call using MSW, navigates to the Pokemon screen, waits for the loading state, and asserts that the data is displayed.  It then navigates back to the Home screen and back to the Pokemon screen to verify cached data is displayed without showing loading state again.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/testing.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport './msw-node';\n\nimport { expect, jest, test } from '@jest/globals';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('loads data on Pokemon info screen after focus', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n\n  const homeTabButton = screen.getByLabelText('Home, tab, 1 of 2');\n  const profileTabButton = screen.getByLabelText('Profile, tab, 2 of 2');\n\n  await user.press(profileTabButton);\n\n  expect(screen.getByText('Loading...')).toBeVisible();\n\n  await act(() => jest.runAllTimers());\n\n  expect(screen.getByText('ditto')).toBeVisible();\n\n  await user.press(homeTabButton);\n\n  await act(() => jest.runAllTimers());\n\n  await user.press(profileTabButton);\n\n  expect(screen.queryByText('Loading...')).not.toBeVisible();\n  expect(screen.getByText('ditto')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Clipping Inactive Views with ResourceSavingView (JavaScript)\nDESCRIPTION: Demonstrates use of ResourceSavingView for optimizing performance by removing clipped subviews when not visible. The visible prop toggles whether child content is rendered. Requires react-navigation elements and React Native. Inputs include a boolean-like visible prop; outputs content (or not) as per clipped state.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/elements.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n<ResourceSavingView visible={0}>{/* Content */}</ResourceSavingView>\n```\n\n----------------------------------------\n\nTITLE: Deploying React Navigation Documentation with SSH\nDESCRIPTION: Command for deploying the React Navigation documentation website. This should be run by repository collaborators from the main branch after ensuring the latest translations are downloaded.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGIT_USER=<Your GitHub username> \\\nCURRENT_BRANCH=main \\\nUSE_SSH=true \\\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with Yarn (Bash)\nDESCRIPTION: These commands remove the `node_modules` directory and the `yarn.lock` file, then reinstall all project dependencies using yarn. This serves the same purpose as the npm equivalent for projects using yarn.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm yarn.lock\nyarn\n```\n\n----------------------------------------\n\nTITLE: Custom Drawer Content Implementation\nDESCRIPTION: Example of implementing custom drawer content with additional navigation items\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/drawer-navigator.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Help\"\n        onPress={() => Linking.openURL('https://mywebsite.com/help')}\n      />\n    </DrawerContentScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring RCTLinkingIOS Subspec in Podfile for Hybrid iOS Apps (Ruby)\nDESCRIPTION: Demonstrates how to explicitly include the `RCTLinkingIOS` subspec within the `React` pod definition in the `Podfile`. This is necessary for deep linking to function correctly in hybrid iOS applications containing both native and React Native code.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/deep-linking.md#2025-04-23_snippet_8\n\nLANGUAGE: pod\nCODE:\n```\n pod 'React', :path => '../node_modules/react-native', :subspecs => [\n    . . . // other subspecs\n    'RCTLinkingIOS',\n    . . . \n  ]\n```\n\n----------------------------------------\n\nTITLE: Running Tests - React Navigation (Bash)\nDESCRIPTION: This snippet runs the test suite using Jest via Yarn and is required to pass before merging any contributions. Make sure all dependencies are installed and in the React Navigation directory. Running 'yarn test' outputs test results to the terminal, including any unit or integration failures.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Press Events and Preventing Default Behavior (JavaScript/React Native)\nDESCRIPTION: Shows how to use the `onTabPress` prop on the TabBar component to execute custom logic when a tab is pressed. It receives the `route` and a `preventDefault` function. The example demonstrates checking the pressed `route.key` and calling `preventDefault()` to stop the default tab switching behavior, allowing for alternative actions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/tab-view.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<TabBar\n  onTabPress={({ route, preventDefault }) => {\n    if (route.key === 'home') {\n      preventDefault();\n\n      // Do something else\n    }\n  }}\n  ...\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating gesture-handler.native.js for Native Import\nDESCRIPTION: Creates a file named `gesture-handler.native.js` which imports `react-native-gesture-handler`. This file is part of a conditional import setup to ensure the gesture handler library is only included in native builds (iOS/Android), optimizing web bundle size. This import initializes the gesture handler system.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/drawer-layout.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Only import react-native-gesture-handler on native platforms\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fluid Transitions usage in React Navigation\nDESCRIPTION: Fluid Transitions is a library that provides Shared Element Transitions during navigation between screens using react-navigation. It implements a custom navigator called FluidNavigator to enable these transitions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/community-libraries-and-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[github.com/fram-x/FluidTransitions](https://github.com/fram-x/FluidTransitions)\n```\n\n----------------------------------------\n\nTITLE: Import Android Bundle\nDESCRIPTION: This Java code snippet demonstrates how to import the Bundle class from the android.os package in the MainActivity.java file. This is required when overriding onCreate.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport android.os.Bundle;\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Example App Setup\nDESCRIPTION: Commands to troubleshoot and start fresh when running into issues with the example app setup.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwatchman watch-del-all\nyarn start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Minimal Babel Config for Expo Projects - JavaScript\nDESCRIPTION: This Babel configuration is tailored for Expo React Native projects, specifying only the 'babel-preset-expo' preset. This avoids configuration-induced runtime errors and ensures correct transformation of modern JavaScript features. Place the snippet in a 'babel.config.js' file at the project root. No other plugins or presets should be added unless explicitly needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  presets: ['babel-preset-expo'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing react-navigation-stack v1.x using npm\nDESCRIPTION: Installs version 1.10.3 or compatible minor/patch updates of the `react-navigation-stack` package using npm. This package is a prerequisite for using `createStackNavigator` in React Navigation 1.x.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/stack-navigator-1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-stack@^1.10.3\n```\n\n----------------------------------------\n\nTITLE: Run React Native App on iOS or Android (Bash)\nDESCRIPTION: Builds and installs the app on the selected platform using the react-native CLI. These commands compile the native code and deploy the app to an emulator or connected device. Useful after configuration changes to native files such as AppDelegate.m or AndroidManifest.xml.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/deep-linking.md#2025-04-23_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nreact-native run-ios\n```\n\nLANGUAGE: Bash\nCODE:\n```\nreact-native run-android\n```\n\n----------------------------------------\n\nTITLE: Executing Jest Test Suite in React Navigation Project using Bash\nDESCRIPTION: Runs the project's complete test suite using Jest via a Yarn script. This command executes all defined tests to ensure code changes haven't introduced regressions and that functionality behaves as expected. Passing these tests is required for contributions.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Header Title in React Navigation\nDESCRIPTION: This example shows how to set a static header title in the dynamic navigation configuration style. The title 'My home' is set for the Home screen using the options prop.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/headers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'My home',\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Screen using Children Render Props\nDESCRIPTION: Example of using the children render prop pattern to render a screen component with additional props, though React context is recommended instead.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-5.x/screen.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack.Screen name=\"Profile\">\n  {(props) => <ProfileScreen {...props} />}\n</Stack.Screen>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route Name - Dynamic Component - JavaScript\nDESCRIPTION: Defines the initial route for a stack navigator via the 'initialRouteName' prop on the <Stack.Navigator> component. The navigator renders the 'Home' screen on first load. Dependencies include react, the stack creator, and at least the specified screen components.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/navigator.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Stack = createNativeStackNavigator();\\n\\nfunction MyStack() {\\n  return (\\n    <Stack.Navigator\\n      // highlight-next-line\\n      initialRouteName=\"Home\"\\n    >\\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\\n    </Stack.Navigator>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SimpleApp Navigator with Screen Props\nDESCRIPTION: Demonstrates how to pass screen props to a SimpleApp navigator component.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/navigation-options.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<SimpleApp\n  screenProps={{ tintColor: 'blue' }}\n  // navigation={{state, dispatch}} // optionally control the app\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Routes in React Navigation\nDESCRIPTION: Demonstrates how to statically define routes for different navigators in React Navigation. This example includes a drawer navigator for the main app, a stack navigator for authentication, and a switch navigator to combine them.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/limitations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst FriendsNavigator = createDrawerNavigator({\n  Feed: FeedScreen,\n  FriendList: FriendListScreen,\n});\n\nconst AuthNavigator = createStackNavigator({\n  SignIn: SignInScreen,\n  ForgotPassword: ForgotPasswordScreen,\n});\n\nconst AppNavigator = createSwitchNavigator({\n  App: FriendsNavigator,\n  Auth: AuthNavigator,\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default class MyApp extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clean npm Dependencies\nDESCRIPTION: These commands remove the `node_modules` folder and `package-lock.json` file, then reinstall dependencies using `npm`. This resolves potential corruption issues.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/troubleshooting.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm package-lock.json\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Consistency\nDESCRIPTION: Command to run ESLint on the project to ensure code consistency and style adherence.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run eslint\n```\n\n----------------------------------------\n\nTITLE: Disabling React Navigation Header Globally in StackNavigator (JavaScript)\nDESCRIPTION: Illustrates how to disable the header for all screens within a stack navigator by passing `{ headerMode: 'none' }` as the second argument (navigator config) to `createStackNavigator`. This approach removes the header across the entire stack, useful when a custom header is implemented globally or not needed.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/community-libraries-and-navigators.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst Home = createStackNavigator(\n  {\n    ExampleScreen1,\n    ExampleScreen1,\n  },\n  {\n    headerMode: 'none',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Router State Example for Route Name Mapping (JavaScript)\nDESCRIPTION: This code snippet provides an example router state object with an index and routes array, highlighting how routeName and key properties are configured in the context of route-to-component mapping. The snippet is used for implementing getComponentForRouteName to correctly link state routes to their respective components. It expects standard JavaScript object formatting and compliance with React Navigation state conventions. Inputs are routeName strings, and output is the matching React component assigned by the router.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/custom-routers.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  index: 1,\n  routes: [\n    { key: 'A', routeName: 'Foo' },\n    { key: 'B', routeName: 'Bar' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Header Title Component in React Navigation\nDESCRIPTION: Shows how to replace the default header title with a custom component, such as an image logo.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/headers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass LogoTitle extends React.Component {\n  render() {\n    return (\n      <Image\n        source={require('./spiro.png')}\n        style={{ width: 30, height: 30 }}\n      />\n    );\n  }\n}\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = {\n    // headerTitle instead of title\n    headerTitle: <LogoTitle />,\n  };\n\n  /* render function, etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Navigation Options in Nested Navigator\nDESCRIPTION: Example showing incorrect way of setting tab bar labels from screens inside stack navigators, which won't work because navigation options can only be modified from immediate child screens.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigation-options-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Home!',\n  };\n\n  // etc..\n}\n\nclass B extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Settings!',\n  };\n\n  // etc..\n}\n\nconst HomeStack = createStackNavigator({ A });\nconst SettingsStack = createStackNavigator({ B });\n\nexport default createBottomTabNavigator({\n  HomeStack,\n  SettingsStack,\n});\n```\n\n----------------------------------------\n\nTITLE: Linting the Project - React Navigation (Bash)\nDESCRIPTION: This code snippet checks the codebase for linting errors using ESLint via Yarn. Running 'yarn lint' validates code style and formatting, with errors requiring manual fixes or can be auto-fixed with 'yarn lint --fix'. Prerequisite: Yarn dependencies must be installed. Outputs are lint results printed in the terminal.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running the Example App\nDESCRIPTION: Steps to install dependencies and start the NavigationPlayground example app using Expo.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-1.x/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\ncd examples/NavigationPlayground\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Check in Watch Mode using Bash\nDESCRIPTION: Executes the TypeScript compiler (tsc) via Yarn in watch mode. This command continuously monitors files for changes and reruns the type checking process automatically, providing instant feedback during development.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript --watch\n```\n\n----------------------------------------\n\nTITLE: MainActivity.kt: Override onCreate (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to override the onCreate method in MainActivity.kt to avoid crashes related to View state being not persisted consistently across Activity restarts on Android.  This modification is required by `react-native-screens`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-7.x/getting-started.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity: ReactActivity() {\n  // ...\n  // highlight-start\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(null)\n  }\n  // highlight-end\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching jumpTo Action in React Navigation\nDESCRIPTION: This snippet demonstrates how to import SwitchActions from react-navigation and dispatch a jumpTo action to navigate to a specific route in a switch navigator. The routeName parameter specifies the target route.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/switch-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SwitchActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(SwitchActions.jumpTo({ routeName }));\n```\n\n----------------------------------------\n\nTITLE: Header Integration in Stack Navigator\nDESCRIPTION: Example demonstrating how to integrate the Header component within a Stack Navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/elements.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Header, getHeaderTitle } from '@react-navigation/elements';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        header: ({ options, route }) => (\n          <Header {...options} title={getHeaderTitle(options, route.name)} />\n        ),\n      }}\n    >\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Route Parameters\nDESCRIPTION: Shows how to provide default parameters inside route definitions for screen components in the navigator configuration.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/blog/2018-11-17-react-navigation-3.0.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Store = createStackNavigator({\n  Playstation: { screen: ProductScreen, params: { product: 'Playstation' } },\n  Xbox: { screen: ProductScreen, params: { product: 'Xbox' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @react-navigation/material-top-tabs 6.x\nDESCRIPTION: Command to install the 6.x version of @react-navigation/material-top-tabs package along with react-native-tab-view.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-6.x/upgrading-from-5.x.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-navigation/material-top-tabs@^6.x react-native-tab-view\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build the documentation after making changes to the 'docs' directory. This step is necessary before the changes are reflected on the website.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build-docs\n```\n\n----------------------------------------\n\nTITLE: Using Props Mapper Example\nDESCRIPTION: Demonstrates the difference between standard React Navigation prop access and using react-navigation-props-mapper HOC for cleaner prop access.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/community-libraries-and-navigators.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst user = this.props.navigation.getParam(activeUser, null)\nconst user = this.props.activeUser\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice for createTabNavigator in React Navigation\nDESCRIPTION: This markdown snippet informs users that createTabNavigator has been removed in React Navigation version 3.x and suggests alternative functions to use instead.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-3.x/tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Note: `createTabNavigator` is removed in `react-navigation@3.x`. Please use `createBottomTabNavigator` and/or `createMaterialTopTabNavigator` instead.\n```\n\n----------------------------------------\n\nTITLE: Example Navigation State Structure\nDESCRIPTION: Sample navigation state object showing the structure with index and routes array containing route configurations.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/transitioner.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n   // Index refers to the active child route in the routes array.\n  index: 1,\n  routes: [\n    { key: 'DF2FGWGAS-12', routeName: 'ContactHome' },\n    { key: 'DF2FGWGAS-13', routeName: 'ContactDetail', params: { personId: 123 } }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-navigation-tabs using npm\nDESCRIPTION: Shows the command to install the `react-navigation-tabs` package using npm. This package provides the necessary components and functions for implementing bottom tab navigation in React Navigation 4.x. It is a prerequisite for using `createBottomTabNavigator`.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-4.x/bottom-tab-navigator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-navigation-tabs\n```\n\n----------------------------------------\n\nTITLE: Navigating to the same route multiple times in React Navigation\nDESCRIPTION: This code shows how to navigate to the same route multiple times using the push method, which adds a new instance of the route to the navigation stack.\nSOURCE: https://github.com/react-navigation/react-navigation.github.io/blob/main/versioned_docs/version-2.x/navigating.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() => this.props.navigation.push('Details')}\n        />\n      </View>\n    );\n  }\n}\n```"
  }
]