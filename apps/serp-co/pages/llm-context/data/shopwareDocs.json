[
  {
    "owner": "shopware",
    "repo": "docs",
    "content": "TITLE: Defining an Entity Class with Attributes in Shopware 6\nDESCRIPTION: A comprehensive example of a Shopware 6 entity class using PHP 8 attributes to define all properties, relationships, and field types. The class demonstrates primary keys, various data types, translations, foreign keys, and relationship definitions including one-to-one, one-to-many, and many-to-many associations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Checkout\\Order\\OrderEntity;\nuse Shopware\\Core\\Checkout\\Order\\OrderStates;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\AutoIncrement;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ForeignKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ManyToMany;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ManyToOne;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\OnDelete;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\OneToMany;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\OneToOne;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Serialized;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\State;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Translations;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityCustomFieldsTrait;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\PriceField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceFieldSerializer;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldType\\DateInterval;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Pricing\\PriceCollection;\nuse Shopware\\Core\\Framework\\Struct\\ArrayEntity;\nuse Shopware\\Core\\System\\Currency\\CurrencyEntity;\nuse Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateEntity;\n\n#[EntityAttribute('example_entity', since: '6.6.3.0', collectionClass: ExampleEntityCollection::class)]\nclass ExampleEntity extends Entity\n{\n    use EntityCustomFieldsTrait;\n\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n\n    #[Field(type: FieldType::STRING)]\n    public string $string;\n\n    #[Field(type: FieldType::TEXT)]\n    public ?string $text = null;\n\n    #[Field(type: FieldType::INT)]\n    public ?int $int;\n\n    #[Field(type: FieldType::FLOAT)]\n    public ?float $float;\n\n    #[Field(type: FieldType::BOOL)]\n    public ?bool $bool;\n\n    #[Field(type: FieldType::DATETIME)]\n    public ?\\DateTimeImmutable $datetime = null;\n\n    #[AutoIncrement]\n    public int $autoIncrement;\n\n    /**\n     * @var array<string, mixed>|null\n     */\n    #[Field(type: FieldType::JSON)]\n    public ?array $json = null;\n\n    #[Field(type: FieldType::DATE)]\n    public ?\\DateTimeImmutable $date = null;\n\n    #[Field(type: FieldType::DATE_INTERVAL)]\n    public ?DateInterval $dateInterval = null;\n\n    #[Field(type: FieldType::TIME_ZONE)]\n    public ?string $timeZone = null;\n\n    #[Serialized(serializer: PriceFieldSerializer::class, api: true)]\n    public ?PriceCollection $serialized = null;\n\n    #[Field(type: PriceField::class)]\n    public ?PriceCollection $price = null;\n\n    #[Required]\n    #[Field(type: FieldType::STRING, translated: true)]\n    public string $transString;\n\n    #[Field(type: FieldType::TEXT, translated: true)]\n    public ?string $transText = null;\n\n    #[Field(type: FieldType::INT, translated: true)]\n    public ?int $transInt;\n\n    #[Field(type: FieldType::FLOAT, translated: true)]\n    public ?float $transFloat;\n\n    #[Field(type: FieldType::BOOL, translated: true)]\n    public ?bool $transBool;\n\n    #[Field(type: FieldType::DATETIME, translated: true)]\n    public ?\\DateTimeImmutable $transDatetime = null;\n\n    /**\n     * @var array<string, mixed>|null\n     */\n    #[Field(type: FieldType::JSON, translated: true)]\n    public ?array $transJson = null;\n\n    #[Field(type: FieldType::DATE, translated: true)]\n    public ?\\DateTimeImmutable $transDate = null;\n\n    #[Field(type: FieldType::DATE_INTERVAL, translated: true)]\n    public ?DateInterval $transDateInterval = null;\n\n    #[Field(type: FieldType::TIME_ZONE, translated: true)]\n    public ?string $transTimeZone = null;\n\n    #[Field(type: FieldType::STRING, translated: true, column: 'another_column_name')]\n    public ?string $differentName = null;\n\n    #[ForeignKey(entity: 'currency')]\n    public ?string $currencyId = null;\n\n    #[State(machine: OrderStates::STATE_MACHINE)]\n    public ?string $stateId = null;\n\n    #[ForeignKey(entity: 'currency')]\n    public ?string $followId = null;\n\n    #[ManyToOne(entity: 'currency', onDelete: OnDelete::RESTRICT)]\n    public ?CurrencyEntity $currency = null;\n\n    #[OneToOne(entity: 'currency', onDelete: OnDelete::SET_NULL)]\n    public ?CurrencyEntity $follow = null;\n\n    #[ManyToOne(entity: 'state_machine_state')]\n    public ?StateMachineStateEntity $state = null;\n\n    /**\n     * @var array<string, AttributeEntityAgg>|null\n     */\n    #[OneToMany(entity: 'attribute_entity_agg', ref: 'attribute_entity_id', onDelete: OnDelete::CASCADE)]\n    public ?array $aggs = null;\n\n    /**\n     * @var array<string, CurrencyEntity>|null\n     */\n    #[ManyToMany(entity: 'currency', onDelete: OnDelete::CASCADE)]\n    public ?array $currencies = null;\n\n    /**\n     * @var array<string, OrderEntity>\n     */\n    #[ManyToMany(entity: 'order', onDelete: OnDelete::CASCADE)]\n    public ?array $orders = null;\n\n    /**\n     * @var array<string, ArrayEntity>|null\n     */\n    #[Translations]\n    public ?array $translations = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Services in XML\nDESCRIPTION: XML configuration for registering the ExampleRoute and ExampleController services with their dependencies in the Symfony container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRoute\" >\n            <argument type=\"service\" id=\"swag_example.repository\"/>\n        </service>\n    \n        <service id=\"Swag\\BasicExample\\Storefront\\Controller\\ExampleController\" >\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRoute\"/>\n            <call method=\"setContainer\">\n                <argument type=\"service\" id=\"service_container\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI with Homebrew\nDESCRIPTION: Command to install Shopware CLI using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install shopware/tap/shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Invalid Update on Mapping Entity in Shopware 6\nDESCRIPTION: This example illustrates why updating mapping entities directly fails in Shopware 6. Since all fields in a mapping entity are part of its primary key, they cannot be updated directly. This serves as a warning about improper usage patterns.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    // This is the product_category.repository service\n    $this->productCategoryRepository->update([\n        [\n            'productId' => 'myOldProductId',\n            'categoryId' => 'myNewCategoryId'\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Products with Predefined UUID\nDESCRIPTION: Example of creating a product with a predefined UUID and associated category in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(): void\n{\n    $context = Context::createDefaultContext();\n\n    $productId = Uuid::randomHex();\n\n    $this->productRepository->create([\n        [\n            'id' => $productId,\n            'name' => 'Example product',\n            'productNumber' => 'SW127',\n            'stock' => 10,\n            'tax' => $this->getTaxId($context),\n            'price' => [['currencyId' => Defaults::CURRENCY, 'gross' => 50, 'net' => 25, 'linked' => false]],\n            'categories' => [\n                [\n                    'id' => Uuid::randomHex(),\n                    'name' => 'Example category'\n                ]\n            ]\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Entities in Shopware 6\nDESCRIPTION: This snippet shows how to create a tax entity at the same time as creating a product. Instead of providing a taxId, the code provides the full tax entity data in the tax field, which causes a new tax entity to be created and associated with the product.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $this->productRepository->create([\n        [\n            'name' => 'Example product',\n            'productNumber' => 'SW123',\n            'stock' => 10,\n            'tax' => ['name' => 'test', 'taxRate' => 15],\n            'price' => [['currencyId' => Defaults::CURRENCY, 'gross' => 50, 'net' => 25, 'linked' => false]],\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntityRepository in a Service with Constructor Injection in PHP\nDESCRIPTION: Demonstrates how to inject an EntityRepository into a service constructor to access the Data Abstraction Layer (DAL) for database operations.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/data-abstraction-layer.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Service/DalExampleService.php\npublic function __construct (EntityRepository $productRepository)\n{\n    $this->productRepository = $productRepository;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ManyToOne Association in Shopware Component\nDESCRIPTION: This snippet shows how to set a ManyToOne association in a Shopware component. It demonstrates fetching a product, setting its manufacturer ID, and saving the changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined,\n        };\n    },\n\n    computed: {\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        manufacturerRepository() {\n            return this.repositoryFactory.create('product_manufacturer');\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get('some-product-id', Shopware.Context.api)\n            .then((product) => {\n                this.product = product;\n\n                this.product.manufacturerId = 'some-manufacturer-id'; // manually set the foreign key y\n\n                this.productRepository.save(this.product, Shopware.Context.api);\n            });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Product Stock in Shopware using PHP\nDESCRIPTION: This snippet shows how to update a product's stock level in Shopware. It creates a service class that uses the product repository to update the stock value for a specific product ID through the repository's update method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/reading-writing-stock.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Swag/Example/ServiceReadingData.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\Example\\Service;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\n\nclass WritingStock\n{\n    private EntityRepository $productRepository;\n\n    public function __construct(EntityRepository $productRepository)\n    {\n        $this->productRepository = $productRepository;\n    }\n    \n    public function write(string $productId, int $stock, Context $context): void\n    {\n        $this->productRepository->update(\n            [\n                [\n                    'id' => $productId,\n                    'stock' => $stock\n                ]\n            ],\n            $context\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Configuration XML in Shopware 6\nDESCRIPTION: This XML file defines a minimal plugin configuration with a simple input field named 'example'. It uses the Shopware 6 configuration schema to create a card with a title and an input field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/use-plugin-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/config.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/SystemConfig/Schema/config.xsd\">\n\n    <card>\n        <title>Minimal configuration</title>\n        <input-field>\n            <name>example</name>\n        </input-field>\n    </card>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entities Schema in Shopware XML\nDESCRIPTION: Complete XML schema definition for custom entities in Shopware, showing various field types (scalar, json, email, price), relationships (many-to-many, one-to-many, many-to-one, one-to-one), and cascade behaviors. Includes translatable fields, store API awareness, and inheritance configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/entities-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<entities xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/CustomEntity/Xml/entity-1.0.xsd\">\n    <entity name=\"custom_entity_blog\">\n        <fields>\n            <!-- we support different scalar values: int, float, string, text, bool, date -->\n            <int name=\"position\" store-api-aware=\"true\" />\n            <float name=\"rating\" store-api-aware=\"true\" />\n            <string name=\"title\" required=\"true\" translatable=\"true\" store-api-aware=\"true\" />\n            <text name=\"content\" allow-html=\"true\" translatable=\"true\" store-api-aware=\"true\" />\n            <bool name=\"display\" translatable=\"true\" store-api-aware=\"true\" />\n            <date name=\"my_date\" store-api-aware=\"false\" />\n\n            <!-- additionally, to the scalar values, we have support for json fields  -->\n            <json name=\"payload\" store-api-aware=\"false\" />\n            \n            <!-- beside the generic fields, we support different logical fields like email and price -->\n            <email name=\"email\"  store-api-aware=\"false\" />\n            <price name=\"price\" store-api-aware=\"false\" />\n            \n            <!--   each field also supports having a default value. This is only supported for scalar types -->\n            <bool name=\"in_stock\" store-api-aware=\"true\" default=\"true\" />\n\n            <!-- you may want to define that some fields should not be available in the store-api -->\n            <text name=\"internal_comment\" store-api-aware=\"false\" />\n\n            <!-- you can also define relation between entities -->\n            <many-to-many name=\"products\" reference=\"product\" store-api-aware=\"true\" />\n\n            <!-- it is also possible to cascading relations between you own custom entities. In this case, we delete all ce_blog_comment records, when the linked custom_entity_blog record deleted -->\n            <one-to-many name=\"comments\" reference=\"ce_blog_comment\" store-api-aware=\"true\" on-delete=\"cascade\" reverse-required=\"true\" />\n            \n            <!-- There are many other cascade cases which we support -->\n\n            <!-- Restrict product deletion when the product is set as `top_seller` -->\n            <many-to-one name=\"top_seller_restrict\" reference=\"product\" store-api-aware=\"true\" required=\"false\" on-delete=\"restrict\" />\n                <!-- This definition, generates a fk field automatically inside the product table -->\n\n            <!-- when product deleted, delete all custom_entity_blog records where the product is defined as `top_seller_cascade`-->\n            <many-to-one name=\"top_seller_cascade\" reference=\"product\" store-api-aware=\"true\" required=\"true\" on-delete=\"cascade\" />\n\n            <!-- when product deleted, set the `top_seller_set_null` column to null -->\n            <many-to-one name=\"top_seller_set_null\" reference=\"product\" store-api-aware=\"true\" on-delete=\"set-null\" />\n\n            <!-- restrict product deletion when the product is set as `link_product_restrict`-->\n            <one-to-one name=\"link_product_restrict\" reference=\"product\" store-api-aware=\"false\" on-delete=\"restrict\" />\n\n            <!-- when product deleted, delete all custom_entity_blog records where the product is defined as `link_product_cascade`-->\n            <one-to-one name=\"link_product_cascade\" reference=\"product\" store-api-aware=\"false\" on-delete=\"cascade\" />\n\n            <!-- when product deleted, set the `link_product_set_null_id` column to null -->\n            <one-to-one name=\"link_product_set_null\" reference=\"product\" store-api-aware=\"false\" on-delete=\"set-null\" />\n\n            <!-- restrict custom_entity_blog deletion, when the blog is linked in some category -->\n            <one-to-many name=\"links_restrict\" reference=\"category\" store-api-aware=\"true\" on-delete=\"restrict\" />\n\n            <!-- set custom_entity_blog_links_id to null, when the custom_entity_blog record deleted -->\n            <one-to-many name=\"links_set_null\" reference=\"category\" store-api-aware=\"true\" on-delete=\"set-null\" />\n\n            <!-- we also support inheritance for product relations  -->\n            <many-to-many name=\"inherited_products\" reference=\"product\" store-api-aware=\"true\" inherited=\"true\"/>\n            <many-to-one name=\"inherited_top_seller\" reference=\"product\" store-api-aware=\"true\" required=\"false\" inherited=\"true\" on-delete=\"set-null\"/>\n            <one-to-one name=\"inherited_link_product\" reference=\"product\" store-api-aware=\"true\" inherited=\"true\" on-delete=\"set-null\" />\n        </fields>\n    </entity>\n\n    <!-- since shopware v6.5.15.0 you can use the `ce_` shorthand prefix, to make your entity names shorter -->\n    <entity name=\"ce_blog_comment\">\n        <fields>\n            <string name=\"title\" required=\"true\" translatable=\"true\" store-api-aware=\"true\" />\n            <!-- <fk name=\"ce_blog_comments_id\" required=\"true\"   <<< defined over the one-to-many association in the custom_entity_blog definition -->\n            <text name=\"content\" allow-html=\"true\" translatable=\"true\" store-api-aware=\"true\" />\n            <email name=\"email\"  store-api-aware=\"false\" />\n            <many-to-one name=\"recommendation\" reference=\"product\" store-api-aware=\"true\" required=\"false\" on-delete=\"set-null\" />\n        </fields>\n    </entity>\n</entities>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Payment Handler in Symfony DI Container\nDESCRIPTION: XML configuration to register the custom ExampleDebitPayment service in the Symfony Dependency Injection container, decorating the original DebitPayment handler.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/customize-payment-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ExampleDebitPayment\" decorates=\"Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment\">\n            <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler\"/>\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Service\\ExampleDebitPayment.inner\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Flow Action Class in PHP\nDESCRIPTION: This code implements a CreateTagAction that extends FlowAction, providing tag creation functionality. It handles the flow configuration, retrieves tag data, and creates new tags in the repository.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Flow/Dispatching/Action/CreateTagAction.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\CreateTagAction\\Core\\Content\\Flow\\Dispatching\\Action;\n\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\FlowAction;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\StorableFlow;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Swag\\CreateTagAction\\Core\\Framework\\Event\\TagAware;\n\nclass CreateTagAction extends FlowAction\n{\n    private EntityRepository $tagRepository;\n\n    public function __construct(EntityRepository $tagRepository)\n    {\n        // you would need this repository to create a tag\n        $this->tagRepository = $tagRepository;\n    }\n\n    public static function getName(): string\n    {\n        // your own action name\n        return 'action.create.tag';\n    }\n\n    public function requirements(): array\n    {\n        return [TagAware::class];\n    }\n\n    public function handleFlow(StorableFlow $flow): void\n    {\n        // config is the config data when created a flow sequence\n        $config = $flow->getConfig();\n\n        // make sure your tags data exists\n        if (!\\array_key_exists('tags', $config)) {\n            return;\n        }\n\n        $tags = $config['tags'];\n\n        // just a step to make sure you're dispatching correct action\n        if (!$flow->hasStore(TagAware::TAG_ID) || empty($tags)) {\n            return;\n        }\n\n        // get tag id\n        $tagId = $flow->getStore(TagAware::TAG_ID);\n\n        // get tag\n        $tag = $flow->getData(TagAware::TAG);\n\n        $tagData = [];\n        foreach ($tags as $tag) {\n            $tagData[] = [\n                'id' => Uuid::randomHex(),\n                'name' => $tag,\n            ];\n        }\n\n        // simply create tags\n        $this->tagRepository->create($tagData, $flow->getContext());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Reading in Shopware 6 (PHP)\nDESCRIPTION: PHP method to perform a basic data read operation using the product repository in Shopware 6. It demonstrates how to use the search method with a Criteria object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $products = $this->productRepository->search(new Criteria(), $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Event in Flow Builder with BusinessEventCollectorSubscriber\nDESCRIPTION: Creates a subscriber that registers the custom BasicExampleEvent with the Flow Builder's event collector, making it available in the trigger list.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nnamespace Swag\\CreateTagAction\\Core\\Content\\Subscriber;\n\nuse Shopware\\Core\\Framework\\Event\\BusinessEventCollector;\nuse Shopware\\Core\\Framework\\Event\\BusinessEventCollectorEvent;\nuse Swag\\CreateTagAction\\Core\\Content\\Event\\BasicExampleEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass BusinessEventCollectorSubscriber implements EventSubscriberInterface\n{\n    private BusinessEventCollector $businessEventCollector;\n\n    public function __construct(BusinessEventCollector $businessEventCollector)\n    {\n        $this->businessEventCollector = $businessEventCollector;\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            BusinessEventCollectorEvent::NAME => 'onAddExampleEvent',\n        ];\n    }\n\n    public function onAddExampleEvent(BusinessEventCollectorEvent $event): void\n    {\n        $collection = $event->getCollection();\n\n        $definition = $this->businessEventCollector->define(BasicExampleEvent::class);\n\n        if (!$definition) {\n            return;\n        }\n\n        $collection->set($definition->getName(), $definition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Entity Extension in Shopware\nDESCRIPTION: Implementation of a basic EntityExtension class to extend the ProductDefinition. This class serves as the foundation for adding new fields to existing entities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Extension/Content/Product/CustomExtension.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Extension\\Content\\Product;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityExtension;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass CustomExtension extends EntityExtension\n{\n    public function extendFields(FieldCollection $collection): void\n    {\n        $collection->add(\n            // new fields here\n        );\n    }\n\n    public function getDefinitionClass(): string\n    {\n        return ProductDefinition::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tax Provider Class in PHP\nDESCRIPTION: Demonstrates how to create a custom tax provider class by extending AbstractTaxProvider and implementing the provide method. This example applies a 50% tax rate to all cart items.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/tax-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Checkout\\Cart\\Tax;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\Checkout\\Cart\\Tax\\Struct\\CalculatedTax;\nuse Shopware\\Core\\Checkout\\Cart\\Tax\\Struct\\CalculatedTaxCollection;\nuse Shopware\\Core\\Checkout\\Cart\\TaxProvider\\AbstractTaxProvider;\nuse Shopware\\Core\\Checkout\\Cart\\TaxProvider\\Struct\\TaxProviderResult;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse TaxJar\\Client;\n\nclass TaxProvider extends AbstractTaxProvider\n{\n    public function provide(Cart $cart, SalesChannelContext $context): TaxProviderResult\n    {\n        $lineItemTaxes = [];\n    \n        foreach ($cart->getLineItems() as $lineItem) {\n            $taxRate = 50;\n            $price = $lineItem->getPrice()->getTotalPrice();\n            $tax = $price * $taxRate / 100;\n\n            $lineItemTaxes[$lineItem->getUniqueIdentifier()] = new CalculatedTaxCollection(\n                [\n                    new CalculatedTax($tax, $taxRate, $price),\n                ]\n            );\n        }\n        \n        return new TaxProviderResult(\n            $lineItemTaxes\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Admin Component in JavaScript\nDESCRIPTION: This snippet shows how to override the 'sw-product-settings-form' component in the main.js file of a Shopware 6 plugin. It imports a custom template and uses Shopware.Component.override to apply the changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-field.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './extension/sw-product-settings-form/sw-product-settings-form.html.twig';\n\nShopware.Component.override('sw-product-settings-form', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Associations in Shopware\nDESCRIPTION: Demonstrates how to define various types of associations (OneToOne, OneToMany, ManyToOne, ManyToMany) between entities in Shopware. Shows how to implement foreign keys and reference entities properly.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Examples\\AttributeEntityAgg;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ForeignKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ManyToMany;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ManyToOne;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\OneToMany;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\OneToOne;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\nuse Shopware\\Core\\System\\Currency\\CurrencyEntity;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n\n    #[ForeignKey(entity: 'currency')]\n    public ?string $currencyId = null;\n\n    #[ForeignKey(entity: 'currency')]\n    public ?string $followId = null;\n\n    #[ManyToOne(entity: 'currency')]\n    public ?CurrencyEntity $currency = null;\n\n    #[OneToOne(entity: 'currency')]\n    public ?CurrencyEntity $follow = null;\n\n    /**\n     * @var array<string, AttributeEntityAgg>|null\n     */\n    #[OneToMany(entity: 'example_entity_agg', ref: 'example_entity_id')]\n    public ?array $aggs = null;\n\n    /**\n     * @var array<string, CurrencyEntity>|null\n     */\n    #[ManyToMany(entity: 'currency')]\n    public ?array $currencies = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Association Filtering Comparison in Shopware 6\nDESCRIPTION: Illustrates the difference between filtering associations and filtering entities with associations, showing two different approaches.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    // This will always return the product with the given name, no matter if it has a review with 4 or more stars.\n    // But only matching reviews are added to the dataset then.\n    $criteria->getAssociation('productReviews')->addFilter(new RangeFilter('points', [\n        RangeFilter::GTE => 4\n    ]));\n    $product = $this->productRepository->search($criteria, $context)->first();\n\n    // This will only return products, whose name matches AND which have at least one rating of 4 stars or more\n    $criteria->addAssociation('productReviews');\n    $criteria->addFilter(new RangeFilter('productReviews.points', [\n        RangeFilter::GTE => 4\n    ]));\n    $product = $this->productRepository->search($criteria, $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Payment Handler in PHP for Shopware 6\nDESCRIPTION: This code snippet shows an asynchronous payment handler implementation in Shopware 6. It handles redirecting to an external payment provider, finalizing the payment process, and managing order transaction states.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Payment\\PaymentException;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\AsyncPaymentTransactionStruct;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\AsynchronousPaymentHandlerInterface;\nuse Shopware\\Core\\Checkout\\Payment\\Exception\\AsyncPaymentProcessException;\nuse Shopware\\Core\\Checkout\\Payment\\Exception\\CustomerCanceledAsyncPaymentException;\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ExamplePayment implements AsynchronousPaymentHandlerInterface\n{\n    private OrderTransactionStateHandler $transactionStateHandler;\n\n    public function __construct(OrderTransactionStateHandler $transactionStateHandler) {\n        $this->transactionStateHandler = $transactionStateHandler;\n    }\n\n    /**\n     * @throws AsyncPaymentProcessException\n     */\n    public function pay(AsyncPaymentTransactionStruct $transaction, RequestDataBag $dataBag, SalesChannelContext $salesChannelContext): RedirectResponse\n    {\n        // Method that sends the return URL to the external gateway and gets a redirect URL back\n        try {\n            $redirectUrl = $this->sendReturnUrlToExternalGateway($transaction->getReturnUrl());\n        } catch (\\Exception $e) {\n            throw PaymentException::asyncProcess(\n                $transaction->getOrderTransaction()->getId(),\n                'An error occurred during the communication with external payment gateway' . PHP_EOL . $e->getMessage()\n            );\n        }\n\n        // Redirect to external gateway\n        return new RedirectResponse($redirectUrl);\n    }\n\n    /**\n     * @throws CustomerCanceledAsyncPaymentException\n     */\n    public function finalize(AsyncPaymentTransactionStruct $transaction, Request $request, SalesChannelContext $salesChannelContext): void\n    {\n        $transactionId = $transaction->getOrderTransaction()->getId();\n\n        // Example check if the user canceled. Might differ for each payment provider\n        if ($request->query->getBoolean('cancel')) {\n            throw PaymentException::asyncCustomerCanceled(\n                $transactionId,\n                'Customer canceled the payment on the PayPal page'\n            );\n        }\n\n        // Example check for the actual status of the payment. Might differ for each payment provider\n        $paymentState = $request->query->getAlpha('status');\n\n        $context = $salesChannelContext->getContext();\n        if ($paymentState === 'completed') {\n            // Payment completed, set transaction status to \"paid\"\n            $this->transactionStateHandler->paid($transaction->getOrderTransaction()->getId(), $context);\n        } else {\n            // Payment not completed, set transaction status to \"open\"\n            $this->transactionStateHandler->reopen($transaction->getOrderTransaction()->getId(), $context);\n        }\n    }\n\n    private function sendReturnUrlToExternalGateway(string $getReturnUrl): string\n    {\n        $paymentProviderUrl = '';\n\n        // Do some API Call to your payment provider\n\n        return $paymentProviderUrl;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Migration Control in Plugin Lifecycle\nDESCRIPTION: Example showing how to take manual control of the migration process during plugin updates by disabling auto-migration and selectively executing migrations based on timestamps.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    public function update(UpdateContext $updateContext): void\n    {\n        $updateContext->setAutoMigrate(false); // disable auto migration execution\n\n        $migrationCollection = $updateContext->getMigrationCollection();\n\n        // execute all DESTRUCTIVE migrations until and including 2019-11-01T00:00:00+00:00\n        $migrationCollection->migrateDestructiveInPlace(1572566400);\n\n        // execute all UPDATE migrations until and including 2019-12-12T09:30:51+00:00\n        $migrationCollection->migrateInPlace(1576143014);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Entity Class in PHP\nDESCRIPTION: Entity class that represents a translation record with properties and methods for accessing translation data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-translations.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\Aggregate\\ExampleTranslation;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\TranslationEntity;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\n\nclass ExampleTranslationEntity extends TranslationEntity\n{\n    protected string $exampleId;\n\n    protected ?string $name;\n\n    protected ExampleEntity $example;\n\n    public function getExampleId(): string\n    {\n        return $this->exampleId;\n    }\n\n    public function setExampleId(string $exampleId): void\n    {\n        $this->exampleId = $exampleId;\n    }\n\n    public function getName(): ?string\n    {\n        return $this->name;\n    }\n\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n\n    public function getExample(): ExampleEntity\n    {\n        return $this->example;\n    }\n\n    public function setExample(ExampleEntity $example): void\n    {\n        $this->example = $example;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Absolute Discount to the Cart in Twig\nDESCRIPTION: This example shows how to create and add an absolute discount to the cart, checking for existing items and preventing duplicate discounts.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.items.count <= 0 %}\n    {% return %}\n{% endif %}\n\n{% if services.cart.items.has('my-discount') %}\n    {% return %}\n{% endif %}\n\n{% set price = services.cart.price.create({\n    'default': { 'gross': -19.99, 'net': -19.99}\n}) %}\n\n{% do services.cart.discount('my-discount', 'absolute', price, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing DeleteSubscriber in Shopware\nDESCRIPTION: A subscriber class that listens to EntityDeleteEvent for tracking entity deletions. It includes filtering for specific entity types and handling success/error scenarios.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-database-events.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeleteEvent;\nuse Shopware\\Core\\Content\\Cms\\CmsPageDefinition;\n\nclass DeleteSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            EntityDeleteEvent::class => 'beforeDelete',\n        ];\n    }\n\n    public function beforeDelete(EntityDeleteEvent $event)\n    {\n        //get the ids of any cms entities about to be deleted\n        //this event is triggered for batches of entities, so you can use this to filter for specific entities\n        $ids = $event->getIds(CmsPageDefinition::ENTITY_NAME);\n        \n        $event->addSuccess(function () use ($ids) {\n            //the entities have now been successfully deleted\n            \n            $this->cache->purge($ids);\n        });\n        \n        $event->addError(function () use ($ids) {\n            //the entities failed to delete, you can write a log, send an e-mail, or anything else.\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Module Configuration for Shopware 6 Administration\nDESCRIPTION: This code snippet provides a comprehensive example of a custom module configuration in Shopware 6. It includes route definitions, navigation setup, snippet imports, and module metadata such as name, title, description, and icon.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-module.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/swag-example/index.js\nimport './page/swag-example-list';\nimport './page/swag-example-detail';\nimport './page/swag-example-create';\nimport deDE from './snippet/de-DE';\nimport enGB from './snippet/en-GB';\n\nShopware.Module.register('swag-example', {\n    type: 'plugin',\n    name: 'Example',\n    title: 'swag-example.general.mainMenuItemGeneral',\n    description: 'sw-property.general.descriptionTextModule',\n    color: '#ff3d58',\n    icon: 'regular-shopping-bag',\n\n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routes: {\n        list: {\n            component: 'swag-example-list',\n            path: 'list'\n        },\n        detail: {\n            component: 'swag-example-detail',\n            path: 'detail/:id',\n            meta: {\n                parentPath: 'swag.example.list'\n            }\n        },\n        create: {\n            component: 'swag-example-create',\n            path: 'create',\n            meta: {\n                parentPath: 'swag.example.list'\n            }\n        }\n    },\n\n    navigation: [{\n        label: 'swag-example.general.mainMenuItemGeneral',\n        color: '#ff3d58',\n        path: 'swag.example.list',\n        icon: 'regular-shopping-bag',\n        position: 100\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Using ContextResolver to Parse Webhook Request in PHP\nDESCRIPTION: This snippet demonstrates how to use the ContextResolver to parse a webhook request in a Shopware app. It shows the setup of necessary services and the process of resolving the shop and assembling the webhook from the request.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/03-context.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app = new AppConfiguration('Foo', 'test', 'http://localhost:6001/register/callback');\n// for a repository to save stores implementing \\Shopware\\App\\SDK\\Shop\\ShopRepositoryInterface, see FileShopRepository as an example\n$repository = ...;\n\n// Create a psr 7 request or convert it (HttpFoundation Symfony)\n$psrRequest = ...;\n\n$registrationService = new \\Shopware\\App\\SDK\\Registration\\RegistrationService($app, $repository);\n$shopResolver = new \\Shopware\\App\\SDK\\Shop\\ShopResolver($repository);\n\n$contextResolver = new \\Shopware\\App\\SDK\\Context\\ContextResolver();\n\n// Find the actual shop by the request\n$shop = $shopResolver->resolveShop($psrRequest);\n\n// Parse the request as a webhook\n$webhook = $contextResolver->assembleWebhook($psrRequest, $shop);\n\n$webhook->eventName; // the event name\n$webhook->payload; // the event data\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Permissions in Shopware Admin\nDESCRIPTION: Example showing how to add review functionality permissions with CRUD operations, including dependencies and required privileges for viewer, editor, creator and deleter roles.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Service('privileges')\n    .addPrivilegeMappingEntry({\n        category: 'permissions',\n        parent: 'catalogues',\n        key: 'review',\n        roles: {\n            viewer: {\n                privileges: [\n                    'product_review:read',\n                    'customer:read',\n                    'product:read',\n                    'sales_channel:read'\n                ],\n                dependencies: []\n            },\n            editor: {\n                privileges: [\n                    'product_review:update'\n                ],\n                dependencies: [\n                    'review.viewer'\n                ]\n            },\n            creator: {\n                privileges: [\n                    'product_review:create'\n                ],\n                dependencies: [\n                    'review.viewer',\n                    'review.editor'\n                ]\n            },\n            deleter: {\n                privileges: [\n                    'product_review:delete'\n                ],\n                dependencies: [\n                    'review.viewer'\n                ]\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entity Class in Shopware 6 PHP\nDESCRIPTION: This snippet demonstrates how to create a custom entity class for Shopware 6. It extends the base Entity class and includes properties, getters, and setters for the entity's fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityIdTrait;\n\nclass ExampleEntity extends Entity\n{\n    use EntityIdTrait;\n\n    protected ?string $name;\n\n    protected ?string $description;\n\n    protected bool $active;\n\n    public function getName(): ?string\n    {\n        return $this->name;\n    }\n\n    public function setName(?string $name): void\n    {\n        $this->name = $name;\n    }\n\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    public function setDescription(?string $description): void\n    {\n        $this->description = $description;\n    }\n\n    public function isActive(): bool\n    {\n        return $this->active;\n    }\n\n    public function setActive(bool $active): void\n    {\n        $this->active = $active;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Local ManyToMany Associations in Shopware 6 Components\nDESCRIPTION: This code snippet demonstrates how to create and manage repositories based on associated data in a Shopware 6 component. It shows how to load a product, manage its prices, and perform CRUD operations on the associated price entities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined,\n            prices: undefined\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        priceRepository() {\n            if (!this.product) {\n                return undefined;\n            };\n\n            return this.repositoryFactory.create(\n                // `product_price`\n                this.product.prices.entity,\n                // `product/some-id/priceRules`\n                this.product.prices.source\n            );\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get('some-id', Shopware.Context.api)\n            .then(product => {\n                this.product = product;\n            });\n    },\n    methods: {\n        loadPrices() {\n            this.prices = this.product.prices;\n        },\n\n        addPrice() {\n            const newPrice = this.priceRepository\n                .create(Shopware.Context.api);\n\n            newPrice.quantityStart = 1;\n            // update some other fields\n\n            this.product.prices.add(newPrice);\n        },\n\n        savePrice() {\n            this.productRepository.save(this.product)\n        },\n\n        deletePrice(priceId) {\n            this.product.prices.remove(priceId);\n        },\n\n        updatePrice(price) {\n            // price entity is already updated and already assigned to product, no sources needed \n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Shopware Project with Composer\nDESCRIPTION: Commands to create a new Shopware project using Composer, either the latest version or a specific version.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project shopware/production <project-name>\n\n# or install a specific version\ncomposer create-project shopware/production:6.6.10.0 <project-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Products in Shopware 6\nDESCRIPTION: PHP methods for creating new products using the Data Abstraction Layer. Includes tax ID lookup and price structure setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $this->productRepository->create([\n        [\n            'name' => 'Example product',\n            'productNumber' => 'SW123',\n            'stock' => 10,\n            'taxId' => $this->getTaxId($context),\n            'price' => [['currencyId' => Defaults::CURRENCY, 'gross' => 50, 'net' => 25, 'linked' => false]],\n        ]\n    ], $context);\n}\n\nprivate function getTaxId(Context $context): string\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('taxRate', 19.00));\n\n    return $this->taxRepository->searchIds($criteria, $context)->firstId();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Async Message Class in PHP\nDESCRIPTION: Implements an asynchronous SMS notification message class that implements AsyncMessageInterface. The class stores and provides access to notification content.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-message-to-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\MessageQueue\\Message;\n\nuse Shopware\\Core\\Framework\\MessageQueue\\AsyncMessageInterface;\n\nclass SmsNotification implements AsyncMessageInterface\n{\n    private string $content;\n\n    public function __construct(string $content)\n    {\n        $this->content = $content;\n    }\n\n    public function getContent(): string\n    {\n        return $this->content;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Install Method in Shopware\nDESCRIPTION: Method executed when a plugin is installed. Used to install necessary requirements like payment methods. Has access to InstallContext which provides plugin version, Shopware version and system information.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/plugin-lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function install(InstallContext $installContext): void\n{\n    // Do stuff such as creating a new payment method\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit XML for Shopware 6 Plugins\nDESCRIPTION: Example PHPUnit configuration file (phpunit.xml) that configures test directories, coverage settings, and environment variables for Shopware 6 plugin testing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/php-unit.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"\n         bootstrap=\"tests/TestBootstrap.php\"\n         executionOrder=\"random\">\n    <coverage>\n        <include>\n            <directory>./src/</directory>\n        </include>\n    </coverage>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\"/>\n        <server name=\"KERNEL_CLASS\" value=\"Shopware\\Core\\Kernel\"/>\n        <env name=\"APP_ENV\" value=\"test\"/>\n        <env name=\"APP_DEBUG\" value=\"1\"/>\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"weak\"/>\n    </php>\n    <testsuites>\n        <testsuite name=\"migration\">\n            <directory>Migration/Test</directory>\n        </testsuite>\n    \n        <testsuite name=\"Example Testsuite\">\n            <directory>Test</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plugin PHP Class in Shopware 6\nDESCRIPTION: The minimal PHP class required for a Shopware 6 plugin. This class extends Shopware's Plugin class and serves as the entry point for the plugin functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-base-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/SwagBasicExample.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample;\n\nuse Shopware\\Core\\Framework\\Plugin;\n\nclass SwagBasicExample extends Plugin\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product with Multiple Associations in Shopware 6\nDESCRIPTION: This example demonstrates how to create a product while simultaneously creating or assigning multiple associated entities. It shows creating a tax entity and assigning or creating a category in a single operation, illustrating the handling of both ToOne and ToMany relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $this->productRepository->create([\n        [\n            'name' => 'Example product',\n            'productNumber' => 'SW127',\n            'stock' => 10,\n            'tax' => ['name' => 'test', 'taxRate' => 15],\n            'price' => [['currencyId' => Defaults::CURRENCY, 'gross' => 50, 'net' => 25, 'linked' => false]],\n            'categories' => [\n                [\n                    'id' => 'YourCategoryId',\n                    'name' => 'Example category'\n                ]\n            ]\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Repository Service in Vue Component\nDESCRIPTION: Shows how to inject and initialize the repository factory service in a Vue component to access Shopware's data handling capabilities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninject: [\n    'repositoryFactory'\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Middleware in Shopware 6 Administration\nDESCRIPTION: Example of registering a custom module that modifies the privileges of an existing product detail route using routeMiddleware. Changes the required privilege from 'product.viewer' to 'product.editor' while maintaining other route configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/overriding-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nModule.register('my-new-custom-route', {\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.product.detail') {\n\n            const childIndex = currentRoute.children.findIndex(child => child.name === 'sw.product.detail.base');\n\n            currentRoute.children[childIndex] = {\n                name: 'sw.product.detail.base',\n                component: 'sw-product-detail-base',\n                path: 'base',\n                meta: {\n                    parentPath: 'sw.product.index',\n                    privilege: 'product.editor'\n                }\n            }\n        }\n        next(currentRoute);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Component Override in Shopware 6.8\nDESCRIPTION: Example of component override using new *.override.vue pattern and Composition API\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n{# Notice the native block components #}\n<sw-block extends=\"sw-text-field\">\n   <sw-block-parent/>\n   \n   {{ helpText}}\n</sw-block>\n</template>\n\n<script setup>\n// Notice Composition API imports\nimport { defineProps } from 'vue';\n\n// This file would also use Shopware.Component.overrideComponentSetup\n// if it would change the existing public API\nconst props = defineProps({\n   helpText: {\n       type: String,\n       required: false,\n   },\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Filtered Associations using getAssociation in Shopware 6\nDESCRIPTION: Demonstrates how to apply filters to associations using getAssociation method, filtering product reviews by rating points.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n\n    $criteria->getAssociation('productReviews')->addFilter(new RangeFilter('points', [\n        RangeFilter::GTE => 4\n    ]));\n\n    $product = $this->productRepository->search($criteria, $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Basic Datepicker Input Field in Twig\nDESCRIPTION: This snippet shows how to create a basic input field with the datepicker functionality in a Shopware Twig template. It overrides the base_main_inner block and adds the necessary data attribute to activate the datepicker.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-the-datepicker-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n    <label>\n        <input type=\"text\"\n               name=\"customDate\"\n               class=\"customDate\"\n               data-date-picker\n        />\n    </label>\n\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Multi ID Select for Products in Shopware\nDESCRIPTION: Shows how to create a multiple product selection field using the sw-entity-multi-id-select component in the plugin configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<component name=\"sw-entity-multi-id-select\">\n    <name>exampleMultiProductIds</name>\n    <entity>product</entity>\n    <label>Choose multiple products IDs for the plugin configuration</label>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Services in Shopware 6\nDESCRIPTION: XML service configuration for injecting product and tax repositories into a custom service. Demonstrates dependency injection setup in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\WritingData\" >\n            <argument type=\"service\" id=\"product.repository\"/>\n            <argument type=\"service\" id=\"tax.repository\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Shopware Project with CLI\nDESCRIPTION: Commands to create a new Shopware project using Shopware CLI. It allows specifying a folder name and optionally a Shopware version.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/helper-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project create <folder-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project create <folder-name> <version>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Entity Indexer in PHP for Shopware 6\nDESCRIPTION: This code demonstrates how to create a custom entity indexer for customer data in Shopware 6. It includes methods for handling full indexing, incremental updates, and processing indexed data. The example writes log entries when customers are indexed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-indexer.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Framework/DataAbstractionLayer/Indexing/ExampleIndexer.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Framework\\DataAbstractionLayer\\Indexing;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Checkout\\Customer\\CustomerDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexer;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexingMessage;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\nclass ExampleIndexer extends EntityIndexer\n{\n    private IteratorFactory $iteratorFactory;\n\n    private EntityRepository $repository;\n\n    private Connection $connection;\n\n    public function __construct(\n        IteratorFactory $iteratorFactory,\n        EntityRepository $repository,\n        Connection $connection\n    ) {\n        $this->iteratorFactory = $iteratorFactory;\n        $this->repository = $repository;\n        $this->connection = $connection;\n    }\n\n    /**\n     * Returns a unique name for this indexer.\n     */\n    public function getName(): string\n    {\n        return 'swag.basic.example.indexer';\n    }\n\n    /**\n     * Called when a full entity index is required. This function should generate a list of message for all records which\n     * are indexed by this indexer.\n     */\n\n    public function iterate($offset): ?EntityIndexingMessage\n    {\n        $iterator = $this->iteratorFactory->createIterator($this->repository->getDefinition(), $offset);\n\n        $ids = $iterator->fetch();\n\n        if (empty($ids)) {\n            return null;\n        }\n\n        return new EntityIndexingMessage(array_values($ids), $iterator->getOffset());\n    }\n\n    /**\n     * Called when entities are updated over the DAL. This function should react to the provided entity written events\n     * and generate a list of messages which has to be processed by the `handle` function over the message queue workers.\n     */\n    public function update(EntityWrittenContainerEvent $event): ?EntityIndexingMessage\n    {\n        $updates = $event->getPrimaryKeys(CustomerDefinition::ENTITY_NAME);\n\n        if (empty($updates)) {\n            return null;\n        }\n\n        return new EntityIndexingMessage(array_values($updates), null, $event->getContext());\n    }\n\n    /**\n     * Called over the message queue workers. The messages are the generated messages\n     * of the `self::iterate` or `self::update` functions.\n     */\n    public function handle(EntityIndexingMessage $message): void\n    {\n        $ids = $message->getData();\n\n        if (!$ids) {\n            return;\n        }\n\n        foreach ($ids as $id) {\n            $this->writeLog($id);\n        }\n    }\n\n    private function writeLog($customerId)\n    {\n        $this->connection->executeStatement('INSERT INTO `log_entry` (`id`, `message`, `level`, `channel`, `created_at`) VALUES (:id, :message, :level, :channel, now())', [\n            'id' => Uuid::randomBytes(),\n            'message' => 'Indexed customer with id: ' . $customerId,\n            'level' => 1,\n            'channel' => 'debug'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber in Shopware using XML Configuration\nDESCRIPTION: This XML snippet demonstrates how to register the ProductSubscriber in the services.xml file. It defines the service and tags it as a kernel event subscriber, allowing Shopware to recognize and use the subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-database-events.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\ProductSubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full Entity Definition with Flags in Shopware 6\nDESCRIPTION: Provides a complete example of a Shopware 6 entity definition (ExampleDefinition) implementing various fields with different flags.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-flags.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass ExampleDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'swag_example';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            (new StringField('name', 'name')),\n            (new StringField('description', 'description')),\n            (new BoolField('active', 'active'))\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relative Surcharge to Cart in Twig\nDESCRIPTION: Example demonstrating how to add a percentage-based surcharge to the cart using the cart service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.has('my-surcharge') %}\n    {% return %}\n{% endif %}\n\n{% do services.cart.surcharge('my-surcharge', 'percentage', -10, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Product Price Calculator in PHP\nDESCRIPTION: Creates a custom price calculator by decorating the core ProductPriceCalculator service. This implementation allows global modification of product prices before they are calculated. The example shows setting fixed prices for all products, though this would likely need to be customized for real use cases.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/customize-price-calculation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AbstractProductPriceCalculator;\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductEntity;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass CustomProductPriceCalculator extends AbstractProductPriceCalculator\n{\n    /**\n     * @var AbstractProductPriceCalculator\n     */\n    private AbstractProductPriceCalculator $productPriceCalculator;\n\n    public function __construct(AbstractProductPriceCalculator $productPriceCalculator)\n    {\n        $this->productPriceCalculator = $productPriceCalculator;\n    }\n\n    public function getDecorated(): AbstractProductPriceCalculator\n    {\n        return $this->productPriceCalculator;\n    }\n\n    public function calculate(iterable $products, SalesChannelContext $context): void\n    {\n        /** @var SalesChannelProductEntity $product */\n        foreach ($products as $product) {\n            $price = $product->getPrice();\n            // Just an example!\n            // A product can have more than one price, which you also have to consider.\n            // Also you might have to change the value of \"getCheapestPrice\"!\n            $price->first()->setGross(100);\n            $price->first()->setNet(50);\n        }\n\n        $this->getDecorated()->calculate($products, $context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin with Shopware CLI Command\nDESCRIPTION: Command to generate the basic plugin structure using Shopware's built-in console command. This creates all the required files for a Shopware plugin with an optional configuration file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-base-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console plugin:create SwagBasicExample\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Entity Definition in PHP\nDESCRIPTION: EntityTranslationDefinition class that defines the structure and relationships of the translation entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-translations.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\Aggregate\\ExampleTranslation;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityTranslationDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\StringField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleDefinition;\n\nclass ExampleTranslationDefinition extends EntityTranslationDefinition\n{\n    public const ENTITY_NAME = 'swag_example_translation';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    public function getParentDefinitionClass(): string\n    {\n        return ExampleDefinition::class;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new StringField('name', 'name'))->addFlags(new Required()),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Result Limiting in Shopware 6\nDESCRIPTION: Shows how to limit query results using setLimit method on the Criteria object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n    $criteria->setLimit(1);\n\n    $product = $this->productRepository->search($criteria, $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExampleFilesystemService in PHP for Flysystem Operations\nDESCRIPTION: This PHP class demonstrates how to create a service that interacts with both public and private filesystems using Flysystem in a Shopware plugin. It includes methods for reading, writing, and listing files.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/filesystem/filesystem.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse League\\Flysystem\\FilesystemOperator;\n\nclass ExampleFilesystemService\n{\n    /**\n     * @var FilesystemOperator\n     */\n    private FilesystemOperator $fileSystemPublic;\n    /**\n     * @var FilesystemOperator\n     */\n    private FilesystemOperator $fileSystemPrivate;\n\n    /**\n     * ExampleFilesystemService constructor.\n     * @param FilesystemOperator $fileSystemPublic\n     * @param FilesystemOperator $fileSystemPrivate\n     */\n    public function __construct(FilesystemOperator $fileSystemPublic, FilesystemOperator $fileSystemPrivate)\n    {\n        $this->fileSystemPublic = $fileSystemPublic;\n        $this->fileSystemPrivate = $fileSystemPrivate;\n    }\n\n    public function readPrivateFile(string $filename) {\n        return $this->fileSystemPrivate->read($filename);\n    }\n\n    public function writePrivateFile(string $filename, string $content) {\n        $this->fileSystemPrivate->write($filename, $content);\n    }\n\n    public function listPublicFiles(): array {\n        return $this->fileSystemPublic->listContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Handler Class in PHP with Symfony Messenger\nDESCRIPTION: Implementation of a message handler class (SmsHandler) that processes SmsNotification messages. Uses Symfony's AsMessageHandler attribute and requires messenger.message_handler tag for registration. The handler implements the __invoke method to process incoming messages.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-message-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\MessageQueue\\Handler;\n\nuse Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;\nuse Swag\\BasicExample\\MessageQueue\\Message\\SmsNotification;\n\n#[AsMessageHandler]\nclass SmsHandler\n{\n    public function __invoke(SmsNotification $message)\n    {\n        // ... do some work - like sending an SMS message!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Prepared Payment in Shopware 6 (PHP SDK)\nDESCRIPTION: PHP code using the Shopware App SDK to validate a prepared payment. It resolves the shop, assembles the payment validation data, and returns a signed response with custom reference data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\n\nfunction validate(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $payment = $contextResolver->assemblePaymentValidate($serverRequest, $shop);\n    \n    // implement your logic here based on the information provided in $payment\n    \n    // check PaymentResponse class for all available payment states\n    return $signer->signResponse(PaymentResponse::validateSuccess(['myCustomReference' => '1234567890']), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tab Route in Shopware 6 Administration\nDESCRIPTION: This JavaScript code registers a new route for the custom tab in the Shopware 6 Administration, extending the product detail page.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport './page/sw-product-detail';\nimport './view/sw-product-detail-custom';\n\nShopware.Module.register('sw-new-tab-custom', {\n    routeMiddleware(next, currentRoute) {\n        const customRouteName = 'sw.product.detail.custom';\n    \n        if (\n            currentRoute.name === 'sw.product.detail' \n            && currentRoute.children.every((currentRoute) => currentRoute.name !== customRouteName)\n        ) {\n            currentRoute.children.push({\n                name: customRouteName,\n                path: '/sw/product/detail/:id/custom',\n                component: 'sw-product-detail-custom',\n                meta: {\n                    parentPath: 'sw.product.index'\n                }\n            });\n        }\n        next(currentRoute);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Result Item Display in Shopware 6 Administration\nDESCRIPTION: This snippet shows how to customize the display of search result items for a custom entity in Shopware 6 Administration. It overrides the sw-search-bar-item template to add a new router-link for the custom entity type.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% block sw_search_bar_item_cms_page %}\n    {% parent %}\n\n    <router-link v-else-if=\"type === 'foo_bar'\"\n                 v-bind:to=\"{ name: 'foo.bar.detail', params: { id: item.id } }\"\n                 ref=\"routerLink\"\n                 class=\"sw-search-bar-item__link\">\n        {% block sw_search_bar_item_foo_bar_label %}\n            <span class=\"sw-search-bar-item__label\">\n                <sw-highlight-text v-bind:searchTerm=\"searchTerm\"\n                                   v-bind:text=\"item.name\">\n                </sw-highlight-text>\n            </span>\n        {% endblock %}\n    </router-link>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extensibility Hooks with Vue Composition API\nDESCRIPTION: Two code snippets showing the proposed extensibility pattern using Vue's Composition API. The first shows an original component with an extensibility hook, while the second demonstrates how a plugin would extend that component.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-27-native-extension-system-with-vue.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// The original component\n<script setup lang=\"ts\">\n// Hook for providing extensibility\nuseExtensibility();\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// The plugin component\n<script lang=\"ts\">\n    import SwOrignal from './sw-original.vue';\n    // use our extensibility helpers\n    import { useComponentExtender, getPropsFromComponent } from 'sw-vue-extensbiles';\n    \n    const myCustomData = ref('test');\n    \n    export default {\n        name: 'sw-extended-component',\n        props: {\n            ...getPropsFromComponent(SwOrignal)\n        },\n        setup(props, context) {\n            return {\n                ...useComponentExtender(SwOrignal, props, context),\n                myCustomData\n            }   \n        }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Signing in PHP with Shopware App SDK\nDESCRIPTION: Demonstrates how to create and use a ResponseSigner to sign PSR-7 responses sent to the Shopware server. The code shows initialization of app configuration, shop resolution from request, and response signing using the SDK's authentication components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/04-signing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app = new AppConfiguration('Foo', 'test', 'http://localhost:6001/register/callback');\n// for a repository to save stores implementing \\Shopware\\App\\SDK\\Shop\\ShopRepositoryInterface, see FileShopRepository as an example\n$repository = ...;\n\n// Create a psr 7 request or convert it (HttpFoundation Symfony)\n$psrRequest = ...;\n\n$shopResolver = new \\Shopware\\App\\SDK\\Shop\\ShopResolver($repository);\n\n$shop = $shopResolver->resolveShop($psrRequest);\n\n// do something\n$response = ....;\n\n$signer = new \\Shopware\\App\\SDK\\Authentication\\ResponseSigner();\n$signer->signResponse($psrResponse, $shop);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Class in PHP for Shopware 6\nDESCRIPTION: Implementation of a custom event class that implements ShopwareSalesChannelEvent interface. The class handles an ExampleEntity and SalesChannelContext, providing methods to access the entity, context, and sales channel context.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/add-custom-event.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\Event;\n\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\Event\\ShopwareSalesChannelEvent;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\n\nclass ExampleEvent implements ShopwareSalesChannelEvent\n{\n    protected ExampleEntity $exampleEntity;\n\n    protected SalesChannelContext $salesChannelContext;\n\n    public function __construct(ExampleEntity $exampleEntity, SalesChannelContext $context)\n    {\n        $this->exampleEntity = $exampleEntity;\n        $this->salesChannelContext = $context;\n    }\n\n    public function getExample(): ExampleEntity\n    {\n        return $this->exampleEntity;\n    }\n\n    public function getContext(): Context\n    { \n        return $this->salesChannelContext->getContext();\n    }\n\n    public function getSalesChannelContext(): SalesChannelContext\n    {\n        return $this->salesChannelContext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing ToOne Association in Shopware 6\nDESCRIPTION: This code demonstrates how to replace a ToOne association (like a product's tax) directly using the update method. Unlike ToMany associations, ToOne associations can be replaced in a single update operation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/replacing-associated-data.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function replaceData(Context $context): void\n{\n    $this->productRepository->update([\n        [\n            'id' => 'myProductId',\n            'taxId' => 'newTaxId'\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Local OneToMany Associations in Shopware\nDESCRIPTION: This snippet demonstrates how to work with local OneToMany associations for new entities in Shopware. It shows how to create a price repository, add new prices to a product, delete prices, and update prices locally before saving the parent product entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        priceRepository() {\n            if (!this.product) {\n                return undefined;\n            };\n\n            this.priceRepository = this.repositoryFactory.create(\n                // `product_price`\n                this.product.prices.entity,\n                // `product/some-id/priceRules`\n                this.product.prices.source\n            );\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get('some-id', Shopware.Context.api)\n            .then(product => {\n                this.product = product;\n\n            });\n    },\n    methods: {\n        loadPrices() {\n            this.prices = this.product.prices;\n        },\n\n        addPrice() {\n            const newPrice = this.priceRepository\n                .create(Shopware.Context.api);\n\n            newPrice.quantityStart = 1;\n            // update some other fields\n\n            this.product.prices.add(newPrice);\n        },\n\n        savePrice() {\n            this.productRepository.save(this.product)\n        },\n\n        deletePrice(priceId) {\n            this.product.prices.remove(priceId);\n        },\n\n        updatePrice(price) {\n            // price entity is already updated and already assigned to product, no sources needed \n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Filters for Product Search in Shopware 6 (PHP)\nDESCRIPTION: PHP method demonstrating how to combine multiple filters using OrFilter in Shopware 6. It searches for products by either ID or name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new OrFilter([\n        new EqualsFilter('id', 'Your example ID'),\n        new EqualsFilter('name', 'Example name')\n    ]));\n\n    $products = $this->productRepository->search($criteria, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Registration in Shopware 6\nDESCRIPTION: Example of basic module registration structure where menu entries can be configured\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-menu-entry.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Module.register('swag-plugin', {\n    // configuration here\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies for Vue 3 in Shopware Plugin\nDESCRIPTION: Ensure your plugin's package.json dependencies align with the Shopware administration's dependencies for Vue 3 compatibility.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/upgrades/administration/vue3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Update your package.json to match Shopware administration dependencies\n{\n  \"dependencies\": {\n    \"vue\": \"^3.x.x\",\n    \"vuex\": \"^4.x.x\",\n    // ... other dependencies\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Association in Shopware 6 PHP\nDESCRIPTION: Demonstrates how to load associated product reviews by adding associations to the criteria object. Shows basic filtering and association loading.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n    $criteria->addAssociation('productReviews');\n\n    $products = $this->productRepository->search($criteria, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Error Message Snippets in JSON\nDESCRIPTION: Snippet configuration file containing custom error messages for both cart and checkout contexts in English.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-validator.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"checkout\": {\n        \"custom-line-item-blocked\": \"Example error message for the cart\"\n    },\n    \"error\": {\n        \"custom-line-item-blocked\": \"Example error message for the checkout\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OneToMany Associations in Shopware Component\nDESCRIPTION: This snippet illustrates how to work with OneToMany associations in a Shopware component. It demonstrates creating a repository for associated prices, loading prices, adding new prices, deleting prices, and updating prices.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Criteria } = Shopware.Data;\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined,\n            prices: undefined\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        priceRepository() {\n            if (!this.product) {\n                return undefined;\n            };\n\n            return this.repositoryFactory.create(\n                // `product_price`\n                this.product.prices.entity,\n                // `product/some-id/priceRules`\n                this.product.prices.source\n            );\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get('some-product-id', Shopware.Context.api)\n            .then((product) => {\n                this.product = product;\n            });\n    },\n\n    methods: {\n        loadPrices() {\n            this.priceRepository\n                .search(new Criteria(), Shopware.Context.api)\n                .then((prices) => {\n                    this.prices = prices;\n                });\n        },\n\n        addPrice() {\n            const newPrice = this.priceRepository.create(Shopware.Context.api);\n\n            newPrice.quantityStart = 1;\n          // Note: there are more things required than just the quantityStart\n\n            this.priceRepository\n                .save(newPrice, Shopware.Context.api)\n                .then(this.loadPrices);\n        },\n\n        deletePrice(priceId) {\n            this.priceRepository\n                .delete(priceId, Shopware.Context.api)\n                .then(this.loadPrices);\n        },\n\n        updatePrice(price) {\n            this.priceRepository\n                .save(price, Shopware.Context.api)\n                .then(this.loadPrices);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Service Configuration for Repositories in Shopware 6\nDESCRIPTION: XML service configuration that injects both product repository and product_category repository into the ReplacingData service class. These repositories are required to manage product and category associations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/replacing-associated-data.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ReplacingData\" >\n            <argument type=\"service\" id=\"product.repository\"/>\n            <argument type=\"service\" id=\"product_category.repository\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Deleting Entity\nDESCRIPTION: Demonstrates how to delete a single entity using the repository's delete method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        }\n    },\n\n    created() {\n        this.productRepository.delete('1de38487abf04705810b719d4c3e8faa', Shopware.Context.api);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding a Shopware 6 Component in JavaScript\nDESCRIPTION: Demonstrates how to override an existing component (sw-text-field) by importing a new template and using Shopware.Component.override()\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// import the new twig-template file\nimport template from './sw-text-field-new.html.twig';\n\n// override the existing component `sw-text-field` by passing the new configuration\nShopware.Component.override('sw-text-field', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document Renderer in PHP\nDESCRIPTION: Implementation of ExampleDocumentRenderer class that extends AbstractDocumentRenderer to handle custom document type rendering. Includes methods for document generation, number generation, and configuration handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/document/add-custom-document-type.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Document\\Render;\n\nuse Shopware\\Core\\Checkout\\Document\\Renderer\\AbstractDocumentRenderer;\nuse Shopware\\Core\\Checkout\\Document\\Renderer\\DocumentRendererConfig;\nuse Shopware\\Core\\Checkout\\Document\\Renderer\\RenderedDocument;\nuse Shopware\\Core\\Checkout\\Document\\Renderer\\RendererResult;\nuse Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader;\nuse Shopware\\Core\\Checkout\\Document\\Service\\DocumentFileRendererRegistry;\nuse Shopware\\Core\\Checkout\\Document\\Struct\\DocumentGenerateOperation;\nuse Shopware\\Core\\Checkout\\Order\\OrderEntity;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\nuse Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface;\n\nclass ExampleDocumentRenderer extends AbstractDocumentRenderer\n{\n    public const DEFAULT_TEMPLATE = '@SwagBasicExample/documents/example_document.html.twig';\n\n    final public const TYPE = 'example';\n\n    /**\n     * @internal\n     */\n    public function __construct(\n        private readonly EntityRepository $orderRepository,\n        private readonly DocumentConfigLoader $documentConfigLoader,\n        private readonly NumberRangeValueGeneratorInterface $numberRangeValueGenerator,\n        private readonly DocumentFileRendererRegistry $fileRendererRegistry,\n    ) {\n    }\n\n    public function supports(): string\n    {\n        return self::TYPE;\n    }\n\n    /**\n     * @param array<DocumentGenerateOperation> $operations\n     */\n    public function render(array $operations, Context $context, DocumentRendererConfig $rendererConfig): RendererResult\n    {\n        $ids = \\array_map(fn (DocumentGenerateOperation $operation) => $operation->getOrderId(), $operations);\n\n        if (empty($ids)) {\n            return new RendererResult();\n        }\n\n        $result = new RendererResult();\n\n        $criteria = new Criteria($ids);\n        $criteria->addAssociation('language');\n        $criteria->addAssociation('language.locale');\n\n        $orders = $this->orderRepository->search($criteria, $context)->getEntities();\n        foreach ($orders as $order) {\n            $orderId = $order->getId();\n\n            try {\n                $operation = $operations[$orderId] ?? null;\n                if ($operation === null) {\n                    continue;\n                }\n\n                $config = clone $this->documentConfigLoader->load(self::TYPE, $order->getSalesChannelId(), $context);\n\n                $config->merge($operation->getConfig());\n\n                $number = $config->getDocumentNumber() ?: $this->getNumber($context, $order, $operation);\n\n                $now = (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT);\n\n                $config->merge([\n                    'documentDate' => $operation->getConfig()['documentDate'] ?? $now,\n                    'documentNumber' => $number,\n                    'custom' => [\n                        'invoiceNumber' => $number,\n                    ],\n                ]);\n\n                if ($operation->isStatic()) {\n                    $doc = new RenderedDocument($number, $config->buildName(), $operation->getFileType(), $config->jsonSerialize());\n                    $result->addSuccess($orderId, $doc);\n\n                    continue;\n                }\n\n                $doc = new RenderedDocument(\n                    $number,\n                    $config->buildName(),\n                    $operation->getFileType(),\n                    $config->jsonSerialize(),\n                );\n\n                $doc->setTemplate(self::DEFAULT_TEMPLATE);\n                $doc->setOrder($order);\n                $doc->setContext($context);\n                $content = $this->fileRendererRegistry->render($doc);\n                $doc->setContent($content);\n\n                $result->addSuccess($orderId, $doc);\n            } catch (\\Throwable $exception) {\n                $result->addError($orderId, $exception);\n            }\n        }\n\n        return $result;\n    }\n\n    public function getDecorated(): AbstractDocumentRenderer\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    private function getNumber(Context $context, OrderEntity $order, DocumentGenerateOperation $operation): string\n    {\n        return $this->numberRangeValueGenerator->getValue(\n            'document_' . self::TYPE,\n            $context,\n            $order->getSalesChannelId(),\n            $operation->isPreview()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Custom Entity in Shopware 6\nDESCRIPTION: This migration class creates a new database table 'swag_example' with fields for id, name, description, active status, and timestamp columns. It extends the MigrationStep class and implements the required methods for creating the table structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Migration/Migration1611664789Example.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\n\nclass Migration1611664789Example extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1611664789;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $sql = <<<SQL\nCREATE TABLE IF NOT EXISTS `swag_example` (\n    `id` BINARY(16) NOT NULL,\n    `name` VARCHAR(255) COLLATE utf8mb4_unicode_ci,\n    `description` VARCHAR(255) COLLATE utf8mb4_unicode_ci,\n    `active` TINYINT(1) COLLATE utf8mb4_unicode_ci,\n    `created_at` DATETIME(3) NOT NULL,\n    `updated_at` DATETIME(3),\n    PRIMARY KEY (`id`)\n)\n    ENGINE = InnoDB\n    DEFAULT CHARSET = utf8mb4\n    COLLATE = utf8mb4_unicode_ci;\nSQL;\n        $connection->executeStatement($sql);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Status Response Structures\nDESCRIPTION: JSON response formats for different payment status outcomes including success and authorization cases.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"paid\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"authorize\",\n  \"message\": \"The customer failed to pass the credit check.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limiter Configuration in YAML\nDESCRIPTION: Basic YAML configuration for a rate limiter named 'example_route' using the time_backoff policy. This configuration file is placed in the plugin's resources directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rate-limiter/add-rate-limiter-to-api-route.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n// <plugin root>/src/Resources/config/rate_limiter.yaml\nexample_route:\n    enabled: true\n    policy: 'time_backoff'\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Payment Processing After Order Approval in Shopware\nDESCRIPTION: This PHP code shows how to subscribe to the PendingOrderApprovedEvent and prevent automatic payment processing after an order is approved. The subscriber implements EventSubscriberInterface and sets shouldProceedPlaceOrder to false, stopping the default behavior of automatically processing payment when an order is approved.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/order-approval/guides/03-payment-process.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Commercial\\B2B\\OrderApproval\\Event\\PendingOrderApprovedEvent;\n\nclass MySubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            PendingOrderApprovedEvent::class => 'onPendingOrderApproved'\n        ];\n    }\n\n    public function onPendingOrderApproved(PendingOrderApprovedEvent $event): void\n    {\n        $event->setShouldProceedPlaceOrder(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Event Subscriber for Products in Shopware\nDESCRIPTION: This snippet demonstrates how to create a subscriber class that implements the EventSubscriberInterface to listen to the product.loaded event. The subscriber registers which events it wants to listen to and implements a handler method that executes when products are loaded.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/listening-to-events.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Subscriber/MySubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass MySubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        // Return the events to listen to as array like this:  <event to listen to> => <method to execute>\n        return [\n            ProductEvents::PRODUCT_LOADED_EVENT => 'onProductsLoaded'\n        ];\n    }\n\n    public function onProductsLoaded(EntityLoadedEvent $event)\n    {\n        // Do something\n        // E.g. work with the loaded entities: $event->getEntities()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server Block for Shopware\nDESCRIPTION: This Nginx configuration sets up a server block for Shopware, including location directives for various paths and file types. It configures caching, security headers, and FastCGI settings for PHP processing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/config-reference/server/nginx.md#2025-04-22_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n\n    index index.php index.html;\n    server_name localhost;\n\n    client_max_body_size 128M;\n\n    root __DOCUMENT_ROOT__/public;\n\n    # Shopware install / update    \n    location /shopware-installer.phar.php {\n    try_files $uri /shopware-installer.phar.php$is_args$args;\n    }\n    \n    location ~ ^/shopware-installer\\.phar\\.php/.+\\.(?:css|js|png|svg|woff)$ {\n     try_files $uri /shopware-installer.phar.php$is_args$args;\n    }\n\n    # Deny access to . (dot) files\n    location ~ /\\. {\n        deny all;\n    }\n    \n    # Deny access to .php files in public directories\n    location ~ ^/(media|thumbnail|theme|bundles|sitemap).*\\.php$ {\n        deny all;\n    }\n    \n    location /recovery/install {\n        index index.php;\n        try_files $uri /recovery/install/index.php$is_args$args;\n    }\n\n    location /recovery/update/ {\n        location /recovery/update/assets {\n        }\n        if (!-e $request_filename){\n            rewrite . /recovery/update/index.php last;\n        }\n    }\n    \n    location ~ ^/(theme|media|thumbnail|bundles|css|fonts|js|recovery|sitemap)/ {\n        expires 1y;\n        add_header Cache-Control \"public, must-revalidate, proxy-revalidate\";\n        log_not_found off;\n        tcp_nodelay off;\n        open_file_cache max=3000 inactive=120s;\n        open_file_cache_valid 45s;\n        open_file_cache_min_uses 2;\n        open_file_cache_errors off;\n    \n        location ~* ^.+\\.svg {\n            add_header Content-Security-Policy \"script-src 'none'\";\n            add_header Cache-Control \"public, must-revalidate, proxy-revalidate\";\n            log_not_found off;\n        }\n    }\n\n    location ~* ^.+\\.(?:css|cur|js|jpe?g|gif|ico|png|svg|webp|html|woff|woff2|xml)$ {\n        expires 1y;\n        add_header Cache-Control \"public, must-revalidate, proxy-revalidate\";\n\n        access_log off;\n\n        # The directive enables or disables messages in error_log about files not found on disk.\n        log_not_found off;\n\n        tcp_nodelay off;\n\n        ## Set the OS file cache.\n        open_file_cache max=3000 inactive=120s;\n        open_file_cache_valid 45s;\n        open_file_cache_min_uses 2;\n        open_file_cache_errors off;\n\n        try_files $uri /index.php$is_args$args;\n    }\n\n    location ~* ^.+\\.svg$ {\n        add_header Content-Security-Policy \"script-src 'none'\";\n    }\n\n    location / {\n        try_files $uri /index.php$is_args$args;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        include fastcgi.conf;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_buffers 8 16k;\n        fastcgi_buffer_size 32k;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout 300s;\n        proxy_read_timeout 300s;\n        send_timeout 300s;\n        client_body_buffer_size 128k;\n        fastcgi_pass 127.0.0.1:9000;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Composer on Ubuntu\nDESCRIPTION: Bash commands to install PHP 8.3 and its required extensions, along with Composer, on Ubuntu. This setup is suitable for running Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:ondrej/php\n\nsudo apt-get install -y php8.3-fpm php8.3-mysql php8.3-curl php8.3-gd php8.3-xml php8.3-zip php8.3-opcache php8.3-mbstring php8.3-intl php8.3-cli\n\nsudo wget https://getcomposer.org/download/latest-stable/composer.phar -O /usr/local/bin/composer\nsudo chmod +x /usr/local/bin/composer\n```\n\n----------------------------------------\n\nTITLE: Implementing CartAmountRule in PHP for Shopware Plugin\nDESCRIPTION: This snippet defines a custom CartAmountRule class that extends the Rule class to implement a new approval condition based on the total cart amount. It includes methods for matching the rule, defining constraints, and configuring the rule.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/order-approval/guides/04-add-new-approval-condition.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace YourPluginNameSpace;\n\nuse Shopware\\Core\\Framework\\Rule\\Rule;\nuse Shopware\\Core\\Framework\\Rule\\RuleComparison;\nuse Shopware\\Core\\Framework\\Rule\\RuleConfig;\nuse Shopware\\Core\\Framework\\Rule\\RuleConstraints;\nuse Shopware\\Core\\Framework\\Rule\\RuleScope;\n\nclass CartAmountRule extends Rule\n{\n    final public const RULE_NAME = 'totalCartAmount';\n\n    public const AMOUNT = 1000;\n\n    protected float $amount;\n\n    /**\n     * @internal\n     */\n    public function __construct(\n        protected string $operator = self::OPERATOR_GTE,\n        ?float $amount = self::AMOUNT\n    ) {\n        parent::__construct();\n        $this->amount = (float) $amount;\n    }\n\n    /**\n     * @throws UnsupportedOperatorException\n     */\n    public function match(RuleScope $scope): bool\n    {\n        if (!$scope instanceof CartRuleScope) {\n            return false;\n        }\n\n        return RuleComparison::numeric($scope->getCart()->getPrice()->getTotalPrice(), $this->amount, $this->operator);\n    }\n\n    public function getConstraints(): array\n    {\n        return [\n            'amount' => RuleConstraints::float(),\n            'operator' => RuleConstraints::numericOperators(false),\n        ];\n    }\n\n    public function getConfig(): RuleConfig\n    {\n        return (new RuleConfig())\n            ->operatorSet(RuleConfig::OPERATOR_SET_NUMBER)\n            ->numberField('amount');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions via Composer\nDESCRIPTION: Commands to install Shopware extensions using Composer and activate them in the system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require store.shopware.com/{extension-name}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entities in XML for Shopware\nDESCRIPTION: Demonstrates how to define custom entities using XML in the entities.xml file. This snippet shows the structure for creating a custom entity with various field types and relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<entities xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/CustomEntity/Xml/entity-1.0.xsd\">\n    <entity name=\"custom_entity_bundle\">\n        <fields>\n            <string name=\"name\" required=\"true\" translatable=\"true\" store-api-aware=\"true\" />\n            <price name=\"discount\" required=\"true\" store-api-aware=\"true\"/>\n            <many-to-many name=\"products\" reference=\"product\" store-api-aware=\"true\" />\n        </fields>\n    </entity>\n</entities>\n```\n\n----------------------------------------\n\nTITLE: Implementing ExamplePageLoader in PHP for Shopware 6\nDESCRIPTION: Creates an ExamplePageLoader class responsible for loading and preparing data for the custom page. It uses the GenericPageLoader and EventDispatcher to create and populate the ExamplePage instance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Page\\Example;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Page\\GenericPageLoaderInterface;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ExamplePageLoader\n{\n    private GenericPageLoaderInterface $genericPageLoader;\n\n    private EventDispatcherInterface $eventDispatcher;\n\n    public function __construct(GenericPageLoaderInterface $genericPageLoader, EventDispatcherInterface $eventDispatcher)\n    {\n        $this->genericPageLoader = $genericPageLoader;\n        $this->eventDispatcher = $eventDispatcher;\n    }\n\n    public function load(Request $request, SalesChannelContext $context): ExamplePage\n    {\n        $page = $this->genericPageLoader->load($request, $context);\n        $page = ExamplePage::createFrom($page);\n\n        // Do additional stuff, e.g. load more data from store api and add it to page\n         $page->setExampleData(...);\n\n        $this->eventDispatcher->dispatch(\n            new ExamplePageLoadedEvent($page, $context, $request)\n        );\n\n        return $page;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Product Event Subscriber for Dynamic Fields\nDESCRIPTION: Implements an event subscriber to dynamically add custom fields to products without database storage.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Product\\ProductEntity;\nuse Shopware\\Core\\Framework\\Struct\\ArrayEntity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\n\nclass ProductSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductEvents::PRODUCT_LOADED_EVENT => 'onProductsLoaded'\n        ];\n    }\n\n    public function onProductsLoaded(EntityLoadedEvent $event): void\n    {\n        /** @var ProductEntity $productEntity */\n        foreach ($event->getEntities() as $productEntity) {\n            $productEntity->addExtension('custom_string', new ArrayEntity(['foo' => 'bar']));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cart Price Processor and Collector in PHP\nDESCRIPTION: A PHP class that implements both CartProcessorInterface and CartDataCollectorInterface to modify product prices in the cart. It uses QuantityPriceCalculator to handle price calculations and maintains data collection to prevent duplicate database queries.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/change-price-of-item.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartBehavior;\nuse Shopware\\Core\\Checkout\\Cart\\CartDataCollectorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\CartProcessorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator;\nuse Shopware\\Core\\Checkout\\Cart\\Price\\Struct\\QuantityPriceDefinition;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass OverwritePriceCollector implements CartDataCollectorInterface, CartProcessorInterface\n{\n    private QuantityPriceCalculator $calculator;\n\n    public function __construct(QuantityPriceCalculator $calculator) {\n        $this->calculator = $calculator;\n    }\n\n    public function collect(CartDataCollection $data, Cart $original, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        // get all product ids of current cart\n        $productIds = $original->getLineItems()->filterType(LineItem::PRODUCT_LINE_ITEM_TYPE)->getReferenceIds();\n\n        // remove all product ids which are already fetched from the database\n        $filtered = $this->filterAlreadyFetchedPrices($productIds, $data);\n\n        // Skip execution if there are no prices to be saved\n        if (empty($filtered)) {\n            return;\n        }\n\n        foreach ($filtered as $id) {\n            $key = $this->buildKey($id);\n\n            // Needs implementation, just an example\n            $newPrice = $this->doSomethingToGetNewPrice();\n\n            // we have to set a value for each product id to prevent duplicate queries in next calculation\n            $data->set($key, $newPrice);\n        }\n    }\n\n    public function process(CartDataCollection $data, Cart $original, Cart $toCalculate, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        // get all product line items\n        $products = $toCalculate->getLineItems()->filterType(LineItem::PRODUCT_LINE_ITEM_TYPE);\n\n        foreach ($products as $product) {\n            $key = $this->buildKey($product->getReferencedId());\n\n            // no overwritten price? continue with next product\n            if (!$data->has($key) || $data->get($key) === null) {\n                continue;\n            }\n\n            $newPrice = $data->get($key);\n\n            // build new price definition\n            $definition = new QuantityPriceDefinition(\n                $newPrice,\n                $product->getPrice()->getTaxRules(),\n                $product->getPrice()->getQuantity()\n            );\n\n            // build CalculatedPrice over calculator class for overwritten price\n            $calculated = $this->calculator->calculate($definition, $context);\n\n            // set new price into line item\n            $product->setPrice($calculated);\n            $product->setPriceDefinition($definition);\n        }\n    }\n\n    private function filterAlreadyFetchedPrices(array $productIds, CartDataCollection $data): array\n    {\n        $filtered = [];\n\n        foreach ($productIds as $id) {\n            $key = $this->buildKey($id);\n\n            // already fetched from database?\n            if ($data->has($key)) {\n                continue;\n            }\n\n            $filtered[] = $id;\n        }\n\n        return $filtered;\n    }\n\n    private function buildKey(string $id): string\n    {\n        return 'price-overwrite-'.$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bar Entity with ID Field in PHP\nDESCRIPTION: Example of a basic entity definition for the Bar entity with an ID field. This serves as a starting point for adding associations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Bar;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass BarDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'bar';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            // Other fields here\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductReader Class for Migration in PHP\nDESCRIPTION: This class extends AbstractReader and implements methods to support product data migration, including reading total product count and fetching product data with pagination.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Gateway\\Reader;\n\nuse Doctrine\\DBAL\\Driver\\ResultStatement;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Migration\\TotalStruct;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local\\Reader\\AbstractReader;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local\\ShopwareLocalGateway;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\DataSet\\ProductDataSet;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile;\n\nclass ProductReader extends AbstractReader\n{\n    /**\n     * Supports only an OwnProfile and the ProductDataSet\n     */\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile\n            && $migrationContext->getDataSet()::getEntity() === ProductDataSet::getEntity();\n    }\n\n    /**\n     * Supports only an OwnProfile and the ProductDataSet for totals\n     */\n    public function supportsTotal(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile\n            && $migrationContext->getGateway()->getName() === ShopwareLocalGateway::GATEWAY_NAME;\n    }\n\n    /**\n     * Creates a database connection and sets the connection class variable\n     */\n    protected function setConnection(MigrationContextInterface $migrationContext): void\n    {\n        $this->connection = $this->connectionFactory->createDatabaseConnection($migrationContext);\n    }\n\n    public function readTotal(MigrationContextInterface $migrationContext): ?TotalStruct\n    {\n        $this->setConnection($migrationContext);\n\n        $query = $this->connection->createQueryBuilder()\n            ->select('COUNT(*)')\n            ->from('product')\n            ->execute();\n\n        $total = 0;\n        if ($query instanceof ResultStatement) {\n            $total = (int) $query->fetchColumn();\n        }\n\n        return new TotalStruct(ProductDataSet::getEntity(), $total);\n    }\n\n    /**\n     * Fetches all entities out of the product table with the given limit\n     */\n    public function read(MigrationContextInterface $migrationContext, array $params = []): array\n    {\n        $this->setConnection($migrationContext);\n\n        $query = $this->connection->createQueryBuilder();\n        $query->from('product');\n        $query->addSelect('*');\n\n        $query->setFirstResult($migrationContext->getOffset());\n        $query->setMaxResults($migrationContext->getLimit());\n\n        return $query->execute()->fetchAll(\\PDO::FETCH_ASSOC);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decorating MailService to Add Custom Data in PHP\nDESCRIPTION: This PHP class decorates the Shopware MailService to add custom data to the mail template data. It extends AbstractMailService and overrides the send method to inject custom data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/mail/add-data-to-mails.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Content\\Mail\\Service\\AbstractMailService;\nuse Shopware\\Core\\Framework\\Context;\nuse Symfony\\Component\\Mime\\Email;\n\nclass AddDataToMails extends AbstractMailService\n{\n    /**\n     * @var AbstractMailService\n     */\n    private AbstractMailService $mailService;\n\n    public function __construct(AbstractMailService $mailService)\n    {\n        $this->mailService = $mailService;\n    }\n\n    public function getDecorated(): AbstractMailService\n    {\n        return $this->mailService;\n    }\n\n    public function send(array $data, Context $context, array $templateData = []): ?Email\n    {\n        $templateData['myCustomData'] = 'Example data';\n\n        return $this->mailService->send($data, $context, $templateData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Services in XML Configuration\nDESCRIPTION: XML configuration for registering the custom extension and definition services in Shopware's DI container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Extension\\Content\\Product\\CustomExtension\">\n            <tag name=\"shopware.entity.extension\"/>\n        </service>\n\n        <service id=\"Swag\\BasicExample\\Extension\\Content\\Product\\ExampleExtensionDefinition\">\n            <tag name=\"shopware.entity.definition\" entity=\"swag_example_extension\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Handling Entity Extensions in Shopware 6 PayPal POS Wizard\nDESCRIPTION: This code snippet shows how to work with entity extensions in a Shopware 6 PayPal POS wizard component. It demonstrates creating and saving sales channels with extensions, loading existing sales channels, and managing related data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './swag-paypal-pos-wizard.html.twig';\nimport './swag-paypal-pos-wizard.scss';\nimport {\n    PAYPAL_POS_SALES_CHANNEL_EXTENSION,\n    PAYPAL_POS_SALES_CHANNEL_TYPE_ID,\n} from '../../../../../constant/swag-paypal.constant';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.extend('swag-paypal-pos-wizard', 'sw-first-run-wizard-modal', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'SwagPayPalPosSettingApiService',\n        'SwagPayPalPosWebhookRegisterService',\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'notification',\n    ],\n\n    data() {\n        return {\n            showModal: true,\n            isLoading: false,\n            salesChannel: {},\n            cloneSalesChannelId: null,\n            stepperPages: [\n                'connection',\n                'connectionSuccess',\n                'connectionDisconnect',\n                'customization',\n                'productSelection',\n                'syncLibrary',\n                'syncPrices',\n                'finish',\n            ],\n            stepper: {},\n            currentStep: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.wizardTitle,\n        };\n    },\n\n    computed: {\n\n        paypalPosSalesChannelRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        salesChannelCriteria() {\n            return (new Criteria(1, 500))\n                .addAssociation(PAYPAL_POS_SALES_CHANNEL_EXTENSION)\n                .addAssociation('countries')\n                .addAssociation('currencies')\n                .addAssociation('domains')\n                .addAssociation('languages');\n        },\n    },\n\n    watch: {\n        '$route'(to) {\n            this.handleRouteUpdate(to);\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        //...\n        \n        createdComponent() {\n            //...\n            this.createNewSalesChannel();\n        },\n\n        save(activateSalesChannel = false, silentWebhook = false) {\n            if (activateSalesChannel) {\n                this.salesChannel.active = true;\n            }\n\n            return this.salesChannelRepository.save(this.salesChannel, Context.api).then(async () => {\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n                this.isNewEntity = false;\n\n                this.$root.$emit('sales-channel-change');\n                await this.loadSalesChannel();\n\n                this.cloneProductVisibility();\n                this.registerWebhook(silentWebhook);\n            }).catch(() => {\n                this.isLoading = false;\n\n                this.createNotificationError({\n                    message: this.$tc('sw-sales-channel.detail.messageSaveError', 0, {\n                        name: this.salesChannel.name || this.placeholder(this.salesChannel, 'name'),\n                    }),\n                });\n            });\n        },\n\n        createNewSalesChannel() {\n            if (Context.api.languageId !== Context.api.systemLanguageId) {\n                Context.api.languageId = Context.api.systemLanguageId;\n            }\n\n            this.previousApiKey = null;\n            this.salesChannel = this.salesChannelRepository.create(Context.api);\n            this.salesChannel.typeId = PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n            this.salesChannel.name = this.$tc('swag-paypal-pos.wizard.salesChannelPrototypeName');\n            this.salesChannel.active = false;\n\n            this.salesChannel.extensions.paypalPosSalesChannel\n                = this.paypalPosSalesChannelRepository.create(Context.api);\n\n            Object.assign(\n                this.salesChannel.extensions.paypalPosSalesChannel,\n                {\n                    mediaDomain: '',\n                    apiKey: '',\n                    imageDomain: '',\n                    productStreamId: null,\n                    syncPrices: true,\n                    replace: 0,\n                },\n            );\n\n            this.salesChannelService.generateKey().then((response) => {\n                this.salesChannel.accessKey = response.accessKey;\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-sales-channel.detail.messageAPIError'),\n                });\n            });\n        },\n\n        loadSalesChannel() {\n            const salesChannelId = this.$route.params.id || this.salesChannel.id;\n            if (!salesChannelId) {\n                return new Promise((resolve) => { resolve(); });\n            }\n\n            this.isLoading = true;\n            return this.salesChannelRepository.get(salesChannelId, Shopware.Context.api, this.salesChannelCriteria)\n                .then((entity) => {\n                    this.salesChannel = entity;\n                 this.previousApiKey = entity.extensions.paypalPosSalesChannel.apiKey;\n                    this.isLoading = false;\n                });\n        },\n        //...\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cart Processor in Shopware 6 (PHP)\nDESCRIPTION: This code snippet shows how to create a custom cart processor class in Shopware 6. It implements the CartProcessorInterface and defines a process method to apply changes to the cart using previously collected data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-processor-collector.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartBehavior;\nuse Shopware\\Core\\Checkout\\Cart\\CartProcessorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass CustomCartProcessor implements CartProcessorInterface\n{\n    public function process(CartDataCollection $data, Cart $original, Cart $toCalculate, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        $newData = $data->get('uniqueKey');\n\n        // Do stuff to the `$toCalculate` cart with your new data\n        foreach ($toCalculate->getLineItems()->getFlat() as $lineItem) {\n            $lineItem->setPayload($newData['stuff']);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Vuex Store in Shopware 6 Module Scope\nDESCRIPTION: Demonstrates how to register a Vuex store at the module level in Shopware 6 Administration using the Shopware.State.registerModule function.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-vuex-state.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport swagBasicState from './store';\n\nShopware.State.registerModule('swagBasicState', swagBasicState);\n```\n\n----------------------------------------\n\nTITLE: Setting Template in Shopware 6 Administration Component\nDESCRIPTION: This JavaScript snippet shows how to import and set a twig template in a Shopware 6 Administration component. It also demonstrates setting the page title using vue-meta.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/writing-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './swag-basic-example.html.twig';\n\nShopware.Component.register('swag-basic-example', {\n    template, // ES6 shorthand for: 'template: template'  \n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Flow Action Service in XML\nDESCRIPTION: This XML snippet shows how to register the custom CreateTagAction in the services.xml file. It injects the tag repository and uses the flow.action tag with a priority to include it in the flow actions API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n<service id=\"Swag\\CreateTagAction\\Core\\Content\\Flow\\Dispatching\\Action\\CreateTagAction\">\n    <argument type=\"service\" id=\"tag.repository\" />\n    <tag name=\"flow.action\" priority=\"600\" key=\"action.create.tag\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Implementing EntityWriteSubscriber in Shopware\nDESCRIPTION: A subscriber class that listens to EntityWriteEvent for tracking entity writes, updates, and deletes. It demonstrates logging entity IDs and handling success/error callbacks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-database-events.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWriteEvent;\nuse Shopware\\Core\\Content\\Cms\\CmsPageDefinition;\nuse Psr\\Log\\LoggerInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Command\\WriteCommand;\n\nclass EntityWriteSubscriber implements EventSubscriberInterface\n{\n\n    public function __construct(private readonly LoggerInterface $logger)\n    {\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            EntityWriteEvent::class => 'beforeWrite',\n        ];\n    }\n\n    public function beforeWrite(EntityWriteEvent $event)\n    {\n        //get the ids of any cms entities about to be written/updated/deleted\n        //this event is triggered for batches of entities, so you can use this to filter for specific entities\n        $ids = $event->getIds(CmsPageDefinition::ENTITY_NAME);\n        \n        //get ids of all entities to be written, regardless of type\n        $ids = $event->getIds();\n        \n        //you can also fetch the payloads (DeleteCommand's do not have payloads)\n        $payloads = array_map(fn (WriteCommand $command) => $command->getPayload(), $event->getCommands());\n        \n        //or for a specific entity type\n        $payloads = array_map(fn (WriteCommand $command) => $command->getPayload(), $event->getCommandsForEntity(CmsPageDefinition::ENTITY_NAME));\n                \n        \n        $event->addSuccess(function () use ($ids) {\n            //the entities have now been successfully written\n            \n            $this->logger->info(sprintf('Entities with ids: \"%s\" were written', implode(', ', $ids)));\n        });\n        \n        $event->addError(function () use ($ids) {\n            //the entities failed to write, you can write a log, send an e-mail, or anything else.\n            $this->logger->critical(sprintf('Entities with ids: \"%s\" were not written', implode(', ', $ids)));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Cache for Specific States in Twig\nDESCRIPTION: Demonstrates how to invalidate cached responses for specific states like 'logged-in' using Twig templates. Uses the response service to create JSON responses and sets invalidation states.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({ 'foo': 'bar' }) %}\n{% do response.cache.invalidationState('logged-in') %}\n\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Searching for Product by ID in Shopware 6 (PHP)\nDESCRIPTION: PHP method to search for a product by its ID using the product repository in Shopware 6. It demonstrates how to use the Criteria object with a specific ID.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $product = $this->productRepository->search(new Criteria([$myId]), $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Class for Custom Payment Method in Shopware 6\nDESCRIPTION: This code snippet shows how to create a plugin class that registers a custom payment method in Shopware 6. It handles installation, uninstallation, activation, and deactivation of the payment method while maintaining data consistency.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/SwagBasicExample.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample;\n\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\nuse Shopware\\Core\\Framework\\Plugin;\nuse Shopware\\Core\\Framework\\Plugin\\Context\\ActivateContext;\nuse Shopware\\Core\\Framework\\Plugin\\Context\\DeactivateContext;\nuse Shopware\\Core\\Framework\\Plugin\\Context\\InstallContext;\nuse Shopware\\Core\\Framework\\Plugin\\Context\\UninstallContext;\nuse Shopware\\Core\\Framework\\Plugin\\Util\\PluginIdProvider;\nuse Swag\\BasicExample\\Service\\ExamplePayment;\n\nclass SwagBasicExample extends Plugin\n{\n    public function install(InstallContext $context): void\n    {\n        $this->addPaymentMethod($context->getContext());\n    }\n\n    public function uninstall(UninstallContext $context): void\n    {\n        // Only set the payment method to inactive when uninstalling. Removing the payment method would\n        // cause data consistency issues, since the payment method might have been used in several orders\n        $this->setPaymentMethodIsActive(false, $context->getContext());\n    }\n\n    public function activate(ActivateContext $context): void\n    {\n        $this->setPaymentMethodIsActive(true, $context->getContext());\n        parent::activate($context);\n    }\n\n    public function deactivate(DeactivateContext $context): void\n    {\n        $this->setPaymentMethodIsActive(false, $context->getContext());\n        parent::deactivate($context);\n    }\n\n    private function addPaymentMethod(Context $context): void\n    {\n        $paymentMethodExists = $this->getPaymentMethodId();\n\n        // Payment method exists already, no need to continue here\n        if ($paymentMethodExists) {\n            return;\n        }\n\n        /** @var PluginIdProvider $pluginIdProvider */\n        $pluginIdProvider = $this->container->get(PluginIdProvider::class);\n        $pluginId = $pluginIdProvider->getPluginIdByBaseClass(get_class($this), $context);\n\n        $examplePaymentData = [\n            // payment handler will be selected by the identifier\n            'handlerIdentifier' => ExamplePayment::class,\n            'name' => 'Example payment',\n            'description' => 'Example payment description',\n            'pluginId' => $pluginId,\n            // if true, payment method will also be available after the order \n            // is created, e.g. if payment fails and the user wants to try again\n            'afterOrderEnabled' => true,\n        ];\n\n        /** @var EntityRepository $paymentRepository */\n        $paymentRepository = $this->container->get('payment_method.repository');\n        $paymentRepository->create([$examplePaymentData], $context);\n    }\n\n    private function setPaymentMethodIsActive(bool $active, Context $context): void\n    {\n        /** @var EntityRepository $paymentRepository */\n        $paymentRepository = $this->container->get('payment_method.repository');\n\n        $paymentMethodId = $this->getPaymentMethodId();\n\n        // Payment does not even exist, so nothing to (de-)activate here\n        if (!$paymentMethodId) {\n            return;\n        }\n\n        $paymentMethod = [\n            'id' => $paymentMethodId,\n            'active' => $active,\n        ];\n\n        $paymentRepository->update([$paymentMethod], $context);\n    }\n\n    private function getPaymentMethodId(): ?string\n    {\n        /** @var EntityRepository $paymentRepository */\n        $paymentRepository = $this->container->get('payment_method.repository');\n\n        // Fetch ID for update\n        $paymentCriteria = (new Criteria())->addFilter(new EqualsFilter('handlerIdentifier', ExamplePayment::class));\n        return $paymentRepository->searchIds($paymentCriteria, Context::createDefaultContext())->firstId();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with Repository in Shopware 6\nDESCRIPTION: This snippet demonstrates how to delete a product by first searching for it using a filter criteria and then using the delete method. It shows the pattern of passing an array of arrays containing just the ID of the entity to be deleted.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example product'));\n\n    $productId = $this->productRepository->searchIds($criteria, $context)->firstId();\n\n    $this->productRepository->delete([\n        [\n            'id' => $productId\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Entity\nDESCRIPTION: Shows how to create and save a new entity using the repository factory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            entity: undefined\n        }\n    },\n\n    computed: {\n        manufacturerRepository() {\n            return this.repositoryFactory.create('product_manufacturer');\n        }\n    },\n\n    created() {\n        this.entity = this.manufacturerRepository.create(Shopware.Context.api);\n\n        this.entity.name = 'test';\n\n        this.manufacturerRepository.save(this.entity, Shopware.Context.api);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Vuex and Pinia Implementation in Shopware\nDESCRIPTION: Example showing the transition from a Vuex module to a Pinia store, highlighting the key differences in syntax and structure. The example demonstrates how mutations are replaced with actions and how state, getters, and actions are differently implemented in Pinia.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-17-replace-vuex-with-pinia.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Old Vuex implementation\nShopware.State.registerModule('example', {\n    state: {\n        id: '',\n    },\n    getters: {\n        idStart(state) {\n            return state.id.substring(0, 4);\n        }\n    },\n    mutations: {\n        setId(state, id) {\n            state.id = id;\n        }\n    },\n    actions: {\n        async asyncFoo({ commit }, id) {\n            // Do some async stuff\n            return Promise.resolve(() => {\n                commit('setId', id);\n                \n                return id;\n            });\n        }\n    }\n});\n\n// New Pinia implementation\n// Notice that the mutation setId was removed! You can directly modify a Pinia store state after retrieving it with Shopware.Store.get.\nShopware.Store.register({\n    id: 'example',\n    state: () => ({\n        id: '',\n    }),\n    getters: {\n        idStart: () => this.id.substring(0, 4),\n    },\n    actions: {\n        async asyncFoo(id) {\n            // Do some async stuff\n            return Promise.resolve(() => {\n                this.id = id;\n\n                return id;\n            });\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Manufacturers using CountAggregation in PHP\nDESCRIPTION: Illustrates how to use CountAggregation to count the number of distinct manufacturers. It creates a Criteria object, adds the aggregation, and retrieves the result.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new CountAggregation('count-manufacturers', 'manufacturerId')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var CountResult $aggregation */\n$aggregation = $result->getAggregations()->get('count-manufacturers');\n\n$aggregation->getCount();\n```\n\n----------------------------------------\n\nTITLE: Filtering Storefront Search Results using Store Facade in Twig\nDESCRIPTION: Demonstrates how to use the store.search() method with a filter to find a storefront product by its product number.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'filter': [\n        { 'field': 'productNumber', 'type': 'equals', 'value': 'p1' }\n    ]\n} %}\n\n{% set product = services.store.search('product', criteria).first %}\n\n{% do page.addExtension('myProduct', product) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Flow Event with TagAware in PHP\nDESCRIPTION: Creates a custom BasicExampleEvent class that implements the TagAware interface to enable tag functionality in Flow Builder. This class defines event data and provides context and tag getters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\CreateTagAction\\Core\\Content\\Event;\n\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\Event\\EventData\\EntityType;\nuse Shopware\\Core\\Framework\\Event\\EventData\\EventDataCollection;\nuse Shopware\\Core\\System\\Tag\\TagDefinition;\nuse Shopware\\Core\\System\\Tag\\TagEntity;\nuse Swag\\CreateTagAction\\Core\\Framework\\Event\\TagAware;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass BasicExampleEvent extends Event implements TagAware\n{\n    public const EVENT_NAME = 'example.event';\n\n    private TagEntity $tag;\n\n    private Context $context;\n\n    public function __construct(Context $context, TagEntity $tag)\n    {\n        $this->tag = $tag;\n        $this->context = $context;\n    }\n\n    public function getName(): string\n    {\n        return self::EVENT_NAME;\n    }\n\n    public static function getAvailableData(): EventDataCollection\n    {\n        return (new EventDataCollection())\n            ->add('tag', new EntityType(TagDefinition::class));\n    }\n\n    public function getContext(): Context\n    {\n        return $this->context;\n    }\n\n    public function getTag(): TagEntity\n    {\n        return $this->tag;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware with Basic Setup\nDESCRIPTION: Command to install Shopware with basic setup, including admin user and default sales channel creation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console system:install --basic-setup\n```\n\n----------------------------------------\n\nTITLE: Creating Preview Template with Twig\nDESCRIPTION: This Twig template defines the preview representation of the custom block, showing simplified content with placeholder text and an image to give users a visual impression of the block's structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/preview/sw-cms-preview-my-image-text-reversed.html.twig\n{% block sw_cms_block_my_image_text_reversed_preview %}\n    <div class=\"sw-cms-preview-my-image-text-reversed\">\n        <div>\n            <h2>Lorem ipsum dolor</h2>\n            <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr.</p>\n        </div>\n        <img :src=\"assetFilter('/administration/static/img/cms/preview_mountain_small.jpg')\">\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining the Tax Provider Interface in Shopware (PHP)\nDESCRIPTION: Defines the `TaxProviderInterface` in PHP. Classes tagged with `shopware.tax.provider` must implement this interface. The `provideTax` method is called by the `TaxProviderProcessor` after the cart is calculated, taking the cart and sales channel context as input. It's expected to return a `TaxProviderStruct` containing the calculated taxes. Implementations should throw `TaxProviderOutOfScopeException` if they cannot handle the specific context, allowing the system to fall back to the next provider. Other exceptions signal errors.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-04-28-tax-providers.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\ninterface TaxProviderInterface\n{\n    /**\n     * @throws TaxProviderOutOfScopeException|\\Throwable\n     */\n    public function provideTax(Cart $cart, SalesChannelContext $context): TaxProviderStruct;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Route Class in PHP for Store API\nDESCRIPTION: This PHP class implements a cache layer for a custom Store API route by extending AbstractExampleRoute. It handles cache checking, retrieval, and storage with proper cache tags for invalidation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-caching-for-store-api-route.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/CachedExampleRoute.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Psr\\Log\\LoggerInterface;\nuse Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\Framework\\Adapter\\Cache\\AbstractCacheTracer;\nuse Shopware\\Core\\Framework\\Adapter\\Cache\\CacheCompressor;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator;\nuse Shopware\\Core\\Framework\\Util\\Json;\nuse Symfony\\Component\\Cache\\Adapter\\TagAwareAdapterInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n#[Route(defaults: ['_routeScope' => ['store-api']])]\nclass CachedExampleRoute extends AbstractExampleRoute\n{\n    private AbstractExampleRoute $decorated;\n\n    private TagAwareAdapterInterface $cache;\n\n    private EntityCacheKeyGenerator $generator;\n\n    private AbstractCacheTracer $tracer;\n\n    private array $states;\n\n    private LoggerInterface $logger;\n\n    public function __construct(\n        AbstractExampleRoute $decorated,\n        TagAwareAdapterInterface $cache,\n        EntityCacheKeyGenerator $generator,\n        AbstractCacheTracer $tracer,\n        LoggerInterface $logger\n    ) {\n        $this->decorated = $decorated;\n        $this->cache = $cache;\n        $this->generator = $generator;\n        $this->tracer = $tracer;\n        \n        // declares that this route can not be cached if the customer is logged in\n        $this->states = [CacheStateSubscriber::STATE_LOGGED_IN];\n        $this->logger = $logger;\n    }\n    \n    public function getDecorated(): AbstractExampleRoute\n    {\n        return $this->decorated;\n    }\n\n    #[Route(path: '/store-api/example', name: 'store-api.example.search', methods: ['GET','POST'], defaults: ['_entity' => 'swag_example'])]\n    public function load(Criteria $criteria, SalesChannelContext $context): ExampleRouteResponse\n    {\n        // The context is provided with a state where the route cannot be cached\n        if ($context->hasState(...$this->states)) {\n            return $this->getDecorated()->load($criteria, $context);\n        }\n\n        // Fetch item from the cache pool\n        $item = $this->cache->getItem(\n            $this->generateKey($context, $criteria)\n        );\n\n        try {\n            if ($item->isHit() && $item->get()) {\n                // Use cache compressor to uncompress the cache value\n                return CacheCompressor::uncompress($item);\n            }\n        } catch (\\Throwable $e) {\n            // Something went wrong when uncompress the cache item - we log the error and continue to overwrite the invalid cache item \n            $this->logger->error($e->getMessage());\n        }\n\n        $name = self::buildName();\n        // start tracing of nested cache tags and system config keys\n        $response = $this->tracer->trace($name, function () use ($criteria, $context) {\n            return $this->getDecorated()->load($criteria, $context);\n        });\n        \n        // compress cache content to reduce cache size\n        $item = CacheCompressor::compress($item, $response);\n\n        $item->tag(array_merge(\n            // get traced tags and configs        \n            $this->tracer->get(self::buildName()),\n            [self::buildName()]\n        ));\n\n        $this->cache->save($item);\n\n        return $response;\n    }\n    \n    public static function buildName(): string \n    {\n        return 'example-route';\n    }\n  \n    private function generateKey(SalesChannelContext $context, Criteria $criteria): string\n    {\n        $parts = [\n            self::buildName(),\n            // generate a hash for the route criteria\n            $this->generator->getCriteriaHash($criteria),\n            // generate a hash for the current context \n            $this->generator->getSalesChannelContextHash($context),\n        ];\n          \n        return md5(Json::encode($parts));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Controller in PHP for Shopware 6\nDESCRIPTION: PHP controller implementation that returns a timestamp as JSON response. The controller extends StorefrontController and includes route configuration for XmlHttpRequest compatibility.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-dynamic-content-via-ajax-calls.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagBasicExample\\Storefront\\Controller;\n\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n    #[Route(path: '/example', name: 'frontend.example.example', methods: ['GET'], defaults: ['XmlHttpRequest' => 'true'])]\n    public function showExample(): JsonResponse\n    {\n        return new JsonResponse(['timestamp' => (new \\DateTime())->format(\\DateTimeInterface::W3C)]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Client with Shop Authentication - PHP\nDESCRIPTION: Demonstrates how to set up and initialize the HTTP client using shop authentication. Shows the process of resolving a shop entity and creating a client instance that automatically handles OAuth2 tokens.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/05-http-client.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app = new AppConfiguration('Foo', 'test', 'http://localhost:6001/register/callback');\n// for a repository to save stores implementing \\Shopware\\App\\SDK\\Shop\\ShopRepositoryInterface, see FileShopRepository as an example\n$repository = ...;\n\n// Create a psr 7 request or convert it (HttpFoundation Symfony)\n$psrRequest = ...;\n\n$shopResolver = new \\Shopware\\App\\SDK\\Shop\\ShopResolver($repository);\n\n$shop = $shopResolver->resolveShop($psrRequest);\n\n$clientFactory = new Shopware\\App\\SDK\\HttpClient\\ClientFactory();\n$httpClient = $clientFactory->createClient($shop);\n\n$response = $httpClient->sendRequest($psrHttpRequest);\n```\n\n----------------------------------------\n\nTITLE: Filtering Products by Name in Shopware 6 (PHP)\nDESCRIPTION: PHP method to filter products by name using the EqualsFilter in Shopware 6. It shows how to add a filter to the Criteria object for specific field matching.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n\n    $products = $this->productRepository->search($criteria, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Requests using Shopware App PHP SDK\nDESCRIPTION: This PHP code snippet demonstrates how to use the RequestVerifier class from the Shopware App PHP SDK to authenticate registration requests. It simplifies the verification process by encapsulating the logic within the SDK.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-signature-verification.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$verifier = new \\Shopware\\App\\SDK\\Authentication\\RequestVerifier();\n$verifier->authenticateRegistrationRequest(\n    $request,\n    new AppConfiguration('AppName', 'AppSecret', 'register-confirm-url')\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Refund in Shopware 6 (JSON)\nDESCRIPTION: JSON request and response for processing a refund in Shopware 6. The request includes order and refund data. The response contains the refund status.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"order\": {\n    //...\n  },\n  \"refund\": {\n    //...\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"completed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Carts with CartProcessorInterface::process in PHP\nDESCRIPTION: Guideline for using the `\\Shopware\\Core\\Checkout\\Cart\\CartProcessorInterface::process` method. It's crucial that no database queries are executed within this method, as it runs multiple times sequentially to resolve dependencies within the cart, and queries would severely impact performance.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/cart-process.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Core\\Checkout\\Cart\\CartProcessorInterface::process\n```\n\n----------------------------------------\n\nTITLE: Initializing Repository Service Class\nDESCRIPTION: PHP class setup for handling data writing operations with injected repositories. Includes constructor for dependency injection of product and tax repositories.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\n\nclass WritingData\n{\n    private EntityRepository $productRepository;\n\n    private EntityRepository $taxRepository;\n\n    public function __construct(EntityRepository $productRepository, EntityRepository $taxRepository)\n    {\n        $this->productRepository = $productRepository;\n        $this->taxRepository = $taxRepository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Function in Template\nDESCRIPTION: Example of how to use the custom MD5 hash Twig function in a Storefront template, extending the header layout and displaying the hash result.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-twig-function.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/layout/header/header.html.twig' %}\n\n{% set md5Hash = createMd5Hash('Shopware is awesome') %}\n\n{% block layout_header_logo %}\n    {{ parent() }}\n\n    {{ md5Hash }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Data via Shopware API\nDESCRIPTION: Makes a POST request to Shopware's product search API to fetch product details including translations and associated language data. Handles the API response and error logging.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function __invoke(WebhookAction $action): void\n{\n    //...\n    $response = $client->post(\n        sprintf('%s/api/search/product', $action->shop->getShopUrl()),\n        [\n            'ids' => [$id],\n            'associations' => [\n                'translations' => [\n                    'associations' => [\n                        'language' => [\n                            'associations' => [\n                                'locale' => []\n                            ]\n                        ],\n                    ]\n                ],\n            ]\n        ]\n    );\n    \n    if (!$response->ok()) {\n        $this->logger->error('Could not fetch product', ['response' => $response->json()]);\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Mixin in Shopware Component\nDESCRIPTION: Demonstrates how to register a Shopware component that uses the notification mixin from the Administration framework. Shows mixin registration and usage within component methods for displaying success notifications.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/using-mixins.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <administration root>/components/swag-basic-example/index.js\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-basic-example', {\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    methods: {\n        greet: function () {\n            this.createNotificationSuccess({ title: 'Greetings' })\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom EntityCollection in Shopware 6 PHP\nDESCRIPTION: This snippet demonstrates how to create a custom EntityCollection class for Shopware 6, including method annotations for proper auto-completion.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityCollection;\n\n/**\n * @method void               add(ExampleEntity $entity)\n * @method void               set(string $key, ExampleEntity $entity)\n * @method ExampleEntity[]    getIterator()\n * @method ExampleEntity[]    getElements()\n * @method ExampleEntity|null get(string $key)\n * @method ExampleEntity|null first()\n * @method ExampleEntity|null last()\n */\nclass ExampleCollection extends EntityCollection\n{\n    protected function getExpectedClass(): string\n    {\n        return ExampleEntity::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriber in Services XML Configuration\nDESCRIPTION: Adds the BusinessEventCollectorSubscriber to the container services configuration, making it available for use.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Swag\\CreateTagAction\\Core\\Content\\Subscriber\\BusinessEventCollectorSubscriber\">\n    <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Event\\BusinessEventCollector\"/>\n    <tag name=\"kernel.event_subscriber\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Definitions for Custom Entity in Shopware 6\nDESCRIPTION: This enhanced ExampleDefinition class fully implements the entity fields using Shopware's DAL field types. It defines an ID field with PrimaryKey and Required flags, string fields for name and description, and a boolean field for the active status.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\BoolField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\StringField;\n\nclass ExampleDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'swag_example';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            (new StringField('name', 'name')),\n            (new StringField('description', 'description')),\n            (new BoolField('active', 'active'))\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Cart Processor in Services XML\nDESCRIPTION: XML configuration to register the custom cart processor in Shopware's DI container with appropriate priority.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-items.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<services>\n    ...\n    <service id=\"Swag\\BasicExample\\Core\\Checkout\\Cart\\ExampleProcessor\">\n        <tag name=\"shopware.cart.processor\" priority=\"4800\"/>\n    </service>\n</services>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Shopware Customer Indexer Event\nDESCRIPTION: This PHP class demonstrates how to create a subscriber that listens to the CustomerIndexerEvent in Shopware. It logs customer updates to the log_entry table using a direct database connection to avoid triggering additional indexing events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-indexer.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Checkout\\Customer\\Event\\CustomerIndexerEvent;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Doctrine\\MultiInsertQueryQueue;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass Subscriber implements EventSubscriberInterface\n{\n    /**\n     * @var Connection\n     */\n    private Connection $connection;\n\n    public function __construct(Connection $connection)\n    {\n        $this->connection = $connection;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n//            CustomerIndexerEvent::class => 'onCustomerIndexerHandle'\n        ];\n    }\n\n    public function onCustomerIndexerHandle(CustomerIndexerEvent $customerIndexerEvent)\n    {\n        $queue = new MultiInsertQueryQueue($this->connection);\n        foreach ($customerIndexerEvent->getIds() as $id) {\n            $this->addLog($id, $queue);\n        }\n        $queue->execute();\n    }\n\n    private function addLog($customerId, MultiInsertQueryQueue $queue)\n    {\n        $queue->addInsert('log_entry', [\n            'id' => Uuid::randomBytes(),\n            'message' => 'Updated customer with id: ' . $customerId,\n            'level' => 1,\n            'channel' => 'debug'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cart Collector in Shopware 6 (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a custom cart collector class in Shopware 6. It implements the CartDataCollectorInterface and defines a collect method to gather and set additional data for the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-processor-collector.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartBehavior;\nuse Shopware\\Core\\Checkout\\Cart\\CartDataCollectorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass CustomCartCollector implements CartDataCollectorInterface\n{\n    public function collect(CartDataCollection $data, Cart $original, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        // Do your stuff in order to collect data, this is just an example method call\n        $newData = $this->collectData();\n\n        $data->set('uniqueKey', $newData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Cart Processor for Nested Line Items in PHP\nDESCRIPTION: This PHP class `PluginCartProcessor` demonstrates how a custom cart processor should handle the processing of nested line items (e.g., products and credits) associated with a specific plugin line item type. It injects core processors (`CreditCartProcessor`, `ProductCartProcessor`) and uses them within its `process` method to calculate the nested items. The `calculate` method isolates the children of the plugin line item into temporary carts, processes them using the injected core processors sequentially, and then updates the original line item's children with the calculated results. This approach ensures that plugins manage their own nested structures while leveraging core calculation logic.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-03-24-nested-line-items.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Checkout\\Cart\\Error\\IncompleteLineItemError;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass PluginCartProcessor implements CartProcessorInterface\n{\n    /**\n     * @var CreditCartProcessor\n     */\n    private $creditCartProcessor;\n\n    /**\n     * @var ProductCartProcessor\n     */\n    private $productCartProcessor;\n\n    public function __construct(CreditCartProcessor $creditCartProcessor, ProductCartProcessor $productCartProcessor)\n    {\n        $this->creditCartProcessor = $creditCartProcessor;\n        $this->productCartProcessor = $productCartProcessor;\n    }\n\n    public function process(\n        CartDataCollection $data,\n        Cart $original,\n        Cart $toCalculate,\n        SalesChannelContext $context,\n        CartBehavior $behavior\n    ): void {\n        $lineItems = $original->getLineItems()->filterType('plugin-line-item-type');\n\n        /*\n         * Structure of the plugin line item:\n         * - plugin line item\n         *      - product line item(s)\n         *      - credit line item(s)\n         */\n        foreach ($lineItems as $lineItem) {\n            $this->calculate($lineItem, $original, $context, $behavior, $data);\n            $toCalculate->add($lineItem);\n        }\n    }\n\n    private function calculate(LineItem $lineItem, Cart $original, SalesChannelContext $context, CartBehavior $behavior, CartDataCollection $data): void\n    {\n        if (!$lineItem->hasChildren()) {\n            $original->remove($lineItem->getId());\n            $original->addErrors(new IncompleteLineItemError($lineItem->getId(), 'children'));\n\n            return;\n        }\n\n        $tempOriginalCart = new Cart('temp-original', $original->getToken());\n        $tempCalculateCart = new Cart('temp-calculate', $original->getToken());\n\n        // only provide the nested products and credit items\n        $tempOriginalCart->setLineItems(\n            $lineItem->getChildren()\n        );\n\n        // first start product calculation - all required data for the product processor is already loaded and stored in the CartDataCollection\n        $this->productCartProcessor->process($data, $tempOriginalCart, $tempCalculateCart, $context, $behavior);\n\n        // now calculate the credit, the credit is scoped to the already calculated products - all required data for the credit processor is already loaded and stored in the CartDataCollection\n        $this->creditCartProcessor->process($data, $tempOriginalCart, $tempCalculateCart, $context, $behavior);\n\n        // after all line items calculated - use them as new children\n        $lineItem->setChildren(\n            $tempCalculateCart->getLineItems()\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscriber for SEO URL Updates in PHP\nDESCRIPTION: This PHP code demonstrates how to create an event subscriber that listens for entity write events and triggers SEO URL updates using the SeoUrlUpdater service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Content\\Seo\\SeoUrlUpdater;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenEvent;\nuse Swag\\BasicExample\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ExamplePageSeoUrlRoute;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DynamicSeoUrlPageSubscriber implements EventSubscriberInterface\n{\n    private SeoUrlUpdater $seoUrlUpdater;\n\n    public function __construct(SeoUrlUpdater $seoUrlUpdater) {\n        $this->seoUrlUpdater = $seoUrlUpdater;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            'swag_example.written' => 'onEntityWritten'\n        ];\n    }\n\n    public function onEntityWritten(EntityWrittenEvent $event): void\n    {\n        $this->seoUrlUpdater->update(ExamplePageSeoUrlRoute::ROUTE_NAME, $event->getIds());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using v-responsive Directive in Vue Template\nDESCRIPTION: Demonstrates how to use the v-responsive directive to dynamically apply classes based on element dimensions. The example shows applying a compact class when width is below 1620px with a 200ms throttle.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/ui-ux/adding-responsive-behavior.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input v-responsive=\"{ 'is--compact': el => el.width <= 1620, timeout: 200 }\">\n```\n\n----------------------------------------\n\nTITLE: Registering Module with Multiple Routes in Shopware 6\nDESCRIPTION: This code snippet shows how to register a Shopware 6 module with multiple routes, including an overview and a detail route with dynamic parameters and meta data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-custom-route.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Module.register('swag-example', {\n    color: '#ff3d58',\n    icon: 'default-shopping-paper-bag-product',\n    title: 'My custom module',\n    description: 'Manage your custom module here.',\n\n    routes: {\n        overview: {\n            component: 'swag-example-list',\n            path: 'overview'\n        },\n        // This is our second route\n        detail: {\n            component: 'sw-example-detail',\n            path: 'detail/:id',\n            meta: {\n                parentPath: 'swag.example.list'\n            }\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom Events in PHP\nDESCRIPTION: Demonstrates how to subscribe to custom events in a subscriber class, showing both named and unnamed event subscription methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getSubscribedEvents(): array\n{\n    return [\n        'some_event' => 'registeringToSomeEvent',\n        // If there is no name applied to the event, the class name is the fallback\n        SomeEvent::class => 'registeringToSomeEvent'\n    ];\n}\n\npublic function registeringToSomeEvent(SomeEvent $event): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stock Storage Decorator in PHP\nDESCRIPTION: A PHP class that decorates AbstractStockStorage to handle custom stock management. It implements methods for altering stock levels and communicating with external stock APIs. The class handles various stock alteration scenarios and provides integration with third-party services.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/implementing-your-own-stock-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\Example\\Service;\n\nuse Shopware\\Core\\Content\\Product\\Stock\\AbstractStockStorage;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockData;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockDataCollection;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockLoadRequest;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockAlteration;\n\nclass StockStorageDecorator extends AbstractStockStorage\n{\n    public function __construct(private AbstractStockStorage $decorated, private MyStockApi $stockApi)\n    {\n    }\n\n    public function getDecorated(): AbstractStockStorage\n    {\n        return $this->decorated;\n    }\n\n    public function load(StockLoadRequest $stockRequest, SalesChannelContext $context): StockDataCollection\n    {\n        return $this->decorated->load($stockRequest, $context);\n    }\n\n    /**\n     * @param list<StockAlteration> $changes  \n     */\n    public function alter(array $changes, Context $context): void\n    {\n        foreach ($changes as $alteration) {\n            $this->stockApi->updateStock($alteration->productId, $alteration->newQuantity);\n        }\n        \n        $this->decorated->alter($changes, $context);\n    }\n\n    public function index(array $productIds, Context $context): void\n    {\n        $this->decorated->index($productIds, $context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CMS Element Main Entry\nDESCRIPTION: Main entry point for the custom CMS element that imports the Dailymotion element module into the administration interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\nimport './module/sw-cms/elements/dailymotion';\n```\n\n----------------------------------------\n\nTITLE: Creating ExampleController in PHP for Shopware 6 Storefront\nDESCRIPTION: Defines an ExampleController class with a route for a custom storefront page. It extends StorefrontController and uses Symfony routing attributes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n    #[Route(path: '/example-page', name: 'frontend.example.page', methods: ['GET'])]\n    public function examplePage(): Response\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cart Validator in PHP\nDESCRIPTION: Custom cart validator class that implements CartValidatorInterface to validate line items with custom payload. The validator checks for specific payload data and adds errors to the error collection if validation fails.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-validator.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart\\Custom;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartValidatorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\Error\\ErrorCollection;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Swag\\BasicExample\\Core\\Checkout\\Cart\\Custom\\Error\\CustomCartBlockedError;\n\nclass CustomCartValidator implements CartValidatorInterface\n{\n    public function validate(Cart $cart, ErrorCollection $errorCollection, SalesChannelContext $salesChannelContext): void\n    {\n        foreach ($cart->getLineItems()->getFlat() as $lineItem) {\n            if (!array_key_exists('customPayload', $lineItem->getPayload()) || $lineItem->getPayload()['customPayload'] !== 'example') {\n                $errorCollection->add(new CustomCartBlockedError($lineItem->getId()));\n\n                return;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Data\nDESCRIPTION: Shows how to update an existing entity with change tracking and manual update handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            entityId: '1de38487abf04705810b719d4c3e8faa',\n            entity: undefined\n        }\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get(this.entityId, Shopware.Context.api)\n            .then(entity => {\n                this.entity = entity;\n            });\n    },\n\n    methods: {\n        // a function which is called over the ui\n        updateTrigger() {\n            this.entity.name = 'updated';\n\n            // sends the request immediately\n            this.productRepository\n                .save(this.entity, Shopware.Context.api)\n                .then(() => {\n                    // the entity is stateless, the data has be fetched from the server, if required\n                    this.productRepository\n                        .get(this.entityId, Shopware.Context.api)\n                        .then(entity => {\n                            this.entity = entity;\n                        });\n                });\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Field Repository and Criteria in JavaScript\nDESCRIPTION: Configuration of the custom field repository and search criteria. Includes filtering for product-related custom fields and sorting based on field position.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-custom-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed: {\n    customFieldSetRepository() {\n        return this.repositoryFactory.create('custom_field_set');\n    },\n\n    customFieldSetCriteria() {\n        const criteria = new Criteria();\n        criteria.addFilter(Criteria.equals('relations.entityName', 'product'));\n        criteria\n            .getAssociation('customFields')\n            .addSorting(Criteria.sort('config.customFieldPosition', 'ASC', true));\n        return criteria;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Tool for Shopware Plugin Upgrade\nDESCRIPTION: This bash command executes the Shopware admin code migration tool. It automates the process of replacing old components with new Meteor Components, adds guidance comments for manual migration, and fixes some deprecated code.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/meteor-components.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Main command which also outputs the help text\ncomposer run admin:code-mods\n\n## Example with arguments\n# composer run admin:code-mods -- --plugin-name example-plugin --fix -v 6.7\n```\n\n----------------------------------------\n\nTITLE: Previewing Media in Shopware 6 Administration\nDESCRIPTION: This snippet illustrates how to use the sw-media-preview-v2 component to preview media files. It shows the basic usage with a source property, which can be an ID or path to the media file to be previewed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/handling-media.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<sw-media-preview-v2\n    :source=\"some-id\">\n</sw-media-preview-v2>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product IDs using Repository Facade in Twig\nDESCRIPTION: Shows how to use the repository.ids() method to get the IDs of products matching a specific criteria.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'filter': [\n        { 'field': 'productNumber', 'type': 'equals', 'value': 'p1' }\n    ]\n} %}\n\n{% set productIds = services.repository.ids('product', criteria).ids %}\n\n{% do page.addArrayExtension('myProductIds', {\n    'ids': productIds\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExampleEvent with CustomerAware and ShopNameAware Interfaces in PHP\nDESCRIPTION: This snippet demonstrates how to create an ExampleEvent class that implements both CustomerAware and ShopNameAware interfaces, allowing access to customer and shop name data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\ExamplePlugin\\Core\\Checkout\\Customer\\Event;\n\nuse Shopware\\Core\\Checkout\\Customer\\CustomerEntity;\nuse Shopware\\Core\\Framework\\Event\\CustomerAware;\nuse Shopware\\Core\\Framework\\Event\\ShopNameAware;\nuse Shopware\\Core\\Framework\\Event\\EventData\\EventDataCollection;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass ExampleEvent extends Event implements CustomerAware, ShopNameAware\n{\n    public const EVENT_NAME = 'example.event';\n\n    private CustomerEntity $customer;\n\n    public function __construct(CustomerEntity $customer, string $shopName)\n    {\n        $this->customer = $customer;\n        $this->shopName = $shopName;\n    }\n\n    public function getName(): string\n    {\n        return self::EVENT_NAME;\n    }\n\n    public function getCustomerId(): string\n    {\n        return $this->customer->getId();\n    }\n\n    public static function getAvailableData(): EventDataCollection\n    {\n        return (new EventDataCollection());\n    }\n\n    public function getShopName(): string\n    {\n        return $this->shopName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Product Detail Component in Shopware 6 Plugin\nDESCRIPTION: This JavaScript code overrides the sw-product-detail component with a custom template in a Shopware 6 plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './sw-product-detail.html.twig';\n\nShopware.Component.override('sw-product-detail', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Flag to an Entity Field in Shopware 6\nDESCRIPTION: Demonstrates how to add a single flag (PrimaryKey) to an IdField in a Shopware 6 entity definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-flags.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n(new IdField('id', 'id'))->addFlags(new PrimaryKey())\n```\n\n----------------------------------------\n\nTITLE: Creating ExamplePagelet Struct in Shopware\nDESCRIPTION: A PHP class that extends Shopware's Pagelet class to store data for a custom pagelet. This struct holds the data retrieved by the loader and makes it available to the template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-pagelet.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Storefront/Pagelet/Example/ExamplePagelet.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Pagelet\\Example;\n\nuse Shopware\\Storefront\\Pagelet\\Pagelet;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\n\nclass ExamplePagelet extends Pagelet\n{\n    protected ExampleEntity $exampleData;\n\n    public function getExampleData(): ExampleEntity\n    {\n        return $this->exampleData;\n    }\n\n    public function setExampleData(ExampleEntity $exampleData): void\n    {\n        $this->exampleData = $exampleData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Absolute Discount to Cart in Twig\nDESCRIPTION: Example showing how to add an absolute discount to the cart using the cart service. Creates a price collection and adds a fixed discount amount.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.items.count <= 0 %}\n    {% return %}\n{% endif %}\n\n{% if services.cart.items.has('my-discount') %}\n    {% return %}\n{% endif %}\n\n{% set price = services.cart.price.create({\n    'default': { 'gross': -19.99, 'net': -19.99}\n}) %}\n\n{% do services.cart.discount('my-discount', 'absolute', price, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Product and Custom Entity Events in PHP\nDESCRIPTION: Demonstrates how to subscribe to both built-in Shopware product events and custom entity events in a subscriber class. It shows using both event class constants and string event names.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getSubscribedEvents(): array\n{\n    return [\n        ProductEvents::PRODUCT_LOADED_EVENT => 'onProductsLoaded',\n        'custom_entity.written' => 'onCustomEntityWritten'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag Aware Interface in PHP for Flow Builder\nDESCRIPTION: This code defines a TagAware interface that extends FlowEventAware, which is necessary for creating custom flow actions. The interface includes constants for tag data and requires implementation of getTag() method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Framework/Event/TagAware.php\n<?php declare(strict_types=1);\nnamespace Swag\\ExamplePlugin\\Core\\Framework\\Event;\nuse Shopware\\Core\\Framework\\Event\\FlowEventAware;\nuse Shopware\\Core\\Framework\\Event\\IsFlowEventAware;\n\n#[IsFlowEventAware]\ninterface TagAware extends FlowEventAware\n{\n    ...\n\n    public const TAG = 'tag';\n\n    public const TAG_ID = 'tagId';\n\n    public function getTag();\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Payment Handler in PHP for Shopware 6\nDESCRIPTION: This code snippet demonstrates a synchronous payment handler implementation in Shopware 6. It sets the order transaction state to 'paid' without redirecting the customer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\SynchronousPaymentHandlerInterface;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\SyncPaymentTransactionStruct;\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass ExamplePayment implements SynchronousPaymentHandlerInterface\n{\n    private OrderTransactionStateHandler $transactionStateHandler;\n\n    public function __construct(OrderTransactionStateHandler $transactionStateHandler)\n    {\n        $this->transactionStateHandler = $transactionStateHandler;\n    }\n\n    public function pay(SyncPaymentTransactionStruct $transaction, RequestDataBag $dataBag, SalesChannelContext $salesChannelContext): void\n    {\n        $context = $salesChannelContext->getContext();\n        $this->transactionStateHandler->paid($transaction->getOrderTransaction()->getId(), $context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Storefront Controller in PHP\nDESCRIPTION: Basic implementation of a Storefront controller class that extends StorefrontController with route scope configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-controller.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExampleProcessor for Cart Discounts in Shopware\nDESCRIPTION: This code snippet defines an ExampleProcessor class that implements CartProcessorInterface to add discounts to cart items containing 'Example' in their name. It uses PercentagePriceCalculator to apply a 10% discount.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-discounts.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartBehavior;\nuse Shopware\\Core\\Checkout\\Cart\\CartProcessorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemCollection;\nuse Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator;\nuse Shopware\\Core\\Checkout\\Cart\\Price\\Struct\\PercentagePriceDefinition;\nuse Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass ExampleProcessor implements CartProcessorInterface\n{\n    private PercentagePriceCalculator $calculator;\n\n    public function __construct(PercentagePriceCalculator $calculator)\n    {\n        $this->calculator = $calculator;\n    }\n\n    public function process(CartDataCollection $data, Cart $original, Cart $toCalculate, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        $products = $this->findExampleProducts($toCalculate);\n\n        // no example products found? early return\n        if ($products->count() === 0) {\n            return;\n        }\n\n        $discountLineItem = $this->createDiscount('EXAMPLE_DISCOUNT');\n\n        // declare price definition to define how this price is calculated\n        $definition = new PercentagePriceDefinition(\n            -10,\n            new LineItemRule(LineItemRule::OPERATOR_EQ, $products->getKeys())\n        );\n\n        $discountLineItem->setPriceDefinition($definition);\n\n        // calculate price\n        $discountLineItem->setPrice(\n            $this->calculator->calculate($definition->getPercentage(), $products->getPrices(), $context)\n        );\n\n        // add discount to new cart\n        $toCalculate->add($discountLineItem);\n    }\n\n    private function findExampleProducts(Cart $cart): LineItemCollection\n    {\n        return $cart->getLineItems()->filter(function (LineItem $item) {\n            // Only consider products, not custom line items or promotional line items\n            if ($item->getType() !== LineItem::PRODUCT_LINE_ITEM_TYPE) {\n                return false;\n            }\n\n            $exampleInLabel = stripos($item->getLabel(), 'example') !== false;\n\n            if (!$exampleInLabel) {\n                return false;\n            }\n\n            return $item;\n        });\n    }\n\n    private function createDiscount(string $name): LineItem\n    {\n        $discountLineItem = new LineItem($name, 'example_discount', null, 1);\n\n        $discountLineItem->setLabel('Our example discount!');\n        $discountLineItem->setGood(false);\n        $discountLineItem->setStackable(false);\n        $discountLineItem->setRemovable(false);\n\n        return $discountLineItem;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cart Calculation in Shopware\nDESCRIPTION: Demonstrates how to add products and recalculate the cart. Shows basic cart manipulation with manual calculation trigger.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.products.add(productId) %}\n\n{% do services.cart.calculate() %}\n```\n\n----------------------------------------\n\nTITLE: Shopware Plugin Inheritance Structure\nDESCRIPTION: Illustrates the inheritance hierarchy of a Shopware plugin, showing how it extends the Symfony Bundle class through multiple layers. This demonstrates that all Shopware plugins are also Symfony bundles internally.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugins-for-symfony-developers.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// \nclass YourNamespace\\PluginName extends\n\n    // plugin lifecycles\n    abstract class Shopware\\Core\\Framework\\Plugin extends\n\n        // adds support for migrations, filesystem, events, themes\n        abstract class Shopware\\Core\\Framework\\Bundle extends\n\n            // Symfony base bundle\n            abstract class Symfony\\Component\\HttpKernel\\Bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in XML\nDESCRIPTION: XML configuration for registering both API and Storefront controller routes in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <import resource=\"../../Core/**/*Route.php\" type=\"attribute\" />\n    <import resource=\"../../Storefront/**/*Controller.php\" type=\"attribute\" />\n</routes>\n```\n\n----------------------------------------\n\nTITLE: RepositoryIterator Usage in Shopware 6\nDESCRIPTION: Demonstrates how to use RepositoryIterator for handling large datasets efficiently by processing data in batches.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->setLimit(500);\n\n    $iterator = new RepositoryIterator($this->productRepository, $context, $criteria);\n\n    while (($result = $iterator->fetch()) !== null) {\n        $products = $result->getEntities();\n\n        // Do something with the products\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Search Criteria Structure in Shopware\nDESCRIPTION: Example of a typical search criteria JSON structure showing associations, includes, and calculated price fields\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 10,\n  \"associations\": {\n    \"manufacturer\": {},\n    \"propertyIds\": {},\n    \"cover\": {},\n    \"options\": {\n      \"associations\": {\n        \"productOptions\": {},\n        \"group\": {}\n      }\n    }\n  },\n  \"includes\": {\n    \"product\": [\n      \"calculatedPrice\",\n      \"cover\",\n      \"id\",\n      \"translated\",\n      \"seoUrls\",\n      \"manufacturer\",\n      \"propertyIds\",\n      \"options\"\n    ],\n    \"product_media\": [\n      \"media\"\n    ],\n    \"media\": [\n      \"thumbnails\",\n      \"width\",\n      \"height\",\n      \"url\"\n    ],\n    \"calculated_price\": [\n      \"unitPrice\",\n      \"quantity\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Storefront Template to Add External JavaScript in Shopware 6\nDESCRIPTION: This snippet demonstrates how to extend the Storefront meta template to add an external JavaScript library alongside the default Storefront scripts. It extends the layout_head_javascript_hmr_mode block to preserve the core functionality while adding a new script.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-javascript-as-script-tag.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# <plugin root>/src/Resources/views/storefront/layout/meta.html.twig #}\n{% sw_extends '@Storefront/storefront/layout/meta.html.twig' %}\n\n{% block layout_head_javascript_hmr_mode %}\n    {# Renders Storefront script: <script src=\"https://your-shop.example/theme/747e1c6a73cf4d70f5e831b30554dd15/js/all.js?1698139296\" defer></script> #}\n    {{ parent() }}\n\n    {# Your script #}\n    <script src=\"https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.min.js\" defer></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Registration with XML in Shopware 6\nDESCRIPTION: XML configuration for registering routes in Shopware 6. This imports all route classes from the Core directory that match the pattern *Route.php using attributes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/routes.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <import resource=\"../../Core/**/*Route.php\" type=\"attribute\" />\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Accessing Associations in Shopware Component\nDESCRIPTION: This snippet demonstrates how to access different types of associations (ManyToOne, ManyToMany, OneToMany) within a Shopware component. It shows how to use the repository factory, create criteria, and fetch associated data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Criteria } = Shopware.Data;\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined\n        }\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        productCriteria() {\n            return new Criteria()\n                .addAssociation('manufacturer')\n                .addAssociation('categories')\n                .addAssociation('prices');\n        }\n    },\n\n    created() {\n        this.repository = this.repositoryFactory.create('product');\n\n        const entityId = '66338d4e19f749fd90b59032134ecb74';\n\n        this.repository\n            .get(entityId, Shopware.Context.api, this.productCriteria)\n            .then(product => {\n                this.product = product;\n\n                // ManyToOne: contains an entity class with the manufacturer data\n                console.log(this.product.manufacturer);\n\n                // ManyToMany: contains an entity collection with all categories.\n                // contains a source property with an api route to reload this data (/product/{id}/categories)\n                console.log(this.product.categories);\n\n                // OneToMany: contains an entity collection with all prices\n                // contains a source property with an api route to reload this data (/product/{id}/prices)            \n                console.log(this.product.prices);\n            });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic JavaScript Plugin for Shopware 6\nDESCRIPTION: Basic implementation of a custom JavaScript plugin that extends Shopware's PluginBaseClass.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/example-plugin/example-plugin.plugin.js\nconst { PluginBaseClass } = window;\n\nexport default class ExamplePlugin extends PluginBaseClass {\n}\n```\n\n----------------------------------------\n\nTITLE: Flagging Fields as Inheritable in Entity Definition in PHP\nDESCRIPTION: Code that adds the Inherited flag to fields in an entity definition to mark them as inheritable from parent entities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n\n        new ParentFkField(self::class),\n        new ParentAssociationField(self::class, 'id'),\n        new ChildrenAssociationField(self::class),\n\n        (new StringField('name', 'name'))->addFlags(new Inherited()),\n        (new StringField('description', 'description'))->addFlags(new Inherited()),\n        (new BoolField('active', 'active'))->addFlags(new Inherited()),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Product Prices in the Product-Pricing Hook\nDESCRIPTION: Code example demonstrating various methods to modify product prices including resetting prices, direct price changes, subtraction, addition, discounts, and surcharges. It also shows how to manage graduated prices and cheapest price calculations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-01-app-script-product-pricing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{% foreach hook.products as product %}\n    {# allow resetting product prices #}\n    {% do product.calculatedCheapestPrice.reset %}\n    {% do product.calculatedPrices.reset %}\n    {# not allowed to RESET the default price otherwise it is not more valid\n    \n    {# get control of the default price calculation #}\n    {% set price = services.prices.create({\n       'default': { 'gross': 20, 'net': 20 },\n       'USD': { 'gross': 15, 'net': 15 },\n       'EUR': { 'gross': 10, 'net': 10 }\n    }) %}\n    \n    {# directly changes the price to a fix value #}\n    {% do product.calculatedPrice.change(price) %}\n    \n    {# manipulate the price and subtract the provided price object #}\n    {% do product.calculatedPrice.minus(price) %}\n    \n    {# manipulate the price and add the provided price object #}\n    {% do product.calculatedPrice.plus(price) %}\n    \n    {# the following examples show how to deal with percentage manipulation #}\n    {% do product.calculatedPrice.discount(10) %}\n    {% do product.calculatedPrice.surcharge(10) %}\n    \n    {# get control of graduated prices #}\n    {% do product.calculatedPrices.reset %}\n    {% do product.calculatedPrices.change([\n        { to: 20, price: services.prices.create({ 'default': { 'gross': 15, 'net': 15} }) },\n        { to: 30, price: services.prices.create({ 'default': { 'gross': 10, 'net': 10} }) },\n        { to: null, price: services.prices.create({ 'default': { 'gross': 5, 'net': 5} }) },\n    ]) %}\n    \n    {# after hook => walk through prices and fix \"from/to\" values #}\n    \n    {% do product.calculatedCheapestPrice.change(price) %}\n    {% do product.calculatedCheapestPrice.minus(price) %}\n    {% do product.calculatedCheapestPrice.plus(price) %}\n    {% do product.calculatedCheapestPrice.discount(10) %}\n    {% do product.calculatedCheapestPrice.surcharge(10) %}\n\n{% endforeach %}\n```\n\n----------------------------------------\n\nTITLE: Creating an English Translation JSON File in Shopware 6\nDESCRIPTION: Example of an English translation file for Shopware 6 with nested objects and placeholders. The file demonstrates how to structure translations and use template variables enclosed in % symbols.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// <extension root>/src/Resources/snippet/en_GB/example.en-GB.json\n{\n  \"header\": {\n    \"example\": \"Our example header\"\n  },\n  \"soldProducts\": \"Sold about %count% products in %country%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from SQL to Redis Storage\nDESCRIPTION: Specific example of migrating number range data from SQL to Redis storage using the CLI command.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/number-ranges.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbin/console number-range:migrate SQL Redis\n```\n\n----------------------------------------\n\nTITLE: Implementing MigrationContext Class in PHP\nDESCRIPTION: Core implementation of the MigrationContext class that extends Struct and implements MigrationContextInterface. It provides methods to manage migration data including profile access, connection handling, run UUID management, dataset operations, pagination controls, and gateway configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/migration-context.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Migration;\n\nuse Shopware\\Core\\Framework\\Struct\\Struct;\nuse SwagMigrationAssistant\\Migration\\Connection\\SwagMigrationConnectionEntity;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSet\\DataSet;\nuse SwagMigrationAssistant\\Migration\\Gateway\\GatewayInterface;\nuse SwagMigrationAssistant\\Migration\\Profile\\ProfileInterface;\n\nclass MigrationContext extends Struct implements MigrationContextInterface\n{\n    /* ... */\n\n    public function getProfile(): ProfileInterface\n    {\n        return $this->profile;\n    }\n\n    public function getConnection(): ?SwagMigrationConnectionEntity\n    {\n        return $this->connection;\n    }\n\n    public function getRunUuid(): string\n    {\n        return $this->runUuid;\n    }\n\n    public function getDataSet(): ?DataSet\n    {\n        return $this->dataSet;\n    }\n\n    public function setDataSet(DataSet $dataSet): void\n    {\n        $this->dataSet = $dataSet;\n    }\n\n    public function getOffset(): int\n    {\n        return $this->offset;\n    }\n\n    public function getLimit(): int\n    {\n        return $this->limit;\n    }\n\n    public function getGateway(): GatewayInterface\n    {\n        return $this->gateway;\n    }\n\n    public function setGateway(GatewayInterface $gateway): void\n    {\n        $this->gateway = $gateway;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Entities in Shopware 6\nDESCRIPTION: This snippet shows two approaches to add custom fields to entities in Shopware 6. The first uses the EntityCustomFieldsTrait, while the second uses the CustomFields attribute directly for more control.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityCustomFieldsTrait;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    use EntityCustomFieldsTrait;\n    \n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n}\n\n// Alternative approach\n\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\CustomFields;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n    \n    /**\n     * @var array<string, mixed>|null\n     */\n    #[CustomFields]\n    public ?array $customFields = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the FlowFactory for StorableFlow Creation/Restoration (PHP)\nDESCRIPTION: The `FlowFactory` class is responsible for managing `StorableFlow` instances. The `create` method iterates through registered `Storer`s to populate the initial `$storedData` from a `FlowEventAware` event, then calls `restore`. The `restore` method takes stored data, creates a `StorableFlow` object, and iterates through `Storer`s again to restore the object data (`$data`) using the stored information.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass FlowFactory\n{    \n    ...\n    public function create(FlowEventAware $event)\n    {\n        $storedData = [];\n        foreach ($this->storer as $storer) {\n            // Storer are responsible to move the corresponding \n            // data from the original event \n            $storer->store($event, $storedData);\n        }\n        \n        return $this->restore($storedData);\n    }\n  \n    public function restore(array $stored = [], array $data = [])\n    {\n        $flow = new StorableFlow($stored, $data);\n      \n        foreach ($this->storer as $storer) {\n            $storer->restore($flow);\n        }\n  \n        return $flow;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML in Vue Components\nDESCRIPTION: Shows how to sanitize HTML content using both the sanitizer object and sanitize method in Vue components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/the-sanitizer-helper.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$sanitizer.sanitize('<svg><g/onload=alert(2)//<p>'); // becomes <svg><g></g></svg>\nthis.$sanitize('<img src=x onerror=alert(1)//>');\n```\n\n----------------------------------------\n\nTITLE: Setting High Priority for Custom Event Subscriber in PHP\nDESCRIPTION: This PHP code snippet sets a high priority (1000) for the onAddExampleEvent method in the getSubscribedEvents function. This ensures the custom event is added before other BusinessEventCollectorEvent subscribers.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic static function getSubscribedEvents()\n{\n   return [\n      BusinessEventCollectorEvent::NAME => ['onAddExampleEvent', 1000],\n   ];\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Modules in manifest.xml\nDESCRIPTION: Example of how to structure modules in the manifest.xml file, including creating a parent module and a child module.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-modules.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>myApp</name>\n        ...\n    </meta>\n    <admin>\n        <module name=\"myModules\"\n                source=\"https://example.com/promotion/view/promotion-module\"\n                parent=\"sw-catalogue\"\n                position=\"50\"\n        >\n            <label>My apps modules</label>\n            <label lang=\"de-DE\">Module meiner app</label>\n        </module>\n\n        <module name=\"someModule\"\n                source=\"https://example.com/promotion/view/promotion-module\"\n                parent=\"app-myApp-myModules\"\n                position=\"1\"\n        >\n            <label>Module underneath \"My apps modules\"</label>\n            <label lang=\"de-DE\">Modul unterhalb von \"Module meiner app\"</label>\n        </module>\n    </admin>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactional Flow Action in PHP for Shopware\nDESCRIPTION: This code snippet demonstrates how to create a Flow Action that runs inside a database transaction by implementing the TransactionalAction interface. It shows the basic structure of a CreateTagAction class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/action-transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\CreateTagAction\\Core\\Content\\Flow\\Dispatching\\Action;\n\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\FlowAction;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\TransactionalAction;\n\nclass CreateTagAction extends FlowAction implements TransactionalAction\n{\n    public function handleFlow(StorableFlow $flow): void\n    {        \n        //do stuff - will be wrapped in a transaction\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Decorating Elasticsearch Product Definition in Shopware\nDESCRIPTION: This PHP class decorates the Elasticsearch product definition to add custom fields and associations to the search index, including a custom string field, a one-to-one association, and a one-to-many association.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/elasticsearch/add-product-entity-extension-to-elasticsearch.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Swag\\BasicExample\\Elasticsearch\\Product;\n\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Elasticsearch\\Framework\\AbstractElasticsearchDefinition;\nuse Doctrine\\DBAL\\Connection;\nuse Swag\\BasicExample\\Subscriber\\ProductSubscriber;\n\nclass MyProductEsDecorator extends AbstractElasticsearchDefinition\n{\n    private AbstractElasticsearchDefinition $productDefinition;\n    private Connection $connection;\n\n    public function __construct(AbstractElasticsearchDefinition $productDefinition, Connection $connection)\n    {\n        $this->productDefinition = $productDefinition;\n        $this->connection = $connection;\n    }\n\n    public function getEntityDefinition(): EntityDefinition\n    {\n        return $this->productDefinition->getEntityDefinition();\n    }\n\n    public function buildTermQuery(Context $context, Criteria $criteria): BoolQuery\n    {\n        return $this->productDefinition->buildTermQuery($context, $criteria);\n    }\n\n    /**\n     * Extend the mapping with your own changes\n     * Take care to get the default mapping first by `$this->productDefinition->getMapping($context);`\n     */\n    public function getMapping(Context $context): array\n    {\n        $mapping = $this->productDefinition->getMapping($context);\n\n        //The mapping for a simple keyword field\n        $mapping['properties']['customString'] = AbstractElasticsearchDefinition::KEYWORD_FIELD;\n\n        // Adding an association as keyword\n        $mapping['properties']['oneToOneExampleExtension'] = [\n                'type' => 'nested',\n                'properties' => [\n                    'customString' => AbstractElasticsearchDefinition::KEYWORD_FIELD,\n            ],\n        ];\n\n        // Adding a nested field with id\n        $mapping['properties']['oneToManyExampleExtension'] = [\n            'type' => 'nested',\n            'properties' => [\n                'id' => AbstractElasticsearchDefinition::KEYWORD_FIELD,\n            ],\n        ];\n\n        return $mapping;\n    }\n\n    public function fetch(array $ids, Context $context): array\n    {\n\n```\n\n----------------------------------------\n\nTITLE: Registering an Entity Extension in Shopware Services\nDESCRIPTION: XML configuration to register the entity extension in the Symfony dependency injection container with the appropriate tag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Extension\\Content\\Product\\CustomExtension\">\n            <tag name=\"shopware.entity.extension\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Order Delivery State to Shipped Using OrderDeliveryRepository\nDESCRIPTION: Example showing how to update an order delivery state to 'shipped' using the order_delivery repository. The code filters for a specific order ID, retrieves the delivery ID, and uses the state machine to transition the state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function setOrderDeliveryToShipped(string $orderId, $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('orderId', $orderId));\n\n    $orderDeliveryEntityId = $this->orderDeliveryRepository->searchIds($criteria, $context)->firstId();\n\n    $this->stateMachineRegistry->transition(new Transition(\n        OrderDeliveryDefinition::ENTITY_NAME,\n        $orderDeliveryEntityId,\n        'ship',\n        'stateId'\n    ), $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BusinessEventCollectorSubscriber in PHP for Shopware Custom Event\nDESCRIPTION: This PHP class subscribes to the BusinessEventCollectorEvent and adds a custom ExampleEvent to the flow trigger list. It uses the BusinessEventCollector to define the new event and adds it to the collection with high priority.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\ExamplePlugin\\Core\\Checkout\\Customer\\Subscriber;\n\nuse Shopware\\Core\\Framework\\Event\\BusinessEventCollector;\nuse Shopware\\Core\\Framework\\Event\\BusinessEventCollectorEvent;\nuse Swag\\ExamplePlugin\\Core\\Checkout\\Customer\\Event\\ExampleEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass BusinessEventCollectorSubscriber implements EventSubscriberInterface\n{\n    private BusinessEventCollector $businessEventCollector;\n\n    public function __construct(BusinessEventCollector $businessEventCollector) {\n        $this->businessEventCollector = $businessEventCollector;\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            BusinessEventCollectorEvent::NAME => ['onAddExampleEvent', 1000],\n        ];\n    }\n\n    public function onAddExampleEvent(BusinessEventCollectorEvent $event): void\n    {\n        $collection = $event->getCollection();\n\n        $definition = $this->businessEventCollector->define(ExampleEvent::class);\n\n        if (!$definition) {\n            return;\n        }\n\n        $collection->set($definition->getName(), $definition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Cart Processor in Symfony DI Container\nDESCRIPTION: XML configuration for registering the cart processor and collector in Symfony's dependency injection container. Sets up service with required dependencies and defines processing priority through tags.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/change-price-of-item.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Checkout\\Cart\\OverwritePriceCollector\">\n            <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator\"/>\n\n            <!-- after product collector/processor -->\n            <tag name=\"shopware.cart.processor\" priority=\"4500\" />\n            <tag name=\"shopware.cart.collector\" priority=\"4500\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Sorted Query Results in Shopware 6\nDESCRIPTION: Shows how to add sorting to query results using FieldSorting, including offset and limit for pagination.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n    $criteria->setOffset(1);\n    $criteria->setLimit(1);\n    $criteria->addSorting(new FieldSorting('createdAt', FieldSorting::ASCENDING));\n\n    $product = $this->productRepository->search($criteria, $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Data Aggregation in Shopware 6\nDESCRIPTION: Demonstrates how to perform data aggregation, specifically calculating average product ratings using AvgAggregation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n\n    $criteria->addAssociation('productReviews');\n    $criteria->addAggregation(new AvgAggregation('avg-rating', 'productReviews.points'));\n\n    $products = $this->productRepository->search($criteria, $context);\n    $rating = $products->getAggregations()->get('avg-rating');\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Permissions in PHP Controller\nDESCRIPTION: Shows how to validate permissions in a PHP controller by checking the employee's role. Throws a PermissionDeniedException if the user lacks the required permission.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/guides/creating-own-permissions-via-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\npublic function employeeList(Request $request, SalesChannelContext $context): Response\n{\n    if (!$context->getCustomer()->getEmployee()->getRole()->can(PermissionCollectorSubscriber::EMPLOYEE_READ)) {\n        throw new PermissionDeniedException();\n    }\n...\n```\n\n----------------------------------------\n\nTITLE: Registering Asynchronous Component in Shopware 6\nDESCRIPTION: Demonstrates how to register a custom component asynchronously using Shopware.Component.register. This method improves loading performance by only loading the component when needed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('hello-world', () => import('./component/custom-component/hello-world'));\n```\n\n----------------------------------------\n\nTITLE: Implementing App Registration Process\nDESCRIPTION: Example of setting up an AppServer instance with registration endpoints using TypeScript. Shows how to handle authorization and callback routes with the SDK.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/01-getting_started.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppServer, InMemoryShopRepository } from '@shopware-ag/app-server-sdk'\n\nconst app = new AppServer({\n  appName: 'MyApp',\n  appSecret: 'my-secret',\n  authorizeCallbackUrl: 'http://localhost:3000/authorize/callback',\n}, new InMemoryShopRepository());\n\nexport default {\n  async fetch(request) {\n    const { pathname } = new URL(request.url);\n    if (pathname === '/authorize') {\n      return app.registration.authorize(request);\n    } else if (pathname === '/authorize/callback') {\n      return app.registration.authorizeCallback(request);\n    }\n\n    return new Response('Not found', { status: 404 });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Store API Route with OpenAPI/Swagger in JSON\nDESCRIPTION: JSON file in OpenAPI 3.0 format for documenting the Store API route in Swagger. This defines the endpoint, methods, parameters, request body, and response format.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// <plugin root>/src/Resources/Schema/StoreApi/example.json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": [],\n  \"paths\": {\n    \"/example\": {\n      \"post\": {\n        \"tags\": [\n          \"Example\",\n          \"Endpoints supporting Criteria \"\n        ],\n        \"summary\": \"Example entity endpoint\",\n        \"description\": \"Returns a list of example entities.\",\n        \"operationId\": \"example\",\n        \"requestBody\": {\n          \"required\": false,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"allOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/Criteria\"\n                  }\n                ]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns a list of example entities.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Example\"\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"ApiKey\": []\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract Route Class for Store API in PHP\nDESCRIPTION: Creates an abstract class defining the contract for the Store API route. It includes a getDecorated method for the decoration pattern and a load method to handle data retrieval.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/AbstractExampleRoute.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nabstract class AbstractExampleRoute\n{\n    abstract public function getDecorated(): AbstractExampleRoute;\n\n    abstract public function load(Criteria $criteria, SalesChannelContext $context): ExampleRouteResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Search Tag for Custom Entity in Shopware 6 Administration\nDESCRIPTION: This code adds a search tag for a custom entity type in Shopware 6 Administration. It uses a service decorator to add the type to the searchTypeService, specifying entity name, placeholder snippet, listing route, and visibility settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Application } = Shopware;\n\nApplication.addServiceProviderDecorator('searchTypeService', searchTypeService => {\n    searchTypeService.upsertType('foo_bar', {\n        entityName: 'foo_bar',\n        placeholderSnippet: 'foo-bar.general.placeholderSearchBar',\n        listingRoute: 'foo.bar.index',\n        hideOnGlobalSearchBar: false,\n    });\n\n    return searchTypeService;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a custom component in Shopware Administration\nDESCRIPTION: Demonstrates how to register a custom component using the Component.register() method from the Shopware object. This is used to create reusable building blocks for implementing features.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/the-shopware-object.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Component } = Shopware;\n\nComponent.register('sw-dashboard-index', {\n    template,\n});\n```\n\n----------------------------------------\n\nTITLE: Using ServiceStubs for IDE Autocompletion in Shopware App Scripts\nDESCRIPTION: Demonstrates how to use ServiceStubs for better IDE support in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% set configValue = services.config.app('my-app-config') %}\n```\n\n----------------------------------------\n\nTITLE: Overriding Search Bar Item Component in Shopware 6\nDESCRIPTION: These JavaScript snippets show how to override the sw-search-bar-item component in Shopware 6 Administration. It imports a custom template and applies it to the component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\n\nShopware.Component.override('sw-search-bar-item', () => import('./app/component/structure/sw-search-bar-item'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/app/component/structure/sw-search-bar-item/index.js\nimport template from './sw-search-bar-item.html.twig';\n\nexport default {\n    template\n};\n```\n\n----------------------------------------\n\nTITLE: Splitting and Adding Line Items in Twig\nDESCRIPTION: Demonstrates how to split an existing line item by quantity and add it back to the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% do services.cart.products.add(hook.ids.get('p1'), 5) %}\n\n{% set product = services.cart.products.get(hook.ids.get('p1')) %}\n\n{% set split = product.take(2, 'new-key') %}\n\n{% do services.cart.products.add(split) %}\n```\n\n----------------------------------------\n\nTITLE: Adding New Permission Mapping Entry\nDESCRIPTION: Template for adding a new permission mapping entry with basic CRUD roles structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: null,\n    key: 'your_key',\n    roles: {\n        viewer: {\n            privileges: [],\n            dependencies: []\n        },\n        editor: {\n            privileges: [],\n            dependencies: []\n        },\n        creator: {\n            privileges: [],\n            dependencies: []\n        },\n        deleter: {\n            privileges: [],\n            dependencies: []\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a JavaScript Plugin in Shopware 6\nDESCRIPTION: Code that imports and registers a custom JavaScript plugin with Shopware's PluginManager in the main.js file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/main.js\n// Import all necessary Storefront plugins\nimport ExamplePlugin from './example-plugin/example-plugin.plugin';\n\n// Register your plugin via the existing PluginManager\nconst PluginManager = window.PluginManager;\nPluginManager.register('ExamplePlugin', ExamplePlugin);\n```\n\n----------------------------------------\n\nTITLE: Using EnumField in Shopware Entity Class\nDESCRIPTION: Demonstrates how to use EnumField in a Shopware entity class, including property declarations and getter/setter methods for enum types.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/enum-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass BatchOrderEntity extends Entity {\n\n    #[Field(type: FieldType::ENUM, column: 'payment_method')]\n    protected PaymentMethod $paymentMethod;\n\n    #[Field(type: FieldType::ENUM, column: 'amount')]\n    protected BatchOrderSize $amount;\n    \n   public function getPaymentMethod(): PaymentMethod\n    {\n        return $this->paymentMethod;\n    }\n    \n    public function setPaymentMethod(PaymentMethod $paymentMethod): void\n    {\n        $this->paymentMethod = $paymentMethod;\n    }\n    \n    public function getAmount(): BatchOrderSize\n    {\n        return $this->amount;\n    }\n    \n    public function setAmount(BatchOrderSize $amount): void\n    {\n        $this->amount = $amount;\n    }\n```\n\n----------------------------------------\n\nTITLE: Count Sorting with Aggregations Example\nDESCRIPTION: Shows how to implement count-based sorting with aggregations to order results based on association counts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 3,\n  \"includes\": {\n    \"product\": [\"id\"]\n  },\n  \"sort\": [\n    { \"field\": \"categories.id\", \"order\": \"DESC\", \"type\": \"count\" }\n  ],\n  \"aggregations\": [\n    {  \n        \"name\": \"product-id\",\n        \"type\": \"terms\",\n        \"field\": \"id\",\n        \"limit\": 3,\n        \"sort\": { \"field\": \"_count\", \"order\": \"DESC\" },\n        \"aggregation\": {  \n            \"name\": \"category-count\",\n            \"type\": \"count\",\n            \"field\": \"product.categories.id\"\n        }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Shopware App SDK Events in PHP\nDESCRIPTION: This snippet enumerates the events fired by the Shopware App SDK when a PSR Dispatcher is passed to the AppLifecycle and RegistrationService classes. These events allow developers to react to various stages of the app lifecycle and registration process.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/06-events.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n- BeforeShopActivateEvent\n- ShopActivatedEvent\n- BeforeShopDeactivatedEvent\n- ShopDeactivatedEvent\n- BeforeShopDeletionEvent\n- ShopDeletedEvent\n- BeforeRegistrationCompletedEvent\n- RegistrationCompletedEvent\n```\n\n----------------------------------------\n\nTITLE: Working with Lazy Loaded Associations in Shopware\nDESCRIPTION: This snippet demonstrates how to work with lazy loaded associations in Shopware. It shows how to use the Criteria object to add an association and fetch the associated data along with the main entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Criteria } = Shopware.Data;\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        productCriteria() {\n            const criteria = new Criteria();\n            criteria.addAssociation('prices');\n\n            return criteria;\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get('some-id', Shopware.Context.api, this.productCriteria)\n            .then((product) => {\n                this.product = product;\n            });\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Fields in Shopware Manifest\nDESCRIPTION: This XML snippet demonstrates how to register custom field sets in a Shopware app's manifest file. It defines a custom field set with various field types and their configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/platform/trunk/src/Core/Framework/App/Manifest/Schema/manifest-1.0.xsd\">\n    <meta>\n        <name>SwagApp</name>\n        <label>Swag App</label>\n        <label lang=\"de-DE\">Swag App</label>\n        <description>Test description</description>\n        <description lang=\"de-DE\">Test-Beschreibung</description>\n        <author>shopware AG</author>\n        <copyright>(c) by shopware AG</copyright>\n        <version>1.0.0</version>\n        <icon>icon.png</icon>\n        <license>MIT</license>\n    </meta>\n    <custom-fields>\n        <custom-field-set>\n            <name>swag_example_set</name>\n            <label>Example Set</label>\n            <label lang=\"de-DE\">Beispiel-Set</label>\n            <related-entities>\n                <product/>\n                <customer/>\n            </related-entities>\n            <fields>\n                <text name=\"swag_example_description\">\n                    <label>Example field</label>\n                    <label lang=\"de-DE\">Beispielfeld</label>\n                    <help-text>This is an example.</help-text>\n                    <position>1</position>\n                    <placeholder>Type something...</placeholder>\n                </text>\n                <float name=\"swag_example_size\">\n                    <label>Example size</label>\n                    <label lang=\"de-DE\">Beispielgröße</label>\n                    <help-text>Please enter the example size here</help-text>\n                    <position>2</position>\n                </float>\n            </fields>\n        </custom-field-set>\n    </custom-fields>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Implementing enrich method for CMS Element Resolver in PHP\nDESCRIPTION: Shows how to implement the enrich method to perform additional logic, such as external API calls, and add the response to the slot data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-data-to-cms-elements.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function enrich(CmsSlotEntity $slot, ResolverContext $resolverContext, ElementDataCollection $result): void\n{\n    $config = $slot->getFieldConfig();\n    $myCustomApiPayload = $config->get('myCustomApiPayload');\n\n    // perform some external api call with the payload `myCustomApiPayload`\n    $myCustomAPI = new MyCustomAPI();\n\n    $response = $myCustomAPI->query($myCustomApiPayload);\n\n    if ($response) {\n        $slot->setData($response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Event in PHP\nDESCRIPTION: Illustrates how to create and dispatch a custom event in Shopware 6 using the event dispatcher. It shows both named and unnamed event dispatching.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$someEvent = new SomeEvent($parameters, $moreParameters);\n$this->eventDispatcher->dispatch($someEvent, $someEvent->getName());\n```\n\n----------------------------------------\n\nTITLE: Custom JWT Generation\nDESCRIPTION: JavaScript code for manual JWT generation through API endpoint\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/clientside-to-app-backend.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch('/store-api/app-system/{name}/generate-token', {\n    method: 'POST'\n});\n\n// send token as 'shopware-app-token' header and shopId as 'shopware-app-shop-id' header to your app server.\nconst { token, shopId } = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Extensions Structure\nDESCRIPTION: XML structure for defining multiple flow triggers in the flow.xml file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<flow-extensions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Flow/Schema/flow-1.0.xsd\">\n    <flow-events>\n        <flow-event>\n            ... # The first trigger\n        </flow-event>\n        <flow-event>\n            ... # The second trigger\n        </flow-event>\n    </flow-events>\n    ...\n</flow-extensions>\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Definition Class for Custom Entity in Shopware 6\nDESCRIPTION: The ExampleDefinition class defines the structure of the custom entity for the DAL (Data Abstraction Layer). It defines the entity name and implements the defineFields method with an empty FieldCollection, serving as a starting point for entity definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass ExampleDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'swag_example';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering System Checks Programmatically in PHP\nDESCRIPTION: This code snippet shows how to programmatically trigger system checks by injecting the SystemChecker service and calling its check method with a specific execution context, or by using a custom checker implementation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/system-check/index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$results = $systemChecker->check(SystemCheckExecutionContext::WEB);\n# or also use any custom logic you might have...\n$customChecker->check();\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Management Component in Shopware Flow Builder (JavaScript)\nDESCRIPTION: JavaScript component that creates a modal for tag management within the Shopware Flow Builder. It handles tag selection, addition, removal, and configuration for flow actions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/component/sw-flow-create-tag-modal/index.js\nimport template from './sw-flow-create-tag-modal.html.twig';\n\nconst { Data: { Criteria, EntityCollection } } = Shopware;\nconst { Component, Context } = Shopware;\n\nComponent.register('sw-flow-create-tag-modal', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    props: {\n        sequence: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            tagCollection: [],\n        };\n    },\n\n    computed: {\n        tagRepository() {\n            return this.repositoryFactory.create('tag');\n        },\n\n        tagCriteria() {\n            const criteria = new Criteria(1, 25);\n            const { config } = this.sequence;\n            const tagIds = Object.keys(config.tagIds);\n            if (tagIds.length) {\n                criteria.addFilter(Criteria.equalsAny('id', tagIds));\n            }\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.tagCollection = this.createTagCollection();\n\n            const { config } = this.sequence;\n            if (this.sequence.id && config?.tagIds) {\n                this.getTagCollection();\n            }\n        },\n\n        getTagCollection() {\n            return this.tagRepository.search(this.tagCriteria)\n                .then(tags => {\n                    this.tagCollection = tags;\n                })\n                .catch(() => {\n                    this.tagCollection = [];\n                });\n        },\n\n        createTagCollection() {\n            return new EntityCollection(\n                this.tagRepository.route,\n                this.tagRepository.entityName,\n                Context.api,\n            );\n        },\n\n        onClose() {\n            this.$emit('modal-close');\n        },\n\n        onAddTag(data) {\n            this.tagCollection.add(data);\n        },\n\n        onRemoveTag(data) {\n            this.tagCollection.remove(data);\n        },\n\n        getConfig() {\n            const tagIds = {};\n            this.tagCollection.forEach(tag => {\n                Object.assign(tagIds, {\n                    [tag.id]: tag.name,\n                });\n            });\n\n            return {\n                tagIds,\n            };\n        },\n\n        onAddAction() {\n            const config = this.getConfig();\n            const data = {\n                ...this.sequence,\n                config,\n            };\n\n            this.$emit('process-finish', data);\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CMS Element Config Component\nDESCRIPTION: This code snippet demonstrates the implementation of the configuration component for the custom CMS element. It uses Vue.js and the Meteor Admin SDK to handle data binding and updates between the app and Shopware admin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport { data } from \"@shopware-ag/meteor-admin-sdk\";\nimport CONSTANTS from \"../../base/mainCommands\";\n\nexport default Vue.extend({\n    template: `\n        <div>\n          <h2>\n            Config!\n          </h2>\n          Video-Code: <input v-model=\"dailyUrl\" type=\"text\"/><br/>\n        </div>\n    `,\n\n    data(): Object {\n        return {\n            element: null\n        }\n    },\n\n    computed: {\n        dailyUrl: {\n            get(): string {\n                return this.element?.config?.dailyUrl?.value || '';\n            },\n\n            set(value: string): void {\n                this.element.config.dailyUrl.value = value;\n\n                data.update({\n                    id: CONSTANTS.PUBLISHING_KEY,\n                    data: this.element,\n                });\n            }\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.element = await data.get({ id: CONSTANTS.PUBLISHING_KEY });\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Data with RepositoryWriterFacade in Twig\nDESCRIPTION: Examples of using the writer service to create, update, and delete entities in the database. Demonstrates upsert, delete, and sync operations for various entity types.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/custom-endpoint-script-services-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.writer.upsert('tax', [\n    { 'name': 'new Tax', 'taxRate': 99.9 }\n]) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.writer.upsert('product', [\n    { 'id':  hook.productId, 'active': true }\n]) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.writer.delete('product', [\n    { 'id':  hook.productId }\n]) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set payload = [\n    {\n        'entity': 'product',\n        'action': 'upsert',\n        'payload': [\n            { 'id':  hook.updateProductId, 'active': true }\n        ]\n    },\n    {\n        'entity': 'product',\n        'action': 'delete',\n        'payload': [\n        { 'id':  hook.deleteProductId }\n    ]\n    },\n] %}\n\n{% do services.writer.sync(payload) %}\n```\n\n----------------------------------------\n\nTITLE: Creating Product with Media via Shopware API\nDESCRIPTION: Creates a new product with associated media using the Shopware Import API. Includes product details like name, number, tax information, pricing and media attachments.\nSOURCE: https://github.com/shopware/docs/blob/main/assets/adr/catalog-import/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8000/api/import/{{import_id}}/record\nContent-Type: application/json\nAccept: application/json\nAuthorization: Bearer {{auth_token}}\n\n{\n    \"products\": [\n        {\n            \"id\": \"018a6b222b5a734d956fb03dda765bfa\",\n            \"name\": \"My product via API\",\n            \"productNumber\": \"PRODNUMAPI1\",\n            \"tax\": {\n                \"name\": \"Reduced rate 2\"\n            },\n            \"prices\": [\n                {\n                    \"currency\": \"EUR\",\n                    \"gross\": 10,\n                    \"net\": 20,\n                    \"linked\": false\n                }\n            ],\n            \"media\": [\n                {\n                    \"url\": \"https://images.unsplash.com/photo-1660236822651-4263beb35fa8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80\",\n                    \"title\": \"pommes\",\n                    \"alt\": \"alt\",\n                    \"filename\": \"pommes.jpg\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a JavaScript Plugin to DOM Elements in Shopware 6\nDESCRIPTION: Code that registers a JavaScript plugin with a specific CSS selector to bind it to DOM elements.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/main.js\n// Import all necessary Storefront plugins\nimport ExamplePlugin from './example-plugin/example-plugin.plugin';\n\n// Register your plugin via the existing PluginManager\nconst PluginManager = window.PluginManager;\nPluginManager.register('ExamplePlugin', ExamplePlugin, '[data-example-plugin]');\n```\n\n----------------------------------------\n\nTITLE: Accessing Stored Data in Flow Actions in PHP\nDESCRIPTION: This snippet shows how to access stored data (shop name, customer, and custom example data) within a Flow Action using the StorableFlow object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SendMailAction\n{\n\tpublic function handleFlow(StorableFlow $flow)\n\t{\n\t\t$shopName = $flow->getStore('shopName');\n\t\t$customer = $flow->getData('customer');\n\t\t$customExampleData = $flow->getData('customExampleData');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Shopware 6 Migration\nDESCRIPTION: A complete example of a migration class that creates a new database table. This demonstrates how to implement the update() method with SQL queries while leaving the updateDestructive() method empty.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Migration/Migration1611740369ExampleDescription.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\n\nclass Migration1611740369ExampleDescription extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1611740369;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $query = <<<SQL\nCREATE TABLE IF NOT EXISTS `swag_basic_example_general_settings` (\n    `id`                INT             NOT NULL,\n    `example_setting`   VARCHAR(255)    NOT NULL,\n    PRIMARY KEY (id)\n)\n    ENGINE = InnoDB\n    DEFAULT CHARSET = utf8mb4\n    COLLATE = utf8mb4_unicode_ci;\nSQL;\n\n        $connection->executeStatement($query);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic File Structure for Shopware App\nDESCRIPTION: Shows the recommended file structure for creating a custom Shopware app, including the location of the manifest file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── custom\n    ├── apps\n    │   └── MyExampleApp\n    │       └── manifest.xml\n    └── plugins\n```\n\n----------------------------------------\n\nTITLE: Processing Product Translation Data\nDESCRIPTION: Extracts the English description and name from product translation data by iterating through translations and matching the locale code.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function __invoke(WebhookAction $action): void\n{\n    //...\n    $product = $response->json()['data'][0];\n    $description = '';\n    $name = '';\n    foreach ($product['translations'] as $translation) {\n        if ($translation['language']['locale']['code'] === 'en-GB') {\n            $description = $translation['description'];\n            $name = $translation['name'];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CMS Element in mainCommands.ts\nDESCRIPTION: This snippet shows how to register a new CMS element using the Meteor Admin SDK. It defines constants for the element name and publishing key, and uses the cms.registerCmsElement method to register the element.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cms } from '@shopware-ag/meteor-admin-sdk';\n\nconst CMS_ELEMENT_NAME = 'swag-dailymotion';\nconst CONSTANTS = {\n    CMS_ELEMENT_NAME,\n    PUBLISHING_KEY: `${CMS_ELEMENT_NAME}__config-element`,\n};\n\nvoid cms.registerCmsElement({\n    name: CONSTANTS.CMS_ELEMENT_NAME,\n    label: 'Dailymotion video',\n    defaultConfig: {\n        dailyUrl: {\n            source: 'static',\n            value: '',\n        },\n    },\n});\n\nexport default CONSTANTS;\n```\n\n----------------------------------------\n\nTITLE: Creating Preview for Dailymotion CMS Element in Shopware Administration\nDESCRIPTION: This Vue component provides a simple preview for the Dailymotion CMS element when selecting elements for a CMS block in the Shopware Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\n\nexport default Vue.extend({\n    template: `\n        <h2>\n          Preview!\n        </h2>\n    `,\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Related Mapping IDs for Unit Conversion in Shopware (PHP)\nDESCRIPTION: This private method illustrates how to collect and store entity mapping IDs during a product unit conversion in Shopware. It retrieves or creates a mapping, appends the resulting mapping ID to the converter's mappingIds array, and processes translations and value conversions. Dependencies include the mapping service and translation/value conversion logic, with expected input as a data array representing the unit. Outputs a unit array populated with mapped identifiers and relevant converted values.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/* SwagMigrationAssistant/Profile/Shopware/Converter/ProductConverter.php */\\n\\nprivate function getUnit(array $data): array\\n{\\n    $unit = [];\\n    $mapping = $this->mappingService->getOrCreateMapping(\\n        $this->connectionId,\\n        DefaultEntities::UNIT,\\n        $data['id'],\\n        $this->context\\n    );\\n    $unit['id'] = $mapping['entityUuid'];\\n    $this->mappingIds[] = $mapping['id']; // Store the mapping id as related mapping\\n\\n    $this->getUnitTranslation($unit, $data);\\n    $this->convertValue($unit, 'shortCode', $data, 'unit');\\n    $this->convertValue($unit, 'name', $data, 'description');\\n\\n    return $unit;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhooks in Shopware App Manifest (XML)\nDESCRIPTION: Example of defining a webhook in the app's manifest file. It shows how to specify the webhook name, URL, and triggering event.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/webhook.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<webhooks>\n    <webhook name=\"product-changed\" url=\"https://example.com/event/product-changed\" event=\"product.written\"/>\n</webhooks>\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Context Awareness Restrictions in Shopware Administration\nDESCRIPTION: Code that adds context awareness to custom rules, restricting where they can be used in the administration interface by configuring notEquals and equalsAny conditions for specific rule assignments.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rule/add-custom-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>src/Resources/app/administration/src/decorator/rule-condition-service-decoration.js\nShopware.Application.addServiceProviderDecorator('ruleConditionDataProviderService', (ruleConditionService) => {\n    // Your newly added conditions is here\n\n    const restrictions = ruleConditionService.getAwarenessConfigurationByAssignmentName('productPrices');\n\n    ruleConditionService\n        .addAwarenessConfiguration('productPrices', {\n            notEquals: [\n                'first_monday'\n            ],\n            equalsAny: [ ], // ignore if not needed\n            snippet: 'sw-restricted-rules.restrictedAssignment.productPrices',\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Payment Request JSON Structure\nDESCRIPTION: Example JSON structure for payment requests sent from Shopware to the app backend.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"orderTransaction\": {\n    //...\n  },\n  \"order\": {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding init() Method to Always Show Cookie Bar in JavaScript\nDESCRIPTION: This snippet overrides the init() method of the CookiePermissionPlugin to always show the cookie bar by setting the cookie value to an empty string. It also calls the parent class's init() method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/override-existing-javascript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CookiePermissionPlugin from 'src/plugin/cookie/cookie-permission.plugin';\nimport CookieStorage from 'src/helper/storage/cookie-storage.helper';\n\nexport default class MyCookiePermission extends CookiePermissionPlugin {\n    init() {\n        CookieStorage.setItem(this.options.cookieName, '');\n        super.init();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExampleService with SystemConfigService Injection\nDESCRIPTION: PHP service class that demonstrates how to receive and use the injected SystemConfigService. It includes a getShopname() method that uses the injected service to retrieve system configuration values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/dependency-injection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Service/ExampleService.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\n\nclass ExampleService\n{\n    private SystemConfigService $systemConfigService;\n\n    public function __construct(SystemConfigService $systemConfigService)\n    {\n        $this->systemConfigService = $systemConfigService;\n    }\n\n    public function getShopname(SalesChannelContext $context): string\n    {\n        return $this->systemConfigService->getString('core.basicInformation.shopName', $context->getSalesChannel()->getId());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Snippets for Action UI\nDESCRIPTION: Defines English translation snippets for the custom action's UI components in the Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// src/Resources/app/administration/src/snippet/en-GB.json\n{\n    \"create-tag-action\": {\n        \"titleCreateTag\": \"Create tag\",\n        \"labelTags\": \"Tags\",\n        \"placeholderTags\": \"Enter tags\",\n        \"buttonSaveAction\": \"Save action\",\n        \"buttonAddAction\": \"Add action\",\n        \"descriptionTags\": \"Tags: {tags}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Entity for Untyped Global Search in Shopware 6\nDESCRIPTION: This snippet demonstrates how to register a custom entity in a Shopware 6 module to make it available for the untyped global search. It sets up the entity and default search configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Module.register('swag-plugin', {\n    entity: 'swag_example',\n    defaultSearchConfiguration: {\n        _searchable: true,\n        name: {\n            _searchable: true,\n            _score: 500,\n        },\n        description: {\n            name: {\n                _searchable: true,\n                _score: 500,\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Conditions in manifest.xml\nDESCRIPTION: XML structure for defining custom rule conditions in the app's manifest file. Includes required fields and optional constraints for creating input fields in the Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/rule-builder/add-custom-rule-conditions.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<<< @/docs/snippets/config/app/rule-conditions.xml\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving Mappings in Shopware Migration\nDESCRIPTION: This method from the MappingService either creates a new mapping or retrieves an existing one for a given entity. It's used to maintain associations between old and new identifiers across migrations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getOrCreateMapping(\n    string $connectionId,\n    string $entityName,\n    string $oldIdentifier,\n    Context $context,\n    ?string $checksum = null,\n    ?array $additionalData = null,\n    ?string $uuid = null\n): array {\n    $mapping = $this->getMapping($connectionId, $entityName, $oldIdentifier, $context);\n\n    if (!isset($mapping)) {\n        return $this->createMapping($connectionId, $entityName, $oldIdentifier, $checksum, $additionalData, $uuid);\n    }\n\n    if ($uuid !== null) {\n        $mapping['entityUuid'] = $uuid;\n        $this->saveMapping($mapping);\n\n        return $mapping;\n    }\n\n    return $mapping;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Store API Route Response Class in PHP\nDESCRIPTION: Implements the response class for the Store API route. It extends StoreApiResponse and provides a method to access the entity collection from the search results.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/ExampleRouteResponse.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearchResult;\nuse Shopware\\Core\\System\\SalesChannel\\StoreApiResponse;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleCollection;\n\n/**\n * Class ExampleRouteResponse\n * @property EntitySearchResult<ExampleCollection> $object\n */\nclass ExampleRouteResponse extends StoreApiResponse\n{\n    public function getExamples(): ExampleCollection\n    {\n        return $this->object->getEntities();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Encoding for Entity Fields in Shopware 6\nDESCRIPTION: This example shows how to configure API encoding for entity fields in Shopware 6. It demonstrates setting fields to be exposed everywhere, only in admin API, or only in store API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\Api\\Context\\AdminApiSource;\nuse Shopware\\Core\\Framework\\Api\\Context\\SalesChannelApiSource;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID, api: true)]\n    public string $id;\n\n    #[Field(type: FieldType::STRING)]\n    public string $notExposed;\n\n    #[Field(type: FieldType::STRING, api: true)]\n    public string $everywhere;\n\n    #[Field(type: FieldType::STRING, api: [AdminApiSource::class])]\n    public string $adminOnly;\n\n    #[Field(type: FieldType::STRING, api: [SalesChannelApiSource::class])]\n    public string $storeOnly;\n```\n\n----------------------------------------\n\nTITLE: Using Post Filters in Shopware 6 (PHP)\nDESCRIPTION: PHP method showing how to use post filters in Shopware 6. This is useful when you want to filter results without affecting aggregations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addPostFilter(new EqualsFilter('name', 'Example name'));\n\n    $products = $this->productRepository->search($criteria, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data in Cypress Fixtures for Shopware\nDESCRIPTION: Demonstrates creating a customer data fixture in JSON format for use in Shopware E2E tests. The fixture defines customer properties to be used via the API during test setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customerNumber\": \"C-1232123\",\n  \"salutation\": \"Mr\",\n  \"firstName\": \"Pep\",\n  \"lastName\": \"Eroni\",\n  \"email\": \"test@example.com\",\n  \"guest\": true,\n  \"addresses\": [\n    {\n        ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Shopware Component\nDESCRIPTION: JavaScript code for registering a new component in Shopware administration with component metadata and template import\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/view/sw-product-detail-custom/index.js\nimport template from './sw-product-detail-custom.html.twig';\n\nShopware.Component.register('sw-product-detail-custom', {\n    template,\n\n    metaInfo() {\n        return {\n            title: 'Custom'\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Product Extension Definition in PHP\nDESCRIPTION: Defines a new entity extension for products with custom fields and associations. Includes configuration for database structure and relationships with the product entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Extension\\Content\\Product;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\FkField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\OneToOneAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\StringField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass ExampleExtensionDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'swag_example_extension';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    public function getEntityClass(): string\n    {\n        return ExampleExtensionEntity::class;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            new FkField('product_id', 'productId', ProductDefinition::class),\n            (new StringField('custom_string', 'customString')),\n            new ReferenceVersionField(ProductDefinition::class, 'product_version_id'),\n            new OneToOneAssociationField('product', 'product_id', 'id', ProductDefinition::class, false)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Activate Method in Shopware\nDESCRIPTION: Method executed when a plugin is activated. Used to activate entities created during installation or create new entities that require an active plugin state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/plugin-lifecycle.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function activate(ActivateContext $activateContext): void\n{\n    // Activate entities, such as a new payment method\n    // Or create new entities here, because now your plugin is installed and active for sure\n}\n```\n\n----------------------------------------\n\nTITLE: Using Direct Field Class References in Shopware 6 Entities\nDESCRIPTION: This snippet demonstrates how to use direct field class references for defining field types in Shopware 6 entities. It includes an example of using the PriceField class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\PriceField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Pricing\\PriceCollection;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n    \n    #[Field(type: PriceField::class)]\n    public ?PriceCollection $price = null;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Decorators to Shopware 6 Services\nDESCRIPTION: Shows how to add a decorator to the 'acl' service in Shopware 6. The decorator adds a new property 'foo' to the service and logs the modified service object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/extending-services.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Application.$container.resetProviders(['acl']);\n\nShopware.Application.addServiceProviderDecorator('acl', (aclService) => {\n  aclService.foo = 'bar';\n  console.log(aclService);\n  return aclService;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling EntityWrittenEvent in PHP\nDESCRIPTION: Shows the method signature for handling an EntityWrittenEvent, which is triggered when an entity is written to the database.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function onCustomEntityWritten(EntityWrittenEvent $event): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Privileges in PHP\nDESCRIPTION: Example of extending the Plugin class to add custom privileges to existing roles.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagTestPluginAcl;\n\nuse Shopware\\Core\\Framework\\Plugin;\n\nclass SwagTestPluginAcl extends Plugin\n{\n    public function enrichPrivileges(): array\n    {\n        return [\n            'product.viewer' => [\n                'my_custom_privilege:read',\n                'my_custom_privilege:write',\n                'my_other_custom_privilege:read',\n                // ...\n            ],\n            'product.editor' => [\n                // ...\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Shopware Product Entity with Custom Fields and Associations\nDESCRIPTION: This PHP class extends the Shopware product entity by adding custom fields and associations, including a one-to-one association, a one-to-many association, and a runtime field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/elasticsearch/add-product-entity-extension-to-elasticsearch.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Extension\\Content\\Product;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityExtension;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\ObjectField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\OneToManyAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\OneToOneAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Runtime;\n\nclass CustomExtension extends EntityExtension\n{\n    public function extendFields(FieldCollection $collection): void\n    {\n        //Add ApiAware flag to make this field searchable\n        $collection->add(\n            (new OneToOneAssociationField('oneToOneExampleExtension', 'id', 'product_id', OneToOneExampleExtensionDefinition::class, true))->addFlags(new ApiAware())\n        );\n        //Add ApiAware flag to make this field searchable\n        $collection->add(\n            (new OneToManyAssociationField('oneToManyExampleExtension', OneToManyExampleExtensionDefinition::class, 'product_id'))->addFlags(new ApiAware())\n        );\n        //Runtime fields are not searchable\n        $collection->add(\n            (new ObjectField('custom_string', 'customString'))->addFlags(new Runtime())\n        );\n    }\n\n    public function getDefinitionClass(): string\n    {\n        return ProductDefinition::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Line Item Factory Handler in PHP\nDESCRIPTION: PHP implementation of a custom line item factory handler that supports creating and updating line items of type 'example'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-items.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\LineItemFactoryInterface;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass ExampleHandler implements LineItemFactoryInterface\n{\n    public const TYPE = 'example';\n\n    public function supports(string $type): bool\n    {\n        return $type === self::TYPE;\n    }\n\n    public function create(array $data, SalesChannelContext $context): LineItem\n    {\n        return new LineItem($data['id'], self::TYPE, $data['referencedId'] ?? null, 1);\n    }\n\n    public function update(LineItem $lineItem, array $data, SalesChannelContext $context): void\n    {\n        if (isset($data['referencedId'])) {\n            $lineItem->setReferencedId($data['referencedId']);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Nested Line Items Removable in Twig\nDESCRIPTION: Demonstrates how to make a nested line item removable in the cart by setting the 'removable' property and creating a form with a custom action path.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-nested-line-items.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% block page_checkout_item_remove_icon %}\n    {% do nestedLineItem.setRemovable(true) %}\n    <form action=\"{{ path('/mycontroller/nested/remove', { 'id': nestedLineItem.id }) }}\" method=\"post\">\n        {{ parent() }}\n    </form>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Sorting via Event Subscriber in PHP\nDESCRIPTION: Demonstrates how to dynamically add a custom product sorting option to the storefront using an event subscriber in PHP. The `ExampleListingSubscriber` listens to the `ProductListingCriteriaEvent`, creates a new `ProductSortingEntity` instance with specific configurations (key, label, priority, fields), and adds it to the available sortings (`ProductSortingCollection`) within the event's criteria extensions. This method allows plugins to introduce sortings without database modifications.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-14-implement-individual-sorting.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\Example;\n\nuse Shopware\\Core\\Content\\Product\\Events\\ProductListingCriteriaEvent;\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingCollection;\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingEntity;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ExampleListingSubscriber implements EventSubscriberInterface {\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductListingCriteriaEvent::class => ['addMyCustomSortingToStorefront', 500],\n        ];\n    }\n\n    public function addMyCustomSortingToStorefront(ProductListingCriteriaEvent $event): void \n    {\n        /** @var ProductSortingCollection $availableSortings */\n        $availableSortings = $event->getCriteria()->getExtension('sortings') ?? new ProductSortingCollection();\n        \n        $myCustomSorting = new ProductSortingEntity();\n        $myCustomSorting->setId(Uuid::randomHex());\n        $myCustomSorting->setActive(true);\n        $myCustomSorting->setTranslated(['label' => 'My Custom Sorting']);\n        $myCustomSorting->setKey('my-custom-sort');\n        $myCustomSorting->setPriority(5);\n        $myCustomSorting->setFields([\n            [\n                'field' => 'product.name',\n                'order' => 'desc',\n                'priority' => 1,\n                'naturalSorting' => 0,\n            ],\n        ]);\n        \n        $availableSortings->add($myCustomSorting);\n        \n        $event->getCriteria()->addExtension('sortings', $availableSortings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom CMS Block in Shopware 6\nDESCRIPTION: This code demonstrates how to register a custom CMS block using the cmsService in Shopware 6. It includes the full configuration object with properties such as name, category, label, components, default config, and slots.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/index.js\nShopware.Service('cmsService').registerCmsBlock({\n    name: 'my-image-text-reversed',\n    category: 'text-image',\n    label: 'My Image Text Block!',\n    component: 'sw-cms-block-my-image-text-reversed',\n    previewComponent: 'sw-cms-preview-my-image-text-reversed',\n    defaultConfig: {\n        marginBottom: '20px',\n        marginTop: '20px',\n        marginLeft: '20px',\n        marginRight: '20px',\n        sizingMode: 'boxed'\n    },\n    slots: {\n        left: 'text',\n        right: 'image'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dailymotion CMS Element in Vue for Shopware Administration\nDESCRIPTION: This Vue component renders the Dailymotion CMS element in the Shopware Administration. It includes a template for displaying the video, data management, and subscription to element updates.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport { data } from \"@shopware-ag/meteor-admin-sdk\";\nimport CONSTANTS from \"../../base/mainCommands\";\n\nexport default Vue.extend({\n    template: `\n        <div>\n            <h2>\n              Element!\n            </h2>\n            <div class=\"sw-cms-el-dailymotion\">\n                <div class=\"sw-cms-el-dailymotion-iframe-wrapper\">\n                    <iframe\n                        frameborder=\"0\"\n                        type=\"text/html\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        :src=\"dailyUrl\">\n                    </iframe>\n                </div>\n            </div>\n        </div>\n    `,\n\n    data(): { element: object|null } {\n        return {\n            element: null\n        }\n    },\n\n    computed: {\n        dailyUrl(): string {\n            return `https://www.dailymotion.com/embed/video/${this.element?.config?.dailyUrl?.value || ''}`;\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.element = await data.get({ id: CONSTANTS.PUBLISHING_KEY });\n            data.subscribe(CONSTANTS.PUBLISHING_KEY, this.elementSubscriber);\n        },\n\n        elementSubscriber(response: { data: unknown, id: string }): void {\n            this.element = response.data;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of a Shopware 6 Plugin-Based Theme\nDESCRIPTION: This shows the standard directory structure of a Shopware 6 plugin-based theme, including the locations for SCSS files, JavaScript, and theme configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/create-a-theme.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# structure of a plugin-based theme\n├── composer.json\n└── src\n    ├── Resources\n    │   ├── app\n    │   │   └── storefront\n    │   │       ├── dist\n    │   │       │   └── storefront\n    │   │       │       └── js\n    |   |       |           └── swag-basic-example-theme  \n    │   │       │               └── swag-basic-example-theme.js\n    │   │       └── src\n    │   │           ├── assets\n    │   │           ├── main.js\n    │   │           └── scss\n    │   │               ├── base.scss\n    │   │               └── overrides.scss\n    │   └── theme.json\n    └── SwagBasicExampleTheme.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Key Generation for Store API Endpoints\nDESCRIPTION: Shows how to generate a cache key for Store API responses using the 'cache_key' block. This example creates an MD5 hash of the request parameters and hook name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% block cache_key %}\n    {% set cachePayload = hook.query %}\n    {% set cachePayload = cachePayload|merge({'script': 'custom-endpoint'}) %}\n\n    {% do hook.setCacheKey(cachePayload|md5) %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Splitting Line Items in Shopware Cart\nDESCRIPTION: Demonstrates how to split a line item with quantity greater than 3 into two separate items using the take() method. Creates a new line item with specified quantity and adds it to the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set existingLineItem = services.cart.products.get(productId) %}\n\n{% if existingLineItem and existingLineItem.quantity > 3 %}\n    {% set newLineItem = existingLineItem.take(2, newLineItemId) %}\n    {% do services.cart.products.add(newLineItem) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Capturing Prepared Payment in Shopware 6 (PHP SDK)\nDESCRIPTION: PHP code using the Shopware App SDK to capture a prepared payment. It resolves the shop, assembles the payment capture data, and returns a signed response with the payment status.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\n\nfunction capture(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $payment = $contextResolver->assemblePaymentCapture($serverRequest, $shop);\n    \n    // contains your passed data from the validate call (preOrderPayment)\n    $payment->requestData\n    \n    // implement your logic here based on the information provided in $payment\n    \n    // check PaymentResponse class for all available payment states\n    return $signer->signResponse(PaymentResponse::paid(), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Client with ContextResolver in TypeScript\nDESCRIPTION: Demonstrates how to use the HTTP client with ContextResolver to make authenticated requests to Shopware. The client automatically handles OAuth2 token management.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/05-http-client.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppServer } from '@shopware-ag/app-server-sdk'\n\nconst app = new AppServer(/** ... */);\n\nconst ctx = await app.contextResolver.fromBrowser<BrowserAppModuleRequest>(/** Request */);\n\nconst response = await ctx.httpClient.get<{version: string}>('/_info/version')\n\nconsole.log(response.body.version)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to the hideCookieBar Event in Shopware\nDESCRIPTION: Implementation of a JavaScript plugin that listens to the 'hideCookieBar' event from the CookiePermission plugin. The code demonstrates how to get a plugin instance using PluginManager and subscribe to its events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/reacting-to-javascript-events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/events-plugin/events-plugin.plugin.js\nconst { PluginBaseClass } = window;\n\nexport default class EventsPlugin extends PluginBaseClass {\n    init() {\n        const plugin = window.PluginManager.getPluginInstanceFromElement(document.querySelector('[data-cookie-permission]'), 'CookiePermission');\n        plugin.$emitter.subscribe('hideCookieBar', this.onHideCookieBar);\n    }\n\n    onHideCookieBar() {\n        alert(\"The cookie bar has been hidden!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CustomFields to Entity Definition in PHP\nDESCRIPTION: This code demonstrates how to add the CustomFields field to an entity definition. It's a crucial step in enabling custom field support for the entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\CustomFields;                                                                    \n\n[...]\nclass ExampleDefinition extends EntityDefinition\n{\n\n    [...]\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            (new StringField('name', 'name')),\n            (new StringField('description', 'description')),\n            (new BoolField('active', 'active')),\n\n            new CustomFields()\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Refund in Shopware 6 (PHP SDK)\nDESCRIPTION: PHP code using the Shopware App SDK to process a refund. It resolves the shop, assembles the refund data, and returns a signed response with the refund status.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\RefundResponse;\n\nfunction refund(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $payment = $contextResolver->assemblePaymentRefund($serverRequest, $shop);\n    \n    // implement your logic here based on the information provided in $payment\n    \n    // check RefundResponse class for all available refund states\n    return $signer->signResponse(RefundResponse::completed(), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Entity Definition in services.xml for Shopware 6\nDESCRIPTION: This XML configuration registers the custom entity definition with Shopware's DI container using the 'shopware.entity.definition' tag. The entity attribute specifies the technical name of the entity, which must match the name defined in the ExampleDefinition class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\ExampleDefinition\">\n            <tag name=\"shopware.entity.definition\" entity=\"swag_example\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Route with Attributes in PHP\nDESCRIPTION: This PHP code snippet demonstrates how a route is defined in a Shopware 6 controller using PHP attributes. It shows the wishlist route implementation that handles both authenticated and guest users.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/framework/routes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\n#[Route(path: '/wishlist', name: 'frontend.wishlist.page', options: ['seo' => false], defaults: ['_noStore' => true], methods: ['GET'])]\npublic function index(Request $request, SalesChannelContext $context): Response\n{\n    $customer = $context->getCustomer();\n\n    if ($customer !== null && $customer->getGuest() === false) {\n        $page = $this->wishlistPageLoader->load($request, $context, $customer);\n        $this->hook(new WishlistPageLoadedHook($page, $context));\n    } else {\n        $page = $this->guestPageLoader->load($request, $context);\n        $this->hook(new GuestWishlistPageLoadedHook($page, $context));\n    }\n\n    return $this->renderStorefront('@Storefront/storefront/page/wishlist/index.html.twig', ['page' => $page]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CartDataCollectorInterface for Price Overwriting in Shopware 6\nDESCRIPTION: This PHP class implements the CartDataCollectorInterface to collect and store new prices for cart items. It filters out already processed items, fetches new prices (method not implemented), and stores them in the CartDataCollection for later processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/change-price-of-item.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartBehavior;\nuse Shopware\\Core\\Checkout\\Cart\\CartDataCollectorInterface;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass OverwritePriceCollector implements CartDataCollectorInterface\n{\n    public function collect(CartDataCollection $data, Cart $original, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        // get all product ids of current cart\n        $productIds = $original->getLineItems()->filterType(LineItem::PRODUCT_LINE_ITEM_TYPE)->getReferenceIds();\n\n        // remove all product ids which are already fetched from the database\n        $filtered = $this->filterAlreadyFetchedPrices($productIds, $data);\n\n        // Skip execution if there are no prices to be requested & saved\n        if (empty($filtered)) {\n            return;\n        }\n\n        foreach ($filtered as $id) {\n            $key = $this->buildKey($id);\n\n            // Needs implementation, just an example\n            $newPrice = $this->doSomethingToGetNewPrice();\n\n            // we have to set a value for each product id to prevent duplicate queries in next calculation\n            $data->set($key, $newPrice);\n        }\n    }\n\n    private function filterAlreadyFetchedPrices(array $productIds, CartDataCollection $data): array\n    {\n        $filtered = [];\n\n        foreach ($productIds as $id) {\n            $key = $this->buildKey($id);\n\n            // already fetched from database?\n            if ($data->has($key)) {\n                continue;\n            }\n\n            $filtered[] = $id;\n        }\n\n        return $filtered;\n    }\n\n    private function buildKey(string $id): string\n    {\n        return 'price-overwrite-'.$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Conversion in Shopware 6\nDESCRIPTION: Example implementation of a MediaConverter class that handles the conversion of media data from source system to Shopware 6 format. Manages media file registration, mapping, and translation handling.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/media-processing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nabstract class MediaConverter extends ShopwareConverter\n{\n    /* ... */\n\n    public function convert(\n        array $data,\n        Context $context,\n        MigrationContextInterface $migrationContext\n    ): ConvertStruct {\n        $this->generateChecksum($data);\n        $this->context = $context;\n        $this->locale = $data['_locale'];\n        unset($data['_locale']);\n\n        $connection = $migrationContext->getConnection();\n        $this->connectionId = '';\n        if ($connection !== null) {\n            $this->connectionId = $connection->getId();\n        }\n\n        $converted = [];\n        $this->mainMapping = $this->mappingService->getOrCreateMapping(\n            $this->connectionId,\n            DefaultEntities::MEDIA,\n            $data['id'],\n            $context,\n            $this->checksum\n        );\n        $converted['id'] = $this->mainMapping['entityUuid'];\n\n        if (!isset($data['name'])) {\n            $data['name'] = $converted['id'];\n        }\n\n        $this->mediaFileService->saveMediaFile(\n            [\n                'runId' => $migrationContext->getRunUuid(),\n                'entity' => MediaDataSet::getEntity(),\n                'uri' => $data['uri'] ?? $data['path'],\n                'fileName' => $data['name'],\n                'fileSize' => (int) $data['file_size'],\n                'mediaId' => $converted['id'],\n            ]\n        );\n        unset($data['uri'], $data['file_size']);\n\n        $this->getMediaTranslation($converted, $data);\n        $this->convertValue($converted, 'title', $data, 'name');\n        $this->convertValue($converted, 'alt', $data, 'description');\n\n        $albumMapping = $this->mappingService->getMapping(\n            $this->connectionId,\n            DefaultEntities::MEDIA_FOLDER,\n            $data['albumID'],\n            $this->context\n        );\n\n        if ($albumMapping !== null) {\n            $converted['mediaFolderId'] = $albumMapping['entityUuid'];\n            $this->mappingIds[] = $albumMapping['id'];\n        }\n\n        unset(\n            $data['id'],\n            $data['albumID'],\n            $data['path'],\n            $data['type'],\n            $data['extension'],\n            $data['file_size'],\n            $data['width'],\n            $data['height'],\n            $data['userID'],\n            $data['created']\n        );\n\n        $returnData = $data;\n        if (empty($returnData)) {\n            $returnData = null;\n        }\n        $this->updateMainMapping($migrationContext, $context);\n\n        return new ConvertStruct($converted, $returnData, $this->mainMapping['id']);\n    }\n```\n\n----------------------------------------\n\nTITLE: External Template Import (Shorthand)\nDESCRIPTION: Demonstrates the shorthand syntax for importing and using an external template file in a component configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from 'hello-world.html.twig';\n\nexport default Shopware.Component.wrapComponentConfig('hello-world', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Routes with Symfony Console Command\nDESCRIPTION: Bash command for debugging a specific route using Symfony's route debugger to verify the route has been properly registered.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n// \n$ ./bin/console debug:router store-api.example.search\n```\n\n----------------------------------------\n\nTITLE: Customizing Shopware 6 Component Template in Twig\nDESCRIPTION: Shows how to override and extend blocks in a component template using Twig\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_4\n\nLANGUAGE: Twig\nCODE:\n```\n{# override/replace an existing block #}\n{% block card_header %}\n    <h1 class=\"custom-header\">\n        {{ header }}\n    </h1>\n{% endblock %}\n\n{% block card_content %}\n\n    {# render the original block #}\n    {% parent %}\n\n    <div class=\"card-custom-content\">\n        ...\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Event Snippets in English\nDESCRIPTION: Defines English translation snippets for the custom event to be displayed in the Flow Builder triggers list.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sw-flow\": {\n    \"triggers\": {\n      \"example\": \"Example\",\n      \"event\": \"Event\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Shopware 6 Component in Twig\nDESCRIPTION: Demonstrates how to use a custom component (sw-custom-field) in a Twig template\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_2\n\nLANGUAGE: Twig\nCODE:\n```\n<sw-custom-field></sw-custom-field>\n```\n\n----------------------------------------\n\nTITLE: Symfony Payment Controller Implementation\nDESCRIPTION: Payment handler implementation using Symfony bundle with route configuration for payment processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Payment\\PaymentPayAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[AsController]\nclass PaymentController {\n    #[Route('/payment/pay')]\n    public function handle(PaymentPayAction $payment): ResponseInterface\n    {\n        // handle payment\n        \n        return PaymentResponse::redirect($myPaymentUrl);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Sanitizer Middleware Hooks\nDESCRIPTION: Shows how to add and remove middleware hooks for custom sanitization processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/the-sanitizer-helper.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Helper.SanitizerHelper.addMiddleware('beforeSanitizeElements',  function (\n        currentNode,\n        hookEvent,\n        config\n    ) {\n        // Do something with the current node and return it\n        // You can also mutate hookEvent (i.e. set hookEvent.forceKeepAttr = true)\n        return currentNode;\n    }\n);\n\nShopware.Helper.SanitizerHelper.removeMiddleware('beforeSanitizeElements');\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in PHP\nDESCRIPTION: PHP code snippet to generate an HMAC signature for verifying the authenticity of requests from the Shopware shop. It uses the shop secret to create a SHA256 hash of the request body.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\n/** @var RequestInterface $request */\n$hmac = \\hash_hmac('sha256', $request->getBody()->getContents(), $shopSecret);\n```\n\n----------------------------------------\n\nTITLE: Creating the Dailymotion CMS Element HTML Template in Twig\nDESCRIPTION: Defines the template for the Dailymotion element using an iframe to embed the video. The src attribute is bound to a computed property that will provide the video URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/component/sw-cms-el-dailymotion.html.twig\n{% block sw_cms_element_dailymotion %}\n    <div class=\"sw-cms-el-dailymotion\">\n        <div class=\"sw-cms-el-dailymotion-iframe-wrapper\">\n            <iframe frameborder=\"0\"\n                    type=\"text/html\"\n                    width=\"100%\"\n                    height=\"100%\"\n                    :src=\"dailyUrl\">\n            </iframe>\n        </div>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Dependency Injection with XML in Shopware\nDESCRIPTION: Shows how to configure a service in XML to explicitly inject the product repository dependency for DAL operations.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/data-abstraction-layer.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// <plugin root>src/Resources/config/service.xml\n<service id=\"Swag\\ExamplePlugin\\Service\\DalExampleService\">\n    <argument type=\"service\" id=\"product.repository\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Adding DOM Elements for JavaScript Plugin Activation in Shopware 6\nDESCRIPTION: Twig template that extends the base content template and adds a DOM element with the required data attribute to activate the JavaScript plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/page/content/index.html.twig\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n    {{ parent() }}\n\n    <template data-example-plugin></template>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom Field Data in JavaScript\nDESCRIPTION: Implementation of the custom field data fetching logic using the repository search method within the Shopware API context.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-custom-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.customFieldSetRepository.search(this.customFieldSetCriteria, Shopware.Context.api)\n    .then((customFieldSets) => {\n        this.customFieldSets = customFieldSets;\n    });\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Condition Script in Twig\nDESCRIPTION: Example of a basic custom condition script that checks if a customer's first name matches a given value. Uses the compare helper function for comparison.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/rule-builder/add-custom-rule-conditions.md#2025-04-22_snippet_1\n\nLANGUAGE: Twig\nCODE:\n```\n{% if scope.salesChannelContext.customer is not defined %}\n    {% return false %}\n{% endif %}\n\n{% return compare(operator, scope.salesChannelContext.customer.firstName, firstName) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Type Migration in PHP\nDESCRIPTION: Migration class to add a custom document type with translations and base configuration to Shopware. Creates entries in document_type, document_type_translation, document_base_config, and document_base_config_sales_channel tables.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/document/add-custom-document-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Migration\\Traits\\ImportTranslationsTrait;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\Migration\\Traits\\Translations;\n\nclass Migration1616677952AddDocumentType extends MigrationStep\n{\n    use ImportTranslationsTrait;\n    \n    final public const TYPE = 'example';\n    \n    public function getCreationTimestamp(): int\n    {\n        return 1616677952;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $documentTypeId = Uuid::randomBytes();\n\n        $connection->insert('document_type', [\n            'id' => $documentTypeId,\n            'technical_name' => self::TYPE,\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)\n        ]);\n\n        $this->addTranslations($connection, $documentTypeId);\n        $this->addDocumentBaseConfig($connection, $documentTypeId);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n\n    private function addTranslations(Connection $connection, string $documentTypeId): void\n    {\n        $englishName = 'Example document type name';\n        $germanName = 'Beispiel Dokumententyp Name';\n\n        $documentTypeTranslations = new Translations(\n            [\n                'document_type_id' => $documentTypeId,\n                'name' => $germanName,\n            ],\n            [\n                'document_type_id' => $documentTypeId,\n                'name' => $englishName,\n            ]\n        );\n\n        $this->importTranslation(\n            'document_type_translation',\n            $documentTypeTranslations,\n            $connection\n        );\n    }\n    \n    private function addDocumentBaseConfig(Connection $connection, string $documentTypeId): void\n    {\n        $defaultConfig = [\n            'displayPrices' => true,\n            'displayFooter' => true,\n            'displayHeader' => true,\n            'displayLineItems' => true,\n            'diplayLineItemPosition' => true,\n            'displayPageCount' => true,\n            'displayCompanyAddress' => true,\n            'pageOrientation' => 'portrait',\n            'pageSize' => 'a4',\n            'itemsPerPage' => 10,\n            'companyName' => 'Example Company',\n            'taxNumber' => '',\n            'vatId' => '',\n            'taxOffice' => '',\n            'bankName' => '',\n            'bankIban' => '',\n            'bankBic' => '',\n            'placeOfJurisdiction' => '',\n            'placeOfFulfillment' => '',\n            'executiveDirector' => '',\n            'companyAddress' => '',\n            'referencedDocumentType' => self::TYPE,\n        ];\n\n        $documentBaseConfigId = Uuid::randomBytes();\n\n        $connection->insert(\n            'document_base_config',\n            [\n                'id' => $documentBaseConfigId,\n                'name' => self::TYPE,\n                'global' => 1,\n                'filename_prefix' => self::TYPE . '_',\n                'document_type_id' => $documentTypeId,\n                'config' => json_encode($defaultConfig, \\JSON_THROW_ON_ERROR),\n                'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n            ]\n        );\n        $connection->insert(\n            'document_base_config_sales_channel',\n            [\n                'id' => Uuid::randomBytes(),\n                'document_base_config_id' => $documentBaseConfigId,\n                'document_type_id' => $documentTypeId,\n                'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SeoUrlRouteInterface for Custom Entity in PHP\nDESCRIPTION: This code snippet shows how to create a custom SeoUrlRoute class that implements the SeoUrlRouteInterface. It defines the configuration for SEO URL generation, prepares criteria for entity fetching, and provides mapping for the SEO URL template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Framework\\Seo\\SeoUrlRoute;\n\nuse Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlMapping;\nuse Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteConfig;\nuse Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelEntity;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleDefinition;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\n\nclass ExamplePageSeoUrlRoute implements SeoUrlRouteInterface\n{\n    public const ROUTE_NAME = 'frontend.example.example';\n    public const DEFAULT_TEMPLATE = '{{ example.name }}';\n\n    private ExampleDefinition $exampleDefinition;\n\n    public function __construct(ExampleDefinition $exampleDefinition)\n    {\n        $this->exampleDefinition = $exampleDefinition;\n    }\n\n    public function getConfig(): SeoUrlRouteConfig\n    {\n        return new SeoUrlRouteConfig(\n            $this->exampleDefinition,\n            self::ROUTE_NAME,\n            self::DEFAULT_TEMPLATE,\n            true\n        );\n    }\n\n    public function prepareCriteria(Criteria $criteria): void\n    {\n    }\n\n    public function getMapping(Entity $example, ?SalesChannelEntity $salesChannel): SeoUrlMapping\n    {\n        if (!$example instanceof ExampleEntity) {\n            throw new \\InvalidArgumentException('Expected ExampleEntity');\n        }\n\n        $exampleJson = $example->jsonSerialize();\n\n        return new SeoUrlMapping(\n            $example,\n            ['exampleId' => $example->getId()],\n            [\n                'example' => $exampleJson,\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating POST Requests in PHP for Shopware App System\nDESCRIPTION: This PHP code snippet shows how to manually verify the signature of POST requests from Shopware. It calculates the signature using the request body and app secret, then compares it with the signature provided in the request header.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-signature-verification.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\n/** @var RequestInterface $request */\n$queryString = $request->getUri()->getQuery();\n$signature = hash_hmac(\n    'sha256',\n    $request->getBody()->getContents(),\n    $appSecret\n);\n\n// reset the stream pointer, so the body can be read again\n$request->getBody()->rewind();\n$compare = $request->getHeader('shopware-shop-signature')[0];\n\n// validate with compare signature from Shopware\n$valid = hash_equals($signature, $compare);\n```\n\n----------------------------------------\n\nTITLE: Registering Cart Validator Service in XML\nDESCRIPTION: Service configuration to register the custom cart validator in the Symfony dependency injection container with the required shopware.cart.validator tag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-validator.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Checkout\\Cart\\Custom\\CustomCartValidator\">\n            <tag name=\"shopware.cart.validator\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Count Store API Route in PHP\nDESCRIPTION: This class implements the custom Store API route to count active products using DAL aggregation. It defines a GET/POST endpoint at '/store-api/get-active-product-count' that filters products by active status and returns the count.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Aggregation\\Metric\\CountAggregation;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\AggregationResult\\Metric\\CountResult;\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['store-api']])]\nclass ProductCountRoute extends AbstractProductCountRoute\n{\n    protected EntityRepository $productRepository;\n\n    public function __construct(EntityRepository $productRepository)\n    {\n        $this->productRepository = $productRepository;\n    }\n\n    public function getDecorated(): AbstractProductCountRoute\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n     #[Route(path: '/store-api/get-active-product-count', name: 'store-api.product-count.get', methods: ['GET', 'POST'], defaults: ['_entity' => 'product'])]\n    public function load(Criteria $criteria, SalesChannelContext $context): ProductCountRouteResponse\n    {\n        $criteria = new Criteria();\n        $criteria->addFilter(new EqualsFilter('product.active', true));\n        $criteria->addAggregation(new CountAggregation('productCount', 'product.id'));\n\n        /** @var CountResult $productCountResult */\n        $productCountResult = $this->productRepository\n            ->aggregate($criteria, $context->getContext())\n            ->get('productCount');\n            \n        return new ProductCountRouteResponse($productCountResult);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Test for Shopware 6 Plugins\nDESCRIPTION: An example test that verifies a database migration works correctly, using the KernelTestBehaviour trait to access the database connection from the container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/php-unit.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration\\Test;\n\nuse Doctrine\\DBAL\\Connection;\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelTestBehaviour;\n\nclass Migration1611740369ExampleDescriptionTest extends TestCase\n{\n    use KernelTestBehaviour;\n\n    public function testNoChanges(): void\n    {\n        /** @var Connection $conn */\n        $conn = $this->getContainer()->get(Connection::class);\n        $expectedSchema = $conn->fetchAssoc('SHOW CREATE TABLE `swag_basic_example_general_settings`')['Create Table'];\n\n        $migration = new Migration1611740369ExampleDescription();\n\n        $migration->update($conn);\n        $actualSchema = $conn->fetchAssoc('SHOW CREATE TABLE `swag_basic_example_general_settings`')['Create Table'];\n        static::assertSame($expectedSchema, $actualSchema, 'Schema changed!. Run init again to have clean state');\n\n        $migration->updateDestructive($conn);\n        $actualSchema = $conn->fetchAssoc('SHOW CREATE TABLE `swag_basic_example_general_settings`')['Create Table'];\n        static::assertSame($expectedSchema, $actualSchema, 'Schema changed!. Run init again to have clean state');\n    }\n\n    public function testNoTable(): void\n    {\n        /** @var Connection $conn */\n        $conn = $this->getContainer()->get(Connection::class);\n        $conn->executeStatement('DROP TABLE `swag_basic_example_general_settings`');\n\n        $migration = new Migration1611740369ExampleDescription();\n        $migration->update($conn);\n        $exists = $conn->fetchColumn('SELECT COUNT(*) FROM `swag_basic_example_general_settings`') !== false;\n\n        static::assertTrue($exists);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Rule Assignment Configuration\nDESCRIPTION: Complete example of a rule assignment configuration object including data loading, grid columns, and deletion context.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngetRuleAssignmentConfig() {\n    return [\n        {\n            id: 'swagDynamicAccessProducts',\n            notAssignedDataTotal: 0,\n            entityName: 'product',\n            label: 'swag-dynamic-access.sw-settings-rule.detail.associations.productVisibility',\n            criteria: () => {\n                const criteria = new Criteria();\n                criteria.setLimit(this.associationLimit);\n                criteria.addFilter(Criteria.equals('swagDynamicAccessRules.id', this.rule.id));\n                criteria.addAssociation('options.group');\n                criteria.addAssociation('swagDynamicAccessRules');\n\n                return criteria;\n            },\n            api: () => {\n                const api = Object.assign({}, Context.api);\n                api.inheritance = true;\n\n                return api;\n            },\n            detailRoute: 'sw.product.detail.base',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.product.detail.prices',\n                    allowEdit: false,\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'product',\n                column: 'extensions.swagDynamicAccessRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'swag_dynamic_access_product_rule',\n                column: 'productId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria();\n                    criteria.addFilter(\n                            Criteria.not('AND', [Criteria.equals('swagDynamicAccessRules.id', this.rule.id)]),\n                    );\n                    criteria.addAssociation('options.group');\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating EntityDefinition with Custom Entity Class in Shopware 6 PHP\nDESCRIPTION: This snippet shows how to update the EntityDefinition class to use the custom entity class by overriding the getEntityClass method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass ExampleDefinition extends EntityDefinition\n{\n    [...]\n\n    public function getEntityClass(): string\n    {\n        return ExampleEntity::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Single Property in a Component\nDESCRIPTION: Shows how to override a single property (pageSize) in the sw-product-list component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('sw-product-list', (previousState) => {\n    const newPageSize = ref(50);\n\n    return {\n        pageSize: newPageSize // Override the default page size with the new ref\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Field in Twig Template\nDESCRIPTION: This snippet demonstrates how to display a custom field in a Twig template using translation and sanitization functions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-custom-fields-storefront.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"customFields.my_test_field\"|trans|sw_sanitize }}: {{ page.product.translated.customFields.my_test_field }}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Order State in Shopware 6\nDESCRIPTION: Example showing how to transition an order's state to 'in_progress' using the StateMachineRegistry. Uses the OrderDefinition entity name and requires order ID, transition action, and state field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->stateMachineRegistry->transition(new Transition(\n    OrderDefinition::ENTITY_NAME,\n    '<ID here>',\n    'process',\n    'stateId'\n), $context);\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching in a Shopware Plugin\nDESCRIPTION: This example demonstrates how to implement data fetching functionality in a Shopware plugin. It extends the PluginBaseClass and uses the modern fetch API to make an asynchronous request to the checkout information endpoint, then logs the response data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/fetching-data-with-javascript.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/example-plugin/example-plugin.plugin.js\nconst { PluginBaseClass } = window;\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        this.fetchData();\n    }\n\n    // ...\n\n    async fetchData() {\n        const response = await fetch('/widgets/checkout/info');\n        const data = await response.text();\n\n        console.log(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Decoration in XML\nDESCRIPTION: XML configuration for decorating a service in Shopware 6. Defines the original service and its decorator, with the decorator referencing the inner service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/adjusting-service.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ExampleService\" />\n\n        <service id=\"Swag\\BasicExample\\Service\\ExampleServiceDecorator\" decorates=\"Swag\\BasicExample\\Service\\ExampleService\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Service\\ExampleServiceDecorator.inner\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Test with Required Props in Shopware\nDESCRIPTION: An updated test for the sw-multi-select component that includes the required props. This example adds the options and value props to resolve Vue warnings about missing required properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwrapper = shallowMount(Shopware.Component.build('sw-multi-select'), {\n    props: {\n        options: [],\n        value: ''\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default Flags in Shopware 6 Entity Fields\nDESCRIPTION: Illustrates how to overwrite default flags for an entity field using setFlags() method in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-flags.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n(new IdField('id', 'id'))->setFlags(new Required())\n```\n\n----------------------------------------\n\nTITLE: Implementing StockStorageDecorator in PHP for Custom Stock Loading\nDESCRIPTION: This PHP class decorates AbstractStockStorage to load stock data from a third-party API. It implements the load method to fetch stock information for given product IDs and return it as a StockDataCollection.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/loading-stock-information-from-different-source.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\Example\\Service;\n\nuse Shopware\\Core\\Content\\Product\\Stock\\AbstractStockStorage;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockData;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockDataCollection;\nuse Shopware\\Core\\Content\\Product\\Stock\\StockLoadRequest;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass StockStorageDecorator extends AbstractStockStorage\n{\n    public function __construct(private AbstractStockStorage $decorated)\n    {\n    }\n\n    public function getDecorated(): AbstractStockStorage\n    {\n        return $this->decorated;\n    }\n\n    public function load(StockLoadRequest $stockRequest, SalesChannelContext $context): StockDataCollection\n    {\n        $productsIds = $stockRequest->productIds;\n\n        //use $productIds to make an API request to get stock data\n        //$result would come from the api response\n        $result = ['product-1' => 5, 'product-2' => 10];\n\n        return new StockDataCollection(\n            array_map(function (string $productId, int $stock) {\n                return new StockData($productId, $stock, true);\n            }, array_keys($result), $result)\n        );\n    }\n\n    public function alter(array $changes, Context $context): void\n    {\n        $this->decorated->alter($changes, $context);\n    }\n\n    public function index(array $productIds, Context $context): void\n    {\n        $this->decorated->index($productIds, $context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Redis DSN Configuration\nDESCRIPTION: Example of using environment variables in Redis connection strings, allowing for flexible configuration across different environments while maintaining database separation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/redis.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    # ...\n    redis:\n        connections:\n            ephemeral_1:\n                dsn: '%env(REDIS_EPHEMERAL)%/1' # using database 1\n            ephemeral_2:\n                dsn: '%env(REDIS_EPHEMERAL)%/2' # using database 2\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductConverter for Custom Migration Profile in PHP\nDESCRIPTION: This code defines a ProductConverter class that extends ShopwareConverter. It handles the conversion of product data from a custom source format to Shopware 6 compatible format. The class includes methods for support checking, mapping, and data conversion including tax and price calculations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Converter;\n\nuse Shopware\\Core\\Framework\\Context;\nuse SwagMigrationAssistant\\Migration\\Converter\\ConvertStruct;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DefaultEntities;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Converter\\ShopwareConverter;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\DataSet\\ProductDataSet;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile;\n\nclass ProductConverter extends ShopwareConverter\n{\n    private string $connectionId;\n\n    private Context $context;\n\n    public function getSourceIdentifier(array $data): string\n    {\n        return $data['id'];\n    }\n\n    /**\n     * Supports only an OwnProfile and the ProductDataSet\n     */\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile &&\n            $migrationContext->getDataSet()::getEntity() === ProductDataSet::getEntity();\n    }\n\n    /**\n     * Writes the created mapping\n     */\n    public function writeMapping(Context $context): void\n    {\n        $this->mappingService->writeMapping($context);\n    }\n\n    public function convert(array $data, Context $context, MigrationContextInterface $migrationContext): ConvertStruct\n    {\n        $this->generateChecksum($data);\n        $this->connectionId = $migrationContext->getConnection()->getId();\n        $this->context = $context;\n\n        /**\n         * Gets the product uuid out of the mapping table or creates a new one\n         */\n        $this->mainMapping = $this->mappingService->getOrCreateMapping(\n            $migrationContext->getConnection()->getId(),\n            ProductDataSet::getEntity(),\n            $data['id'],\n            $context,\n            $this->checksum\n        );\n\n        $converted['id'] = $this->mainMapping['entityUuid'];\n        $this->convertValue($converted, 'productNumber', $data, 'product_number');\n        $this->convertValue($converted, 'name', $data, 'product_name');\n        $this->convertValue($converted, 'stock', $data, 'stock', self::TYPE_INTEGER);\n\n        if (isset($data['tax'])) {\n            $converted['tax'] = $this->getTax($data);\n            $converted['price'] = $this->getPrice($data, $converted['tax']['taxRate']);\n        }\n\n        unset(\n          $data['id'],\n          $data['product_number'],\n          $data['product_name'],\n          $data['stock'],\n          $data['tax'],\n          $data['price']\n        );\n\n        if (empty($data)) {\n            $data = null;\n        }\n        $this->updateMainMapping($migrationContext, $context);\n\n        return new ConvertStruct($converted, $data, $this->mainMapping['id']);\n    }\n\n    private function getTax(array $data): array\n    {\n        $taxRate = (float) $data['tax'];\n\n        /**\n         * Gets the tax uuid by the given tax rate\n         */\n        $taxUuid = $this->mappingService->getTaxUuid($this->connectionId, $taxRate, $this->context);\n\n        /**\n         * If no tax rate is found, create a new one\n         */\n        if ($taxUuid === null) {\n            $mapping = $this->mappingService->createMapping(\n                $this->connectionId,\n                DefaultEntities::TAX,\n                $data['id']\n            );\n            $taxUuid = $mapping['entityUuid'];\n        }\n\n        return [\n            'id' => $taxUuid,\n            'taxRate' => $taxRate,\n            'name' => 'Own profile tax rate (' . $taxRate . ')',\n        ];\n    }\n\n    private function getPrice(array $data, float $taxRate): array\n    {\n        $gross = (float) $data['price'] * (1 + $taxRate / 100);\n\n        /**\n         * Gets the currency uuid by the given iso code\n         */\n        $currencyUuid = $this->mappingService->getCurrencyUuid(\n            $this->connectionId,\n            'EUR',\n            $this->context\n        );\n\n        if ($currencyUuid === null) {\n            return [];\n        }\n\n        $price = [];\n        $price[] = [\n            'currencyId' => $currencyUuid,\n            'gross' => $gross,\n            'net' => (float) $data['price'],\n            'linked' => true,\n        ];\n\n        return $price;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic SEO URLs for Custom Content in Shopware\nDESCRIPTION: This PHP service class handles the creation and updating of SEO URLs for dynamic content in Shopware. It uses the SeoUrlPersister to write entries to the seo_url table and includes methods for writing and deleting SEO entries.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Cocur\\Slugify\\SlugifyInterface;\nuse Shopware\\Core\\Content\\Seo\\SeoUrlPersister;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\n\nclass DynamicSeoUrlsService\n{\n    public const ROUTE_NAME = 'example.route.name';\n\n    private SeoUrlPersister $seoUrlPersister;\n\n    private EntityRepository $salesChannelRepository;\n\n    private SlugifyInterface $slugify;\n\n    public function __construct(\n        SeoUrlPersister $seoUrlPersister,\n        EntityRepository $salesChannelRepository,\n        SlugifyInterface $slugify\n    ) {\n        $this->seoUrlPersister = $seoUrlPersister;\n        $this->salesChannelRepository = $salesChannelRepository;\n        $this->slugify = $slugify;\n    }\n\n    public function writeSeoEntries(array $entries, Context $context): void\n    {\n        $urls = [];\n\n        $salesChannelId = $this->getStorefrontSalesChannelId($context);\n        if (!$salesChannelId) {\n            // Might want to throw an error here\n            return;\n        }\n\n        foreach ($entries as $entry) {\n            $urls[] = [\n                'salesChannelId' => $salesChannelId,\n                'foreignKey' => $entry->getId(),\n                // The name of the route in the respective controller\n                'routeName' => self::ROUTE_NAME,\n                // The technical path of your custom route, using a given parameter\n                'pathInfo' => '/example-path/' . $entry->getId(),\n                'isCanonical' => true,\n                // The SEO URL that you want to use here, in this case just the name\n                'seoPathInfo' => '/' . $this->slugify->slugify($entry->getName()),\n            ];\n        }\n\n        // You might have to create a new context using another specific language ID\n        $this->seoUrlPersister->updateSeoUrls($context, self::ROUTE_NAME, array_column($urls, 'foreignKey') , $urls);\n    }\n\n    private function getStorefrontSalesChannelId(Context $context): ?string\n    {\n        $criteria = new Criteria();\n        $criteria->addFilter(new EqualsFilter('typeId', Defaults::SALES_CHANNEL_TYPE_STOREFRONT));\n\n        return $this->salesChannelRepository->searchIds($criteria, $context)->firstId();\n    }\n\n    public function deleteSeoEntries(array $ids, Context $context): void\n    {\n        $this->seoUrlPersister->updateSeoUrls($context, self::ROUTE_NAME, $ids, []);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Adapter Installation and Configuration\nDESCRIPTION: Instructions for installing the S3 adapter package and configuring Shopware 6 to use Amazon S3 for file storage, including bucket, region, endpoint, and credentials settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-async-aws-s3\n```\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    filesystem:\n      {ADAPTER_NAME}:\n        type: \"amazon-s3\"\n        url: \"https://your-cloudfront-url\"\n        visibility: \"private\" # Default is \"public\", can be set only on shopware.filesystem.private\n        config:\n            bucket: \"{your-public-bucket-name}\"\n            region: \"{your-bucket-region}\"\n            endpoint: \"{your-s3-provider-endpoint}\"\n            root: \"{your-root-folder}\"\n            # Optional, otherwise will be automatically discovered with AWS content discovery\n            credentials:\n              key: '{your-access-key}'\n              secret: '{your-secret-key}'\n\n```\n\n----------------------------------------\n\nTITLE: Handling Recurring Captures with Shopware App PHP SDK\nDESCRIPTION: PHP code example demonstrating how to handle recurring captures using the Shopware App PHP SDK. It includes shop resolution, context assembly, and response signing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\n\nfunction validate(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $payment = $contextResolver->assemblePaymentRecurringCapture($serverRequest, $shop);\n    \n    // implement your logic here based on the information provided in $payment\n    \n    // check PaymentResponse class for all available payment states\n    return $signer->signResponse(PaymentResponse::paid(), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Transfer Objects with Traditional and Readonly Properties in PHP\nDESCRIPTION: These PHP code snippets illustrate the difference between classic and modern PHP approaches to constructing immutable data objects. The first example creates a class with private properties, a constructor, and getters; the second uses public readonly promoted properties to dramatically reduce boilerplate. Requires PHP 8.1+ for readonly and property promotion support. Input parameters represent command payload data; output is initialized class instances with immutable state. Useful for conveying intent and minimizing code required for immutable DTOs.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass ProductReindexCommand\n{\n    private int $productId;\n    \n    private bool $includeStock:\n    \n    public function __construct(int $productId, bool $includeStock)\n    {\n        $this->productId = $productId;\n        $this->includeStock = $includeStock;\n    }\n    \n    public function getProductId(): int\n    {\n        return $this->productId;\n    }\n    \n    public function includeStock(): bool\n    {\n        return $this->includeStock;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass ProductReindexCommand\n{\n    public function __construct(public readonly int $productId, public readonly bool $includeStock)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Component Template Definition\nDESCRIPTION: Basic example of defining an inline template for a Shopware 6 component with a simple hello world message.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Shopware.Component.wrapComponentConfig({\n    template: '<h2>Hello world!</h2>'\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Cart Errors and Notifications\nDESCRIPTION: Example of adding and removing error messages in the cart, which can block checkout. Shows error handling with optional ID and parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% if not cartIsValid %}\n    {# add a new error #}\n    {% do services.cart.errors.error('my-error-message', 'error-id') %}\n{% else %}\n    {% do services.cart.errors.remove('error-id') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CMS Blocks in Shopware XML\nDESCRIPTION: This XML snippet demonstrates how to define custom CMS blocks for Shopware applications. It includes two block examples with different slots, configurations, and localized labels. The XML follows a specific schema for CMS block definitions in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/cms-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<cms xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Cms/Schema/cms-1.0.xsd\">\n    <blocks>\n        <block>\n            <name>my-first-block</name>\n            <category>text-image</category>\n            <label>First block from app</label>\n            <label lang=\"de-DE\">Erster Block einer App</label>\n            <slots>\n                <slot name=\"left\" type=\"manufacturer-logo\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"cover\"/>\n                    </config>\n                </slot>\n                <slot name=\"middle\" type=\"image-gallery\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"auto\"/>\n                        <config-value name=\"min-height\" source=\"static\" value=\"300px\"/>\n                    </config>\n                </slot>\n                <slot name=\"right\" type=\"buy-box\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"contain\"/>\n                    </config>\n                </slot>\n            </slots>\n            <default-config>\n                <margin-bottom>20px</margin-bottom>\n                <margin-top>20px</margin-top>\n                <margin-left>20px</margin-left>\n                <margin-right>20px</margin-right>\n                <sizing-mode>boxed</sizing-mode>\n                <background-color>#000</background-color>\n            </default-config>\n        </block>\n        <block>\n            <name>my-second-block</name>\n            <category>text-image</category>\n            <label>Second block from app</label>\n            <label lang=\"de-DE\">Zweiter Block einer App</label>\n            <slots>\n                <slot name=\"left\" type=\"form\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"cover\"/>\n                    </config>\n                </slot>\n                <slot name=\"middle\" type=\"image\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"auto\"/>\n                        <config-value name=\"background-color\" source=\"static\" value=\"red\"/>\n                    </config>\n                </slot>\n                <slot name=\"right\" type=\"youtube-video\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"contain\"/>\n                    </config>\n                </slot>\n            </slots>\n            <default-config>\n                <margin-bottom>20px</margin-bottom>\n                <margin-top>20px</margin-top>\n                <margin-left>20px</margin-left>\n                <margin-right>20px</margin-right>\n                <sizing-mode>boxed</sizing-mode>\n                <background-color>#000</background-color>\n            </default-config>\n        </block>\n    </blocks>\n</cms>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Adapter in Shopware\nDESCRIPTION: YAML configuration to switch Shopware's app and system cache to use Redis with tag awareness. This snippet shows how to modify the cache.yaml file to use Redis as the cache adapter instead of the default filesystem cache.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/caches.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/cache.yaml\nframework:\n  cache:\n    app: cache.adapter.redis_tag_aware\n    system: cache.adapter.redis_tag_aware\n    default_redis_provider: redis://localhost\n```\n\n----------------------------------------\n\nTITLE: Implementing BundleConverter for Shopware Migration\nDESCRIPTION: A converter class that transforms Shopware 5 bundle data to Shopware 6 structure. It handles data validation, UUID mapping, and relationship management with product entities. The converter extends ShopwareConverter and implements the necessary support and conversion logic.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationBundleExample\\Profile\\Shopware\\Converter;\n\nuse Shopware\\Core\\Framework\\Context;\nuse SwagMigrationAssistant\\Migration\\Converter\\ConvertStruct;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DefaultEntities;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Converter\\ShopwareConverter;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\nuse SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet\\BundleDataSet;\n\nclass BundleConverter extends ShopwareConverter\n{\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        // Take care that you specify the supports function the same way that you have in your reader\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface\n            && $migrationContext->getDataSet()::getEntity() === BundleDataSet::getEntity();\n    }\n\n    public function getSourceIdentifier(array $data): string\n    {\n        return $data['id'];\n    }\n\n    public function convert(array $data, Context $context, MigrationContextInterface $migrationContext): ConvertStruct\n    {\n        // Generate a checksum for the data to allow faster migrations in the future\n        $this->generateChecksum($data);\n\n        // Get uuid for bundle entity out of mapping table or create a new one\n        $this->mainMapping = $this->mappingService->getOrCreateMapping(\n            $migrationContext->getConnection()->getId(),\n            BundleDataSet::getEntity(),\n            $data['id'],\n            $context,\n            $this->checksum\n        );\n        $converted['id'] = $this->mainMapping['entityUuid'];\n\n        // This method checks if key is available in data array and set value in converted array\n        $this->convertValue($converted, 'name', $data, 'name');\n\n        // Set default values for required fields, because these data do not exists in SW5\n        $converted['discountType'] = 'absolute';\n        $converted['discount'] = 0;\n\n        if (isset($data['products'])) {\n            $products = $this->getProducts($context, $migrationContext, $data);\n\n            if (!empty($products)) {\n                $converted['products'] = $products;\n            }\n        }\n\n        // Unset used data keys\n        unset(\n            // Used\n            $data['id'],\n            $data['name'],\n            $data['products']\n        );\n\n        if (empty($data)) {\n            $data = null;\n        }\n        $this->updateMainMapping($migrationContext, $context);\n\n        return new ConvertStruct($converted, $data, $this->mainMapping['id']);\n    }\n\n    /** \n     * Get converted products \n    */\n    private function getProducts(Context $context, MigrationContextInterface $migrationContext, array $data): array\n    {\n        $connectionId = $migrationContext->getConnection()->getId();\n        $products = [];\n        foreach ($data['products'] as $product) {\n            // Get associated uuid of product out of mapping table\n            $mapping = $this->mappingService->getMapping(\n                $connectionId,\n                DefaultEntities::PRODUCT . '_mainProduct',\n                $product,\n                $context\n            );\n\n            // Log missing association of product\n            if ($mapping === null) {\n                continue;\n            }\n\n            $productUuid = $mapping['entityUuid'];\n            $newProduct['id'] = $productUuid;\n            $products[] = $newProduct;\n        }\n\n        return $products;\n    }\n\n    /** \n     * Called to write the created mapping to the mapping table\n    */\n    public function writeMapping(Context $context): void\n    {\n        $this->mappingService->writeMapping($context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Lock Store in Shopware\nDESCRIPTION: Configuration to use Redis as a lock store for Symfony's Lock component, which is essential for multi-machine setups to avoid file-based lock issues.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/framework.yaml\nframework:\n    lock: 'redis://host:port'\n```\n\n----------------------------------------\n\nTITLE: Using Redis Connection Provider in PHP Service\nDESCRIPTION: Shows how to implement a service class that uses the RedisConnectionProvider to access Redis connections by name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/redis.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyCustomService\n{ \n    public function __construct (\n        private RedisConnectionProvider $redisConnectionProvider,\n        string $connectionName,\n    ) { }\n\n    public function doSomething()\n    {\n        if ($this->redisConnectionProvider->hasConnection($this->connectionName)) {\n            $connection = $this->redisConnectionProvider->getConnection($this->connectionName);\n            // use connection\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using RepositoryFactory Service in Shopware 6 Vue Component\nDESCRIPTION: This snippet demonstrates how to inject the repositoryFactory service into a Shopware 6 Vue component and use it to create a product repository. It shows the usage of the 'inject' property and how to instantiate the injected service in the created() lifecycle hook.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/injecting-services.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    // inject the service\n    inject: ['repositoryFactory'],\n\n    created() {\n        // insatiate the injected repositoryFactory \n        this.productRepository = this.repositoryFactory.create('product')\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Redundant Stock Update Logic via Context Flag in Shopware 6 (PHP)\nDESCRIPTION: This snippet shows how to prevent unnecessary stock update operations during order processing in Shopware 6. By checking for a specific context state ('checkout-order-route') in the EntityWrittenEvent, the handler can exit early and avoid costly updates that have already been performed. The method depends on the context state being set elsewhere and is meant to be used in high throughput scenarios to avert redundant computations. It takes the event as input and immediately returns if the condition is met.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-available-stock.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function lineItemWritten(EntityWrittenEvent $event): void\n{\n    $ids = [];\n\n    // we don't want to trigger to `update` method when we are inside the order process\n    if ($event->getContext()->hasState('checkout-order-route')) {\n        return;\n    }\n    \n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic JavaScript Plugin in Shopware\nDESCRIPTION: Basic structure of a JavaScript plugin class in Shopware that extends the PluginBaseClass. This empty plugin serves as a foundation for implementing event listeners.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/reacting-to-javascript-events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/events-plugin/events-plugin.plugin.js\nconst { PluginBaseClass } = window;\n\nexport default class EventsPlugin extends PluginBaseClass {\n    init() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Existing Route in Storefront Endpoints\nDESCRIPTION: Shows how to redirect to an existing route in a Storefront endpoint script. This example redirects to a product detail page using a product ID from the query parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set productId = hook.query['product-id'] %}\n\n{% set response = services.response.redirect('frontend.detail.page', { 'productId': productId }) %}\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Registering a CMS Block Component in JavaScript\nDESCRIPTION: This code registers a custom CMS block component by importing the template and stylesheet, then registering the component with Shopware's Component system. It establishes the foundation for the block's visual representation in the Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/component/index.js\nimport template from './sw-cms-block-my-image-text-reversed.html.twig';\nimport './sw-cms-block-my-image-text-reversed.scss';\n\nShopware.Component.register('sw-cms-block-my-image-text-reversed', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Adding EntityCustomFieldsTrait to Entity Class in PHP\nDESCRIPTION: This snippet shows how to add the EntityCustomFieldsTrait to an entity class to support custom fields. It adds getCustomFields() and setCustomFields() methods to the entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleEntity.php\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityCustomFieldsTrait;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityIdTrait;\n\n[...]\nclass ExampleEntity extends Entity\n{\n    use EntityIdTrait;\n    use EntityCustomFieldsTrait;\n\n    [...]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Vuex Store Usage in Shopware 6 Component Template\nDESCRIPTION: Demonstrates how to use Vuex store state and mutations in a Shopware 6 component template, displaying and updating the 'content' state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-vuex-state.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <h1>SW-6 State</h1>\n    <sw-text-field\n            :value=\"content\"\n            @update:value=\"value => setContent(value)\">\n    </sw-text-field>\n    <div>\n        {{ content }}\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Products in Shopware 6\nDESCRIPTION: Example of updating an existing product's data using the repository update method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example product'));\n\n    $productId = $this->productRepository->searchIds($criteria, $context)->firstId();\n\n    $this->productRepository->update([\n        [\n            'id' => $productId,\n            'name' => 'New name'\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin folder structure setup\nDESCRIPTION: Required folder structure for setting up E2E tests in a Shopware plugin environment\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResources\n  `-- app\n    `-- <environment>\n      `-- test\n        `-- e2e\n          `-- cypress\n            |-- fixtures\n            |-- integration\n            |-- plugins\n            `-- support\n```\n\n----------------------------------------\n\nTITLE: Optimized Media Loading in Product Listing with Twig\nDESCRIPTION: Implementation for loading multiple media objects efficiently in a product listing. This pattern collects all needed media IDs first and performs a single database query rather than querying inside a loop.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/component/product/listing.html.twig' %}\n\n{% block element_product_listing_col %}\n    {# initial ID array #}\n    {% set sportsMediaIds = [] %}\n\n    {% for product in searchResult %}\n        {# simplify ID access #}\n        {% set sportsMediaId = product.translated.customFields.custom_sports_media_id %}\n\n        {# merge IDs to a single array #}\n        {% set sportsMediaIds = sportsMediaIds|merge([sportsMediaId]) %}\n    {% endfor %}\n\n    {# do a single fetch from database #}\n    {% set mediaCollection = searchMedia(sportsMediaIds, context.context) %}\n\n    {% for product in searchResult %}\n        {# simplify ID access #}\n        {% set sportsMediaId = product.translated.customFields.custom_sports_media_id %}\n\n        {# get access to media of product #}\n        {% set sportsMedia = mediaCollection.get(sportsMediaId) %}\n\n        {{ dump(sportsMedia) }}\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for SEO URL Template in PHP\nDESCRIPTION: This PHP code shows how to create a database migration that adds a new entry to the seo_url_template table for the custom entity's SEO URL template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Swag\\BasicExample\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ExamplePageSeoUrlRoute;\n\nclass Migration1619514731AddExampleSeoUrlTemplate extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1619514731;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $connection->insert('seo_url_template', [\n            'id' => Uuid::randomBytes(),\n            'sales_channel_id' => null,\n            'route_name' => ExamplePageSeoUrlRoute::ROUTE_NAME,\n            'entity_name' => 'swag_example',\n            'template' => ExamplePageSeoUrlRoute::DEFAULT_TEMPLATE,\n            'created_at' => (new \\DateTimeImmutable())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n        ]);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Vuex Store in Component Lifecycle\nDESCRIPTION: Shows how to register a Vuex store in the beforeCreate hook and unregister it in the beforeDestroy hook of a Vue component in Shopware 6 Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-vuex-state.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeCreate() {\n    // registering the store to vuex through the Shopware objects helper function\n    // the first argument is the name the second the imported namespaced store\n    Shopware.State.registerModule('swagBasicState', swagBasicState);\n},\n\nbeforeDestroy() {\n    // unregister the store before the component is destroyed\n    Shopware.State.unregisterModule('swagBasicState');\n},\n```\n\n----------------------------------------\n\nTITLE: Service Injection with Property Renaming\nDESCRIPTION: Shows how to inject a service with a custom property name to avoid naming conflicts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: {\n        jokeService: 'joker'\n    },\n\n    created() {\n        this.jokeService.joke().then(joke => console.log(joke))\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Product Repository with Version Options\nDESCRIPTION: Demonstrates how to create a repository for the product entity with specific API version options.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nComponent.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            repository: undefined\n        }\n    },\n\n    created() {\n        const options = {\n            version: 1 // default is the latest api version\n        };\n\n        this.repository = this.repositoryFactory.create('product', null, options);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Privileges in Shopware\nDESCRIPTION: Shows how to protect plugin routes by adding privilege requirements in the route meta configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nModule.register('your-plugin-module', {\n    routes: {\n        detail: {\n            component: 'your-plugin-detail',\n            path: 'your-plugin',\n            meta: {\n                privilege: 'your_key.your_role' // e.g. 'product.viewer'\n            }\n        }    \n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Storefront JavaScript Plugin for AJAX Loading\nDESCRIPTION: JavaScript plugin implementation that handles AJAX requests to fetch and display timestamp data from the controller.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-dynamic-content-via-ajax-calls.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PluginBaseClass } = window;\n\nexport default class AjaxLoadPlugin extends PluginBaseClass {\n    init() {\n        this.button = this.el.children['ajax-button'];\n        this.textdiv = this.el.children['ajax-display'];\n\n        this._registerEvents();\n    }\n\n    _registerEvents() {\n        // fetch the timestamp, when the button is clicked\n        this.button.onclick = this._fetch.bind(this);\n    }\n\n    async _fetch() {\n        const response = await fetch('/example');\n        const data = await response.json();\n        this.textdiv.innerHTML = data.timestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Merging Entity Versions in PHP\nDESCRIPTION: Demonstrates how to create a new version of an entity, update it, and merge the changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/versioning-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/\npublic function exampleVersioning(Context $context): void\n{\n    $exampleId = Uuid::randomHex();\n\n    $this->exampleRepository->create([[\n        'id' => $exampleId,\n        'name' => 'Example',\n        'description' => 'This is an example',\n        'active' => true,\n    ]], $context);\n\n    // Create new version of our entity\n    $versionId = $this->exampleRepository->createVersion($exampleId, $context);\n\n    // Update the context with our version\n    $versionContext = $context->createWithVersionId($versionId);\n\n    // Update our new entity version\n    $this->exampleRepository->update([\n        [\n            'id' => $exampleId,\n            'description' => 'This is our new description',\n        ],\n    ], $versionContext);\n\n    // Our first entity will be found\n    $exampleOne = $this->exampleRepository->search(new Criteria([$exampleId]), $context)->first();\n\n    // Updated entity will be found\n    $exampleTwo = $this->exampleRepository->search(new Criteria([$exampleId]), $versionContext)->first();\n\n    $this->exampleRepository->merge($versionId, $context);\n\n    // Our updated entity will be found now\n    $exampleThree = $this->exampleRepository->search(new Criteria([$exampleId]), $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Event Subscriber in PHP for Shopware\nDESCRIPTION: This snippet shows how to create a ProductSubscriber class that listens to product-related events using the ProductEvents constants. It implements the EventSubscriberInterface and defines methods to handle product loaded and written events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-database-events.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ProductSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            ProductEvents::PRODUCT_LOADED_EVENT => 'onLoad',\n            ProductEvents::PRODUCT_WRITTEN_EVENT => 'afterWrite',\n        ];\n    }\n\n    public function onLoad(EntityLoadedEvent $event)\n    {\n        ...\n    }\n\n    public function afterWrite(EntityWrittenEvent $event)\n    {\n        ...\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Cypress Hooks for Test Setup and Teardown\nDESCRIPTION: Shows how to use Cypress hooks (before, beforeEach, afterEach, after) to set up prerequisites and clean up after tests in Shopware E2E testing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('We are using hooks', function() {\n  before(function() {\n    // runs once before all tests in the block\n  })\n\n  beforeEach(function() {\n    // runs before each test in the block\n  })\n\n  afterEach(function() {\n    // runs after each test in the block\n  })\n\n  after(function() {\n    // runs once after all tests in the block\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Product Stock in Shopware using PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a product's current stock level using Shopware's DataAbstractionLayer. It creates a service class that accepts a product repository and implements a method to fetch a product by ID and access its stock value.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/reading-writing-stock.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Swag/Example/ServiceReadingData.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\Example\\Service;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\n\nclass ReadingStock\n{\n    private EntityRepository $productRepository;\n\n    public function __construct(EntityRepository $productRepository)\n    {\n        $this->productRepository = $productRepository;\n    }\n    \n    public function read(Context $context): void\n    {\n        $product = $this->productRepository\n            ->search(new Criteria([$productId]), $context)\n            ->first();\n            \n        $stock = $product->getStock();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CLI Command Class in PHP\nDESCRIPTION: PHP class for a custom CLI command in Shopware 6. The class extends Symfony's Command class and implements the configure() and execute() methods. It demonstrates setting a description and basic command execution.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-custom-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\n\n// Command name\n#[AsCommand(name: 'swag-commands:example')]\nclass ExampleCommand extends Command\n{\n    // Provides a description, printed out in bin/console\n    protected function configure(): void\n    {\n        $this->setDescription('Does something very special.');\n    }\n\n    // Actual code executed in the command\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $output->writeln('It works!');\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Action Input Fields in XML\nDESCRIPTION: XML configuration example showing how to define input fields for flow actions with multilingual support. Demonstrates setting up a text input field with labels, placeholders, and help text in multiple languages.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<flow-action>\n    <meta>\n        ...\n    </meta>\n    <headers>\n        ...\n    </headers>\n    <parameters>\n        ...\n    </parameters>\n    <config>\n        <input-field type=\"text\">\n            <name>message</name>\n            <label>Message</label>\n            <label lang=\"de-DE\">Gegenstand</label>\n            <place-holder>Placeholder</place-holder>\n            <place-holder lang=\"de-DE\">Platzhalter</place-holder>\n            <required>true</required>\n            <helpText>Help Text</helpText>\n            <helpText lang=\"de-DE\">Hilfstext</helpText>\n        </input-field>\n    </config>\n</flow-action>\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Price using MaxAggregation in PHP\nDESCRIPTION: Shows how to use MaxAggregation to find the maximum price of products. It creates a Criteria object, adds the aggregation, and retrieves the result.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new MaxAggregation('max-price', 'price')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var MaxResult $aggregation */\n$aggregation = $result->getAggregations()->get('max-price');\n\n$aggregation->getMax();\n```\n\n----------------------------------------\n\nTITLE: Adding Products to Cart in Shopware Controller\nDESCRIPTION: Example controller implementation showing how to create and add line items to the cart using LineItemFactoryRegistry and CartService. Demonstrates product line item creation with quantity, referenced ID, and custom payload data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-items.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\nuse Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry;\nuse Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Shopware\\Storefront\\Framework\\Routing\\StorefrontResponse;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n    private LineItemFactoryRegistry $factory;\n\n    private CartService $cartService;\n\n    public function __construct(LineItemFactoryRegistry $factory, CartService $cartService)\n    {\n        $this->factory = $factory;\n        $this->cartService = $cartService;\n    }\n\n    #[Route(path: '/cartAdd', name: 'frontend.example', methods: ['GET'])]\n    public function add(Cart $cart, SalesChannelContext $context): StorefrontResponse\n    {\n        // Create product line item\n        $lineItem = $this->factory->create([\n            'type' => LineItem::PRODUCT_LINE_ITEM_TYPE, // Results in 'product'\n            'referencedId' => 'myExampleId', // this is not a valid UUID, change this to your actual ID!\n            'quantity' => 5,\n            'payload' => ['key' => 'value']\n        ], $context);\n\n        $this->cartService->add($cart, $lineItem, $context);\n\n        return $this->renderStorefront('@Storefront/storefront/base.html.twig');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Field Types for an Entity in Shopware 6\nDESCRIPTION: This PHP code shows how to define various field types for an entity using the Field attribute. It includes examples of UUID, string, text, and integer fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n\n    #[Field(type: FieldType::STRING)]\n    public string $string;\n\n    #[Field(type: FieldType::TEXT)]\n    public ?string $text = null;\n\n    #[Field(type: FieldType::INT)]\n    public ?int $int;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Complete Dailymotion CMS Element Component with Configuration\nDESCRIPTION: Complete implementation of the main component with the CMS element mixin to handle configuration, computed properties for the video URL, and initialization methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/component/index.js\nimport template from './sw-cms-el-dailymotion.html.twig';\nimport './sw-cms-el-dailymotion.scss';\n\nShopware.Component.register('sw-cms-el-dailymotion', {\n    template,\n\n    mixins: [\n        'cms-element'\n    ],\n\n    computed: {\n        dailyUrl() {\n            return `https://www.dailymotion.com/embed/video/${this.element.config.dailyUrl.value}`;\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initElementConfig('dailymotion');\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Sync API Operations in TypeScript\nDESCRIPTION: Shows how to use the Sync API for batch operations like creating, updating, and deleting entities in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/05-http-client.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SyncOperation, SyncService } from \"@shopware-ag/app-server-sdk/helper/admin-api\";\n\n// The same http client as usual\nconst httpClient = ...;\n\nconst syncService = new SyncService(httpClient);\n\nawait syncService.sync([\n  // the key will be shown in the error response if that failed\n  new SyncOperation('my-custom-key', 'product', 'upsert', [{id: 'my-uuid', name: 'My Product'}]),\n\n  // delete a product\n  new SyncOperation('my-custom-key', 'product', 'delete', [{id: 'my-uuid'}]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Prepared Payments Handler in Shopware PHP\nDESCRIPTION: Example implementation of PreparedPaymentHandlerInterface for handling pre-created payments in headless systems. Includes validation and capture methods with proper error handling and transaction state management.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler;\nuse Shopware\\Core\\Checkout\\Payment\\PaymentException;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PreparedPaymentHandlerInterface;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PreparedPaymentTransactionStruct;\nuse Shopware\\Core\\Checkout\\Payment\\Exception\\CapturePreparedPaymentException;\nuse Shopware\\Core\\Checkout\\Payment\\Exception\\ValidatePreparedPaymentException;\nuse Shopware\\Core\\Framework\\Struct\\ArrayStruct;\nuse Shopware\\Core\\Framework\\Struct\\Struct;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass ExamplePayment implements PreparedPaymentHandlerInterface\n{\n    private OrderTransactionStateHandler $stateHandler;\n\n    public function __construct(OrderTransactionStateHandler $stateHandler)\n    {\n        $this->stateHandler = $stateHandler;\n    }\n\n    public function validate(\n        Cart $cart,\n        RequestDataBag $requestDataBag,\n        SalesChannelContext $context\n    ): Struct {\n        if (!$requestDataBag->has('my-payment-token')) {\n            throw PaymentException::preparedValidate('No token supplied');\n        }\n\n        $token = $requestDataBag->get('my-payment-token');\n        $paymentData = $this->getPaymentDataFromProvider($token);\n\n        if (!$paymentData) {\n            throw PaymentException::preparedValidate('Unknown payment for token ' . $token);\n        }\n\n        return new ArrayStruct($paymentData);\n    }\n\n    public function capture(\n        PreparedPaymentTransactionStruct $transaction,\n        RequestDataBag $requestDataBag,\n        SalesChannelContext $context,\n        Struct $preOrderPaymentStruct\n    ): void {\n        $order = $transaction->getOrder();\n        $orderTransaction = $transaction->getOrderTransaction();\n\n        $this->stateHandler->paid($orderTransaction->getId(), $context->getContext());\n        \n        $this->stateHandler->fail($orderTransaction->getId(), $context->getContext());\n        throw PaymentException::preparedCapture($orderTransaction->getId(), 'Capture failed.');\n    }\n\n    private function getPaymentDataFromProvider(string $token): array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Computed Properties for Error Handling in Vue Component\nDESCRIPTION: This example demonstrates how to use computed properties in a Vue component to access API errors from the Vuex store, including handling of nested properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed: {\n    propertyError() {\n        return this.$store.getters.getApiError(myEntity, 'myFieldName');\n    },\n    nestedpropertyError() {\n        return this.$store.getters.getApiError(myEntity, 'myFieldName.nested');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Product from Cart in Twig\nDESCRIPTION: Demonstrates how to add a product to the cart and then remove it using the product ID.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% do services.cart.products.remove(hook.ids.get('p1')) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Twig Function in PHP\nDESCRIPTION: Creates a custom Twig extension class that implements an MD5 hash function. The class extends AbstractExtension and provides a method to generate MD5 hashes from strings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-twig-function.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagBasicExample\\Twig;\n\nuse Shopware\\Core\\Framework\\Context;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFunction;\n\nclass SwagCreateMd5Hash extends AbstractExtension\n{\n    public function getFunctions()\n    {\n        return [\n            new TwigFunction('createMd5Hash', [$this, 'createMd5Hash']),\n        ];\n    }\n\n    public function createMd5Hash(string $str)\n    {\n        return md5($str);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storefront HTTP Client Implementation\nDESCRIPTION: JavaScript implementation using AppClient helper for making HTTP requests to the app backend with automatic token handling\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/clientside-to-app-backend.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AppClient from 'src/service/app-client.service.ts';\n\nconst client = new AppClient('MyAppName');\n\n// the second parameter is \nclient.get('https://my-app-backend.com/foo', {\n    headers: {}, // the parameters are same as https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n})\nclient.put('https://my-app-backend.com/foo')\nclient.post('https://my-app-backend.com/foo')\nclient.patch('https://my-app-backend.com/foo')\nclient.delete('https://my-app-backend.com/foo')\n```\n\n----------------------------------------\n\nTITLE: Registering Payment Handler Service in Shopware 6\nDESCRIPTION: XML configuration for registering a custom payment handler service in Shopware 6's dependency injection container. Shows how to inject the OrderTransactionStateHandler and tag the service as a payment method handler.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\PaymentPlugin\\Service\\ExamplePayment\">\n            <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler\"/>\n            <tag name=\"shopware.payment.method.sync\" />\n<!--        <tag name=\"shopware.payment.method.async\" />-->\n<!--        <tag name=\"shopware.payment.method.prepared\" />-->\n<!--        <tag name=\"shopware.payment.method.refund\" />-->\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Skipping Flow Triggers in Shopware API\nDESCRIPTION: Demonstrates how to skip automated flow triggers using sw-skip-trigger-flow header. Useful during bulk operations like data migration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/request-headers.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/_action/sync\n--header 'sw-skip-trigger-flow: 1'\n```\n\n----------------------------------------\n\nTITLE: Using Vuex Store in Shopware 6 Component with Helper Functions\nDESCRIPTION: Illustrates how to use Vuex helper functions (mapState, mapMutations) in a Shopware 6 component to access and mutate store state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-vuex-state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './store-example.html.twig';\n\nconst { Component } = Shopware;\n\nconst { \n    mapState,\n    mapMutations,\n} = Shopware.Component.getComponentHelper();\n\nComponent.register('swag-basic-state', {\n    template,\n\n    computed: {\n        // the native mapState vuex helper function \n        ...mapState('swagBasicState', [\n            'content',\n        ])\n    },\n\n    methods: {\n        // the native mapMutations vuex helper function\n        ...mapMutations('swagBasicState', [\n            'setContent',\n        ]),\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: PHP SDK Payment Handler Implementation\nDESCRIPTION: Implementation of payment handling using Shopware App PHP SDK, including shop resolution and payment context assembly.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\n\nfunction pay(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $payment = $contextResolver->assemblePaymentPay($serverRequest, $shop);\n    \n    // Implement your logic here based on the information provided in $payment. \n    // Payment providers should redirect the customer to $payment->returnUrl once the payment process has been finished.\n    \n    return $signer->signResponse(PaymentResponse::redirect($paymentProviderRediectUrl), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Translation JSON Files for Shopware 6\nDESCRIPTION: Example of the file structure for organizing translation snippets in Shopware 6 extensions. The structure follows the convention of placing snippet files in the Resources/snippet directory with locale-specific naming.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── SwagBasicExample\n    └── src // Without `src` in apps / themes\n        ├─ Resources\n        │  └─ snippet\n        │     ├─ example.de-DE.json\n        │     └─ some-directory // optional\n        │        └─ example.en-GB.json\n        └─ SwagBasicExample.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Setup URL in Shopware App Manifest\nDESCRIPTION: Demonstrates how to specify the setup URL in the manifest file for apps that require backend communication.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<setup>\n    <registrationUrl>https://my.example.com/registration</registrationUrl>\n</setup>\n```\n\n----------------------------------------\n\nTITLE: Implementing ExamplePage class in PHP for Shopware 6\nDESCRIPTION: Defines the ExamplePage class that extends the Shopware\\Storefront\\Page\\Page class. It includes custom data fields and getter/setter methods for the example data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Page\\Example;\n\nuse Shopware\\Storefront\\Page\\Page;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\n\nclass ExamplePage extends Page\n{\n    protected ExampleEntity $exampleData;\n\n    public function getExampleData(): ExampleEntity\n    {\n        return $this->exampleData;\n    }\n\n    public function setExampleData(ExampleEntity $exampleData): void\n    {\n        $this->exampleData = $exampleData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Tag Configuration without Modal in Shopware Flow Builder\nDESCRIPTION: JavaScript code to override the openDynamicModal method for handling tag configuration directly without displaying a modal. This allows for automatic tag configuration in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/extension/sw-flow-sequence-action/index.js\nconst { Component } = Shopware;\n\nComponent.register('sw-flow-sequence-action', {\n    methods: {\n        openDynamicModal(value) {\n            if (!value) {\n                return;\n            }\n\n            const actionName = this.flowBuilderService.getActionName('CREATE_TAG');\n\n            if (value === actionName) {\n                this.selectedAction = actionName;\n                const config = {\n                    tagIds: {\n                        'tag_id_1': 'Vip',\n                        'tag_id_2': 'New Customer',\n                    },\n                };\n\n                // Config can be a result from an API.\n                this.onSaveActionSuccess({ config });\n                return;\n            }\n\n            // handle for the rest of actions.\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Using ACL Service in Components\nDESCRIPTION: Example of injecting and using the ACL service in a Shopware component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('your-plugin-component', {\n    template,\n\n    inject: ['acl'],\n\n    methods: {\n        allowSaving() {\n            return this.acl.can('sales_channel.creator');\n        }    \n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Cache in a Controller Route\nDESCRIPTION: Example of how to enable HTTP cache for a controller route in Shopware by setting the '_httpCache' default value to true in a route annotation.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/http_cache.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#[Route(path: '/detail/{productId}', name: 'frontend.detail.page', methods: ['GET'], defaults: ['_httpCache' => true])]\npublic function index(SalesChannelContext $context, Request $request): Response\n```\n\n----------------------------------------\n\nTITLE: Pinia Store Registration (After Migration)\nDESCRIPTION: New Pinia store structure using Shopware.Store.register with state as a function, getters, and actions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = Shopware.Store.register('<storeName>', {\n    state: () => ({\n        // Initial state\n        ...\n    }),\n    getters: {\n       ...\n    },\n    actions: {\n       ...\n    },\n});\nexport default store;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Text Filter in Shopware Administration\nDESCRIPTION: Creates a simple filter that converts text to uppercase and adds underscores. The filter handles null/empty values and demonstrates basic filter registration using Shopware's Filter API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/app/filter/example.filter.js\nconst { Filter } = Shopware;\n\nFilter.register('example', (value) => {\n    if (!value) {\n        return '';\n    }\n\n    return `_${value.toLocaleUpperCase()}_`;\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Computed Properties in a Shopware 6 Component\nDESCRIPTION: Shows how to extend computed properties in a custom component using Shopware.Component.extend()\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// extend the existing component `sw-text-field` by passing\n// a new component name and the new configuration\nShopware.Component.extend('sw-custom-field', 'sw-text-field', {\n\n    // extend the logic of the computed property `stringRepresentation`\n    computed: {\n        stringRepresentation() {\n            // call the original implementation of `onInput()`\n            const superCallResult = this.$super('stringRepresentation');\n\n            // add your custom logic in here\n            // ...\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing $children with Template Refs\nDESCRIPTION: Illustrates the change from using $children to access child components to using template refs in Vue 3.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-migration-build.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$children.childrenMethod();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$refs.childrenRef.childrenMethod();\n```\n\n----------------------------------------\n\nTITLE: Finding Available State Transitions in Shopware 6\nDESCRIPTION: Example demonstrating how to retrieve available state transitions for an order using getAvailableTransitions method. Returns array of possible actions for the current state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$transitions = $this->stateMachineRegistry->getAvailableTransitions(\n    OrderDefinition::ENTITY_NAME,\n    '<Order ID here>',\n    'stateId', \n    $context\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Injection in services.xml\nDESCRIPTION: XML configuration file that defines how the SystemConfigService should be injected into the ExampleService using Symfony's dependency injection container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/dependency-injection.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ExampleService\">\n            <argument type=\"service\" id=\"Shopware\\Core\\System\\SystemConfig\\SystemConfigService\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Triggering In-App Purchase in Vue.js Component\nDESCRIPTION: This Vue.js component snippet demonstrates how to create a button that triggers the purchase of an In-App Purchase using the Meteor Admin SDK. It includes a template with a button and a script section that handles the purchase action.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/in-app-purchase/index.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- ... -->\n    <p>\n        If you buy this you'll get an incredible useful feature: ...\n    </p>\n    <mt-button @click=\"onClick\">\n        Buy\n    </mt-button>\n    <!-- ... -->\n</template>\n\n<script setup>\nimport * as sw from '@shopware/meteor-admin-sdk';\n\nfunction onClick() {\n    sw.iap.purchase({ identifier: 'my-iap-identifier' });\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Shopware Docker Build Configuration\nDESCRIPTION: Dockerfile configuration for building and deploying a Shopware application using multi-stage builds with shopware-cli and base images.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n#syntax=docker/dockerfile:1.4\n\nARG PHP_VERSION=8.3\nFROM ghcr.io/shopware/docker-base:$PHP_VERSION-caddy AS base-image\nFROM shopware/shopware-cli:latest-php-$PHP_VERSION AS shopware-cli\n\nFROM shopware-cli AS build\n\nADD . /src\nWORKDIR /src\n\nRUN --mount=type=secret,id=packages_token,env=SHOPWARE_PACKAGES_TOKEN \\\n    --mount=type=secret,id=composer_auth,dst=/src/auth.json \\\n    --mount=type=cache,target=/root/.composer \\\n    --mount=type=cache,target=/root/.npm \\\n    /usr/local/bin/entrypoint.sh shopware-cli project ci /src\n\nFROM base-image AS final\n\nCOPY --from=build --chown=82 --link /src /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Advanced Twig Script for Shopware Topseller API Endpoint\nDESCRIPTION: This Twig script implements the logic for fetching top-selling products in a specific category. It uses aggregations to filter and group order data, then constructs a JSON response with the results.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% block response %}\n\n    {% set categoryId = hook.request.categoryId %}\n\n    {% set criteria = {\n        aggregations: [\n            {\n                name: \"categoryFilter\",\n                type: \"filter\",\n                filter: [{\n                    type: \"equals\",\n                    field: \"order.lineItems.product.categoryIds\",\n                    value: categoryId\n                }],\n                aggregation: {\n                    name: \"orderedProducts\",\n                    type: \"terms\",\n                    field: \"order.lineItems.productId\",\n                    aggregation: {\n                        name: \"quantityItemsOrdered\",\n                        type : \"sum\",\n                        field: \"order.lineItems.quantity\"\n                    }\n                }\n            }\n        ]\n    } %}\n\n    {% set orderAggregations = services.repository.aggregate('order', criteria) %}\n\n    {% set response = services.response.json(orderAggregations.first.jsonSerialize) %}\n\n    {% do hook.setResponse(response) %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing AjaxModalPlugin in Twig\nDESCRIPTION: This snippet shows how to use the AjaxModalPlugin by adding specific data attributes to a button in a Twig template. It automatically uses PseudoModalUtil for rendering.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n    <!-- This uses `AjaxModalPlugin` -->\n    <button class=\"btn btn-primary\"\n            data-ajax-modal=\"true\"\n            data-url=\"https://example.org/ajax-url\">\n        Launch ajax modal\n    </button>\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber in Symfony services.xml\nDESCRIPTION: XML configuration for registering the UnusedMediaSubscriber in the Symfony dependency injection container with the kernel.event_subscriber tag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/prevent-deletion-of-media-files-referenced-in-your-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\UnusedMediaSubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Extending Product Settings Form Template in Twig\nDESCRIPTION: This Twig template extends the existing product settings form by adding a new disabled text field to display the Manufacturer ID. It uses Twig's block inheritance to insert the new field after the existing content.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-field.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% block sw_product_settings_form_content %}\n    {% parent %}\n\n    <sw-container columns=\"repeat(auto-fit, minmax(250px, 1fr))\" gap=\"0px 30px\">\n        <sw-text-field label=\"Manufacturer ID\" v-model=\"product.manufacturerId\" disabled></sw-text-field>\n    </sw-container>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Aggregations Query Example\nDESCRIPTION: Demonstrates how to use aggregations to calculate statistics and metrics, specifically showing how to compute average price.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {\n            \"name\": \"average-price\",\n            \"type\": \"avg\",\n            \"field\": \"price\"\n        }    \n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bootstrap Variable Overrides in SCSS\nDESCRIPTION: This CSS snippet demonstrates how to override Bootstrap default variables in the overrides.scss file, including examples for border-radius, icon colors, modal backdrop, button styles, and font weights.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/override-bootstrap-variables-in-a-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/overrides.scss\n/*\nOverride variable defaults\n==================================================\nThis file is used to override default SCSS variables from the Shopware Storefront or Bootstrap.\n\nBecause of the !default flags, theme variable overrides have to be declared beforehand.\nhttps://getbootstrap.com/docs/4.0/getting-started/theming/#variable-defaults\n*/\n\n$border-radius: 0;\n\n// some other override examples\n$icon-base-color: #f00;\n$modal-backdrop-bg: rgba(255, 0, 0, 0.5);\n$disabled-btn-bg: #f00;\n$disabled-btn-border-color: #fc8;\n$font-weight-semibold: 300;\n```\n\n----------------------------------------\n\nTITLE: Example Store API Request in JSON Format\nDESCRIPTION: Sample JSON structure for a Store API request that includes various criteria parameters like pagination, filtering, sorting, and aggregations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": 0,\n  \"limit\": 0,\n  \"term\": \"string\",\n  \"filter\": [\n    {\n      \"type\": \"string\",\n      \"field\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"field\": \"string\",\n      \"order\": \"string\",\n      \"naturalSorting\": true\n    }\n  ],\n  \"post-filter\": [\n    {\n      \"type\": \"string\",\n      \"field\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"associations\": {},\n  \"aggregations\": [\n    {\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"field\": \"string\"\n    }\n  ],\n  \"query\": [\n    {\n      \"score\": 0,\n      \"query\": {\n        \"type\": \"string\",\n        \"field\": \"string\",\n        \"value\": \"string\"\n      }\n    }\n  ],\n  \"grouping\": [\n    \"string\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storefront Template with AJAX Integration\nDESCRIPTION: Twig template that extends the Shopware 6 content template and adds the necessary HTML structure for the AJAX functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-dynamic-content-via-ajax-calls.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block cms_content %}\n    <div>\n        <h1>Swag AJAX Example</h1>\n\n        <div data-ajax-helper>\n            <div id=\"ajax-display\"></div>\n            <button id=\"ajax-button\">Button</button>\n        </div>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Registration Process in PHP\nDESCRIPTION: PHP code snippet demonstrating the setup and handling of the app registration process using the Shopware App SDK. It includes creating an AppConfiguration, setting up a shop repository, and handling registration and confirmation routes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/01-getting_started.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app = new AppConfiguration('Foo', 'test', 'http://localhost:6001/register/callback');\n// for a repository to save stores implementing \\Shopware\\App\\SDK\\Shop\\ShopRepositoryInterface, see FileShopRepository as an example\n$repository = ...;\n\n// Create a psr 7 request or convert it (HttpFoundation Symfony)\n$psrRequest = ...;\n\n// you can also use the AppLifecycle see Lifecycle section\n$registrationService = new \\Shopware\\App\\SDK\\Registration\\RegistrationService($app, $repository);\n\n$response = match($_SERVER['REQUEST_URI']) {\n    '/app/register' => $registrationService->register($psrRequest),\n    '/app/register/confirm' => $registrationService->registerConfirm($psrRequest),\n    default => throw new \\RuntimeException('Unknown route')\n};\n\n// return the response\n```\n\n----------------------------------------\n\nTITLE: Cache Invalidation Hook Implementation\nDESCRIPTION: Hook triggered on entity writes for cache invalidation purposes, providing access to written event data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Core\\Framework\\Adapter\\Cache\\Script\\CacheInvalidationHook\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Actions in XML for Shopware 6\nDESCRIPTION: Illustrates the structure of the flow-action.xml file, which defines custom flow actions for the Shopware 6 app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<flow-actions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Flow/Schema/flow-1.0.xsd\">\n    <flow-action>\n        ... # The first action\n    </flow-action>\n    <flow-action>\n        ... # The second action\n    </flow-action>\n    <flow-action>\n        ... # The third action\n    </flow-action>\n    ...\n</flow-actions>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of overrideComponentSetup in JavaScript\nDESCRIPTION: Demonstrates the basic structure of using the overrideComponentSetup function to override a component's setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('componentName', (previousState, props, context) => {\n    // Your extension logic here\n    return {\n        // Return the new or modified properties and methods\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Component Override Base Structure\nDESCRIPTION: Basic structure for overriding the sw-settings-rule-detail-assignments component in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nComponent.override('sw-settings-rule-detail-assignments', {\n    // override configuration here\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding _hideCookieBar() Method with Confirmation Dialog in JavaScript\nDESCRIPTION: This snippet overrides the _hideCookieBar() method to add a confirmation dialog before hiding the cookie bar. It only calls the parent implementation if the user confirms.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/override-existing-javascript.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CookiePermissionPlugin from 'src/plugin/cookie/cookie-permission.plugin';\nimport CookieStorage from 'src/helper/storage/cookie-storage.helper';\n\nexport default class MyCookiePermission extends CookiePermissionPlugin {\n    init() {\n        CookieStorage.setItem(this.options.cookieName, '');\n        super.init();\n    }\n\n    _hideCookieBar() {\n        if (confirm('Do you want to hide the cookie bar?')) {\n            super._hideCookieBar();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReadingData Service Class in Shopware 6 Plugin (PHP)\nDESCRIPTION: PHP class for the ReadingData service in a Shopware 6 plugin. It defines the constructor to inject the product repository.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\n\nclass ReadingData\n{\n    private EntityRepository $productRepository;\n\n    public function __construct(EntityRepository $productRepository)\n    {\n        $this->productRepository = $productRepository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscriber for FooterPagelet in PHP\nDESCRIPTION: This code defines an EventSubscriber class that listens to the FooterPageletLoadedEvent to add custom data to the footer pagelet. It implements the EventSubscriberInterface and registers a handler method for the event.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass AddDataToPage implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            FooterPageletLoadedEvent::class => 'addActiveProductCount'\n        ];\n    }\n\n    public function addActiveProductCount(FooterPageletLoadedEvent $event): void\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Repository Factory Response in Jest for Shopware Administration\nDESCRIPTION: Demonstrates how to mock a response for the repository factory in Jest tests. This snippet shows how to add a custom response for a specific API route, which is useful for simulating backend data during testing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst responses = global.repositoryFactoryMock.responses;\n\nresponses.addResponse({\n    method: 'Post',\n    url: '/search/product',\n    status: 200,\n    response: {\n        data: [\n            {\n                id: YourId,\n                attributes: {\n                    id: YourId\n                }\n            }\n        ]\n    }\n});\n\n// You can disable this warning with this code:\n\nglobal.repositoryFactoryMock.showWarning = false;\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Prices using SumAggregation in PHP\nDESCRIPTION: Illustrates how to use SumAggregation to calculate the total sum of product prices. It creates a Criteria object, adds the aggregation, and retrieves the result.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new SumAggregation('sum-price', 'price')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var SumResult $aggregation */\n$aggregation = $result->getAggregations()->get('sum-price');\n\n$aggregation->getSum();\n```\n\n----------------------------------------\n\nTITLE: Creating a Store API Route Decorator Class in PHP\nDESCRIPTION: This code creates a decorator class that extends the AbstractExampleRoute to override a Store API route. It implements the necessary methods for decoration including constructor, getDecorated(), and the main load() method where custom logic can be added.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/override-existing-route.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/ExampleRouteDecorator.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['store-api']])]\nclass ExampleRouteDecorator extends AbstractExampleRoute\n{\n    protected EntityRepository $exampleRepository;\n\n    private AbstractExampleRoute $decorated;\n\n    public function __construct(EntityRepository $exampleRepository, AbstractExampleRoute $exampleRoute)\n    {\n        $this->exampleRepository = $exampleRepository;\n        $this->decorated = $exampleRoute;\n    }\n\n    public function getDecorated(): AbstractExampleRoute\n    {\n        return $this->decorated;\n    }\n    \n    #[Route(path: '/store-api/example', name: 'store-api.example.search', methods: ['GET', 'POST'], defaults: ['_entity' => 'category'])]\n    public function load(Criteria $criteria, SalesChannelContext $context): ExampleRouteResponse\n    {\n        // We must call this function when using the decorator approach\n        $exampleResponse = $this->decorated->load();\n        \n        // do some custom stuff\n        $exampleResponse->headers->add([ 'cache-control' => \"max-age=10000\" ])\n\n        return $exampleResponse;›\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Collection Class in PHP\nDESCRIPTION: Collection class for managing multiple translation entities with type-safe access methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-translations.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\Aggregate\\ExampleTranslation;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityCollection;\n\n/**\n * @method void                          add(ExampleTranslationEntity $entity)\n * @method void                          set(string $key, ExampleTranslationEntity $entity)\n * @method ExampleTranslationEntity[]    getIterator()\n * @method ExampleTranslationEntity[]    getElements()\n * @method ExampleTranslationEntity|null get(string $key)\n * @method ExampleTranslationEntity|null first()\n * @method ExampleTranslationEntity|null last()\n */\nclass ExampleTranslationCollection extends EntityCollection\n{\n    protected function getExpectedClass(): string\n    {\n        return ExampleTranslationEntity::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Shopware Plugin Configuration XML Example\nDESCRIPTION: Provides a comprehensive example of a plugin configuration XML file, including various input types, translations, and advanced components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/SystemConfig/Schema/config.xsd\">\n\n    <card>\n        <title>Basic Configuration</title>\n        <title lang=\"de-DE\">Grundeinstellungen</title>\n\n        <input-field>\n            <name>email</name>\n            <copyable>true</copyable>\n            <label>eMail address</label>\n            <label lang=\"de-DE\">E-Mailadresse</label>\n            <placeholder>you@example.com</placeholder>\n            <placeholder lang=\"de-DE\">du@beispiel.de</placeholder>\n            <helpText>Please fill in your personal eMail address</helpText>\n            <helpText lang=\"de-DE\">Bitte trage deine persönliche E-Mailadresse ein</helpText>\n        </input-field>\n\n        <input-field type=\"single-select\">\n            <name>mailMethod</name>\n            <options>\n                <option>\n                    <id>smtp</id>\n                    <name>English smtp</name>\n                    <name lang=\"de-DE\">German smtp</name>\n                </option>\n                <option>\n                    <id>pop3</id>\n                    <name>English pop3</name>\n                    <name lang=\"de-DE\">German pop3</name>\n                </option>\n            </options>\n            <defaultValue>smtp</defaultValue>\n            <label>Mail method</label>\n            <label lang=\"de-DE\">Versand-Protokoll</label>\n        </input-field>\n    </card>\n\n    <card>\n        <title>Advanced Configuration</title>\n        <title lang=\"de-DE\">Erweiterte Einstellungen</title>\n\n        <input-field type=\"password\">\n            <name>secret</name>\n            <label>Secret token</label>\n            <label lang=\"de-DE\">Geheimschlüssel</label>\n            <helpText>Your secret token for xyz...</helpText>\n            <helpText lang=\"de-DE\">Dein geheimer Schlüssel für xyz...</helpText>\n        </input-field>\n    </card>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Deleting Product-Category Association in Shopware 6\nDESCRIPTION: This code snippet demonstrates how to delete a specific ManyToMany association between a product and a category using the product_category repository. This is required before creating a new association to properly replace it.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/replacing-associated-data.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function replaceData(Context $context): void\n{\n    $this->productCategoryRepository->delete([\n        [\n            'productId' => 'myProductId',\n            'categoryId' => 'oldId'\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Action Requirements for Global Availability\nDESCRIPTION: This PHP snippet shows how to modify the requirements method to make the action available for all events. By returning an empty array, the action will be available for all triggers in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    // plugin root>/src/Core/Content/Flow/Dispatching/Action/CreateTagAction.php\n    ...\n\n    public function requirements(): array\n    {\n        return [];\n    }\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Product Definition Class with Many-to-Many Associations in PHP\nDESCRIPTION: Shows how many-to-many associations are defined in a ProductDefinition class in PHP. This illustrates the relationship between products, categories, and tags that will be referenced in the allow-list.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-03-collecting-entity-data.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ProductDefinition\n{\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            // ...\n            (new ManyToManyIdField('category_ids', 'categoryIds', associationName: 'categories'))->addFlags(new ApiAware(), new Inherited()),\n            (new ManyToManyAssociationField('categories', CategoryDefinition::class, ProductCategoryDefinition::class, 'product_id', 'category_id'))->addFlags(new ApiAware(), new CascadeDelete(), new Inherited(), new SearchRanking(SearchRanking::ASSOCIATION_SEARCH_RANKING)),\n            // ...\n            (new ManyToManyAssociationField('tags', TagDefinition::class, ProductTagDefinition::class, 'product_id', 'tag_id'))->addFlags(new CascadeDelete(), new Inherited(), new SearchRanking(SearchRanking::ASSOCIATION_SEARCH_RANKING), new ApiAware()),\n            // ...\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Flow Action in Shopware 6\nDESCRIPTION: Demonstrates the XML structure for defining a single flow action, including metadata, requirements, and URL configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<flow-action>\n    <meta>\n        <name>slackmessage</name>\n        <label>Send slack message</label>\n        <label lang=\"de-DE\">Slack-Nachricht senden</label>\n        <badge>Slack</badge>\n        <description>Slack send message description</description>\n        <description lang=\"de-DE\">Dies ist die Beispielbeschreibung für app</description>\n        <url>https://hooks.slack.com/services/{id}</url>\n        <sw-icon>default-communication-speech-bubbles</sw-icon>\n        <icon>slack.png</icon>\n        <requirements>orderAware</requirements>\n        <requirements>customerAware</requirements>\n    </meta>\n    ...\n</flow-action>\n```\n\n----------------------------------------\n\nTITLE: Creating Snippets for Custom Entity Labels in Shopware\nDESCRIPTION: Shows how to create a snippet to add a label for a custom entity in the Shopware administration interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"custom_entity_bundle\": {\n    \"label\": \"My Custom Entity\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delay Stamp to Message Envelope\nDESCRIPTION: Demonstrates how to add metadata to messages using Symfony Messenger Envelope and DelayStamp for delayed processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-message-to-queue.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function sendMessage(string $message): void\n{\n    $message = new SmsNotification($message);\n    $this->bus->dispatch(\n        (new Envelope($message))\n            ->with(new DelayStamp(5000))\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DailyMotionCmsElementResolver in PHP\nDESCRIPTION: Creates a custom CMS element resolver for a 'dailymotion' type element. It extends AbstractCmsElementResolver and implements required methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-data-to-cms-elements.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\DataResolver;\n\nuse Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotEntity;\nuse Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\AbstractCmsElementResolver;\nuse Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\ElementDataCollection;\nuse Shopware\\Core\\Content\\Cms\\DataResolver\\ResolverContext\\ResolverContext;\nuse Shopware\\Core\\Content\\Cms\\DataResolver\\CriteriaCollection;\n\nclass DailyMotionCmsElementResolver extends AbstractCmsElementResolver\n{\n    public function getType(): string\n    {\n        return 'dailymotion';\n    }\n\n    public function collect(CmsSlotEntity $slot, ResolverContext $resolverContext): ?CriteriaCollection\n    {\n        return null;\n    }\n\n    public function enrich(CmsSlotEntity $slot, ResolverContext $resolverContext, ElementDataCollection $result): void\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EventSubscriber Service in XML\nDESCRIPTION: This XML snippet registers the AddDataToPage class as a service in the Dependency Injection Container and tags it as an event subscriber so Symfony can automatically register it.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<service id=\"Swag\\BasicExample\\Service\\AddDataToPage\" >\n    <tag name=\"kernel.event_subscriber\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Services for Product Extension in Shopware\nDESCRIPTION: This XML snippet defines services for extending the product entity, creating custom entity definitions, and decorating the Elasticsearch product definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/elasticsearch/add-product-entity-extension-to-elasticsearch.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Extension\\Content\\Product\\CustomExtension\">\n            <tag name=\"shopware.entity.extension\"/>\n        </service>\n\n        <service id=\"Swag\\BasicExample\\Extension\\Content\\Product\\OneToOneExampleExtensionDefinition\">\n            <tag name=\"shopware.entity.definition\" entity=\"one_to_one_swag_example_extension\" />\n        </service>\n\n        <service id=\"Swag\\BasicExample\\Extension\\Content\\Product\\OneToManyExampleExtensionDefinition\">\n            <tag name=\"shopware.entity.definition\" entity=\"one_to_many_swag_example_extension\" />\n        </service>\n\n        <service id=\"Swag\\BasicExample\\Subscriber\\ProductSubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n\n        <service id=\"Swag\\BasicExample\\Elasticsearch\\Product\\MyProductEsDecorator\" decorates=\"Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Elasticsearch\\Product\\MyProductEsDecorator.inner\"/>\n            <argument type=\"service\" id=\"Doctrine\\DBAL\\Connection\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Invalidation Logic in an App Script (Twig)\nDESCRIPTION: Illustrates how to implement cache invalidation within a `cache-invalidation` script hook, triggered by the `EntityWrittenContainerEvent`. The script inspects the event data using a fluid interface (`hook.event.getIds`, `only`, `with`) to identify relevant entity changes (e.g., updated manufacturers). It then collects corresponding cache tags and uses `services.cache.invalidate()` to clear the relevant cache entries.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.event.getIds('manufacturer') %}\n{% set ids = ids.only('upated') %} // only update events\n{% set ids = ids.with(['name', 'url']) %}  // with name OR url cahnge\n\n{% set ids = hook.event.get('manufacturer').only('upated').with(['name', 'url']) %} // same as above but chained\n\n{% if ids.empty %}\n    {% return %}\n{% endif %}\n\n{% set tags = [] %}\n{% for id in ids %}\n    {% set tags = tags|merge(['my-manufacturer-tag-' ~ id]) %}\n{% endfor %}\n\n{% do services.cache.invalidate(tags) %}\n```\n\n----------------------------------------\n\nTITLE: Filter Aggregation Implementation in PHP and API\nDESCRIPTION: Shows how to use filter aggregation to restrict aggregation results using specific criteria. Demonstrates combining filter aggregation with average aggregation in both PHP and API contexts.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new FilterAggregation(\n        'active-price-avg',\n        new AvgAggregation('avg-price', 'price'),\n        [\n            new EqualsFilter('active', true)\n        ]\n    )\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var AvgResult $aggregation */\n$aggregation = $result->getAggregations()->get('avg-price');\n\n$aggregation->getAvg();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n       {\n            \"name\": \"active-price-avg\",\n            \"type\": \"filter\",\n            \"filter\": [\n                { \n                    \"type\": \"equals\", \n                    \"field\": \"active\", \n                    \"value\": true\n                }\n            ],\n            \"aggregation\": {  \n                \"name\": \"avg-price\",\n                \"type\": \"avg\",\n                \"field\": \"price\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Group in Shopware Manifest\nDESCRIPTION: Example manifest.xml configuration showing how to group multiple cookies together with shared group name and description. Includes all required group elements and nested cookie configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/cookies-with-apps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>ExampleAppWithCookies</name>\n        <version>1.0.0</version>\n        <!-- other meta data goes here -->\n    </meta>\n    <cookies>\n        <group>\n            <snippet-name>example-app-with-cookies.cookie-group.name</snippet-name>\n            <snippet-description>example-app-with-cookies.cookie-group.description</snippet-description>\n            <entries>\n                <cookie>\n                    <cookie>my-cookie</cookie>\n                    <snippet-name>example-app-with-cookies.my-cookie.name</snippet-name>\n                    <snippet-description>example-app-with-cookies.my-cookie.description</snippet-description>\n                    <value>a static value for the cookie</value>\n                    <expiration>1</expiration>\n                </cookie>\n            </entries>\n        </group>\n    </cookies>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Extending DebitPayment Handler in PHP\nDESCRIPTION: Creates a new ExampleDebitPayment class that extends the DebitPayment handler. It overrides the pay method to add custom logic while maintaining the original functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/customize-payment-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\SyncPaymentTransactionStruct;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass ExampleDebitPayment extends DebitPayment\n{\n    private DebitPayment $decorated;\n\n    public function __construct(OrderTransactionStateHandler $transactionStateHandler, DebitPayment $decorated)\n    {\n        parent::__construct($transactionStateHandler);\n        $this->decorated = $decorated;\n    }\n\n    public function getDecorated(): DebitPayment\n    {\n        return $this->decorated;\n    }\n\n    public function pay(SyncPaymentTransactionStruct $transaction, RequestDataBag $dataBag, SalesChannelContext $salesChannelContext): void\n    {\n        // do some custom stuff here\n\n        $this->transactionStateHandler->process($transaction->getOrderTransaction()->getId(), $salesChannelContext->getContext());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Refund Handler in Shopware PHP\nDESCRIPTION: Implementation of RefundPaymentHandlerInterface for handling payment refunds in Shopware. Includes refund amount validation, position-based refunding, and state management.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundEntity;\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundStateHandler;\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionEntity;\nuse Shopware\\Core\\Checkout\\Payment\\PaymentException;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\RefundPaymentHandlerInterface;\nuse Shopware\\Core\\Framework\\Context;\n\nclass ExamplePayment implements RefundPaymentHandlerInterface\n{\n    private OrderTransactionCaptureRefundStateHandler $stateHandler;\n\n    public function __construct(OrderTransactionCaptureRefundStateHandler $stateHandler)\n    {\n        $this->stateHandler = $stateHandler;\n    }\n\n    public function refund(OrderTransactionCaptureRefundEntity $refund, Context $context): void\n    {\n        if ($refund->getAmount() > 100.00) {\n            throw PaymentException::refund($refund->getId(), 'Refunds over 100 € are not allowed');\n        }\n\n        foreach ($refund->getPositions() as $position) {\n            $amount = $position->getAmount()->getTotalPrice();\n            $reason = $position->getReason();\n            $lineItem = $position->getOrderLineItem();\n\n            if ($reason === 'malfunction') {\n                try {\n                    $this->callPSPForRefund($amount, $reason, $lineItem->getId());\n                } catch (\\Exception $e) {\n                    throw PaymentException::refund($refund->getId(), 'Something went wrong');\n                }\n            }\n        }\n\n        $this->stateHandler->complete($refund->getId(), $context);\n    }\n\n    private function callPSPForRefund(float $amount, string $reason, string $id): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Transaction Rollback in Shopware Flow Action\nDESCRIPTION: This snippet illustrates how to force a transaction rollback in a Shopware Flow Action by throwing a TransactionFailedException. It shows error handling and exception creation in the CreateTagAction class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/action-transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\CreateTagAction\\Core\\Content\\Flow\\Dispatching\\Action;\n\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\FlowAction;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\TransactionalAction;\n\nclass CreateTagAction extends FlowAction implements TransactionalAction\n{\n    public function handleFlow(StorableFlow $flow): void\n    {        \n        try {\n            //search for some record\n            $entity = $this->repo->find(...);\n        } catch (NotFoundException $e) {\n            throw TransactionFailedException::because($e);\n        }\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Terms Aggregation Implementation in PHP and API\nDESCRIPTION: Demonstrates how to use terms aggregation to count distinct values of a field. Shows both PHP implementation using Criteria class and API request/response format. Includes sorting and limiting capabilities.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new TermsAggregation(\n        'manufacturer-ids',\n        'manufacturerId',\n        10,\n        new FieldSorting('manufacturer.name', FieldSorting::DESCENDING)\n    )\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var TermsResult $aggregation */\n$aggregation = $result->getAggregations()->get('manufacturer-ids');\n\nforeach ($aggregation->getBuckets() as $bucket) {\n    $bucket->getKey();\n    $bucket->getCount();\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {\n            \"name\": \"manufacturer-ids\",\n            \"type\": \"terms\",\n            \"limit\": 3,\n            \"sort\": { \"field\": \"manufacturer.name\", \"order\": \"DESC\" },\n            \"field\": \"manufacturerId\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Aggregations in PHP for Shopware DAL\nDESCRIPTION: Example of how to nest aggregations in PHP to perform complex queries like counting manufacturers per category with price filters. The snippet demonstrates filter aggregation, terms aggregation, and how to process multi-level results.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new FilterAggregation(\n        'my-filter',\n        new TermsAggregation(\n            'per-category',\n            'categories.id',\n            null,\n            null,\n            new TermsAggregation(\n                'manufacturer-ids',\n                'manufacturerId'\n            )\n        ),\n        [\n            new RangeFilter('price', ['gte' => 500])\n        ]\n    )\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var TermsResult $aggregation */\n$aggregation = $result->getAggregations()->get('per-category');\n\nforeach ($aggregation->getBuckets() as $bucket) {\n    $categoryId = $bucket->getKey();\n\n    /** @var TermsResult $manufacturers */\n    $manufacturers = $bucket->getResult();\n\n    foreach ($manufacturers->getBuckets() as $nestedBucket) {\n        $manufacturerId = $nestedBucket->getKey();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Line Items\nDESCRIPTION: Demonstrates how to add and remove products and discounts from the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# first add the product #}\n{% do services.cart.products.add(productId) %}\n{# then remove it again #}\n{% do services.cart.remove(productId) %}\n\n{# first add the discount #}\n{% do services.cart.discount('my-custom-discount', 'percentage', 10, 'A custom 10% discount') %}\n{# then remove it again #}\n{% do services.cart.remove('my-custom-discount') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Captcha in Shopware 6\nDESCRIPTION: This code shows how to create a custom captcha by extending the AbstractCaptcha class. It implements the required isValid and getName methods, and handles verification through a hypothetical third-party captcha service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-captcha.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Storefront\\Framework\\Captcha;\n\nuse GuzzleHttp\\ClientInterface;\nuse Psr\\Http\\Client\\ClientExceptionInterface;\nuse Shopware\\Core\\Framework\\Log\\Package;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n#[Package('storefront')]\nclass YourCaptcha extends AbstractCaptcha\n{\n    final public const CAPTCHA_NAME = 'yourCaptchaName';\n    final public const CAPTCHA_REQUEST_PARAMETER = '_your_captcha_name';\n    private const YOUR_CAPTCHA_ENDPOINT = 'https://www.yourcaptcha.com/verify';\n\n    /**\n     * @internal\n     */\n    public function __construct(private readonly ClientInterface $client)\n    {\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function isValid(Request $request, array $captchaConfig): bool\n    {\n        if (!$request->get(self::CAPTCHA_REQUEST_PARAMETER)) {\n            return false;\n        }\n        \n        try {\n            $response = $this->client->request('POST', self::GOOGLE_CAPTCHA_VERIFY_ENDPOINT, [\n                'form_params' => [\n                    'response' => $request->get(self::CAPTCHA_REQUEST_PARAMETER),\n                    'remoteip' => $request->getClientIp(),\n                ],\n            ]);\n\n            $responseRaw = $response->getBody()->getContents();\n            $response = json_decode($responseRaw, true);\n\n            return $response && (bool) $response['success'];\n        } catch (ClientExceptionInterface) {\n            return false;\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getName(): string\n    {\n        return self::CAPTCHA_NAME;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Percentage Surcharge to Calculated Price in Twig\nDESCRIPTION: Example of using the surcharge() method to apply a percentage surcharge to the existing calculated price in Twig. This snippet demonstrates adding a 10% surcharge to the product's price.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_24\n\nLANGUAGE: twig\nCODE:\n```\n{% do product.calculatedPrice.surcharge(10) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cart Processor for Example Handler\nDESCRIPTION: PHP implementation of a cart processor that handles the persistence of example type line items in the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-items.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart;\n\nuse Swag\\BasicExample\\Service\\ExampleHandler;\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\CartBehavior;\nuse Shopware\\Core\\Checkout\\Cart\\CartProcessorInterface;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\CartDataCollection;\n\nclass ExampleProcessor implements CartProcessorInterface\n{\n\n    public function process(CartDataCollection $data, Cart $original, Cart $toCalculate, SalesChannelContext $context, CartBehavior $behavior): void\n    {\n        $lineItems = $original->getLineItems()->filterFlatByType(ExampleHandler::TYPE);\n\n        foreach ($lineItems as $lineItem){\n            $toCalculate->add($lineItem);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Restrictions with XML Denylist\nDESCRIPTION: Example of the XML configuration file that defines which Store API routes are denied or allowed for B2B employees. This denylist prevents employees from accessing sensitive customer account routes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/guides/api-route-restriction-for-employees.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<routes xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../Schema/Xml/employee-route-access-1.0.xsd\">\n    <denied>store-api.account.change-profile</denied>\n    <denied>store-api.account.change-email</denied>\n    <denied>...</denied>\n\n    <allowed>store-api.account.login</allowed>\n    <allowed>store-api.account.logout</allowed>\n    <allowed>...</allowed>\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Signing Responses using Shopware App PHP SDK\nDESCRIPTION: This PHP code snippet demonstrates how to use the ResponseSigner class from the Shopware App PHP SDK to sign responses. It creates a mock shop and a payment response, then signs the response using the shop's secret.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-signature-verification.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Authentication\\ResponseSigner;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\nuse Shopware\\App\\SDK\\Test\\MockShop;\n\n/**\n * This is a mock shop for testing purposes\n * You should look this up based on the request with the ShopResolver\n * \n * @see https://github.com/shopware/app-php-sdk/blob/main/examples/index.php#L43\n * @var Shopware\\App\\SDK\\Test\\MockShop $shop\n */\n$shop = new MockShop('shopId', 'shopUrl', 'shopSecret');\n\n/** \n * There are some helper methods to easily create responses for different usages\n * The PaymentResponse::paid() method will create a response\n * that indicates that the payment was successful for example\n * \n * @see https://github.com/shopware/app-php-sdk/tree/main/src/Response\n * @var Shopware\\App\\SDK\\Response\\PaymentResponse $response \n */\n$response = PaymentResponse::paid();\n\n$responseSigner = new ResponseSigner();\n$shop = new Shop('shopId', 'shopUrl', 'shopSecret');\n\n// the response will be signed with the shop secret\n$response = $responseSigner->sign($response, $shop);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport in Shopware (PHP)\nDESCRIPTION: YAML configuration to set up a custom transport in Shopware's queue configuration using an environment variable.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n// <platform root>/src/Core/Framework/Resources/config/packages/queue.yaml\nframework:\n  messenger:\n    transports:\n      my_transport:\n        dsn: \"%env(MESSENGER_TRANSPORT_DSN)%\"\n```\n\n----------------------------------------\n\nTITLE: Updating ExampleController with PageLoader in PHP for Shopware 6\nDESCRIPTION: Modifies the ExampleController to use the ExamplePageLoader for loading the custom page data and rendering the appropriate template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\n...\n\nclass ExampleController extends StorefrontController\n{\n    private ExamplePageLoader $examplePageLoader;\n\n    public function __construct(ExamplePageLoader $examplePageLoader)\n    {\n        $this->examplePageLoader = $examplePageLoader;\n    }\n\n    #[Route(path: '/example-page', name: 'frontend.example.page', methods: ['GET'])]\n    public function examplePage(Request $request, SalesChannelContext $context): Response\n    {\n        $page = $this->examplePageLoader->load($request, $context);\n\n        return $this->renderStorefront('@SwagBasicExample/storefront/page/example/index.html.twig', [\n            'example' => 'Hello world',\n            'page' => $page\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter in ProductListingCollectFilterEvent Subscriber\nDESCRIPTION: Demonstrates how to create and add a custom filter for the 'isCloseout' product property in the event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-listing-filters.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// <plugin root>/src/Subscriber/ExampleListingSubscriber.php\nclass ExampleListingSubscriber implements EventSubscriberInterface\n{\n    // register event\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductListingCollectFilterEvent::class => 'addFilter'\n        ];\n    }\n\n    public function addFilter(ProductListingCollectFilterEvent $event): void\n    {\n        // fetch existing filters\n        $filters = $event->getFilters();\n        $request = $event->getRequest();\n\n        $filtered = (bool) $request->get('isCloseout');\n\n        $filter = new Filter(\n            // unique name of the filter\n            'isCloseout',\n\n            // defines if this filter is active\n            $filtered,\n\n            // Defines aggregations behind a filter. A filter can contain multiple aggregations like properties\n            [\n                new FilterAggregation(\n                    'active-filter',\n                    new MaxAggregation('active', 'product.isCloseout'),\n                    [new EqualsFilter('product.isCloseout', true)]\n                ),\n            ],\n\n            // defines the DAL filter which should be added to the criteria   \n            new EqualsFilter('product.isCloseout', true),\n\n            // defines the values which will be added as currentFilter to the result\n            $filtered\n        );\n\n        // Add your custom filter\n        $filters->add($filter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Tax Provider to Database using PHP Migration\nDESCRIPTION: Illustrates how to create a migration class to persist the custom tax provider to the database. This approach uses a direct database connection to insert the provider.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/tax-provider.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagTaxProviders\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition;\nuse Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition;\n\nclass MigrationTaxProvider extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1662366151;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $ruleId = $connection->fetchOne(\n            'SELECT `id` FROM `rule` WHERE `name` = :name',\n            ['name' => 'Always valid (Default)']\n        );\n\n        $id = Uuid::randomBytes();\n\n        $connection->insert(TaxProviderDefinition::ENTITY_NAME, [\n            'id' => $id,\n            'identifier' => Swag\\BasicExample\\Checkout\\Cart\\Tax\\TaxProvider::class,\n            'active' => true,\n            'priority' => 1,\n            'availability_rule_id' => $ruleId,\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n        ]);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with overrideComponentSetup\nDESCRIPTION: Demonstrates how to use TypeScript with the overrideComponentSetup function for better type safety and autocompletion.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport _InternalTestComponent from 'src/the/path/to/the/exported/component';\n\nShopware.Component.overrideComponentSetup<typeof _InternalTestComponent>()('_internal_test_compponent', (previousState, props) => {\n    const newBaseValue = ref(5);\n    const newMultipliedValue = computed(() => {\n        // Props are now correctly typed\n        return newBaseValue.value * props.multiplier!;\n    });\n\n    // Previous state is now correctly typed\n    previousState.baseValue.value = 2;\n\n    return {\n        baseValue: newBaseValue,\n        multipliedValue: newMultipliedValue,\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ScheduledTask Class\nDESCRIPTION: PHP class that defines a scheduled task, extending from Shopware's ScheduledTask base class. Specifies the task name and execution interval.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-scheduled-task.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service\\ScheduledTask;\n\nuse Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTask;\n\nclass ExampleTask extends ScheduledTask\n{\n    public static function getTaskName(): string\n    {\n        return 'swag.example_task';\n    }\n\n    public static function getDefaultInterval(): int\n    {\n        return 300; // 5 minutes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Templates in Storefront Endpoints\nDESCRIPTION: Demonstrates how to render a custom template in a Storefront endpoint script. It fetches a product, adds it to the page extensions, and renders a custom Twig template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set product = services.store.search('product', { 'ids': [productId]}).first %}\n\n{% do hook.page.addExtension('myProduct', product) %}\n\n{% do hook.setResponse(\n    services.response.render('@MyApp/storefront/page/custom-page/index.html.twig', { 'page': hook.page })\n) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShopNameStorer for Flow Builder in PHP\nDESCRIPTION: This snippet demonstrates the implementation of a ShopNameStorer class, which handles storing and restoring shop name data in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass ShopNameStorer extends FlowStorer\n{\n    public function store(FlowEventAware $event, array $stored): array\n    {\n        if (!$event instanceof ShopNameAware || isset($stored['shopName'])) {\n            return $stored;\n        }\n\n        $stored['shopName'] = $event->getShopName();\n\n        return $stored;\n    }\n\n    public function restore(StorableFlow $storable): void\n    {\n        if (!$storable->hasStore('shopName')) {\n            return;\n        }\n\n        $storable->setData('shopName', $storable->getStore('shopName'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product to Cart by ID in Twig\nDESCRIPTION: Example of using the add() method to add a product to the cart by its ID in Twig. This snippet shows how to add a product to the cart using a product ID.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_27\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing One to One Association in Foo Entity Definition\nDESCRIPTION: Example of adding the reverse side of a One to One association from Foo to Bar entity. Includes a OneToOneAssociationField.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n        (new StringField('name', 'name'))->addFlags(new Required()),\n\n        (new OneToOneAssociationField('bar', 'id', 'foo_id', BarDefinition::class, false))\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Data Grid Component in Shopware 6\nDESCRIPTION: This snippet shows how to create a basic HTML template for the sw-data-grid component in Shopware 6. It sets up the data-source and columns props.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-the-data-grid-component.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <sw-data-grid :data-source=\"dataSource\" :columns=\"columns\">\n    </sw-data-grid>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extended Syntax in Shopware App Scripts: Foreach Loops\nDESCRIPTION: Shows how to use the 'foreach' tag for loops in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% foreach list as entry %}\n    {{ entry }}\n    {% break %}\n{% endforeach %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Assets in Twig Templates\nDESCRIPTION: Demonstrates how to use the Symfony asset function to display a custom image in a Storefront template by extending the base template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/base.html.twig\n{% sw_extends '@Storefront/storefront/base.html.twig' %}\n\n{% block base_main %}\n    <h2>Asset:</h2>\n\n    {# Using asset function to display our custom asset #}\n    <img src=\"{{ asset('bundles/swagbasicexample/image.png', 'asset') }}\">\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering the Main Dailymotion CMS Element Component in JavaScript\nDESCRIPTION: Initializes the main Dailymotion component for the CMS element which will render the configured video. It imports the template and styles, and registers the component with Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/component/index.js\nimport template from './sw-cms-el-dailymotion.html.twig';\nimport './sw-cms-el-dailymotion.scss';\n\nShopware.Component.register('sw-cms-el-dailymotion', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dailymotion CMS Element in Twig for Shopware Storefront\nDESCRIPTION: This Twig template renders the Dailymotion CMS element in the Shopware Storefront. It creates a responsive iframe to display the Dailymotion video.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% block element_swag_dailymotion %}\n<div class=\"cms-element-swag-dailymotion\" style=\"height: 100%; width: 100%\">\n    {% block element_dailymotion_image_inner %}\n    <div class=\"cms-el-swag-dailymotion\">\n        <div style=\"position:relative; padding-bottom:56.25%; height:0; overflow:hidden;\">\n            <iframe style=\"width:100%; height:100%; position:absolute; left:0px; top:0px; overflow:hidden\"\n                    src=\"https://www.dailymotion.com/embed/video//{{ element.config.dailyUrl.value }}\"\n                    frameborder=\"0\"\n                    type=\"text/html\"\n                    width=\"100%\"\n                    height=\"100%\">\n            </iframe>\n        </div>\n    </div>\n    {% endblock %}\n</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Decorating ProductDataSelection to Include Bundle DataSet (PHP)\nDESCRIPTION: Implements a decorator for the `ProductDataSelection` service using `DataSelectionInterface`. It injects the original service, adds the custom `BundleDataSet` to the list of datasets retrieved from the original service within the `getDataSets` method, and constructs a new `DataSelectionStruct` in `getData` to include the bundle entity in the product data selection group. This ensures the bundle migration depends on the product migration, migrating bundles after products.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionInterface;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionStruct;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet\\BundleDataSet;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\DataSet\\ProductDataSet;\n\nclass ProductDataSelection implements DataSelectionInterface\n{\n    private DataSelectionInterface $originalDataSelection;\n\n    public function __construct(DataSelectionInterface $originalDataSelection)\n    {\n        $this->originalDataSelection = $originalDataSelection;\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $this->originalDataSelection->supports($migrationContext);\n    }\n\n    public function getData(): DataSelectionStruct\n    {\n        $dataSelection = $this->originalDataSelection->getData();\n\n        // Add the modified DataSet array to a new DataSelectionStruct\n        return new DataSelectionStruct(\n            $dataSelection->getId(),\n            $this->getDataSets(),\n            $this->getDataSetsRequiredForCount(),\n            $dataSelection->getSnippet(),\n            $dataSelection->getPosition(),\n            $dataSelection->getProcessMediaFiles(),\n            DataSelectionStruct::PLUGIN_DATA_TYPE\n        );\n    }\n\n    public function getDataSets(): array\n    {\n        $entities = $this->originalDataSelection->getDataSets();\n        $entities[] = new BundleDataSet(); // Add the BundleDataSet to the DataSet array\n\n        return $entities;\n    }\n\n    public function getDataSetsRequiredForCount(): array\n    {\n        return $this->originalDataSelection->getDataSetsRequiredForCount();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Manifest File for Shopware App\nDESCRIPTION: Demonstrates the structure of a minimal manifest.xml file for a Shopware app, including meta information like name, label, description, and version.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>MyExampleApp</name>\n        <label>Label</label>\n        <label lang=\"de-DE\">Name</label>\n        <description>A description</description>\n        <description lang=\"de-DE\">Eine Beschreibung</description>\n        <author>Your Company Ltd.</author>\n        <copyright>(c) by Your Company Ltd.</copyright>\n        <version>1.0.0</version>\n        <icon>Resources/config/plugin.png</icon>\n        <license>MIT</license>\n    </meta>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding Absolute Discount to Cart in Twig\nDESCRIPTION: Shows how to add an absolute discount to the cart, checking for existing items and preventing duplicate discounts.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.items.count <= 0 %}\n    {% return %}\n{% endif %}\n\n{% if services.cart.items.has('my-discount') %}\n    {% return %}\n{% endif %}\n\n{% set price = services.cart.price.create({\n    'default': { 'gross': -19.99, 'net': -19.99}\n}) %}\n\n{% do services.cart.discount('my-discount', 'absolute', price, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Deregistering a Javascript Plugin in Shopware\nDESCRIPTION: Code example demonstrating how to deregister the OffCanvasCart plugin from Shopware's Storefront by using the PluginManager's deregister method. This prevents the plugin from initializing on its designated selectors.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/remove-unnecessary-js-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/main.js\nwindow.PluginManager.deregister('OffCanvasCart', '[data-off-canvas-cart]');\n```\n\n----------------------------------------\n\nTITLE: Dumping Available Variables in Twig Template\nDESCRIPTION: This Twig snippet demonstrates how to dump all available variables in a template for debugging purposes. It's useful for identifying which variables can be used in a custom template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/customize-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Extending Storefront Template in Twig\nDESCRIPTION: This snippet shows how to extend the original Storefront template file using Twig's extend functionality. The @Storefront prefix specifies the bundle to extend from.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/customize-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/layout/header/logo.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Dispatcher Service in PHP for Shopware 6\nDESCRIPTION: Service class implementation that handles firing custom events using Symfony's EventDispatcherInterface. The service takes an event dispatcher dependency and provides a method to dispatch the custom ExampleEvent.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/add-custom-event.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Swag\\BasicExample\\Core\\Content\\Example\\Event\\ExampleEvent;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\nclass ExampleEventService\n{\n    private EventDispatcherInterface $eventDispatcher;\n\n    public function __construct(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->eventDispatcher = $eventDispatcher;\n    }\n\n    public function fireEvent(ExampleEntity $exampleEntity, SalesChannelContext $context)\n    {\n        $this->eventDispatcher->dispatch(new ExampleEvent($exampleEntity, $context));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning ManyToOne Associations in Shopware 6\nDESCRIPTION: This example shows how to create a product while associating it with an existing tax entity, representing a ManyToOne association. The method getTaxId() searches for a tax entity with a specific rate and returns its ID.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $this->productRepository->create([\n        [\n            'name' => 'Example product',\n            'productNumber' => 'SW123',\n            'stock' => 10,\n            'taxId' => $this->getTaxId($context),\n            'price' => [['currencyId' => Defaults::CURRENCY, 'gross' => 50, 'net' => 25, 'linked' => false]],\n        ]\n    ], $context);\n}\n\nprivate function getTaxId(Context $context): string\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('taxRate', 19.00));\n\n    return $this->taxRepository->searchIds($criteria, $context)->firstId();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service in Symfony DI Container with XML Configuration\nDESCRIPTION: XML configuration for registering a custom service in Symfony's Dependency Injection Container. This services.xml file should be placed in the src/Resources/config/ directory of the plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-custom-service.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ExampleService\" />\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Component Testing with Pinia\nDESCRIPTION: Example of component testing setup with Pinia plugin integration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia, setActivePinia } from 'pinia';\n\nconst pinia = createPinia();\n\ndescribe('my component', () => {\n  beforeEach(() => {\n    setActivePinia(pinia);\n  });\n\n  it('is a component', async () => {\n    const wrapper = mount(await wrapTestComponent('myComponent', { sync: true }), {\n      global: {\n        plugins: [pinia],\n        stubs: {\n          // ...\n        },\n      },\n    });\n\n    expect(wrapper.exists()).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Service Class in Shopware 6 Plugin\nDESCRIPTION: PHP implementation of the custom service class that was registered in the services.xml file. This example shows a basic service with a single method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-custom-service.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Service/ExampleService.php\n// SwagBasicExample/src/Service/ExampleService.php\n\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nclass ExampleService\n{\n    public function doSomething(): void\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tax Provider HTTP Request/Response Example\nDESCRIPTION: JSON structure for tax provider endpoint requests and responses. The request includes cart and context data, while the response can specify taxes at line item, delivery, or cart level.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/tax-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"cart\": {\n    //...\n  },\n  \"salesChannelContext\": {\n    //...\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lineItemTaxes\": {\n    \"unique-identifier-of-lineitem\": [\n      {\"tax\":19,\"taxRate\":23,\"price\":19}\n    ]\n  },\n  \"deliveryTaxes\": {\n    \"unique-identifier-of-delivery-position\": [\n      {\"tax\":19,\"taxRate\":23,\"price\":19}\n    ]\n  },\n  \"cartPriceTaxes\": [\n    {\"tax\":19,\"taxRate\":23,\"price\":19}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Quote to Cart in Shopware\nDESCRIPTION: Method to convert a quote back into a shopping cart using the QuoteToCartConverter class. Creates a new cart with the quote's price and line items, then enriches it with additional data.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/quotes-management/guides/quotes-conversion.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Commercial\\B2B\\QuoteManagement\\Entity\\Quote\\QuoteEntity;\nuse Shopware\\Commercial\\B2B\\QuoteManagement\\Domain\\Transformer\\QuoteLineItemTransformer;\n\npublic function convertToCart(QuoteEntity $quote, SalesChannelContext $context): Cart\n    {\n        \n        $cart = new Cart(Uuid::randomHex());\n        $cart->setPrice($quote->getPrice());\n\n        $lineItems = QuoteLineItemTransformer::transformToLineItems($quote->getLineItems());\n        $cart->setLineItems($lineItems);\n        \n        //enrich the cart\n        \n        return $cart;\n    }\n```\n\n----------------------------------------\n\nTITLE: Making Nested Line Items Changeable in Twig\nDESCRIPTION: Shows how to make a nested line item changeable by setting the 'isChangeable' variable and creating a link to the appropriate action. This example uses SEO URLs to link to a product detail page with configuration parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-nested-line-items.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% block component_offcanvas_item_children_header_content_change_button %}\n    {% set isChangeable = true %}\n    {% set seo = seoUrl('frontend.detail.page', {\n            'productId': lineItem.children.first.referencedId,\n            'swagCustomizedProductsConfigurationEdit': lineItem.extensions.customizedProductConfiguration.id\n        })\n    %}\n    \n    <a href=\"{{ seo }}\" class=\"order-item-product-name\" title=\"{{ label }}\">\n        {{ parent() }}\n    </a>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Extending Storefront Filter Panel Template in Twig\nDESCRIPTION: Shows how to extend the Storefront's filter panel template to include the custom 'isCloseout' filter UI component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-listing-filters.md#2025-04-22_snippet_2\n\nLANGUAGE: Twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/component/listing/filter-panel.html.twig\n{% sw_extends '@Storefront/storefront/component/listing/filter-panel.html.twig' %}\n\n{% block component_filter_panel_items %}\n    {{ parent() }}\n\n    {# We'll include our filter element here #}\n    {% sw_include '@Storefront/storefront/component/listing/filter/filter-boolean.html.twig' with {\n        name: 'isCloseout',\n        displayName: 'Closeout'\n    } %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Shopware Admin Component\nDESCRIPTION: Shows the expected directory structure for implementing a custom component in Shopware administration\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nadministration\n├── src\n│   └──page\n│       └── sw-product-detail\n│           ├── index.js\n│           └── sw-product-detail.html.twig\n|   └──view\n│       └── sw-product-detail-custom\n│           ├── index.js        \n└── main.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorated Product URL Provider in PHP\nDESCRIPTION: Creates a decorator class for ProductUrlProvider to modify sitemap entries by extending AbstractUrlProvider. Includes basic implementation of required methods and constructor for dependency injection.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/modify-sitemap-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Sitemap\\Provider;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Content\\Sitemap\\Provider\\AbstractUrlProvider;\nuse Shopware\\Core\\Content\\Sitemap\\Struct\\UrlResult;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass DecoratedProductUrlProvider extends AbstractUrlProvider\n{\n    private AbstractUrlProvider $decoratedUrlProvider;\n\n    public function __construct(AbstractUrlProvider $abstractUrlProvider)\n    {\n        $this->decoratedUrlProvider = $abstractUrlProvider;\n    }\n\n    public function getDecorated(): AbstractUrlProvider\n    {\n        return $this->decoratedUrlProvider;\n    }\n\n    public function getName(): string\n    {\n        return $this->getDecorated()->getName();\n    }\n\n    public function getUrls(SalesChannelContext $context, int $limit, ?int $offset = null): UrlResult\n    {\n        return $this->getDecorated()->getUrls($context, $limit, $offset);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Sender Service\nDESCRIPTION: Creates a service class that handles message dispatch using MessageBusInterface. Shows basic message sending functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-message-to-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Swag\\BasicExample\\MessageQueue\\Message\\SmsNotification;\nuse Symfony\\Component\\Messenger\\MessageBusInterface;\n\nclass ExampleSender\n{\n    private MessageBusInterface $bus;\n\n    public function __construct(MessageBusInterface $bus)\n    {\n        $this->bus = $bus;\n    }\n\n    public function sendMessage(string $message): void\n    {\n        $this->bus->dispatch(new SmsNotification($message));\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing MiddlewareInterface in PHP for Shopware 6\nDESCRIPTION: Creates a custom middleware class that implements MiddlewareInterface. The handle method is where custom logic can be added before passing the envelope to the next middleware in the stack.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\MessageQueue\\Middleware;\n\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Middleware\\MiddlewareInterface;\nuse Symfony\\Component\\Messenger\\Middleware\\StackInterface;\n\nclass ExampleMiddleware implements MiddlewareInterface\n{\n    public function handle(Envelope $envelope, StackInterface $stack): Envelope\n    {\n        // do something here\n\n        // don't forget to call the next middleware\n        return $stack->next()->handle($envelope, $stack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductCountRouteResponse in PHP for Shopware 6\nDESCRIPTION: This code defines a ProductCountRouteResponse class that extends StoreApiResponse. It handles the response for a custom product count route in Shopware 6, returning a CountResult object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\AggregationResult\\Metric\\CountResult;\nuse Shopware\\Core\\System\\SalesChannel\\StoreApiResponse;\n\n/**\n * Class CountResult\n * @property CountResult $object\n */\nclass ProductCountRouteResponse extends StoreApiResponse\n{\n    public function __construct(CountResult $countResult)\n    {\n        parent::__construct($countResult);\n    }\n\n    public function getProductCount(): CountResult\n    {\n        return $this->object;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response with Association Fields in JSON\nDESCRIPTION: JSON response showing the result of a partial data loading request that includes both currency name and its associated sales channels with their names.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/partial-data-loading.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// response\n{\n  \"total\": 1,\n  \"data\": [\n    {\n      \"extensions\": [],\n      \"_uniqueIdentifier\": \"018cda3ac909712496bccc065acf0ff4\",\n      \"translated\": {\n        \"name\": \"US-Dollar\"\n      },\n      \"id\": \"018cda3ac909712496bccc065acf0ff4\",\n      \"name\": \"US-Dollar\",\n      \"salesChannels\": [\n        {\n          \"extensions\": [],\n          \"_uniqueIdentifier\": \"018cda3af56670d6a3fa515a85967bd2\",\n          \"translated\": {\n            \"name\": \"Storefront\"\n          },\n          \"id\": \"018cda3af56670d6a3fa515a85967bd2\",\n          \"name\": \"Storefront\",\n          \"apiAlias\": \"sales_channel\"\n        }\n      ],\n      \"isSystemDefault\": false,\n      \"apiAlias\": \"currency\"\n    }\n  ],\n  \"aggregations\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Context Resolution with TypeScript\nDESCRIPTION: Shows how to use TypeScript types with the ContextResolver to get proper type inference and IDE support. Uses the BrowserAppModuleRequest type for strongly-typed context handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/03-context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserAppModuleRequest } from '@shopware-ag/app-server-sdk/types'\n\nconst ctx = await app.contextResolver.fromBrowser<BrowserAppModuleRequest>(/** Request */);\n\n// This is now typed\nconsole.log(ctx.payload['sw-version']);\n```\n\n----------------------------------------\n\nTITLE: Registering Component and Declaring Data for Data Grid in Shopware 6\nDESCRIPTION: This JavaScript code registers a new component 'swag-basic-example' and declares static data for the data grid. It sets up the dataSource with sample user data and defines the columns to be displayed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-the-data-grid-component.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from 'swag-example.html.twig';\n\nShopware.Component.register('swag-basic-example', {\n    template,\n\n    data: function () {\n        return {\n            dataSource: [\n                { id: 'uuid1', company: 'Wordify', name: 'Portia Jobson' },\n                { id: 'uuid2', company: 'Twitternation', name: 'Baxy Eardley' },\n                { id: 'uuid3', company: 'Skidoo', name: 'Arturo Staker' },\n                { id: 'uuid4', company: 'Meetz', name: 'Dalston Top' },\n                { id: 'uuid5', company: 'Photojam', name: 'Neddy Jensen' }\n            ],\n            columns: [\n                { property: 'name', label: 'Name' },\n                { property: 'company', label: 'Company' }\n            ],\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Filter Configuration\nDESCRIPTION: Example of complex filtering with nested conditions using AND/OR operators\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"associations\": {\n    \"transactions\": {\n      \"associations\": {\n        \"stateMachineState\": {}\n      }\n    }\n  },\n  \"filter\": [\n    {\n      \"type\": \"multi\",\n      \"operator\": \"and\",\n      \"queries\": [\n        {\n          \"type\": \"multi\",\n          \"operator\": \"or\",\n          \"queries\": [\n            {\n              \"type\": \"equals\",\n              \"field\": \"transactions.stateMachineState.technicalName\",\n              \"value\": \"paid\"\n            },\n            {\n              \"type\": \"equals\",\n              \"field\": \"transactions.stateMachineState.technicalName\",\n              \"value\": \"open\"\n            }\n          ]\n        },\n        {\n          \"type\": \"equals\",\n          \"field\": \"customFields.exportedFlag\",\n          \"value\": null\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Joke Service in JavaScript\nDESCRIPTION: Defines a JokeService class that uses httpClient to fetch programming jokes from an external API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class JokeService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n\n    joke() {\n        return this.httpClient\n            .get('https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political')\n            .then(response => response.data)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in Shopware\nDESCRIPTION: Configuration example for defining multiple Redis connections in the shopware.yaml file. This allows separating different types of data storage needs with unique connection parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/redis.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    # ...\n    redis:\n        connections:\n            ephemeral:\n                dsn: 'redis://host1:port/dbindex'\n            persistent:\n                dsn: 'redis://host2:port/dbindex'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Document via Database Migration in PHP for Shopware\nDESCRIPTION: This PHP code snippet demonstrates a database migration to add a custom document in Shopware. It inserts entries into the document_base_config and document_base_config_sales_channel tables, configuring a new 'custom' document type and associating it with the Storefront sales channel.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/document/add-custom-document.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\nclass Migration1616668698AddDocument extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1616668698;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $documentConfigId = Uuid::randomBytes();\n        $documentTypeId = $this->getDocumentTypeId($connection);\n\n        $connection->insert('document_base_config', [\n            'id' => $documentConfigId,\n            'name' => 'custom',\n            'filename_prefix' => 'custom_',\n            'global' => 0,\n            'document_type_id' => $documentTypeId,\n            'config' => $this->getConfig(),\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)\n        ]);\n\n        $storefrontSalesChannelId = $this->getStorefrontSalesChannelId($connection);\n        if (!$storefrontSalesChannelId) {\n            return;\n        }\n\n        $connection->insert('document_base_config_sales_channel', [\n            'id' => Uuid::randomBytes(),\n            'document_base_config_id' => $documentConfigId,\n            'sales_channel_id' => $storefrontSalesChannelId,\n            'document_type_id' => $documentTypeId,\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)\n        ]);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n\n    private function getDocumentTypeId(Connection $connection): string\n    {\n        $sql = <<<SQL\n            SELECT id\n            FROM document_type\n            WHERE technical_name = \"delivery_note\"\nSQL;\n        return $connection->fetchOne($sql);\n    }\n\n    private function getConfig(): string\n    {\n        $config = [\n            'displayPrices' => false,\n            'displayFooter' => true,\n            'displayHeader' => true,\n            'displayLineItems' => true,\n            'displayLineItemPosition' => true,\n            'displayPageCount' => true,\n            'displayCompanyAddress' => true,\n            'pageOrientation' => 'portrait',\n            'pageSize' => 'a4',\n            'itemsPerPage' => 10,\n            'companyName' => 'Example company',\n            'companyAddress' => 'Example company address',\n            'companyEmail' => 'custom@example.org'\n        ];\n\n        return json_encode($config);\n    }\n\n    private function getStorefrontSalesChannelId(Connection $connection): ?string\n    {\n        $sql = <<<SQL\n            SELECT id\n            FROM sales_channel\n            WHERE type_id = :typeId\nSQL;\n        $salesChannelId = $connection->fetchOne($sql, [\n            'typeId' => Uuid::fromHexToBytes(Defaults::SALES_CHANNEL_TYPE_STOREFRONT)\n        ]);\n\n        if (!$salesChannelId) {\n            return null;\n        }\n\n        return $salesChannelId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mixin in Shopware 6\nDESCRIPTION: Demonstrates how to register a basic mixin in Shopware 6 admin panel using the Mixin.register function. The mixin implements a simple hello method that logs to console when created.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/add-mixins.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <administration root>/mixins/swag-basic-example.js\n// get the Mixin property of the shopware object\nconst { Mixin } = Shopware;\n\n// give the mixin a name and feed it into the register function as the second argument\nMixin.register('swag-basic-mixin', {\n    created: function () {\n        this.hello()\n    },\n    methods: {\n        hello: function () {\n            console.log('hello from mixin!')\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Fields with sw-custom-field-set-renderer in HTML\nDESCRIPTION: Implementation of the custom field set renderer component in a Shopware 6 administration template. This component allows displaying custom field sets with optional selection functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-custom-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<sw-card title=\"Custom fields\">\n    <sw-custom-field-set-renderer\n        :entity=\"customEntity\"\n        showCustomFieldSetSelection\n        :sets=\"sets\">\n    </sw-custom-field-set-renderer>\n</sw-card>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flow Sequence Evaluation in Shopware\nDESCRIPTION: This diagram illustrates how a flow sequence is evaluated in Shopware, showing the process from FlowDispatcher to FlowExecutor, including condition checking and action execution.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/flow-concept.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart-elk TD\n    A([Start])-->B[\"FlowDispatcher::dispatch()\"]\n    B--dispatches (FlowEventAware)-->C[\"FlowExecutor::execute()\"]\n    C-->D{\"FlowExecutor::sequenceRuleMatches()\"}\n    C--no condition-->E[\"FlowExecutor::executeAction3()\"]\n    D--Yes-->I[\"FlowExecutor::executeAction2()\"]\n    E-->F[\"StopFlowAction::handleFlow()\"]\n    F-->G([End])\n    D--No -->H[\"FlowExecutor::executeAction1()\"]\n    H-->F\n    I-->F\n```\n\n----------------------------------------\n\nTITLE: Implementing Mapping Definition for Many-to-Many Relationship in PHP\nDESCRIPTION: Creates a mapping definition class that extends MappingEntityDefinition to establish relationships between Foo and Bar entities. Defines foreign key fields and association fields for both entities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\CreatedAtField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\FkField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\ManyToOneAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\MappingEntityDefinition;\nuse Swag\\BasicExample\\Core\\Content\\Bar\\BarDefinition;\nuse Swag\\BasicExample\\Core\\Content\\Foo\\FooDefinition;\n\nclass FooBarMappingDefinition extends MappingEntityDefinition\n{\n    public const ENTITY_NAME = 'foo_bar';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new FkField('bar_id', 'barId', BarDefinition::class))->addFlags(new PrimaryKey(), new Required()),\n            (new FkField('foo_id', 'fooId', FooDefinition::class))->addFlags(new PrimaryKey(), new Required()),\n            new ManyToOneAssociationField('bar', 'bar_id', BarDefinition::class, 'id'),\n            new ManyToOneAssociationField('foo', 'foo_id', FooDefinition::class, 'id')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing ManyToMany Associations in Shopware Component\nDESCRIPTION: This snippet shows how to work with ManyToMany associations in a Shopware component. It demonstrates creating a repository for associated categories, loading categories, adding categories to a product, and removing categories from a product.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Criteria } = Shopware.Data;\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            product: undefined,\n            categories: undefined\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        categoryRepository() {\n            if (!this.product) {\n                return undefined;\n            };\n\n            return this.repositoryFactory.create(\n                // `product_categories`\n                this.product.categories.entity,\n                // `product/some-id/categories`\n                this.product.categories.source\n            );\n        }\n    },\n\n    created() {\n        this.productRepository\n            .get('some-product-id', Shopware.Context.api)\n            .then((product) => {\n                this.product = product;\n            });\n    },\n\n    methods: {\n        loadCategories() {\n            this.categoryRepository\n                .search(new Criteria(), Shopware.Context.api)\n                .then((categories) => {\n                    this.categories = categories;\n                });\n        },\n\n        addCategoryToProduct(category) {\n            this.categoryRepository\n                .assign(category.id, Shopware.Context.api)\n                .then(this.loadCategories);\n        },\n\n        removeCategoryFromProduct(categoryId) {\n            this.categoryRepository\n                .delete(categoryId, Shopware.Context.api)\n                .then(this.loadCategories);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Flags to an Entity Field in Shopware 6\nDESCRIPTION: Shows how to add multiple flags (PrimaryKey and Required) to an IdField in a Shopware 6 entity definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/using-flags.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n(new IdField('id', 'id'))->addFlags(new PrimaryKey(), new Required())\n```\n\n----------------------------------------\n\nTITLE: Configure Cypress plugins\nDESCRIPTION: Plugin configuration to include Shopware E2E testsuite platform\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@shopware-ag/e2e-testsuite-platform/cypress/plugins');\n```\n\n----------------------------------------\n\nTITLE: Registering Price Calculator Decorator in XML Services Configuration\nDESCRIPTION: XML configuration for registering the custom price calculator as a service decorator in the Symfony service container. This connects the custom implementation to Shopware's service container system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/customize-price-calculation.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\CustomProductPriceCalculator\" decorates=\"Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Service\\CustomProductPriceCalculator.inner\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Local Filesystem Adapter Configuration\nDESCRIPTION: YAML configuration for using the local filesystem adapter in Shopware 6, pointing to the public directory as the root.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    filesystem:\n      {ADAPTER_NAME}:\n        type: \"local\"\n        config:\n          root: \"%kernel.project_dir%/public\"\n\n```\n\n----------------------------------------\n\nTITLE: Validating GET Requests in PHP for Shopware App System\nDESCRIPTION: This PHP code snippet demonstrates how to manually verify the signature of GET requests from Shopware. It extracts the signature from the query string, recalculates the signature using the app secret, and compares it with the received signature.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-signature-verification.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\n/** @var RequestInterface $request */\n$queryString = $request->getUri()->getQuery();\n\\parse_str($request->getUri()->getQuery(), $queries);\n$compare = $queries['shopware-shop-signature'];\n\n// remove shopware-shop-signature from query string,\n// as it is not part of the signature itself\n$queryString = \\preg_replace(\n    \\sprintf('/&%s=%s/', 'shopware-shop-signature' ,$compare), '', $queryString\n);\n\n// calculate the signature\n$signature = hash_hmac('sha256', $queryString, $appSecret);\n\n// validate with compare signature from Shopware\n$valid = hash_equals($signature, $compare);\n```\n\n----------------------------------------\n\nTITLE: Implementing Many to One Association in Foo Entity Definition\nDESCRIPTION: Example of adding a Many to One association from Foo to Bar entity. Includes a foreign key field and a ManyToOneAssociationField.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n        (new FkField('bar_id', 'barId', BarDefinition::class))->addFlags(new Required()),\n\n        new ManyToOneAssociationField('bar', 'bar_id', BarDefinition::class, 'id'),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Action Buttons in Manifest XML\nDESCRIPTION: Demonstrates how to add custom action buttons to the Shopware Administration by defining them in the manifest.xml file. The example shows buttons for promotion and product entities in both detail and list views.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        ...\n    </meta>\n    <admin>\n        <action-button action=\"setPromotion\" entity=\"promotion\" view=\"detail\" url=\"https://example.com/promotion/set-promotion\">\n            <label>set Promotion</label>\n        </action-button>\n        <action-button action=\"deletePromotion\" entity=\"promotion\" view=\"detail\" url=\"https://example.com/promotion/delete-promotion\">\n            <label>delete Promotion</label>\n        </action-button>\n        <action-button action=\"restockProduct\" entity=\"product\" view=\"list\" url=\"https://example.com/restock\">\n            <label>restock</label>\n        </action-button>\n    </admin>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Disabling Indexing in Shopware DAL Update Method\nDESCRIPTION: This PHP code snippet shows how to disable indexing when using the Data Abstraction Layer (DAL) in a Shopware indexer update method. It adds a flag to the context to prevent infinite loops caused by EntityWrittenContainerEvent events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-indexer.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function update(EntityWrittenContainerEvent $event): ?EntityIndexingMessage\n{\n    $updates = $event->getPrimaryKeys(CustomerDefinition::ENTITY_NAME);\n\n    if (empty($updates)) {\n        return null;\n    }\n\n    $context = $event->getContext();\n    $context->addState(EntityIndexerRegistry::DISABLE_INDEXING);\n\n    return new EntityIndexingMessage(array_values($updates), null, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Route in Shopware 6 Administration\nDESCRIPTION: This snippet demonstrates how to configure a basic route in a Shopware 6 Administration module. It shows the structure of the routes object with a single 'overview' route.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-custom-route.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nroutes: {\n    overview: {\n        component: 'sw-product-list',\n        path: 'overview'\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Document Template Extension in Twig\nDESCRIPTION: Twig template that extends the base document template for customizing document appearance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/document/add-custom-document-type.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Framework/documents/base.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contains Filter in Shopware\nDESCRIPTION: Demonstrates the Contains filter for partial string matching. Filters items where name contains 'Lightweight'.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(new ContainsFilter('name', 'Lightweight'));\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": [\n        { \n            \"type\": \"contains\", \n            \"field\": \"name\", \n            \"value\": \"Lightweight\"\n        }    \n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating EntityDefinition with Custom Collection Class in Shopware 6 PHP\nDESCRIPTION: This snippet shows how to update the EntityDefinition class to use the custom collection class by overriding the getCollectionClass method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-custom-complex-data.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass ExampleDefinition extends EntityDefinition\n{\n    [...]\n\n    public function getCollectionClass(): string\n    {\n        return ExampleCollection::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Structure (JSON)\nDESCRIPTION: Example of the JSON payload structure sent by Shopware when a webhook is triggered. It includes data about the event, source, and timestamp.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/webhook.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"payload\":[\n      {\n        \"entity\":\"product\",\n        \"operation\":\"delete\",\n        \"primaryKey\":\"7b04ebe416db4ebc93de4d791325e1d9\",\n        \"updatedFields\":[\n        ]\n      }\n    ],\n    \"event\":\"product.written\"\n  },\n  \"source\":{\n    \"url\":\"http:\\/\\/localhost:8000\",\n    \"appVersion\":\"0.0.1\",\n    \"shopId\":\"dgrH7nLU6tlE\",\n    \"eventId\": \"7b04ebe416db4ebc93de4d791325e1d9\"\n  },\n  \"timestamp\": 123123123\n}\n```\n\n----------------------------------------\n\nTITLE: Assignment Service Implementation in Shopware B2B Suite\nDESCRIPTION: This code defines the service class that manages role-contact assignments. The service provides methods to create and remove assignments between entities, with internal validation to ensure assignments are only created when allowed.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/assignment-service.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\RoleContact\\Framework;\n\n/**\n * Assigns roles to contacts M:N\n */\nclass RoleContactAssignmentService\n{\n    public function assign(int $roleId, int $contactId)\n    {\n        [...]\n    }\n\n    public function removeAssignment(int $roleId, int $contactId)\n    {\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relative Discount to Cart in Twig\nDESCRIPTION: Example demonstrating how to add a percentage-based discount to the cart using the cart service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.has('my-discount') %}\n    {% return %}\n{% endif %}\n\n{% do services.cart.discount('my-discount', 'percentage', -10, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Method to a Component\nDESCRIPTION: Demonstrates how to add a new custom method to the sw-order-list component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('sw-order-list', (previousState) => {\n    return {\n        newCustomMethod() {\n            console.log('This is a new method added to sw-order-list');\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Theme Directory Structure for JavaScript\nDESCRIPTION: The directory structure showing the location of the main.js file which serves as the JavaScript entry point for a Shopware 6 theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-css-js-to-theme.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── composer.json\n└── src\n    ├── Resources\n    │   ├── app\n    │   │   └── storefront\n    │   │       └── src\n    │   │           └── main.js <-- JS entry\n    └── SwagBasicExampleTheme.php\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Entity\nDESCRIPTION: Demonstrates how to fetch a single entity using the repository's get method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            entity: undefined\n        }\n    },\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        }\n    },\n\n    created() {\n        const entityId = 'some-id';\n\n        this.productRepository\n            .get(entityId, Shopware.Context.api)\n            .then(entity => {\n                this.entity = entity;\n            });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Invalidation Subscriber in PHP for Shopware\nDESCRIPTION: This PHP class implements an event subscriber that listens for entity write events and invalidates the cache when a specific entity type changes. It uses the CacheInvalidator service to clear the cache for the associated route.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-caching-for-store-api-route.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/CacheInvalidationSubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleDefinition;\nuse Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator;\n\nclass CacheInvalidationSubscriber implements EventSubscriberInterface\n{\n    private CacheInvalidator $cacheInvalidator;\n\n    public function __construct(CacheInvalidator $cacheInvalidator) \n    {\n        $this->cacheInvalidator = $cacheInvalidator;\n    }\n    \n    public static function getSubscribedEvents()\n    {\n        return [\n            // The EntityWrittenContainerEvent is a generic event that is always thrown when an entities are written. This contains all changed entities\n            EntityWrittenContainerEvent::class => [\n                ['invalidate', 2001]\n            ],\n        ];\n    }\n    \n    public function invalidate(EntityWrittenContainerEvent $event): void\n    {\n        // check if own entity written. In some cases you want to use the primary keys for further cache invalidation\n        $changes = $event->getPrimaryKeys(ExampleDefinition::ENTITY_NAME);\n        \n        // no example entity changed? Then the cache does not need to be invalidated\n        if (empty($changes)) {\n            return;\n        }\n\n        $this->cacheInvalidator->invalidate([\n            CachedExampleRoute::buildName()  \n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Async Overridden Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to register an overridden plugin asynchronously. This is necessary if the original plugin is registered asynchronously.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/override-existing-javascript.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst PluginManager = window.PluginManager;\n\n// If the plugin \"CookiePermission\" is registered async, you also override it with an async/dynamic import\nPluginManager.override('CookiePermission', () => import('./my-cookie-permission/my-cookie-permission.plugin'), '[data-cookie-permission]');\n```\n\n----------------------------------------\n\nTITLE: Applying Percentage Discount to Calculated Price in Twig\nDESCRIPTION: Example of using the discount() method to apply a percentage discount to the existing calculated price in Twig. This snippet shows how to add a 10% discount to the product's price.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n{% do product.calculatedPrice.discount(10) %}\n```\n\n----------------------------------------\n\nTITLE: Registering Lifecycle Webhooks in Shopware App Manifest\nDESCRIPTION: This XML snippet shows how to register webhooks for app activation, deactivation, and deletion events in the manifest.xml file of a Shopware app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/02-lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<webhooks>\n    <webhook name=\"appActivate\" url=\"https://app-server.com/app/activate\" event=\"app.activated\"/>\n    <webhook name=\"appDeactivated\" url=\"https://app-server.com/app/deactivated\" event=\"app.deactivated\"/>\n    <webhook name=\"appDelete\" url=\"https://app-server.com/app/delete\" event=\"app.deleted\"/>\n</webhooks>\n```\n\n----------------------------------------\n\nTITLE: Accessing API Errors from Vuex Store in JavaScript\nDESCRIPTION: This snippet shows two getter methods for accessing API errors from the Vuex store. The first method handles nested property paths as arrays, while the second uses dot notation for easier access to scalar fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getApiErrorFromPath (state) => (entityName, id, path)\n\nfunction getApiError(state) => (entity, field)\n```\n\n----------------------------------------\n\nTITLE: Verifying Shopware App Registration Request Signature in PHP\nDESCRIPTION: Shows how to verify the signature of a registration request from Shopware using PHP, ensuring the request is authentic.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\n/** @var RequestInterface $request */\n$queryString = $request->getUri()->getQuery();\n$signature = hash_hmac('sha256', $queryString, $appSecret);\n```\n\n----------------------------------------\n\nTITLE: Handling Webhooks with App PHP SDK\nDESCRIPTION: PHP code snippet demonstrating how to handle incoming webhooks using the Shopware App PHP SDK. It shows resolving the shop and assembling the webhook context.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/webhook.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\n\nfunction webhookController(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $webhook = $contextResolver->assembleWebhook($serverRequest, $shop);\n    \n    // do something with the parsed webhook\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Block Registration in JavaScript\nDESCRIPTION: This JavaScript file demonstrates the complete block registration, including imports for components, block configuration with metadata, default styling, and slot definitions for content placement. It registers the block with Shopware's CMS service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/index.js\nimport './component';\nimport './preview';\n\nShopware.Service('cmsService').registerCmsBlock({\n    name: 'my-image-text-reversed',\n    category: 'text-image',\n    label: 'My Image Text Block!',\n    component: 'sw-cms-block-my-image-text-reversed',\n    previewComponent: 'sw-cms-preview-my-image-text-reversed',\n    defaultConfig: {\n        marginBottom: '20px',\n        marginTop: '20px',\n        marginLeft: '20px',\n        marginRight: '20px',\n        sizingMode: 'boxed'\n    },\n    slots: {\n        left: 'text',\n        right: 'image'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Aggregation in PHP for Shopware DAL\nDESCRIPTION: This snippet demonstrates how to create a range aggregation in PHP to filter products by price ranges. It shows how to define ranges with 'from' and 'to' boundaries and how to process the result.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addAggregation(\n    new RangeAggregation(\n        'price_ranges', \n        'products.price',\n        [\n            ['to' => 100],\n            ['from' => 100, 'to' => 200],\n            ['from' => 200]\n        ]\n    )\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var RangeResult $aggregation */\n$aggregation = $result->getAggregations()->get('price_ranges');\n\nforeach ($aggregation->getRanges() as $key => $docCount) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Switch with Match Expression for Status Codes - PHP (PHP 8.0+)\nDESCRIPTION: Replaces a verbose switch statement with a concise match expression, benefiting from strict value comparison, exhaustiveness, and direct assignment. The match expression returns a value and prevents case fall-through, making control flow clearer and less error-prone. Requires PHP 8.0+.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$message = match ($statusCode) {\n    200, 300 => null,\n    400 => 'not found',\n    500 => 'server error',\n    default => 'unknown status code',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Module in manifest.xml\nDESCRIPTION: Example of how to configure a custom module in the manifest.xml file, including attributes like name, source, parent, position, and labels.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        ...\n    </meta>\n    <admin>\n        <module name=\"exampleModule\"\n                source=\"https://example.com/promotion/view/promotion-module\"\n                parent=\"sw-marketing\"\n                position=\"50\"\n        >\n            <label>Example module</label>\n            <label lang=\"de-DE\">Beispiel Modul</label>\n        </module>\n    </admin>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Checkout and Subscription Events in Shopware (PHP)\nDESCRIPTION: Demonstrates two examples of event subscriber classes for Shopware: one that listens to a standard checkout event, and one that listens to a 'subscription.'-prefixed checkout event. Both classes implement the EventSubscriberInterface and map the relevant event to an event handler method. Dependencies include the EventSubscriberInterface, the event classes (e.g., CheckoutOrderPlacedCriteriaEvent), and Shopware's event dispatching system. Input is a triggered event; output is the execution of custom logic in 'onOrderPlacedCriteria.' Limitation: subscribe only to listed events, and changes in event names may require code updates.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/subscriptions/guides/events.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Normal Event Listener\nclass MyEventSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [CheckoutOrderPlacedCriteriaEvent::class => 'onOrderPlacedCriteria'];\n    }\n\n    public function onOrderPlacedCriteria(CheckoutOrderPlacedCriteriaEvent $event): void\n    {\n        // Your event handler logic\n    }\n}\n\n// Subscription Event Listener\nclass MyEventSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return ['subscription.' . CheckoutOrderPlacedCriteriaEvent::class => 'onOrderPlacedCriteria'];\n    }\n\n    public function onOrderPlacedCriteria(CheckoutOrderPlacedCriteriaEvent $event): void\n    {\n        // Your event handler logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a Notification Response with PHP SDK\nDESCRIPTION: PHP SDK example showing how to create a response that displays a notification to the user after an action button is clicked.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Response\\ActionButtonResponse;\n\nActionButtonResponse::notification('success', 'foo');\n```\n\n----------------------------------------\n\nTITLE: CMS Element Snippet Definition\nDESCRIPTION: Language snippet definition for the Dailymotion element's label in the administration interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sw-cms\": {\n    \"elements\": {\n      \"customDailymotionElement\": {\n        \"label\": \"Dailymotion video\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service in Shopware Container\nDESCRIPTION: Shows how to register the JokeService in Shopware's service container using BottleJS.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport JokeService from '../services/joke.service'\n\nShopware.Service().register('joker', (container) => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new JokeService(initContainer.httpClient);\n});\n```\n\n----------------------------------------\n\nTITLE: Manual HTTP Client Creation in TypeScript\nDESCRIPTION: Shows how to manually create and use the HTTP client for making requests to Shopware without using ContextResolver.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/05-http-client.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from \"@shopware-ag/app-server-sdk\"\n\n// Get the shop by repository directly\nconst shop = ...;\n\nconst httpClient = new HttpClient(shop);\n\nconst response = await httpClient.get<{version: string}>('/_info/version')\n\nconsole.log(response.body.version)\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Shopware Controllers with Placeholders\nDESCRIPTION: Example of using translations with placeholder variables in a Shopware controller. The trans method accepts an array of placeholder values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->trans('soldProducts', ['%count%' => 3, '%country%' => 'Germany']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Method with Route\nDESCRIPTION: Example of a controller method implementation with route configuration and template rendering.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-controller.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n    #[Route(path: '/example', name: 'frontend.example.example', methods: ['GET'])]\n    public function showExample(): Response\n    {\n        return $this->renderStorefront('@SwagBasicExample/storefront/page/example.html.twig', [\n            'example' => 'Hello world'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AddDataToPage Event Subscriber in PHP for Shopware 6\nDESCRIPTION: This code implements an event subscriber that adds the product count to the footer pagelet. It uses the ProductCountRoute to fetch the count and adds it as an extension to the pagelet.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCountRoute;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass AddDataToPage implements EventSubscriberInterface\n{\n    private ProductCountRoute $productCountRoute;\n\n    public function __construct(ProductCountRoute $productCountRoute)\n    {\n        $this->productCountRoute = $productCountRoute;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            FooterPageletLoadedEvent::class => 'addActiveProductCount'\n        ];\n    }\n\n    public function addActiveProductCount(FooterPageletLoadedEvent $event): void\n    {\n        $productCountResponse = $this->productCountRoute->load(new Criteria(), $event->getSalesChannelContext());\n\n        $event->getPagelet()->addExtension('product_count', $productCountResponse->getProductCount());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Monolog Channel in Shopware 6 Plugin\nDESCRIPTION: YAML configuration that creates a custom Monolog logging channel for a Shopware plugin. This basic configuration establishes the channel name that will be used to identify log messages from the plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n  channels: ['my_plugin_channel']\n```\n\n----------------------------------------\n\nTITLE: Varnish XKey Configuration\nDESCRIPTION: YAML configuration for enabling Varnish XKey support in Shopware's HTTP cache system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  http_cache:\n      reverse_proxy:\n        enabled: true\n        use_varnish_xkey: true\n        hosts:\n          - 'varnish-host'\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in XML for Shopware 6 Plugin\nDESCRIPTION: This XML configuration defines the services for the ProductCountRoute and AddDataToPage classes. It injects the necessary dependencies and tags the event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ProductCountRoute\" public=\"true\">\n            <argument type=\"service\" id=\"product.repository\"/>\n        </service>\n        \n        <service id=\"Swag\\BasicExample\\Service\\AddDataToPage\" >\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ProductCountRoute\"/>\n            <tag name=\"kernel.event_subscriber\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Symfony Bundle Controller for Checkout Gateway\nDESCRIPTION: Shows how to implement a Symfony controller for handling checkout gateway requests using the Shopware App SDK.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/checkout-gateway.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Shopware\\App\\SDK\\Context\\Cart\\Error;\nuse Shopware\\App\\SDK\\Context\\Gateway\\Checkout\\CheckoutGatewayAction;\nuse Shopware\\App\\SDK\\Framework\\Collection;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\CheckoutGatewayCommand;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\Command\\AddCartErrorCommand;\nuse Shopware\\App\\SDK\\Response\\GatewayResponse;\nuse Symfony\\Bridge\\PsrHttpMessage\\HttpFoundationFactoryInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route('/api/gateway', name: 'api.gateway.')]\nclass GatewayController extends AbstractController\n{\n    public function __construct(\n        private readonly HttpFoundationFactoryInterface $httpFoundationFactory\n    ) {\n    }\n\n    #[Route('/checkout', name: 'checkout', methods: ['POST'])]\n    public function checkout(CheckoutGatewayAction $action): Response\n    {\n        /** @var Collection<CheckoutGatewayCommand> $commands */\n        $commands = new Collection();\n\n        if ($action->paymentMethods->has('payment-myApp-payment-method')) {\n            if ($action->cart->getPrice()->getTotalPrice() > 1000) {\n                $commands->add(new RemovePaymentMethodCommand('payment-myApp-payment-method'));\n                $commands->add(new AddCartErrorCommand('Payment method \\'My App Payment Method\\' is not available for carts > 1000€.', false, Error::LEVEL_WARNING));\n            }\n        }\n\n        $response = GatewayResponse::createCheckoutGatewayResponse($commands);\n\n        return $this->httpFoundationFactory->createResponse($response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translatable Exception in PHP for Shopware\nDESCRIPTION: This code snippet demonstrates how to create a custom exception class that implements the B2BTranslatableException interface. It allows for translatable error messages to be shown to the customer in the Shopware error controller.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/exception.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Common\\Repository;\n\nuse DomainException;\nuse Shopware\\B2B\\Common\\B2BTranslatableException;\nuse Throwable;\n\nclass NotAllowedRecordException extends DomainException implements B2BTranslatableException\n{\n    private string $translationMessage;\n\n    private array $translationParams;\n\n    public function __construct(\n        $message = '',\n        string $translationMessage = '',\n        array $translationParams = [],\n        $code = 0,\n        Throwable $previous = null\n    ) {\n        parent::__construct($message, $code, $previous);\n\n        $this->translationMessage = $translationMessage;\n        $this->translationParams = $translationParams;\n    }\n\n    public function getTranslationMessage(): string\n    {\n        return $this->translationMessage;\n    }\n\n    public function getTranslationParams(): array\n    {\n        return $this->translationParams;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field Set with Fields in PHP\nDESCRIPTION: PHP code for creating a new custom field set with a size field using the repository pattern. The example demonstrates how to define field types, translations for labels, and position settings for proper display in the Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\System\\CustomField\\CustomFieldTypes;\nuse \\Shopware\\Core\\Defaults;\n\n[...]\n\n$this->customFieldSetRepository->create([\n    [\n        'name' => 'swag_example_set',\n        'config' => [\n            'label' => [\n                'en-GB' => 'English custom field set label',\n                'de-DE' => 'German custom field set label',\n                Defaults::LANGUAGE_SYSTEM => \"Mention the fallback label here\"\n            ]\n        ],\n        'customFields' => [\n            [\n                'name' => 'swag_example_size',\n                'type' => CustomFieldTypes::INT,\n                'config' => [\n                    'label' => [\n                        'en-GB' => 'English custom field label',\n                        'de-DE' => 'German custom field label',\n                        Defaults::LANGUAGE_SYSTEM => \"Mention the fallback label here\"\n                    ],\n                    'customFieldPosition' => 1\n                ]\n            ]\n        ]\n    ]\n], $context);\n```\n\n----------------------------------------\n\nTITLE: Using SimpleHttpClient for API Requests - PHP\nDESCRIPTION: Shows how to use the SimpleHttpClient wrapper to make HTTP requests with a simplified interface. Includes examples of GET and POST requests with JSON handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/05-http-client.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$simpleClient = new \\Shopware\\App\\SDK\\HttpClient\\SimpleHttpClient\\SimpleHttpClient($httpClient);\n\n$response = $simpleClient->get('https://shop.com/api/_info/version');\n$response->getHeader('Content-Type'); // application/json\n$response->ok(); // true when 200 <= status code < 300\n$body = $response->json(); // json decoded body\necho $body['version'];\n\n$simpleClient->post('https://shop.com/api/_action/sync', [\n    'entity' => 'product',\n    'offset' => 0,\n    'total' => 100,\n    'payload' => [\n        [\n            'id' => '123',\n            'name' => 'Foo',\n        ],\n    ],\n]);\n\n// and the same with put, patch, delete\n```\n\n----------------------------------------\n\nTITLE: Testing Sanitizer Helper Service in JavaScript\nDESCRIPTION: Example of testing a sanitizer helper service that handles HTML sanitization, including tests for script removal and link sanitization.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sanitizer.helper.spec.js\nimport Sanitizer from 'src/core/helper/sanitizer.helper';\n\ndescribe('core/helper/sanitizer.helper.js', () => {\n    it('should sanitize the html', () => {\n        expect(Sanitizer.sanitize('<A/hREf=\"j%0aavas%09cript%0a:%09con%0afirm%0d``\">z'))\n            .toBe('<a href=\"j%0aavas%09cript%0a:%09con%0afirm%0d``\">z</a>');\n    });\n\n    it('should remove script functions from dom elements', () => {\n        expect(Sanitizer.sanitize('<details open ontoggle=confirm()>'))\n            .toBe('<details open=\"\"></details>');\n    });\n\n    it('should remove script functions completely', () => {\n        expect(Sanitizer.sanitize(`<script y=\"><\">/*<script* */prompt()</script`))\n            .toBe('');\n    });\n\n    it('should sanitize js in links', () => {\n        expect(Sanitizer.sanitize('<a href=javas&#99;ript:alert(1)>click'))\n            .toBe('<a>click</a>');\n    });\n\n    // ...more tests \n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Button Handler with Context\nDESCRIPTION: Example of handling action button requests with automatic request validation and shop resolution.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/06-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNotificationResponse } from \"@shopware-ag/app-server-sdk/helper/app-actions\";\n\napp.post(\"/app/action-button\", async (c) => {\n  const ctx = c.get(\"context\") as Context<SimpleShop, ActionButtonRequest>;\n\n  // Do something with the context, this is typed by second generic argument of Context\n  console.log(ctx.payload.data.ids);\n\n  return createNotificationResponse(\"success\", \"Yeah, it worked!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Twig Template for A11y Support in Invoice Documents\nDESCRIPTION: Updates to the invoice HTML template to add accessibility features such as tabindex for better navigation by screen readers and assistive technologies.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% block document_headline %}\n    <h1 class=\"headline\" tabindex=\"0\">\n        <!-- Headline content -->\n    </h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI on Debian/Ubuntu Linux\nDESCRIPTION: Script to add the Shopware repository and install the CLI tool on Debian-based Linux distributions using APT.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n  'https://dl.cloudsmith.io/public/friendsofshopware/stable/setup.deb.sh' \\\n  | sudo -E bash\nsudo apt install shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware Deployment Helper in YAML\nDESCRIPTION: YAML configuration example for the Shopware Deployment Helper showing hooks, extension management, one-time tasks, and store configurations in the .shopware-project.yml file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-helper.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndeployment:\n  hooks:\n    pre: |\n      echo \"Before deployment general\"\n    post: |\n      echo \"After deployment general\"\n    pre-install: |\n      echo \"Before running system:install\"\n    post-install: |\n      echo \"After running system:install\"\n    pre-update: |\n      echo \"Before running system:update\"\n    post-update: |\n      echo \"After running system:update\"\n\n  # Automatically installs and updates all extensions included in custom/plugins and custom/apps and composer\n  extension-management:\n    enabled: true\n\n    # These extensions are not managed, you should use one-time-tasks to manage them\n    exclude:\n      - Name\n\n    overrides:\n      # the key is the extension name (app or plugin)\n      MyPlugin:\n        # Same as exclude\n        state: ignore\n\n      AnotherPlugin:\n        # This plugin can be installed, but should be inactive\n        state: inactive\n\n      RemoveThisPlugin:\n        # This plugin will be uninstalled if it is installed\n        state: remove\n        # should the extension data of an uninstalled extension be kept\n        keepUserData: true\n\n  one-time-tasks:\n    - id: foo\n      script: |\n        # runs one time in deployment, then never again\n        ./bin/console --version\n\n  store:\n    license-domain: 'example.com'\n```\n\n----------------------------------------\n\nTITLE: Converting Cart to Quote in Shopware\nDESCRIPTION: Method to convert a shopping cart into a quote using the CartToQuoteConverter class. It first converts the cart to an order and then enriches it with quote-specific data.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/quotes-management/guides/quotes-conversion.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Checkout\\Cart\\Order\\OrderConversionContext;\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter;\n\npublic function convertToQuote(Cart $cart, SalesChannelContext $context, OrderConversionContext $orderContext = null): Quote\n    {\n        $order = $this->orderConverter->convertToOrder($cart, $context, $orderContext);\n        \n        $quote = $order;\n        \n        //enrich quote data\n        \n        //enrich quote line-items\n        \n        return $quote;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule-Aware Select Component in Shopware Administration\nDESCRIPTION: Example of how to use the sw-select-rule-create component with rule awareness to automatically restrict selection based on previously defined rule assignment configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rule/add-custom-rules.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% block example_twig_blog %}\n    <sw-select-rule-create\n        rule-aware-group-key=\"productPrices\"\n        @save-rule=\"[YOUR SAVE METHOD]\">\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Price to Existing Calculated Price in Twig\nDESCRIPTION: Example of using the plus() method to add a static defined price to the existing calculated price in Twig. This snippet shows how to create a price object and add it to the product's calculated price.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{% set price = services.price.create({\n    'default': { 'gross': 1.5, 'net': 1.5}\n}) %}\n\n{% do product.calculatedPrice.plus(price) %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Routing in framework.yaml for Shopware\nDESCRIPTION: This YAML snippet demonstrates how to configure message routing in the framework.yaml file. It shows how to define transports and route specific message classes to different transports, including routing to multiple transports and using a fallback route.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    messenger:\n      transports:\n        async: \"%env(MESSENGER_TRANSPORT_DSN)%\"\n        another_transport: \"%env(MESSENGER_TRANSPORT_ANOTHER_DSN)%\"\n      routing: \n        'Swag\\BasicExample\\MessageQueue\\Message\\SmsNotification': another_transport\n        'Swag\\BasicExample\\MessageQueue\\Message\\AnotherExampleNotification': [async, another_transport]\n        '*': async\n```\n\n----------------------------------------\n\nTITLE: Using StaticEntityRepository for Basic Repository Mocking\nDESCRIPTION: Demonstrates the core class structure and how to use the new StaticEntityRepository to easily mock repository results in tests. The example shows a simple test case with entity collections.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-01-mocking-repositories.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass SomeCoreClass\n{\n    public function __construct(private EntityRepository $repository) {}\n    \n    public function foo() \n    {\n        $criteria = new Criteria();\n        \n        $result = $this->repository->search($criteria, $context);\n        \n        // ...\n    }\n}\n\nclass SomeCoreClassTest extends TestCase\n{\n    public function testFoo() \n    {\n        $repository = new StaticEntityRepository([\n            new UnitCollection([\n                new UnitEntity(),\n                new UnitEntity(),\n            ])\n        ]);\n        \n        $class = new SomeCoreClass($repository);\n        \n        $class->foo();\n        \n        // some assertions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Storefront Template for Dailymotion CMS Element\nDESCRIPTION: Twig template for rendering the Dailymotion element in the Storefront. Sets up an iframe with proper responsive styling using the configured video ID from the element configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n// platform/src/Storefront/Resources/views/storefront/element/cms-element-dailymotion.html.twig\n{% block element_dailymotion %}\n    <div class=\"cms-element-dailymotion\" style=\"height: 100%; width: 100%\">\n\n        {% block element_dailymotion_image_inner %}\n            <div class=\"cms-el-dailymotion\">\n                <div style=\"position:relative; padding-bottom:56.25%; height:0; overflow:hidden;\">\n                    <iframe style=\"width:100%; height:100%; position:absolute; left:0px; top:0px; overflow:hidden\"\n                            src=\"https://www.dailymotion.com/embed/video//{{ element.config.dailyUrl.value }}\"\n                            frameborder=\"0\"\n                            type=\"text/html\"\n                            width=\"100%\"\n                            height=\"100%\">\n                    </iframe>\n                </div>\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Handling Module Action in Symfony Controller\nDESCRIPTION: Symfony controller example showing how to handle a module action using attributes and the ModuleAction parameter.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-modules.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Module\\ModuleAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[AsController]\nclass ModuleController {\n    #[Route('/module')]\n    public function show(ModuleAction $module): Response\n    {\n        // handle payment\n        \n        return $this->render('....);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering All Dailymotion CMS Element Components\nDESCRIPTION: Main index file that imports and registers all components (main component, configuration, and preview) with the CMS service to make the element available in Shopware's CMS.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/index.js\nimport './component';\nimport './config';\nimport './preview';\n\nShopware.Service('cmsService').registerCmsElement({\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Vue Compatibility Mode for a Component in Shopware 6\nDESCRIPTION: This code snippet demonstrates how to disable Vue 3 compatibility mode for a specific component in Shopware 6 administration. It uses the Shopware.compatConfig option to disable all compatibility features when the DISABLE_VUE_COMPAT feature flag is activated.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-03-11-disable-vue-compat-mode-per-component-level.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('your-component', {\n    compatConfig: Shopware.compatConfig,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Equals Filter in Shopware\nDESCRIPTION: Demonstrates how to use the Equals filter to perform exact value matching. Creates a criteria object to filter where stock equals 10.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(new EqualsFilter('stock', 10));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"filter\": [\n        { \n            \"type\": \"equals\", \n            \"field\": \"stock\", \n            \"value\": 10\n        }    \n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Prepared Payment in Shopware 6 (JSON)\nDESCRIPTION: JSON request and response for validating a prepared payment. The request includes cart, request data, and sales channel context. The response contains a pre-order payment object with custom reference data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"cart\": {\n    //...\n  },\n  \"requestData\": {\n    //...\n  },\n  \"salesChannelContext\": {\n    //...\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preOrderPayment\": {\n    \"myCustomReference\": \"1234567890\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespaced Vuex Store in JavaScript\nDESCRIPTION: Defines a namespaced Vuex store with a 'content' state and a setter mutation. This store structure is required for integration with Shopware 6 Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-vuex-state.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    namespaced: true,\n\n    state() {\n        return {\n            // the state we want to keep track of\n            content: ''\n        };\n    },\n\n    mutations: {\n        // a mutation to change the state\n        setContent(state, content) {\n            state.content = content;\n        },\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Float Custom Field in Shopware\nDESCRIPTION: This XML snippet shows how to configure a float custom field in Shopware. It demonstrates setting properties like placeholder, min, max, and step size for the field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<float name=\"swag_test_float_field\">\n    <label>Test float field</label>\n    <label lang=\"de-DE\">Test-Kommazahlenfeld</label>\n    <help-text>This is an float field.</help-text>\n    <position>2</position>\n    <placeholder>Enter an float...</placeholder>\n    <min>0.5</min>\n    <max>1.6</max>\n    <steps>0.2</steps>\n</float>\n```\n\n----------------------------------------\n\nTITLE: Importing Template and Styles in Shopware 6 Component JavaScript\nDESCRIPTION: This JavaScript code imports the component's template and SCSS file. It then registers the component with Shopware, including the imported template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/add-custom-styles.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './sw-hello-world.html.twig';\n\n// Import for your custom styles\nimport './sw-hello-world.scss';\n\nShopware.Component.register('sw-sw-hello-world', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Transitioning Order Delivery State in Shopware 6\nDESCRIPTION: Example showing how to set an order delivery state to 'shipped' using the ship transition. Uses OrderDeliveryDefinition and requires delivery ID.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$this->stateMachineRegistry->transition(new Transition(\n    OrderDeliveryDefinition::ENTITY_NAME,\n    '<Order delivery ID here>',\n    'ship',\n    'stateId'\n), $context);\n```\n\n----------------------------------------\n\nTITLE: Registering the Route Service in Symfony XML Configuration\nDESCRIPTION: XML configuration for registering the Store API route service in the Symfony Dependency Injection Container with necessary dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRoute\" >\n            <argument type=\"service\" id=\"swag_example.repository\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Change Listener with Changeset in PHP\nDESCRIPTION: Extended implementation that includes changeset generation using PreWriteValidationEvent. Handles both the pre-write validation and the actual order written event to capture detailed changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/listen-to-order-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Order\\OrderDefinition;\nuse Shopware\\Core\\Checkout\\Order\\OrderEvents;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenEvent;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Command\\ChangeSetAware;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ListenToOrderChanges implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            PreWriteValidationEvent::class => 'triggerChangeSet',\n            OrderEvents::ORDER_WRITTEN_EVENT => 'onOrderWritten',\n        ];\n    }\n\n    public function triggerChangeSet(PreWriteValidationEvent $event): void\n    {\n        if ($event->getContext()->getVersionId() !== Defaults::LIVE_VERSION) {\n            return;\n        }\n\n        foreach ($event->getCommands() as $command) {\n            if (!$command instanceof ChangeSetAware) {\n                continue;\n            }\n\n            if ($command->getDefinition()->getEntityName() !== OrderDefinition::ENTITY_NAME) {\n                continue;\n            }\n\n            $command->requestChangeSet();\n        }\n\n    }\n\n    public function onOrderWritten(EntityWrittenEvent $event): void\n    {\n        if ($event->getContext()->getVersionId() !== Defaults::LIVE_VERSION) {\n            return;\n        }\n\n        foreach ($event->getWriteResults() as $result) {\n            $changeSet = $result->getChangeSet();\n\n            // Do stuff\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering B2B API Controller and Route Provider via XML DIC\nDESCRIPTION: This XML snippet demonstrates how to register the custom API controller (`MyApiController`) and route provider (`MyApiRouteProvider`) as services within Shopware's Dependency Injection Container. The route provider service is tagged with `b2b_common.rest_route_provider`, which signals the B2B framework to automatically register the defined routes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/rest-api.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"my.controller\" class=\"My\\Namespace\\MyApiController\"/>\n\n<service id=\"my.api_route_provider\" class=\"My\\Namespace\\DependencyInjection\\MyApiRouteProvider\">\n    <tag name=\"b2b_common.rest_route_provider\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Basic K6 Test Scenario for Shopware\nDESCRIPTION: A JavaScript example of a K6 test scenario that simulates a user browsing a Shopware store, registering an account, adding products to cart, and placing an order.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// example.js\nimport {\n  accountRegister,\n  addProductToCart,\n  placeOrder,\n  visitCartPage,\n  visitConfirmPage,\n  visitNavigationPage,\n  visitProductDetailPage,\n  visitSearchPage,\n  visitStorefront,\n} from \"./helpers/storefront.js\";\n\nexport default function () {\n  visitStorefront();\n  visitSearchPage();\n  visitNavigationPage();\n  accountRegister();\n  visitNavigationPage();\n  addProductToCart(visitProductDetailPage().id);\n  visitCartPage();\n  visitConfirmPage();\n  placeOrder();\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Mapped Error Property in Vue Template\nDESCRIPTION: This HTML snippet shows how to bind a mapped error property to a text field in a Vue template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<sw-field type=\"text\" v-model=\"product.name\" :error=\"productNameError\">\n```\n\n----------------------------------------\n\nTITLE: Managing Scripting Event Execution with Twig Environment in Shopware (PHP)\nDESCRIPTION: This PHP pseudo-code demonstrates the core structure of a ScriptEventRegistry responsible for registering, executing, and caching app scripts within the Shopware 6 platform. It initializes isolated Twig environments per script for secure execution, supports caching of compiled scripts, and handles error reporting and logging. Dependencies include Twig, a proper logger implementing LoggerInterface, ConfigurableFilesystemCache for caching, and custom exceptions, with scripts and context passed as arrays. Input is the hook/event name and context, output is modified context or error handling.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-10-21-app-scripting.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ScriptEventRegistry\n{\n    public const EVENT_PRODUCT_PAGE_LOADED = 'product-page-loaded';\n\n    private $scripts = [];\n    private LoggerInterface $logger;\n    \n    public function execute(string $hook, array $context)\n    {\n        $scripts = $this->scripts[$hook] ?? [];\n        foreach ($scripts as $script) {\n            $this->executeScript($script, $context);\n        }\n    }\n    \n    private function executeScript(array $script, array $context) \n    {\n        $twig = $this->initEnv($script);\n\n        try {\n            $twig->render($script['name'], $context);\n        } catch (\\Throwable $e) {\n            throw new ScriptExecutionFailed('Script execution failed', $e);\n            $this->logger->error('Execution of script failed', ['context' => $context, 'error' => $e]));\n        }\n    }\n    \n    private function initEnv(array $script) \n    {\n        $cache = new ConfigurableFilesystemCache($this->cachePath . '/twig/scripts');\n        $cache->setConfigHash($script['appName'] . $script['appVersion']);\n        \n        $twig = new Environment(\n            new ScriptLoader([$script['name'] => $script['source']]),\n            [\n                'cache' => $cache,\n            ]\n        );\n        \n        // Setup some custom twig functions\n        \n        return $twig;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Actions for Slack and Telegram in Shopware XML\nDESCRIPTION: This XML snippet defines two flow actions for Shopware: sending a Slack message and sending a Telegram message. It includes metadata, headers, parameters, and configuration for input fields for each action.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/flow-action-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<flow-actions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Flow/Schema/flow-1.0.xsd\">\n    <flow-action>\n        <meta>\n            <name>slack</name>\n            <label>Send slack message</label>\n            <label lang=\"de-DE\">Slack-Nachricht senden</label>\n            <headline>Headline for send slack message</headline>\n            <headline lang=\"de-DE\">Überschrift für das Senden einer Slack-Nachricht</headline>\n            <description>Slack send message description</description>\n            <description lang=\"de-DE\">Beschreibung der Slack-Sendenachricht</description>\n            <url>https://hooks.slack.com/services/{id}</url>\n            <sw-icon>default-communication-speech-bubbles</sw-icon>\n            <icon>slack.png</icon>\n            <requirements>orderAware</requirements>\n            <requirements>customerAware</requirements>\n        </meta>\n        <headers>\n            <parameter type=\"string\" name=\"content-type\" value=\"application/json\"/>\n        </headers>\n        <parameters>\n            <parameter type=\"string\" name=\"text\" value=\"{{ subject }} \\n {{ message }} \\n Order Number: {{ order.orderNumber }}\"/>\n        </parameters>\n        <config>\n            <input-field type=\"text\">\n                <name>subject</name>\n                <label>Subject</label>\n                <label lang=\"de-DE\">Gegenstand</label>\n                <place-holder>Placeholder</place-holder>\n                <place-holder lang=\"de-DE\">Platzhalter</place-holder>\n                <required>true</required>\n                <helpText>Help Text</helpText>\n                <helpText lang=\"de-DE\">Hilfstext</helpText>\n            </input-field>\n            <input-field type=\"textarea\">\n                <name>message</name>\n                <label>Message</label>\n                <label lang=\"de-DE\">Nachricht</label>\n                <place-holder>Placeholder</place-holder>\n                <place-holder lang=\"de-DE\">Platzhalter</place-holder>\n                <required>true</required>\n                <helpText>Help Text</helpText>\n                <helpText lang=\"de-DE\">Hilfstext</helpText>\n            </input-field>\n        </config>\n    </flow-action>\n    <flow-action>\n        <meta>\n            <name>telegram</name>\n            <label>Send telegram message</label>\n            <label lang=\"de-DE\">Telegrammnachricht senden</label>\n            <url>https://api.telegram.org/{id}</url>\n            <sw-icon>default-communication-speech-bubbles</sw-icon>\n            <icon>telegram.png</icon>\n            <requirements>orderAware</requirements>\n            <requirements>customerAware</requirements>\n        </meta>\n        <headers>\n            <parameter type=\"string\" name=\"content-type\" value=\"application/json\"/>\n        </headers>\n        <parameters>\n            <parameter type=\"string\" name=\"chat_id\" value=\"{{ chatId }}\"/>\n            <parameter type=\"string\" name=\"text\" value=\"{{ content }}\"/>\n        </parameters>\n        <config>\n            <input-field type=\"text\">\n                <name>chatId</name>\n                <label>Chat Room</label>\n                <label lang=\"de-DE\">Chatroom</label>\n                <required>true</required>\n                <defaultValue>Hello</defaultValue>\n                <helpText>This is the chat room id, you can get the id via telegram api</helpText>\n                <helpText lang=\"de-DE\">Dies ist die Chatroom-ID, Sie können die ID über die Telegramm-API abrufen</helpText>\n            </input-field>\n            <input-field type=\"text\">\n                <name>subject</name>\n                <label>Subject</label>\n                <label lang=\"de-DE\">Thema</label>\n                <required>true</required>\n            </input-field>\n            <input-field type=\"textarea\">\n                <name>content</name>\n                <label>Content</label>\n                <label lang=\"de-DE\">Inhalt</label>\n            </input-field>\n        </config>\n    </flow-action>\n</flow-actions>\n```\n\n----------------------------------------\n\nTITLE: Adding a Relative Surcharge to the Cart in Twig\nDESCRIPTION: This snippet shows how to add a relative (percentage) surcharge to the cart, checking for existing surcharges to prevent duplicates.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.has('my-surcharge') %}\n    {% return %}\n{% endif %}\n\n{% do services.cart.surcharge('my-surcharge', 'percentage', -10, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Price using AvgAggregation in PHP\nDESCRIPTION: Demonstrates how to use AvgAggregation to calculate the average price of products. It creates a Criteria object, adds the aggregation, and retrieves the result.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new AvgAggregation('avg-price', 'price')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var AvgResult $aggregation */\n$aggregation = $result->getAggregations()->get('avg-price');\n\n$aggregation->getAvg();\n```\n\n----------------------------------------\n\nTITLE: Converting Vuex API Calls to Pinia in Shopware\nDESCRIPTION: Examples of how to transition from Vuex API methods to their equivalent Pinia implementation, covering store initialization, subscriptions, mutations, and actions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-17-replace-vuex-with-pinia.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Setup\nconst piniaStore = Shopware.Store.get('...');\n\n// From Vuex subscribe\nShopware.State.subscribe(...);\n// To Pinia $subscribe\nstore.$subscribe(...);\n\n// From Vuex commit\nShopware.State.commit(...);\n// To Pinia action call\nstore.someAction(...);\n\n// From Vuex dispatch\nShopware.State.dispatch(...);\n// To Pinia action call\nstore.someAsyncAction(...);\n```\n\n----------------------------------------\n\nTITLE: Payment Handler Using PHP SDK\nDESCRIPTION: Example implementation of a payment handler using the Shopware App PHP SDK.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\n\nfunction myController(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $payment = $contextResolver->assemblePaymentPay($serverRequest, $shop);\n    \n    // implement your logic here based on the information provided in $payment\n    \n    // check PaymentResponse class for all available payment states\n    return $signer->signResponse(PaymentResponse::paid(), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding a Template Block in Twig\nDESCRIPTION: This snippet demonstrates how to extend a Storefront template and override a specific block within it. It replaces the logo with a custom 'Hello world!' text by overriding the layout_header_logo_link block.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/customize-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/layout/header/logo.html.twig' %}\n\n{% block layout_header_logo_link %}\n    <h2>Hello world!</h2>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Connections for Redis\nDESCRIPTION: Configuration example for enabling persistent connections to Redis in high-load scenarios, which reduces connection overhead by maintaining connection pools.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/redis.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    redis:\n        connections:\n            ephemeral:\n                dsn: 'redis://host:port/dbindex?persistent=1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Twig Template for Shopware 6 Administration\nDESCRIPTION: This snippet demonstrates how to create a basic twig template for a Shopware 6 Administration component. It uses the sw-page component and includes a twig block for extensibility.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/writing-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% block swag_basic_example_page %}\n    <sw-page class=\"swag-example-list\">\n        <template #content>\n            <h2>Hello world!</h2>\n        </template>\n    </sw-page>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Max-Age for Custom Responses\nDESCRIPTION: Demonstrates how to set the maximum age for a cached response. This example sets the cache to expire after 120 seconds.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({ 'foo': 'bar' }) %}\n{% do response.cache.maxAge(120) %}\n\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Configuration Update Listener in JavaScript for Shopware\nDESCRIPTION: This code creates an event listener that responds when a user saves their cookie configuration preferences. It checks if a specific cookie ('cookie-key-1') was updated and determines its new active state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/reacting-to-cookie-consent-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/reacting-cookie/reacting-cookie.js\nimport { COOKIE_CONFIGURATION_UPDATE } from 'src/plugin/cookie/cookie-configuration.plugin';\n\ndocument.$emitter.subscribe(COOKIE_CONFIGURATION_UPDATE, eventCallback);\n\nfunction eventCallback(updatedCookies) {\n    if (typeof updatedCookies.detail['cookie-key-1'] !== 'undefined') {\n        // The cookie with the cookie attribute \"cookie-key-1\" either is set active or from active to inactive\n        let cookieActive = updatedCookies.detail['cookie-key-1'];\n    } else {\n        // The cookie with the cookie attribute \"cookie-key-1\" was not updated\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mail Template Migration in PHP\nDESCRIPTION: A complete migration class that adds a new mail template with translations for English and German languages. It demonstrates fetching template types, creating template entries, and managing translations using database operations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/mail/add-mail-template.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse DateTime;\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\nclass Migration1616418675AddMailTemplate extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1616418675;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $mailTemplateTypeId = $this->getMailTemplateTypeId($connection);\n\n        $this->createMailTemplate($connection, $mailTemplateTypeId);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n\n    private function getMailTemplateTypeId(Connection $connection): string\n    {\n        $sql = <<<SQL\n            SELECT id\n            FROM mail_template_type\n            WHERE technical_name = \"contact_form\"\n        SQL;\n\n        return Uuid::fromBytesToHex($connection->fetchOne($sql));\n    }\n\n    private function getLanguageIdByLocale(Connection $connection, string $locale): ?string\n    {\n        $sql = <<<SQL\n        SELECT `language`.`id`\n        FROM `language`\n        INNER JOIN `locale` ON `locale`.`id` = `language`.`locale_id`\n        WHERE `locale`.`code` = :code\n        SQL;\n\n        $languageId = $connection->executeQuery($sql, ['code' => $locale])->fetchOne();\n\n        if (empty($languageId)) {\n            return null;\n        }\n\n        return $languageId;\n    }\n\n    private function createMailTemplate(Connection $connection, string $mailTemplateTypeId): void\n    {\n        $mailTemplateId = Uuid::randomHex();\n\n        $enGbLangId = $this->getLanguageIdByLocale($connection, 'en-GB');\n        $deDeLangId = $this->getLanguageIdByLocale($connection, 'de-DE');\n\n        $connection->executeStatement(\"INSERT IGNORE INTO `mail_template`\n            (id, mail_template_type_id, system_default, created_at)\n        VALUES\n            (:id, :mailTemplateTypeId, :systemDefault, :createdAt)\n        \",[...]); \n\n        if (!empty($enGbLangId)) {\n            $connection->executeStatement(\"INSERT IGNORE INTO `mail_template_translation`\n                (mail_template_id, language_id, sender_name, subject, description, content_html, content_plain, created_at)\n            VALUES\n                (:mailTemplateId, :languageId, :senderName, :subject, :description, :contentHtml, :contentPlain, :createdAt)\n            \",[...]);\n        }\n\n        if (!empty($deDeLangId)) {            \n            $connection->executeStatement(\"INSERT IGNORE INTO `mail_template_translation`\n                (mail_template_id, language_id, sender_name, subject, description, content_html, content_plain, created_at)\n            VALUES\n                (:mailTemplateId, :languageId, :senderName, :subject, :description, :contentHtml, :contentPlain, :createdAt)\n            \",[...]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Condition Configuration in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to implement the `getConfig` method within a rule condition class. It returns a `RuleConfig` object configured with various field types (string operators, entity select, custom select, number, boolean, date/time) and their specific options, enabling the use of the generic administration component for this rule condition.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-05-23-rule-condition-field-abstraction.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getConfig(): RuleConfig\n{\n    return (new RuleConfig())\n        ->operatorSet(RuleConfig::OPERATOR_SET_STRING, false, true)\n        ->entitySelectField('customerGroupIds', CustomerGroupDefinition::ENTITY_NAME, true)\n        ->selectField('customSelect', ['foo', 'bar', 'baz'])\n        ->numberField('amount', ['unit' => RuleConfig::UNIT_DIMENSION])\n        ->booleanField('active')\n        ->dateTimeField('creationDate');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ExampleFilesystemService in Shopware's Dependency Injection Container\nDESCRIPTION: This XML configuration defines the ExampleFilesystemService as a service in Shopware's dependency injection container. It injects the plugin's public and private filesystem services as arguments to the service constructor.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/filesystem/filesystem.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ExampleFilesystemService\">\n            <argument type=\"service\" id=\"swag_basic_example.filesystem.public\"/>\n            <argument type=\"service\" id=\"swag_basic_example.filesystem.private\"/>\n            <!--\n            There are also predefined file system services\n            <argument type=\"service\" id=\"shopware.filesystem.private\"/>\n            <argument type=\"service\" id=\"shopware.filesystem.public\"/>\n            -->\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating composer.json for Shopware 6 Plugin\nDESCRIPTION: The composer.json file required for a Shopware 6 plugin. Contains metadata about the plugin like name, description, version, dependencies, autoloading configuration, and localized labels.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-base-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/composer.json\n{\n    \"name\": \"swag/basic-example\",\n    \"description\": \"Description for the plugin SwagBasicExample\",\n    \"version\": \"1.0.0\",\n    \"type\": \"shopware-platform-plugin\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Shopware\"\n        }\n    ],\n    \"require\": {\n        \"shopware/core\": \"~6.6.0\"\n    },\n    \"extra\": {\n        \"shopware-plugin-class\": \"Swag\\\\BasicExample\\\\SwagBasicExample\",\n        \"label\": {\n            \"de-DE\": \"Der angezeigte lesbare Name für das Plugin\",\n            \"en-GB\": \"The displayed readable name for the plugin\"\n        },\n        \"description\": {\n            \"de-DE\": \"Beschreibung in der Administration für das Plugin\",\n            \"en-GB\": \"Description in the Administration for this plugin\"\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Swag\\\\BasicExample\\\\\": \"src/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Low Priority Message Interface\nDESCRIPTION: Shows implementation of a low priority message class using LowPriorityMessageInterface for messages that don't require immediate processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-message-to-queue.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Your\\Custom;\n\nuse Shopware\\Core\\Framework\\MessageQueue\\LowPriorityMessageInterface;\n\nclass LowPriorityMessage implements LowPriorityMessageInterface\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI in DDEV environment\nDESCRIPTION: Dockerfile configuration to add Shopware CLI to a DDEV web container during build.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_12\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# .ddev/web-build/Dockerfile.shopware-cli\nCOPY --from=shopware/shopware-cli:bin /shopware-cli /usr/local/bin/shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Repository Structure for Entity Assignments in Shopware B2B Suite\nDESCRIPTION: This code defines a repository class for handling role-contact assignments in the Shopware B2B Suite. It shows the typical methods required for working with M:N assignments: removing assignments, creating new assignments, and validating if entities belong to the same debtor.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/assignment-service.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\RoleContact\\Framework;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\B2B\\Common\\Repository\\DbalHelper;\n\nclass RoleContactRepository\n{\n    public function removeRoleContactAssignment(int $roleId, int $contactId)\n    {\n        [...]\n    }\n\n    public function assignRoleContact(int $roleId, int $contactId)\n    {\n        [...]\n    }\n\n    public function isMatchingDebtorForBothEntities(int $roleId, int $contactId): bool\n    {\n        [...]\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Entity Properties to Blacklist in Shopware Administration\nDESCRIPTION: This snippet shows how to add an entity property to the blacklist in the Shopware Administration. It overrides the 'sw-product-stream-field-select' component to add 'breadcrumb' to the category entity blacklist.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/modify-blacklist-for-dynamic-product-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Component } = Shopware;\n\nComponent.override('sw-product-stream-field-select', {\n    computed: {\n        options() {\n            this.conditionDataProviderService.addToEntityBlacklist('category', ['breadcrumb']);\n            return this.$super('options');\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring StockStorageDecorator Service in XML\nDESCRIPTION: This XML configuration defines the StockStorageDecorator service, decorating the Shopware\\Core\\Content\\Product\\Stock\\StockStorage service to use the custom stock loading implementation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/loading-stock-information-from-different-source.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\Example\\Service\\StockStorageDecorator\" decorates=\"Shopware\\Core\\Content\\Product\\Stock\\StockStorage\">\n            <argument type=\"service\" id=\"Swag\\Example\\Service\\StockStorageDecorator.inner\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Privilege-based Element Visibility in Templates\nDESCRIPTION: Examples of using ACL checks in HTML templates for conditional rendering and tooltips.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button v-if=\"acl.can('review.editor')\">\n</button>\n\n<button @click=\"saveProduct\"\n        :disabled=\"!acl.can('review.editor')\"\n        v-tooltip=\"{\n            message: $tc('sw-privileges.tooltip.warning'),\n            disabled: acl.can('review.editor'),\n            showOnDisabledElements: true\n        }\"\n></button>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomerStorer for Flow Builder in PHP\nDESCRIPTION: This code snippet shows the implementation of a CustomerStorer class, which is responsible for storing and restoring customer data in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerStorer extends FlowStorer\n{\n\tpublic function store(FlowEventAware $event, array $stored): array\n\t{\n    \t\tif (!$event instanceof CustomerAware || isset($stored['customerId'])) {\n        \t\treturn $stored;\n    \t\t}\n\n    \t\t$stored['customerId'] = $event->getCustomerId();\n\n    \t\treturn $stored;\n\t}\n\n\tpublic function restore(StorableFlow $storable): void\n\t{\n    \t\tif (!$storable->hasStore('customerId')) {\n        \t\treturn;\n    \t\t}\n\n   \t\t$storable->setData('customer', $this->getCustomer($storable->getStore('customerId')));\n\t}\n\n\tprivate function getCustomer(string $customerId): Customer\n\t{\n\t\t// load customer via $customerId\n\t\t\n\t\treturn $customer;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Hooks in Shopware App Scripts\nDESCRIPTION: Demonstrates how to implement interface hooks with multiple functions in Shopware App Scripts using Twig blocks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% block cache_key %}\n    // provide a cacheKey for the incoming request\n{% endblock %}\n\n{% block response %}\n    // produce the response for the request\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Shopware 6 Store API Route Scope using PHP Attributes\nDESCRIPTION: This PHP attribute is applied to a controller class or method to designate it as part of the Shopware 6 Store API. The `defaults: ['_routeScope' => ['store-api']]` argument ensures the route is specifically bound to the 'store-api' scope, making it accessible through the Store API endpoints. This attribute is required for all Store API routes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/store-api.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#[Route(defaults: ['_routeScope' => ['store-api']])]\n```\n\n----------------------------------------\n\nTITLE: Loading Product Page Data with Twig App Script\nDESCRIPTION: Example script showing how to access and extend the page object with additional data in a product page context\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/data-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{# @var page \\Shopware\\Storefront\\Page\\Product\\ProductPage #}\n\n{# the page object if you access to all the data, e.g., the current product #}\n{% do page.product ... %}\n\n{% set myAdditionalData = {\n    'example': 'just an example'\n} %}\n\n{# it also lets you add data to it, that you can later use in your Storefront templates #}\n{% do page.addArrayExtension('swagMyAdditionalData', myAdditionalData) %}\n```\n\n----------------------------------------\n\nTITLE: Date Condition Script in Twig\nDESCRIPTION: Twig script for the date condition that checks if the current date is the second Wednesday of the month.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/rule-builder/add-custom-rule-conditions.md#2025-04-22_snippet_5\n\nLANGUAGE: Twig\nCODE:\n```\n{% return compare('=', scope.getCurrentTime()|date_modify('first day of this month')|date_modify('second wednesday of this month')|date('Y-m-d'), scope.getCurrentTime()|date('Y-m-d')) %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Shopware Services\nDESCRIPTION: Docker compose configuration defining core Shopware services including database, web server, worker processes, and scheduler. Includes volume mounts for persistent storage and environment configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nx-environment: &shopware\n  image: local\n  build:\n    context: .\n  environment:\n    DATABASE_URL: 'mysql://shopware:shopware@database/shopware'\n    APP_URL: 'http://localhost:8000'\n  volumes:\n    - files:/var/www/html/files\n    - theme:/var/www/html/public/theme\n    - media:/var/www/html/public/media\n    - thumbnail:/var/www/html/public/thumbnail\n    - sitemap:/var/www/html/public/sitemap\n\nservices:\n    database:\n        image: mariadb:11.4\n\n    init:\n        <<: *shopware\n        entrypoint: /setup\n        depends_on:\n            db:\n                condition: service_started\n            init-perm:\n                condition: service_completed_successfully\n    web:\n        <<: *shopware\n        depends_on:\n            init:\n                condition: service_completed_successfully\n        ports:\n            - 8000:8000\n\n    worker:\n        <<: *shopware\n        depends_on:\n            init:\n                condition: service_completed_successfully\n        entrypoint: [ \"php\", \"bin/console\", \"messenger:consume\", \"async\", \"low_priority\", \"--time-limit=300\", \"--memory-limit=512M\" ]\n        deploy:\n            replicas: 3\n\n    scheduler:\n        <<: *shopware\n        depends_on:\n            init:\n                condition: service_completed_successfully\n        entrypoint: [ \"php\", \"bin/console\", \"scheduled-task:run\" ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Catchable Domain Exceptions and Factory Methods - Shopware - PHP\nDESCRIPTION: This PHP snippet demonstrates defining catchable, domain-specific exceptions by extending a base domain exception class, and placing them in nested namespaces to clarify intent. It shows how to use factory methods to instantiate specific exceptions such as ProductNotFoundException for fine-grained error handling. The example includes both the definition and catching/throwing patterns. Prerequisites are the ShopwareHttpException and Symfony Response dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-24-domain-exceptions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Shopware\\Core\\Framework\\ShopwareHttpException;\n\n// src/Core/Content/Cms/ProductException.php\nnamespace Shopware\\Core\\Content\\Product {\n\n    class ProductException extends ShopwareHttpException\n    {\n        public static function notFound(?\\Throwable $e = null): void\n        {\n            return new ProductNotFoundException(Response::HTTP_NOT_FOUND, self::NOT_FOUND_CODE, 'Product page not found', [], $e);\n        }\n    }\n}\n\n// src/Core/Content/Product/Exception/NotFoundException.php\nnamespace Shopware\\Core\\Content\\Product\\Exception {\n    class ProductNotFoundException extends ProductException { }\n}\n\ntry {\n    throw ProductException::notFound();\n} catch (NotFoundException $e) {\n    throw $e;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopware App Webhook Listener in PHP\nDESCRIPTION: Creates a Symfony event listener to handle the product.written webhook, including client creation and payload inspection.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[AsEventListener(event: 'webhook.product.written')]\nclass ProductWrittenWebhookListener\n{\n    public function __construct(private readonly ClientFactory $clientFactory, private readonly LoggerInterface $logger)\n    {\n    }\n\n    public function __invoke(WebhookAction $action): void\n    {\n        $client = $this->clientFactory->createSimpleClient($action->shop);\n\n        $updatedFields = $action->payload[0]['updatedFields'];\n        $id = $action->payload[0]['primaryKey'];\n\n        if (!in_array('description', $updatedFields)) {\n            return;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching ProductListingCriteriaEvent in PHP\nDESCRIPTION: Shows how a Criteria event is dispatched in a Shopware 6 route, allowing modification of the Criteria object used for product listing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n#[Route(path: '/store-api/product-listing/{categoryId}', name: 'store-api.product.listing', methods: ['POST'], defaults: ['_entity' => 'product'])]\npublic function load(string $categoryId, Request $request, SalesChannelContext $context, Criteria $criteria): ProductListingRouteResponse\n{\n    $this->eventDispatcher->dispatch(\n        new ProductListingCriteriaEvent($request, $criteria, $context)\n    );\n\n    return $this->getDecorated()->load($categoryId, $request, $context, $criteria);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Privilege Mapping with Dependencies in Shopware\nDESCRIPTION: Demonstrates how to add privilege mapping entry with dependencies from other privileges using the privileges service. This allows reusing existing privilege sets from other modules.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: null,\n    key: 'product',\n    roles: {\n        viewer: {\n            privileges: [\n                'product.read',\n                Shopware.Service('privileges').getPrivileges('rule.viewer')\n            ],\n            dependencies: []\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Media Entities in Shopware App Scripts\nDESCRIPTION: Example script showing how to load media entities and add them to the page object in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n// Resources/scripts/product-page-loaded/add-custom-media.twig\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% set page = hook.page %}\n{# @var page \\Shopware\\Storefront\\Page\\Product\\ProductPage #}\n\n{% if page.product.customFields.myCustomMediaField is not defined %}\n    {% return %}\n{% endif %}\n\n{% set criteria = {\n    'ids': [ page.product.customFields.myCustomMediaField ]\n} %}\n\n{% set media = services.repository.search('media', criteria).first %}\n\n{% do page.addExtension('swagMyCustomMediaField', media) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExamplePageLoadedEvent Class in PHP\nDESCRIPTION: Creates a custom page loaded event class that extends PageLoadedEvent. The class takes ExamplePage, SalesChannelContext, and Request as constructor parameters and provides a getter method for the page instance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Page\\Example;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Page\\PageLoadedEvent;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ExamplePageLoadedEvent extends PageLoadedEvent\n{\n    protected ExamplePage $page;\n\n    public function __construct(ExamplePage $page, SalesChannelContext $salesChannelContext, Request $request)\n    {\n        $this->page = $page;\n        parent::__construct($salesChannelContext, $request);\n    }\n\n    public function getPage(): ExamplePage\n    {\n        return $this->page;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Constants for Administration UI\nDESCRIPTION: Creates a JavaScript constant file that defines the custom action name and group for display in the Administration UI.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>src/Resources/app/administration/src/constant/create-tag-action.constant.js\nexport const ACTION = Object.freeze({\n    CREATE_TAG: 'action.create.tag',\n});\n\nexport const GROUP = 'customer'\n\nexport default {\n    ACTION, GROUP\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Price Collection in Twig\nDESCRIPTION: Example of using the create() method to create a new PriceCollection based on an array of prices in Twig. This snippet shows how to create a new Price in the default currency.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_25\n\nLANGUAGE: twig\nCODE:\n```\n{% set price = services.cart.price.create({\n    'default': { 'gross': 19.99, 'net': 19.99}\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Registering Store API Route Service in XML\nDESCRIPTION: This XML configuration registers the ProductCountRoute service in the DI container and injects the product repository as a dependency, allowing the route to access product data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ProductCountRoute\" >\n            <argument type=\"service\" id=\"product.repository\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using @experimental Annotation in PHP Class\nDESCRIPTION: Example of how to use the @experimental annotation with the new required feature property in a PHP class. The annotation includes the stableVersion and feature properties, following the convention of using ALL_CAPS for feature names.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @experimental stableVersion:v6.6.0 feature:WISHLIST\n */\nclass testClass()\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: App PHP SDK Tax Provider Implementation\nDESCRIPTION: Example implementation using the Shopware App PHP SDK to handle tax calculations. Shows how to process requests and build responses for line items, deliveries, and cart-level taxes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/tax-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction taxController(RequestInterface $request): ResponseInterface {\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $taxInfo = $contextResolver->assembleTaxProvider($serverRequest, $shop);\n    \n    $builder = new TaxProviderResponseBuilder();\n\n    foreach ($taxInfo->cart->getLineItems() as $item) {\n        $taxRate = 50;\n        $price = $item->getPrice()->getTotalPrice() * $taxRate / 100;\n        $builder->addLineItemTax($item->getUniqueIdentifier(), new CalculatedTax(\n            tax: $price,\n            taxRate: $taxRate,\n            price: $item->getPrice()->getTotalPrice()\n        ));\n    }\n\n    foreach ($taxProviderContext->cart->getDeliveries() as $item) {\n        foreach ($item->getPositions() as $position) {\n            $builder->addDeliveryTax($position->getIdentifier(), new CalculatedTax(\n                tax: 10,\n                taxRate: 50,\n                price: 100\n            ));\n        }\n    }\n\n    $builder->addCartTax(new CalculatedTax(\n        tax: 20,\n        taxRate: 50,\n        price: 100\n    ));\n    \n    return $signer->signResponse($builder->build(), $shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Integration Test for Shopware 6 Plugin Classes\nDESCRIPTION: An example integration test that verifies all plugin classes can be instantiated, using the IntegrationTestBehaviour trait for database transactions and cache clearing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/php-unit.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Test;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\nuse Symfony\\Component\\Finder\\Finder;\n\nclass UsedClassesAvailableTest extends TestCase\n{\n    use IntegrationTestBehaviour;\n\n    public function testClassesAreInstantiable(): void\n    {\n        $namespace = str_replace('\\Test', '', __NAMESPACE__);\n\n        foreach ($this->getPluginClasses() as $class) {\n            $classRelativePath = str_replace(['.php', '/'], ['', '\\\\'], $class->getRelativePathname());\n\n            $this->getMockBuilder($namespace . '\\\\' . $classRelativePath)\n                ->disableOriginalConstructor()\n                ->getMock();\n        }\n\n        // Nothing broke so far, classes seem to be instantiable\n        $this->assertTrue(true);\n    }\n\n    private function getPluginClasses(): Finder\n    {\n        $finder = new Finder();\n        $finder->in(realpath(__DIR__ . '/../'));\n        $finder->exclude('Test');\n        return $finder->files()->name('*.php');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scroll Detection JavaScript Plugin for Shopware 6\nDESCRIPTION: Complete implementation of a custom JavaScript plugin that detects when a user scrolls to the bottom of the page and displays an alert.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/example-plugin/example-plugin.plugin.js\nconst { PluginBaseClass } = window;\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        window.addEventListener('scroll', this.onScroll.bind(this));\n    }\n\n    onScroll() {\n        if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight) {\n            alert('Seems like there\\'s nothing more to see here.');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Mail Sending with Message Queue in Shopware\nDESCRIPTION: Configuration to handle mail sending through the message queue instead of synchronously, which helps when remote SMTP servers are struggling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/framework.yaml\nframework:\n    mailer:\n        message_bus: 'messenger.default_bus'\n```\n\n----------------------------------------\n\nTITLE: Reading Plugin Configuration in Shopware 6 Event Subscriber\nDESCRIPTION: This code shows how to read plugin configuration values using the SystemConfigService in a subscriber. It demonstrates the correct naming pattern to access plugin-specific configuration values, using the format BundleName.config.configName.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/use-plugin-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Subscriber/MySubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\n...\n\nclass MySubscriber implements EventSubscriberInterface\n{\n    ...\n    public function onProductsLoaded(EntityLoadedEvent $event): void\n    {\n        $exampleConfig = $this->systemConfigService->get('SwagBasicExample.config.example', $salesChannelId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Endpoint Action Button in Shopware 6 Manifest\nDESCRIPTION: This XML snippet demonstrates how to configure an action button in the app's manifest.xml file to use a custom endpoint as its target URL. It sets up a button for the product entity in the list view.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        ...\n    </meta>\n    <admin>\n      <action-button action=\"test-button\" entity=\"product\" view=\"list\" url=\"/api/script/action-button\">\n        <label>test-api-endpoint</label>\n      </action-button>\n    </admin>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Registering Cached Route Service in Symfony using XML\nDESCRIPTION: XML service definition that registers the CachedExampleRoute class as a decorator for the original ExampleRoute with a low decoration priority to ensure it's applied last in the decoration chain.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-caching-for-store-api-route.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n\n<?xml version=\"1.0\" ?> \n\n<container xmlns=\"http://symfony.com/schema/dic/services\" \n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    \n    <services> \n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\CachedExampleRoute\" decorates=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRoute\" decoration-priority=\"-1000\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\CachedExampleRoute.inner\"/>\n            <argument type=\"service\" id=\"cache.object\"/>\n            <argument type=\"service\" id=\"Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator\"/>\n            <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTracer\"/>\n            <argument type=\"service\" id=\"logger\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Injecting SystemConfigService into Subscriber in Shopware 6\nDESCRIPTION: This code demonstrates how to inject the SystemConfigService into a subscriber class using constructor injection. It adds the service as a dependency to access plugin configuration values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/use-plugin-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Subscriber/MySubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\n...\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\n\nclass MySubscriber implements EventSubscriberInterface\n{\n    private SystemConfigService $systemConfigService;\n\n    public function __construct(SystemConfigService $systemConfigService)\n    {\n        $this->systemConfigService = $systemConfigService;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Hot-Proxy for Live Reload\nDESCRIPTION: Commands to start the hot-proxy server which provides live reload functionality for theme development. Two options are provided: one for the template setup and one for the platform-only contribution setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-css-js-to-theme.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/watch-storefront.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run watch:storefront\n```\n\n----------------------------------------\n\nTITLE: Opening a New Tab Response with HTTP\nDESCRIPTION: HTTP response example for opening a new browser tab after an action button is clicked. The response includes the redirect URL in the payload.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nContent-Type: application/json\n\n{\n  \"actionType\": \"openNewTab\",\n  \"payload\": {\n    \"redirectUrl\": \"http://google.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Line Item Factory Handler in Services XML\nDESCRIPTION: XML configuration to register a custom line item handler in the Shopware DI container using the shopware.cart.line_item.factory tag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-items.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ExampleHandler\">\n            <tag name=\"shopware.cart.line_item.factory\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Role Repository in PHP for B2B Suite\nDESCRIPTION: This code defines a RoleRepository class that handles storage and retrieval of Role entities. It includes methods for fetching, adding, updating, and removing roles.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/crud-service.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Role\\Framework;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\B2B\\Acl\\Framework\\AclReadHelper;\nuse Shopware\\B2B\\Common\\Controller\\GridRepository;\nuse Shopware\\B2B\\Common\\IdValue;\nuse Shopware\\B2B\\Common\\Repository\\CanNotInsertExistingRecordException;\nuse Shopware\\B2B\\Common\\Repository\\CanNotRemoveExistingRecordException;\nuse Shopware\\B2B\\Common\\Repository\\CanNotUpdateExistingRecordException;\n\nclass RoleRepository\n{\n    private Connection $connection;\n\n    public function __construct(Connection $connection)\n    {\n        $this->connection = $connection;\n    }\n\n    /**\n     * @throws NotFoundException\n     */\n    public function fetchOneById(int $id): CrudEntity\n    {\n        [...]\n    }\n\n    /**\n     * @throws CanNotInsertExistingRecordException\n     */\n    public function addRole(RoleEntity $role): RoleEntity\n    {\n        [...]\n    }\n\n    /**\n     * @throws CanNotUpdateExistingRecordException\n     */\n    public function updateRole(RoleEntity $role): RoleEntity\n    {\n        [...]\n    }\n\n    /**\n     * @throws CanNotRemoveExistingRecordException\n     */\n    public function removeRole(RoleEntity $roleEntity): RoleEntity\n    {\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API POST Request for Configuration\nDESCRIPTION: Example of POST request format for writing app configuration values through the API\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPOST /api/_action/system-config?salesChannelId=98432def39fc4624b33213a56b8c944d\\nContent-Type: application/json\\n\\n{\\n    \"DemoApp.config.field1\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Directory Structure for SCSS\nDESCRIPTION: The directory structure showing the location of the base.scss file which serves as the SCSS entry point for a Shopware 6 theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-css-js-to-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── composer.json\n└── src\n    ├── Resources\n    │   ├── app\n    │   │   └── storefront\n    │   │       └── src\n    │   │           └── scss\n    │   │               └── base.scss <-- SCSS entry\n    └── SwagBasicExampleTheme.php\n```\n\n----------------------------------------\n\nTITLE: Resolving Action Button Request with PHP SDK\nDESCRIPTION: PHP code example showing how to use the Shopware App SDK to resolve a shop and assemble an action button from an incoming server request.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// injected or build by yourself\n$shopResolver = new ShopResolver($repository);\n$contextResolver = new ContextResolver();\n\n$shop = $shopResolver->resolveShop($serverRequest);\n$actionButton = $contextResolver->assembleActionButton($serverRequest, $shop);\n```\n\n----------------------------------------\n\nTITLE: Validating Prepared Payment in Shopware 6 (Symfony Bundle)\nDESCRIPTION: Symfony controller method for handling prepared payment validation in Shopware 6. It uses the PaymentValidateAction and returns a PaymentResponse with custom reference data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Payment\\PaymentValidateAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[AsController]\nclass PaymentController {\n    #[Route('/payment/pay')]\n    public function handle(PaymentValidateAction $payment): ResponseInterface\n    {\n        // handle payment\n        \n        return PaymentResponse::validateSuccess(['myCustomReference' => '1234567890']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Custom PHP Extensions in Docker\nDESCRIPTION: Dockerfile commands to install additional PHP extensions using docker-php-extension-installer. Example shows installation of the Tideways extension.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/docker.md#2025-04-22_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nUSER root\nRUN install-php-extensions tideways\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Implementing Recurring Payment Handler in Shopware PHP\nDESCRIPTION: Implementation of RecurringPaymentHandlerInterface for handling subscription-based recurring payments. Includes transaction state management and error handling for recurring captures.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/payment/add-payment-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Payment\\PaymentException;\nuse Shopware\\Core\\Checkout\\Payment\\Exception\\RecurringPaymentProcessException;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\RecurringPaymentHandlerInterface;\nuse Shopware\\Core\\Checkout\\Payment\\Cart\\RecurringPaymentTransactionStruct;\nuse Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\n\nclass ExamplePayment implements RecurringPaymentHandlerInterface\n{\n    private OrderTransactionStateHandler $transactionStateHandler;\n\n    public function __construct(OrderTransactionStateHandler $transactionStateHandler)\n    {\n        $this->transactionStateHandler = $transactionStateHandler;\n    }\n\n    public function captureRecurring(RecurringPaymentTransactionStruct $transaction, Context $context): void\n    {\n        try {\n            // $this->callMyPsp();\n        } catch (\\Throwable $e) {\n            throw PaymentException::recurringInterrupted($transaction->getOrderTransaction()->getId(), 'Something went wrong', $e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Collection in Shopware 6\nDESCRIPTION: Implementation of an entity collection class for the ExampleEntity in Shopware 6. Entity collections in Shopware extend the EntityCollection base class and specify the expected entity class type. This example shows the proper class structure and type hints.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityCollection;\n\n/**\n * @extends EntityCollection<ExampleEntity>\n */\nclass ExampleEntityCollection extends EntityCollection\n{\n    protected function getExpectedClass(): string\n    {\n        return ExampleEntity::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Staging Mode in Shopware using Bash\nDESCRIPTION: Command to activate the staging mode in Shopware. This modifies the database for use in a staging environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/staging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console system:setup:staging\n```\n\n----------------------------------------\n\nTITLE: Implementing searchMedia in Twig for Product Detail Page\nDESCRIPTION: Example of using the searchMedia function in a Twig template to fetch a media object based on a custom field ID. This implementation extends the product detail page template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}\n\n{% block page_product_detail_media %}\n    {# simplify ID access #}\n    {% set sportsMediaId = page.product.translated.customFields.custom_sports_media_id %}\n\n    {# fetch media as batch - optimized for performance #}\n    {% set mediaCollection = searchMedia([sportsMediaId], context.context) %}\n\n    {# extract single media object #}\n    {% set sportsMedia = mediaCollection.get(sportsMediaId) %}\n\n    {{ dump (sportsMedia) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Methods in Shopware App Manifest\nDESCRIPTION: XML configuration for defining payment methods in the app manifest file, showing both synchronous and asynchronous payment setups.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<<< @/docs/snippets/config/app/payments.xml\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Cache in Shopware 6 Storefront Controller\nDESCRIPTION: This code snippet demonstrates how to enable HTTP caching for a custom controller route by setting the _httpCache attribute to true in the Route configuration. This allows Shopware to automatically cache responses and serve them for subsequent identical requests.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-caching-to-custom-controller.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Storefront/Controller/ExampleController.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n\n    #[Route(path: '/example', name: 'frontend.example.example', methods: ['GET'], defaults: ['_httpCache' => true])]\n    public function showExample(): Response\n    {\n        return $this->renderStorefront('@SwagBasicExample/storefront/page/example/index.html.twig', [\n            'example' => 'Hello world'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Custom Entities in Shopware Manifest\nDESCRIPTION: Demonstrates how to set permissions for core entities associated with custom entities in the Shopware app manifest file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <!-- ... -->\n    </meta>\n    <permissions>\n        <read>product</read>\n<!--    <read>custom_entity_blog</read>   < permissions for own entities are automatically set  -->\n    </permissions>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Enabling Composer Commands Execution During Plugin Installation in Shopware 6\nDESCRIPTION: This PHP code demonstrates how to override the executeComposerCommands method in a Shopware 6 plugin's base class to ensure Composer dependencies are installed when the plugin is installed. The method returns true to enable this functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-composer-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/SwagBasicExample.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample;\n\nuse Shopware\\Core\\Framework\\Plugin;\n\nclass SwagBasicExample extends Plugin\n{\n    public function executeComposerCommands(): bool\n    {\n        return true;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom System Check in Shopware 6 Service Configuration\nDESCRIPTION: XML service definition for registering the LocalDiskSpaceCheck as a system check service. It injects the necessary dependencies including filesystem type, root path, and warning threshold.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/system-check/add-custom-check.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n        <service id=\"%YourNameSpace%\\LocalDiskSpaceCheck\" >\n            <argument>%shopware.filesystem.public.type%</argument>\n            <argument>%shopware.filesystem.public.config.root%</argument>\n            <argument>%warning_threshold_in_mb%</argument>\n            <tag name=\"shopware.system_check\"/>\n        </service>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Reusable Scripts in Shopware App Scripts\nDESCRIPTION: Shows how to import and use a reusable Twig macro in a Shopware App Script.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n// Resources/scripts/cart/first-cart-script.twig\n{% import \"include/media-repository.twig\" as mediaRepository %}\n\n{% set mediaEntity = mediaRepository.getById(myMediaId) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Install and Post-Update Methods in Shopware\nDESCRIPTION: Methods executed after successful installation or update of a plugin. Used for operations that should occur after the main installation or update process is complete.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/plugin-lifecycle.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function postInstall(InstallContext $installContext): void\n{\n}\n\npublic function postUpdate(UpdateContext $updateContext): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Product Sorting through Event Subscription in Shopware\nDESCRIPTION: This PHP subscriber class adds a custom product sorting option at runtime by subscribing to the ProductListingCriteriaEvent. It creates a new ProductSortingEntity with custom configuration and adds it to the available sortings in the event criteria.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-sorting-product-listing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Subscriber/ExampleListingSubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Product\\Events\\ProductListingCriteriaEvent;\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingCollection;\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingEntity;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ExampleListingSubscriber implements EventSubscriberInterface\n{\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            // be sure to subscribe with high priority to add you sorting before the default shopware logic applies\n            // otherwise storefront will throw a ProductSortingNotFoundException\n            ProductListingCriteriaEvent::class => ['addMyCustomSortingToStorefront', 500],\n        ];\n    }\n\n    public function addMyCustomSortingToStorefront(ProductListingCriteriaEvent $event): void\n    {\n        /** @var ProductSortingCollection $availableSortings */\n        $availableSortings = $event->getCriteria()->getExtension('sortings') ?? new ProductSortingCollection();\n\n        $myCustomSorting = new ProductSortingEntity();\n        $myCustomSorting->setId(Uuid::randomHex());\n        $myCustomSorting->setActive(true);\n        $myCustomSorting->setTranslated(['label' => 'My Custom Sorting at runtime']);\n        $myCustomSorting->setKey('my-custom-runtime-sort');\n        $myCustomSorting->setPriority(5);\n        $myCustomSorting->setFields([\n            [\n                'field' => 'product.name',\n                'order' => 'desc',\n                'priority' => 1,\n                'naturalSorting' => 0,\n            ],\n        ]);\n\n        $availableSortings->add($myCustomSorting);\n\n        $event->getCriteria()->addExtension('sortings', $availableSortings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Error Indicator in Vue Template\nDESCRIPTION: This HTML snippet demonstrates how to use the mapped page error in a Vue template to indicate if errors exist in a specific view or tab.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<sw-tabs\n    :hasError=\"swProductDetailBaseError\">\n</sw-tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Rewrite for Staging in Shopware using YAML\nDESCRIPTION: YAML configuration examples for domain rewriting in Shopware's staging mode, including direct match, prefix, and regex methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/staging.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# <shopware-root>/config/packages/staging.yaml\nshopware:\n    staging:\n        sales_channel:\n            domain_rewrite:\n                - type: equal\n                  match: https://my-live-store.com\n                  replace: https://my-staging-store.com\n                - # ... second rule\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# <shopware-root>/config/packages/staging.yaml\nshopware:\n    staging:\n        sales_channel:\n            domain_rewrite:\n                - type: prefix\n                  match: https://my-live-store.com\n                  replace: https://my-staging-store.com\n                - # ... second rule\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# <shopware-root>/config/packages/staging.yaml\nshopware:\n    staging:\n        sales_channel:\n            domain_rewrite:\n                - type: regex\n                  match: '/https?:\\/\\/(\\w+)\\.(\\w+)$/m'\n                  replace: 'http://$1-$2.local'\n                - # ... second rule\n```\n\n----------------------------------------\n\nTITLE: Converting Customer Data with Logging in Shopware\nDESCRIPTION: Example of implementing logging in a CustomerConverter class to handle missing required fields during data conversion. Uses LogEntry objects to track empty required fields.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nabstract class CustomerConverter extends ShopwareConverter\n{\n    /* ... */\n\n    public function convert(\n            array $data,\n            Context $context,\n            MigrationContextInterface $migrationContext\n        ): ConvertStruct\n    {\n        $this->generateChecksum($data);\n        $oldData = $data;\n        $this->runId = $migrationContext->getRunUuid();\n\n        $fields = $this->checkForEmptyRequiredDataFields($data, $this->requiredDataFieldKeys);\n\n        if (!empty($fields)) {\n            $this->loggingService->addLogEntry(new EmptyNecessaryFieldRunLog(\n                $this->runId,\n                DefaultEntities::CUSTOMER,\n                $data['id'],\n                implode(',', $fields)\n            ));\n\n            return new ConvertStruct(null, $oldData);\n        }\n\n        /* ... */\n    }\n\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Entry with Category Configuration\nDESCRIPTION: Enhanced menu entry configuration that includes an ID for proper rendering in the navigation hierarchy\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-menu-entry.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation: [{\n    id: 'swag-custommodule-list',\n    label: 'CustomModule',\n    color: '#ff3d58',\n    path: 'swag.custommodule.list',\n    icon: 'default-shopping-paper-bag-product',\n    parent: 'sw-catalogue',\n    position: 100\n}]\n```\n\n----------------------------------------\n\nTITLE: Registering MailService Decorator in services.xml\nDESCRIPTION: This XML configuration registers the AddDataToMails service as a decorator for the Shopware MailService in the service container. It uses the 'decorates' attribute to specify the service being decorated.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/mail/add-data-to-mails.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\AddDataToMails\" decorates=\"Shopware\\Core\\Content\\Mail\\Service\\MailService\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Service\\AddDataToMails.inner\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering the HTML Renderer Service in XML Configuration\nDESCRIPTION: Service registration for the HTML renderer using a document_type.renderer tag to enable the DocumentFileRendererRegistry to recognize and use this service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"...\\HtmlRenderer\">\n    <tag name=\"document_type.renderer\" key=\"html\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Options in Twig Templates for Shopware 6\nDESCRIPTION: Shows how to override plugin options from within Twig templates in Shopware 6. This example demonstrates setting custom text for the ExamplePlugin on product detail pages using data attributes and JSON-encoded options.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}\n\n{% set examplePluginOptions = {\n    text: \"Are you not interested in this product?\"\n} %}\n\n{% block page_product_detail_content %}\n    {{ parent() }}\n\n    <template data-example-plugin data-example-plugin-options='{{ examplePluginOptions|json_encode }}'></template>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Toggle Functionality in PHP\nDESCRIPTION: Method to toggle a feature flag's state, update the database storage, and dispatch events before and after the change. It includes validation to prevent toggling of major feature flags.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-11-29-toggle-feature-flag-on-demand.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass FeatureFlagRegistry\n{\n    private function enable(string $feature, bool $active): void\n    {\n        $registeredFlags = Feature::getRegisteredFeatures();\n        \n        if (!array_key_exists($feature, $registeredFlags)) {\n            return;\n        }\n        \n        if ($registeredFlags[$feature]['major'] === 'true') {\n            // cannot toggle major feature flags\n            return;\n        }\n        \n        $registeredFlags[$feature] = [\n            'active' => $active, // mark the flag as activated or deactivated\n            'static' => array_key_exists($feature, $this->staticFlags), // check if the flag is static\n            ...$registeredFlags[$feature],\n        ];\n                \n        $this->dispatcher->dispatch(new BeforeFeatureFlagToggleEvent($feature, $active));\n\n        $this->keyValueStorage->set(self::STORAGE_KEY, $registeredFlags);\n        Feature::toggle($feature, $active);\n\n        $this->dispatcher->dispatch(new FeatureFlagToggledEvent($feature, $active));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for JWT Token Flow Between Client, Shopware Backend, and App Server\nDESCRIPTION: This diagram illustrates the request cycle for client-side communication to App Server. It shows how a client requests a JWT token from Shopware Backend, receives the signed token, and then uses it in a request to the App Server.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-06-27-store-api-to-app-server.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Shopware Backend\n    participant App Server\n    Client->>Shopware Backend: GET /store-api/app-system/TestApp/generate-token\n    Shopware Backend->>Client: Responds with Signed JWT Token\n    Client->>App Server: Post /product-review/submit containing JWT in header\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Composer on Debian\nDESCRIPTION: Bash commands to install PHP 8.3 and its required extensions, along with Composer, on Debian. This setup meets the PHP requirements for Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install extrepo\nsudo extrepo enable sury\n\nsudo apt-get update\nsudo apt-get install -y php8.3-fpm php8.3-mysql php8.3-curl php8.3-gd php8.3-xml php8.3-zip php8.3-opcache php8.3-mbstring php8.3-intl php8.3-cli\n\nsudo wget https://getcomposer.org/download/latest-stable/composer.phar -O /usr/local/bin/composer\nsudo chmod +x /usr/local/bin/composer\n```\n\n----------------------------------------\n\nTITLE: Overwriting Prices with PriceCollection in Twig\nDESCRIPTION: Example of using the change() method to overwrite prices with a static defined collection in Twig. This snippet demonstrates how to set different prices for different quantity ranges.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n{% do product.calculatedPrices.change([\n    { to: 20, price: services.price.create({ 'default': { 'gross': 15, 'net': 15} }) },\n    { to: 30, price: services.price.create({ 'default': { 'gross': 10, 'net': 10} }) },\n    { to: null, price: services.price.create({ 'default': { 'gross': 5, 'net': 5} }) },\n]) %}\n```\n\n----------------------------------------\n\nTITLE: Adding Snippet Field in Shopware Plugin Configuration\nDESCRIPTION: Shows how to implement a snippet editing field using the sw-snippet-field component in the plugin configuration. This component is available from Shopware version 6.3.4.0 onwards.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<component name=\"sw-snippet-field\">\n    <name>snippetField</name>\n    <label>Description</label>\n    <snippet>myPlugin.test.snippet</snippet>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Fetching Key-Value Directly from Database - PHP\nDESCRIPTION: This PHP snippet demonstrates obtaining key-value pairs directly from a database using a specialized 'fetchKeyValue' method on the connection. It simplifies the process compared to fetching all rows and then mapping them. Requires a database connection object supporting 'fetchKeyValue' and a valid SQL query. This approach reduces the need for post-processing and is sensitive to changes if dependent code is mocked.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/unit-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$values = $this->connection->fetchKeyValue('SELECT first, second FROM foo ...');\n```\n\n----------------------------------------\n\nTITLE: Complete ProductSubscriber Implementation\nDESCRIPTION: Final implementation of the ProductSubscriber class with repository injection and full custom field resolution logic.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/fetching-data-from-entity-selection.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Product\\ProductEntity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\n\nclass ProductSubscriber implements EventSubscriberInterface\n{\n    private EntityRepository $productRepository;\n\n    public function __construct(EntityRepository $productRepository) \n    {\n        $this->productRepository = $productRepository;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductEvents::PRODUCT_LOADED_EVENT => 'onProductLoaded'\n        ];\n    }\n\n    public function onProductLoaded(EntityLoadedEvent $event): void\n    {\n        // extract all ids of our custom field\n        $ids = array_map(function (ProductEntity $entity) {\n            return $entity->getCustomFields()['custom_demo_test'] ?? null;\n        }, $event->getEntities());\n\n        // filter empty ids\n        $ids = array_filter($ids);\n\n        // load all products in one request instead of one request per product (big performance boost)\n        $products = $this->productRepository->search(new Criteria($ids), $event->getContext());\n\n        /** @var ProductEntity $entity */\n        foreach ($event->getEntities() as $entity) {\n            // check if the custom field is set\n            if (!$id = $entity->getCustomFields()['custom_demo_test'] ?? null) {\n                continue;\n            }\n\n            // add the product to the entity as entity extension\n            $entity->addExtension('my_custom_demo_product', $products->get($id));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Filter in Shopware\nDESCRIPTION: Shows how to use Range filter for numerical or date ranges. Filters items where stock is between 20 and 30.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(\n    new RangeFilter('stock', [\n        RangeFilter::GTE => 20,\n        RangeFilter::LTE => 30\n    ])\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": [\n        { \n            \"type\": \"range\", \n            \"field\": \"stock\", \n            \"parameters\": {\n                \"gte\": 20,      \n                \"lte\": 30\n            }\n        }    \n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Opcache Preload Configuration for Shopware\nDESCRIPTION: Advanced PHP configuration for enabling opcache preloading, which can provide an additional 2-5% performance improvement but requires PHP-FPM restart after cache clears or file changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nopcache.preload=/var/www/html/var/cache/opcache-preload.php\nopcache.preload_user=nginx\n```\n\n----------------------------------------\n\nTITLE: Fetching Audit Log Entries\nDESCRIPTION: PHP code example showing how to retrieve audit log entries using the audit log service. Demonstrates the use of search struct to fetch logs for a specific reference table and ID.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/audit-log.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$auditLogSearchStruct = new AuditLogSearchStruct();\n$auditLogs = $this->auditLogService->fetchList(OrderContextRepository::TABLE_NAME, 10, $auditLogSearchStruct);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Theme in Shopware 6 with Console Command\nDESCRIPTION: This command creates a new theme structure in the custom plugins directory. It generates all necessary files and directories for a Shopware 6 theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/create-a-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console theme:create SwagBasicExampleTheme\n\n# you should get an output like this:\n\nCreating theme structure under .../development/custom/plugins/SwagBasicExampleTheme\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Implementation\nDESCRIPTION: Basic example of implementing an icon using the sw_icon twig function with namespace configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-icons.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_icon 'done-outline-24px' style {\n    'namespace': 'TestPlugin'\n} %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stock Storage Service in Symfony XML\nDESCRIPTION: XML service configuration for registering the custom stock storage decorator in Symfony's dependency injection container. It decorates the core Shopware StockStorage service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/implementing-your-own-stock-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\Example\\Service\\StockStorageDecorator\" decorates=\"Shopware\\Core\\Content\\Product\\Stock\\StockStorage\">\n            <argument type=\"service\" id=\"Swag\\Example\\Service\\StockStorageDecorator.inner\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Public Directory Structure After Assets Installation\nDESCRIPTION: Shows how the asset is copied to the public/bundles directory after running the assets:install command, making it accessible for the storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# shopware-root/public/bundles\n.\n├── administration\n├── framework\n├── storefront\n└── swagbasicexample\n    └── your-image.png <-- Your asset is copied here\n```\n\n----------------------------------------\n\nTITLE: Injecting Product Repository Service\nDESCRIPTION: Updated XML configuration to inject the product repository into the ProductSubscriber service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/fetching-data-from-entity-selection.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\ProductSubscriber\">\n            <argument type=\"service\" id=\"product.repository\"/>\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Toggle in Shopware API Controller\nDESCRIPTION: Shows how to use the CustomerSpecificFeatureService to check if a customer is allowed to access a specific B2B feature in an API controller. This ensures proper access control for B2B functionalities.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Commercial\\B2B\\QuickOrder\\Domain\\CustomerSpecificFeature\\CustomerSpecificFeatureService;\n \nclass ApiController\n{\n    public function __construct(private readonly CustomerSpecificFeatureService $customerSpecificFeatureService)\n    {\n    }\n\n    #[Route(\n        path: '/your/path',\n        name: 'path.name',\n        defaults: ['_noStore' => false, '_loginRequired' => true],\n        methods: ['GET'],\n    )]\n    public function view(Request $request, SalesChannelContext $salesChannelContext): Response\n    {\n        if (!$this->customerB2BFeatureService->isAllowed($salesChannelContext->getCustomerId(), 'QUICK_ORDER')) {\n            throw CustomerSpecificFeatureException::notAllowed('QUICK_ORDER');\n        }\n\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Product Permissions\nDESCRIPTION: Example showing how to extend existing product permissions by adding new privileges and roles.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: null,\n    key: 'product',\n    roles: {\n        viewer: {\n            privileges: ['plugin:read']\n        },\n        editor: {\n            privileges: ['plugin:update']\n        },\n        newrole: {\n            privileges: ['plugin:write']\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Responses in PHP for Shopware App System\nDESCRIPTION: This PHP code snippet shows how to manually sign responses sent back to Shopware. It calculates a signature using the response body and app secret, then adds the signature to the response header.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-signature-verification.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\n\n/** @var ResponseInterface $response */\n$body = $response->getBody()->getContents();\n\n// reset the stream pointer, so the body can be read again\n$response->getBody()->rewind();\n\n// calculate the signature\n$signature = hash_hmac('sha256', $body, $appSecret);\n\n// add the signature to the response\n$response = $response->withHeader('shopware-shop-signature', $signature);\n```\n\n----------------------------------------\n\nTITLE: Registering Entity Indexer Service in XML Configuration\nDESCRIPTION: This XML service configuration registers the custom entity indexer with the Shopware container. It injects the IteratorFactory, customer repository, and database connection dependencies and tags the service as a Shopware entity indexer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-indexer.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n                <service id=\"Swag\\BasicExample\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ExampleIndexer\">\n                    <argument type=\"service\" id=\"Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory\"/>\n                    <argument type=\"service\" id=\"customer.repository\"/>\n                    <argument type=\"service\" id=\"Doctrine\\DBAL\\Connection\" />\n                    <tag name=\"shopware.entity_indexer\"/>\n                </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Payment Redirect Response Structure\nDESCRIPTION: JSON response format for redirecting customer to payment provider.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redirectUrl\": \"https://payment.app/customer/gotoPaymentProvider\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Virtual Host for Shopware\nDESCRIPTION: Apache virtual host configuration block that sets up a web server for Shopware. Defines server name, document root pointing to Shopware's public folder, directory permissions, and log file locations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/config-reference/server/apache.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<VirtualHost *:80>\n   ServerName \"HOST_NAME\"\n   DocumentRoot _SHOPWARE_LOCATION_/public\n\n   <Directory _SHOPWARE_LOCATION_>\n      Options Indexes FollowSymLinks MultiViews\n      AllowOverride All\n      Order allow,deny\n      allow from all\n   </Directory>\n\n   ErrorLog ${APACHE_LOG_DIR}/shopware.error.log\n   CustomLog ${APACHE_LOG_DIR}/shopware.access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Partial Data Loading with Association Fields in HTTP\nDESCRIPTION: HTTP request example showing how to load fields from associated entities, specifically requesting both the currency name and its associated sales channels' names.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/partial-data-loading.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/search/currency\nAuthorization: Bearer YOUR_ACCESS_TOKEN\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"fields\": [\n        \"name\",\n        \"salesChannels.name\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Shopware Controllers without Placeholders\nDESCRIPTION: Example of using translations in a Shopware controller without placeholders by using the trans method from StorefrontController.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->trans('header.example');\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Client with Mock Client - PHP\nDESCRIPTION: Demonstrates how to test the HTTP client by injecting a mock PSR18 client for testing purposes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/05-http-client.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$clientFactory = new Shopware\\App\\SDK\\HttpClient\\ClientFactory();\n$httpClient = $clientFactory->createClient($shop, $myMockClient);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Cypress Test Structure\nDESCRIPTION: Demonstrates the basic structure of Cypress tests using describe() and it() blocks to organize test cases. This pattern is used throughout Shopware's E2E tests.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Test: This is my test file', () => {\n    it('test something', () => {\n        // This is your first test\n    });\n    it('tests something else', () => {\n        // This is your second test\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Example Extension Entity in Shopware\nDESCRIPTION: This PHP class defines a custom entity for a one-to-one relationship with the product entity, including fields for id, product association, and a custom string.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/elasticsearch/add-product-entity-extension-to-elasticsearch.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Extension\\Content\\Product;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\FkField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\ApiAware;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\OneToOneAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\ReferenceVersionField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\StringField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\n\nclass OneToOneExampleExtensionDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'one_to_one_swag_example_extension';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    public function getEntityClass(): string\n    {\n        return Entity::class;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new ApiAware(), new Required(), new PrimaryKey()),\n            new FkField('product_id', 'productId', ProductDefinition::class),\n            (new ReferenceVersionField(ProductDefinition::class))->addFlags(new Required()),\n            (new StringField('custom_string', 'customString'))->addFlags(new ApiAware()),\n\n            new OneToOneAssociationField('product', 'product_id', 'id', ProductDefinition::class, false)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom_fields Column to Database Table in SQL\nDESCRIPTION: This SQL migration adds a custom_fields JSON column to the database table. This is necessary to store the custom field data for the entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `swag_example` (\n`id` BINARY(16) NOT NULL,\n`name` VARCHAR(255) COLLATE utf8mb4_unicode_ci,\n`description` VARCHAR(255) COLLATE utf8mb4_unicode_ci,\n`active` TINYINT(1) COLLATE utf8mb4_unicode_ci,\n\n`custom_fields` json DEFAULT NULL,\n\n`created_at` DATETIME(3) NOT NULL,\n`updated_at` DATETIME(3),\nPRIMARY KEY (`id`)\n)\nENGINE = InnoDB\nDEFAULT CHARSET = utf8mb4\nCOLLATE = utf8mb4_unicode_ci;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Rule Objects with Mermaid\nDESCRIPTION: This diagram illustrates the object structure of rules in Shopware 6, showing how a root OrRule contains child rules like LineItemsInCartCountRule and GoodsPriceRule with their respective properties.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/rules.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    root-OrRule .. lineItemCount - LineItemsInCartCountRule\n    root-OrRule .. cartPrice - GoodsPriceRule\n    class root-OrRule{\n        rules=[lineItemCount, cartPrice]\n    }\n    class lineItemCount - LineItemsInCartCountRule{\n      operator=\">=\"\n      count=\"40\"\n    }\n    class cartPrice - GoodsPriceRule{\n      operator=\">=\"\n      count=\"500\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing with ACL Rights in Shopware\nDESCRIPTION: An example showing how to set active ACL roles for testing components that require specific privileges. This approach uses the global.activeAclRoles variable to simulate having product editor permissions in the test environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('should render with ACL rights', async () => {\n    // set ACL privileges\n    global.activeAclRoles = ['product.editor'];\n\n    const wrapper = await createWrapper();\n    expect(wrapper.vm).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend JavaScript Plugin\nDESCRIPTION: JavaScript implementation for making requests to the custom route from the Storefront using the fetch API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PluginBaseClass } = window;\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    async requestCustomRoute() {\n        const response = await fetch('/example', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                limit: 10,\n                offset: 0,\n            }),\n        });\n        \n        if (!response.ok) {\n            throw new Error('Request failed');\n        }\n\n        const data = await response.json();\n\n        console.log(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Caching for Custom Responses\nDESCRIPTION: Shows how to disable caching for a specific response in a custom endpoint script. This prevents the response from being stored in the cache.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({ 'foo': 'bar' }) %}\n{% do response.cache.disable() %}\n\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Plugin Assets\nDESCRIPTION: Shows the required folder structure for adding custom assets in a Shopware plugin, with assets placed in the Resources/app/administration/static directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/using-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# PluginRoot\n.\n├── composer.json\n└── src\n    ├── Resources\n    │   ├── app\n    │       └── administration\n    │             └── static\n    │                   └── your-image.png <-- Asset file here\n    └── SwagBasicExample.php\n```\n\n----------------------------------------\n\nTITLE: Configuring SCSS Entry Points in theme.json\nDESCRIPTION: The theme.json file defines the main entry points for SCSS styling. It specifies the order in which SCSS files are loaded and compiled by the PHP SASS compiler.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-css-js-to-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n {\n   ...\n   \"style\": [\n     \"app/storefront/src/scss/overrides.scss\",\n     \"@Storefront\",\n     \"app/storefront/src/scss/base.scss\"\n   ],\n   ...\n }\n```\n\n----------------------------------------\n\nTITLE: Overriding Modal CSS Classes in JavaScript\nDESCRIPTION: Demonstrates how to override default CSS class names when instantiating PseudoModalUtil. Shows configuration for custom template, content, and title element selectors.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        // ...\n    }\n\n    openModal(content) {\n        // enable backdrop\n        const useBackrop = true;\n\n        // create a new modal instance\n        this.modal = new PseudoModalUtil(\n            content,\n            useBackrop,\n            '.custom-js-pseudo-modal-template',\n            '.custom-js-pseudo-modal-template-content-element',\n            '.custom-js-pseudo-modal-template-title-element'\n        );\n\n        // open the modal window and make it visible\n        this.modal.open();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entities for Custom Fields in Shopware\nDESCRIPTION: Illustrates how to configure a custom entity to be used with custom fields by adding the custom-fields-aware and label-property attributes in the XML definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<entities xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/CustomEntity/Xml/entity-1.0.xsd\">\n    <entity name=\"custom_entity_bundle\" custom-fields-aware=\"true\" label-property=\"name\">\n        <fields>\n            <string name=\"name\" required=\"true\" translatable=\"true\" store-api-aware=\"true\" />\n            <price name=\"discount\" required=\"true\" store-api-aware=\"true\"/>\n            <many-to-many name=\"products\" reference=\"product\" store-api-aware=\"true\" />\n        </fields>\n    </entity>\n</entities>\n```\n\n----------------------------------------\n\nTITLE: Linking Custom Module to Settings in Shopware 6 Administration\nDESCRIPTION: This snippet demonstrates how to link a custom module to the settings section of the Shopware 6 Administration. It shows the configuration of a 'settingsItem' within the module registration, including group assignment, icon selection, and route specification.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-module.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/swag-example/index.js\nimport './page/swag-plugin-list';\nimport './page/swag-plugin-detail';\nShopware.Module.register('swag-plugin', {\n    ...\n    settingsItem: [{\n        group: 'plugins',\n        icon: 'regular-rocket',\n        to: 'swag.plugin.list',\n        name: 'SwagExampleMenuItemGeneral', // optional, fallback is taken from module\n        id: '', // optional, fallback is taken from module\n        label: '', // optional, fallback is taken from module\n        iconComponent: YourCustomIconRenderingComponent, // optional, this overrides the component used to render the icon\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Commands for UI Interaction\nDESCRIPTION: Shows how to use Cypress commands to interact with UI elements in Shopware admin. This example demonstrates selecting elements, double-clicking, clearing inputs, and typing text.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('test something', () => {\n    ...\n    cy.get('.sw-grid__row--0')\n        .contains('A Set Name Snippet')\n        .dblclick();\n    cy.get('.sw-grid__row--0 input')\n        .clear()\n        .type('Nordfriesisch')\n        .click();\n    ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing ScheduledTaskHandler Class\nDESCRIPTION: PHP handler class that processes the scheduled task when executed. Contains the business logic to be run at the specified interval.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-scheduled-task.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service\\ScheduledTask;\n\nuse Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskHandler;\nuse Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;\n\n#[AsMessageHandler(handles: ExampleTask::class)]\nclass ExampleTaskHandler extends ScheduledTaskHandler\n{\n    public function run(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Page Object\nDESCRIPTION: Demonstration of different methods to add data extensions to the page object using both addExtension and addArrayExtension\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/data-loading.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set products = services.repository.search('product', criteria) %}\n\n{# via addExtension #}\n{% do page.addExtension('swagCollection', products) %}\n{% do page.addExtension('swagEntity', products.first) %}\n\n{# via addArrayExtension #}\n{% set arrayExtension = {\n    'collection': products,\n    'entity': products.first,\n    'scalar': 'a scalar value',\n} %}\n{% do page.addArrayExtension('swagArrayExtension', arrayExtension) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Migration Writer in PHP\nDESCRIPTION: This PHP code defines a `ProductWriter` class that extends the `AbstractWriter`. It implements the mandatory `supports()` method, which returns the constant `DefaultEntities::PRODUCT` to indicate that this writer is responsible for writing product data during the migration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/writer.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Migration\\Writer;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DefaultEntities;\n\nclass ProductWriter extends AbstractWriter\n{\n    public function supports(): string\n    {\n        return DefaultEntities::PRODUCT;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple B2B API Controller in PHP\nDESCRIPTION: This snippet shows a basic PHP class `MyApiController` acting as a REST API controller for the Shopware B2B Suite. The `helloAction` method accepts a `Request` object and returns an array, which is automatically converted to a JSON response. This controller structure reuses services defined for the Storefront rather than relying heavily on Doctrine ORM like the core Shopware API.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/rest-api.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nuse Shopware\\B2B\\Common\\MvcExtension\\Request;\n\nclass MyApiController\n{\n    public function helloAction(Request $request): array\n    {\n        return ['message' => 'hello']; // will automatically be converted to JSON\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Rate Limiter After Successful Action\nDESCRIPTION: Resetting the rate limiter counter after a successful operation. This implementation calls the reset method on the rate limiter service to clear the counter for a specific client when their request is successful.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rate-limiter/add-rate-limiter-to-api-route.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/ExampleRoute.php\n\n#[Route(path: '/store-api/example', name: 'store-api.example.search', methods: ['GET','POST'])]\npublic function load(Request $request, SalesChannelContext $context): ExampleRouteResponse\n{\n    // Limit ip address for example\n    $this->rateLimiter->ensureAccepted('example_route', $request->getClientIp());\n    \n    // if action was successfully, reset limit \n    if ($this->doAction() === true) {\n        $this->rateLimiter->reset('example_route', $request->getClientIp());\n    }\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Plugin Configuration XML Structure\nDESCRIPTION: Shows the minimal required structure for a plugin configuration XML file, including a single card with a title and one input field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!--<plugin root>/src/Resources/config/config.xml-->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/SystemConfig/Schema/config.xsd\">\n    <card>\n        <title>Minimal configuration</title>\n        <input-field>\n            <name>example</name>\n        </input-field>\n    </card>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Implementing BundleWriter for Data Persistence\nDESCRIPTION: A writer class that handles persisting the converted bundle data to the Shopware 6 database. It extends AbstractWriter and specifies which entity type it supports. The actual writing logic is inherited from the parent class.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationBundleExample\\Migration\\Writer;\n\nuse SwagMigrationAssistant\\Migration\\Writer\\AbstractWriter;\nuse SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet\\BundleDataSet;\n\nclass BundleWriter extends AbstractWriter\n{\n    public function supports(): string\n    {\n        return BundleDataSet::getEntity();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Previewable Interface for Flow Actions in PHP\nDESCRIPTION: The core interface that defines the data structure for preview functionality in flow actions. This interface allows developers to implement preview capability for their flow actions, making them previewable in the administration interface without executing actual operations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-07-13-flow-builder-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface Previewable\n{\n    public function preview(...): PreviewResponseStruct\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Pagelet in Page Loader in Shopware\nDESCRIPTION: Code snippet showing how to load a custom pagelet as part of another page in Shopware. This demonstrates integrating the pagelet into a parent page by calling the pagelet loader from the page loader.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-pagelet.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Storefront/Page/Example/ExamplePageLoader.php\npublic function load(Request $request, SalesChannelContext $context): ExamplePage\n{\n    $page = $this->genericPageLoader->load($request, $context);\n    $page = ExamplePage::createFrom($page);\n\n    $page->setExamplePagelet($this->examplePageletLoader->load($request, $context));\n\n    // Do additional stuff, e.g. load more data from store-api and add it to page\n     $page->setExampleData(...);\n\n    $this->eventDispatcher->dispatch(\n        new ExamplePageletLoadedEvent($page, $context, $request)\n    );\n\n    return $page;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shipping Method Fixture in ShippingFixtureService for Shopware E2E Testing\nDESCRIPTION: Implements the process of creating a shipping method fixture by merging user data with retrieved IDs and sending a POST request to the API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Promise.all([\n    findRuleId(),\n    findDeliveryTimeId()\n]).then(([rule, deliveryTime]) => {\n    return this.mergeFixtureWithData(userData, {\n        availabilityRuleId: rule.id,\n        deliveryTimeId: deliveryTime.id\n    });\n}).then((finalShippingData) => {\n    return this.apiClient.post('/shipping-method?_response=true', finalShippingData);\n});\n```\n\n----------------------------------------\n\nTITLE: New Extension Component in Shopware 6.7\nDESCRIPTION: Example of registering a new component in an extension using Options API\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('your-crazy-ai-field', {\n   template: `\n     {% block your-crazy-ai-field %}\n       {# ... #}\n     {% endblock %}\n   `,\n\n   // Options API implementation\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with sw_thumbnails in Twig\nDESCRIPTION: Example of enabling native lazy loading for images using the loading attribute with sw_thumbnails. This helps optimize page load performance for images not in the initial viewport.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-thumbnails' with {\n    media: cover,\n    attributes: {\n        'loading': 'lazy'\n    }\n} %}\n```\n\n----------------------------------------\n\nTITLE: HTTP Media Download Service Implementation\nDESCRIPTION: Implementation of HttpMediaDownloadService that handles downloading media files from source system via HTTP. Includes support checking and processing logic with parallel download capabilities.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/media-processing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Profile\\Shopware55\\Media;\n\nclass HttpMediaDownloadService implements MediaFileProcessorInterface\n{\n    /* ... */\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface\n            && $migrationContext->getGateway()->getName() === ShopwareApiGateway::GATEWAY_NAME\n            && $migrationContext->getDataSet()::getEntity() === MediaDataSet::getEntity();\n    }\n\n    public function process(MigrationContextInterface $migrationContext, Context $context, array $workload, int $fileChunkByteSize): array\n    {\n        /* ... */\n\n        $media = $this->getMediaFiles($mediaIds, $runId, $context);\n\n        $client = new Client([\n            'verify' => false,\n        ]);\n\n        $promises = $this->doMediaDownloadRequests($media, $mappedWorkload, $client);\n\n        /** @var array $results */\n        $results = Promise\\settle($promises)->wait();\n\n        /* ... handle responses ... */\n\n        $this->setProcessedFlag($runId, $context, $finishedUuids, $failureUuids);\n        $this->loggingService->saveLogging($context);\n\n        return array_values($mappedWorkload);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for a Single Product using Repository Facade in Twig\nDESCRIPTION: Demonstrates how to use the repository.search() method to load a single product by ID and add it to the page extension.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'ids': [ hook.productId ]\n} %}\n\n{% set product = services.repository.search('product', criteria).first %}\n\n{% do page.addExtension('myProduct', product) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopware App Lifecycle Methods in PHP\nDESCRIPTION: This PHP code demonstrates how to implement lifecycle methods for a Shopware app, including registration, activation, deactivation, and deletion. It uses the AppLifecycle class to handle different lifecycle events based on the request URI.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/02-lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app = new AppConfiguration('Foo', 'test', 'http://localhost:6001/register/callback');\n// for a repository to save stores implementing \\Shopware\\App\\SDK\\Shop\\ShopRepositoryInterface, see FileShopRepository as an example\n$repository = ...;\n\n// Create a psr 7 request or convert it (HttpFoundation Symfony)\n$psrRequest = ...;\n\n$registrationService = new \\Shopware\\App\\SDK\\Registration\\RegistrationService($app, $repository);\n$shopResolver = new \\Shopware\\App\\SDK\\Shop\\ShopResolver($repository);\n$lifecycle = new \\Shopware\\App\\SDK\\AppLifecycle($registrationService, $shopResolver, $repository);\n\n$response = match ($_SERVER['REQUEST_URI']) {\n    '/app/register' => $lifecycle->register($psrRequest),\n    '/app/register/confirm' => $lifecycle->registerConfirm($psrRequest),\n    '/app/activate' => $lifecycle->activate($psrRequest),\n    '/app/deactivate' => $lifecycle->deactivate($psrRequest),\n    '/app/delete' => $lifecycle->delete($psrRequest),\n    default => throw new \\RuntimeException('Unknown route')\n};\n\n// return the response\n```\n\n----------------------------------------\n\nTITLE: Flow Action with Exception Handling for Transaction Rollback\nDESCRIPTION: Example showing how to force transaction rollback by throwing a TransactionFailedException. This approach allows for explicit transaction control while delegating the actual transaction handling to the flow executor.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-02-11-transactional-flow-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SetOrderStateAction extends FlowAction implements DelayableAction, TransactionalAction\n{\n    public function handleFlow(StorableFlow $flow): void\n    {        \n        try {\n            //search for some record\n            $entity = $this->repo->find(...);\n        } catch (NotFoundException $e) {\n            throw TransactionFailedException::because($e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Storefront Product Data using Store Facade in Twig\nDESCRIPTION: Shows how to use the store.aggregate() method to calculate the sum of children for all storefront products.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'aggregations': [\n        { 'name': 'sumOfChildren', 'type': 'sum', 'field': 'childCount' }\n    ]\n} %}\n\n{% set sumResult = services.store.aggregate('product', criteria).get('sumOfChildren') %}\n\n{% do page.addArrayExtension('myProductAggregations', {\n    'sum': sumResult.getSum\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Mapping Product UUIDs in Shopware Migration\nDESCRIPTION: This method creates or retrieves mappings between old product identifiers and new UUIDs in Shopware 6. It uses the MappingService to handle these associations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprivate function getUuidForProduct(array &$data): array\n{\n    $this->mainMapping = $this->mappingService->getOrCreateMapping(\n        $this->connectionId,\n        DefaultEntities::PRODUCT,\n        $this->oldProductId,\n        $this->context,\n        $this->checksum\n    );\n\n    $converted = [];\n    $converted['id'] = $this->mainMapping['entityUuid'];\n\n    $mapping = $this->mappingService->getOrCreateMapping(\n        $this->connectionId,\n        DefaultEntities::PRODUCT_MAIN,\n        $data['detail']['articleID'],\n        $this->context,\n        null,\n        null,\n        $converted['id']\n    );\n    $this->mappingIds[] = $mapping['id'];\n\n    return $converted;\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Data Retrieval in PHP\nDESCRIPTION: PHP code example showing how to retrieve flow data in actions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    $salesChanelId = $flow->getData(MailAware::SALES_CHANNEL_ID));\n    $customer = $flow->getData(CustomerAware::CUSTOMER_ID));\n```\n\n----------------------------------------\n\nTITLE: Tracking Media Uploads in Shopware 6 Administration\nDESCRIPTION: This code snippet shows how to use the sw-upload-listener component in conjunction with sw-media-upload-v2 to track the progress of media uploads. It demonstrates how to set up event listeners for upload completion.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/handling-media.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <sw-media-upload-v2\n        uploadTag=\"my-upload-tag\"\n        :allowMultiSelect=\"false\"\n        variant=\"regular\"\n        label=\"My image-upload\">\n    </sw-media-upload-v2>\n    <sw-upload-listener\n        @media-upload-finish=\"onUploadFinish\" \n        uploadTag=\"my-upload-tag\">\n    </sw-upload-listener>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Upsert Custom Price - JSON API Request\nDESCRIPTION: Example of upserting a customer-specific price using the /api/_action/custom-price endpoint. Shows how to specify product ID, customer ID, and price data including quantity tiers and currency information.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/customer-specific-pricing.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"action\": \"upsert\",\n    \"payload\": [\n      {\n        \"productId\": \"0001e32041ac451386bf9b7351c540f3\",\n        \"customerId\": \"02a3c82b5ca842c492f8656029b2e63e\",\n        \"price\": [\n          {\n            \"quantityStart\": 1,\n            \"quantityEnd\": null,\n            \"price\": [\n              {\n                \"currencyId\": \"b7d2554b0ce847cd82f3ac9bd1c0dfca\",\n                \"gross\": 682.0,\n                \"net\": 682.0,\n                \"linked\": true\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering the Decorated Shopware Migration Converter via XML\nDESCRIPTION: This XML snippet registers the Shopware55DecoratedProductConverter as a decorated service for the original Shopware55ProductConverter within Shopware's Symfony dependency injection container. It specifies the ID of the new decorated converter and indicates which original service it decorates. The required service and constructor arguments are also defined, linking to the relevant mapping, logging, and media file services. This configuration is necessary to ensure Shopware uses the decorated converter for migration tasks.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/decorating-a-shopware-migration-assistant-converter.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\\\"SwagMigrationExtendConverterExample\\\\Profile\\\\Shopware\\\\Converter\\\\Shopware55DecoratedProductConverter\\\"\n          decorates=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware55\\\\Converter\\\\Shopware55ProductConverter\\\">\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationExtendConverterExample\\\\Profile\\\\Shopware\\\\Converter\\\\Shopware55DecoratedProductConverter.inner\\\"/>\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Migration\\\\Mapping\\\\MappingService\\\"/>\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Migration\\\\Logging\\\\LoggingService\\\"/>\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Migration\\\\Media\\\\MediaFileService\\\"/>\n</service>\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Shopware Deployment Helper via Composer\nDESCRIPTION: Command to install the Shopware Deployment Helper package using Composer package manager.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require shopware/deployment-helper\n```\n\n----------------------------------------\n\nTITLE: Registering an Asynchronous JavaScript Plugin in Shopware 6\nDESCRIPTION: Code that registers a JavaScript plugin asynchronously using dynamic imports for on-demand loading.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/main.js\n\n// Register your plugin via the existing PluginManager using a dynamic import\nconst PluginManager = window.PluginManager;\nPluginManager.register('ExamplePlugin', () => import('./example-plugin/example-plugin.plugin'), '[data-example-plugin]');\n```\n\n----------------------------------------\n\nTITLE: Querying Custom Entities in Twig for Shopware\nDESCRIPTION: Shows how to use the repository service to search for custom entities within Twig templates in Shopware app scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set blogs = services.repository.search('custom_entity_blog', criteria) %}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Theme Inheritance in Shopware 6\nDESCRIPTION: Enhanced theme.json configuration that demonstrates how to set up theme inheritance by adding a parent theme (@SwagBasicExampleTheme) to the inheritance chain in each section.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-theme-inheritance.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleThemeExtend\",\n  \"author\": \"Shopware AG\",\n  \"views\": [\n     \"@Storefront\",\n     \"@Plugins\",\n     \"@SwagBasicExampleTheme\",\n     \"@SwagBasicExampleThemeExtend\"\n  ],\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\",\n    \"@SwagBasicExampleTheme\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  \"script\": [\n    \"@Storefront\",\n    \"@SwagBasicExampleTheme\",\n    \"app/storefront/dist/storefront/js/swag-example-plugin-theme-extended/swag-example-plugin-theme-extended.js\"\n  ],\n  \"asset\": [\n    \"@Storefront\",\n    \"@SwagBasicExampleTheme\",\n    \"app/storefront/src/assets\"\n  ],\n  \"configInheritance\": [\n    \"@Storefront\",\n    \"@SwagBasicExampleTheme\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Full Icon Implementation Example\nDESCRIPTION: Complete example showing icon implementation with template extension and multiple configuration options.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-icons.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/base.html.twig' %}\n\n{% block base_body %}\n\n    {# We want to set our own icon here #}\n    <h1>Custom icon:</h1>\n    {% sw_icon 'done-outline-24px' style {\n        'size': 'lg',\n        'namespace': 'TestPlugin',\n        'pack': 'solid'\n    } %}\n    {{ parent() }}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Example Store API Response in JSON Format\nDESCRIPTION: Sample JSON structure for a Store API response that includes metadata like total count and the array of entity objects with their properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 0,\n  \"aggregations\": {},\n  \"elements\": [\n    {\n      \"id\": \"string\",\n      \"name\": \"string\",\n      \"description\": \"string\",\n      \"active\": true,\n      \"createdAt\": \"2021-03-24T13:18:46.503Z\",\n      \"updatedAt\": \"2021-03-24T13:18:46.503Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Response in an App Script (Twig)\nDESCRIPTION: Uses the `services.response.json()` factory method to create a `JsonResponse` object within an app script. This is used to return structured JSON data from custom API, Store-API, or Storefront endpoints. Requires the data payload and an optional HTTP status code as parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({'data': data}, statusCode) %}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Cookie Reaction Script in Shopware Main JavaScript\nDESCRIPTION: This code includes the custom cookie reaction script in the main JavaScript entry point of a Shopware plugin, ensuring the cookie consent change detection is loaded properly.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/reacting-to-cookie-consent-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/main.js\nimport './reacting-cookie/reacting-cookie'\n```\n\n----------------------------------------\n\nTITLE: Updating Scoped Slots Access\nDESCRIPTION: Shows the transition from using $scopedSlots to using unified $slots in Vue 3, where slots are now exposed as functions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-migration-build.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$scopedSlots.header\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$slots.header()\n```\n\n----------------------------------------\n\nTITLE: Using Filter in JavaScript Components\nDESCRIPTION: Demonstrates how to access and use a custom filter within JavaScript component files using the $options.filters syntax.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/using-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$options.filters.example('firstArgument')\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Example Extension Entity in Shopware\nDESCRIPTION: This PHP class defines a custom entity for a one-to-many relationship with the product entity, including fields for id, product association, and a custom string.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/elasticsearch/add-product-entity-extension-to-elasticsearch.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Extension\\Content\\Product;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\FkField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\ApiAware;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\ManyToOneAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\ReferenceVersionField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\StringField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\n\nclass OneToManyExampleExtensionDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'one_to_many_swag_example_extension';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    public function getEntityClass(): string\n    {\n        return Entity::class;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new ApiAware(), new Required(), new PrimaryKey()),\n            new FkField('product_id', 'productId', ProductDefinition::class),\n            (new ReferenceVersionField(ProductDefinition::class))->addFlags(new Required()),\n            (new StringField('custom_string', 'customString'))->addFlags(new ApiAware()),\n\n            new ManyToOneAssociationField('product', 'product_id', ProductDefinition::class),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Entity Extension in Shopware 6 PHP\nDESCRIPTION: Creates a bulk entity extension class that extends multiple entities simultaneously. This example shows how to extend both Product and Category entities with new fields and associations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Examples;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Content\\Category\\CategoryDefinition;\n\nclass MyBulkExtension extends BulkEntityExtension\n{\n    public function collect(): \\Generator\n    {\n        yield ProductDefinition::ENTITY_NAME => [\n            new FkField('main_category_id', 'mainCategoryId', CategoryDefinition::class),\n        ];\n\n        yield CategoryDefinition::ENTITY_NAME => [\n            new FkField('product_id', 'productId', ProductDefinition::class),\n            new ManyToOneAssociationField('product', 'product_id', ProductDefinition::class),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkout Gateway in Manifest XML\nDESCRIPTION: Demonstrates how to configure the checkout gateway URL in the app's manifest.xml file. This configuration is required to enable checkout gateway functionality for the app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/checkout-gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest>\n    <!-- ... -->\n\n    <gateways>\n        <checkout>https://my-app.server.com/checkout/gateway</checkout>\n    </gateways>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in Shopware 6\nDESCRIPTION: XML configuration for service container setup, defining the controller service and its dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-dynamic-content-via-ajax-calls.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\" \n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"SwagBasicExample\\Storefront\\Controller\\ExampleController\" public=\"true\">\n            <call method=\"setContainer\">\n                <argument type=\"service\" id=\"service_container\"/>\n            </call>\n            <call method=\"setTwig\">\n              <argument type=\"service\" id=\"twig\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing PseudoModalUtil in ExamplePlugin\nDESCRIPTION: This snippet shows how to use PseudoModalUtil in a custom plugin to create and open a modal window. It includes methods for opening the modal and handling callbacks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PluginBaseClass } = window;\nimport PseudoModalUtil from 'src/utility/modal-extension/pseudo-modal.util';\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        // declaring some basic content\n        const content = `\n            <div class=\"js-pseudo-modal-template\">\n                <div class=\"js-pseudo-modal-template-title-element\">Modal title</div>\n                <div class=\"js-pseudo-modal-template-content-element\">Modal content</div>\n            </div>\n        `;\n        \n        this.openModal(content);\n    }\n    \n    openModal(content) {\n        // create a new modal instance\n        this.modal = new PseudoModalUtil(content);\n        \n        // open the modal window and fire a callback function\n        this.modal.open(this.onOpenModal.bind(this));\n    }\n    \n    onOpenModal() {\n        console.log('the modal is opened');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Prices using API Criteria in JSON\nDESCRIPTION: Demonstrates how to use the API to calculate the total sum of product prices. It includes both the request payload and the expected response format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {  \n            \"name\": \"sum-price\",\n            \"type\": \"sum\",\n            \"field\": \"price\"\n        }\n    ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"sum-price\": {\n            \"sum\": 30344,\n            \"extensions\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Object and Static Methods as First-Class Callables in PHP\nDESCRIPTION: These PHP snippets show how to assign object and static methods as callable values using the PHP 8.1+ first-class callable syntax. They can be passed or invoked as anonymous functions. Requires a variable $object and namespace \\My\\Object with method doCoolStuff; PHP 8.1+ required. Returns callable closures referencing the given methods.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$callable = $object->doCoolStuff(...);\n$callable = \\My\\Object::doCoolStuff(...);\n```\n\n----------------------------------------\n\nTITLE: Enabling Stock Management Feature Flag in Shopware 6\nDESCRIPTION: This snippet shows how to enable the stock management feature flag in Shopware 6 by setting STOCK_HANDLING to 1 in the .env file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/stock.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nSTOCK_HANDLING=1\n```\n\n----------------------------------------\n\nTITLE: Disabling Stock Management in Shopware 6 Configuration\nDESCRIPTION: This YAML configuration snippet demonstrates how to disable Shopware's default stock management system by setting enable_stock_management to false.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/stock.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    stock:\n        enable_stock_management: false\n```\n\n----------------------------------------\n\nTITLE: Implementing ScalarValuesAware in a Flow Event in PHP\nDESCRIPTION: Example implementation of the ScalarValuesAware interface in a flow event class. The event implements both ScalarStoreAware and FlowEventAware interfaces, and provides a getValues method that returns the URL as a scalar value.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-02-flow-storer-with-scalar-values.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SomeFlowAwareEvent extends Event implements ScalarStoreAware, FlowEventAware\n{\n    public function __construct(private readonly string $url) { }\n\n    public function getValues(): array\n    {\n        return ['url' => $this->url];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Error Mapping in Vue Component\nDESCRIPTION: This JavaScript code shows how to import and use the error configuration in a Vue component, utilizing the mapPageErrors helper to create computed properties for page-level errors.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport errorConfiguration from './error.cfg.json';\n\nconst { mapPageErrors } = Shopware.Component.getComponentHelper();\n\nShopware.Component.register('sw-product-detail', {\n    computed: {\n        ...mapPageErrors(errorConfiguration),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi Filter in Shopware\nDESCRIPTION: Shows how to use Multi filter to combine multiple conditions. Combines filters with OR operator inside the multi filter.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(\n    new MultiFilter(\n        MultiFilter::CONNECTION_OR,\n        [\n            new EqualsFilter('stock', 1),\n            new EqualsFilter('availableStock', 10)\n        ]\n    )\n);\n$criteria->addFilter(\n    new EqualsFilter('active', true)\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"filter\": [\n        { \n            \"type\": \"multi\",   \n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"stock\",\n                    \"value\": 1\n                },\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"availableStock\",\n                    \"value\": 1\n                } \n            ]\n        },\n        {\n            \"type\": \"equals\",\n            \"field\": \"active\",\n            \"value\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Storefront Template with Twig\nDESCRIPTION: This Twig template defines how the custom CMS block should be rendered in the Shopware Storefront. It extends the existing image-text block template, reusing its functionality while allowing for custom modifications if needed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/block/cms-block-my-image-text-reversed.html.twig\n{% sw_extends '@Storefront/storefront/block/cms-block-image-text.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing RateLimiterCompilerPass for Configuration Injection\nDESCRIPTION: PHP class implementing CompilerPassInterface to extend the Shopware rate limiter configuration with the plugin's custom configuration. This compiler pass merges the YAML configuration with the existing rate limiter settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rate-limiter/add-rate-limiter-to-api-route.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/CompilerPass/RateLimiterCompilerPass.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\CompilerPass;\n\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass RateLimiterCompilerPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        /** @var array<string, array<string, string>> $rateLimiterConfig */\n        $rateLimiterConfig = $container->getParameter('shopware.api.rate_limiter');\n\n        $rateLimiterConfig += Yaml::parseFile(__DIR__ . '/../Resources/config/rate_limiter.yaml');\n\n        $container->setParameter('shopware.api.rate_limiter', $rateLimiterConfig);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aware Interface and Event in PHP\nDESCRIPTION: This code shows how to create a custom Aware interface (CustomExampleDataAware) and implement it in an ExampleEvent class for handling custom data in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\ExamplePlugin\\Core\\Checkout\\Customer\\Event;\n\nuse Shopware\\Core\\Framework\\Event\\CustomExampleDataAware;\nuse Shopware\\Core\\Framework\\Event\\EventData\\EventDataCollection;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass ExampleEvent extends Event implements CustomExampleDataAware\n{\n    public const EVENT_NAME = 'example.event';\n\n    private string $customExampleData;\n\n    public function __construct(string $customExampleData)\n    {\n        $this->customExampleData = $customExampleData;\n    }\n\n    public function getName(): string\n    {\n        return self::EVENT_NAME;\n    }\n\n    public function getCustomExampleData(): string\n    {\n        return $this->customExampleData;\n    }\n\n    public static function getAvailableData(): EventDataCollection\n    {\n        return (new EventDataCollection());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing HTTP Responses with Shopware App Server SDK\nDESCRIPTION: Demonstrates how to sign HTTP responses using the AppServer SDK's signer component. The code shows creating a response, obtaining a shop instance, and signing the response before sending it back to Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/04-signing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nimport { AppServer } from '@shopware-ag/app-server-sdk'\n\nconst app = new AppServer(/** ... */);\n\n// Or you get it from the context resolver\nconst shop = await app.repository.getShopById('shop-id');\n\nconst response = new Response('Hello World', {\n    headers: {\n        'Content-Type': 'text/plain',\n    },\n});\n\nconst signedResponse = await app.signer.signResponse(response, shop);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Length Restrictions in Shopware Plugin Configuration\nDESCRIPTION: Illustrates how to set minimum and maximum length restrictions for text, URL, or password input fields in the configuration XML.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<input-field type=\"password\">\n    <name>token</name>\n    <minLength>5</minLength>\n    <maxLength>20</maxLength>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript Code for Testing\nDESCRIPTION: A simple JavaScript example that logs a message to the console. This can be used to test if the JavaScript is being properly compiled and loaded in the Storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-css-js-to-theme.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/js/main.js\nconsole.log('SwagBasicExampleTheme JS loaded');\n```\n\n----------------------------------------\n\nTITLE: Referencing Assets in SCSS\nDESCRIPTION: SCSS code example demonstrating how to reference theme assets in stylesheets using the $app-css-relative-asset-path variable.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-assets-to-theme.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    background-image: url('#{$app-css-relative-asset-path}/your-image.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Class Structure in Shopware 6\nDESCRIPTION: Example of an auto-generated migration class in Shopware 6 with placeholder methods for schema updates. Shows the three required methods: getCreationTimestamp(), update(), and updateDestructive().\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Migration/Migration1611740369ExampleDescription.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\n\nclass Migration1611740369ExampleDescription extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1611740369;\n    }\n\n    public function update(Connection $connection): void\n    {\n        // implement update\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n        // implement update destructive\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Altering SQL Table for Entity Versioning\nDESCRIPTION: SQL command to add a version_id column and update the primary key for entity versioning.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/versioning-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `swag_example`\n    ADD `version_id` BINARY(16) NOT NULL AFTER `id`,\n    ADD PRIMARY KEY `id_version_id` (`id`, `version_id`),\n    DROP INDEX `PRIMARY`;\n```\n\n----------------------------------------\n\nTITLE: Versioned Entity Event Subscriber with Live Version Check\nDESCRIPTION: This example shows how to handle versioned entities by only processing events for the live version. It demonstrates listening to the product.written event and checking if the context version matches the live version before processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/listening-to-events.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Subscriber/MySubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass MySubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductEvents::PRODUCT_WRITTEN_EVENT => 'onProductWritten'\n        ];\n    }\n\n    public function onProductWritten(EntityWrittenEvent $event)\n    {\n        if ($event->getContext()->getVersionId() !== Defaults::LIVE_VERSION) {\n            return;\n        }\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bootstrap Modal in Twig\nDESCRIPTION: This snippet demonstrates how to create a basic Bootstrap modal by overriding the base_main_inner block in a Twig template. It includes the modal structure and a button to trigger it.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n    <!-- Button trigger modal -->\n    <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n        Launch demo modal\n    </button>\n\n    <!-- Modal -->\n    <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <!-- insert your content here -->\n                    ...\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n                    <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing UnusedMediaSubscriber in PHP\nDESCRIPTION: Core subscriber class that implements EventSubscriberInterface to handle the UnusedMediaSearchEvent. It allows plugins to mark media files as used to prevent their deletion.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/prevent-deletion-of-media-files-referenced-in-your-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Content\\Media\\Event\\UnusedMediaSearchEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass UnusedMediaSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            UnusedMediaSearchEvent::class => 'removeUsedMedia',\n        ];\n    }\n\n    public function removeUsedMedia(UnusedMediaSearchEvent $event): void\n    {\n        $idsToBeDeleted = $event->getUnusedIds();\n    \n        $doNotDeleteTheseIds = $this->getUsedMediaIds($idsToBeDeleted);\n    \n        $event->markAsUsed($doNotDeleteTheseIds);\n    }\n    \n    private function getUsedMediaIds(array $idsToBeDeleted): array\n    {\n        // do something to get the IDs that are used\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code with Feature Flag (PHP)\nDESCRIPTION: Shows how to use the `Feature::ifActive` static method in PHP to execute a block of code (a closure in this case) only if the specified feature flag ('v6.5.0.0') is currently active. This allows developers to embed new functionality within existing methods.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Framework\\Feature;\n \nclass ApiController\n{\n  public function indexAction(Request $request)\n  {\n    // some old stuff\n    Feature::ifActive('v6.5.0.0', function() use ($request) {\n      // awesome stuff\n    });\n    // some old stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Line Items with LineItemFactoryHandler in PHP\nDESCRIPTION: Mandatory requirement for creating cart line items. All line item creation logic must utilize a `LineItemFactoryHandler` class to ensure consistency and proper handling within the Shopware checkout process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/cart-process.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nLineItemFactoryHandler\n```\n\n----------------------------------------\n\nTITLE: Simplified Twig Helper Function for Rule Condition Evaluation\nDESCRIPTION: This Twig snippet demonstrates a simplified way to evaluate the rule condition using a helper function, reducing the code complexity.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% comparison.compare(operator, scope.salesChannelContext.customer.groupId, customerGroupIds) %}\n```\n\n----------------------------------------\n\nTITLE: Styling the CMS Block with SCSS\nDESCRIPTION: This SCSS file defines a responsive grid layout for the custom CMS block, ensuring that the 'left' and 'right' slots are displayed side by side with appropriate spacing and sizing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/component/sw-cms-block-my-image-text-reversed.scss\n.sw-cms-block-my-image-text-reversed {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    grid-gap: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mixin in Plugin Main File\nDESCRIPTION: Shows how to import a custom mixin in the plugin's main.js file before importing components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/add-mixins.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <administration root>/src/main.js\nimport '<administration root>/mixins/swag-basic-example.js'\n    \n// importing components...\n```\n\n----------------------------------------\n\nTITLE: Implementing ExampleEvent with CustomerAware Interface in PHP\nDESCRIPTION: This code snippet shows how to create a custom ExampleEvent class that implements the CustomerAware interface. It includes methods for getting customer data and available event data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\ExamplePlugin\\Core\\Checkout\\Customer\\Event;\n\nuse Shopware\\Core\\Checkout\\Customer\\CustomerDefinition;\nuse Shopware\\Core\\Checkout\\Customer\\CustomerEntity;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\Event\\CustomerAware;\nuse Shopware\\Core\\Framework\\Event\\FlowEventAware;\nuse Shopware\\Core\\Framework\\Event\\EventData\\EntityType;\nuse Shopware\\Core\\Framework\\Event\\EventData\\EventDataCollection;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass ExampleEvent extends Event implements CustomerAware, FlowEventAware\n{\n    public const EVENT_NAME = 'example.event';\n\n    private CustomerEntity $customer;\n\n    private Context $context;\n\n    public function __construct(Context $context, CustomerEntity $customer)\n    {\n        $this->customer = $customer;\n        $this->context = $context;\n    }\n\n    public function getName(): string\n    {\n        return self::EVENT_NAME;\n    }\n\n    public function getCustomer(): CustomerEntity\n    {\n        return $this->customer;\n    }\n\n    public function getCustomerId(): string\n    {\n        return $this->customer->getId();\n    }\n\n    public static function getAvailableData(): EventDataCollection\n    {\n        return (new EventDataCollection())\n            ->add('customer', new EntityType(CustomerDefinition::class));\n    }\n\n    public function getContext(): Context\n    {\n        return $this->context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ManyToMany Associations in Shopware 6\nDESCRIPTION: This snippet demonstrates how to update a product by assigning it to an existing category. It shows the pattern for ManyToMany associations, where the relationship is defined by referencing the associated entity's ID in an array.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/writing-data.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function writeData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example product'));\n\n    $productId = $this->productRepository->searchIds($criteria, $context)->firstId();\n    $categoryId = $this->categoryRepository->searchIds(new Criteria())->firstId();\n\n    $this->productRepository->update([\n        [\n            'id' => $productId,\n            'categories' => [\n                [\n                    'id' => $categoryId\n                ]\n            ]\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Capitalizing Strings with Utility Function in Shopware 6 Administration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the capitalizeString utility function in a Shopware 6 Administration component. It imports necessary dependencies, registers a component, and uses the utility function to capitalize a string.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/using-utils.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <extension root>/src/Resources/app/administration/app/src/component/swag-basic-example/index.js\nconst { Component, Utils } = Shopware;\n\nComponent.register('swag-basic-example', {\n    data() {\n        return {\n            text: 'hello',\n            capitalizedString: undefined,\n        };\n    },\n\n    created() {\n        this.capitalize();\n    },\n\n    methods: {\n        capitalize() {\n            this.capitalizedString = Utils.string.capitalizeString(this.string);\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity CRUD Events in Shopware\nDESCRIPTION: This snippet describes CRUD events for various entities in Shopware, including product_price, category, sales_channel, sales_channel_domain, and customer. Each event requires entity-specific read permission and includes a payload with operation details.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": \"[entity_name]\",\n  \"operation\": \"update insert\",\n  \"primaryKey\": \"array string\",\n  \"payload\": \"array\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": \"[entity_name]\",\n  \"operation\": \"deleted\",\n  \"primaryKey\": \"array string\",\n  \"payload\": \"array\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Template for Tag Management Modal in Shopware Flow Builder\nDESCRIPTION: Twig template for the tag management modal UI. Includes a tag selection field and action buttons for saving or cancelling the tag selection.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_15\n\nLANGUAGE: Twig\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/component/sw-flow-create-tag-modal/sw-flow-create-tag-modal.html.twig\n{% block create_tag_action_modal %}\n<sw-modal\n    class=\"create-tag-action-modal\"\n    :title=\"$tc('create-tag-action.titleCreateTag')\"\n    @modal-close=\"onClose\"\n>\n    {% block create_tag_action_modal_content %}\n        <sw-entity-tag-select\n            v-model=\"tagCollection\"\n            class=\"sw-flow-create-tag-modal__tags-field\"\n            required\n            :label=\"$tc('create-tag-action.labelTags')\"\n            :placeholder=\"$tc('create-tag-action.placeholderTags')\"\n            @item-add=\"onAddTag\"\n            @item-remove=\"onRemoveTag\"\n        />\n    {% endblock %}\n\n    {% block create_tag_action_modall_footer %}\n        <template #modal-footer>\n            {% block create_tag_action_modal_footer_cancel_button %}\n                <sw-button\n                    class=\"create-tag-action-modal__cancel-button\"\n                    size=\"small\"\n                    @click=\"onClose\"\n                >\n                    {{ $tc('global.default.cancel') }}\n                </sw-button>\n            {% endblock %}\n\n            {% block create_tag_action_modal_footer_save_button %}\n                <sw-button\n                    class=\"create-tag-action-modal__save-button\"\n                    variant=\"primary\"\n                    size=\"small\"\n                    @click=\"onAddAction\"\n                >\n                    {{ $tc('create-tag-action.buttonSaveAction') }}\n                </sw-button>\n            {% endblock %}\n        </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Querying Shorthand Custom Entities in Twig for Shopware\nDESCRIPTION: Demonstrates how to use the repository service to search for custom entities with shorthand prefixes in Twig templates.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set blogs = services.repository.search('ce_blog', criteria) %}\n```\n\n----------------------------------------\n\nTITLE: Applying Percentage Discount for High Value Cart with Twig (Twig)\nDESCRIPTION: This Twig script snippet applies a percentage discount to the shopping cart if the total cart price exceeds 500. It leverages custom Shopware Twig functions (such as 'cart.discount') to perform domain-specific business logic while remaining securely sandboxed. The script expects a 'cart' object with price and lineItems properties and outputs a discount action. Suitable for use in Shopware app script events, with access controlled via script mapping and entity wrapping.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-10-21-app-scripting.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if cart.price.totalPrice > 500 %}\n    {# get discount for high value orders #}\n    {% do cart.discount('percentage', 10, 'my_discount_snippet', cart.lineItems) %}\n{% endif %}\n\n```\n\n----------------------------------------\n\nTITLE: Chained Entity Associations in Shopware 6\nDESCRIPTION: Shows how to chain multiple associations to access nested related entities, such as accessing customer data through product reviews.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n    $criteria->addAssociation('productReviews.customer');\n\n    $products = $this->productRepository->search($criteria, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Method for Replacing Category Association in Shopware 6\nDESCRIPTION: This complete implementation shows how to properly replace a product's category by first deleting the existing association with the old category and then creating a new association with the desired category.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/replacing-associated-data.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function replaceData(Context $context): void\n{\n    $productId = 'myProductId';\n\n    $this->productCategoryRepository->delete([\n        [\n            'productId' => $productId,\n            'categoryId' => 'oldCategoryId'\n        ]\n    ], $context);\n\n    $this->productRepository->update([\n        [\n            'id' => $productId,\n            'categories' => [\n                [\n                    'id' => 'newCategoryId'\n                ]\n            ]\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling All Cache Invalidation in Shopware PHP\nDESCRIPTION: This PHP code snippet demonstrates how to disable all cache invalidation in a Shopware project by removing the 'kernel.event_listener' tag from the CacheInvalidationSubscriber service definition. It uses a custom CompilerPass to modify the service container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/custom-cache-invalidation.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyProject;\n\nuse Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent;\nuse Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent;\nuse Shopware\\Core\\Framework\\DependencyInjection\\CompilerPass\\RemoveEventListener;\nuse Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber;\n\nclass TweakCacheInvalidation implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        $container\n            ->getDefinition(CacheInvalidationSubscriber::class)\n            ->clearTag('kernel.event_listener')\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Symfony HTTP Routes with Enum Validation in PHP\nDESCRIPTION: This snippet highlights Symfony 6.1's support for enum-validated route parameters using the EnumRequirement class. The Route attribute specifies a route with a dynamic parameter whose value is checked against predefined enum cases. Requires PHP 8+, Symfony 6.1+, and a defined SomeEnum class. Useful for restricting route parameters to enum values for safer and more explicit routing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Requirement\\EnumRequirement;\n\n#[Route('/foo/{bar}', requirements: ['bar' => new EnumRequirement(SomeEnum::class)])]\n```\n\n----------------------------------------\n\nTITLE: Registering and Managing Migration Credentials Form - Shopware Administration - JavaScript\nDESCRIPTION: This JavaScript snippet defines and registers a Vue.js component for the Shopware migration credentials form. It manages input data for the database credentials, performs validation to ensure all required fields are filled, and emits relevant events for parent components. The component imports a Twig template, requires Vue.js and Shopware component registration, and expects to be used in conjunction with the complementary Twig template; it takes an optional 'credentials' prop and outputs via custom events.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Component } from 'src/core/shopware';\nimport template from './swag-migration-profile-ownProfile-local-credential-form.html.twig';\n\nComponent.register('swag-migration-profile-ownProfile-local-credential-form', {\n    template,\n\n    props: {\n        credentials: {\n            type: Object,\n            default() {\n                return {};\n            }\n        }\n    },\n\n    data() {\n        return {\n            inputCredentials: {\n                dbHost: '',\n                dbPort: '3306',\n                dbUser: '',\n                dbPassword: '',\n                dbName: ''\n            }\n        };\n    },\n\n    watch: {\n        credentials: {\n            immediate: true,\n            handler(newCredentials) {\n                if (newCredentials === null) {\n                    this.emitCredentials(this.inputCredentials);\n                    return;\n                }\n\n                this.inputCredentials = newCredentials;\n                this.emitOnChildRouteReadyChanged(\n                    this.areCredentialsValid(this.inputCredentials)\n                );\n            }\n        },\n\n        inputCredentials: {\n            deep: true,\n            handler(newInputCredentials) {\n                this.emitCredentials(newInputCredentials);\n            }\n        }\n    },\n\n    methods: {\n        areCredentialsValid(newInputCredentials) {\n            return (newInputCredentials.dbHost !== '' &&\n                newInputCredentials.dbPort !== '' &&\n                newInputCredentials.dbName !== '' &&\n                newInputCredentials.dbUser !== '' &&\n                newInputCredentials.dbPassword !== ''\n            );\n        },\n\n        emitOnChildRouteReadyChanged(isReady) {\n            this.$emit('onChildRouteReadyChanged', isReady);\n        },\n\n        emitCredentials(newInputCredentials) {\n            this.$emit('onCredentialsChanged', newInputCredentials);\n            this.emitOnChildRouteReadyChanged(\n                this.areCredentialsValid(newInputCredentials)\n            );\n        },\n\n        onKeyPressEnter() {\n            this.$emit('onTriggerPrimaryClick');\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated Extensions in Shopware CLI\nDESCRIPTION: This command shows all extensions that have an update available in the Shopware project using the Shopware CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension outdated\n```\n\n----------------------------------------\n\nTITLE: Component Test Setup Template in TypeScript\nDESCRIPTION: Boilerplate code for setting up Vue component tests using Vue Test Utils, including wrapper creation, lifecycle hooks, and basic component validation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shallowMount, createLocalVue, Wrapper} from '@vue/test-utils';\nimport flushPromises from 'flush-promises';\n\nasync function createWrapper(): Wrapper {\n    const localVue = createLocalVue();\n\n    return shallowMount(await Shopware.Component.build('sw-your-component-for-test'), {\n        localVue,\n        stubs: {\n            'sw-missing-component-one': Shopware.Component.build('sw-missing-component-one'),\n            'sw-missing-component-two': Shopware.Component.build('sw-missing-component-two'),\n        },\n        mocks: {},\n        attachTo: document.body,\n    });\n}\n\ndescribe('the/path/to/the/component', () => {\n    let wrapper: Wrapper;\n\n    beforeAll(async () => {\n    })\n\n    beforeEach(async () => {\n        wrapper = await createWrapper();\n        await flushPromises();\n    })\n\n    afterEach(async () => {\n        if (wrapper) {\n            await wrapper.destroy();\n        }\n        await flushPromises();\n    })\n\n    it('should be a Vue.js component', () => {\n        expect(wrapper.vm).toBeTruthy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks with Shopware App PHP SDK\nDESCRIPTION: PHP code example using the Shopware App PHP SDK to process incoming webhooks. It demonstrates how to resolve the shop and assemble the webhook context from the request.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\n\nfunction webhookController(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    \n    $shop = $shopResolver->resolveShop($serverRequest);\n    $webhook = $contextResolver->assembleWebhook($serverRequest, $shop);\n    \n    // do something with the parsed webhook\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entry Point HTML for Shopware Admin Extension (HTML)\nDESCRIPTION: Sets up the entry point HTML file for the Shopware admin extension. Includes the Meteor Admin SDK script and uses it to dispatch a notification.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/starter-admin-extension.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n    <head>\n        <script src=\"https://unpkg.com/@shopware-ag/meteor-admin-sdk/cdn\"></script>\n    </head>\n    <script>\n        sw.notification.dispatch({\n            title: 'Hi there',\n            message: 'Looks like someone sent you a message'\n        });\n    </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Making API Request to Custom Endpoint\nDESCRIPTION: cURL command to make a GET request to the custom topseller endpoint in Shopware's Store API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n  --url http://<your-store-url>/store-api/script/swag/topseller \\\n  --header 'sw-access-key: insert-your-access-key'\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Database Table during Plugin Installation in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the `AclDdlService` factory method to create the necessary database table for an ACL relationship during the Shopware plugin installation process. It passes an instance of the ACL table definition class (e.g., `AddressContactTable` or `AddressContactAclTable`) to the `createTable` method.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\B2B\\Acl\\Framework\\AclDdlService;\nuse Shopware\\B2B\\Address\\Framework\\AddressContactTable;\n\nAclDdlService::create()->createTable(new AddressContactTable());\n```\n\n----------------------------------------\n\nTITLE: Payment Controller Using Symfony Bundle\nDESCRIPTION: Example implementation of a payment controller using the Shopware Symfony Bundle.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Payment\\PaymentPayAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[AsController]\nclass PaymentController {\n    #[Route('/payment/pay')]\n    public function handle(PaymentPayAction $payment): ResponseInterface\n    {\n        // handle payment\n        \n        return PaymentResponse::paid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Absolute Surcharge to the Cart in Twig\nDESCRIPTION: This example illustrates how to create and add an absolute surcharge to the cart using the surcharge() method.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% set price = services.cart.price.create({\n    'default': { 'gross': 19.99, 'net': 19.99}\n}) %}\n\n{% do services.cart.surcharge('my-surcharge', 'absolute', price, 'Fancy surcharge') %}\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag in Vue Component (JavaScript)\nDESCRIPTION: Demonstrates how to check if a feature flag is active within a Vue.js component in the Shopware Administration. It requires injecting the 'feature' service and then calling its `isActive()` method.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninject: ['feature'],\n...\nfeatureIsActive(flag) {\n    return this.feature.isActive(flag);\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Routes for Store API in Shopware\nDESCRIPTION: This XML routes configuration file imports all route PHP files from the Core directory that have the Route attribute. It ensures that the Store API routes are properly registered with Symfony's routing system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <import resource=\"../../Core/**/*Route.php\" type=\"attribute\" />\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Implementing One to Many Association in Bar Entity Definition\nDESCRIPTION: Example of adding a One to Many association from Bar to Foo entity. Includes a OneToManyAssociationField.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n\n        new OneToManyAssociationField('foos', FooDefinition::class, 'bar_id')\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Confirmation Request Payload in JSON\nDESCRIPTION: Example of the JSON payload received during the app confirmation request. It includes API credentials and shop information that should be saved for future API authentication.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\":\"SWIARXBSDJRWEMJONFK2OHBNWA\",\n  \"secretKey\":\"Q1QyaUg3ZHpnZURPeDV3ZkpncXdSRzJpNjdBeWM1WWhWYWd0NE0\",\n  \"timestamp\":\"1592398983\",\n  \"shopUrl\":\"http:\\/\\/my.shop.com\",\n  \"shopId\":\"sqX6cqHi6hbj\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Logic Decorator in PHP\nDESCRIPTION: PHP class that extends AbstractSearchLogic to customize search behavior. Allows modification of Elasticsearch query building process with access to sales channel context and search configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-modify-search-logic.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace YourPluginNameSpace;\n\nuse OpenSearchDSL\\Query\\Compound\\BoolQuery;\nuse Shopware\\Commercial\\AdvancedSearch\\Domain\\Configuration\\ConfigurationLoader;\nuse Shopware\\Commercial\\AdvancedSearch\\Domain\\Search\\AbstractSearchLogic;\nuse Shopware\\Core\\Framework\\Api\\Context\\SalesChannelApiSource;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\n\nclass SearchLogicDecorator extends AbstractSearchLogic\n{\n    public function __construct(\n        private readonly AbstractSearchLogic $decorated,\n        private readonly ConfigurationLoader $configurationLoader\n    ) {\n    }\n\n    public function build(EntityDefinition $definition, Criteria $criteria, Context $context): BoolQuery\n    {\n        if (!$context->getSource() instanceof SalesChannelApiSource) {\n            return new BoolQuery();\n        }\n\n        $salesChannelId = $context->getSource()->getSalesChannelId();\n        // you probably want get the search configs of the context's sales channel but it's optional\n        $searchConfig = $this->configurationLoader->load($salesChannelId);\n\n        // you probably want to add extra logic into existing logic but it's optional\n        $bool = $this->getDecorated()->build($definition, $criteria, $context);\n\n        // Add your own logic\n        return $bool;\n    }\n\n    public function getDecorated(): AbstractSearchLogic\n    {\n        return $this->decorated;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule-Based Cart Logic\nDESCRIPTION: Shows how to check if a configured rule matches the current context before executing cart manipulations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set ruleId = services.config.app('exampleRule') %}\n\n{% if ruleId and ruleId in hook.context.ruleIds %}\n    {# perform action #}\n{% else %}\n   {# revert action #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datepicker Options in Twig\nDESCRIPTION: This snippet demonstrates how to configure the datepicker plugin by passing options through a Twig variable. It sets the locale and enables time selection.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-the-datepicker-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n\n    {% set pickerOptions = {\n        locale: app.request.locale,\n        enableTime: true\n    } %}\n    \n    <label>\n        <input type=\"text\"\n               name=\"customDate\"\n               class=\"customDate\"\n               data-date-picker\n               data-date-picker-options=\"{{ pickerOptions|json_encode|escape('html_attr') }}\"\n        />\n    </label>\n\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundle Repository for Shopware 5 API Migration in PHP\nDESCRIPTION: Defines a `BundleRepository` class extending `AbstractRepository` in a Shopware 5 plugin. It fetches bundle data and related product IDs from the `s_bundles` and `s_bundle_products` tables using Doctrine DBAL, preparing data for API exposure via the Migration Connector. Depends on Doctrine DBAL and the `SwagMigrationConnector` plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace SwagMigrationBundleApiExample\\Repository;\n\nuse Doctrine\\DBAL\\Connection;\nuse SwagMigrationConnector\\Repository\\AbstractRepository;\n\nclass BundleRepository extends AbstractRepository\n{\n    /**\n     * Fetch bundles using offset and limit\n     *\n     * @param int $offset\n     * @param int $limit\n     *\n     * @return array\n     */\n    public function fetch($offset = 0, $limit = 250)\n    {\n        $ids = $this->fetchIdentifiers('s_bundles', $offset, $limit);\n\n        $query = $this->connection->createQueryBuilder();\n\n        $query->from('s_bundles', 'bundles');\n        $this->addTableSelection($query, 's_bundles', 'bundles');\n\n        $query->where('bundles.id IN (:ids)');\n        $query->setParameter('ids', $ids, Connection::PARAM_STR_ARRAY);\n\n        $query->addOrderBy('bundles.id');\n\n        return $query->execute()->fetchAll();\n    }\n\n    /**\n     * Fetch all bundle products by bundle ids\n     *\n     * @param array $ids\n     *\n     * @return array\n     */\n    public function fetchBundleProducts(array $ids)\n    {\n        $query = $this->connection->createQueryBuilder();\n\n        $query->from('s_bundle_products', 'bundleProducts');\n        $this->addTableSelection($query, 's_bundle_products', 'bundleProducts');\n\n        $query->where('bundleProducts.bundle_id IN (:ids)');\n        $query->setParameter('ids', $ids, Connection::PARAM_INT_ARRAY);\n\n        return $query->execute()->fetchAll(\\PDO::FETCH_GROUP | \\PDO::FETCH_COLUMN);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Role CRUD Service in PHP for B2B Suite\nDESCRIPTION: This code defines a RoleCrudService class that extends AbstractCrudService. It includes methods for creating request objects and performing CRUD operations on Role entities.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/crud-service.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Role\\Framework;\n\nuse Shopware\\B2B\\Common\\Service\\AbstractCrudService;\nuse Shopware\\B2B\\Common\\Service\\CrudServiceRequest;\nuse Shopware\\B2B\\Common\\Validator\\ValidationException\n\nclass RoleCrudService extends AbstractCrudService\n{\n    [...]\n\n    public function createNewRecordRequest(array $data): CrudServiceRequest\n    {\n        return new CrudServiceRequest(\n            $data,\n            [\n                'name',\n                'contextOwnerId',\n                'parentId',\n            ]\n        );\n    }\n\n    public function createExistingRecordRequest(array $data): CrudServiceRequest\n    {\n        return new CrudServiceRequest(\n            $data,\n            [\n                'id',\n                'name',\n                'contextOwnerId',\n            ]\n        );\n    }\n\n    /**\n     * @throws ValidationException\n     */\n    public function create(CrudServiceRequest $request, OwnershipContext $ownershipContext): RoleEntity\n    {\n        [...]\n    }\n\n    /**\n     * @throws ValidationException\n     */\n    public function update(CrudServiceRequest $request, OwnershipContext $ownershipContext): RoleEntity\n    {\n        [...]\n    }\n\n    public function remove(CrudServiceRequest $request, OwnershipContext $ownershipContext): RoleEntity\n    {\n        [...]\n    }\n    \n    public function move(CrudServiceRequest $request, OwnershipContext $ownershipContext): RoleEntity\n    {\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Currency-Aware Entity in PHP\nDESCRIPTION: Example of implementing the CurrencyAware interface in an entity class. Shows how to handle currency factors and specify amount properties for currency calculations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\B2B\\Currency\\Framework\\CurrencyAware;\n\nclass MyEntity implements CurrencyAware\n{\n    public float $amount1;\n\n    public float $amount2;\n\n    private float $factor;\n\n    public function getCurrencyFactor(): float\n    {\n        return $this->factor;\n    }\n\n    public function setCurrencyFactor(float $factor)\n    {\n        $this->factor = $factor;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getAmountPropertyNames(): array\n    {\n        return [\n            'amount1',\n            'amount2',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving and Re-Fetching Entity Data After Save in Shopware Admin (JavaScript)\nDESCRIPTION: This JavaScript snippet provides the implementation for saving entity data and immediately re-fetching it to ensure data consistency within the Shopware administration context. It defines an 'onSave' method that saves the current data via a repository, then calls 'loadEntityData' upon successful persistence. The 'loadEntityData' function queries the repository for the fresh entity data using the saved ID, then updates the local state. Dependencies include the Shopware Context API and the repository pattern. Inputs are the current state and entity ID; outputs are updated entity state in the admin UI. Limitations include the need for asynchronous handling and potential complexities in merging state if there are concurrent updates.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-09-17-the-best-practice-to-always-re-fetch-the-data-after-saving.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\\n// This method for button save\\nonSave() {\\n    this.repository.save(this.data, Shopware.Context.api).then(() => {\\n        // We should add the method to re-fetch the entity data after save success here\\n        this.loadEntityData();\\n    });\\n},\\n\\n// This method to re-fetch the data\\nloadEntityData() {\\n    const criteria = new Criteria();\\n    const context = { ...Shopware.Context.api, inheritance: true };\\n\\n    this.repository.get(this.data.id, context, criteria).then((data) => {\\n        this.data = data;\\n    });\\n},\n```\n\n----------------------------------------\n\nTITLE: Registering a CMS Block Preview Component\nDESCRIPTION: This code registers a preview component for the CMS block, which will be displayed in the block selection interface. It imports the necessary template and styles for the preview representation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/preview/index.js\nimport template from './sw-cms-preview-my-image-text-reversed.html.twig';\nimport './sw-cms-preview-my-image-text-reversed.scss';\n\nShopware.Component.register('sw-cms-preview-my-image-text-reversed', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Order Change Listener in PHP\nDESCRIPTION: Basic implementation of an event subscriber that listens to order write events. Checks for live version changes to prevent reacting to draft changes in admin interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/listen-to-order-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Checkout\\Order\\OrderEvents;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ListenToOrderChanges implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            OrderEvents::ORDER_WRITTEN_EVENT => 'onOrderWritten',\n        ];\n    }\n\n    public function onOrderWritten(EntityWrittenEvent $event): void\n    {\n        // Making sure we're only reacting to changes in the live version\n        if ($event->getContext()->getVersionId() !== Defaults::LIVE_VERSION) {\n            return;\n        }\n\n        // Do stuff\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tab to Product Detail in Shopware 6 Plugin\nDESCRIPTION: This twig template extends the product detail page by adding a new custom tab while preserving existing tabs.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% block sw_product_detail_content_tabs_reviews %}\n\n    {% parent %}\n\n    <sw-tabs-item :route=\"{ name: 'sw.product.detail.custom', params: { id: $route.params.id } }\" title=\"Custom\">\n        Custom\n    </sw-tabs-item>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to sw_thumbnails in Twig\nDESCRIPTION: Example of adding custom HTML attributes such as class, alt, and title to the generated image using the attributes parameter of sw_thumbnails.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-thumbnails' with {\n    media: cover,\n    attributes: {\n        'class': 'my-custom-class',\n        'alt': 'alt tag of image',\n        'title': 'title of image'\n    }\n} %}\n```\n\n----------------------------------------\n\nTITLE: Searching for a Storefront Product using Store Facade in Twig\nDESCRIPTION: Shows how to use the store.search() method to load a single product for the storefront, with prices already calculated based on the current context.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'ids': [ hook.productId ]\n} %}\n\n{% set product = services.store.search('product', criteria).first %}\n\n{% do page.addExtension('myProduct', product) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Update Method in Shopware\nDESCRIPTION: Method executed during plugin updates. Primarily used for non-database related updates as database changes should be handled through migrations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/plugin-lifecycle.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function update(UpdateContext $updateContext$context): void\n{\n    // Update necessary stuff, mostly non-database related\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Theme Configuration with Tabs, Blocks, and Sections in Shopware\nDESCRIPTION: This snippet demonstrates how to structure a Shopware theme configuration using tabs, blocks, and sections. It includes an example of defining a color field within a specific tab, block, and section.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"Just another theme\",\n  \"author\": \"Just another author\",\n\n  \"config\": {\n    \"fields\": {\n      \"sw-color-brand-primary\": {\n        \"label\": {\n          \"en-GB\": \"Primary colour\",\n          \"de-DE\": \"Primär\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#399\",\n        \"editable\": true,\n        \"tab\": \"colors\",\n        \"block\": \"themeColors\",\n        \"section\": \"importantColors\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin with Colorpicker Field\nDESCRIPTION: Defines a plugin configuration field in XML for a color picker that will be used to set the SCSS variable value. This enables customization of the header background color through the admin interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/SystemConfig/Schema/config.xsd\">\n\n    <card>\n        <title>Example configuration</title>\n        <input-field type=\"colorpicker\">\n            <name>sassPluginHeaderBgColor</name>\n            <label>Header background color</label>\n        </input-field>\n    </card>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Log Handler in Shopware 6 Plugin\nDESCRIPTION: YAML configuration that defines both a custom Monolog channel and a rotating file handler for a Shopware plugin. This setup directs error-level logs to a dedicated log file in the kernel's logs directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n  channels: ['my_plugin_channel']\n\n  handlers:\n    myPluginLogHandler:\n        type: rotating_file\n        path: \"%kernel.logs_dir%/my_plugin_%kernel.environment%.log\"\n        level: error\n        channels: [ \"my_plugin_channel\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Twig Macro for App Script Evaluation\nDESCRIPTION: This Twig snippet defines a macro named `evaluate` which takes parameters (`%1$s`) and executes the app's custom script (`%2$s`). This structure allows the use of `return` statements within the app script, and the result can be captured for boolean evaluation by the `ScriptRule`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{%% macro evaluate(%1$s) %%}\n    %2$s\n{%% endmacro %%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Path in theme.json\nDESCRIPTION: JSON configuration that defines the custom asset path in theme.json file for a Shopware theme. The asset path points to the storefront assets directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-assets-to-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"asset\": [\n     \"app/storefront/src/assets\"\n   ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Handlers in JavaScript\nDESCRIPTION: JavaScript implementation of a request handler that processes Shopware app lifecycle events. Uses the @shopware-ag/app-server-sdk to handle registration and lifecycle webhooks including activation, deactivation, and deletion.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/02-lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppServer, InMemoryShopRepository } from '@shopware-ag/app-server-sdk'\n\nconst app = new AppServer({\n  appName: 'MyApp',\n  appSecret: 'my-secret',\n  authorizeCallbackUrl: 'http://localhost:3000/authorize/callback',\n}, new InMemoryShopRepository());\n\nexport default {\n  async fetch(request) {\n    const { pathname } = new URL(request.url);\n    if (pathname === '/authorize') {\n      return app.registration.authorize(request);\n    } if (pathname === '/authorize/callback') {\n      return app.registration.authorizeCallback(request);\n    } if (pathname === '/app/activate') {\n      return app.registration.activate(request);\n    } if (pathname === '/app/deactivate') {\n      return app.registration.deactivate(request);\n    } if (pathname === '/app/delete') {\n      return app.registration.delete(request);\n    }\n\n    return new Response('Not found', { status: 404 });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing sw-text-field Component in Shopware Template\nDESCRIPTION: Example showing how to use the sw-text-field base component in a Shopware 6 Administration template. The component renders a text input field with advanced functionality like inheritance support.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/using-base-components.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <sw-text-field />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO URL Updates for Custom Entity Deletions in Shopware\nDESCRIPTION: This PHP class subscribes to entity events to update SEO URLs when a custom entity is deleted. It uses the SeoUrlUpdater to handle the updates.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Content\\Seo\\SeoUrlUpdater;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeletedEvent;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenEvent;\nuse Swag\\BasicExample\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ExamplePageSeoUrlRoute;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DynamicSeoUrlPageSubscriber implements EventSubscriberInterface\n{\n    // ...\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            'swag_example.written' => 'onEntityWritten',\n            'swag_example.deleted' => 'onEntityDeleted'\n        ];\n    }\n\n    // ...\n\n    public function onEntityDeleted(EntityDeletedEvent $event): void\n    {\n        $this->seoUrlUpdater->update(ExamplePageSeoUrlRoute::ROUTE_NAME, $event->getIds());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GridRepository Interface in PHP for Shopware B2B\nDESCRIPTION: This code snippet shows the methods required to implement the GridRepository interface in Shopware B2B Suite. It includes methods for getting the main table alias, full-text search fields, and additional search resources and fields.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/listing-service.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nuse Shopware\\B2B\\Common\\Controller\\GridRepository;\n\nclass Repository implements GridRepository\n{\n    public function getMainTableAlias(): string;\n\n    /**\n     * @return string[]\n     */\n    public function getFullTextSearchFields(): array;\n\n    public function getAdditionalSearchResourceAndFields(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Date Condition Example in manifest.xml\nDESCRIPTION: XML definition for a custom date condition that doesn't require any input fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/rule-builder/add-custom-rule-conditions.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<!-- ... -->\n<rule-condition>\n    <identifier>date_condition</identifier>\n    <name>Custom date condition</name>\n    <group>misc</group>\n    <script>date-condition.twig</script>\n</rule-condition>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Responsive sw_thumbnails with Custom Sizes for Different Viewports\nDESCRIPTION: Advanced implementation of sw_thumbnails that defines specific image sizes for different Bootstrap viewports. This allows for responsive images that adapt to different screen sizes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-thumbnails' with {\n    media: cover,\n    sizes: {\n        'xs': '501px',\n        'sm': '315px',\n        'md': '427px',\n        'lg': '333px',\n        'xl': '284px',\n    }\n} %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disk Space Check Logic in Shopware 6\nDESCRIPTION: Implements the core logic for the disk space check, including constructor dependencies, the main run method, and a helper method to calculate free disk space. The check evaluates if available disk space is below a warning threshold.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/system-check/add-custom-check.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass LocalDiskSpaceCheck extends BaseCheck\n{\n    public function __construct(\n        private readonly string $adapterType,\n        private readonly string $installationPath,\n        private readonly int $warningThresholdInMb\n    )\n    {\n    }\n\n    public function run(): Result\n    {\n        if ($this->adapterType !== 'local') {\n           return new Result(name: $this->name(), status: Status::SKIPPED, message: 'Disk space check is only available for local file systems.', healthy: true)\n        }\n        \n        $availableSpaceInMb = $this->getFreeDiskSpaceInMegaBytes();\n        if ($availableSpaceInMb < $this->warningThresholdInMb) {\n            return new Result(name: $this->name(), status: Status::WARNING, message: sprintf('Available disk space is below the warning threshold of %s.', $this->warningThresholdInMb), healthy: true);\n        }\n\n        return new Result(name: $this->name(), status: Status::OK, message: 'Disk space is sufficient.', healthy: true);\n    }\n\n     private function getFreeDiskSpaceInMegaBytes()\n     {\n        $freeSpace = disk_free_space($this->installationPath);\n        $totalSpace = disk_total_space($this->installationPath);\n        $availableSpace = $totalSpace - $freeSpace;\n\n        return $availableSpace / 1024 / 1024;\n     }\n    ...\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Shopware Projects Using Shopware CLI - Bash\nDESCRIPTION: This snippet demonstrates how to list all Shopware projects available in your account by using the Shopware CLI command `shopware projects`. It displays a tabular list of projects with key details such as ID, title, region, and organization. No additional dependencies are required beyond the Shopware CLI tool. The expected output is an overview of current projects, which can be used to obtain the project ID for further configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/repository.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware projects\n\nYour projects are:\n+---------------+-----------+------------------+--------------+\n| ID            | Title     | Region           | Organization |\n+---------------+-----------+------------------+--------------+\n| 7xasjkyld189e | paas-env  | <region-domain>  | shopware     |\n+---------------+-----------+------------------+--------------+\n\nGet a project by running: platform get [id]\nList a projects environments by running: platform environments -p [id]\n```\n\n----------------------------------------\n\nTITLE: Reloading Current Page Response with HTTP\nDESCRIPTION: HTTP response example that causes the current page to reload after an action button is clicked, refreshing the data displayed to the user.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"actionType\": \"reload\",\n  \"payload\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Vue Component Test with All Dependencies in Shopware\nDESCRIPTION: A comprehensive test setup for the sw-multi-select component with all required dependencies imported and stubbed. This example resolves all warnings by properly stubbing or implementing each required component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// test/app/component/form/select/base/sw-multi-select.spec.js\nimport { shallowMount } from '@vue/test-utils';\nimport 'src/app/component/form/select/base/sw-multi-select';\nimport 'src/app/component/form/select/base/sw-select-base';\nimport 'src/app/component/form/field-base/sw-block-field';\nimport 'src/app/component/form/field-base/sw-base-field';\nimport 'src/app/component/form/field-base/sw-field-error';\nimport 'src/app/component/form/select/base/sw-select-selection-list';\nimport 'src/app/component/form/select/base/sw-select-result-list';\nimport 'src/app/component/utils/sw-popover';\nimport 'src/app/component/form/select/base/sw-select-result';\nimport 'src/app/component/base/sw-highlight-text';\nimport 'src/app/component/base/sw-label';\nimport 'src/app/component/base/sw-button';\n\ndescribe('components/sw-multi-select', () => {\n    let wrapper;\n\n    beforeEach(() => {\n        wrapper = shallowMount(Shopware.Component.build('sw-multi-select'), {\n            props: {\n                options: [],\n                value: ''\n            },\n            stubs: {\n                'sw-select-base': Shopware.Component.build('sw-select-base'),\n                'sw-block-field': Shopware.Component.build('sw-block-field'),\n                'sw-base-field': Shopware.Component.build('sw-base-field'),\n                'sw-icon': '<div></div>',\n                'sw-field-error': Shopware.Component.build('sw-field-error'),\n                'sw-select-selection-list': Shopware.Component.build('sw-select-selection-list'),\n                'sw-select-result-list': Shopware.Component.build('sw-select-result-list'),\n                'sw-popover': Shopware.Component.build('sw-popover'),\n                'sw-select-result': Shopware.Component.build('sw-select-result'),\n                'sw-highlight-text': Shopware.Component.build('sw-highlight-text'),\n                'sw-label': Shopware.Component.build('sw-label'),\n                'sw-button': Shopware.Component.build('sw-button')\n            }\n        });\n    });\n\n    afterEach(() => {\n        wrapper.destroy();\n    });\n\n    it('should be a Vue.js component', () => {\n        expect(wrapper.vm).toBeTruthy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Migration Credentials Form Layout - Shopware Administration - Twig (HTML)\nDESCRIPTION: This HTML/Twig snippet constructs the UI for the migration credentials form in Shopware Administration. The template uses Twig block structures for extensibility, binds Vue.js model properties to each form input, and applies labels/placeholders with translations. It requires usage within Shopware's Administration framework, expects the component's data props and methods to be present, and primarily outputs a styled credentials form with validation interfaces.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n{% block own_profile_page_credentials %}\n    <div class=\"swag-migration-wizard swag-migration-wizard-page-credentials\"\n         @keypress.enter=\"onKeyPressEnter\">\n        {% block own_profile_page_credentials_content %}\n            <div class=\"swag-migration-wizard__content\">\n                {% block own_profile_page_credentials_information %}\n                    <div class=\"swag-migration-wizard__content-information\">\n                        {% block own_profile_page_credentials_local_hint %}\n                            {{ $tc('swag-migration.wizard.pages.credentials.shopware55.local.contentInformation') }}\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n\n                {% block own_profile_page_credentials_credentials %}\n                    <div class=\"swag-migration-wizard__form\">\n                        {% block own_profile_page_credentials_local_db_host_port_group %}\n                            <sw-container columns=\"1fr 80px\"\n                                          gap=\"16px\">\n                                {% block own_profile_page_credentials_local_dbhost_field %}\n                                    <sw-text-field v-autofocus\n                                                   name=\"sw-field--dbHost\"\n                                                   :label=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbHostLabel')\"\n                                                   :placeholder=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbHostPlaceholder')\"\n                                                   v-model=\"inputCredentials.dbHost\">\n                                    </sw-text-field>\n                                {% endblock %}\n\n                                {% block own_profile_page_credentials_local_dbport_field %}\n                                    <sw-field name=\"sw-field--dbPort\"\n                                              :label=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbPortLabel')\"\n                                              v-model=\"inputCredentials.dbPort\">\n                                    </sw-field>\n                                {% endblock %}\n                            </sw-container>\n                        {% endblock %}\n\n                        {% block own_profile_page_credentials_local_dbuser_field %}\n                            <sw-field name=\"sw-field--dbUser\"\n                                      :label=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbUserLabel')\"\n                                      :placeholder=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbUserPlaceholder')\"\n                                      v-model=\"inputCredentials.dbUser\">\n                            </sw-field>\n                        {% endblock %}\n\n                        {% block own_profile_page_credentials_local_dbpassword_field %}\n                            <sw-field name=\"sw-field--dbPassword\"\n                                      type=\"password\"\n                                      :label=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbPasswordLabel')\"\n                                      :placeholder=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbPasswordPlaceholder')\"\n                                      v-model=\"inputCredentials.dbPassword\">\n                            </sw-field>\n                        {% endblock %}\n\n                        {% block own_profile_page_credentials_local_dbname_field %}\n                            <sw-field name=\"sw-field--dbName\"\n                                      :label=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbNameLabel')\"\n                                      :placeholder=\"$tc('swag-migration.wizard.pages.credentials.shopware55.local.dbNamePlaceholder')\"\n                                      v-model=\"inputCredentials.dbName\">\n                            </sw-field>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining the AppScriptConditionDefinition Entity in PHP\nDESCRIPTION: Defines the Doctrine entity `AppScriptConditionDefinition` for storing app-specific rule conditions. It includes fields for the script content (`script`), validation constraints (`constraints`), activation status (`active`), grouping (`group`), and links to the app (`app_id`) and the rules using it (`conditions` association). This entity is central to persisting custom rule logic provided by apps.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass AppScriptConditionDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'app_script_condition';\n\n    // ...\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new PrimaryKey(), new Required()),\n            new TranslatedField('name'),\n            (new BoolField('active', 'active'))->addFlags(new Required()),\n            new StringField('group', 'group'),\n            (new LongTextField('script', 'script'))->addFlags(new Required(), new AllowHtml(false)),\n            new JsonField('constraints', 'constraints'),\n            (new FkField('app_id', 'appId', AppDefinition::class))->addFlags(new Required()),\n            (new OneToManyAssociationField('conditions', RuleConditionDefinition::class, 'script_id', 'id'))->addFlags(new SetNullOnDelete(), new ReverseInherited('script')),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Cart Calculations\nDESCRIPTION: Shows how to safely handle multiple cart calculation executions by checking for existing items or using custom states.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if not services.cart.has('my-custom-discount') %}\n    {% do services.cart.discount('my-custom-discount', 'percentage', 10, 'A custom discount') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Spans to Shopware Profiler in PHP\nDESCRIPTION: This PHP snippet demonstrates how to add custom spans to the Shopware profiler using the Profiler::trace method. It allows for measuring the performance of specific code blocks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/profiling.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Profiling\\Profiler;\n\n$value = Profiler::trace('my-example-trace', function () {\n    return $myFunction();\n});\n```\n\n----------------------------------------\n\nTITLE: Composable Store Pattern\nDESCRIPTION: Example of using composables as a store in Pinia with reactive properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = Shopware.Store.register('<storeName>', function() {\n  const count = ref(0);\n\n  const doubled = computed(() => count.value * 2);\n\n  function increment() {\n    count.value++;\n  }\n\n  function decrement() {\n    count.value--;\n  }\n\n  return { count, doubled, increment, decrement };\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing 'Show More Results' Link in Shopware 6 Search\nDESCRIPTION: This Twig template customizes the 'Show More Results' link in Shopware 6's search component. It adds a condition for a custom entity type to display a different message and link to an external system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% block sw_search_more_results %}\n    <template v-if=\"result.entity === 'foo_bar'\">\n        There are so many hits.\n        <a :href=\"'https://my.erp.localhost/?q=' + searchTerm\"\n           class=\"sw-search-bar-item__link\"\n           target=\"_blank\">\n             Look it directly up\n        </a>\n        in the ERP instead.\n    </template>\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: CMS Element Preview Component Registration\nDESCRIPTION: Component registration for the preview display of the Dailymotion element in the CMS editor.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from './sw-cms-el-preview-dailymotion.html.twig';\nimport './sw-cms-el-preview-dailymotion.scss';\n\nShopware.Component.register('sw-cms-el-preview-dailymotion', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Store API Hook Reference Documentation\nDESCRIPTION: Documentation for store-api-{hook} endpoint including cache_key and response functions. Details implementation requirements for cached routes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | store-api-{hook} |\n| Since | 6.4.9.0 |\n| Class | Shopware\\Core\\Framework\\Script\\Api\\StoreApiCacheKeyHook |\n```\n\n----------------------------------------\n\nTITLE: Overriding Search More Results Component in Shopware 6\nDESCRIPTION: These JavaScript snippets demonstrate how to override the sw-search-more-results component in Shopware 6 Administration. It imports a custom template and applies it to the component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\n\nShopware.Component.override('sw-search-more-results', () => import('./app/component/structure/sw-search-more-results'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/app/component/structure/sw-search-more-results/index.js\nimport template from './sw-search-more-results.html.twig';\n\nexport default {\n    template\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Cache Invalidation Subscriber in Shopware services.xml\nDESCRIPTION: This XML configuration registers the CacheInvalidationSubscriber service in the Symfony container and injects the CacheInvalidator dependency. This setup allows the subscriber to be automatically loaded and used by Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-caching-for-store-api-route.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n\n<?xml version=\"1.0\" ?> \n\n<container xmlns=\"http://symfony.com/schema/dic/services\" \n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    \n    <services> \n        <service id=\" Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\CacheInvalidationSubscriber\">\n            <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Enabling Inheritance in Entity Definition in PHP\nDESCRIPTION: Method override in an entity definition class that enables inheritance support by returning true from isInheritanceAware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\npublic function isInheritanceAware(): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Plugin Options in Shopware 6\nDESCRIPTION: Demonstrates how to define static options for a Shopware 6 plugin, including setting default values and using them within the plugin's functionality. This example shows a scroll event listener that triggers an alert with configurable text.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PluginBaseClass } = window;\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    static options = {\n        /**\n         * Specifies the text that is prompted to the user\n         * @type string\n         */\n        text: 'Seems like there\\'s nothing more to see here.',\n    };\n\n    init() {\n        window.addEventListener('scroll', this.onScroll.bind(this));\n    }\n\n    onScroll() {\n        if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight) {\n            alert(this.options.text);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Theme in Shopware\nDESCRIPTION: JSON configuration for a basic corporate design theme in Shopware. It defines color settings, brand icon, and other customizable fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-inheritance-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleTheme\",\n  .....\n  \"config\": {\n    \"blocks\": {\n      \"colors\": {\n        \"themeColors\": {\n          \"en-GB\": \"Theme colours\",\n          \"de-DE\": \"Theme Farben\"\n        }\n      }\n    },\n    \"sections\": {\n      \"importantColors\": {\n        \"label\": {\n          \"en-GB\": \"Important colors\",\n          \"de-DE\": \"Wichtige Farben\"\n        }\n      }\n    },\n    \"tabs\": {\n      \"colors\": {\n          \"label\": {\n              \"en-GB\": \"Colours\",\n              \"de-DE\": \"Farben\"\n          }\n      } \n    },\n    \"fields\": {\n      \"sw-color-brand-primary\": {\n        \"label\": {\n          \"en-GB\": \"Primary colour\",\n          \"de-DE\": \"Primär\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#399\",\n        \"editable\": true,\n        \"tab\": \"colors\",\n        \"block\": \"themeColors\",\n        \"section\": \"importantColors\"\n      },\n      \"sw-brand-icon\": {\n        \"label\": {\n            \"en-GB\": \"Brand icon\", \n            \"de-DE\": \"Markenlogo\"\n        },\n        \"type\": \"url\",\n        \"value\": \"/our-logo.png\",\n        \"editable\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring App Scripts in Shopware\nDESCRIPTION: Shows the recommended file structure for organizing App Scripts in a Shopware app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── DemoApp\n    ├── Resources\n    │   └── scripts                         // all scripts are stored in this folder\n    │       ├── product-page-loaded         // each script in this folder will be executed when the `product-page-loaded` hook is triggered\n    │       │   └── my-first-script.twig\n    │       ├── cart\n    │       │   ├── first-cart-script.twig\n    │       │   └── second-cart-script.twig // you can execute multiple scripts per hook\n    │       └── ...\n    └── manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Price using API Criteria in JSON\nDESCRIPTION: Shows how to use the API to calculate the average price of products. It includes both the request payload and the expected response format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {  \n            \"name\": \"avg-price\",\n            \"type\": \"avg\",\n            \"field\": \"price\"\n        }\n    ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"avg-price\": {\n            \"avg\": 505.73333333333335,\n            \"extensions\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Search Results using Repository Facade in Twig\nDESCRIPTION: Shows how to use the repository.search() method with a filter to find a product by its product number.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'filter': [\n        { 'field': 'productNumber', 'type': 'equals', 'value': 'p1' }\n    ]\n} %}\n\n{% set product = services.repository.search('product', criteria).first %}\n\n{% do page.addExtension('myProduct', product) %}\n```\n\n----------------------------------------\n\nTITLE: Registering Synchronous Component in Shopware 6\nDESCRIPTION: Shows how to import and register a component synchronously in the main.js file. This approach loads the component immediately during application startup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport './component/custom-component/hello-world';\n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Purchase Gateway with PHP SDK\nDESCRIPTION: PHP code using the Shopware App PHP SDK to handle In-App Purchase Gateway requests. This example shows how to filter purchases based on business logic.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/in-app-purchase/in-app-purchase-gateway.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction inAppPurchasesController(): ResponseInterface {\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($request);\n\n    $inAppPurchaseProvider = new InAppPurchaseProvider(new SBPStoreKeyFetcher(\n        (new ClientFactory())->createClient($shop)\n    ));\n    \n    $contextResolver = new ContextResolver($inAppPurchaseProvider);\n    \n    /** @var Shopware\\App\\SDK\\Context\\Gateway\\InAppFeatures\\FilterAction $action */\n    $action = $contextResolver->assembleInAppPurchasesFilterRequest($request, $shop);\n    \n    /** @var Shopware\\App\\SDK\\Framework\\Collection $purchases */\n    $purchases = $action->getPurchases();\n    \n    // filter the purchases based on your business logic\n    $purchases->remove('my-in-app-purchase-gold');\n    \n    $response = InAppPurchasesResponse::filter($purchases);\n    \n    return $signer->sign($response);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storefront Product IDs using Store Facade in Twig\nDESCRIPTION: Demonstrates how to use the store.ids() method to get the IDs of storefront products matching a specific criteria.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'filter': [\n        { 'field': 'productNumber', 'type': 'equals', 'value': 'p1' }\n    ]\n} %}\n\n{% set productIds = services.store.ids('product', criteria).ids %}\n\n{% do page.addArrayExtension('myProductIds', {\n    'ids': productIds\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flag in Admin Template (HTML/Vue)\nDESCRIPTION: Shows how to conditionally render an element (e.g., `<sw-field>`) in a Shopware Administration Vue template based on a feature flag ('v6.5.0.0'). This assumes the 'feature' service has been injected into the corresponding component.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<sw-field type=\"text\" v-if=\"feature.isActive('v6.5.0.0')\"></sw-field>\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Pass to Plugin Container\nDESCRIPTION: Extending the plugin's main class to add the RateLimiterCompilerPass to the DI container. The pass is added with TYPE_BEFORE_OPTIMIZATION and a high priority to ensure it's processed before the rate limiter service is built.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rate-limiter/add-rate-limiter-to-api-route.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/SwagBasicExample.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample;\n\nuse Swag\\BasicExample\\CompilerPass\\RateLimiterCompilerPass;\nuse Shopware\\Core\\Framework\\Plugin;\nuse Shopware\\Core\\Framework\\Plugin\\Context\\InstallContext;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\PassConfig;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\nclass SwagBasicExample extends Plugin\n{\n    public function build(ContainerBuilder $container): void\n    {\n        parent::build($container);\n\n        $container->addCompilerPass(new RateLimiterCompilerPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, 500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translatable CustomFields to Entity Definition in PHP\nDESCRIPTION: This code shows how to add translatable custom fields to an entity definition using the TranslatedField. It enables localization of custom field data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\TranslatedField;                                                               \n\n[...]\n\nclass ExampleDefinition extends EntityDefinition\n{\n    [...]\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            (new StringField('name', 'name')),\n            (new StringField('description', 'description')),\n            (new BoolField('active', 'active')),\n\n            new TranslatedField('customFields'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shopware 5 API Controller for Bundle Data in PHP\nDESCRIPTION: Implements a Shopware 5 REST API controller (`Shopware_Controllers_Api_SwagMigrationBundles`) extending `Shopware_Controllers_Api_Rest`. The `indexAction` retrieves bundle data by fetching the `BundleService` from the container, calling its `getBundles` method with pagination parameters (offset, limit), and returning the data structured using `ControllerReturnStruct` for consumption by the Shopware 6 Migration Assistant.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * (c) shopware AG <info@shopware.com>\n * For the full copyright and license information, please view the LICENSE\n * File that was distributed with this source code\n */\n\nuse SwagMigrationBundleApiExample\\Service\\BundleService;\nuse SwagMigrationConnector\\Service\\ControllerReturnStruct;\n\nclass Shopware_Controllers_Api_SwagMigrationBundles extends Shopware_Controllers_Api_Rest\n{\n    public function indexAction()\n    {\n        $offset = (int) $this->Request()->getParam('offset', 0);\n        $limit = (int) $this->Request()->getParam('limit', 250);\n\n        /** @var BundleService $bundleService */\n        $bundleService = $this->container->get('swag_migration_bundle_api_example.bundle_service');\n\n        $bundles = $bundleService->getBundles($offset, $limit);\n        $response = new ControllerReturnStruct($bundles, empty($bundles));\n\n        $this->view->assign($response->jsonSerialize());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Symfony Bundle Tax Provider Controller\nDESCRIPTION: Example of a Symfony controller implementation for tax provider functionality, using attributes for routing and controller definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/tax-provider.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[AsController]\nclass TaxController {\n    #[Route('/tax.process')]\n    public function handle(TaxProviderAction $taxInfo): ResponseInterface {\n        $builder = new TaxProviderResponseBuilder();\n\n        foreach ($taxInfo->cart->getLineItems() as $item) {\n            $taxRate = 50;\n            $price = $item->getPrice()->getTotalPrice() * $taxRate / 100;\n            $builder->addLineItemTax($item->getUniqueIdentifier(), new CalculatedTax(\n                tax: $price,\n                taxRate: $taxRate,\n                price: $item->getPrice()->getTotalPrice()\n            ));\n        }\n\n        foreach ($taxProviderContext->cart->getDeliveries() as $item) {\n            foreach ($item->getPositions() as $position) {\n                $builder->addDeliveryTax($position->getIdentifier(), new CalculatedTax(\n                    tax: 10,\n                    taxRate: 50,\n                    price: 100\n                ));\n            }\n        }\n\n        $builder->addCartTax(new CalculatedTax(\n            tax: 20,\n            taxRate: 50,\n            price: 100\n        ));\n        \n        return $builder->build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Notice with Parameters to Cart in Twig\nDESCRIPTION: Shows how to add a notice to the cart with additional parameters for the message.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.errors.notice('MESSAGE_WITH_PARAMETERS', null, {'foo': 'bar'}) %}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Shopware Extension\nDESCRIPTION: Command to install the OpenTelemetry Shopware bundle using Composer. This will also create a new configuration file for production environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/opentelemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require shopware/opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Statistics using API Criteria in JSON\nDESCRIPTION: Illustrates how to use the API to calculate multiple statistics (max, min, avg, sum) for product prices in a single query. It includes both the request payload and the expected response format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {  \n            \"name\": \"stats-price\",\n            \"type\": \"stats\",\n            \"field\": \"price\"\n        }\n    ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"stats-price\": {\n            \"min\": \"5\",\n            \"max\": \"979\",\n            \"avg\": 505.73333333333335,\n            \"sum\": 30344,\n            \"extensions\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ReferenceVersionField to Entity Definition in PHP\nDESCRIPTION: Updates the entity definition to include a ReferenceVersionField for versioned foreign key relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/versioning-entities.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        new VersionField(),\n        (new ReferenceVersionField(self::class, 'parent_version_id')),\n        ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VersionField to Entity Definition in PHP\nDESCRIPTION: Updates the entity definition to include a VersionField for versioning support.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/versioning-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        new VersionField(),\n        ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Content with PseudoModalUtil in JavaScript\nDESCRIPTION: Demonstrates how to create a modal, update its content dynamically, and handle callbacks after content updates using PseudoModalUtil. Shows implementation of modal open and update events with proper template structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PluginBaseClass } = window;\nimport PseudoModalUtil from 'src/utility/modal-extension/pseudo-modal.util';\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        // declaring some basic content\n        const content = `\n            <div class=\"js-pseudo-modal-template\">\n                <div class=\"js-pseudo-modal-template-title-element\">Modal title</div>\n                <div class=\"js-pseudo-modal-template-content-element\">Modal content</div>\n            </div>\n        `;\n        \n        this.openModal(content);\n        \n        // ... do some stuff\n\n        const updatedContent = `\n            <div class=\"js-pseudo-modal-template\">\n                <div class=\"js-pseudo-modal-template-title-element\">Modal title</div>\n                <div class=\"js-pseudo-modal-template-content-element\">Updated content</div>\n            </div>\n        `;\n        \n        this.modal.updateModal(updatedContent, this.onUpdateModal.bind(this));\n    }\n    \n    openModal(content) {\n        // create a new modal instance\n        this.modal = new PseudoModalUtil(content);\n        \n        // open the modal window and fire a callback function\n        this.modal.open(this.onOpenModal.bind(this));\n    }\n    \n    onOpenModal() {\n        console.log('the modal is opened');\n    }\n\n    onUpdateModal() {\n        console.log('the modal was updated');\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Using Snippets in JavaScript Component\nDESCRIPTION: Demonstrates how to access translation snippets within a JavaScript component using the Vue I18n $tc helper function.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/adding-snippets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nComponent.register('my-custom-page', {\n    ...\n\n    methods: {\n        createdComponent() {\n            // call the $tc helper function provided by Vue I18n \n            const myCustomText = this.$tc('swag-example.general.myCustomText');\n\n            console.log(myCustomText);\n        }\n    }\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Shipping Method Command in Shopware 6\nDESCRIPTION: This command removes a shipping method from the available shipping methods. It requires the technical name of the shipping method as a string payload.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/command-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `remove-shipping-method` | Removes a shipping method from the available shipping methods.                                                                                               | `{\"shippingMethodTechnicalName\": \"string\"}`                    | 6.6.3.0 |\n```\n\n----------------------------------------\n\nTITLE: Implementing GridHelper Class in PHP for Shopware B2B\nDESCRIPTION: This code defines the GridHelper class in Shopware B2B Suite, which handles binding HTTP request data to the SearchStruct and provides methods for extracting search data and getting the grid state array for frontend consumption.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/listing-service.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Common\\Controller;\n\nuse Shopware\\B2B\\Common\\MvcExtension\\Request;\nuse Shopware\\B2B\\Common\\Repository\\SearchStruct;\n\nclass GridHelper\n{\n    public function extractSearchDataInStoreFront(\n        Request $request, \n        SearchStruct $struct\n    ): void {\n        [...]\n    }\n\n    public function getGridState(\n        Request $request,\n        SearchStruct $struct,\n        array $data,\n        int $maxPage,\n        int $currentPage\n    ): array {\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DeviceHelper Resize Listener in JavaScript\nDESCRIPTION: Example of how to implement a resize event listener using the DeviceHelper in a Vue component. The listener can be used to add or remove classes based on viewport changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/ui-ux/adding-responsive-behavior.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst listener = function (ev) {\n    // do something on resize with the event, like adding or removing classes to elements   \n};\n\nconst scope = this;\nconst component = 'sw-basic-example';\n\nthis.$device.onResize({ listener, scope, component });\n```\n\n----------------------------------------\n\nTITLE: Field Restriction Using Includes\nDESCRIPTION: Demonstrates how to restrict returned fields using the includes parameter to reduce response payload\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Product Line Item from Cart in Twig\nDESCRIPTION: Example of using the add() and remove() methods to add and then remove a product line item from the cart in Twig. This snippet demonstrates the process of adding a product and then removing it from the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_28\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% do services.cart.products.remove(hook.ids.get('p1')) %}\n```\n\n----------------------------------------\n\nTITLE: Registering Admin Module with Feature Flag (JavaScript)\nDESCRIPTION: Illustrates how to associate a Shopware Administration module ('sw-awesome') with a feature flag ('v6.5.0.0') during registration. The module will only be loaded and available if the specified flag is active.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n \nModule.register('sw-awesome', {\n    flag: 'v6.5.0.0',\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Associations with Nested Criteria\nDESCRIPTION: Example showing how to use associations parameter with nested criteria for filtering and sorting\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"associations\": {\n        \"products\": {\n            \"limit\": 5,\n            \"filter\": [\n                { \"type\": \"equals\", \"field\": \"active\", \"value\": true }\n            ],\n            \"sort\": [\n                { \"field\": \"name\", \"order\": \"ASC\" }    \n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Ajax Panel Implementation in Twig\nDESCRIPTION: Shows the minimal implementation of an Ajax Panel component that loads content via XHR GET request.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div\n    class=\"b2b--ajax-panel\"\n    data-url=\"{{ path('frontend.b2b.b2bcontact.grid') }}\"\n>\n    <!-- will load content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Variable Subscriber in PHP\nDESCRIPTION: Creates a PHP subscriber class that listens to the ThemeCompilerEnrichScssVariablesEvent and adds custom SCSS variables. This implementation sets a fixed value for the header background color.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Storefront\\Theme\\Event\\ThemeCompilerEnrichScssVariablesEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ThemeVariableSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ThemeCompilerEnrichScssVariablesEvent::class => 'onAddVariables'\n        ];\n    }\n\n    public function onAddVariables(ThemeCompilerEnrichScssVariablesEvent $event): void\n    {\n        // Will render: $sass-plugin-header-bg-color: \"#59ccff\";\n        $event->addVariable('sass-plugin-header-bg-color', '#59ccff');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CMS Block XML Definition\nDESCRIPTION: XML configuration for defining a custom CMS block with slots and default configuration\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/content/cms/add-custom-cms-blocks.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<cms xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Cms/Schema/cms-1.0.xsd\">\n    <blocks>\n        <block>\n            <name>swag-image-text-reversed</name>\n            <category>text-image</category>\n            <label>Two columns, text &amp; boxed image</label>\n            <label lang=\"de-DE\">Zwei Spalten, Text &amp; gerahmtes Bild</label>\n            <slots>\n                <slot name=\"left\" type=\"text\">\n                    <config>\n                        <config-value name=\"vertical-align\" source=\"static\" value=\"top\"/>\n                    </config>\n                </slot>\n                <slot name=\"right\" type=\"image\">\n                    <config>\n                        <config-value name=\"display-mode\" source=\"static\" value=\"auto\"/>\n                        <config-value name=\"vertical-align\" source=\"static\" value=\"top\"/>\n                    </config>\n                </slot>\n            </slots>\n            <default-config>\n                <margin-top>20px</margin-top>\n                <margin-right>20px</margin-right>\n                <margin-bottom>20px</margin-bottom>\n                <margin-left>20px</margin-left>\n                <sizing-mode>boxed</sizing-mode>\n            </default-config>\n        </block>\n    </blocks>\n</cms>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sort Parameters in Shopware API\nDESCRIPTION: Demonstrates how to use the sort parameter to control result ordering with multiple sort criteria including natural sorting and count-based sorting.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 5,\n    \"sort\": [\n        { \"field\": \"name\", \"order\": \"ASC\", \"naturalSorting\": true },\n        { \"field\": \"active\", \"order\": \"DESC\" },\n        { \"field\": \"products.id\", \"order\": \"DESC\", \"type\": \"count\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parent-Child Properties and Methods to Entity Class in PHP\nDESCRIPTION: Implementation of getters and setters for parent, parentId, and children properties in an entity class to support inheritance relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleEntity.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityIdTrait;\n\nclass ExampleEntity extends Entity\n{\n    ...\n\n    protected ?self $parent = null;\n\n    protected ?string $parentId;\n\n    protected ?ExampleCollection $children = null;\n\n    ...\n\n    public function getParent(): ?ExampleEntity\n    {\n        return $this->parent;\n    }\n\n    public function setParent(ExampleEntity $parent): void\n    {\n        $this->parent = $parent;\n    }\n\n    public function getParentId(): ?string\n    {\n        return $this->parentId;\n    }\n\n    public function setParentId(?string $parentId): void\n    {\n        $this->parentId = $parentId;\n    }\n\n    public function getChildren(): ?ExampleCollection\n    {\n        return $this->children;\n    }\n\n    public function setChildren(ExampleCollection $children): void\n    {\n        $this->children = $children;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using searchMedia Function Signature in PHP\nDESCRIPTION: Function signature for the searchMedia method that retrieves media objects based on provided IDs in a Shopware context. This function returns a MediaCollection for further processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function searchMedia (array $ids, Context $context): MediaCollection { \n... \n}\n```\n\n----------------------------------------\n\nTITLE: Adding a OneToOne Association Field to Product Entity\nDESCRIPTION: Implementation of the CustomExtension class with a OneToOneAssociationField that connects the product entity to a custom extension entity through a database relation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Extension/Content/Product/CustomExtension.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Extension\\Content\\Product;\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityExtension;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\OneToOneAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass CustomExtension extends EntityExtension\n{\n    public function extendFields(FieldCollection $collection): void\n    {\n        $collection->add(\n            new OneToOneAssociationField('exampleExtension', 'id', 'product_id', ExampleExtensionDefinition::class, true)\n        );\n    }\n\n    public function getDefinitionClass(): string\n    {\n        return ProductDefinition::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Plugin in Shopware's Plugin System\nDESCRIPTION: This snippet shows how to register a custom plugin with the Shopware Plugin Manager in the main.js file, allowing the plugin system to load it.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-npm-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/main.js\nimport ExamplePlugin from './example.plugin';\n\nPluginManager.register(\n    'ExamplePlugin',\n    ExamplePlugin\n);\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Added Script Tag\nDESCRIPTION: This HTML snippet shows the rendered output when the template extension is applied, displaying how both the core Storefront JavaScript and the custom external script are included in the head section of the page.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-javascript-as-script-tag.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- Other tags are rendered here... -->\n\n    <script src=\"https://your-shop.example/theme/747e1c6a73cf4d70f5e831b30554dd15/js/all.js?1698139296\" defer></script>\n    <script src=\"https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.min.js\" defer></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Route to Shopware Product Module using JavaScript\nDESCRIPTION: Demonstrates how to register a new module with routeMiddleware to add a custom route to the existing product detail page. The middleware scans routes during Vue router setup and injects a new child route when the product detail route is found.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\nShopware.Module.register('my-new-custom-route', {\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.product.detail') {\n            currentRoute.children.push({\n                name: 'sw.product.detail.custom',\n                path: '/sw/product/detail/:id/custom',\n                component: 'sw-product-detail-custom',\n                meta: {\n                    parentPath: \"sw.product.index\"\n                }\n            });\n        }\n        next(currentRoute);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: PHP SDK Implementation for Checkout Gateway\nDESCRIPTION: Demonstrates implementation of checkout gateway using the Shopware App PHP SDK version 3.0.0+, handling request processing and command generation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/checkout-gateway.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Shopware\\App\\SDK\\Context\\Cart\\Error;\nuse Shopware\\App\\SDK\\Context\\ContextResolver;\nuse Shopware\\App\\SDK\\Framework\\Collection;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\CheckoutGatewayCommand;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\Command\\AddCartErrorCommand;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\Command\\RemovePaymentMethodCommand;\nuse Shopware\\App\\SDK\\Response\\GatewayResponse;\nuse Shopware\\App\\SDK\\Shop\\ShopResolver;\n\nfunction gatewayController(RequestInterface $request): ResponseInterface\n{\n    // injected or build by yourself\n    $shopResolver = new ShopResolver($repository);\n    $contextResolver = new ContextResolver();\n    $signer = new ResponseSigner();\n    \n    $shop = $shopResolver->resolveShop($request);\n    \n    /** @var Shopware\\App\\SDK\\Context\\Gateway\\Checkout\\CheckoutGatewayAction $action */\n    $action = $contextResolver->assembleCheckoutGatewayRequest($request, $shop);\n\n    /** @var Collection<Shopware\\App\\SDK\\Gateway\\Checkout\\CheckoutGatewayCommand> $commands */\n    $commands = new Collection();\n\n    if ($action->paymentMethods->has('payment-myApp-payment-method')) {\n        if ($action->cart->getPrice()->getTotalPrice() > 1000) {\n            $commands->add(new RemovePaymentMethodCommand('payment-myApp-payment-method'));\n            $commands->add(new AddCartErrorCommand('Payment method \\'My App Payment Method\\' is not available for carts > 1000€.', false, Error::LEVEL_WARNING));\n        }\n    }\n\n    $response = GatewayResponse::createCheckoutGatewayResponse($commands);\n\n    return $signer->sign($response);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Middleware in Shopware 6 YAML\nDESCRIPTION: Adds custom middleware to the message bus configuration in the framework.yaml file. Multiple middleware can be specified in the order they should be executed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nframework:\n    messenger:\n        buses:\n          messenger.bus.default:\n            middleware:\n              - 'Swag\\BasicExample\\MessageQueue\\Middleware\\ExampleMiddleware'\n              - 'Swag\\BasicExample\\MessageQueue\\Middleware\\AnotherExampleMiddleware'\n```\n\n----------------------------------------\n\nTITLE: Defining Order State Transition Permissions in JSON\nDESCRIPTION: This snippet defines the permissions and associated entities for various order state transitions in Shopware. It covers transitions for order, order delivery, order transaction, and order transaction capture refund states.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"order\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Parent-Child Relationship Fields to Entity Definition in PHP\nDESCRIPTION: Code snippet that adds ParentFkField, ParentAssociationField, and ChildrenAssociationField to an entity definition to support inheritance relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/ExampleDefinition.php\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        ...\n\n        new ParentFkField(self::class),\n        new ParentAssociationField(self::class, 'id'),\n        new ChildrenAssociationField(self::class),\n\n        ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Check Categorization Methods in Shopware 6\nDESCRIPTION: Creates the basic structure of a LocalDiskSpaceCheck class by implementing required categorization methods. These methods define the check's category, name, and execution contexts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/system-check/add-custom-check.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass LocalDiskSpaceCheck extends BaseCheck\n{\n    public function category(): Category\n    {\n        // crucial for the system to function at all. \n        return Category::SYSTEM;\n    }\n\n    public function name(): string\n    {\n        return 'LocalDiskSpaceCheck';\n    }\n\n    protected function allowedSystemCheckExecutionContexts(): array\n    {   // a potentially long-running check, because it has an IO operation.\n        return SystemCheckExecutionContext::longRunning();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch for Custom Searches in Shopware\nDESCRIPTION: This code snippet demonstrates how to enable Elasticsearch for a custom search in Shopware by adding the Elasticsearch aware state to the context object. This is necessary because Elasticsearch is only used in searches that are explicitly defined.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/elasticsearch.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new \\Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria();\n$context = \\Shopware\\Core\\Framework\\Context::createDefaultContext();\n// Enables Elasticsearch for this search\n$context->addState(\\Shopware\\Core\\Framework\\Context::STATE_ELASTICSEARCH_AWARE);\n\n$repository->search($criteria, $context);\n```\n\n----------------------------------------\n\nTITLE: Email Template Example\nDESCRIPTION: HTML template example showing usage of flow data in email templates.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n    <h3>Welcome to {{ shopName }}</h3>\n    <h1>Visit us at: {{ url }} </h1>\n```\n\n----------------------------------------\n\nTITLE: Creating an Audit Log Entry\nDESCRIPTION: PHP code example demonstrating how to create a new audit log entry with value differences, log type, and reference index. Shows the creation of audit log entities and their association with order references.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/audit-log.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$auditLogValue = new AuditLogValueDiffEntity();\n$auditLogValue->newValue = 'newValue';\n$auditLogValue->oldValue = 'oldValue';\n\n$auditLog = new AuditLogEntity();\n$auditLog->logValue = $auditLogValue->toDatabaseString();\n$auditLog->logType = 'changeOrderPosition';\n\n$orderReferenceIndex = new AuditLogIndexEntity();\n$orderReferenceIndex->referenceId = 10;\n$orderReferenceIndex->referenceTable = OrderContextRepository::TABLE_NAME;\n\n$this->auditLogService->createAuditLog($auditLog, $identity, [$orderReferenceIndex]);\n```\n\n----------------------------------------\n\nTITLE: Partial Data Loading Response in JSON\nDESCRIPTION: Example JSON response showing the result of a partial data loading request that only requested the name field of a currency entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/partial-data-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// response\n{\n  \"total\": 1,\n  \"data\": [\n    {\n      \"extensions\": [],\n      \"_uniqueIdentifier\": \"018cda3ac909712496bccc065acf0ff4\",\n      \"translated\": {\n        \"name\": \"US-Dollar\"\n      },\n      \"id\": \"018cda3ac909712496bccc065acf0ff4\",\n      \"name\": \"US-Dollar\",\n      \"isSystemDefault\": false,\n      \"apiAlias\": \"currency\"\n    }\n  ],\n  \"aggregations\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Visibility with Assertion in Cypress\nDESCRIPTION: This snippet shows how to wait for a specific UI element (`.sw-category-tree`) to become visible in a Cypress test using the `should('be.visible')` assertion. This approach avoids arbitrary `cy.wait()` calls by leveraging Cypress's built-in retry mechanism, ensuring the test proceeds only when the element is ready.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.sw-category-tree').should('be.visible');\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Results Method Implementation\nDESCRIPTION: Implementation of getUrls method to modify existing URL entries by accessing the UrlResult object and modifying its contents.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/modify-sitemap-entries.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getUrls(SalesChannelContext $context, int $limit, ?int $offset = null): UrlResult\n{\n    $urlResult = $this->getDecorated()->getUrls($context, $limit, $offset);\n    $urls = $urlResult->getUrls();\n\n    /* Change $urls, e.g. removing entries or updating them by iterating over them. */\n\n    return new UrlResult($urls, $urlResult->getNextOffset());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagAware Interface Requirements for CreateTagAction\nDESCRIPTION: Adds the TagAware interface to the requirements method of the CreateTagAction class to specify which events can use this action.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    // <plugin root>/src/Core/Content/Flow/Dispatching/Action/CreateTagAction.php\n    ...\n\n    public function requirements(): array\n    {\n        return [TagAware::class];\n    }\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Getting Shopping List Price Summary with Store API\nDESCRIPTION: GET endpoint for retrieving only the price summary of a specific shopping list by its ID.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_5\n\nLANGUAGE: http request\nCODE:\n```\nGET {url}/store-api/shopping-list/{id}/summary\n```\n\n----------------------------------------\n\nTITLE: Running Messenger Consume Command (Bash)\nDESCRIPTION: Bash command to run the Symfony Messenger consume command with time and memory limits for processing messages in the queue.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console messenger:consume async --time-limit=60 --memory-limit=128M\n```\n\n----------------------------------------\n\nTITLE: Histogram Aggregation Implementation in PHP and API\nDESCRIPTION: Shows how to implement histogram aggregation for date-based grouping with different intervals. Includes examples for both PHP and API implementations with date interval specifications.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new DateHistogramAggregation(\n        'release-dates',\n        'releaseDate',\n        DateHistogramAggregation::PER_MONTH\n    )\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var DateHistogramResult $aggregation */\n$aggregation = $result->getAggregations()->get('release-dates');\n\nforeach ($aggregation->getBuckets() as $bucket) {\n    $bucket->getKey();\n    $bucket->getCount();\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {\n            \"name\": \"release-dates\",\n            \"type\": \"histogram\",\n            \"field\": \"releaseDate\",\n            \"interval\": \"month\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Definition - Dotenv\nDESCRIPTION: Example of setting the environment variable in a .env.local file for use with the configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/static-system-config.md#2025-04-22_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\n# .env.local\nALLOW_BUY_IN_LISTING=true\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Elasticsearch Indices in Shopware 6\nDESCRIPTION: Removes unused indices generated during each indexing process.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/console es:index:cleanup\n```\n\n----------------------------------------\n\nTITLE: Search Criteria Implementation in Twig\nDESCRIPTION: Example showing how to construct and use search criteria for repository queries\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/data-loading.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set criteria = {\n    'ids': [ 'id1', 'id2' ],\n    'associations': {\n        'manufacturer': {},\n        'cover': {},\n    },\n    'filter': [\n        { 'type': 'equals', 'field': 'active', 'value': true },\n    ]\n} %}\n\n{% set matchedProducts = services.repository.search('product', criteria) %}\n```\n\n----------------------------------------\n\nTITLE: Registering Overridden Plugin in JavaScript\nDESCRIPTION: This snippet shows how to register the overridden plugin using the PluginManager's override() function. It's typically placed in a main.js file that serves as the entry point for JavaScript in a Shopware plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/override-existing-javascript.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyCookiePermission from './my-cookie-permission/my-cookie-permission.plugin';\n\nconst PluginManager = window.PluginManager;\nPluginManager.override('CookiePermission', MyCookiePermission, '[data-cookie-permission]');\n```\n\n----------------------------------------\n\nTITLE: Decorating the Shopware Product Migration Converter in PHP\nDESCRIPTION: This PHP class demonstrates how to decorate an existing Shopware product migration converter (Shopware55ProductConverter) by intercepting and updating the manufacturer mapping in the migration process. The class extends ProductConverter and accepts the original converter as a dependency. It overrides multiple methods, including 'convert', to insert custom premapping logic using MappingServiceInterface and ManufacturerReader. Dependencies required are the mapping, logging, and media file services, along with the original converter. Inputs include migration data arrays, context objects, and migration context; outputs are ConvertStruct objects with potentially updated manufacturer UUIDs. This decorator pattern enables insertion of custom logic without modifying the original converter, and must be paired with appropriate service container registration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/decorating-a-shopware-migration-assistant-converter.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationExtendConverterExample\\Profile\\Shopware\\Converter;\n\nuse Shopware\\Core\\Framework\\Context;\nuse SwagMigrationAssistant\\Migration\\Converter\\ConverterInterface;\nuse SwagMigrationAssistant\\Migration\\Converter\\ConvertStruct;\nuse SwagMigrationAssistant\\Migration\\Logging\\LoggingServiceInterface;\nuse SwagMigrationAssistant\\Migration\\Mapping\\MappingServiceInterface;\nuse SwagMigrationAssistant\\Migration\\Media\\MediaFileServiceInterface;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Converter\\ProductConverter;\nuse SwagMigrationExtendConverterExample\\Profile\\Shopware\\Premapping\\ManufacturerReader;\n\nclass Shopware55DecoratedProductConverter extends ProductConverter\n{\n    private ConverterInterface $originalProductConverter;\n\n    public function __construct(\n        ConverterInterface $originalProductConverter,\n        MappingServiceInterface $mappingService,\n        LoggingServiceInterface $loggingService,\n        MediaFileServiceInterface $mediaFileService\n    ) {\n        parent::__construct($mappingService, $loggingService, $mediaFileService);\n        $this->originalProductConverter = $originalProductConverter;\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $this->originalProductConverter->supports($migrationContext);\n    }\n\n    public function getSourceIdentifier(array $data): string\n    {\n        return $this->originalProductConverter->getSourceIdentifier($data);\n    }\n\n    public function getMediaUuids(array $converted): ?array\n    {\n        return $this->originalProductConverter->getMediaUuids($converted);\n    }\n\n    public function writeMapping(Context $context): void\n    {\n        $this->originalProductConverter->writeMapping($context);\n    }\n\n    public function convert(\n        array $data,\n        Context $context,\n        MigrationContextInterface $migrationContext\n    ): ConvertStruct\n    {\n        if (!isset($data['manufacturer']['id'])) {\n            return $this->originalProductConverter->convert($data, $context, $migrationContext);\n        }\n\n        $manufacturerId = $data['manufacturer']['id'];\n        unset($data['manufacturer']);\n\n        $mapping = $this->mappingService->getMapping(\n            $migrationContext->getConnection()->getId(),\n            ManufacturerReader::getMappingName(),\n            $manufacturerId,\n            $context\n        );\n\n        $convertedStruct = $this->originalProductConverter->convert($data, $context, $migrationContext);\n\n        if ($mapping === null) {\n            return $convertedStruct;\n        }\n\n        $converted = $convertedStruct->getConverted();\n        $converted['manufacturerId'] = $mapping['entityUuid'];\n\n        return new ConvertStruct($converted, $convertedStruct->getUnmapped(), $convertedStruct->getMappingUuid());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using OrderTransactionStateHandler Helper Methods\nDESCRIPTION: Example demonstrating the usage of the OrderTransactionStateHandler helper class for managing order transaction states. Shows various available methods for different state transitions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->orderTransactionStateHandler->cancel('<your ID here>', $context);\n// $this->orderTransactionStateHandler->refund('<your ID here>', $context);\n// $this->orderTransactionStateHandler->fail('<your ID here>', $context);\n// $this->orderTransactionStateHandler->paid('<your ID here>', $context);\n// $this->orderTransactionStateHandler->payPartially('<your ID here>', $context);\n// $this->orderTransactionStateHandler->process('<your ID here>', $context);\n// $this->orderTransactionStateHandler->refundPartially('<your ID here>', $context);\n// $this->orderTransactionStateHandler->remind('<your ID here>', $context);\n// $this->orderTransactionStateHandler->reopen('<your ID here>', $context);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity Admin UI in Shopware XML\nDESCRIPTION: This XML snippet demonstrates how to configure the administration interface for custom entities (`custom_entity_example`, `custom_entity_example_second`) using `admin-ui.xml`. It defines their placement in the navigation ('sw-content'), icon, color, listing columns, and detail view tabs/cards/fields within the Shopware 6 admin panel. This configuration is part of Shopware's Custom Entities feature.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-19-blog-concept.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<admin-ui>\n    <entity name=\"custom_entity_example\"\n            navigation-parent=\"sw-content\"\n            position=\"50\"\n            icon=\"regular-tools-alt\"\n            color=\"#f00\">\n        <listing>\n            <columns>\n                <column ref=\"name\"/>\n                <column ref=\"my_description\"/>\n                <column ref=\"position\" hidden=\"true\" />\n                <column ref=\"rating\"/>\n            </columns>\n        </listing>\n        <detail>\n            <tabs>\n                <tab name=\"main\">\n                    <card name=\"general\">\n                        <field ref=\"name\"/>\n                        <field ref=\"position\"/>\n                        <field ref=\"rating\"/>\n                    </card>\n                    <card name=\"cardClone\">\n                        <field ref=\"name\"/>\n                        <field ref=\"my_description\"/>\n                    </card>\n                </tab>\n                <tab name=\"tabClone\">\n                    <card name=\"generalSecond\">\n                        <field ref=\"name\"/>\n                        <field ref=\"position\"/>\n                        <field ref=\"rating\"/>\n                    </card>\n                    <card name=\"cardClone\">\n                        <field ref=\"name\"/>\n                        <field ref=\"my_description\"/>\n                    </card>\n                </tab>\n                <!-- cms-aware tabs will always be rendered last, if defined -->\n            </tabs>\n        </detail>\n    </entity>\n    <entity name=\"custom_entity_example_second\"\n            navigation-parent=\"sw-content\"\n            position=\"50\"\n            icon=\"regular-tools-alt\"\n            color=\"#f00\">\n        <!-- Like above -->\n    </entity>\n</admin-ui>\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Dependency Injection Configuration in Shopware B2B (PHP)\nDESCRIPTION: Defines the abstract `DependencyInjectionConfiguration` class in PHP. This class serves as a base for configuring dependency injection within Shopware B2B Suite components. Implementations must provide methods to return arrays of service XML file paths (`getServiceFiles`), Symfony compiler passes (`getCompilerPasses`), and dependent configuration instances (`getDependingConfigurations`).\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/dependency-injection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Common;\n\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\n\nabstract class DependencyInjectionConfiguration\n{\n    /**\n     * @return string[] array of service xml files\n     */\n    abstract public function getServiceFiles(): array;\n\n    /**\n     * @return CompilerPassInterface[]\n     */\n    abstract public function getCompilerPasses(): array;\n\n    /**\n     * @return DependencyInjectionConfiguration[] child components required by this component\n     */\n    abstract public function getDependingConfigurations(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomExampleDataStorer for Flow Builder in PHP\nDESCRIPTION: This code demonstrates the implementation of a CustomExampleDataStorer class, which handles storing and restoring custom example data in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass CustomExampleDataStorer extends FlowStorer\n{\n    public function store(FlowEventAware $event, array $stored): array\n    {\n        if (!$event instanceof CustomExampleDataAware || isset($stored[CustomExampleDataAware::CUSTOM_EXAMPLE_DATA])) {\n            return $stored;\n        }\n\n        $stored[CustomExampleDataAware::CUSTOM_EXAMPLE_DATA] = $event->getCustomExampleData();\n\n        return $stored;\n    }\n\n    public function restore(StorableFlow $storable): void\n    {\n        if (!$storable->hasStore(CustomExampleDataAware::CUSTOM_EXAMPLE_DATA)) {\n            return;\n        }\n\n        $storable->setData(CustomExampleDataAware::CUSTOM_EXAMPLE_DATA, $storable->getStore(CustomExampleDataAware::CUSTOM_EXAMPLE_DATA));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic sw_thumbnails Usage in Twig\nDESCRIPTION: Simple implementation of the sw_thumbnails Twig function to automatically generate responsive image code. This minimal configuration requires only the media entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-thumbnails' with {\n    media: cover\n} %}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Pack Usage\nDESCRIPTION: Example of using custom icon pack defined in theme configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-icons.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_icon 'done-outline-24px' style {\n    'pack': 'custom-icons'\n} %}\n```\n\n----------------------------------------\n\nTITLE: Theme Switch Field Configuration in Shopware 6\nDESCRIPTION: Adding a customizable boolean switch field for fixing navigation in the theme configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"config\": {\n    \"fields\": {\n      \"navigation-fixed\": {\n        \"label\": {\n          \"en-GB\": \"Fix navigation\",\n          \"de-DE\": \"Navigation fixieren\"\n        },\n        \"type\": \"switch\",\n        \"value\": true,\n        \"editable\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cart Storage in Shopware YAML (Since v6.6.8.0)\nDESCRIPTION: YAML configuration for using Redis as cart storage in Shopware versions 6.6.8.0 and later. It defines Redis connections and specifies the cart storage type and configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/cart-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    redis:\n        connections:\n            persistent:\n                dsn: 'redis://host:port/dbindex?persistent=1'\n    cart:\n        storage:\n            type: 'redis'\n            config:\n                 connection: 'persistent'\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Queue Routing in YAML\nDESCRIPTION: YAML configuration for message routing, showing how to override default transport settings and configure low priority queue routing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/message-queue/add-message-to-queue.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    messenger:\n        routing_overwrite:\n            'Shopware\\Core\\Framework\\MessageQueue\\LowPriorityMessageInterface': low_priority\n            'Your\\Custom\\LowPriorityMessage': async\n```\n\n----------------------------------------\n\nTITLE: Applying Storefront Visibility CSS Classes using Twig/HTML\nDESCRIPTION: This Twig template snippet shows the server-side logic within the Storefront rendering process (`cms-section-default.html.twig` or `cms-section-block-container.html.twig`). It checks the `visibility` configuration retrieved for a CMS block. If the configuration is missing (`null`), it defaults to visible on all devices. It then conditionally merges CSS classes (`hidden-mobile`, `hidden-tablet`, `hidden-desktop`) into the `blockClasses` variable based on the `visibility` settings. These classes are used by CSS media queries to hide the element on specific viewports.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-10-17-hide-and-show-cms-content.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if block.visibility is null %}\n    {% set block = {\n        visibility: {\n            mobile: true,\n            tablet: true,\n            desktop: true\n        }\n    } %}\n{% endif %}\n\n{% if not block.visibility.mobile %}\n    {% set blockClasses = ['hidden-mobile']|merge(blockClasses) %}\n{% endif %}\n{% if not block.visibility.tablet %}\n    {% set blockClasses = ['hidden-tablet']|merge(blockClasses) %}\n{% endif %}\n{% if not block.visibility.desktop %}\n    {% set blockClasses = ['hidden-desktop']|merge(blockClasses) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional JavaScript in Shopware 6 Templates\nDESCRIPTION: This snippet shows how to conditionally include a JavaScript library based on Twig conditions. The script will only be rendered when the specified condition is met, allowing for more dynamic script loading.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-javascript-as-script-tag.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# <plugin root>/src/Resources/views/storefront/layout/meta.html.twig #}\n{% sw_extends '@Storefront/storefront/layout/meta.html.twig' %}\n\n{% block layout_head_javascript_hmr_mode %}\n    {{ parent() }}\n\n    {# Only add script when condition is met #}\n    {% if someCondition %}\n        <script src=\"https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.min.js\" defer></script>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Checking Elasticsearch Cluster Health\nDESCRIPTION: Returns the health status of the Elasticsearch cluster using the REST API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XGET 'http://elasticsearch:9200/_cluster/health?pretty'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic App Manifest for Shopware Admin Extension (XML)\nDESCRIPTION: Defines the basic configuration for a Shopware admin extension in the manifest.xml file. Includes metadata like name, label, description, author, and version.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/starter-admin-extension.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>SimpleNotification</name>\n        <label>Hi Developer App</label>\n        <description>This app shows a notification in the admin panel</description>\n        <author>shopware AG</author>\n        <copyright>(c) shopware AG</copyright>\n        <version>1.0.0</version>\n        <license>MIT</license>\n    </meta>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Setting Header Parameters for Flow Action in Shopware 6\nDESCRIPTION: Shows how to define header parameters for a flow action, which are used when calling the external webhook.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<flow-action>\n    <meta>\n        ...\n    </meta>\n    <headers>\n        <parameter type=\"string\" name=\"content-type\" value=\"application/json\"/>\n    </headers>\n    ...\n</flow-action>\n```\n\n----------------------------------------\n\nTITLE: PHP Service with Direct Redis Connection Injection\nDESCRIPTION: Shows a PHP service class implementation that accepts a direct Redis connection injection.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/redis.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyCustomService\n{ \n    public function __construct (\n        private object $redisConnection,\n    ) { }\n\n    public function doSomething()\n    {\n        // use connection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Translator Service in PHP Methods\nDESCRIPTION: Example of using the injected translator service to translate snippets with placeholders in a PHP method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->translator->trans('soldProducts', ['%count%' => 3, '%country%' => 'Germany']);\n```\n\n----------------------------------------\n\nTITLE: App Script Configuration Access\nDESCRIPTION: Examples of accessing configuration values in app scripts using the config service\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set configValue = services.config.app('field1') %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set configValue = services.config.get('core.listing.productsPerPage') %}\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions for Media URL and Pathname Generation in PHP\nDESCRIPTION: Shows the current interface definitions for UrlGeneratorInterface and PathnameStrategyInterface that handle media URL generation in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-17-media-path.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface UrlGeneratorInterface\n{\n    public function getAbsoluteMediaUrl(MediaEntity $media): string;\n\n    public function getRelativeMediaUrl(MediaEntity $media): string;\n\n    public function getAbsoluteThumbnailUrl(MediaEntity $media, MediaThumbnailEntity $thumbnail): string;\n\n    public function getRelativeThumbnailUrl(MediaEntity $media, MediaThumbnailEntity $thumbnail): string;\n}\n\ninterface PathnameStrategyInterface\n{\n    public function getName(): string;\n\n    /**\n     * Generate a hash, missing from url if omitted\n     */\n    public function generatePathHash(MediaEntity $media, ?MediaThumbnailEntity $thumbnail = null): ?string;\n\n    /**\n     * Generate the cache buster part of the path, missing from url if omitted\n     */\n    public function generatePathCacheBuster(MediaEntity $media, ?MediaThumbnailEntity $thumbnail = null): ?string;\n\n    /**\n     * Generate the filename\n     */\n    public function generatePhysicalFilename(MediaEntity $media, ?MediaThumbnailEntity $thumbnail = null): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Including SEO URLs in Shopware API\nDESCRIPTION: Shows how to request SEO-friendly URLs in API responses using sw-include-seo-urls header. Used for retrieving all configured SEO URLs for products.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/request-headers.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/product\n--header 'sw-include-seo-urls: 1'\n```\n\n----------------------------------------\n\nTITLE: Plugin Test with PluginManager Mocking\nDESCRIPTION: Complete test setup with PluginManager mocking and proper cleanup in afterEach hook.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nimport HelloWorldPlugin from 'src/plugin/hello-world/hello-world.plugin';\n\ndescribe('HelloWorldPlugin tests', () => {\n    let plugin;\n\n    beforeEach(() => {\n\n        // Mocking PluginManager to get the plugin working\n        window.PluginManager = {\n            getPluginInstancesFromElement: () => {\n                return new Map();\n            },\n            getPlugin: () => {\n                return {\n                    get: () => []\n                };\n            }\n        };\n\n        const mockedElement = document.createElement('div');\n        plugin = new HelloWorldPlugin(mockedElement);\n    });\n\n    afterEach(() => {\n        // Set your plugin to null to clean up afterwards\n        plugin = null;\n    });\n\n    test('custom plugin exists', () => {\n        // your actual test, temporary filled with a placeholder\n        console.log(plugin);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Media File Extension Whitelist in Shopware PHP\nDESCRIPTION: This code snippet demonstrates how to create a subscriber class that adds a custom file extension to Shopware's media file extension whitelist. It subscribes to the MediaFileExtensionWhitelistEvent and adds the 'img' extension to the allowed list.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/add-custom-file-extension.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Content\\Media\\Event\\MediaFileExtensionWhitelistEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass Subscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            MediaFileExtensionWhitelistEvent::class => 'addEntryToFileExtensionWhitelist'\n        ];\n    }\n\n    public function addEntryToFileExtensionWhitelist(MediaFileExtensionWhitelistEvent $event): void\n    {\n        $whiteList = $event->getWhitelist();\n        $whiteList[] = 'img';\n\n        $event->setWhitelist($whiteList);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Shopware 6 Component Override in JavaScript\nDESCRIPTION: Shows how to register a component override using Shopware.Component.override()\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport template from './sw-dashboard-index.html.twig';\n\nShopware.Component.override('sw-dashboard-index', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Using API Expectations for Shopware Version and Plugin Requirements\nDESCRIPTION: Example of using the sw-expect-packages header to ensure a request only succeeds if Shopware 6.4+ is installed and the PayPal plugin is available.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/api-versioning.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGET /api/test\nsw-expect-packages: shopware/core:~6.4,swag/paypal:*\n```\n\n----------------------------------------\n\nTITLE: Refreshing Shopware Plugin List to Register New Theme\nDESCRIPTION: This command refreshes the Shopware plugin list to make the system aware of the newly created theme plugin. It displays the status of all plugins including the new theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/create-a-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console plugin:refresh\n\n# you should get an output like this\n\n[OK] Plugin list refreshed                                                                              \n\nShopware Plugin Service\n=======================\n\n ----------------------- ------------------------------------ ------------- ----------------- -------- ----------- -------- ------------- \n  Plugin                  Label                                Version       Upgrade version   Author   Installed   Active   Upgradeable  \n ----------------------- ------------------------------------ ------------- ----------------- -------- ----------- -------- ------------- \n  SwagBasicExampleTheme   Theme SwagBasicExampleTheme plugin   9999999-dev                              No          No       No           \n ----------------------- ------------------------------------ ------------- ----------------- -------- ----------- -------- ------------- \n\n 1 plugins, 0 installed, 0 active , 0 upgradeable\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic DataSet in Shopware Migration\nDESCRIPTION: Shows implementation of a basic ProductDataSet class that defines entity type and support for Shopware profile migrations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/dataselection-and-dataset.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSet\\DataSet;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DefaultEntities;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\n\nclass ProductDataSet extends DataSet\n{\n    public static function getEntity(): string\n    {\n        return DefaultEntities::PRODUCT;\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order Delivery State Machine Workflow with Mermaid\nDESCRIPTION: Mermaid flowchart depicting the order delivery state machine with states including Open, Shipped, Shipped partially, Cancelled, Returned, and Returned partially. The diagram shows all possible shipping and return state transitions.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/orders.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nSTART_STATE[Start state] --> 018c4a0eeb3872679d76fd8c1d89ef09\n\n018c4a0eeb3872679d76fd8c1d89ef09(Open)\n018c4a0eeb3872679d76fd8c1df019d8(Cancelled)\n018c4a0eeb3872679d76fd8c1df019d8 --> FINAL_STATE[Final state]\n\n018c4a0eeb3872679d76fd8c1eceaecb(Shipped)\n018c4a0eeb3872679d76fd8c1ef13dd7(Shipped partially)\n018c4a0eeb3872679d76fd8c1f8af9a3(Returned)\n018c4a0eeb3872679d76fd8c1f8af9a3 --> FINAL_STATE[Final state]\n\n018c4a0eeb3872679d76fd8c1fd26398(Returned partially)\n018c4a0eeb3872679d76fd8c1d89ef09 -- ship --> 018c4a0eeb3872679d76fd8c1eceaecb\n018c4a0eeb3872679d76fd8c1d89ef09 -- ship_partially --> 018c4a0eeb3872679d76fd8c1ef13dd7\n018c4a0eeb3872679d76fd8c1d89ef09 -- cancel --> 018c4a0eeb3872679d76fd8c1df019d8\n018c4a0eeb3872679d76fd8c1eceaecb -- retour --> 018c4a0eeb3872679d76fd8c1f8af9a3\n018c4a0eeb3872679d76fd8c1eceaecb -- retour_partially --> 018c4a0eeb3872679d76fd8c1fd26398\n018c4a0eeb3872679d76fd8c1eceaecb -- cancel --> 018c4a0eeb3872679d76fd8c1df019d8\n018c4a0eeb3872679d76fd8c1ef13dd7 -- retour --> 018c4a0eeb3872679d76fd8c1f8af9a3\n018c4a0eeb3872679d76fd8c1ef13dd7 -- retour_partially --> 018c4a0eeb3872679d76fd8c1fd26398\n018c4a0eeb3872679d76fd8c1ef13dd7 -- ship --> 018c4a0eeb3872679d76fd8c1eceaecb\n018c4a0eeb3872679d76fd8c1ef13dd7 -- cancel --> 018c4a0eeb3872679d76fd8c1df019d8\n018c4a0eeb3872679d76fd8c1df019d8 -- reopen --> 018c4a0eeb3872679d76fd8c1d89ef09\n018c4a0eeb3872679d76fd8c1eceaecb -- reopen --> 018c4a0eeb3872679d76fd8c1d89ef09\n018c4a0eeb3872679d76fd8c1ef13dd7 -- reopen --> 018c4a0eeb3872679d76fd8c1d89ef09\n018c4a0eeb3872679d76fd8c1f8af9a3 -- reopen --> 018c4a0eeb3872679d76fd8c1d89ef09\n018c4a0eeb3872679d76fd8c1fd26398 -- reopen --> 018c4a0eeb3872679d76fd8c1d89ef09\n018c4a0eeb3872679d76fd8c1fd26398 -- retour --> 018c4a0eeb3872679d76fd8c1f8af9a3\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware for Shopware 6 Services\nDESCRIPTION: Demonstrates how to add middleware to the 'acl' service in Shopware 6. The middleware logs a message every time the service is accessed from the container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/extending-services.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Application.$container.resetProviders(['acl']);\n\nShopware.Application.addServiceProviderMiddleware('acl', (service, next) => {\n    console.log('ACL service gets called');\n    next();\n});\n```\n\n----------------------------------------\n\nTITLE: Marking Fields as Required in Shopware Entity\nDESCRIPTION: Shows how to explicitly mark fields as required in a Shopware entity using the Required attribute. This is especially useful for translated fields which must be nullable but might still be required for validation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n\n    #[Required]\n    #[Field(type: FieldType::STRING, translated: true)]\n    public ?string $required = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Scheduled Task in services.xml\nDESCRIPTION: XML configuration to register a custom ScheduledTask and its handler in the Dependency Injection container. Must be placed in Resources/config/services.xml within the plugin directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-scheduled-task.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ScheduledTask\\ExampleTask\">\n            <tag name=\"shopware.scheduled.task\" />\n        </service>\n        <service id=\"Swag\\BasicExample\\Service\\ScheduledTask\\ExampleTaskHandler\">\n            <argument type=\"service\" id=\"scheduled_task.repository\" />\n            <tag name=\"messenger.message_handler\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: State Management in Pinia\nDESCRIPTION: Example of state definition and mutation in Pinia actions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nactions: {\n    updateProductName(newName) {\n        this.productName = newName; // Directly update state\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Registering CookieProvider Decoration in Shopware 6 (XML)\nDESCRIPTION: XML configuration to register a custom CookieProvider service decoration in Shopware 6. This allows extending the default cookie consent manager with custom cookies.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-cookie-to-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n       <service id=\"PluginName\\Framework\\Cookie\\CustomCookieProvider\"\n                decorates=\"Shopware\\Storefront\\Framework\\Cookie\\CookieProviderInterface\">\n             <argument type=\"service\" \n                       id=\"PluginName\\Framework\\Cookie\\CustomCookieProvider.inner\" />\n         </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Media Fields in Product Detail Page in Twig\nDESCRIPTION: A Twig template example showing how to retrieve a media object from a custom field on a product detail page. It demonstrates getting the media ID, fetching the media object, and displaying it for debugging.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/custom-fields-of-type-media.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/page/content/product-detail.html.twig\n{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}\n\n{% block page_product_detail_media %}\n    {# simplify ID access #}\n    {% set sportsMediaId = page.product.translated.customFields.custom_sports_media_id %}\n\n    {# fetch media as batch - optimized for performance #}\n    {% set mediaCollection = searchMedia([sportsMediaId], context.context) %}\n\n    {# extract single media object #}\n    {% set sportsMedia = mediaCollection.get(sportsMediaId) %}\n\n    {{ dump (sportsMedia) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Importing the Module to Test in Jest\nDESCRIPTION: Shows how to import the module that will be tested in a Jest test file. This example imports a feature helper class that manages feature flags.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/test/helper/feature.helper.test.js\n// Import for the helper to test\nimport Feature from 'src/helper/feature.helper';\n\ndescribe('feature.helper.js', () => {\n    test('checks the flags', () => {\n        // Assertions come here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SEO URL Migration in Shopware PHP\nDESCRIPTION: Database migration implementation for adding static SEO URLs with multilingual support. Uses ImportTranslationsTrait to handle translations and inserts entries into the seo_url table for each sales channel and language.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Migration/Migration1619094740AddStaticSeoUrl.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\Migration\\Traits\\ImportTranslationsTrait;\nuse Shopware\\Core\\Migration\\Traits\\Translations;\n\nclass Migration1619094740AddStaticSeoUrl extends MigrationStep\n{\n    use ImportTranslationsTrait;\n\n    public function getCreationTimestamp(): int\n    {\n        return 1619094740;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $this->importTranslation('seo_url', new Translations(\n            // German array\n            array_merge($this->getSeoMetaArray($connection), ['seo_path_info' => 'Beispiel-Seite']),\n            // English array\n            array_merge($this->getSeoMetaArray($connection), ['seo_path_info' => 'Example-Page']),\n\n        ), $connection);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n\n    private function getSeoMetaArray(Connection $connection): array\n    {\n        return [\n            'id' => Uuid::randomBytes(),\n            'sales_channel_id' => $this->getStorefrontSalesChannelId($connection),\n            'foreign_key' => Uuid::randomBytes(),\n            'route_name' => 'frontend.example.example',\n            'path_info' => '/example',\n            'is_canonical' => 1,\n            'is_modified' => 0,\n            'is_deleted' => 0,\n        ];\n    }\n\n    private function getStorefrontSalesChannelId(Connection $connection): ?string\n    {\n        $sql = <<<SQL\n            SELECT id\n            FROM sales_channel\n            WHERE type_id = :typeId\nSQL;\n        $salesChannelId = $connection->fetchOne($sql, [\n            ':typeId' => Uuid::fromHexToBytes(Defaults::SALES_CHANNEL_TYPE_STOREFRONT)\n        ]);\n\n        if (!$salesChannelId) {\n            return null;\n        }\n\n        return $salesChannelId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Fields Nullable and Adding Parent ID in SQL Migration\nDESCRIPTION: SQL query that alters a table to add a parent_id column and make inheritable fields nullable to support field inheritance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `swag_example` ADD `parent_id` BINARY(16) NULL;\nALTER TABLE `swag_example` MODIFY `description` VARCHAR(255) NULL;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hello World Plugin in JavaScript\nDESCRIPTION: A simple JavaScript plugin that extends the base Plugin class and implements a Hello World functionality with init and sayHello methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Plugin from 'src/plugin-system/plugin.class'\n\nexport default class HelloWorldPlugin extends Plugin {\n    static options = {};\n\n    init() {\n        console.log('Hello World!', this.el);\n    }\n\n    sayHello() {\n        return \"Hello World!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CORS and Publish Allowed Origins for Mercure Hub\nDESCRIPTION: Example configuration for CORS allowed origins and publish allowed origins in a Mercure hub setup. This includes settings for both frontend and backend domains.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/setup-3rd-party/realtime-service-mercure.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- *Set up CORS allowed origins* - In our case, it would be the domain where the Shopware Frontends is hosted and available. For instance: `http://localhost:3000` (frontend domain).\n- *Set up publish allowed origins* - The domains that request the Mercure service must be added to publish allowed origins or else it gets rejected. For instance (HTTP protocol must not be included): `http://localhost:3000`  (frontend domain) and `http://localhost:8000` (backend API domain).\n```\n\n----------------------------------------\n\nTITLE: Registering Experimental Admin Component in JavaScript\nDESCRIPTION: Example of registering a new component in Shopware admin interface with experimental annotation. The stableVersion property indicates when the feature will become stable.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-10-experimental-features.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @experimental stableVersion:v6.6.0\n */\nComponent.register('sw-new-component', {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Field Data Structure in JavaScript\nDESCRIPTION: Setup of the data structure for custom fields in a Shopware 6 component. Defines the initial state of customFieldSets.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-custom-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n    return {\n        ...\n        customFieldSets: null\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom URLs via Configuration in Shopware\nDESCRIPTION: This YAML snippet demonstrates how to add custom URLs to the Shopware sitemap using the configuration setting 'shopware.sitemap.custom_urls'. It includes examples of setting the URL, sales channel ID, change frequency, priority, and last modified date.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/add-custom-sitemap-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    sitemap:\n        custom_urls:\n            -   url: 'custom-url'\n                salesChannelId: '98432def39fc4624b33213a56b8c944d'\n                changeFreq: 'weekly'\n                priority: 0.5\n                lastMod: '2024-09-19 12:19:00'\n            -   url: 'custom-url-2'\n                salesChannelId: '98432def39fc4624b33213a56b8c944d'\n                changeFreq: 'weekly'\n                priority: 0.5\n                lastMod: '2024-09-18 12:18:00'\n```\n\n----------------------------------------\n\nTITLE: Setting Up TestBootstrap.php for Shopware 6 Plugin Testing\nDESCRIPTION: A bootstrap file for PHPUnit tests that configures the test environment, adds the plugin to active plugins, and sets up autoloading for the test namespace.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/php-unit.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Shopware\\Core\\TestBootstrapper;\n\n$loader = (new TestBootstrapper())\n    ->addCallingPlugin()\n    ->addActivePlugins('BasicExample')\n    ->setForceInstallPlugins(true)\n    ->bootstrap()\n    ->getClassLoader();\n\n$loader->addPsr4('Swag\\\\BasicExample\\\\Tests\\\\', __DIR__);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Routes in YAML\nDESCRIPTION: This YAML configuration showcases how to define language-specific routes in Shopware 6. It creates different paths for the wishlist page based on the locale (English and German) while maintaining the same controller endpoint.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/framework/routes.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend.wishlist.page:\n  path:\n    en-GB: '/wishlist'\n    de-DE: '/merkliste'\n  controller: 'Shopware\\Storefront\\Controller\\WishlistController::index'\n  methods: ['GET']\n  defaults:\n    _noStore: true\n    _routeScope: ['storefront']\n  options:\n    seo: false\n```\n\n----------------------------------------\n\nTITLE: Step 4: Final Implementation Using Only Enums\nDESCRIPTION: Clean implementation after removing all deprecations, showing the final code structure using PHP 8.1 Enums with example usage.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-16-php-enums.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nenum IndexMethod\n{\n    case PARTIAL;\n    case FULL;\n}\n\nclass Indexer\n{\n    public function product(int $id, IndexMethod $method): void\n    {\n        match ($method) {\n            IndexMethod::PARTIAL => $this->partial($id),\n            IndexMethod::FULL => $this->full($id)\n        };\n    }\n}\n\n(new Indexer())->product(1, IndexMethod::PARTIAL);\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-Specific Configuration for Development\nDESCRIPTION: Demonstrates how to create a development-specific configuration file for Shopware 6, using mailer settings as an example.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<project root>\n└── config\n   └── packages\n      └── dev\n         └── mailer.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Directory Structure in Shopware 6\nDESCRIPTION: Demonstrates the required folder structure for implementing a theme in a Shopware 6 app. Shows the essential files including theme.json for configuration and manifest.xml for app metadata.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/apps-as-themes.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── DemoTheme\n      └── Resources\n            └── ...\n            └── theme.json\n      └── manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing a Product Line Item from the Cart in Twig\nDESCRIPTION: This example demonstrates how to add a product line item to the cart and then remove it using the remove() method.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% do services.cart.products.remove(hook.ids.get('p1')) %}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Alias Creation Command in Shopware\nDESCRIPTION: Command to create Elasticsearch aliases after indexing. This may be necessary on some systems to make the newly indexed products visible in the Storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/console es:create:alias\n```\n\n----------------------------------------\n\nTITLE: Store Registration Comparison\nDESCRIPTION: Comparison between Vuex and Pinia store registration in components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport productsStore from './state/products.state';\n\nShopware.State.registerModule('product', productsStore);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport './state/products.state';\n```\n\n----------------------------------------\n\nTITLE: Replacing Array Elements with ArrayFacade\nDESCRIPTION: Shows how to replace elements in an array using the replace() method of ArrayFacade.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/miscellaneous-script-services-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set second = array({'bar': 'baz'}) %}\n\n{% do product.payload.replace(second) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Controller Structure in PHP for B2B Suite\nDESCRIPTION: This snippet demonstrates the typical structure of a root controller in the B2B Suite. It includes actions for listing, creating, editing, updating, and removing entities, with explanations for each action's purpose.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/complex-views.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nclass RootController\n{\n    /**\n    * Provides the page layout and displays a listing containing the entities\n    */\n    public function indexAction() { [...] }\n    \n    /**\n    * Display an empty form or optionally errors and the invalid entries\n    */\n    public function newAction() { [...] }\n\n    /**\n    * Post only!\n    *\n    * Store new entity. If invalid input, forward to `newAction`. If successful, forward to `detailAction`.\n    */\n    public function createAction() { [...] }\n\n    /**\n    * Provides a detailed layout. Usually a modal box containing a navigation and initially selecting the `editAction`.\n    *\n    */\n    public function detailAction() { [...] }\n\n    /**\n    * Display the Form containing all stored data.\n    */\n    public function editAction() { [...] }\n\n    /**\n     * Post only!\n     *\n     * Store updates to the entity, forwards to `editAction`.\n     */\n    public function updateAction() { [...] }\n\n    /**\n     * Post only!\n     *\n     * Removes a record, forwards to `indexAction`.\n     */\n     public function removeAction() { [...] }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Migration Profile Service using XML\nDESCRIPTION: This XML snippet demonstrates how to register the custom `OwnProfile` PHP class as a service within Shopware's dependency injection container (typically in a `services.xml` file). The `shopware.migration.profile` tag is crucial as it allows the Shopware Migration Assistant to discover and utilize this custom profile.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile\">\n    <tag name=\"shopware.migration.profile\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cart Error Class in PHP\nDESCRIPTION: Custom error class that extends Shopware's Error class to handle cart validation errors with specific error levels, messages, and parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/add-cart-validator.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Checkout\\Cart\\Custom\\Error;\n\nuse Shopware\\Core\\Checkout\\Cart\\Error\\Error;\n\nclass CustomCartBlockedError extends Error\n{\n    private const KEY = 'custom-line-item-blocked';\n\n    private string $lineItemId;\n\n    public function __construct(string $lineItemId)\n    {\n        $this->lineItemId = $lineItemId;\n        parent::__construct();\n    }\n\n    public function getId(): string\n    {\n        return $this->lineItemId;\n    }\n\n    public function getMessageKey(): string\n    {\n        return self::KEY;\n    }\n\n    public function getLevel(): int\n    {\n        return self::LEVEL_ERROR;\n    }\n\n    public function blockOrder(): bool\n    {\n        return true;\n    }\n\n    public function getParameters(): array\n    {\n        return [ 'lineItemId' => $this->lineItemId ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Providers in Shopware 6\nDESCRIPTION: Demonstrates how to reset service providers in Shopware 6 using the resetProviders function. This is necessary before adding decorators or middleware to Shopware services.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/extending-services.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Application.$container.resetProviders()\n```\n\n----------------------------------------\n\nTITLE: Ensuring Object Instance Type with Runtime Check in PHP\nDESCRIPTION: Illustrates using the `instanceof` operator within an `if` condition to confirm that a variable `$foo` (potentially `object`) is an instance of the `Foo` class at runtime. It throws an `InvalidArgumentException` if the check fails, guaranteeing the object's class type.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is object, but we expect it to be Foo instance\n\nif (!$foo instanceof Foo) {\n    // handle the error case\n    throw new \\InvalidArgumentException('$foo must be instance of Foo');  \n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Staging Mode in Shopware Plugins using PHP\nDESCRIPTION: PHP code example showing how to integrate staging mode into Shopware plugins by subscribing to the SetupStagingEvent.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/staging.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Swag\\PaymentProvider\\Subscriber;\n\nuse Shopware\\Core\\Maintenance\\Staging\\Event\\SetupStagingEvent;\n\nclass StagingSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            SetupStagingEvent::class => 'onSetupStaging'\n        ];\n    }\n\n    public function onSetupStaging(SetupStagingEvent $event): void\n    {\n        // modify the database to turn on the test mode\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Plugins in Composer.json\nDESCRIPTION: Complete composer.json configuration for a plugin that requires another plugin as a dependency. The file demonstrates how to specify both Shopware core and another plugin in the require section.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/composer.json\n{\n    \"name\": \"swag/plugin-dependency\",\n    \"description\": \"Plugin requiring other plugins\",\n    \"version\": \"v1.0.0\",\n    \"type\": \"shopware-platform-plugin\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"shopware AG\",\n            \"role\": \"Manufacturer\"\n        }\n    ],\n    \"require\": {\n        \"shopware/core\": \"6.1.*\",\n        \"swag/SwagBasicExample\": \"v1.0.0\"\n    },\n    \"extra\": {\n        \"shopware-plugin-class\": \"Swag\\\\PluginDependency\\\\PluginDependency\",\n        \"label\": {\n            \"de-DE\": \"Plugin mit Plugin-Abhängigkeiten\",\n            \"en-GB\": \"Plugin with plugin dependencies\"\n        },\n        \"description\": {\n            \"de-DE\": \"Plugin mit Plugin-Abhängigkeiten\",\n            \"en-GB\": \"Plugin with plugin dependencies\"\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Swag\\\\PluginDependency\\\\\": \"src/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shipping Method Configuration in Shopware App Manifest\nDESCRIPTION: Demonstrates the minimal configuration required to add a shipping method to a Shopware app. Includes setting up the identifier, name, and delivery time.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/shipping-methods.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <!-- Make sure that the name of your app does not change anymore, otherwise there will be duplicates of your shipping methods -->\n        <name>NameOfYourShippingMethodApp</name>\n        <!-- ... -->\n    </meta>\n\n    <shipping-methods>\n\n        <shipping-method>\n            <!-- The identifier should not change after the first release -->\n            <identifier>NameOfYourFirstShippingMethod</identifier>\n            <name>First shipping method</name>\n\n            <delivery-time>\n                <!-- Requires a new generated UUID for your new delivery time -->\n                <id>c8864e36a4d84bd4a16cc31b5953431b</id>\n                <name>From 2 to 4 days</name>\n                <min>2</min>\n                <max>4</max>\n                <unit>day</unit>\n            </delivery-time>\n        </shipping-method>\n\n    </shipping-methods>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Checking Location ID in Shopware Admin Extension (JavaScript)\nDESCRIPTION: This snippet demonstrates how an app or plugin can check the current `locationID` of its rendered iframe using the `sw.location.is()` method provided by the Shopware Admin Extension SDK. This allows the extension to render different content or UIs based on where the iframe is currently being displayed within the administration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-12-07-admin-extension-api-standards.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (sw.location.is('sw-dashboard-example-app-dashboard-card')) {\n    renderDashboardCard();\n}\n\nif (sw.location.is('example-app-example-modal-content')) {\n    renderModalContent();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Data Sets using Shopware ExtensionAPI\nDESCRIPTION: Demonstrates how to publish data sets (entities, subsets, or scalar values) using the Shopware.ExtensionAPI.publishData method in a component's lifecycle hook.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-16-deprecating-sdk-public-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreatedComponent() {\n    Shopware.ExtensionAPI.publishData({\n        id: 'sw-dashboard-detail__todayOrderData',\n        path: 'todayOrderData',\n        scope: this,\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Command in services.xml\nDESCRIPTION: XML configuration to register a custom CLI command in the Shopware 6 dependency injection container. The command is tagged with 'console.command' to be recognized by Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-custom-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Command\\ExampleCommand\">\n            <tag name=\"console.command\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering ProductListingCollectFilterEvent Subscriber in PHP\nDESCRIPTION: Defines the event subscriber method for adding a custom filter to the product listing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-listing-filters.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getSubscribedEvents(): array\n{\n    return [\n        ProductListingCollectFilterEvent::class => 'addFilter'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Local Vue Directive in Shopware Component\nDESCRIPTION: Demonstrates how to register a focus directive locally within a Shopware component. The directive adds focus functionality to elements within the component's scope.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/adding-directives.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n\n    directives: {\n        focus: {\n            // When the bound element is inserted into the DOM...\n            inserted: function (el) {\n                // Focus the element\n                el.focus();\n            }\n        }\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Single-Select Field in Shopware Theme\nDESCRIPTION: This snippet demonstrates how to create a custom single-select field in a Shopware theme configuration. It includes the theme metadata and defines a single-select field for font size selection with multiple options.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"Just another theme\",\n  \"author\": \"Just another author\",\n  \"description\": {\n    \"en-GB\": \"Just another description\",\n    \"de-DE\": \"Nur eine weitere Beschreibung\"\n  },\n  \"views\": [\n    \"@Storefront\",\n    \"@Plugins\",\n    \"@SelectExample\"\n  ],\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\",\n    \"@Storefront\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  \"script\": [\n    \"@Storefront\",\n    \"app/storefront/dist/storefront/js/select-example/select-example.js\"\n  ],\n  \"asset\": [\n    \"@Storefront\",\n    \"app/storefront/src/assets\"\n  ],\n  \"config\": {\n    \"blocks\": {\n      \"exampleBlock\": {\n        \"label\": {\n          \"en-GB\": \"Example block\",\n          \"de-DE\": \"Beispiel Block\"\n        }\n      }\n    },\n    \"sections\": {\n      \"exampleSection\": {\n        \"label\": {\n          \"en-GB\": \"Example section\",\n          \"de-DE\": \"Beispiel Sektion\"\n        }\n      }\n    },\n    \"fields\": {\n      \"my-single-select-field\": {\n        \"label\": {\n          \"en-GB\": \"Select a font size\",\n          \"de-DE\": \"Wähle ein Schriftgröße\"\n        },\n        \"type\": \"text\",\n        \"value\": \"24\",\n        \"custom\": {\n          \"componentName\": \"sw-single-select\",\n          \"options\": [\n            {\n              \"value\": \"16\",\n              \"label\": {\n                \"en-GB\": \"16px\",\n                \"de-DE\": \"16px\"\n              }\n            },\n            {\n              \"value\": \"20\",\n              \"label\": {\n                \"en-GB\": \"20px\",\n                \"de-DE\": \"20px\"\n              }\n            },\n            {\n              \"value\": \"24\",\n              \"label\": {\n                \"en-GB\": \"24px\",\n                \"de-DE\": \"24px\"\n              }\n            }\n          ]\n        },\n        \"editable\": true,\n        \"block\": \"exampleBlock\",\n        \"section\": \"exampleSection\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Migration Gateway Service using XML\nDESCRIPTION: This XML configuration registers the `OwnLocaleGateway` class as a service in Shopware's service container. It defines constructor arguments, injecting the required `ReaderRegistry` and `ConnectionFactory` services. The `shopware.migration.gateway` tag marks this service as a gateway implementation for the Migration Assistant, linking it to the corresponding profile.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Gateway\\OwnLocaleGateway\">\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Gateway\\Reader\\ReaderRegistry\"/>\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Connection\\ConnectionFactory\"/>\n    <tag name=\"shopware.migration.gateway\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Decorating Service Method\nDESCRIPTION: Shows how to decorate a service method to add additional functionality or modify its behavior.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Application.addServiceProviderDecorator('joker', joker => {\n    const decoratedMethod = joker.joke;\n\n    joker.joke = function () {\n        return decoratedMethod.call(joker).then(joke => ({\n            ...joke,\n            funny: joke.id % 2 === 0\n        }))\n    };\n\n    return joker;\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Internal API Calls\nDESCRIPTION: Example of updating Vue internal API calls that may break in Vue 3, focusing on this.$ usage.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/upgrades/administration/vue3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Old Vue 2 code\nthis.$set(this.myObject, 'newProperty', 'value');\n\n// New Vue 3 code\nthis.myObject.newProperty = 'value';\n\n// Unchanged\nthis.$tc('my.translation.key');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware HTTP Cache Settings\nDESCRIPTION: YAML configuration for enabling reverse proxy support in Shopware with Varnish integration. Defines host settings, ban method, and parallel invalidation limits.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    http_cache:\n        reverse_proxy:\n            enabled: true\n            ban_method: \"BAN\"\n            hosts: [ \"http://varnish\" ]\n            max_parallel_invalidations: 3\n            use_varnish_xkey: true\n```\n\n----------------------------------------\n\nTITLE: Complete Plugin Test Implementation\nDESCRIPTION: Full implementation of plugin tests including instantiation check and functionality verification with assertions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nimport HelloWorldPlugin from 'src/plugin/hello-world/hello-world.plugin';\n\ndescribe('HelloWorldPlugin tests', () => {\n\n    let plugin;\n\n    beforeEach(() => {\n        window.PluginManager = {\n            getPluginInstancesFromElement: () => {\n                return new Map();\n            },\n            getPlugin: () => {\n                return {\n                    get: () => []\n                };\n            }\n        };\n\n        const mockedElement = document.createElement('div');\n        plugin = new HelloWorldPlugin(mockedElement);\n    });\n\n    afterEach(() => {\n        // Teardown\n        plugin = null;\n    });\n\n    test('The cookie configuration plugin can be instantiated', () => {\n        // your actual test\n        expect(plugin).toBeInstanceOf(HelloWorldPlugin);\n    });\n\n    test('Shows text', () => {\n        expect(plugin.sayHello()).toBe('Hello World!')\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber for Products in Shopware 6\nDESCRIPTION: This PHP code shows a subscriber class that listens to the product.loaded event. It implements the EventSubscriberInterface and defines a method to handle loaded product entities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/use-plugin-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Subscriber/MySubscriber.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\n\nclass MySubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductEvents::PRODUCT_LOADED_EVENT => 'onProductsLoaded'\n        ];\n    }\n\n    public function onProductsLoaded(EntityLoadedEvent $event): void\n    {\n        // Do stuff with the product\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Local Shopware Project for PaaS Deployment (Shell)\nDESCRIPTION: This sequence of shell commands guides the user through creating a new Shopware production project locally using Composer, navigating into the project directory, and installing the necessary PaaS composer package. It assumes Composer is installed and accessible.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/index.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer create-project shopware/production demo --no-interaction --ignore-platform-reqs\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd /demo\n```\n\nLANGUAGE: sh\nCODE:\n```\ncomposer req paas\n```\n\n----------------------------------------\n\nTITLE: Defining Source System Product Table Schema in SQL\nDESCRIPTION: This SQL statement creates a simple 'product' table intended to simulate a third-party source system database. This table structure includes essential product fields like ID, number, price, stock, name, and tax, serving as a basic prerequisite for demonstrating the custom migration profile.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE product\n(\n  id int PRIMARY KEY NOT NULL AUTO_INCREMENT,\n  product_number varchar(255) NOT NULL,\n  price float NOT NULL,\n  stock int NOT NULL,\n  product_name varchar(255) NOT NULL,\n  tax float NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Privilege Snippet Paths in Shopware\nDESCRIPTION: Example of privilege snippet path formats for translations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsw.privileges.${category}.${key}.label\n// e.g. sw.privileges.permissions.product.label\n// e.g. sw.privileges.additional_permissions.system.label\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in API Route Method\nDESCRIPTION: Using the rate limiter in an API route method to limit requests by client IP. This implementation calls the ensureAccepted method which will throw a RateLimitExceededException if the limit is reached.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rate-limiter/add-rate-limiter-to-api-route.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/ExampleRoute.php\n\n#[Route(path: '/store-api/example', name: 'store-api.example.search', methods: ['GET','POST'])]\npublic function load(Request $request, SalesChannelContext $context): ExampleRouteResponse\n{\n    // Limit ip address\n    $this->rateLimiter->ensureAccepted('example_route', $request->getClientIp());\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Version Only Webhooks (XML)\nDESCRIPTION: Example of defining a webhook that only triggers for live versions of entities. This is useful for filtering out drafts and only receiving notifications for finalized data changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/webhook.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<webhook name=\"order-created\" url=\"https://example.com/event/order-created\" event=\"order.written\" onlyLiveVersion=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Shopping Lists ER Diagram in Mermaid\nDESCRIPTION: Entity relationship diagram showing the structure and relationships between shopping lists and line items tables. Defines fields like customer_id, employee_id, sales_channel_id for shopping lists and product_id, quantity for line items.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/concepts/entities-and-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    b2b_components_shopping_list {\n        uuid id PK\n        uuid customer_id FK\n        uuid employee_id FK\n        uuid sales_channel_id FK\n        string name\n        boolean active\n        json custom_fields\n    }\n    b2b_components_shopping_list_line_item {\n        uuid id PK\n        uuid b2b_components_shopping_list_id FK\n        uuid product_id FK\n        int quantity\n    }\nb2b_components_shopping_list_line_item o{--|| b2b_components_shopping_list : \"has line items\"\n```\n\n----------------------------------------\n\nTITLE: Mocking Functions in Jest for Shopware Administration Components\nDESCRIPTION: Illustrates how to mock functions needed by a component to resolve common warnings in Jest tests. This example shows mocking the 'hasError' function when shallow mounting a component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nshallowMount(Shopware.Component.build('your-component'), {\n    mocks: {\n        hasError: () => false // your mock (here a simple function returning the value \"true\")\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Image Type Detector in Shopware PHP\nDESCRIPTION: This code snippet shows how to create a custom type detector class for recognizing a new image file extension in Shopware. It implements the TypeDetectorInterface and defines the 'img' extension as a supported image type.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/add-custom-file-extension.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Media\\TypeDetector;\n\nuse Shopware\\Core\\Content\\Media\\File\\MediaFile;\nuse Shopware\\Core\\Content\\Media\\MediaType\\ImageType;\nuse Shopware\\Core\\Content\\Media\\MediaType\\MediaType;\nuse Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetectorInterface;\n\nclass CustomImageTypeDetector implements TypeDetectorInterface\n{\n    protected const SUPPORTED_FILE_EXTENSIONS = [\n        'img' => [ImageType::TRANSPARENT],\n    ];\n\n    public function detect(MediaFile $mediaFile, ?MediaType $previouslyDetectedType): ?MediaType\n    {\n        $fileExtension = mb_strtolower($mediaFile->getFileExtension());\n        if (!\\array_key_exists($fileExtension, self::SUPPORTED_FILE_EXTENSIONS)) {\n            return $previouslyDetectedType;\n        }\n\n        if ($previouslyDetectedType === null) {\n            $previouslyDetectedType = new ImageType();\n        }\n\n        $previouslyDetectedType->addFlags(self::SUPPORTED_FILE_EXTENSIONS[$fileExtension]);\n\n        return $previouslyDetectedType;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in Shopware 6\nDESCRIPTION: XML configuration for route definitions, importing controller routes using attributes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-dynamic-content-via-ajax-calls.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <import resource=\"../../Storefront/Controller/**/*Controller.php\" type=\"attribute\" />\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Uninstall Method in Shopware\nDESCRIPTION: Method executed when a plugin is uninstalled. Handles cleanup of plugin data with consideration for keepUserData flag to preserve important data if requested by user.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/plugin-lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function uninstall(UninstallContext $uninstallContext): void\n{\n    parent::uninstall($uninstallContext);\n\n    if ($uninstallContext->keepUserData()) {\n        return;\n    }\n\n    // Remove or deactivate the data created by the plugin\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Shopware Project using Docker\nDESCRIPTION: Commands to create a new Shopware project using a Docker container. This approach eliminates the need to install PHP and Composer locally by utilizing the container's environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -v $PWD:/var/www/html ghcr.io/shopwarelabs/devcontainer/base-slim:8.3 new-shopware-setup\n\n# or specific version\ndocker run --rm -it -v $PWD:/var/www/html ghcr.io/shopwarelabs/devcontainer/base-slim:8.3 new-shopware-setup 6.6.10.0\n```\n\n----------------------------------------\n\nTITLE: Media URL Generation Before and After Architecture Change in PHP\nDESCRIPTION: Demonstrates how the media URL generation will change with the new architecture, showing examples of both the current approach and the new implementation with batch processing capabilities.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-17-media-path.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\nnamespace Examples;\n\nuse Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaUrlGenerator;use Shopware\\Core\\Content\\Media\\Core\\Params\\UrlParams;use Shopware\\Core\\Content\\Media\\MediaCollection;use Shopware\\Core\\Content\\Media\\MediaEntity;use Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface;\n\nclass BeforeChange\n{\n    private UrlGeneratorInterface $urlGenerator;\n    \n    public function foo(MediaEntity $media) \n    {\n        $relative = $this->urlGenerator->getRelativeMediaUrl($media);\n        \n        $absolute = $this->urlGenerator->getAbsoluteMediaUrl($media);\n    }\n    \n    public function bar(MediaThumbnailEntity $thumbnail) \n    {\n        $relative = $this->urlGenerator->getRelativeThumbnailUrl($thumbnail);\n        \n        $absolute = $this->urlGenerator->getAbsoluteThumbnailUrl($thumbnail);\n    }\n}\n\nclass AfterChange\n{\n    private AbstractMediaUrlGenerator $generator;\n    \n    public function foo(MediaEntity $media) \n    {\n        $relative = $media->getPath();\n\n        $urls = $this->generator->generate([UrlParams::fromMedia($media)]);\n        \n        $absolute = $urls[0];\n    }\n    \n    public function bar(MediaThumbnailEntity $thumbnail) \n    {\n        // relative is directly stored at the entity\n        $relative = $thumbnail->getPath();\n\n        // path generation is no more entity related, you could also use partial entity loading and you can also call it in batch, see below\n        $urls = $this->generator->generate([UrlParams::fromMedia($media)]);\n        \n        $absolute = $urls[0];\n    }\n    \n    public function batch(MediaCollection $collection) \n    {\n        $params = [];\n        \n        foreach ($collection as $media) {\n            $params[$media->getId()] = UrlParams::fromMedia($media);\n            \n            foreach ($media->getThumbnails() as $thumbnail) {\n                $params[$thumbnail->getId()] = UrlParams::fromThumbnail($thumbnail);\n            }\n        }\n        \n        $urls = $this->generator->generate($paths);\n\n        // urls is a flat list with {id} => {url} for media and also for thumbnails        \n    }\n}\n\nclass ForwardCompatible\n{\n    // to have it forward compatible, you can use the Feature::isActive('v6.6.0.0') function\n    public function foo(MediaEntity $entity) \n    {\n        // we provide an entity loaded subscriber, which assigns the url of\n        // the UrlGeneratorInterface::getRelativeMediaUrl to the path property till 6.6\n        // so that you always have the relative url in the MediaEntity::path proprerty \n        $path = $entity->getPath();\n        \n        if (Feature::isActive('v6.6.0.0')) {\n            // new generator call for absolute url\n        } else {\n            // old generator call for absolute url\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request/Response Structure for Checkout Gateway\nDESCRIPTION: Shows the structure of JSON requests and responses for the checkout gateway endpoint, including cart validation and payment method handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/checkout-gateway.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"cart\": {\n    //...\n  },\n  \"salesChannelContext\": {\n    //...\n  },\n  \"availablePaymentMethods\": [\n    \"payment-method-technical-name-1\",\n    \"payment-method-technical-name-2\",\n    // ...\n  ],\n  \"availableShippingMethods\": [\n    \"shipping-method-technical-name-1\",\n    \"shipping-method-technical-name-2\",\n    // ...\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\n    {\n      \"command\": \"remove-payment-method\",\n      \"payload\": {\n        \"paymentMethodTechnicalName\": \"payment-myApp-payment-method\"\n      }\n    },\n    {\n      \"command\": \"add-cart-error\",\n      \"payload\": {\n        \"message\": \"Payment method 'My App Payment Method' is not available for carts > 1000€.\",\n        \"blocking\": false,\n        \"level\": 10,\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Copyable Content to Text Input Fields in Shopware\nDESCRIPTION: Shows how to add a copy button to text input fields in the plugin configuration. The 'copyable' setting only accepts boolean values and works with text type fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<input-field>\n    <name>email</name>\n    <copyable>true</copyable>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom URL Provider for Shopware Sitemap\nDESCRIPTION: This PHP class, CustomUrlProvider, extends AbstractUrlProvider to add custom entity SEO URLs to the Shopware sitemap. It fetches custom entities, retrieves or generates SEO URLs, and creates Url instances for each entity to be included in the sitemap.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/add-custom-sitemap-entries.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Sitemap\\Provider;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Content\\Sitemap\\Provider\\AbstractUrlProvider;\nuse Shopware\\Core\\Content\\Sitemap\\Struct\\Url;\nuse Shopware\\Core\\Content\\Sitemap\\Struct\\UrlResult;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Doctrine\\FetchModeHelper;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Swag\\BasicExample\\Core\\Content\\Example\\ExampleEntity;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Routing\\RouterInterface;\n\nclass CustomUrlProvider extends AbstractUrlProvider\n{\n    public const CHANGE_FREQ = 'daily';\n    public const PRIORITY = 1.0;\n\n    private EntityRepository $exampleRepository;\n\n    private Connection $connection;\n\n    private RouterInterface $router;\n\n    public function __construct(\n        EntityRepository $exampleRepository,\n        Connection $connection,\n        RouterInterface $router\n    ) {\n        $this->exampleRepository = $exampleRepository;\n        $this->connection = $connection;\n        $this->router = $router;\n    }\n\n    public function getDecorated(): AbstractUrlProvider\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    public function getName(): string\n    {\n        return 'custom';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getUrls(SalesChannelContext $context, int $limit, ?int $offset = null): UrlResult\n    {\n        $criteria = new Criteria();\n        $criteria->setLimit($limit);\n        $criteria->setOffset($offset);\n\n        $exampleEntities = $this->exampleRepository->search($criteria, $context->getContext());\n\n        if ($exampleEntities->count() === 0) {\n            return new UrlResult([], null);\n        }\n\n        $seoUrls = $this->getSeoUrls($exampleEntities->getIds(), 'frontend.example.example', $context, $this->connection);\n        $seoUrls = FetchModeHelper::groupUnique($seoUrls);\n\n        $urls = [];\n\n        /** @var ExampleEntity $exampleEntity */\n        foreach ($exampleEntities as $exampleEntity) {\n            $exampleUrl = new Url();\n            $exampleUrl->setLastmod($exampleEntity->getUpdatedAt() ?? new \\DateTime());\n            $exampleUrl->setChangefreq(self::CHANGE_FREQ);\n            $exampleUrl->setPriority(self::PRIORITY);\n            $exampleUrl->setResource(ExampleEntity::class);\n            $exampleUrl->setIdentifier($exampleEntity->getId());\n\n            if (isset($seoUrls[$exampleEntity->getId()])) {\n                $exampleUrl->setLoc($seoUrls[$exampleEntity->getId()]['seo_path_info']);\n            } else {\n                $exampleUrl->setLoc(\n                    $this->router->generate(\n                        'frontend.example.example',\n                        ['exampleId' => $exampleEntity->getId()],\n                        UrlGeneratorInterface::ABSOLUTE_PATH\n                    )\n                );\n            }\n\n            $urls[] = $exampleUrl;\n        }\n\n        return new UrlResult($urls, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Aware Interface in PHP\nDESCRIPTION: This snippet shows the definition of a custom Aware interface (CustomExampleDataAware) for use in the Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[IsFlowEventAware]\ninterface CustomExampleDataAware extends FlowEventAware\n{\n    public const CUSTOM_EXAMPLE_DATA = 'customExampleData';\n\n    public function getCustomExampleData(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object Default Values Directly in Constructor - PHP (PHP 8.1+)\nDESCRIPTION: Demonstrates specifying a non-scalar (object) default parameter directly in the constructor signature, eliminating the need for null-checking and additional assignment logic within the constructor body. Requires PHP 8.1 or higher.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass PasswordHasher\n{\n    public function __construct(private Hasher $hasher = new Bcrypt())\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom JavaScript in Shopware 6 Administration\nDESCRIPTION: Demonstrates how to import custom JavaScript files in the main entry point for Administration customizations\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './sw-dashboard-index-override/';\n```\n\n----------------------------------------\n\nTITLE: Adding Method to PHP Abstract Class using Decorator Pattern\nDESCRIPTION: Illustrates adding a new method (`loadV2`) to an abstract class intended for decoration. The implementation requires a `getDecorated()` method (to access the inner service) and calls the same method on the decorated instance, allowing the decoration chain to function even if intermediate decorators don't implement the new method.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n```php\nabstract class AbstractCustomerRoute\n{\n    abstract public function load(Request $request, SalesChannelContext $context): CustomerResponse;\n\n    abstract public function getDecorated(): AbstractCustomerRoute; \n\n    public function loadV2() \n    {\n        $this->getDecorated()->loadV2();                               \n    }       \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting ManyToMany Association in Shopware 6 PHP\nDESCRIPTION: Shows how to remove a ManyToMany association by deleting the mapping entity. This example un-assigns a category from a product using the productCategoryRepository.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/deleting-associated-data.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function removeAssocData(Context $context): void\n{\n    $this->productCategoryRepository->delete([\n        [\n            'productId' => 'myProductId',\n            'categoryId' => 'myCategoryId'\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Associations in Repository Search Results in Twig\nDESCRIPTION: Demonstrates how to include associated entities (like manufacturer) when searching for a product using the repository facade.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'ids': [ hook.productId ],\n    'associations': {\n        'manufacturer': {}\n    }\n} %}\n\n{% set product = services.repository.search('product', criteria).first %}\n\n{% do page.addExtension('myProduct', product) %}\n{% do page.addExtension('myManufacturer', product.manufacturer) %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Migration Namespace in Shopware 6 Plugin\nDESCRIPTION: Code example demonstrating how to override the default migration namespace in a Shopware 6 plugin by implementing the getMigrationNamespace() method in the plugin base class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getMigrationNamespace(): string\n{\n    return 'Swag\\\\BasicExample\\\\MyMigrationNamespace';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Shopping Lists with Store API\nDESCRIPTION: GET endpoint for retrieving all shopping lists available to the current context.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_3\n\nLANGUAGE: http request\nCODE:\n```\nGET {url}/store-api/shopping-lists\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Cart Storage in Shopware\nDESCRIPTION: YAML configuration snippet for setting up Redis as the cart storage in Shopware. This configuration is added to config/packages/cart.yml to outsource cart write operations from the database. It uses a persistent Redis connection to avoid issues in high-load scenarios.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/database-cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    cart:\n        redis_url: 'redis://localhost:6379/0?persistent=1'\n```\n\n----------------------------------------\n\nTITLE: Order Module Structure in Shopware Administration\nDESCRIPTION: Shows the directory structure of the order module as a practical example. Includes components for managing orders, pages for creating, listing, and viewing orders, and supporting files for state management and translations.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/architecture/administration-concept.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n<shopware/src/Administration/Resources/app/administration/src/module/sw-order/>\n|- acl\n|- component\n  |- sw-order-address-modal\n  |- …\n|- page\n  |- sw-order-create\n  |- sw-order-detail\n  |- sw-order-list\n|- snippet  \n|- state  \n|- view\n  |- sw-order-create-base\n  |- sw-order-details-base\n|- index.js\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to StockData in PHP\nDESCRIPTION: This PHP code snippet shows how to add arbitrary data to a StockData instance using extensions, allowing for additional custom information to be included.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/loading-stock-information-from-different-source.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$stockData = \\Shopware\\Core\\Content\\Product\\Stock\\StockData::fromArray([\n    'productId' => 'product-1',\n    'stock' => 5,\n    'available' => true,\n]);\n\n$stockData->addArrayExtension('extraData', ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI manually from package files\nDESCRIPTION: Commands to install Shopware CLI from downloaded package files (.deb, .rpm, or .apk) based on the Linux distribution.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo dpkg -i shopware-cli_0.5.2_linux_amd64.deb # for .deb\nsudo rpm -i shopware-cli_0.5.2_linux_arm64.rpm # for .rpm\nsudo apk add shopware-cli-0.5.2.apk # for .apk\n```\n\n----------------------------------------\n\nTITLE: Database Migration for Product Extension\nDESCRIPTION: Creates the database table for the product extension with proper foreign key constraints and versioning support.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\n\nclass Migration1614903457ExampleExtension extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1614903457;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $sql = <<<SQL\nCREATE TABLE IF NOT EXISTS `swag_example_extension` (\n    `id` BINARY(16) NOT NULL,\n    `product_id` BINARY(16) NULL,\n    `product_version_id` BINARY(16) NOT NULL,\n    `custom_string` VARCHAR(255) NULL,\n    `created_at` DATETIME(3) NOT NULL,\n    `updated_at` DATETIME(3) NULL,\n    PRIMARY KEY (`id`),\n    CONSTRAINT `unique.swag_example_extension.product` UNIQUE (`product_id`, `product_version_id`),\n    CONSTRAINT `fk.swag_example_extension.product_id` FOREIGN KEY (`product_id`, `product_version_id`) REFERENCES `product` (`id`, `version_id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\nSQL;\n        $connection->executeStatement($sql);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Prop Default Functions in Vue 3\nDESCRIPTION: Example of updating prop default functions to work without access to the component's this scope in Vue 3.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/upgrades/administration/vue3.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Vue 2\nexport default {\n  props: {\n    myProp: {\n      default() {\n        return this.$tc('my.translation.key');\n      }\n    }\n  }\n}\n\n// Vue 3\nimport { inject } from 'vue';\n\nexport default {\n  props: {\n    myProp: {\n      default() {\n        const { $tc } = inject('i18n');\n        return $tc('my.translation.key');\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Role Validation Service in PHP for B2B Suite\nDESCRIPTION: This code defines a RoleValidationService class that provides methods for creating validation rules for inserting and updating Role entities.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/crud-service.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Role\\Framework;\n\nuse Shopware\\B2B\\Common\\Validator\\ValidationBuilder;\nuse Shopware\\B2B\\Common\\Validator\\Validator;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\n\nclass RoleValidationService\n{\n    private ValidationBuilder $validationBuilder;\n\n    private ValidatorInterface $validator;\n\n    public function __construct(\n        ValidationBuilder $validationBuilder,\n        ValidatorInterface $validator\n    ) {\n        $this->validationBuilder = $validationBuilder;\n        $this->validator = $validator;\n    }\n\n    public function createInsertValidation(RoleEntity $role): Validator\n    {\n\n        [...]\n\n    }\n\n    public function createUpdateValidation(RoleEntity $role): Validator\n    {\n\n        [...]\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Content Modal in Twig\nDESCRIPTION: This snippet demonstrates how to create a basic modal with simple content using the B2B modal component. It extends the base modal template and sets up a modal without navigation, displaying a title and content.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/modal-component.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@SwagB2bPlatform/storefront/_partials/_b2bmodal/_modal.html.twig' %}\n\n{% set modalSettings = {\n    navigation: false\n} %}\n\n{% block b2b_modal_base_navigation_header %}\n    Modal Title\n{% endblock %}\n\n{% block b2b_modal_base_content_inner %}\n    Modal Content\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Migration for Document Number Range in Shopware\nDESCRIPTION: A PHP migration class that adds a custom document number range by inserting entries into number_range_type, number_range, number_range_sales_channel tables and their translation tables. The migration creates a new document type with a pattern '{n}' starting from 10000.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/document/add-custom-document-type.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\Migration\\Traits\\ImportTranslationsTrait;\nuse Shopware\\Core\\Migration\\Traits\\Translations;\n\nclass Migration1616974646AddDocumentNumberRange extends MigrationStep\n{\n    use ImportTranslationsTrait;\n\n    public function getCreationTimestamp(): int\n    {\n        return 1616974646;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $numberRangeId = Uuid::randomBytes();\n        $numberRangeTypeId = Uuid::randomBytes();\n\n        $this->insertNumberRange($connection, $numberRangeId, $numberRangeTypeId);\n        $this->insertTranslations($connection, $numberRangeId, $numberRangeTypeId);\n\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n\n    private function insertNumberRange(Connection $connection, string $numberRangeId, string $numberRangeTypeId): void\n    {\n        $connection->insert('number_range_type', [\n            'id' => $numberRangeTypeId,\n            'global' => 0,\n            'technical_name' => 'document_example',\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)\n        ]);\n\n        $connection->insert('number_range', [\n            'id' => $numberRangeId,\n            'type_id' => $numberRangeTypeId,\n            'global' => 0,\n            'pattern' => '{n}',\n            'start' => 10000,\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)\n        ]);\n\n        $storefrontSalesChannelId = $this->getStorefrontSalesChannelId($connection);\n        if (!$storefrontSalesChannelId) {\n            return;\n        }\n\n        $connection->insert('number_range_sales_channel', [\n            'id' => Uuid::randomBytes(),\n            'number_range_id' => $numberRangeId,\n            'sales_channel_id' => $storefrontSalesChannelId,\n            'number_range_type_id' => $numberRangeTypeId,\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)\n        ]);\n    }\n\n    private function getStorefrontSalesChannelId(Connection $connection): ?string\n    {\n        $sql = <<<SQL\n            SELECT id\n            FROM sales_channel\n            WHERE type_id = :typeId\nSQL;\n        $salesChannelId = $connection->fetchOne($sql, [\n            'typeId' => Uuid::fromHexToBytes(Defaults::SALES_CHANNEL_TYPE_STOREFRONT)\n        ]);\n\n        if (!$salesChannelId) {\n            return null;\n        }\n\n        return $salesChannelId;\n    }\n\n    private function insertTranslations(Connection $connection, string $numberRangeId, string $numberRangeTypeId): void\n    {\n        $numberRangeTranslations = new Translations(\n            [\n                'number_range_id' => $numberRangeId,\n                'name' => 'Beispiel',\n            ],\n            [\n                'number_range_id' => $numberRangeId,\n                'name' => 'Example',\n            ]\n        );\n\n        $numberRangeTypeTranslations = new Translations(\n            [\n                'number_range_type_id' => $numberRangeTypeId,\n                'type_name' => 'Beispiel',\n            ],\n            [\n                'number_range_type_id' => $numberRangeTypeId,\n                'type_name' => 'Example',\n            ]\n        );\n\n        $this->importTranslation(\n            'number_range_translation',\n            $numberRangeTranslations,\n            $connection\n        );\n\n        $this->importTranslation(\n            'number_range_type_translation',\n            $numberRangeTypeTranslations,\n            $connection\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Product Repository in Shopware 6 Plugin (XML)\nDESCRIPTION: XML configuration to inject the product repository into a custom service in a Shopware 6 plugin. This sets up dependency injection for the ReadingData service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\ReadingData\" >\n            <argument type=\"service\" id=\"product.repository\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Extending Storefront Logo Template in Twig\nDESCRIPTION: This snippet demonstrates how to extend the original Storefront logo template and override its content with custom HTML. It uses Twig's extend functionality to inherit from the original template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/customize-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/layout/header/logo.html.twig' %}\n\n{% block layout_header_logo_link %}\n    <h2>Hello world!</h2>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Props and Context in Component Override\nDESCRIPTION: Shows how to access props and context within the overrideComponentSetup function.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('sw-customer-list', (previousState, props, context) => {\n    // Access the props\n    console.log(props);\n\n    // Access the context\n    console.log(context);\n\n    return {};\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber Service in XML\nDESCRIPTION: This XML snippet shows how to register the custom event subscriber as a service in the Symfony container, with the necessary tag for it to be recognized as an event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n        <service id=\"Swag\\BasicExample\\Service\\DynamicSeoUrlPageSubscriber\" >\n            <argument type=\"service\" id=\"Shopware\\Core\\Content\\Seo\\SeoUrlUpdater\" />\n\n            <tag name=\"kernel.event_subscriber\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining an Extendable Block Component in Vue\nDESCRIPTION: Example of a proposed Vue template block component named 'sw-block' that would replace the Twig.JS template functionality, allowing plugin developers to extend or overwrite specific named sections.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-27-native-extension-system-with-vue.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<sw-block name=\"sw-hello-world\">\n<div>Hello World</div>\n</sw-block>\n```\n\n----------------------------------------\n\nTITLE: Updating Shopware Config Files\nDESCRIPTION: Command to force-update all configuration files in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer recipes:update\n```\n\n----------------------------------------\n\nTITLE: Running the Shopware Deployment Helper\nDESCRIPTION: Command to execute the Shopware Deployment Helper from the vendor directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-helper.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/shopware-deployment-helper run\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Component Configuration\nDESCRIPTION: Example of component configuration using wrapComponentConfig for asynchronous loading, providing full type support for the component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Shopware.Component.wrapComponentConfig({\n    // Configuration here\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flysystem Adapter Factory for Shopware\nDESCRIPTION: PHP implementation of a custom Flysystem adapter factory for Shopware 6, implementing the AdapterFactoryInterface to make a custom storage adapter available in the system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Shopware\\Core\\Framework\\Adapter\\Filesystem\\Adapter\\AdapterFactoryInterface;\nuse League\\Flysystem\\AdapterInterface;\n\nclass MyFlysystemAdapterFactory implements AdapterFactoryInterface\n{\n    public function getType(): string\n    {\n        return 'my-adapter-prefix'; // This must match with the type in the yaml file\n    }\n\n    public function create(array $config): AdapterInterface\n    {\n        // $config contains the given config from the yaml\n        return new MyFlysystemAdapter($config);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Upload in Shopware 6 Administration\nDESCRIPTION: This snippet demonstrates how to use the sw-media-upload-v2 component for uploading media files. It showcases various configuration options such as upload tag, multi-select, variant, auto-upload, and custom label.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/handling-media.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <sw-media-upload-v2\n        uploadTag=\"my-upload-tag\"\n        :allowMultiSelect=\"false\"\n        variant=\"regular\"\n        :autoUpload=\"true\"\n        label=\"My image-upload\">\n    </sw-media-upload-v2>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Allowing Entity Access in PHP\nDESCRIPTION: Example of granting access to an entity for a specific contact with optional grantable permissions.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$aclAddressRepository = $this->container->get('b2b_address.acl_repository');\n$contactRepository = $this->container->get('b2b_contact.repository');\n\n$contact = $contactRepository->fetchOneById(1);\n\n$aclAddressRepository->allow(\n    $contact, // the contact \n    22, // the id of the address\n    true // whether the contact may grant access to other contacts\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopware E2E Test Fixture Service Directory Structure\nDESCRIPTION: Shows the directory structure for fixture services in Shopware's E2E testing setup, including administration and sales channel API services.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nservice\n  |-- administration // this folder stores the Administration channel API services\n    `-- <environment>\n      `-- test\n        `-- e2e\n          `-- cypress\n            |-- fixture\n            |-- admin-api.service.js // Provides all methods which communicate with admin api directly\n            `-- fixture.service.js // Provides all methods for general fixture handling\n  |-- saleschannel // this one stores the sales channel API services\n  `-- api.service.js // axios interface\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Configuration for Shopware Admin\nDESCRIPTION: Configuration variables to set up Elasticsearch for the Shopware Administration interface. This enables AND/OR search functionality for more flexible queries.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nADMIN_OPENSEARCH_URL=YOUR OPEN SEARCH URL \nSHOPWARE_ADMIN_ES_ENABLED=1\nSHOPWARE_ADMIN_ES_REFRESH_INDICES=1\nSHOPWARE_ADMIN_ES_INDEX_PREFIX=sw-admin\n```\n\n----------------------------------------\n\nTITLE: Checking Vue 3 Compatibility in Templates\nDESCRIPTION: Examples of changes required in templates for Vue 3 compatibility, including v-model updates and slot syntax changes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/upgrades/administration/vue3.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Replace sw-field with specific components -->\n<sw-text-field v-model=\"myValue\"></sw-text-field>\n\n<!-- Update v-model syntax -->\n<custom-input v-model:title=\"bookTitle\"></custom-input>\n\n<!-- Use new slot syntax -->\n<template #header=\"{ item }\">\n  {{ item.name }}\n</template>\n\n<!-- Update router-view with transition -->\n<router-view v-slot=\"{ Component }\">\n  <transition name=\"fade\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storefront Theme Loader in YAML\nDESCRIPTION: YAML configuration to set up the Storefront theme loader for building without a database. This configuration forces the theme compiler to use static dumped files instead of querying the database.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/build-w-o-db.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorefront:\n    theme:\n        config_loader_id: Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigLoader\n        available_theme_provider: Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileAvailableThemeProvider\n        theme_path_builder_id: Shopware\\Storefront\\Theme\\MD5ThemePathBuilder\n```\n\n----------------------------------------\n\nTITLE: Running Shopware Admin E2E Tests with Cypress\nDESCRIPTION: This command runs Cypress E2E tests for the Shopware administration interface in the command-line interface.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer e2e:cypress -- run --spec=\"cypress/e2e/administration/**/*.cy.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting Language ID Header in Shopware API\nDESCRIPTION: Example of using sw-language-id header to specify language preferences when fetching product data. This header allows changing the default system language for entity retrieval.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/request-headers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/product\n--header 'sw-language-id: be01bd336c204f20ab86eab45bbdbe45'\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductDataSelection for Shopware Migration\nDESCRIPTION: This PHP class implements the DataSelectionInterface to create a custom ProductDataSelection. It defines the identifier, supports method, and methods to retrieve DataSets and required DataSets for count.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionInterface;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionStruct;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\DataSet\\ProductDataSet;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile;\n\nclass ProductDataSelection implements DataSelectionInterface\n{\n    /**\n     * Identifier of this DataSelection\n     */\n    public const IDENTIFIER = 'products';\n\n    /**\n     * Supports only an OwnProfile\n     */\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile;\n    }\n\n    public function getData(): DataSelectionStruct\n    {\n        return new DataSelectionStruct(\n            self::IDENTIFIER,\n            $this->getDataSets(),\n            $this->getDataSetsRequiredForCount(),\n            /*\n             * Snippet of the original ProductDataSelection, if you\n             * want to use your own title, you have to create a new snippet\n             */\n            'swag-migration.index.selectDataCard.dataSelection.products',\n            100\n        );\n    }\n\n    /**\n     * Returns all DataSets, which should be migrated with this DataSelection\n     */\n    public function getDataSets(): array\n    {\n        return [\n            new ProductDataSet()\n        ];\n    }\n\n    public function getDataSetsRequiredForCount(): array\n    {\n        return $this->getDataSets();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Subscriber with SystemConfigService Integration\nDESCRIPTION: Updates the ThemeVariableSubscriber to read values from plugin configuration using the SystemConfigService. This enables sales channel-specific styling by retrieving the configured color value.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Shopware\\Storefront\\Event\\ThemeCompilerEnrichScssVariablesEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ThemeVariableSubscriber implements EventSubscriberInterface\n{\n    protected SystemConfigService $systemConfig;\n\n    // add the `SystemConfigService` to your constructor\n    public function __construct(SystemConfigService $systemConfig)\n    {\n        $this->systemConfig = $systemConfig;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ThemeCompilerEnrichScssVariablesEvent::class => 'onAddVariables'\n        ];\n    }\n\n    public function onAddVariables(ThemeCompilerEnrichScssVariablesEvent $event): void\n    {\n        /** @var string $configExampleField */\n        $configPluginHeaderBgColor = $this->systemConfig->get('SwagBasicExample.config.sassPluginHeaderBgColor', $event->getSalesChannelId());\n\n        if ($configPluginHeaderBgColor) {\n            // pass the value from `configPluginHeaderBgColor` to `addVariable`\n            $event->addVariable('sass-plugin-header-bg-color', $configPluginHeaderBgColor);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Main.js for Tag Management Component Integration\nDESCRIPTION: JavaScript code to update the main.js file for importing the tag management component and sequence action extension for the Shopware Flow Builder.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\nimport './extension/sw-flow-sequence-action';\nimport './component/sw-flow-create-tag-modal';\n```\n\n----------------------------------------\n\nTITLE: Creating Select Options in Shopware Plugin Configuration\nDESCRIPTION: Shows how to create single-select or multi-select input fields with predefined options in the configuration XML. Options can include translations for different languages.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<input-field type=\"single-select\">\n    <name>mailMethod</name>\n    <options>\n        <option>\n            <id>smtp</id>\n            <name>English label</name>\n            <name lang=\"de-DE\">German label</name>\n        </option>\n        <option>\n            <id>pop3</id>\n            <name>English label</name>\n            <name lang=\"de-DE\">German label</name>\n        </option>\n    </options>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Registering Migration DataSet and Decorator Services (XML)\nDESCRIPTION: Defines service configurations in XML for the Shopware Dependency Injection container, typically within a `migration_assistant_extension.xml` file. It registers the `ProductDataSelection` decorator, specifying the service it decorates (`SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\ProductDataSelection`). It also registers the `BundleDataSet` service and tags it with `shopware.migration.data_set` to make it discoverable by the Migration Assistant's `DataSetRegistry`.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\ProductDataSelection\"\n         decorates=\"SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\ProductDataSelection\">\n    <argument type=\"service\" id=\"SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\ProductDataSelection.inner\"/>\n</service>\n\n<service id=\"SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet\\BundleDataSet\">\n    <tag name=\"shopware.migration.data_set\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Handling Webhooks with Symfony Bundle\nDESCRIPTION: PHP code snippet showing how to handle webhooks using the Symfony Bundle in a Shopware app. It demonstrates creating a controller action for a specific webhook event.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/webhook.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Webhook\\WebhookAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[AsController]\nclass WebhookController {\n    #[Route('/webhook/product.created')]\n    public function handle(WebhookAction $webhook): Response\n    {\n        // handle webhook action\n        \n        return new Response(null, 204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Privilege Snippets Configuration in Shopware\nDESCRIPTION: JSON configuration example for privilege translations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sw-privileges\": {\n    \"permissions\": {\n      \"review\": {\n        \"label\": \"Reviews\"\n      }\n    },\n    \"additional_permissions\": {\n      \"system\": {\n        \"label\": \"System\",\n        \"clear_cache\": \"Clear cache\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Custom Events in Storefront JavaScript\nDESCRIPTION: Shows how to publish a custom event in Shopware 6 Storefront JavaScript plugins. This pattern is used to create custom events that can be subscribed to by other parts of the application.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.$emitter.publish('someEvent', additionalData);\n```\n\n----------------------------------------\n\nTITLE: Injecting the Translator Service via Dependency Injection\nDESCRIPTION: Example of injecting the Shopware translator service into a custom service using XML dependency injection configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Swag\\Example\\Service\\SwagService\" public=\"true\" >\n    <argument type=\"service\" id=\"translator\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Registering Administration Snippets via JavaScript (JavaScript)\nDESCRIPTION: JavaScript code, typically placed in a plugin's `main.js` file (`Resources/app/administration/main.js`), responsible for registering custom Administration snippets. It imports the JSON snippet file (`en-GB.json`) and uses the `Shopware.Application.addInitializerDecorator` to hook into the locale initialization (`localeFactory`), extending the 'en-GB' locale with the imported snippets to make them available in the Migration Assistant UI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport enGBSnippets from './snippet/en-GB.json';\n\nconst { Application } = Shopware;\n\nApplication.addInitializerDecorator('locale', (localeFactory) => {\n    localeFactory.extend('en-GB', enGBSnippets);\n\n    return localeFactory;\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Data in a Component\nDESCRIPTION: Shows how to modify existing data (adding a new column) in the sw-customer-list component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('sw-customer-list', (previousState) => {\n    // Add a new column to the list\n    previousState.columns.push({ property: 'customField', label: 'Custom Field' });\n    \n    return {};\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Feature Flags in Shopware\nDESCRIPTION: An example demonstrating how to enable feature flags for testing components that depend on feature availability. This approach uses the global.activeFeatureFlags variable to simulate having a specific feature enabled in the test environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('should render with active feature flag', async () => {\n    // set feature flag\n    global.activeFeatureFlags = ['FEATURE_NEXT_12345'];\n\n    const wrapper = await createWrapper();\n    expect(wrapper.vm).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Service Injection in Vue Component\nDESCRIPTION: Demonstrates how to inject and use the joke service in a Vue component using the inject property.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('swag-basic-example', {\n    inject: ['joker'],\n\n    created() {\n        this.joker.joke().then(joke => console.log(joke))\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Profiler for Cart Calculation in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the `Profiler::trace` method within the `CartCalculator` class. It wraps the core cart calculation logic, specifically the call to `cartRuleLoader->loadByCart`, inside a profiled span named 'cart-calculation'. This allows performance monitoring tools like Tideways or Datadog to isolate and measure the time spent specifically on cart calculation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-profiler-integrations.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Profiling\\Profiler;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\nclass CartCalculator\n{\n    /**\n     * @var CartRuleLoader\n     */\n    private $cartRuleLoader;\n\n    public function __construct(CartRuleLoader $cartRuleLoader)\n    {\n        $this->cartRuleLoader = $cartRuleLoader;\n    }\n\n    public function calculate(Cart $cart, SalesChannelContext $context): Cart\n    {\n        return Profiler::trace('cart-calculation', function () use ($cart, $context) {\n            // validate cart against the context rules\n            return $this->cartRuleLoader\n                ->loadByCart($context, $cart, new CartBehavior($context->getPermissions()))\n                ->getCart();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Duplicating a Shopping List with Store API\nDESCRIPTION: POST endpoint for duplicating an existing shopping list by ID. Requires a name parameter for the new duplicated list.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_1\n\nLANGUAGE: http request\nCODE:\n```\nPOST {url}/store-api/shopping-list/{id}/duplicate {\n    name: {string}\n}\n```\n\n----------------------------------------\n\nTITLE: Subtracting Price from Existing Calculated Price in Twig\nDESCRIPTION: Example of using the minus() method to subtract a static defined price from the existing calculated price in Twig. This snippet demonstrates creating a price object and subtracting it from the product's calculated price.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{% set price = services.price.create({\n    'default': { 'gross': 1.5, 'net': 1.5}\n}) %}\n\n{% do product.calculatedPrice.minus(price) %}\n```\n\n----------------------------------------\n\nTITLE: Defining the Core Profiler Class in PHP\nDESCRIPTION: This PHP code defines the `Profiler` class within the `Shopware\\Core\\Profiling` namespace. It manages an array of active `ProfilerInterface` implementations, configured via `shopware.yaml`. The static `trace` method accepts a name, a closure containing the code to profile, a category, and optional tags, chaining the calls through all enabled profilers to create nested spans for performance analysis tools.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-profiler-integrations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Profiling;\n\nuse Shopware\\Core\\Profiling\\Integration\\ProfilerInterface;\n\n/**\n * @internal experimental atm\n */\nclass Profiler\n{\n    /**\n     * Profilers will be activated over the shopware.yaml file\n     *\n     * All enabled profilers will be added here\n     *\n     * @var ProfilerInterface[]\n     */\n    private static array $profilers = [];\n\n    /**\n     * Tags will be added to each trace\n     *\n     * @var string[]\n     */\n    private static array $tags = [];\n\n    /**\n     * @param string[] $activeProfilers\n     */\n    public function __construct(\\Traversable $profilers, array $activeProfilers)\n    {\n        $profilers = iterator_to_array($profilers);\n        self::$profilers = array_intersect_key($profilers, array_flip($activeProfilers));\n        self::$tags = [];\n    }\n\n    /**\n     * @return mixed\n     */\n    public static function trace(string $name, \\Closure $closure, string $category = 'shopware', array $tags = [])\n    {\n        $pointer = static function () use ($closure) {\n            return $closure();\n        };\n\n        $tags = array_merge(self::$tags, $tags);\n        \n        // we have to chain the profilers here: `return Stopwatch::trace(Tideways::trace(...));`\n        foreach (self::$profilers as $profiler) {\n            $pointer = static function () use ($profiler, $name, $pointer, $category, $tags) {\n                return $profiler->trace($name, $pointer, $category, $tags);\n            };\n        }\n\n        return $pointer();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Product Data in Shopware Migration Assistant\nDESCRIPTION: This method converts product data from the source system to Shopware 6 format. It handles various product types, checks for required fields, and creates mappings for product identifiers.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function convert(\n    array $data,\n    Context $context,\n    MigrationContextInterface $migrationContext\n): ConvertStruct {\n    $this->generateChecksum($data);\n    $this->context = $context;\n    $this->migrationContext = $migrationContext;\n    $this->runId = $migrationContext->getRunUuid();\n    $this->oldProductId = $data['detail']['ordernumber'];\n    $this->mainProductId = $data['detail']['articleID'];\n    $this->locale = $data['_locale'];\n\n    $connection = $migrationContext->getConnection();\n    $this->connectionName = '';\n    $this->connectionId = '';\n    if ($connection !== null) {\n        $this->connectionId = $connection->getId();\n        $this->connectionName = $connection->getName();\n    }\n\n    $fields = $this->checkForEmptyRequiredDataFields($data, $this->requiredDataFieldKeys);\n    if (!empty($fields)) {\n        $this->loggingService->addLogEntry(new EmptyNecessaryFieldRunLog(\n            $this->runId,\n            DefaultEntities::PRODUCT,\n            $this->oldProductId,\n            implode(',', $fields)\n        ));\n\n        return new ConvertStruct(null, $data);\n    }\n\n    $this->productType = (int) $data['detail']['kind'];\n    unset($data['detail']['kind']);\n    $isProductWithVariant = $data['configurator_set_id'] !== null;\n\n    if ($this->productType === self::MAIN_PRODUCT_TYPE && $isProductWithVariant) {\n        return $this->convertMainProduct($data);\n    }\n\n    if ($this->productType === self::VARIANT_PRODUCT_TYPE && $isProductWithVariant) {\n        return $this->convertVariantProduct($data);\n    }\n\n    $converted = $this->getUuidForProduct($data);\n    $converted = $this->getProductData($data, $converted);\n\n    if (isset($data['categories'])) {\n        $converted['categories'] = $this->getCategoryMapping($data['categories']);\n    }\n    unset($data['categories']);\n\n    if (isset($data['shops'])) {\n        $converted['visibilities'] = $this->getVisibilities($converted, $data['shops']);\n    }\n    unset($data['shops']);\n\n    unset($data['detail']['id'], $data['detail']['articleID']);\n\n    if (empty($data['detail'])) {\n        unset($data['detail']);\n    }\n\n    $returnData = $data;\n    if (empty($returnData)) {\n        $returnData = null;\n    }\n    $this->updateMainMapping($migrationContext, $context);\n\n    $mainMapping = $this->mainMapping['id'] ?? null;\n\n    return new ConvertStruct($converted, $returnData, $mainMapping);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Deployer Directory Structure\nDESCRIPTION: Example directory structure created by Deployer for organizing releases, shared files, and symlinks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── .dep\n├── current -> releases/1\n├── releases\n│   └── 1\n└── shared\n    ├── .env\n    └── config\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Accessing App Configuration Values\nDESCRIPTION: Example of reading app-specific configuration values using the config service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/miscellaneous-script-services-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set appConfig = services.config.app('app_config') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a B2B API Route Provider in PHP\nDESCRIPTION: This PHP class `MyApiRouteProvider` implements the `RouteProvider` interface to define custom API routes for the B2B Suite. The `getRoutes` method returns an array of route definitions, each specifying the HTTP method, the sub-route path (relative to `/api/b2b`), the DIC service ID of the controller, and the action method name.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/rest-api.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace\\DependencyInjection;\n\nuse Shopware\\B2B\\Common\\Routing\\RouteProvider;\n\nclass MyApiRouteProvider implements RouteProvider\n{\n    public function getRoutes(): array\n    {\n        return [\n            [\n                'GET', // the HTTP method\n                '/my/hello', // the sub-route will be concatenated to http://my-shop.de/api/b2b/my/hello\n                'my.api_controller', // DIC controller id\n                'hello' // action method name\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Stoplight UI for Shopware API Documentation\nDESCRIPTION: This snippet provides the relative endpoint path for accessing the Stoplight UI for both Admin API and Store API. The path is relative to the respective base path and requires choosing between 'api' or 'store-api'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/generated-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/(api|store-api)/_info/stoplightio.html\n```\n\n----------------------------------------\n\nTITLE: Registering Commercial Plugin Test Namespace in PHP\nDESCRIPTION: This example shows how to register the test namespace for the Commercial plugin in Shopware 6. It's typically added to the tests/TestBootstrap.php file to ensure the namespace is considered for feature flag activation in unit tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-31-add-more-unit-tests-namespaces-to-featureflag-extension.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nFeatureFlagExtension::addTestNamespace('Shopware\\\\Commercial\\\\Tests\\\\Unit\\\\');\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment Variables for Elasticsearch\nDESCRIPTION: Example .env file configuration for a development environment with Elasticsearch settings, enabling debug mode and exception handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=dev\nAPP_SECRET=1\nINSTANCE_ID=1\nDATABASE_URL=mysql://mysqluser:mysqlpassword@localhost:3306/shopwaredatabasename\nAPP_URL=http://localhost\nMAILER_URL=smtp://localhost:1025\nCOMPOSER_HOME=/var/www/html/var/cache/composer\n\nOPENSEARCH_URL=\"elasticsearchhostname:9200\"\nSHOPWARE_ES_ENABLED=\"1\"\nSHOPWARE_ES_INDEXING_ENABLED=\"1\"\nSHOPWARE_ES_INDEX_PREFIX=\"sw\"\nSHOPWARE_ES_THROW_EXCEPTION=1\n```\n\n----------------------------------------\n\nTITLE: Configure Cypress support\nDESCRIPTION: Support file configuration to include Shopware E2E testsuite commands\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Require test suite commands\nrequire('@shopware-ag/e2e-testsuite-platform/cypress/support');\n```\n\n----------------------------------------\n\nTITLE: Single Argument Filter in Vue Component Binding\nDESCRIPTION: Example of using a custom filter within a v-bind expression in a Vue component template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/using-filter.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<example-component :name=\"$tc('swag-example.general.myCustomText')|example\"></example-component>\n```\n\n----------------------------------------\n\nTITLE: Implementing ElasticsearchProductDefinitionDecorator in PHP\nDESCRIPTION: PHP class that extends AbstractElasticsearchDefinition to add a new 'prefixProductNumber' field to product search. It decorates the existing definition to modify mapping properties and add data transformations during indexing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-add-more-fields-to-product-search.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace YourPluginNameSpace;\n\nuse OpenSearchDSL\\Query\\Compound\\BoolQuery;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Elasticsearch\\Framework\\AbstractElasticsearchDefinition;\n\nclass ElasticsearchProductDefinitionDecorator extends AbstractElasticsearchDefinition\n{\n    public function __construct(\n        private readonly AbstractElasticsearchDefinition $decorated\n    ) {\n    }\n\n    public function getEntityDefinition(): EntityDefinition\n    {\n        return $this->decorated->getEntityDefinition();\n    }\n\n    public function buildTermQuery(Context $context, Criteria $criteria): BoolQuery\n    {\n        return $this->decorated->buildTermQuery($context, $criteria);\n    }\n\n    public function getMapping(Context $context): array\n    {\n        $mappings = $this->decorated->getMapping($context);\n\n        $additionalMappings = [\n            // define your new field's type\n            'prefixProductNumber' => self::KEYWORD_FIELD,\n            // other additional fields\n        ];\n\n        $mappings['properties'] = array_merge($mappings['properties'], $additionalMappings);\n\n        return $mappings;\n    }\n\n    public function fetch(array $ids, Context $context): array\n    {\n        $data = $this->decorated->fetch($ids, $context);\n\n        $documents = [];\n\n        foreach ($data as $id => $document) {\n            $document = array_merge($document, [\n                // get first 5 characters from productNumber to index it\n                'prefixProductNumber' => substr($document['productNumber'], 0, 5),\n            ]);\n\n            $documents[$id] = $document;\n        }\n\n        return $documents;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Mocks in Jest for Shopware Administration Components\nDESCRIPTION: Shows how to override global mocks when mounting a component in Jest tests. This example demonstrates overriding the $tc (translate) function with a custom implementation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmount('dummy-component', {\n    mocks: {\n        $tc: (...args) => JSON.stringify([...args])\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware Admin Extension using CLI (Bash)\nDESCRIPTION: Uses the Shopware CLI to upload, activate, and install the admin extension. The command increases the version in the manifest file to ensure changes are picked up.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/starter-admin-extension.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension upload SimpleNotification --activate --increase-version\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductDataSelection in Shopware Migration\nDESCRIPTION: Defines a ProductDataSelection class that handles product-related data migration. It specifies the order and dependencies of various DataSets involved in product migration, including media, attributes, relations, and translations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/dataselection-and-dataset.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Profile\\Shopware\\DataSelection;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionInterface;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionStruct;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\CrossSellingDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ManufacturerAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\MediaFolderDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductOptionRelationDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductPriceAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductPropertyRelationDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\PropertyGroupOptionDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\TranslationDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\n\nclass ProductDataSelection implements DataSelectionInterface\n{\n    public const IDENTIFIER = 'products';\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface;\n    }\n\n    public function getData(): DataSelectionStruct\n    {\n        return new DataSelectionStruct(\n            self::IDENTIFIER,\n            $this->getDataSets(),\n            $this->getDataSetsRequiredForCount(),\n            'swag-migration.index.selectDataCard.dataSelection.products',\n            100,\n            true,\n            DataSelectionStruct::BASIC_DATA_TYPE,\n            false\n        );\n    }\n\n    public function getDataSets(): array\n    {\n        return [\n            new MediaFolderDataSet(),\n            new ProductAttributeDataSet(),\n            new ProductPriceAttributeDataSet(),\n            new ManufacturerAttributeDataSet(),\n            new ProductDataSet(),\n            new PropertyGroupOptionDataSet(),\n            new ProductOptionRelationDataSet(),\n            new ProductPropertyRelationDataSet(),\n            new TranslationDataSet(),\n            new CrossSellingDataSet(),\n        ];\n    }\n\n    public function getDataSetsRequiredForCount(): array\n    {\n        return [\n            new ProductDataSet(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Migration Profile with Shopware Migration Assistant - HTML\nDESCRIPTION: This snippet registers the Shopware 5.5 migration profile as a service in Shopware Migration Assistant using XML/HTML-like syntax. The service tag associates it with the 'shopware.migration.profile' identifier, allowing the migration system to discover and utilize this profile. This is a required setup step for enabling migrations from Shopware 5.5 to Shopware 6; it assumes the SwagMigrationAssistant plugin framework is installed.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/profile-and-connection.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Shopware 5.5 Profile -->\\n<service id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware55\\\\Shopware55Profile\\\">\\n    <tag name=\\\"shopware.migration.profile\\\"/>\\n</service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Injection in Shopware 6 Plugin\nDESCRIPTION: This XML service configuration injects the SystemConfigService into the MySubscriber class. It shows how to set up dependency injection in a Shopware 6 plugin and register the subscriber service with the event dispatcher.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/use-plugin-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\MySubscriber\">\n            <argument type=\"service\" id=\"Shopware\\Core\\System\\SystemConfig\\SystemConfigService\" />\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering CMS Element Resolver in services.xml\nDESCRIPTION: XML configuration to register the custom DailyMotionCmsElementResolver in the service container with the 'shopware.cms.data_resolver' tag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-data-to-cms-elements.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\DataResolver\\DailyMotionCmsElementResolver\">\n            <tag name=\"shopware.cms.data_resolver\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Clickable Link Implementation for Ajax Panel\nDESCRIPTION: Demonstrates how to create clickable elements that trigger location changes within an Ajax Panel.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"ajax-panel-link\" data-href=\"{{ path('frontend.b2b.b2bcontact.grid') }}\">Click</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Arguments Filter in Vue Component Binding\nDESCRIPTION: Shows how to use a custom filter with multiple arguments in a Vue component's property binding.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/using-filter.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<example-component :title=\"$tc('swag-example.general.myCustomText')|example('secondArgument', 'thirdArgument')\"></example-component>\n```\n\n----------------------------------------\n\nTITLE: Checking Active In-App Purchases in PHP\nDESCRIPTION: This PHP snippet demonstrates how to inject the InAppPurchase service and check if a specific In-App Purchase is active. It uses the isActive method of the InAppPurchase class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/in-app-purchase/index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Example\n{\n    public function __construct(\n        private readonly InAppPurchase $inAppPurchase,\n    ) {}\n\n    public function someFunction() {\n        if ($this->inAppPurchase->isActive('MyExtensionName', 'my-iap-identifier')) {\n            // ...\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Shopping Lists with Store API\nDESCRIPTION: DELETE endpoint for removing multiple shopping lists. Requires an array of shopping list IDs.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_4\n\nLANGUAGE: http request\nCODE:\n```\nDELETE {url}/store-api/shopping-lists {\n    ids: {array}\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Store Images Explicitly in YAML\nDESCRIPTION: YAML configuration example for explicitly defining extension store images with priority, language activation, and preview settings.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/updating-store-page.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstore:\n  images:\n    - file: <path-to-file>\n      # Priority of the image for ordering\n      priority: 1\n      # In which language the image should be used\n      activate:\n        de: false\n        en: false\n      # Is the image a preview image, only one image can be a preview\n      preview:\n        de: false\n        en: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Examples for Digital Sales Rooms in Shopware\nDESCRIPTION: This code snippet demonstrates example domain configurations for Digital Sales Rooms in different languages. It shows how to set up domain paths for English, German, and English (US) versions.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/configuration/domain-config.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:3000 - English\nhttp://localhost:3000/de-DE - Deutsch\nhttp://localhost:3000/en-US - English (US)\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Component Test Setup for sw-multi-select in Shopware\nDESCRIPTION: A basic test suite for the sw-multi-select component that verifies the component mounts correctly as a Vue instance. This simple test imports the component and checks if the wrapper is a Vue instance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// test/app/component/form/select/base/sw-multi-select.spec.js\nimport { shallowMount } from '@vue/test-utils';\nimport 'src/app/component/form/select/base/sw-multi-select';\n\ndescribe('components/sw-multi-select', () => {\n    let wrapper;\n\n    beforeEach(() => {\n        wrapper = shallowMount(Shopware.Component.build('sw-multi-select'));\n    });\n\n    afterEach(() => {\n        wrapper.destroy();\n    });\n\n    it('should be a Vue.js component', () => {\n        expect(wrapper.vm).toBeTruthy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Multiple Transports (Bash)\nDESCRIPTION: Bash command to consume messages from multiple transports, allowing prioritization of message processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console messenger:consume async low_priority\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiters in Shopware YAML Configuration\nDESCRIPTION: Example of how to configure rate limiters in the shopware.yaml file, showing how to disable the login limiter and configure the oauth limiter with time backoff policy.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/rate-limiter.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n// <shop root>/config/packages/shopware.yaml\nshopware:\n  api:\n    rate_limiter:\n      login:\n        enabled: false\n      oauth:\n        enabled: true\n        policy: 'time_backoff'\n        reset: '24 hours'\n        limits:\n          - limit: 3\n            interval: '10 seconds'\n          - limit: 5\n            interval: '60 seconds'\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ACL Context Resolver Skeleton in PHP\nDESCRIPTION: This PHP code provides a skeleton class `MyContextResolver` that extends `AclContextResolver`. It demonstrates the required methods (`getQuery`, `extractId`, `isMainContext`) that need to be implemented to create a custom ACL context resolver for managing permissions based on contexts other than the default 'contact' and 'role'.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Shopware\\B2B\\Acl\\Framework\\AclContextResolver;\nuse Shopware\\B2B\\Acl\\Framework\\AclQuery;\n\nclass MyContextResolver extends AclContextResolver\n{\n    public function getQuery(string $aclTableName, int $contextId, QueryBuilder $queryContext): AclQuery\n    {\n       // your implementation here\n    }\n\n    public function extractId($context): int\n    {\n        // your implementation here    \n    }\n\n    public function isMainContext(): bool\n    {\n        // your implementation here    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shopware's sw_extends Function\nDESCRIPTION: Example of using Shopware's custom sw_extends function, which supports multi-inheritance and has the same API as Twig's default extends.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/storefront-reference/twig-function-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Repository Methods for Fetching Data in PHP for Shopware B2B\nDESCRIPTION: This code demonstrates the implementation of fetchList and fetchTotalCount methods in a repository class for Shopware B2B Suite. These methods handle data retrieval based on the SearchStruct and OwnershipContext.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/listing-service.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nuse Shopware\\B2B\\Company\\Framework\\CompanyFilterStruct\\ContactSearchStruct;\nuse Shopware\\B2B\\StoreFrontAuthentication\\Framework\\OwnershipContext;\n\nclass Repository\n{\n    public function fetchList(OwnershipContext $context, ContactSearchStruct $searchStruct): array\n    {\n        [...]\n    }\n\n    public function fetchTotalCount(OwnershipContext $context, ContactSearchStruct $contactSearchStruct): int\n    {\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rule Template in Shopware Administration\nDESCRIPTION: Twig template for the custom rule component that overrides the sw_condition_value_content block and implements a sw-single-select dropdown for selecting boolean values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rule/add-custom-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/core/component/swag-first-monday/swag-first-monday.html.twig\n{% block sw_condition_value_content %}\n    <sw-single-select name=\"first-monday\"\n                      id=\"first-monday\"\n                      size=\"medium\"\n                      :options=\"selectValues\"\n                      v-model=\"isFirstMondayOfTheMonth\"\n                      class=\"field--main\">\n    </sw-single-select>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Core Component Implementation in Shopware 6.8\nDESCRIPTION: Example of core component using Composition API and Single File Components\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n   {# Notice native block comonent instead of twig blocks #}\n   <sw-block name=\"sw-text-field\">\n    <input type=text v-model=\"value\" @change=\"onChange\">\n   </sw-block>\n</template>\n\n<script setup>\n// Notice Composition API imports\nimport { ref, defineEmits } from 'vue';\n\n// Notice new extension system Shopware.Component.createExtendableSetup\nconst {value, onChange, privateExample} = Shopware.Component.createExtendableSetup({\n   props,\n   context,\n   name: 'originalComponent',\n}, () => {\n   const emit = defineEmits(['update:value']);\n\n   const value = ref(null);\n   const onChange = () => {\n      emit('update:value', value.value)\n   }\n\n   const privateExample = ref('This is a private property');\n\n   return {\n      public: {\n         value,\n         onChange,\n      },\n      private: {\n         privateExample,\n      }\n   };\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Symfony Scheduler Task Consumer Command\nDESCRIPTION: Command to run scheduled tasks using Symfony's scheduler component. This experimental feature is available in Shopware 6.6 and allows tasks to be executed as part of queue workers.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/scheduled-task.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console messenger:consume scheduler_shopware\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with pnpm (Bash)\nDESCRIPTION: This command executes the unit tests defined in the project using the pnpm package manager. It assumes Vitest is configured as the testing framework (as mentioned in the context) and tests are located in the `tests` directory. This command triggers the script named 'test' defined in the project's `package.json` file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Setting Version ID Header in Shopware API\nDESCRIPTION: Demonstration of using sw-version-id header to request a specific version of an entity. Used when working with versioned entities like orders.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/request-headers.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/order\n--header 'sw-version-id: 0fa91ce3e96a4bc2be4bd9ce752c3425'\n```\n\n----------------------------------------\n\nTITLE: Flow Events XML Configuration Example - XML\nDESCRIPTION: An example of an XML configuration file defining custom flow events for an app in Shopware. Each flow-event includes a unique name and a set of 'aware' tags determining which flow actions are permitted after the event is triggered. This file is stored in the app's Resources directory and is required for flow event registration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<flow-extensions xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:noNamespaceSchemaLocation=\\\"https://test-flow.com/flow-1.0.xsd\\\">\\n    <flow-events>\\n        <flow-event>\\n            <name>swag.before.open.the.doors</name>\\n            <aware>customerAware</aware>\\n            <aware>orderAware</aware>\\n        </flow-event>\\n        <flow-event>\\n            ...\\n        </flow-event>\\n    </flow-events>\\n</flow-extensions>\\n\n```\n\n----------------------------------------\n\nTITLE: Registering BundleWriter in Service XML Configuration\nDESCRIPTION: XML configuration to register the BundleWriter as a service in Shopware's dependency injection container. It inherits from AbstractWriter and is provided with the EntityWriter and BundleDefinition dependencies. The service is tagged as a migration writer for discovery.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationBundleExample\\Migration\\Writer\\BundleWriter\"\n         parent=\"SwagMigrationAssistant\\Migration\\Writer\\AbstractWriter\">\n    <argument type=\"service\" id=\"Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter\"/>\n    <argument type=\"service\" id=\"Swag\\BundleExample\\Core\\Content\\Bundle\\BundleDefinition\"/>\n    <tag name=\"shopware.migration.writer\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Entity with PHP Attributes in Shopware 6\nDESCRIPTION: This snippet shows how to create a basic entity class using PHP attributes. It defines an entity with a UUID primary key and specifies the entity name and collection class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity', collectionClass: ExampleEntityCollection::class)]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing System Configuration Values\nDESCRIPTION: Example of reading system configuration values using the config service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/miscellaneous-script-services-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set systemConfig = services.config.get('core.listing.productsPerPage') %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiler Integrations in YAML\nDESCRIPTION: This YAML configuration snippet shows how to enable specific profiler integrations within a Shopware application. By listing the desired integration names (e.g., 'Symfony', 'Tideways', 'Datadog') under the `shopware.profiler.integrations` key in a `config/packages/*.yaml` file, developers can activate the corresponding profiler implementations managed by the `Profiler` class at runtime.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-profiler-integrations.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    profiler:\n        integrations: ['Symfony', 'Tideways', 'Datadog']\n```\n\n----------------------------------------\n\nTITLE: Altering SQL Table for Versioned Foreign Keys\nDESCRIPTION: SQL command to add version_id and parent_version_id columns with foreign key constraints for versioned relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/versioning-entities.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `swag_example`\n    ADD `version_id` BINARY(16) NOT NULL AFTER `id`,\n    ADD `parent_version_id` BINARY(16) NOT NULL,\n    ADD PRIMARY KEY `id_version_id` (`id`, `version_id`),\n    DROP INDEX `PRIMARY`,\n    CONSTRAINT `fk.swag_example.parent_id` FOREIGN KEY (`parent_id`, `parent_version_id`)\n        REFERENCES `swag_example` (`id`, `version_id`) ON DELETE CASCADE ON UPDATE CASCADE\n```\n\n----------------------------------------\n\nTITLE: Registering PDF Renderer Service in XML\nDESCRIPTION: XML configuration for registering a PDF renderer service with the document_type.renderer tag in Shopware's service container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/document/add-custom-document-type.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Shopware\\Core\\Checkout\\Document\\Service\\PdfRenderer\">\n    ...\n    <tag name=\"document_type.renderer\" key=\"pdf\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Deactivate Method in Shopware\nDESCRIPTION: Method executed when a plugin is deactivated. Handles deactivation of plugin entities and cleanup of components that could harm the system while inactive.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/plugin-lifecycle.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function deactivate(DeactivateContext $deactivateContext): void\n{\n    // Deactivate entities, such as a new payment method\n    // Or remove previously created entities\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Aggregation Implementation in PHP and API\nDESCRIPTION: Demonstrates entity aggregation for loading related entities based on unique field values. Shows how to retrieve manufacturer entities from product data in both PHP and API implementations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new EntityAggregation('manufacturers', 'manufacturerId', 'product_manufacturer')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var EntityResult $aggregation */\n$aggregation = $result->getAggregations()->get('manufacturers');\n\n/** @var ProductManufacturerEntity $entity */\nforeach ($aggregation->getEntities() as $entity) {\n    $entity->getName();\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"],\n        \"product_manufacturer\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {\n            \"name\": \"manufacturers\",\n            \"type\": \"entity\",\n            \"definition\": \"product_manufacturer\",\n            \"field\": \"manufacturerId\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Bus in Shopware (PHP)\nDESCRIPTION: YAML configuration to set up a custom message bus in Shopware's framework configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n// <platform root>/src/Core/Framework/Resources/config/packages/framework.yaml\nframework:\n    messenger:\n        default_bus: my.messenger.bus\n        buses:\n            my.messenger.bus:\n```\n\n----------------------------------------\n\nTITLE: Extending Methods in a Shopware 6 Component\nDESCRIPTION: Demonstrates how to extend and override methods in a custom component using Shopware.Component.extend()\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// extend the existing component `sw-text-field` by passing\n// a new component name and the new configuration\nShopware.Component.extend('sw-custom-field', 'sw-text-field', {\n\n    // extend the logic of the onInput() method\n    methods: {\n        onInput() {\n            // call the original implementation of `onInput()`\n            const superCallResult = this.$super('onInput');\n\n            // add your custom logic in here\n            // ...\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DataSet for Bundle Entity Migration (PHP)\nDESCRIPTION: Defines the `BundleDataSet` class extending `DataSet` to represent the custom `swag_bundle` entity within the Shopware Migration Assistant. It implements `getEntity` to return the unique identifier ('swag_bundle'), `supports` to ensure compatibility with Shopware profiles (`ShopwareProfileInterface`), and `getSnippet` to link to UI translation snippets used for displaying the entity count.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSet\\DataSet;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\n\nclass BundleDataSet extends DataSet\n{\n    public static function getEntity(): string\n    {\n        return 'swag_bundle'; // Identifier of this entity\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        // This way we support all Shopware profile versions\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface;\n    }\n\n    public function getSnippet(): string\n    {\n        return 'swag-migration.index.selectDataCard.entities.' . static::getEntity();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Menu Entry Configuration\nDESCRIPTION: Configuration for creating a basic menu entry with properties like label, color, path, icon, and position within the Shopware administration menu\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-menu-entry.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation: [{\n    label: 'CustomModule',\n    color: '#ff3d58',\n    path: 'swag.custommodule.list',\n    icon: 'default-shopping-paper-bag-product',\n    parent: 'sw-catalogue',\n    position: 100\n}]\n```\n\n----------------------------------------\n\nTITLE: Rule Matching Sequence with Mermaid\nDESCRIPTION: This sequence diagram demonstrates the call order when evaluating rules, showing how a root rule calls match() on its child rules and receives boolean results indicating whether the conditions were satisfied.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/rules.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    root-->>lineItemCount: match()?\n    lineItemCount-->>root: false\n    root-->>cartPrice: match()?\n    cartPrice-->>root: false\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Subscriber in services.xml\nDESCRIPTION: This XML configuration registers the custom subscriber service with Shopware. The 'kernel.event_subscriber' tag is essential for the system to recognize and load the subscriber class automatically at runtime.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/listening-to-events.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- <plugin root>/src/Resources/config/services.xml -->\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\MySubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating a DB Schema from Entity Definitions\nDESCRIPTION: Command to generate SQL schema from all active entity definitions in Shopware 6, including custom entity definitions from plugins.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/console dal:create:schema\n```\n\n----------------------------------------\n\nTITLE: SQL-Based Currency Calculation\nDESCRIPTION: Enhanced SQL query implementation that includes currency factor calculations using CurrencyCalculator's SQL snippet generation.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    public function fetchAmount(int $budgetId, CurrencyContext $currencyContext): float\n    {\n        $transactionSnippet = $this->currencyCalculator\n            ->getSqlCalculationPart('amount', 'currency_factor', $currencyContext);\n\n        return (float) $this-connection->fetchColumn(\n            'SELECT SUM(' . $transactionSnippet . ') AS sum_amount FROM b2b_budget_transaction WHERE budget_id=:budgetId',\n            ['budgetId' => $budgetId]\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Theme Text Field Configuration in Shopware 6\nDESCRIPTION: Adding a customizable text field for modal padding with multilingual labels in the theme configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"config\": {\n    \"fields\": {\n      \"modal-padding\": {\n        \"label\": {\n          \"en-GB\": \"Modal padding\",\n          \"de-DE\": \"Modal Innenabstand\"\n        },\n        \"type\": \"text\",\n        \"value\": \"(0, 0, 0, 0)\",\n        \"editable\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Example\nDESCRIPTION: Sample JSON response from the topseller endpoint showing aggregated product data with buckets containing order quantities and counts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiAlias\": \"store_api_swag_topseller_response\",\n  \"buckets\": [\n    {\n      \"key\": \"0060b9b2b3804244bf8ba98cdad50234\",\n      \"count\": 3,\n      \"quantityItemsOrdered\": {\n        \"extensions\": [],\n        \"sum\": 15\n      },\n      \"apiAlias\": \"aggregation_bucket\"\n    },\n    {\n      \"key\": \"a65d918f883c47778a65b73548f456ea\",\n      \"count\": 2,\n      \"quantityItemsOrdered\": {\n        \"extensions\": [],\n        \"sum\": 3\n      },\n      \"apiAlias\": \"aggregation_bucket\"\n    },\n    {\n      \"key\": \"6b67935063c84bde8e9d86f25a47c69d\",\n      \"count\": 3,\n      \"quantityItemsOrdered\": {\n        \"extensions\": [],\n        \"sum\": 8\n      },\n      \"apiAlias\": \"aggregation_bucket\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Role-specific Snippet Paths in Shopware\nDESCRIPTION: Example of role-specific snippet path format for translations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nsw.privileges.${category}.${key}.${role_key} \n// e.g. sw.privileges.additional_permissions.system.clear_cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as Increment Storage in Shopware (Since v6.6.8.0)\nDESCRIPTION: YAML configuration for setting up Redis as the increment storage for user activity and message queue in Shopware versions 6.6.8.0 and later. This implementation uses named Redis connections for better reusability.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/increment.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    redis:\n        connections:\n            persistent:\n                dsn: 'redis://host:port/dbindex'\n\n    increment:\n        user_activity:\n            type: 'redis'\n            config:\n                connection: 'persistent'\n\n        message_queue:\n            type: 'redis'\n            config:\n                connection: 'persistent'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Storage for Number Ranges (v6.6.8.0+)\nDESCRIPTION: YAML configuration for setting up Redis as the number range storage in Shopware version 6.6.8.0 and later. Defines persistent Redis connection and storage configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/number-ranges.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    redis:\n        connections:\n            persistent:\n                dsn: 'redis://host:port/dbindex'\n    number_range:\n        increment_storage: 'redis'\n        config:\n            connection: 'persistent'\n```\n\n----------------------------------------\n\nTITLE: Defining Default Icon Path Structure\nDESCRIPTION: Demonstrates the default directory path structure for storing custom icons in a Shopware plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-icons.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<YourPlugin>/src/Resources/app/storefront/dist/assets/icon/default\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Template Response in a Storefront Script (Twig)\nDESCRIPTION: Employs the `services.response.render()` factory method to create a `StorefrontResponse` by rendering a specified Twig template. This is specifically for use within Storefront script hooks (`/storefront/script/{hook}`). Requires the template path and parameters for the template, typically including the `hook.page` object. Throws an exception if used outside a SalesChannelContext or if the storefront bundle isn't installed.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.render('@myApp/storefront/pages/my-custom-page.html.twig', { 'page': hook.page }) %}\n```\n\n----------------------------------------\n\nTITLE: Component Icons Reference Table in Markdown\nDESCRIPTION: Markdown table that defines the icon types used in the component documentation and their meanings, including component representation, context objects, and child components.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/company.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Icon                                      |Description|\n|---------------------------------------------|------------|\n| <SwagIcon icon=\"layer-group\" type=\"solid\" /> | Represents component |\n| <SwagIcon icon=\"database\" type=\"solid\" /> | Represent context objects that contain the component specific information |\n| <SwagIcon icon=\"bars-square\" type=\"solid\" /> | Represents child components |\n```\n\n----------------------------------------\n\nTITLE: Handling Recurring Capture Payload in JSON\nDESCRIPTION: Example of the JSON payload structure for a recurring capture request in Shopware. It includes source information and placeholders for order transaction and order details.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"orderTransaction\": {\n    //...\n  },\n  \"order\": {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Testing Shopware API Endpoint\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the custom Shopware API endpoint, including the necessary headers for authentication.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n  --url http://<your-store-url>/store-api/script/swag/topseller \\\n  --header 'sw-access-key: insert-your-access-key'\n```\n\n----------------------------------------\n\nTITLE: Querying Records Based on User and Context Owner in Shopware B2B\nDESCRIPTION: PHP code showing common database queries for retrieving records based on user and context owner in Shopware B2B Suite.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/** @var Connection $connection */\n$connection = $this->container->get('dbal_connection');\n/** @var Identity $identity */\n$identity = $this->container->get('b2b_front_auth.authentication_service')\n    ->getIdentity();\n\n// get all records relative to the user\n$connection->fetchAll(\n    'SELECT * FROM b2b_my my WHERE my.auth_id = :authId',\n    [\n        'authId' => $identity->getOwnershipContext()->authId->getValue(),\n    ]\n);\n\n// get all records relative to the user's context owner\n$connection->fetchAll(\n    'SELECT * FROM b2b_my my WHERE my.auth_id IN (SELECT auth_id FROM b2b_store_front_auth WHERE context_owner_id = :identityContextOwnerId)',\n    [\n        'identityContextOwnerId' => $identity->getOwnershipContext()->contextOwnerId->getValue(),\n    ]\n);\n\n// get all records relative to the current user or if the owner is logged in to the owner\n$connection->fetchAll(\n    'SELECT * FROM b2b_my my WHERE my.auth_id IN (SELECT auth_id FROM b2b_store_front_auth WHERE auth_id = :authId OR context_owner_id = :identityContextOwnerId)',\n    [\n        'authId' => $identity->getOwnershipContext()->authId,\n        'identityContextOwnerId' => $identity->getOwnershipContext()->authId,\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Protecting Shortcuts with Privileges\nDESCRIPTION: Example of protecting keyboard shortcuts with privilege checks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nModule.register('your-plugin-module', {\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.acl.can('product.editor');\n            },\n            method: 'onSave'\n        },\n        ESCAPE: 'onCancel'\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Communication Flow with Mermaid\nDESCRIPTION: Sequence diagram showing the flow of JWT generation and communication between Client, Shopware Backend and App Server\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/clientside-to-app-backend.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Shopware Backend\n    participant App Server\n    Client->>Shopware Backend: POST /store-api/app-system/MyApp/generate-token\n    Shopware Backend->>Client: Responds with signed JWT\n    Client->>App Server: Post /product-review/submit containing JWT in header\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Triggering Custom App Events - PHP\nDESCRIPTION: Defines an API controller method in PHP to accept POST requests for triggering flow events by event name. It extracts request data, validates event and app activation, and dispatches the custom app event object using the Shopware event dispatcher. Returns appropriate HTTP status codes depending on flow event lookup results. Requires controller routing and event repository dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\\n * @Since(\\\"6.5.2.0\\\")\\n */\\n#[Route(path: '/api/_action/trigger-event/{eventName}', name: 'api.action.trigger_event', methods: ['POST'])]\\npublic function flowCustomTrigger(string $eventName, Request $request, Context $context): JsonResponse\\n{\\n    $data = $request->request->all();\\n    \\n    $criteria = new Criteria([$data['flowAppEventId']])\\n    $criteria->addFilter(new EqualsFilter('appId', $data['flowId']));\\n    $criteria->addFilter(new EqualsFilter('app.active', 1));\\n\\n    $flowEvent = $flowAppEventRepository->search($criteria);\\n    //return http status code 404 if $flowEvent is empty\\n    \\n    $this->eventDispatcher->dispatch(new CustomAppEvent($flowEvent->getName(), $data));\\n    //return http status code 200 and success message\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Component Usage During Transition Period in HTML\nDESCRIPTION: This snippet illustrates how components will be used during the transition between Shopware 6.6 and 6.7, showing deprecated patterns, non-working patterns, and proper usage of the new Meteor components with the mt- prefix.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-03-21-implementation-of-meteor-component-library.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Shopware 6.6 -->\n\n<!-- Is working, emit a warning in console that this component usage is deprecated. -->\n<sw-example oldProperty=\"old\">Example</sw-example>\n<!-- Is NOT working. -->\n<sw-example newProperty=\"new\">Example</sw-example>\n<!-- Is working. Uses directly the component from the Meteor Component Library. -->\n<mt-example newProperty=\"new\">Example</mt-example>\n\n<!-- Shopware 6.7 -->\n<!-- Not working anymore. -->\n<sw-example oldProperty=\"old\">Example</sw-example>\n<!-- Is NOT working. -->\n<sw-example newProperty=\"new\">Example</sw-example>\n<!-- Is working. -->\n<mt-example newProperty=\"new\">Example</mt-example>\n```\n\n----------------------------------------\n\nTITLE: Using Flow Data in Email Templates - HTML\nDESCRIPTION: An HTML email template snippet that demonstrates referencing flow data variables injected by custom app events. Here, values such as shopName and url are dynamically filled at runtime. Templates must use double curly braces for variable interpolation according to the templating engine's conventions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h3>Welcome to {{ shopName }}</h3>\\n<h1>Visit us at: {{ url }} </h1>\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Number Range Restrictions in Shopware Plugin Configuration\nDESCRIPTION: Demonstrates how to set minimum and maximum value restrictions for integer or float input fields in the configuration XML.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<input-field type=\"int\">\n    <name>token</name>\n    <min>5</min>\n    <max>20</max>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Component in Administration Entry Point\nDESCRIPTION: Imports the custom sw-flow-sequence-action extension to make it available in the Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\nimport './extension/sw-flow-sequence-action';\n```\n\n----------------------------------------\n\nTITLE: Registering ProductReader in services.xml\nDESCRIPTION: This XML snippet registers the ProductReader service and tags it with 'shopware.migration.reader' for use in the migration process.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Gateway\\Reader\\ProductReader\"\n    parent=\"SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local\\Reader\\AbstractReader\">\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Connection\\ConnectionFactory\"/>\n    <tag name=\"shopware.migration.reader\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Gateway Interface in PHP\nDESCRIPTION: This PHP class `OwnLocaleGateway` implements the `GatewayInterface` for the custom profile (`OwnProfile`). It handles the connection and interaction with the source system. Key responsibilities include checking if it supports the current migration context, reading environment information (like source system details and data totals using `ReaderRegistry`), and providing a method (`read`) to fetch data. It utilizes the `ConnectionFactoryInterface` for database connections.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Gateway;\n\nuse Shopware\\Core\\Framework\\Context;\nuse SwagMigrationAssistant\\Migration\\EnvironmentInformation;\nuse SwagMigrationAssistant\\Migration\\Gateway\\GatewayInterface;\nuse SwagMigrationAssistant\\Migration\\Gateway\\Reader\\ReaderRegistry;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Migration\\RequestStatusStruct;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Exception\\DatabaseConnectionException;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Connection\\ConnectionFactoryInterface;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile;\n\nclass OwnLocaleGateway implements GatewayInterface\n{\n    public const GATEWAY_NAME = 'local';\n\n    private ConnectionFactoryInterface $connectionFactory;\n\n    private ReaderRegistry $readerRegistry;\n\n    public function __construct(\n        ReaderRegistry $readerRegistry,\n        ConnectionFactoryInterface $connectionFactory\n    ) {\n        $this->readerRegistry = $readerRegistry;\n        $this->connectionFactory = $connectionFactory;\n    }\n\n    public function getName(): string\n    {\n        return self::GATEWAY_NAME;\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile;\n    }\n\n    public function getSnippetName(): string\n    {\n        return 'swag-migration.wizard.pages.connectionCreate.gateways.shopwareLocal';\n    }\n\n    /**\n     * Reads the given entity type from via context from its connection and returns the data\n     */\n    public function read(MigrationContextInterface $migrationContext): array\n    {\n        // TODO: Implement read() method.\n        return [];\n    }\n\n    public function readEnvironmentInformation(\n        MigrationContextInterface $migrationContext,\n        Context $context\n    ): EnvironmentInformation {\n        $connection = $this->connectionFactory->createDatabaseConnection($migrationContext);\n        $profile = $migrationContext->getProfile();\n\n        try {\n            $connection->connect();\n        } catch (\\Exception $e) {\n            $error = new DatabaseConnectionException();\n\n            return new EnvironmentInformation(\n                $profile->getSourceSystemName(),\n                $profile->getVersion(),\n                '-',\n                [],\n                [],\n                new RequestStatusStruct($error->getErrorCode(), $error->getMessage())\n            );\n        }\n        $connection->close();\n\n        $totals = $this->readTotals($migrationContext, $context);\n\n        return new EnvironmentInformation(\n            $profile->getSourceSystemName(),\n            $profile->getVersion(),\n            'Example Host Name',\n            $totals,\n            [],\n            new RequestStatusStruct(),\n            false\n        );\n    }\n\n    public function readTotals(MigrationContextInterface $migrationContext, Context $context): array\n    {\n        $readers = $this->readerRegistry->getReaderForTotal($migrationContext);\n\n        $totals = [];\n        foreach ($readers as $reader) {\n            $total = $reader->readTotal($migrationContext);\n\n            if ($total === null) {\n                continue;\n            }\n\n            $totals[$total->getEntityName()] = $total;\n        }\n\n        return $totals;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Mixin in Component\nDESCRIPTION: Example of how to use a registered mixin within a Shopware 6 component using Mixin.getByName function.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/add-mixins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <administration root>/components/swag-basic-example/index.js\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-basic-example', {\n\n    mixins: [\n        Mixin.getByName('swag-basic-mixin')\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiler Backends in Shopware YAML Configuration\nDESCRIPTION: This snippet shows how to enable various profiler backends in the Shopware configuration file. It includes options for Symfony, Datadog, Tideways, and OpenTelemetry integrations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/profiling.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    profiler:\n        integrations:\n            - Symfony\n            # Requires the dd-trace PHP extension\n            - Datadog\n            # Requires the tideways PHP extension\n            - Tideways\n            # Requires the opentelemetry PHP extension\n            - OpenTelemetry\n```\n\n----------------------------------------\n\nTITLE: Theme Color Configuration Field in Shopware 6\nDESCRIPTION: Adding a configuration field to override the primary brand color in the theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ... \n  \"asset\":[\n    ...\n  ],\n  \"config\": {\n      \"fields\": {\n        \"sw-color-brand-primary\": {\n          \"value\": \"#00ff00\"\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail Sending via Message Queue (PHP)\nDESCRIPTION: YAML configuration to send mails asynchronously using the message queue in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    mailer:\n        message_bus: 'messenger.default_bus'\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Price using MinAggregation in PHP\nDESCRIPTION: Demonstrates how to use MinAggregation to find the minimum price of products. It creates a Criteria object, adds the aggregation, and retrieves the result.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new MinAggregation('min-price', 'price')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var MinResult $aggregation */\n$aggregation = $result->getAggregations()->get('min-price');\n\n$aggregation->getMin();\n```\n\n----------------------------------------\n\nTITLE: Retrieving In-App Purchases in Symfony Controller (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve active In-App Purchases in a Symfony controller using the shopware/app-bundle. It renders the admin template with the In-App Purchases data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/in-app-purchase/index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#[Route(path: '/app/admin', name: 'admin')]\npublic function admin(ModuleAction $action): Response {\n    return $this->render('admin.html.twig', [\n        'inAppPurchases' => $action->inAppPurchases->all(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating App Manifest in XML for Shopware Extension\nDESCRIPTION: This snippet shows how to create the basic configuration for a Shopware app in the manifest.xml file. It includes metadata and required permissions for the app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>MyApiExtension</name>\n        <label>Topsellers API</label>\n        <description>This app adds a Topseller API endpoint</description>\n        <author>shopware AG</author>\n        <copyright>(c) shopware AG</copyright>\n        <version>1.0.0</version>\n        <license>MIT</license>\n    </meta>\n    <permissions>\n        <read>order</read>\n        <read>order_line_item</read>\n        <read>product</read>\n    </permissions>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Enabling PHP Debugging with XDebug\nDESCRIPTION: YAML configuration to enable XDebug for PHP debugging in a Shopware Docker setup. Created as a Docker Compose override file to modify the web service configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    web:\n        environment:\n            - XDEBUG_MODE=debug\n            - XDEBUG_CONFIG=client_host=host.docker.internal\n            - PHP_PROFILER=xdebug\n```\n\n----------------------------------------\n\nTITLE: Defining App Permissions in XML\nDESCRIPTION: Example of how to define app permissions in the manifest.xml file. It shows how to request read, create, update, and delete permissions for specific entities, as well as additional non-CRUD privileges.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        ...\n    </meta>\n    <permissions>\n        <read>product</read>\n        <create>product</create>\n        <update>product</update>\n\n        <delete>order</delete>\n\n        <!-- Since version 6.4.12.0 your app can request additional non-CRUD privileges-->\n        <permission>system:cache:info</permission>\n    </permissions>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex B2B API Route with Parameters in PHP\nDESCRIPTION: This PHP array defines a B2B API route using FastRoute syntax, including a URL placeholder `{name}`. The fifth element in the array `['name']` specifies the order in which route parameters should be passed as arguments to the controller action method. This allows capturing dynamic parts of the URL.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/rest-api.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[\n    'GET', // the HTTP method\n    '/my/hello/{name}', // the sub-route will be concatenated to http://my-shop.de/api/b2b/my/hello/world\n    'my.api_controller', // DIC controller id\n    'hello' // action method name,\n    ['name'] // define name as the first argument\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Manufacturer Premapping Reader in PHP\nDESCRIPTION: This PHP class `ManufacturerReader` extends `AbstractPremappingReader` to implement custom premapping logic for product manufacturers during a Shopware migration. It fetches manufacturers from the source system via the gateway, retrieves available manufacturers from the target Shopware 6 instance, and provides a structure (`PremappingStruct`) for the administration interface to allow users to map source manufacturers to existing target manufacturers. It includes a basic preselection mechanism based on matching manufacturer names.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/decorating-a-shopware-migration-assistant-converter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationExtendConverterExample\\Profile\\Shopware\\Premapping;\n\nuse Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerEntity;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Sorting\\FieldSorting;\nuse SwagMigrationAssistant\\Migration\\Gateway\\GatewayRegistryInterface;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Migration\\Premapping\\AbstractPremappingReader;\nuse SwagMigrationAssistant\\Migration\\Premapping\\PremappingChoiceStruct;\nuse SwagMigrationAssistant\\Migration\\Premapping\\PremappingEntityStruct;\nuse SwagMigrationAssistant\\Migration\\Premapping\\PremappingStruct;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\ProductDataSelection;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\ShopwareGatewayInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\n\nclass ManufacturerReader extends AbstractPremappingReader\n{\n    private const MAPPING_NAME = 'swag_manufacturer';\n\n    private EntityRepository $manufacturerRepo;\n\n    private GatewayRegistryInterface $gatewayRegistry;\n\n    private array $preselectionDictionary;\n\n    private array $preselectionSourceNameDictionary;\n\n    public function __construct(\n        EntityRepository $manufacturerRepo,\n        GatewayRegistryInterface $gatewayRegistry\n    ) {\n        $this->manufacturerRepo = $manufacturerRepo;\n        $this->gatewayRegistry = $gatewayRegistry;\n    }\n\n    public static function getMappingName(): string\n    {\n        return self::MAPPING_NAME;\n    }\n\n    /**\n     * Checks whether or not the current profile and DataSelection is supported\n     */\n    public function supports(MigrationContextInterface $migrationContext, array $entityGroupNames): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface\n            && in_array(ProductDataSelection::IDENTIFIER, $entityGroupNames, true);\n    }\n\n    public function getPremapping(Context $context, MigrationContextInterface $migrationContext): PremappingStruct\n    {\n        $this->fillConnectionPremappingDictionary($migrationContext);\n        $mapping = $this->getMapping($migrationContext);\n        $choices = $this->getChoices($context);\n        $this->setPreselection($mapping);\n\n        return new PremappingStruct(self::getMappingName(), $mapping, $choices);\n    }\n\n    /**\n     * Reads all manufacturers of the source system, looks into connectionPremappingDictionary if a premapping\n     * is currently set and returns the filled mapping array\n     *\n     * @return PremappingEntityStruct[]\n     */\n    private function getMapping(MigrationContextInterface $migrationContext): array\n    {\n        /** @var ShopwareGatewayInterface $gateway */\n        $gateway = $this->gatewayRegistry->getGateway($migrationContext);\n\n        $preMappingData = $gateway->readTable($migrationContext, 's_articles_supplier');\n\n        $entityData = [];\n        foreach ($preMappingData as $data) {\n            $this->preselectionSourceNameDictionary[$data['id']] = $data['name'];\n\n            $uuid = '';\n            if (isset($this->connectionPremappingDictionary[$data['id']])) {\n                $uuid = $this->connectionPremappingDictionary[$data['id']]['destinationUuid'];\n            }\n\n            $entityData[] = new PremappingEntityStruct($data['id'], $data['name'], $uuid);\n        }\n\n        return $entityData;\n    }\n\n    /**\n     * Returns all choices of the manufacturer repository\n     *\n     * @return PremappingChoiceStruct[]\n     */\n    private function getChoices(Context $context): array\n    {\n        $criteria = new Criteria();\n        $criteria->addSorting(new FieldSorting('name'));\n\n        /** @var ProductManufacturerEntity[] $manufacturers */\n        $manufacturers = $this->manufacturerRepo->search($criteria, $context);\n\n        $choices = [];\n        foreach ($manufacturers as $manufacturer) {\n            $this->preselectionDictionary[$manufacturer->getName()] = $manufacturer->getId();\n            $choices[] = new PremappingChoiceStruct($manufacturer->getId(), $manufacturer->getName());\n        }\n\n        return $choices;\n    }\n\n    /**\n     * Loops through mapping and sets preselection, if uuid is currently not set\n     *\n     * @param PremappingEntityStruct[] $mapping\n     */\n    private function setPreselection(array $mapping): void\n    {\n        foreach ($mapping as $item) {\n            if (!isset($this->preselectionSourceNameDictionary[$item->getSourceId()]) || $item->getDestinationUuid() !== '') {\n                continue;\n            }\n\n            $sourceName = $this->preselectionSourceNameDictionary[$item->getSourceId()];\n            $preselectionValue = $this->getPreselectionValue($sourceName);\n\n            if ($preselectionValue !== null) {\n                $item->setDestinationUuid($preselectionValue);\n            }\n        }\n    }\n\n    /**\n     * Only a simple example on how to implement a preselection\n     */\n    private function getPreselectionValue(string $sourceName): ?string\n    {\n        $preselectionValue = null;\n        $validPreselection = 'Shopware';\n        $choice = 'shopware AG';\n\n        if ($sourceName === $validPreselection && isset($this->preselectionDictionary[$choice])) {\n            $preselectionValue = $this->preselectionDictionary[$choice];\n        }\n\n        return $preselectionValue;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ACL Repository Class Definition in PHP\nDESCRIPTION: Core ACL repository class that provides methods for managing access control permissions including allow, deny, and permission checking functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Acl\\Framework;\n\nuse Shopware\\B2B\\Acl\\Framework\\AclQuery;\nuse Shopware\\B2B\\Acl\\Framework\\AclUnsupportedContextException;\nuse Shopware\\B2B\\Common\\IdValue;\n\nclass AclRepository\n{\n    public function allow($context, IdValue $subjectId, bool $grantable = false): void\n    { \n        [...] \n    }\n\n    public function allowAll($context, array $subjectIds, bool $grantable = false): void \n    { \n        [...] \n    }\n\n    public function deny($context, IdValue $subjectId): void\n    {\n        [...]\n    }\n\n    public function denyAll($context, array $subjectIds): void\n    {\n        [...]\n    }\n\n    public function isAllowed($context, IdValue $subjectId): bool \n    { \n        [...] \n    }\n\n    public function isGrantable($context, IdValue $subjectId): bool \n    { \n        [...] \n    }\n\n    public function getAllAllowedIds($context): array \n    { \n        [...] \n    }\n\n    public function fetchAllGrantableIds($context): array \n    {\n        [...]\n    }\n\n    public function fetchAllDirectlyIds($context): array \n    { \n        [...] \n    }\n\n    public function getUnionizedSqlQuery($context): AclQuery \n    { \n        [...] \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Pinia Store Registration with ID\nDESCRIPTION: Alternative way to register a Pinia store using an id property in the definition object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = Shopware.Store.register({\n    id: '<storeName>',\n    state: () => ({\n        // Initial state\n    }),\n    getters: {\n       // ...\n    },\n    actions: {\n       // ...\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Using mapPropertyErrors Helper in Vue Component\nDESCRIPTION: This example demonstrates the use of the mapPropertyErrors helper function to map multiple error properties for a product entity in a Vue component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mapPropertyErrors } = Shopware.Component.getComponentHelper();\n\nComponent.register('sw-product-basic-form', {\n    computed: {\n        ...mapPropertyErrors('product', [\n            'name',\n            'description',\n            'productNumber',\n            'manufacturerId',\n            'active',\n            'markAsTopseller'\n        ])\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom System Checker in XML\nDESCRIPTION: This XML service definition shows how to register a custom system checker in Symfony's service container, injecting all services tagged with 'shopware.system_check' using the tagged iterator pattern.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/system-check/index.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"YourNamepace\\CustomSystemChecker\">\n    <argument type=\"tagged_iterator\" tag=\"shopware.system_check\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Building State Machine Criteria for Data Loading in Shopware PHP\nDESCRIPTION: This snippet shows the construction of a Criteria object to query the state_machine table, including filters on the technical name, ordering, and associations for transitions and states. It loads full transition info along with their associated states. The approach demonstrates how complex data retrieval can introduce database overhead when only the initial state ID is required. The Criteria and filter classes are dependencies for this pattern, used in Shopware's data abstraction layer.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-initial-state-id-loader.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria\n    ->addFilter(new EqualsFilter('state_machine.technicalName', $name))\n    ->setLimit(1);\n\n$criteria->getAssociation('transitions')\n    ->addSorting(new FieldSorting('state_machine_transition.actionName'))\n    ->addAssociation('fromStateMachineState')\n    ->addAssociation('toStateMachineState');\n\n$criteria->getAssociation('states')\n    ->addSorting(new FieldSorting('state_machine_state.technicalName'));\n```\n\n----------------------------------------\n\nTITLE: Viewing PaaS Meta-Package File Structure\nDESCRIPTION: Displays the file and directory structure created by the Shopware PaaS meta-package. This structure includes configuration files under `.platform`, scripts in `bin`, package configurations in `config`, and theme files in `files`.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/setup-template.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n./\n├─ .platform/\n│  ├─ applications.yaml\n│  ├─ routes.yaml\n│  ├─ services.yaml\n├─ bin/\n│  ├─ prestart_cacheclear.sh\n├─ config/\n│  ├─ packages/\n│  │  ├─ paas.yaml\n├─ files/\n│  ├─ theme-config/\n```\n\n----------------------------------------\n\nTITLE: Extended Theme Configuration with Translated Labels in Shopware\nDESCRIPTION: This snippet shows an extended Shopware theme configuration with translated labels for tabs, blocks, and sections. It includes definitions for a color field and its associated structural elements.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"Just another theme\",\n  \"author\": \"Just another author\",\n\n  \"config\": {\n    \"blocks\": {\n      \"colors\": {\n        \"themeColors\": {\n          \"en-GB\": \"Theme colours\",\n          \"de-DE\": \"Theme Farben\"\n        }\n      }\n    },\n    \"sections\": {\n      \"importantColors\": {\n        \"label\": {\n          \"en-GB\": \"Important colors\",\n          \"de-DE\": \"Wichtige Farben\"\n        }\n      }\n    },\n    \"tabs\": {\n      \"colors\": {\n          \"label\": {\n              \"en-GB\": \"Colours\",\n              \"de-DE\": \"Farben\"\n          }\n      } \n    },\n    \"fields\": {\n      \"sw-color-brand-primary\": {\n        \"label\": {\n          \"en-GB\": \"Primary colour\",\n          \"de-DE\": \"Primär\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#399\",\n        \"editable\": true,\n        \"tab\": \"colors\",\n        \"block\": \"themeColors\",\n        \"section\": \"importantColors\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExamplePageletLoader in Shopware\nDESCRIPTION: A PHP class that loads a custom pagelet, sets data to it, and dispatches an event. This class is responsible for initializing the pagelet and handling its data preparation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-pagelet.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Storefront/Pagelet/Example/ExamplePageletLoader.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Pagelet\\Example;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Page\\GenericPageLoaderInterface;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ExamplePageletLoader\n{\n    private EventDispatcherInterface $eventDispatcher;\n\n    public function __construct(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->eventDispatcher = $eventDispatcher;\n    }\n\n    public function load(Request $request, SalesChannelContext $context): ExamplePagelet\n    {\n        $pagelet = new ExamplePagelet();\n\n        // Do additional stuff, e.g. load more data from store-api and add it to page\n        $pagelet->setExampleData(...);\n\n        $this->eventDispatcher->dispatch(\n            new ExamplePageletLoadedEvent($pagelet, $context, $request)\n        );\n\n        return $pagelet;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Extension Verifier Docker Image\nDESCRIPTION: Command to run the Extension Verifier using its Docker image. This is the primary method of using the tool as it comes pre-installed with all necessary dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm ghcr.io/shopwarelabs/extension-verifier:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Errors for Nested Views in JSON\nDESCRIPTION: This JSON configuration defines error mappings for different views in a product detail page, specifying which entity and properties to check for errors in each view.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sw.product.detail.base\": {\n    \"product\": [\n      \"taxId\",\n      \"price\",\n      \"stock\",\n      \"manufacturerId\",\n      \"name\"\n    ]\n  },\n  \"sw.product.detail.cross.selling\": {\n    \"product_cross_selling\": [\n      \"name\",\n      \"type\",\n      \"position\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Directives in Jest for Shopware Administration\nDESCRIPTION: Demonstrates how to stub directives using localVue in Jest tests for Shopware Administration components. This example shows how to mock the 'clipboard' directive to resolve common warnings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { shallowMount, createLocalVue } from '@vue/test-utils';\n\nconst localVue = createLocalVue();\nlocalVue.directive('clipboard', {}); // add directive mock to localVue\n\nshallowMount(Shopware.Component.build('your-component'), {\n    localVue\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Price Definition in Cart Scripts\nDESCRIPTION: Creates price definitions manually for different currencies using the cart price factory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set price = services.cart.price.create({\n    'default': { 'gross': 19.99, 'net': 19.99},\n    'EUR': { 'gross': 19.99, 'net': 19.99},\n    'USD': { 'gross': 24.99, 'net': 21.37},\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating a Shopware Theme Plugin\nDESCRIPTION: This command installs and activates the newly created theme plugin in Shopware. It makes the theme available for assignment to a sales channel.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/create-a-theme.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# run this command to install and activate your plugin\nbin/console plugin:install --activate SwagBasicExampleTheme\n\nShopware Plugin Lifecycle Service\n=================================\n\n Install 1 plugin(s):\n * Theme SwagBasicExampleTheme plugin (vdev-trunk)\n\n Plugin \"SwagBasicExampleTheme\" has been installed and activated successfully.\n\n [OK] Installed 1 plugin(s).\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductSubscriber Class\nDESCRIPTION: Basic setup of a ProductSubscriber class that implements EventSubscriberInterface to listen for product loaded events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/fetching-data-from-entity-selection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Core\\Content\\Product\\ProductEvents;\n\nclass ProductSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ProductEvents::PRODUCT_LOADED_EVENT => 'onProductLoaded'\n        ];\n    }\n\n    public function onProductLoaded(EntityLoadedEvent $event): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active In-App Purchases in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to check if an In-App Purchase is active in the Shopware administration. It uses the isActive method of the Shopware.InAppPurchase object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/in-app-purchase/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (Shopware.InAppPurchase.isActive('MyExtensionName', 'my-iap-identifier')) {};\n```\n\n----------------------------------------\n\nTITLE: Theme Number Field Configuration in Shopware 6\nDESCRIPTION: Adding a customizable number field for controlling visible slides with constraints for minimum and maximum values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"config\": {\n    \"fields\": {\n      \"visible-slides\": {\n        \"label\": {\n          \"en-GB\": \"Number of visible slides\",\n          \"de-DE\": \"Anzahl an sichtbaren Slider Bildern\"\n        },\n        \"type\": \"number\",\n        \"custom\": {\n          \"numberType\": \"int\",\n          \"min\": 1,\n          \"max\": 6\n        },\n        \"value\": 3,\n        \"editable\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Assets in Twig Templates\nDESCRIPTION: HTML/Twig code example showing how to reference theme assets in templates using the Symfony asset function.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-assets-to-theme.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{ asset('/assets/your-image.png', 'theme') }}\">\n```\n\n----------------------------------------\n\nTITLE: Deprecating Admin Components in JavaScript\nDESCRIPTION: Shows how to deprecate an administration component in Shopware using both JSDoc annotations and the component registration API.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @deprecated tag:v6.5.0 - Use sw-new instead\n * @status deprecated\n */\nShopware.Component.register('sw-old', {\n    deprecated: '6.5.0'\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Cart Storage in Shopware CLI\nDESCRIPTION: Command-line instruction for migrating cart data between storage types in Shopware. It allows specifying the source storage type and optionally the Redis URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/cart-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/console cart:migrate {fromStorage} {redisUrl?}\n```\n\n----------------------------------------\n\nTITLE: Accessing Swagger UI for Shopware API Documentation\nDESCRIPTION: This snippet shows the relative endpoint path for accessing the Swagger UI for both Admin API and Store API. The path is relative to the respective base path and requires choosing between 'api' or 'store-api'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/generated-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/(api|store-api)/_info/swagger.html\n```\n\n----------------------------------------\n\nTITLE: Sending App Notifications via HTTP POST\nDESCRIPTION: Example of how to send a notification to the Shopware admin panel using an HTTP POST request. It demonstrates the structure of the request body, including status, message, and permission settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"success\",\n    \"message\": \"This is a successful message\",\n    \"adminOnly\": \"true\",\n    \"requiredPrivileges\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CookiePermissionPlugin Using PluginManager in JavaScript\nDESCRIPTION: This snippet demonstrates an alternative way to import the original plugin class using the window.PluginManager object. This is useful when you can't directly import the original plugin class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/override-existing-javascript.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst PluginManager = window.PluginManager\nconst Plugin = PluginManager.getPlugin('CookiePermission')\nconst PluginClass = Plugin.get('class')\n\nexport default class MyCookiePermission extends PluginClass {\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Media Objects with searchMedia Function in PHP\nDESCRIPTION: The searchMedia function from MediaExtension that resolves media objects from their IDs. This function can be used in templates to fetch media objects associated with custom fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/custom-fields-of-type-media.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// platform/src/Core/Framework/Adapter/Twig/Extension/MediaExtension.php\npublic function searchMedia(array $ids, Context $context): MediaCollection { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating REST API Endpoints for Feature Flag Management in PHP\nDESCRIPTION: Controller implementation providing REST endpoints to enable, disable, and query feature flags. The endpoints allow for dynamic toggling of non-major feature flags at runtime.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-11-29-toggle-feature-flag-on-demand.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass FeatureFlagController extends AbstractController\n{\n    #[Route(\"/api/_action/feature-flag/enable/{feature}\", name=\"api.action.feature-flag.toggle\", methods={\"POST\"})]\n    public function enable(string $feature, Request $request): JsonResponse\n    {        \n        $this->featureFlagRegistry->enable($feature);\n        \n        return new JsonResponse(null, Response::HTTP_NO_CONTENT);\n    }\n    \n    #[Route(\"/api/_action/feature-flag/disable/{feature}\", name=\"api.action.feature-flag.toggle\", methods={\"POST\"})]\n    public function disable(string $feature, Request $request): JsonResponse\n    {        \n        $this->featureFlagRegistry->disable($feature);\n        \n        return new JsonResponse(null, Response::HTTP_NO_CONTENT);\n    }\n\n    #[Route(\"/api/_action/feature-flag\", name=\"api.action.feature-flag.load\", methods={\"GET\"})]\n    public function load(Request $request): JsonResponse\n    {\n        $featureFlags = Feature::getRegisteredFeatures();\n        \n        return new JsonResponse($featureFlags);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Cache Invalidation with Redis in Shopware\nDESCRIPTION: Configuration for enabling delayed cache invalidation using Redis as storage. This helps systems with high update frequency by processing cache invalidation through a background task rather than immediately.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/shopware.yaml\nshopware:\n    cache:\n        invalidation:\n            delay: 1 # 0 = disabled, 1 = enabled\n            delay_options:\n                storage: redis\n                connection: 'ephemeral' # connection name from redis configuration\n```\n\n----------------------------------------\n\nTITLE: PHP Performance Configuration for Shopware\nDESCRIPTION: PHP.ini settings to optimize performance, including opcache configurations, assertion handling, and path cache settings for Shopware applications.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n; don't evaluate assert()\nzend.assertions=-1\n\n; cache file_exists,is_file\n; WARNING: this will lead to thrown errors after clearing cache while it tries to access cached Shopware_Core_KernelProdDebugContainer.php\nopcache.enable_file_override=1\n\n; increase opcache string buffer as shopware has many files\nopcache.interned_strings_buffer=20\n\n; disables opcache validation for timestamp for reinvalidation of the cache\n; WARNING: you need to clear on deployments the opcache by reloading php-fpm or cachetool (https://github.com/gordalina/cachetool)\nopcache.validate_timestamps=0\n\n; disable check for BOM\nzend.detect_unicode=0\n\n; increase default realpath cache\nrealpath_cache_ttl=3600\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific MySQL Version\nDESCRIPTION: Nix configuration for pinning MySQL to a specific version (8.0.33) using package override.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\n{\n  services.mysql = let \n    mysql8033 = pkgs.mysql80.overrideAttrs (oldAttrs: {\n      version = \"8.0.33\";\n      src = pkgs.fetchFromGitHub {\n        owner = \"mysql\";\n        repo = \"mysql-server\";\n        rev = \"mysql-8.0.33\";\n        sha256 = \"sha256-s4llspXB+rCsGLEtI4WJiPYvtnWiKx51oAgxlg/lATg=\";\n      };\n    });\n  in\n  {\n    enable = true;\n    package = mysql8033;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Nullsafe Operator Demonstration in PHP\nDESCRIPTION: This PHP snippet defines two classes, User and Address, utilizing nullable types. It establishes the structural basis for demonstrating how to safely navigate property and method chains handling potential nulls. Requires PHP 7.4+ (for property types), but used in a nullsafe context for PHP 8+. No immediate output—these are data definitions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass User\n{\n    public string $firstName;\n    public string $lastName;\n    public ?int $age = null;\n    public ?Address $address = null;\n}\n\nclass Address\n{\n    public int $number;\n    public string $addressLine1;\n    public ?string $addressLine2 = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom URL Provider in Shopware Service Container\nDESCRIPTION: This XML configuration registers the CustomUrlProvider class as a service in the Shopware dependency injection container. It injects necessary dependencies and tags the service as a sitemap URL provider.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/add-custom-sitemap-entries.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Sitemap\\Provider\\CustomUrlProvider\" >\n            <argument type=\"service\" id=\"swag_example.repository\" />\n            <argument type=\"service\" id=\"Doctrine\\DBAL\\Connection\"/>\n            <argument type=\"service\" id=\"router\"/>\n\n            <tag name=\"shopware.sitemap_url_provider\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing EqualsAny Filter in Shopware\nDESCRIPTION: Shows usage of EqualsAny filter to match multiple possible values. Filters products based on multiple product numbers.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(\n    new EqualsAnyFilter('productNumber', ['3fed029475fa4d4585f3a119886e0eb1', '77d26d011d914c3aa2c197c81241a45b'])\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": [\n        { \n            \"type\": \"equalsAny\", \n            \"field\": \"productNumber\", \n            \"value\": [\n                \"3fed029475fa4d4585f3a119886e0eb1\", \n                \"77d26d011d914c3aa2c197c81241a45b\"\n            ] \n        }    \n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Administration Visibility Settings UI using HTML/Vue\nDESCRIPTION: This HTML snippet demonstrates the UI components within the Shopware Administration for configuring CMS block/section visibility. It uses Shopware's Vue.js components (`sw-checkbox-field`) bound to a `visibility` object (likely corresponding to the JSON structure). Merchants can check/uncheck these boxes to control visibility on mobile, tablet, and desktop devices. Labels are localized using `$tc`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-10-17-hide-and-show-cms-content.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<sw-checkbox-field\n    v-model=\"visibility.mobile\"\n    class=sw-cms-visibility-config__checkbox-input\n    :label=\"$tc('sw-cms.sidebar.contentMenu.visibilityMobile')\"\n/>\n\n<sw-checkbox-field\n    v-model=\"visibility.tablet\"\n    class=\"sw-cms-visibility-config__checkbox-input\"\n    :label=\"$tc('sw-cms.sidebar.contentMenu.visibilityTablet')\"\n/>\n\n<sw-checkbox-field\n    v-model=\"visibility.desktop\"\n    class=\"sw-cms-visibility-config__checkbox-input\"\n    :label=\"$tc('sw-cms.sidebar.contentMenu.visibilityDesktop')\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Step 1: Creating the Enum and Accepting It in API\nDESCRIPTION: First migration step that creates an enum and updates the method signature to accept either enum or string, maintaining compatibility with both approaches.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-16-php-enums.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nenum IndexMethod\n{\n    case PARTIAL;\n    case FULL;\n}\n\nclass Indexer\n{ \n    public function product(int $id, IndexMethod|string $method): void\n    {\n       ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Style Configuration in Shopware 6\nDESCRIPTION: Configuring the order of CSS compilation, including overrides for variables and functions, and paths to style files.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\",\n    \"@Storefront\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Line Item Condition Script in Twig\nDESCRIPTION: Twig script for the line item condition that checks if selected products are present in the cart or match a specific line item.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/rule-builder/add-custom-rule-conditions.md#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{% if scope.lineItem is defined %}\n    {% return compare(operator, lineItem.referenceId, productIds) %}\n{% endif %}\n\n{% if scope.cart is not defined %}\n    {% return false %}\n{% endif %}\n\n{% for lineItem in scope.cart.lineItems.getFlat() %}\n    {% if compare(operator, lineItem.referenceId, productIds) %}\n        {% return true %}\n    {% endif %}\n{% endfor %}\n\n{% return false %}\n```\n\n----------------------------------------\n\nTITLE: Using API Expectations to Require Specific Shopware Version\nDESCRIPTION: Example of using the sw-expect-packages header to ensure a request only succeeds if Shopware 6.4 or higher is installed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/api-versioning.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET /api/test\nsw-expect-packages: shopware/core:~6.4\n```\n\n----------------------------------------\n\nTITLE: Creating App Manifest XML\nDESCRIPTION: Basic manifest file defining app metadata and configuration for Shopware integration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>FlowBuilderTriggerApp</name>\n        <label>Flow Builder Trigger App</label>\n        <label lang=\"de-DE\">Flow Builder Abzug-App</label>\n        <description>This is the example description for app</description>\n        <description lang=\"de-DE\">Dies ist die Beispielbeschreibung für app</description>\n        <author>shopware AG</author>\n        <copyright>(c) shopware AG</copyright>\n        <version>4.14.0</version>\n        <icon>Resources/app-icon.png</icon>\n        <license>MIT</license>\n    </meta>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Using Thumbnails for Responsive Images in Twig\nDESCRIPTION: An example of using the sw_thumbnails Twig function to display responsive images optimized for different viewports.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/custom-fields-of-type-media.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-sportsMedia-thumbnails' with {\nmedia: sportsMedia\n} %}\n```\n\n----------------------------------------\n\nTITLE: Step 3: Deprecating Constants and String Parameters\nDESCRIPTION: Adding deprecation notices to constants and method parameters to signal the future removal of string-based API in the next major version.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-16-php-enums.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Indexer\n{\n    // @deprecated tag:v6.6.0 - Constant will be removed, use enum IndexMethod::PARTIAL\n    public const PARTIAL = 'partial';\n    // @deprecated tag:v6.6.0 - Constant will be removed, use enum IndexMethod::FULL\n    public const FULL = 'full';\n\n    /**\n     * @deprecated tag:v6.6.0 - Parameter $method will not accept a primitive in v6.6.0\n     */\n    public function product(int $id, IndexMethod|string $method): void\n    {\n        if (is_string($method)) {\n            $method = match ($method) {\n                'partial' => IndexMethod::PARTIAL,  \n                'full' => IndexMethod::FULL,\n                default => throw new \\InvalidArgumentException()\n            };\n        }\n\n        match ($method) {\n            IndexMethod::PARTIAL => $this->partial($id),\n            IndexMethod::FULL => $this->full($id)\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shopware for Cypress E2E Testing\nDESCRIPTION: This command prepares the Shopware installation and environment for Cypress usage in E2E testing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run e2e:setup\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended Data in Storefront Template\nDESCRIPTION: Template example demonstrating how to access custom data extensions in a product detail page\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/data-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}\n\n{% block page_product_detail %}\n    <h1>{{ page.getExtension('swagMyAdditionalData').example }}</h1>\n    \n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Loading Pagelet via Controller Route in Shopware\nDESCRIPTION: A PHP method demonstrating how to load a custom pagelet through a dedicated controller route. This allows the pagelet to be loaded independently via an AJAX request.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-pagelet.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[Route(path: '/example-pagelet', name: 'frontend.example.pagelet', methods: ['POST'], defaults: ['XmlHttpRequest' => 'true'])]\npublic function examplePagelet(Request $request, SalesChannelContext $context): Response\n{\n    $pagelet = $this->examplePageletLoader->load($request, $context);\n\n    return $this->renderStorefront('@Storefront/storefront/pagelet/example/index.html.twig', [\n        'pagelet' => $pagelet\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Shopping List Price Calculation in Shopware\nDESCRIPTION: PHP method that calculates prices for shopping lists and their line items. Retrieves product data, processes calculations for all items, and assigns the final price to the shopping list entity.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass ShoppingListPriceCalculator extends AbstractShoppingListPriceCalculator\n{\n    ...\n    public function calculate(iterable $shoppingLists, SalesChannelContext $context): void\n    {\n        $productIds = $this->getProductIds($shoppingLists);\n        $products = $this->productRepository->search(new Criteria($productIds), $context)->getEntities();\n\n        foreach ($shoppingLists as $entity) {\n            $listPrices = new PriceCollection();\n\n            if (!$entity->getLineItems() instanceof ShoppingListLineItemCollection) {\n                $entity->setPrice($this->calculatedPrices($listPrices, $context));\n                continue;\n            }\n\n            $this->processCalculatedLineItems($entity->getLineItems(), $products, $context);\n\n            foreach ($entity->getLineItems() as $lineItem) {\n                if (!$lineItem->getPrice()) {\n                    continue;\n                }\n\n                $listPrices->add($lineItem->getPrice());\n            }\n\n            $entity->assign([\n                'price' => $this->calculatedPrices($listPrices, $context),\n            ]);\n        }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cart State Diagram\nDESCRIPTION: Mermaid diagram showing the different states a cart can be in and the transitions between them, from empty to calculated state.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/cart.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Cart State\n---\nstateDiagram-v2\n    [*] --> Empty\n    Empty --> Dirty : add line item\n    Dirty --> Calculated : calculate\n    Calculated --> Dirty : modify line item/shipping/payment\n    Calculated --> Calculated : order invalid\n    Calculated --> [*] : order\n```\n\n----------------------------------------\n\nTITLE: Searching Shorthand Custom Entities via Admin API in Shopware\nDESCRIPTION: Shows how to perform a search on custom entities with shorthand prefixes using the Shopware Admin API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/ce_blog\n```\n\n----------------------------------------\n\nTITLE: Creating Storefront Controller in PHP\nDESCRIPTION: Implements a Storefront controller that wraps a custom route to make it accessible from the frontend. The controller handles GET and POST requests and is configured for XmlHttpRequest access.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\AbstractExampleRoute;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n    private AbstractExampleRoute $route;\n\n    public function __construct(AbstractExampleRoute $route)\n    {\n        $this->route = $route;\n    }\n\n    #[Route(path: '/example', name: 'frontend.example.search', methods: ['GET', 'POST'], defaults: ['XmlHttpRequest' => 'true', '_entity' => 'swag_example'])]\n    public function load(Criteria $criteria, SalesChannelContext $context): Response\n    {\n        return $this->route->load($criteria, $context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CustomFields to Translated Entity Definition in PHP\nDESCRIPTION: This snippet demonstrates how to add the CustomFields field to a translated entity definition. It's used in conjunction with the TranslatedField in the main entity definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/Aggregate/ExampleTranslation/ExampleTranslationDefinition.php\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\CustomFields;                                                                    \n\n[...]\nclass ExampleTranslationDefinition extends EntityTranslationDefinition\n{\n    [...]\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new StringField('name', 'name'))->addFlags(new Required()),\n\n            new CustomFields()\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: System Health Check Task\nDESCRIPTION: PHP task for running system health checks before deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ntask('sw:health_checks', static function () {\n    run('cd {{release_path}} && bin/console system:check --context=pre_rollout');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Response in an App Script (Twig)\nDESCRIPTION: Utilizes the `services.response.redirect()` factory method to generate a `RedirectResponse` object within an app script. This facilitates redirecting the user to a specified Shopware route. Requires the target route name, optional route parameters, and an optional HTTP status code (defaults to 302).\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.redirect('routeName', params, statusCode) %}\n```\n\n----------------------------------------\n\nTITLE: Running Shopware Console Commands from Host\nDESCRIPTION: Command to execute Shopware console commands directly from the host machine without entering the container shell.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec web bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: PHP SDK JWT Validation\nDESCRIPTION: PHP code demonstrating JWT validation using the Shopware App PHP SDK\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/clientside-to-app-backend.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$shop = $shopResolver->resolveShop($serverRequest);\n\n$storefront = $contextResolver->assembleStorefrontRequest($serverRequest, $shop);\n\n$storefront->claims->getCustomerId();\n```\n\n----------------------------------------\n\nTITLE: Implementing the Generic ScriptRule Class in PHP\nDESCRIPTION: Defines the `ScriptRule` class, a generic rule implementation that evaluates custom Twig scripts provided by apps. The `match` method sets up a Twig environment, renders the app's script wrapped in a macro using the current `RuleScope` and user-defined values, and returns the boolean result. It also handles the transformation of JSON-defined constraints into Symfony constraint objects for validation via the `setConstraints` method.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ScriptRule extends Rule\n{\n    const CONSTRAINT_MAPPING = [\n        'notBlank' => NotBlank::class,\n        'arrayOfUuid' => ArrayOfUuid::class,\n        'arrayOfType' => ArrayOfType::class,\n        'choice' => Choice::class,\n        'type' => Type::class,\n    ];\n\n    protected string $script = '';\n\n    protected array $constraints = [];\n\n    protected array $values = [];\n\n    public function match(RuleScope $scope): bool\n    {\n        $context = array_merge(['scope' => $scope], $this->values);\n        $script = new Script(\n            $this->getName(),\n            sprintf('\n                {%% apply spaceless %%}\n                    {%% macro evaluate(%1$s) %%}\n                        %2$s\n                    {%% endmacro %%}\n\n                    {%% set var = _self.evaluate(%1$s) %%}\n                    {{ var }}\n                {%% endapply  %%}\n            ', implode(', ', array_keys($context)), $this->script),\n            $scope->getCurrentTime(),\n            null\n        );\n\n        $twig = new TwigEnvironment(\n            new ScriptTwigLoader($script),\n            $script->getTwigOptions()\n        );\n\n        $twig->addExtension(new PhpSyntaxExtension());\n\n        return filter_var(\n            trim($twig->render($this->getName(), $context)),\n            FILTER_VALIDATE_BOOLEAN\n        );\n    }\n\n    public function getConstraints(): array\n    {\n        return $this->constraints;\n    }\n\n    public function setConstraints(array $constraints): void\n    {\n        $this->constraints = [];\n        foreach ($constraints as $name => $types) {\n            $this->constraints[$name] = array_map(function ($type) {\n                $arguments = $type['arguments'] ?? [];\n                $class = self::CONSTRAINT_MAPPING[$type['name']];\n\n                return new $class(...$arguments);\n            }, $types);\n        }\n    }\n\n    public function getName(): string\n    {\n        return 'scriptRule';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Indexing Status in Shopware 6 Database\nDESCRIPTION: SQL queries to check the status of indexing in the Shopware 6 database.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect * from message_queue_stats mqs ; \nselect count(*) from enqueue e ; \nselect count(*) from dead_message dm ;\n```\n\n----------------------------------------\n\nTITLE: Implementing the extractId Method for a Custom Context Resolver in PHP\nDESCRIPTION: This PHP snippet demonstrates a sample implementation of the `extractId` method in a custom `AclContextResolver`. It checks the type of the `$context` object (e.g., `ContactIdentity`, `OwnershipContext`, `ContactEntity`) and extracts the relevant ID. If the context object type is not supported, it throws an `AclUnsupportedContextException`.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function extractId($context): int\n{\n    if ($context instanceof ContactIdentity) {\n        return $context->getId();\n    }\n\n    if ($context instanceof OwnershipContext && is_a($context->identityClassName, ContactIdentity::class, true)) {\n        return $context->identityId;\n    }\n\n    if ($context instanceof ContactEntity && $context->id) {\n        return $context->id;\n    }\n\n    throw new AclUnsupportedContextException();\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component for Dynamic Rule Condition Fields in Shopware Administration\nDESCRIPTION: This JavaScript code defines a Vue component that dynamically builds and manages fields for custom rule conditions based on the constraints defined in the app's script.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nComponent.extend('sw-condition-script', 'sw-condition-base', {\n    template,\n    inheritAttrs: false,\n\n    computed: {\n        constraints() {\n            return this.condition.script.constraints;\n        },\n\n        values() {\n            const that = this;\n            const values = {};\n\n            Object.keys(this.constraints).forEach((key) => {\n                Object.defineProperty(values, key, {\n                    get: () => {\n                        that.ensureValueExist();\n\n                        return that.condition.value[key];\n                    },\n                    set: (value) => {\n                        that.ensureValueExist();\n                        that.condition.value = { ...that.condition.value, [key]: value };\n                    },\n                });\n            });\n\n            return values;\n        },\n\n        currentError() {\n            let error = null;\n\n            Object.keys(this.constraints).forEach((key) => {\n                if (error) {\n                    return;\n                }\n\n                const errorProperty = Shopware.State.getters['error/getApiError'](this.condition, `value.${key}`);\n\n                if (errorProperty) {\n                    error = errorProperty;\n                }\n            });\n\n            return error;\n        },\n    },\n    \n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Abstract Decorator with New Methods in PHP\nDESCRIPTION: Shows how to safely add new functionality to an existing decorator-based abstract class without breaking previous implementations. Demonstrates the addition of a non-abstract function (create) to the AbstractRuleLoader, ensuring backwards compatibility by forwarding calls to the decorated instance. Depends on Shopware context and the existence of RuleCollection; intended for incremental extension of services.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/decorator-pattern.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class AbstractRuleLoader\n{\n    abstract public function getDecorated(): AbstractRuleLoader;\n\n    abstract public function load(Context $context): RuleCollection;\n\n    // introduced with shopware/shopware v6.6\n    public function create(Context $context): RuleCollection \n    {\n        return $this->getDecorated()->create($context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Payment Request JSON Structure\nDESCRIPTION: JSON schema for the initial payment POST request containing shop source information, order transaction details, and return URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"orderTransaction\": {\n    //...\n  },\n  \"order\": {\n    //...\n  },\n  \"returnUrl\": \"https://shop.com/checkout/....\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Control Commands for Shopware Installation\nDESCRIPTION: Basic Docker commands for managing Shopware containers using psh.phar utility. Includes commands for starting, accessing, and managing Docker containers.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./psh.phar docker:start     # start & build containers\n./psh.phar docker:ssh       # ssh access web server\n./psh.phar docker:ssh-mysql # ssh access mysql\n./psh.phar docker:status    # show running containers and network bridges\n./psh.phar docker:stop      # stop the containers\n./psh.phar docker:destroy   # clear the whole docker cache\n```\n\n----------------------------------------\n\nTITLE: Registering DataSelection Service in Shopware\nDESCRIPTION: Demonstrates how to register a DataSelection service using service tags in Shopware's DI container.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/dataselection-and-dataset.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\ProductDataSelection\">\n    <tag name=\"shopware.migration.data_selection\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Configuring One-to-Many Add Assignment Context in Shopware\nDESCRIPTION: Example configuration for a one-to-many relationship add assignment context. Shows how to configure entity relationships, search criteria, and grid columns for shipping methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naddContext: {\n    type: 'one-to-many',\n    entity: 'shipping_method',\n    column: 'availabilityRuleId',\n    searchColumn: 'name',\n    criteria: () => {\n        const criteria = new Criteria();\n        criteria.addFilter(Criteria.not(\n            'AND',\n            [Criteria.equals('availabilityRuleId', ruleId)],\n        ));\n\n        return criteria;\n    },\n    gridColumns: [\n        {\n            property: 'name',\n            label: 'Name',\n            rawData: true,\n            sortable: true,\n            allowEdit: false,\n        },\n        {\n            property: 'description',\n            label: 'Description',\n            rawData: true,\n            sortable: true,\n            allowEdit: false,\n        },\n        {\n            property: 'taxType',\n            label: 'Tax calculation',\n            rawData: true,\n            sortable: true,\n            allowEdit: false,\n        },\n        {\n            property: 'active',\n            label: 'Active',\n            rawData: true,\n            sortable: true,\n            allowEdit: false,\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to Customer Registration Form\nDESCRIPTION: This snippet shows how to add a custom field to the customer registration form by extending the address-personal template and adding a new form field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-custom-fields-storefront.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/component/address/address-personal.html.twig' %}\n\n{% block component_address_personal_fields %}\n    {{ parent() }}\n\n\t{# custom field #}\n\t<div class=\"form-group col-sm-6\">\n\t\t<label class=\"form-label\" for=\"customFields[custom_field_name]\">\n\t\t\t{{ \"customFields.custom_field_name\"|trans|sw_sanitize}}*\n\t\t</label>\n\t\t<input type=\"text\" class=\"form-control\" name=\"customFields[custom_field_name]\" value=\"{{context.customer.customFields['custom_field_name'] }}\" id=\"customFields[custom_field_name]\" required=\"required\">\n\t</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Filtering a To-Many Association with AndFilter in PHP\nDESCRIPTION: This PHP snippet demonstrates using the Shopware DAL Criteria object to filter products. By nesting two `EqualsFilter` conditions within an `AndFilter`, it ensures that the query returns only products associated with a single category record that is named 'test-category' AND is active. This leverages the new `join-group` logic where filters within the same multi-filter layer apply to the same joined row.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-19-dal-join-filter.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$criteria->addFilter(\n    new AndFilter([\n        new EqualsFilter('product.categories.name', 'test-category'),\n        new EqualsFilter('product.categories.active', true)\n    ])\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting Order Transaction State Change Events in Shopware\nDESCRIPTION: This snippet outlines various order transaction state change events in Shopware. Each event requires 'order:read' permission and includes a payload with the 'order' entity.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": \"order\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Message Snippet for Notifications in Shopware 6 (JSON)\nDESCRIPTION: This JSON snippet defines a localizable message for use in error notifications, referenced by notification creation code. It is intended to reside in message snippet files (e.g., en-GB.json, de-DE.json) and supports Shopware's translation infrastructure. The key ('messageError') should match the identifier used in the notification creation code, and the value provides the display text for users.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-21-unified-notification-titles.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n    \"messageError\": \"Meaningful error message.\",\n```\n\n----------------------------------------\n\nTITLE: Capturing Prepared Payment in Shopware 6 (Symfony Bundle)\nDESCRIPTION: Symfony controller method for handling prepared payment capture in Shopware 6. It uses the PaymentCaptureAction and returns a PaymentResponse with the payment status.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Payment\\PaymentCaptureAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[AsController]\nclass PaymentController {\n    #[Route('/payment/pay')]\n    public function handle(PaymentCaptureAction $payment): ResponseInterface\n    {\n        // handle payment\n        \n        return PaymentResponse::paid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating HTTP Headers in Shopware App Scripts\nDESCRIPTION: Demonstrates how to set custom HTTP headers and modify existing ones using the 'response' script hook. It also shows how to conditionally set headers based on route names and scopes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do hook.setHeader('X-Frame-Options', 'SAMEORIGIN') %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if hook.getHeader('X-Frame-Options') == 'DENY' %}\n    {% do hook.setHeader('X-Frame-Options', 'SAMEORIGIN') %}\n{% endif %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if hook.routeName == 'frontend.detail.page' and hook.isInRouteScope('store-api') %}\n    {% do hook.setHeader('X-Frame-Options', 'SAMEORIGIN') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Initial Component Loading in main.ts\nDESCRIPTION: This snippet shows how to conditionally load main commands or view renderer based on the location in the Shopware admin panel. It uses the Meteor Admin SDK to determine the current location.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'regenerator-runtime/runtime';\nimport { location } from '@shopware-ag/meteor-admin-sdk';\n\nif (location.is(location.MAIN_HIDDEN)) {\n    // Execute the base commands\n    import('./base/mainCommands');\n} else {\n    // Render different views\n    import('./viewRenderer');\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Configuration with Shopware CLI\nDESCRIPTION: Command to push local configuration changes to a Shopware instance. This command displays the differences between local and remote configurations and prompts for confirmation before pushing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/project-config-sync.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project config push\n```\n\n----------------------------------------\n\nTITLE: Rendering Saveable Entity Status with Vue Shopware Components in HTML\nDESCRIPTION: This snippet demonstrates how to render a user interface for changing and saving an entity \"status\" using Shopware's Vue.js components. It includes a switch field bound to a data property and a save button that triggers the save handler when clicked. Dependencies include Shopware's component system and an underlying Vue.js framework. The v-model binds to a 'data.status' property and the process button relies on an 'onSave' method. Expected inputs are user interactions; outputs include updated UI state and data processed in subsequent handlers.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-09-17-the-best-practice-to-always-re-fetch-the-data-after-saving.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- we change the status by click to switch for example -->\\n<sw-switch-field\\n    v-model=\\\"data.status\\\"\\n    :label=\\\"$tc('sw-review.detail.labelStatus')\\\">\\n</sw-switch-field>\\n\\n<!-- we will save data with onSave method -->\\n<sw-button-process @click=\\\"onSave\\\">\\n    {{ $tc('global.default.save') }}\\n</sw-button-process>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Configuration in Shopware\nDESCRIPTION: JSON configuration for extending an existing theme in Shopware. It inherits from Storefront and SwagBasicExampleTheme, overrides some values, and adds new fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-inheritance-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleThemeExtend\",\n  .....\n  \"configInheritance\": [\n    \"@Storefront\",\n    \"@SwagBasicExampleTheme\"\n  ],\n  \"config\": {\n    \"fields\": {\n      \"sw-brand-icon\": {\n        \"type\": \"url\",\n        \"value\": \"/our-logo-holidays.png\",\n        \"editable\": true\n      },\n      \"sw-advent-calendar-background-color\": {\n        \"label\": {\n          \"en-GB\": \"Advent calendar background color\",\n          \"de-DE\": \"Adventskalender Hintergrundfarbe\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#399\",\n        \"editable\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters in a B2B API Controller Action (PHP)\nDESCRIPTION: This PHP snippet shows the updated `helloAction` method signature to accept the `name` parameter captured from the URL placeholder defined in the complex route. The parameter `$name` is injected before the `Request` object, according to the order specified in the route definition. The action then uses this parameter in its response.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/rest-api.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\npublic function helloAction(string $name, Request $request)\n{\n    return ['message' => 'hello ' . $name]; // will automatically be converted to JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Shopware 6 SCSS Variables in Component Styles\nDESCRIPTION: This SCSS code demonstrates how to import Shopware's SCSS variables and use them in custom component styles. It sets the text color to Shopware's brand color.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/add-custom-styles.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Import statement */\n@import \"~scss/variables\";\n\n.sw-hello-world {\n  /* Usage of variable */\n  color: $color-shopware-brand-500;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Bulk Entity Extension in Shopware 6 XML\nDESCRIPTION: XML service configuration to register the bulk entity extension in Shopware 6's service container with the required tag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Examples\\MyBulkExtension\">\n   <tag name=\"shopware.bulk.entity.extension\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as a Lock Store in Shopware\nDESCRIPTION: YAML configuration for setting up Redis as a remote lock store in Shopware. This configuration should be placed in config/packages/lock.yaml to enable Redis-based locking functionality for cluster environments.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/lock-store.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    lock: 'redis://host:port'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer Whitelist in Shopware 6.5\nDESCRIPTION: This code snippet shows how to configure the HTML sanitizer in z-shopware.yaml to whitelist the img tag along with specific attributes (src, alt, style) for use in the text editor.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/html-sanitizer.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    html_sanitizer:\n        sets:\n            - name: basic\n              tags: ['img']\n              attributes: \n                  img: ['src', 'alt', 'style']\n              options: \n                - ['HTML.Trusted', true]\n```\n\n----------------------------------------\n\nTITLE: Listing Disallowed Files and Folders in Shopware App Archives\nDESCRIPTION: Provides a list of example files and folders (e.g., `/__MACOSX`, `./tests`, `.git`, `composer.lock`, `webpack.config.js`) that are not permitted within the binary archive submitted for a Shopware app. Including these can lead to rejection during the automatic code review process. Developers should remove development artifacts, test files, and unnecessary configuration files before packaging.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-apps/index.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* /__MACOSX\n*./tests\n* .gitignore\n* .gitkeep\n* .gitlab-ci.yml\n* .DS_Store\n* .editorconfig\n* .git\n* .gitignore\n* .phar\n* .prettierrc\n* .shopware-extension.yml\n* .tar\n* .tar.gz\n* .zip\n* .zipignore\n* composer.lock\n* package.json\n* package-lock.json\n* phpunit.sh\n* phpdoc.dist.xml\n* phpstan.neon\n* phpstan.neon.dist\n* phpunitx.xml\n* shell.nix\n* Thumbs.db\n* webpack.config.js\n```\n\n----------------------------------------\n\nTITLE: Implementing the getQuery Method for a Custom Context Resolver in PHP\nDESCRIPTION: This PHP snippet shows a generic implementation for the `getQuery` method within a custom `AclContextResolver`. It uses Doctrine's QueryBuilder to construct a query that selects entries from the specified ACL table (`$aclTableName`) matching the provided context ID (`$contextId`). It utilizes `getNextPrefix` to generate unique table aliases, preventing conflicts in complex queries.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function getQuery(string $aclTableName, int $contextId, QueryBuilder $queryBuilder): AclQuery\n{\n    $mainPrefix = $this->getNextPrefix();\n\n    $queryBuilder\n        ->select($mainPrefix . '.*')\n        ->from($aclTableName, $mainPrefix)\n        ->where($mainPrefix . '.entity_id = :p_' . $mainPrefix)\n        ->setParameter('p_' . $mainPrefix, $contextId);\n\n    return (new AclQuery())->fromQueryBuilder($queryBuilder);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Entity Currency Calculation\nDESCRIPTION: Shows how to recalculate currency amounts for a single entity using the CurrencyCalculator.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    public function fetchOneById(int $id, CurrencyContext $currencyContext): CurrencyAware\n    {\n        [...] // load entity from Database\n\n        $this->currencyCalculator->recalculateAmount($entity, $currencyContext);\n\n        return $entity;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Rule Loading with Symfony Cache Stampede Protection in Shopware Core\nDESCRIPTION: This PHP code snippet demonstrates the simplified `CachedRuleLoader` class after integrating Symfony's `CacheInterface`. It leverages the `cache->get()` method, which automatically handles cache retrieval, regeneration via a callback on cache miss, and provides built-in cache stampede protection. This approach significantly reduces boilerplate code compared to the previous manual implementation and eliminates the need for explicit logging and exception handling for basic cache operations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-cache-stampede-protection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\Cart;\n\nuse Shopware\\Core\\Content\\Rule\\RuleCollection;\nuse Shopware\\Core\\Framework\\Context;\nuse Symfony\\Contracts\\Cache\\CacheInterface;\n\nclass CachedRuleLoader extends AbstractRuleLoader\n{\n    public const CACHE_KEY = 'cart_rules';\n\n    private AbstractRuleLoader $decorated;\n\n    private CacheInterface $cache;\n\n    public function __construct(AbstractRuleLoader $decorated, CacheInterface $cache)\n    {\n        $this->decorated = $decorated;\n        $this->cache = $cache;\n    }\n\n    public function getDecorated(): AbstractRuleLoader\n    {\n        return $this->decorated;\n    }\n\n    public function load(Context $context): RuleCollection\n    {\n        return $this->cache->get(self::CACHE_KEY, function () use ($context): RuleCollection {\n            return $this->decorated->load($context);\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Entity Allow-List Format in JSON\nDESCRIPTION: Defines the JSON structure for specifying which entities and fields are included in the data collection process. This format serves as an allow-list where only explicitly listed entities and their fields will be collected.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-03-collecting-entity-data.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entity_one\": [\n        \"fieldOne\",\n        \"fieldTwo\",\n        \"fieldThree\"\n    ],\n    \"entity_two\": [\n        \"fieldOne\",\n        \"fieldTwo\"\n    ],\n    \"entity_three\": [\n        \"fieldOne\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Memoized Service Without Reset - PHP\nDESCRIPTION: This PHP snippet illustrates a Service class (FooService) that holds memoized data in a private instance variable but lacks a method to reset its state between requests. No dependencies or explicit configuration are required in this example. The getData method checks if data is already loaded and otherwise fetches and stores it on demand. The limitation is that state persists between requests in long-running application servers without explicit reset.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-09-reset-class-state-during-requests.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass FooService\n{\n    private array $data = [];\n    \n    public function getData(): array\n    {\n        if ($this->data) {\n            return $this->data;\n        }\n        \n        return $this->data = $this->fetchDataFromSomewhere();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic SCSS Styles in Shopware 6 Plugin\nDESCRIPTION: Creates a base.scss file in the plugin's Storefront resources directory and adds a simple style to change the body background color.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-styling.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/base.scss\nbody {\n    background: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Purchase Gateway with Symfony Bundle\nDESCRIPTION: PHP code using the Shopware App Symfony Bundle to handle In-App Purchase Gateway requests. This example demonstrates filtering purchases based on existing user purchases.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/in-app-purchase/in-app-purchase-gateway.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Shopware\\App\\SDK\\Context\\Cart\\Error;\nuse Shopware\\App\\SDK\\Context\\Gateway\\InAppFeatures\\FilterAction;\nuse Shopware\\App\\SDK\\Framework\\Collection;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\CheckoutGatewayCommand;\nuse Shopware\\App\\SDK\\Gateway\\Checkout\\Command\\AddCartErrorCommand;\nuse Shopware\\App\\SDK\\Response\\GatewayResponse;\nuse Symfony\\Bridge\\PsrHttpMessage\\HttpFoundationFactoryInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route('/api/gateway', name: 'api.gateway.')]\nclass GatewayController extends AbstractController\n{\n    public function __construct(\n        private readonly HttpFoundationFactoryInterface $httpFoundationFactory\n    ) {\n    }\n\n    #[Route('/inAppPurchases', name: 'in-app-purchases', methods: ['POST'])]\n    public function inAppPurchases(FilterAction $action): Response\n    {\n        // the user already has the best premium purchase\n        // disallow him from buying the less premium ones\n        if ($action->source->inAppPurchases->has('my-in-app-purchase-gold')) {\n            $action->purchases->remove('my-in-app-purchase-bronze');\n            $action->purchases->remove('my-in-app-purchase-silver');\n        }\n\n        $response = GatewayResponse::createCheckoutGatewayResponse($commands);\n\n        return $this->httpFoundationFactory->createResponse($response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule-Based Cart Scripts - XML Config\nDESCRIPTION: XML configuration for adding a rule selector to the app's configuration, allowing merchants to choose when cart scripts are active.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<card>\n    <title>Basic configuration</title>\n    <title lang=\"de-DE\">Grundeinstellungen</title>\n    <name>TestCard</name>\n    <component name=\"sw-entity-single-select\">\n        <name>exampleRule</name>\n        <entity>rule</entity>\n        <label>Choose a rule that activates the cart script</label>\n    </component>\n</card>\n```\n\n----------------------------------------\n\nTITLE: Registering Twig Extension Service\nDESCRIPTION: XML configuration to register the custom Twig extension as a service in the Shopware DI container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-twig-function.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<services>\n    <service id=\"SwagBasicExample\\Twig\\SwagCreateMd5Hash\" public=\"true\">\n        <tag name=\"twig.extension\"/>\n    </service>\n</services>\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Twig Templates with Placeholders\nDESCRIPTION: Example of using translations with placeholder variables in a Twig template. The trans filter accepts an object of placeholder values that will be substituted in the translated text.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"product-detail-headline\">\n    {{ 'soldProducts' | trans({'%count%': 3, '%country%': 'Germany'}) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reloading Current Page Response with PHP SDK\nDESCRIPTION: PHP SDK example showing how to create a response that reloads the current page after an action button is clicked.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Response\\ActionButtonResponse;\n\nActionButtonResponse::reload();\n```\n\n----------------------------------------\n\nTITLE: Fetching Extension Store Page Information with Shopware CLI\nDESCRIPTION: Command to download all store images and metadata of an extension to a local directory, creating a .shopware-extension.yml file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/updating-store-page.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account producer extension info pull <path-to-extension-folder>\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Document Renderer Class for Multi-Format Support\nDESCRIPTION: Abstract class for document rendering that allows multiple format outputs (PDF and HTML). Includes implementation of the HtmlRenderer that extends this abstract class.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nabstract class AbstractDocumentTypeRenderer\n{\n    abstract public function render(RenderedDocument $document): string;\n}\n\nclass HtmlRenderer extends AbstractDocumentTypeRenderer\n{\n  public function render(RenderedDocument $document): string\n  {\n      $content = $this->documentTemplateRenderer->render(\n          ...$options\n      );\n      \n      $document->setContentType(self::FILE_CONTENT_TYPE);\n      $document->setFileExtension(self::FILE_EXTENSION);\n      $document->setContent($content);\n      \n      return $content;\n  }\n}\n\nclass PdfRenderer extends AbstractDocumentTypeRenderer {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check Context in PHP\nDESCRIPTION: Demonstrates implementation of health check contexts for monitoring system health. These checks are designed to be fast and non-blocking.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-08-02-system-health-check.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    protected function allowedSystemCheckExecutionContexts(): array\n    {\n        return \\Shopware\\Core\\Framework\\SystemCheck\\Check\\SystemCheckExecutionContext::cases();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Multi-Select Field in Shopware Theme\nDESCRIPTION: This snippet shows how to create a custom multi-select field in a Shopware theme configuration. It includes the theme metadata and defines a multi-select field for color selection with multiple options.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"Just another theme\",\n  \"author\": \"Just another author\",\n  \"description\": {\n    \"en-GB\": \"Just another description\",\n    \"de-DE\": \"Nur eine weitere Beschreibung\"\n  },\n  \"views\": [\n    \"@Storefront\",\n    \"@Plugins\",\n    \"@SelectExample\"\n  ],\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\",\n    \"@Storefront\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  \"script\": [\n    \"@Storefront\",\n    \"app/storefront/dist/storefront/js/select-example/select-example.js\"\n  ],\n  \"asset\": [\n    \"@Storefront\",\n    \"app/storefront/src/assets\"\n  ],\n  \"config\": {\n    \"blocks\": {\n      \"exampleBlock\": {\n        \"label\": {\n          \"en-GB\": \"Example block\",\n          \"de-DE\": \"Beispiel Block\"\n        }\n      }\n    },\n    \"sections\": {\n      \"exampleSection\": {\n        \"label\": {\n          \"en-GB\": \"Example section\",\n          \"de-DE\": \"Beispiel Sektion\"\n        }\n      }\n    },\n    \"fields\": {\n      \"my-multi-select-field\": {\n        \"label\": {\n          \"en-GB\": \"Select some colours\",\n          \"de-DE\": \"Wähle Farben aus\"\n        },\n        \"type\": \"text\",\n        \"editable\": true,\n        \"value\": [\n          \"green\",\n          \"blue\"\n        ],\n        \"custom\": {\n          \"componentName\": \"sw-multi-select\",\n          \"options\": [\n            {\n              \"value\": \"green\",\n              \"label\": {\n                \"en-GB\": \"green\",\n                \"de-DE\": \"grün\"\n              }\n            },\n            {\n              \"value\": \"red\",\n              \"label\": {\n                \"en-GB\": \"red\",\n                \"de-DE\": \"rot\"\n              }\n            },\n            {\n              \"value\": \"blue\",\n              \"label\": {\n                \"en-GB\": \"blue\",\n                \"de-DE\": \"blau\"\n              }\n            },\n            {\n              \"value\": \"yellow\",\n              \"label\": {\n                \"en-GB\": \"yellow\",\n                \"de-DE\": \"gelb\"\n              }\n            }\n          ]\n        },\n        \"block\": \"exampleBlock\",\n        \"section\": \"exampleSection\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Foo Entity with ID Field in PHP\nDESCRIPTION: Example of a basic entity definition for the Foo entity with an ID field. This serves as a starting point for adding associations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Foo;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\n\nclass FooDefinition extends EntityDefinition\n{\n    public const ENTITY_NAME = 'foo';\n\n    public function getEntityName(): string\n    {\n        return self::ENTITY_NAME;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            // Other fields here\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Multilingual Fields in Elasticsearch with Painless Script\nDESCRIPTION: Example of sorting products by name in descending order using a custom painless script that handles multilingual fields and language fallback when sorting.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-11-new-language-inheritance-mechanism-for-opensearch.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// GET /sw_product/_search\n{\n    \"query\": {\n      ...\n    },\n    \"sort\": [\n        {\n            \"_script\": {\n                \"type\": \"string\",\n                \"script\": {\n                    \"id\": \"translated_field_sorting\",\n                    \"params\": {\n                        \"field\": \"name\",\n                        \"languages\": [\n                            \"119317f1d1d1417c9e6fb0059c31a448\", // context language\n                            \"2fbb5fe2e29a4d70aa5854ce7ce3e20b\" // fallback language\n                        ]\n                    }\n                },\n                \"order\": \"DESC\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSON Response in Shopware App Scripts\nDESCRIPTION: Shows how to create a custom JSON response using the 'response' service in a custom endpoint script. This example sets a simple JSON object as the response.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({ 'foo': 'bar' }) %}\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Redis URL Format Examples for Shopware Cache Configuration\nDESCRIPTION: Examples of different Redis URL formats that can be used in the Shopware cache configuration. Demonstrates various connection options including port specification, authentication, database selection, timeout settings, and Unix socket connections.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/caches.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# With explicit port\nredis://localhost:6379\n\n# With authentication\nredis://auth@localhost:6379\n\n# With database\nredis://localhost:6379/1\n\n# With options\nredis://localhost:6379?timeout=1\n\n# With unix socket\n\nredis:///var/run/redis.sock\n\n# With unix socket and authentication\nredis://auth@/var/run/redis.sock\n```\n\n----------------------------------------\n\nTITLE: Ensuring Customer Login in an App Script (Twig)\nDESCRIPTION: Calls the `ensureLogin()` helper method on the `hook.context` (SalesChannelContext) object. This checks if a customer is currently logged in. If no customer is logged in, it throws a `CustomerNotLoggedInException`, effectively protecting the script endpoint and preventing further execution.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% do hook.context.ensureLogin() %}\n```\n\n----------------------------------------\n\nTITLE: Configuring OrbStack Routing for Shopware\nDESCRIPTION: YAML configuration for using OrbStack routing with Shopware, which allows accessing services without port mappings and running multiple Shopware instances simultaneously without port conflicts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n      ports: !override []\n      environment:\n          APP_URL: https://web.sw.orb.local\n          SYMFONY_TRUSTED_PROXIES: REMOTE_ADDR\n\n###> symfony/mailer ###\n  mailer:\n    image: axllent/mailpit\n    environment:\n      MP_SMTP_AUTH_ACCEPT_ANY: 1\n      MP_SMTP_AUTH_ALLOW_INSECURE: 1\n###< symfony/mailer ###\n```\n\n----------------------------------------\n\nTITLE: Injecting RateLimiter Service in API Route\nDESCRIPTION: Injecting the RateLimiter service into an API route class. This code shows the constructor setup for dependency injection of the rate limiter service in a store API route.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rate-limiter/add-rate-limiter-to-api-route.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/ExampleRoute.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\RateLimiter\\RateLimiter;\n...\n\n#[Route(defaults: ['_routeScope' => ['store-api']])]\nclass ExampleRoute extends AbstractExampleRoute\n{\n    private RateLimiter $rateLimiter;\n\n    public function __construct(RateLimiter $rateLimiter)\n    {\n        $this->rateLimiter = $rateLimiter;\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Path Builder Methods for Atomic Theme Compilation in PHP\nDESCRIPTION: New methods added to the AbstractThemePathBuilder class to support the seeding mechanism for atomic theme compilation. These methods allow for generating new theme paths based on a random seed and saving the seed for future use.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-01-10-atomic-theme-compilation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    public function generateNewPath(string $salesChannelId, string $themeId, string $seed): string\n    {\n    }\n\n    public function saveSeed(string $salesChannelId, string $themeId, string $seed): void\n    {\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Currency Calculations\nDESCRIPTION: Demonstrates how to recalculate currency amounts for multiple entities simultaneously.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    public function fetchList([...], CurrencyContext $currencyContext): array\n    {\n        [...] // load entities from Database\n\n        //recalculate with the current amount\n        $this->>currencyCalculator->recalculateAmounts($entities, $currencyContext);\n\n        return $entities;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal with Navigation and Ajax Panel Content in Twig\nDESCRIPTION: This example demonstrates how to create a modal with navigation and ajax panel content. It extends the base modal template, enables navigation, and includes an ajax panel for dynamic content loading.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/modal-component.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@SwagB2bPlatform/storefront/_partials/_b2bmodal/_modal.html.twig' %}\n\n{% set modalSettings = {\n    navigation: true\n} %}\n\n{% block b2b_modal_base_navigation_header %}\n    Modal Title\n{% endblock %}\n\n{% block b2b_modal_base_navigation_entries %}\n    <li>\n        <a class=\"b2b--tab-link\">\n            Navigation Link\n        </a>\n    </li>\n{% endblock %}\n\n{% block b2b_modal_base_content_inner %}\n    <div class=\"b2b--ajax-panel\" data-id=\"example-panel\" data-url=\"{url}\"></div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating Migration with InheritanceUpdaterTrait in PHP\nDESCRIPTION: Migration class that uses the InheritanceUpdaterTrait to properly add inheritance columns to an existing table and update inheritance for specific fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Migration/Migration1615363012AddInheritanceColumnToExample.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\InheritanceUpdaterTrait;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\n\nclass Migration1615363012AddInheritanceColumnToExample extends MigrationStep\n{\n    use InheritanceUpdaterTrait;\n\n    public function getCreationTimestamp(): int\n    {\n        return 1615363012;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $query = <<<SQL\n            ALTER TABLE `swag_example` \n                ADD `parent_id` BINARY(16) NULL,\n                MODIFY `description` VARCHAR(255) NULL;\n        SQL;\n        \n        $connection->executeStatement($query);\n        $this->updateInheritance($connection, 'swag_example', 'example_field');\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Navigation Menu Entries in Shopware\nDESCRIPTION: Demonstrates how to protect navigation menu entries by adding privilege requirements.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nModule.register('your-plugin-module', {\n    navigation: [{\n        id: 'your-plugin',\n        ...,\n        privilege: 'your_key.your_role' // e.g. product.viewer\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Filter Computed Property\nDESCRIPTION: This JavaScript snippet adds a computed property to the preview component that provides access to Shopware's asset filter, allowing the template to correctly reference and display image assets.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/preview/index.js\ncomputed: {\n    assetFilter() {\n        return Shopware.Filter.getByName('asset');\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Platform Adapter Installation and Configuration\nDESCRIPTION: Instructions for installing the Google Cloud Storage adapter package and configuring Shopware 6 to use GCP for file storage, including bucket, project ID, and key file settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-google-cloud-storage\n```\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    filesystem:\n      {ADAPTER_NAME}:\n        type: \"google-storage\"\n        url: \"https://storage.googleapis.com/{your-public-bucket-name}\"\n        visibility: \"private\" # Default is \"public\", can be set only on shopware.filesystem.private\n        config:\n            bucket: \"{your-public-bucket-name}\"\n            projectId: \"{your-project-id}\"\n            keyFilePath: \"{path-to-your-keyfile}\"\n\n```\n\n----------------------------------------\n\nTITLE: Resolving Shop and Module Context in PHP\nDESCRIPTION: PHP code snippet showing how to resolve the shop and module context using the App PHP SDK.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-modules.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// injected or build by yourself\n$shopResolver = new ShopResolver($repository);\n$contextResolver = new ContextResolver();\n\n$shop = $shopResolver->resolveShop($serverRequest);\n$module = $contextResolver->assembleModule($serverRequest, $shop);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom Events in Storefront JavaScript\nDESCRIPTION: Demonstrates how to subscribe to a custom event in Shopware 6 Storefront JavaScript. This allows parts of the application to react to events published by plugins or other components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.$emitter.subscribe('someEvent', (additionalData) => {\n    // Do stuff\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Product Translation Event Listener\nDESCRIPTION: Full implementation of the ProductUpdatedListener class that handles product translation events including all necessary dependencies and error handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace App\\EventListener;\n\nuse Shopware\\App\\SDK\\HttpClient\\ClientFactory;\nuse Symfony\\Component\\EventDispatcher\\Attribute\\AsEventListener;\nuse Shopware\\App\\SDK\\Context\\Webhook\\WebhookAction;\nuse Psr\\Log\\LoggerInterface;\n\n#[AsEventListener(event: 'webhook.product.written')]\nclass ProductUpdatedListener\n{\n    public function __construct(private readonly ClientFactory $clientFactory, private readonly LoggerInterface $logger)\n    {\n    }\n\n    public function __invoke(WebhookAction $action): void\n    {\n        $client = $this->clientFactory->createSimpleClient($action->shop);\n\n        $updatedFields = $action->payload[0]['updatedFields'];\n        $id = $action->payload[0]['primaryKey'];\n\n        if (!in_array('description', $updatedFields)) {\n            return;\n        }\n\n        $response = $client->post(\n            sprintf('%s/api/search/product', $action->shop->getShopUrl()),\n            [\n                'ids' => [$id],\n                'associations' => [\n                    'translations' => [\n                        'associations' => [\n                            'language' => [\n                                'associations' => [\n                                    'locale' => []\n                                ]\n                            ],\n                        ]\n                    ],\n                ]\n            ]\n        );\n        if (!$response->ok()) {\n            $this->logger->error('Could not fetch product', ['response' => $response->json()]);\n            return;\n        }\n\n        $product = $response->json()['data'][0];\n        $description = '';\n        $name = '';\n        foreach ($product['translations'] as $translation) {\n            if ($translation['language']['locale']['code'] === 'en-GB') {\n                $description = $translation['description'];\n                $name = $translation['name'];\n            }\n        }\n\n        $lastHash = $product['customFields']['translator-last-translation-hash'] ?? '';\n        if (md5($description) === $lastHash) {\n            return;\n        }\n\n        $response = $client->patch(sprintf('%s/api/product/%s', $action->shop->getShopUrl(), $id), [\n            'translations' => [\n                'en-GB' => [\n                    'name' => $name,\n                    'description' => 'Test English'\n                    //'description' => $this->translate($description)\n                ],\n            ],\n            'customFields' => [\n                'translator-last-translation-hash' => md5($description)\n            ]\n        ]);\n\n        if (!$response->ok()) {\n            $this->logger->error('Could not update product', ['response' => $response->json()]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded URLs in Shopware Sitemap\nDESCRIPTION: This YAML configuration demonstrates how to exclude specific URLs from the sitemap in Shopware. It uses the 'shopware.sitemap.excluded_urls' setting to define exclusions based on sales channel ID, resource class, and entity identifier.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/remove-sitemap-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    sitemap:\n        excluded_urls:\n            -   salesChannelId: '98432def39fc4624b33213a56b8c944d'\n                resource: 'Shopware\\Core\\Content\\Product\\ProductEntity'\n                identifier: 'd20e4d60e35e4afdb795c767eee08fec'\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Service Class in PHP\nDESCRIPTION: Defines an abstract class for the service with an abstract getDecorated() method and an abstract doSomething() method. This serves as the base for the actual service implementation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/adjusting-service.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nabstract class AbstractExampleService\n{\n    abstract public function getDecorated(): AbstractExampleService; \n\n    abstract public function doSomething(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Cypress Assertions for Element State Verification\nDESCRIPTION: Demonstrates how to write assertions in Cypress tests using BDD style syntax to verify element states and properties in Shopware's UI.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('test something', () => {\n    ...\n    cy.get('.sw-loader')\n        .should('not.exist')\n        .should('be.visible')\n        .should('not.have.css', 'display', 'none');\n    cy.get('div')\n        .should(($div) => {\n            expect($div).to.have.length(1)\n        });\n    ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering a Migration Writer Service in XML\nDESCRIPTION: This XML snippet defines a Symfony service for a custom `ProductWriter`. It sets `AbstractWriter` as its parent, injects the `EntityWriter` and `ProductDefinition` services as arguments, and tags the service with `shopware.migration.writer` so it's recognized by the Shopware Migration Assistant.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/writer.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationAssistant\\Migration\\Writer\\ProductWriter\"\n         parent=\"SwagMigrationAssistant\\Migration\\Writer\\AbstractWriter\">\n    <argument type=\"service\" id=\"Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter\"/>\n    <argument type=\"service\" id=\"Shopware\\Core\\Content\\Product\\ProductDefinition\"/>\n    <tag name=\"shopware.migration.writer\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: HTML Example for Button Selector\nDESCRIPTION: Provides an HTML example of a button element with multiple classes, including a framework-specific class (`btn-primary`) and a more specific, recommended class (`btn-buy`) for E2E test selection. This illustrates the structure targeted by the accompanying JavaScript selector examples.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"btn btn-primary btn-buy\">Add to cart</button>\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Shopware object in browser console\nDESCRIPTION: Shows how to log the Shopware object to the browser console for inspection. This allows developers to explore the object's properties and methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/the-shopware-object.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// run this command in the dev-tools of your browser\nconsole.log(Shopware);\n```\n\n----------------------------------------\n\nTITLE: Installing Web Profiler for Shopware Development Environment\nDESCRIPTION: Command to install the profiler bundle to fix APP_ENV=dev issues in Shopware versions prior to 6.4.17.0.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev profiler\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Twig Templates without Placeholders\nDESCRIPTION: Example of using translations in a Twig template without placeholders using the trans filter, which renders the translated text for the given snippet key.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"product-detail-headline\">\n    {{ 'header.example' | trans }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checkout Gateway App Request Payload Structure\nDESCRIPTION: JSON structure defining the payload sent to app servers containing sales channel context, cart details, and available payment and shipping methods.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-04-01-checkout-gateway.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"salesChannelContext\": \"SalesChannelContextObject\",\n    \"cart\": \"CartObject\",\n    \"paymentMethods\": [\n        \"payment-method-technical-name-1\",\n        \"payment-method-technical-name-2\",\n        \"payment-method-technical-name-3\"\n    ],\n    \"shippingMethods\": [\n        \"shipping-method-technical-name-1\",\n        \"shipping-method-technical-name-2\",\n        \"shipping-method-technical-name-3\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Plugin Config Field as SCSS Variable in config.xml\nDESCRIPTION: Configures an input field in the plugin's config.xml to be exposed as an SCSS variable. The <css> tag specifies the variable name that will be used in the SCSS files. The configuration includes labels for different languages and a default value.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<input-field>\n    <name>sassPluginHeaderBgColor</name>\n    <label>Header backgroundcolor</label>\n    <label lang=\"de-DE\">Kopfzeile Hintergrundfarbe</label>\n    <css>sass-plugin-header-bg-color</css>\n    <defaultValue>#eee</defaultValue>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Domains for a Sales Channel in Shopware\nDESCRIPTION: This code snippet demonstrates how to configure multiple domains for a single sales channel in Shopware. It shows examples of domain setups for different locales, languages, and currencies.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/catalog/sales-channels.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [https://example.com/](https://example.com/)\n  * Locale en-GB, British English, Pounds\n* [https://example.com/de](https://example.com/de)\n  * Locale de-DE, German, Euro\n* [https://example.es/](https://example.es/)\n  * Locale es-ES, Spanish, Euro\n```\n\n----------------------------------------\n\nTITLE: Enabling zstd Cache Compression\nDESCRIPTION: Configuration to enable zstd compression for cache data storage.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  cache:\n    cache_compression: true\n    cache_compression_method: 'zstd'\n```\n\n----------------------------------------\n\nTITLE: Step 2: Converting String Parameters to Enum Instances\nDESCRIPTION: Implementation that handles string values by converting them to enum instances, allowing both API styles to work simultaneously.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-16-php-enums.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Indexer\n{\n    public const PARTIAL = 'partial';\n    public const FULL = 'full';\n\n    public function product(int $id, IndexMethod|string $method): void\n    {\n        if (is_string($method)) {\n            $method = match ($method) {\n                'partial' => IndexMethod::PARTIAL,  \n                'full' => IndexMethod::FULL,\n                default => throw new \\InvalidArgumentException()\n            };\n        }\n\n        match ($method) {\n            IndexMethod::PARTIAL => $this->partial($id),\n            IndexMethod::FULL => $this->full($id)\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ACL Template Integration in Twig\nDESCRIPTION: Example of integrating ACL checks in Twig templates using the b2b_acl function.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ url(\"frontend.b2b.\" ~ page.route ~ \".assign\") }}\" class=\"{{ b2b_acl('b2broleaddress', 'assign') }}\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Sanitizer in Vue Components\nDESCRIPTION: Demonstrates how to access the Sanitizer Helper within Vue components using the Vue prototype.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/the-sanitizer-helper.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sanitizer = this.$sanitizer;\nconst sanitize = this.$sanitize;\n```\n\n----------------------------------------\n\nTITLE: Synchronous Component Registration\nDESCRIPTION: Shows how to register a component synchronously using Shopware.Component.register with component configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('hello-world', {\n    // Configuration here\n});\n```\n\n----------------------------------------\n\nTITLE: Theme Template Views Configuration in Shopware 6\nDESCRIPTION: Configuration of template inheritance in the views section of theme.json, which controls how templates are loaded and overridden.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"views\": [\n     \"@Storefront\",\n     \"@Plugins\",\n     \"@SwagBasicExampleTheme\"\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PHP Object Instance Type Before Method Call (Interface)\nDESCRIPTION: Demonstrates the necessity of checking if a service object implements the newer version of an interface (`DataValidationFactoryInterfaceV2`) using `instanceof` before calling the newly added method (`update`). This highlights potential runtime errors if decorators in a chain haven't updated to the new interface.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php\nif ($service instanceof DataValidationFactoryInterfaceV2) {\n    $service->update(..)\n} else {\n    $service->create(..)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ElasticsearchProductDefinition Service Decorator in XML\nDESCRIPTION: XML service definition for decorating the default ElasticsearchProductDefinition. This registers the custom implementation that will extend the search capabilities.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-add-more-fields-to-product-search.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"YourPluginNameSpace\\ElasticsearchProductDefinitionDecorator\" decorates=\"Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition\">\n    <argument type=\"service\" id=\".inner\"/>\n    <argument type=\"service\" id=\"Shopware\\Commercial\\AdvancedSearch\\Domain\\Search\\SearchLogic\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Media Repository Function in Twig\nDESCRIPTION: Defines a reusable Twig macro for fetching media entities by ID in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n// Resources/scripts/include/media-repository.twig\n{% macro getById(mediaId) %}\n    {% set criteria = {\n        'ids': [ mediaId ]\n    } %}\n    \n     {% return services.repository.search('media', criteria).first %}\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Pagination Implementation in Shopware 6\nDESCRIPTION: Demonstrates how to implement pagination using setOffset and setLimit methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('name', 'Example name'));\n    $criteria->setOffset(1);\n    $criteria->setLimit(1);\n\n    $product = $this->productRepository->search($criteria, $context)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Deployer Code Update Task\nDESCRIPTION: PHP task definition for updating code during deployment with exclusion rules.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ntask('deploy:update_code')->setCallback(static function () {\n    upload('.', '{{release_path}}', [\n        'options' => [\n            '--exclude=.git',\n            '--exclude=deploy.php',\n            '--exclude=node_modules',\n        ],\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutGatewayInterface in PHP\nDESCRIPTION: Core interface definition for the Checkout Gateway feature that processes checkout requests and returns appropriate responses based on cart and sales channel context.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-04-01-checkout-gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\Gateway;\n\nuse Shopware\\Core\\Checkout\\Gateway\\Command\\Struct\\CheckoutGatewayPayloadStruct;\nuse Shopware\\Core\\Framework\\Log\\Package;\n\n#[Package('checkout')]\ninterface CheckoutGatewayInterface\n{\n    /**\n    * The input struct consists of the cart, sales channel context and currently available payment and shipping methods.\n    */\n    public function process(CheckoutGatewayPayloadStruct): CheckoutGatewayResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the RedisCartPersister Class in PHP\nDESCRIPTION: This PHP code defines the `RedisCartPersister` class, which extends `AbstractCartPersister`. It outlines the structure, including properties for the Redis client, event dispatcher, and compression flag, along with method signatures for loading, saving, deleting, and replacing carts using Redis. This class provides an alternative persistence mechanism for shopping carts to improve performance.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-redis-cart-persister.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\Cart;\n\nclass RedisCartPersister extends AbstractCartPersister\n{\n    /**\n     * @var \\Redis|\\RedisCluster\n     */\n    private $redis;\n\n    private EventDispatcherInterface $eventDispatcher;\n\n    private bool $compress;\n\n    public function load(string $token, SalesChannelContext $context): Cart {}\n\n    public function save(Cart $cart, SalesChannelContext $context): void {}\n\n    public function delete(string $token, SalesChannelContext $context): void {}\n\n    public function replace(string $oldToken, string $newToken, SalesChannelContext $context): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Staging Environment with Apache Configuration\nDESCRIPTION: Apache configuration for protecting the staging environment from unauthorized access using .htaccess file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/staging.md#2025-04-22_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n# <project-root>/public/.htaccess\nSetEnvIf Request_URI /api noauth=1\n<RequireAny>\nRequire env noauth\nRequire env REDIRECT_noauth\nRequire valid-user\n</RequireAny>\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Index Mapping (New Structure)\nDESCRIPTION: Example of the new multilingual Elasticsearch mapping structure that uses a single index with nested language fields. This approach reduces resource overhead and enables language fallback mechanisms.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-11-new-language-inheritance-mechanism-for-opensearch.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// PUT /sw_product/_mapping\n{\n    \"mappings\": {\n        \"properties\": {\n            \"productNumber\": {\n                \"type\": \"keyword\"\n            },\n            \"name\": {\n                \"properties\": {\n                    \"en\": {\n                        \"type\": \"keyword\",\n                        \"fields\": {\n                            \"text\": {\n                                \"type\": \"text\",\n                                \"analyzer\": \"sw_english_analyzer\"\n                            },\n                            \"ngram\": {\n                                \"type\": \"text\",\n                                \"analyzer\": \"sw_ngram_analyzer\"\n                            }\n                        }\n                    },\n                    \"de\": {\n                        \"type\": \"keyword\",\n                        \"fields\": {\n                            \"text\": {\n                                \"type\": \"text\",\n                                \"analyzer\": \"sw_german_analyzer\"\n                            },\n                            \"ngram\": {\n                                \"type\": \"text\",\n                                \"analyzer\": \"sw_ngram_analyzer\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Constant for Product Detail CMS Page (Shopware, Markdown/PHP Reference)\nDESCRIPTION: This snippet references the Shopware constant used to identify the default CMS page for product detail views. If this constant is set, product.cmsPageId will be null, triggering the default CMS page logic. The snippet depends on the definition of \\Shopware\\Core\\Defaults::CMS_PRODUCT_DETAIL_PAGE. Inputs are controlled by the entity property, and the output is the default CMS page being assigned when conditions are met.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-04-06-add-default-cms-layouts-to-products-and-categories.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n\\Shopware\\Core\\Defaults::CMS_PRODUCT_DETAIL_PAGE\n```\n\n----------------------------------------\n\nTITLE: Adding New Language to Elasticsearch Mapping\nDESCRIPTION: Example of updating the Elasticsearch mapping to include a new language. This demonstrates how the multilingual index can be extended without recreating the entire index.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-11-new-language-inheritance-mechanism-for-opensearch.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// PUT /sw_product/_mapping\n{\n    \"properties\": {\n        \"name\": {\n            \"properties\": {\n                \"<new_language_id>\": {\n                    \"type\": \"keyword\",\n                    \"fields\": {\n                        \"text\": {\n                            \"type\": \"text\",\n                            \"analyzer\": \"<new_language_stop_words_analyzer>\"\n                        },\n                        \"ngram\": {\n                            \"type\": \"text\",\n                            \"analyzer\": \"sw_ngram_analyzer\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an EnumField Value in Shopware Entity\nDESCRIPTION: PHP code snippet showing how to set an EnumField value on a Shopware entity using the defined enum.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/enum-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$batchOrder = new BatchOrderEntity();\n$batchOrder->setPaymentMethod(PaymentMethod::PAYPAL);\n```\n\n----------------------------------------\n\nTITLE: Asset Usage in Template\nDESCRIPTION: HTML template example showing how to use the asset filter to display images.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/using-assets.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img :src=\"assetFilter('/<plugin root>/static/your-image.png')\">\n```\n\n----------------------------------------\n\nTITLE: Example Media ID Query Implementation in PHP\nDESCRIPTION: Implementation example of getUsedMediaIds method for an image slider feature, demonstrating how to query JSON data for media references using MySQL JSON functions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/prevent-deletion-of-media-files-referenced-in-your-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprivate function getUsedMediaIds(array $idsToBeDeleted): array\n{\n    $sql = <<<SQL\n    SELECT JSON_EXTRACT(slider_config, \"$.images\") as mediaIds FROM my_slider_table\n    WHERE JSON_OVERLAPS(\n        JSON_EXTRACT(slider_config, \"$.images\"),\n        JSON_ARRAY(?)\n    );\n    SQL;\n\n    $usedMediaIds = $this->connection->fetchFirstColumn(\n        $sql,\n        [$event->getUnusedIds()],\n        [ArrayParameterType::STRING]\n    );\n\n    return array_map(fn (string $ids) => json_decode($ids, true, \\JSON_THROW_ON_ERROR), $usedMediaIds);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Extensions in Templates\nDESCRIPTION: Example showing how to access different types of page extensions in Storefront templates\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/data-loading.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# via addExtension #}\n{% for product in page.getExtension('swagCollection') %}\n    ...\n{% endfor %}\n\n{% set product = page.getExtension('swagEntity') %}\n\n{# via addArrayExtension #}\n{% for product in page.getExtension('swagArrayExtension').collection %}\n    ...\n{% endfor %}\n\n{% set product = page.getExtension('swagArrayExtension').entity %}\n\n<h1>{{ page.getExtension('swagArrayExtension').scalar }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Logging Service Interface Definition in Shopware\nDESCRIPTION: Interface definition for the LoggingService, specifying methods for adding log entries and saving logs to the system.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\ninterface LoggingServiceInterface\n{\n    public function addLogEntry(LogEntryInterface $logEntry): void;\n\n    public function saveLogging(Context $context): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prefix Filter in Shopware\nDESCRIPTION: Demonstrates Prefix filter for matching string beginnings. Filters items where name starts with 'Lightweight'.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(new PrefixFilter('name', 'Lightweight'));\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": [\n        {\n            \"type\": \"prefix\",\n            \"field\": \"name\",\n            \"value\": \"Lightweight\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenAPI Schema for Shopware APIs\nDESCRIPTION: This snippet shows the endpoint for directly fetching the OpenAPI schema definition for both Admin API and Store API, without using a UI. The path is relative and requires choosing between 'api' or 'store-api'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/generated-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/(api|store-api)/_info/openapi3.json\n```\n\n----------------------------------------\n\nTITLE: Removing Fixed PHP Platform in composer.json\nDESCRIPTION: Diff showing how to remove the fixed PHP platform from composer.json when migrating to the new project template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"config\": {\n    \"optimize-autoloader\": true,\n-    \"platform\": {\n-        \"php\": \"7.4.3\"\n-    },\n    \"sort-packages\": true,\n    \"allow-plugins\": {\n        \"composer/package-versions-deprecated\": true\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Checking Extensions with Extension Verifier\nDESCRIPTION: Command to run checks on an extension. It can be configured to check against the lowest or highest compatible Shopware version.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest check /ext --check-against lowest\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest check /ext --check-against highest\n```\n\n----------------------------------------\n\nTITLE: Defining the Payment Refund Handler Interface in PHP\nDESCRIPTION: This PHP interface definition, `PaymentRefundHandlerInterface`, specifies the contract for payment handlers that support the new refund functionality. It requires implementing a `refund` method which takes the `orderRefundId` and the Shopware `Context` as arguments and is expected to process the refund logic for the specific payment provider. It returns void, implying the refund operation is handled asynchronously or its success/failure is managed through state changes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-10-13-refund-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\npublic function refund(string $orderRefundId, Context $context): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Properties Using Promoted Properties - PHP\nDESCRIPTION: Showcases the use of constructor property promotion introduced in PHP 8.0, allowing private properties to be both defined and initialized directly in the constructor signature, reducing boilerplate and improving maintainability. Requires PHP 8.0+.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Point {\n    public function __construct(private int $x, private int $y)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading an Extension in Shopware CLI\nDESCRIPTION: This command uploads an extension to the Shopware instance using the Shopware CLI. Replace <path-to-extension-zip> with the actual path to the extension zip file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension upload <path-to-extension-zip>\n```\n\n----------------------------------------\n\nTITLE: Registering ProductConverter Service in Shopware\nDESCRIPTION: This snippet shows how to register a ProductConverter service in the Shopware service container. It extends the ShopwareConverter class and injects the MediaFileService.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationAssistant\\Profile\\Shopware\\Converter\\ProductConverter\"\n         parent=\"SwagMigrationAssistant\\Profile\\Shopware\\Converter\\ShopwareConverter\" abstract=\"true\">\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Media\\MediaFileService\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Removing Properties from Blacklist in Shopware Administration\nDESCRIPTION: This snippet demonstrates how to remove properties from both the general and entity-specific blacklists in the Shopware Administration. It overrides the 'sw-product-stream-field-select' component to enable 'createdAt' and category 'path' properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/modify-blacklist-for-dynamic-product-groups.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Component } = Shopware;\n\nComponent.override('sw-product-stream-field-select', {\n    computed: {\n        options() {\n            this.conditionDataProviderService.removeFromGeneralBlacklist(['createdAt']);\n            this.conditionDataProviderService.removeFromEntityBlacklist('category', ['path']);\n            return this.$super('options');\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Reusable Scripts in Shopware App Scripts\nDESCRIPTION: Demonstrates how to structure and include reusable scripts in Shopware App Scripts using Twig macros.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n└── DemoApp\n    ├── Resources\n    │   └── scripts                         \n    │       ├── include    \n    │       │   └── media-repository.twig         // this script may be included into the other scripts\n    │       ├── cart\n    │       │   ├── first-cart-script.twig\n    │       └── ...\n    └── manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Reference Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists various field types in Shopware, their descriptions, parent classes, and storage awareness. It includes a wide range of fields from basic types like BoolField to specialized types like CartPriceField.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                         | Description                  | Extends                   | StorageAware |\n|:-----------------------------|:-----------------------------|:--------------------------|:-------------|\n| AssociationField             | Stores a association value   | Field                     |              |\n| AutoIncrementField           | Stores an integer value      | IntField                  |              |\n| BlobField                    | Stores a blob value          | Field                     | x            |\n| BoolField                    | Stores a bool value          | Field                     | x            |\n| BreadcrumbField              | Stores a JSON value          | JsonField                 |              |\n| CalculatedPriceField         | Stores a JSON value          | JsonField                 |              |\n| CartPriceField               | Stores a JSON value          | JsonField                 |              |\n| CashRoundingConfigField      | Stores a JSON value          | JsonField                 |              |\n| ChildCountField              | Stores an integer value      | IntField                  |              |\n| ChildrenAssociationField     | Stores a association value   | OneToManyAssociationField |              |\n| ConfigJsonField              | Stores a JSON value          | JsonField                 |              |\n| CreatedAtField               | Stores a DateTime value      | DateTimeField             |              |\n| CreatedByField               | Stores a foreign key value   | FkField                   |              |\n| CronIntervalField            | Stores a croninterval value  | Field                     | x            |\n| DateField                    | Stores a date value          | Field                     | x            |\n| DateIntervalField            | Stores a dateinterval value  | Field                     | x            |\n| DateTimeField                | Stores a datetime value      | Field                     | x            |\n| EmailField                   | Stores a string value        | StringField               |              |\n| [EnumField](enum-field)      | Stores a enum value          | Field                     | x            |\n| Field                        | Stores a  value              | Struct                    |              |\n| FkField                      | Stores a fk value            | Field                     | x            |\n| FloatField                   | Stores a float value         | Field                     | x            |\n| IdField                      | Stores a id value            | Field                     | x            |\n| IntField                     | Stores a int value           | Field                     | x            |\n| JsonField                    | Stores a json value          | Field                     | x            |\n| ListField                    | Stores a JSON value          | JsonField                 |              |\n| LockedField                  | Stores a boolean value       | BoolField                 |              |\n| LongTextField                | Stores a longtext value      | Field                     | x            |\n| ManyToManyAssociationField   | Stores a association value   | AssociationField          |              |\n| ManyToManyIdField            | Stores a manytomanyid value  | ListField                 |              |\n| ManyToOneAssociationField    | Stores a association value   | AssociationField          |              |\n| ObjectField                  | Stores a JSON value          | JsonField                 |              |\n| OneToManyAssociationField    | Stores a association value   | AssociationField          |              |\n| OneToOneAssociationField     | Stores a association value   | AssociationField          |              |\n| ParentAssociationField       | Stores a association value   | ManyToOneAssociationField |              |\n| ParentFkField                | Stores a foreign key value   | FkField                   |              |\n| PasswordField                | Stores a password value      | Field                     | x            |\n| PriceDefinitionField         | Stores a JSON value          | JsonField                 |              |\n| PriceField                   | Stores a JSON value          | JsonField                 |              |\n| ReferenceVersionField        | Stores a foreign key value   | FkField                   |              |\n| RemoteAddressField           | Stores a remoteaddress value | Field                     | x            |\n| SerializedField              | Stores a serialized value    | Field                     | x            |\n| StateMachineStateField       | Stores a foreign key value   | FkField                   |              |\n| StringField                  | Stores a string value        | Field                     | x            |\n| TaxFreeConfigField           | Stores a JSON value          | JsonField                 |              |\n| TimeZoneField                | Stores a string value        | StringField               |              |\n| TranslatedField              | Stores a translated value    | Field                     |              |\n| TranslationsAssociationField | Stores a association value   | OneToManyAssociationField |              |\n| TreeBreadcrumbField          | Stores a JSON value          | JsonField                 |              |\n| TreeLevelField               | Stores an integer value      | IntField                  |              |\n| TreePathField                | Stores a treepath value      | LongTextField             |              |\n| UpdatedAtField               | Stores a DateTime value      | DateTimeField             |              |\n| UpdatedByField               | Stores a foreign key value   | FkField                   |              |\n| VariantListingConfigField    | Stores a JSON value          | JsonField                 |              |\n| VersionDataPayloadField      | Stores a JSON value          | JsonField                 |              |\n| VersionField                 | Stores a foreign key value   | FkField                   |              |\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Cache Invalidation in Shopware PHP\nDESCRIPTION: This PHP code snippet shows how to selectively remove specific event listeners from the CacheInvalidationSubscriber in Shopware. It uses the RemoveEventListener class to target and remove particular event-method pairs, allowing for more granular control over cache invalidation behavior.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/custom-cache-invalidation.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyProject;\n\nuse Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent;\nuse Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent;\nuse Shopware\\Core\\Framework\\DependencyInjection\\CompilerPass\\RemoveEventListener;\nuse Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber;\n\nclass TweakCacheInvalidation implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        RemoveEventListener::remove(\n            $container,\n            CacheInvalidationSubscriber::class,\n            [\n                [ProductIndexerEvent::class, 'invalidateListings'],\n                [ProductNoLongerAvailableEvent::class, 'invalidateListings'],\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Overriding an Extendable Component\nDESCRIPTION: Demonstrates how to create an extendable component and then override it using the Composition API extension system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineComponent, reactive } from 'vue';\n\n// Original component\nconst originalComponent = defineComponent({\n    template: `\n        <div>\n            <h1>{{ message }}</h1>\n            <div>\n                <mt-button @click=\"increment\">Increment</mt-button>\n\n                <p>\n                    {{ countMessage }}\n                </p>\n\n                <p>\n                    Notifications are currently: {{ showNotification ? 'enabled' : 'disabled' }}\n                </p>\n            </div>\n        </div>\n    `,\n    props: {\n        showNotification: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup: (props, context) => Shopware.Component.createExtendableSetup({\n        props,\n        context,\n        name: 'originalComponent',\n    }, () => {\n        const count = ref(0);\n        const message = 'Hello from Shopware!';\n        const countMessage = computed(() => `The current count is: ${count.value}`);\n\n        const increment = () => {\n            count.value++;\n        };\n\n        const privateExample = ref('This is a private property');\n\n        return {\n            public: {\n                count,\n                message,\n                countMessage,\n                increment,\n            },\n            private: {\n                privateExample,\n            }\n        };            \n    }),\n});\n\n// Overriding the component with a plugin\nShopware.Component.overrideComponentSetup()('originalComponent', (previousState, props) => { \n    const newMessage = 'Hello from the plugin!';\n    const newCountMessage = computed(() => `The new, amazing count is: ${previousState.count.value}`);\n    const newIncrement = () => {\n        previousState.increment();\n        \n        if (props.showNotification) {\n            Shopware.ServiceContainer.get('notification').dispatch({\n                title: 'Incremented!',\n                message: `The count has been incremented by the user to ${previousState.count.value}!`,\n                variant: 'success',\n            });\n        }\n    };\n\n    return {\n        message: newMessage,\n        countMessage: newCountMessage,\n        increment: newIncrement,\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Conceptual SQL for Join Filter\nDESCRIPTION: This SQL query illustrates the concept behind the join filter. It selects products that *do* have specific properties ('red' or 'yellow' for color AND 'XL' or 'L' for size) by using LEFT JOINs for each property group and checking for NOT NULL in the WHERE clause, ensuring matching associated properties exist for both groups.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-19-dal-join-filter.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT product.id\n\nFROM product\n    LEFT JOIN property_properties color_filter\n        ON color_filter.product_id = product.id\n        AND color_filter.id IN (\"red\", \"yellow\")\n\n    LEFT JOIN property_properties size_filter\n        ON size_filter.product_id = product.id\n        AND size_filter.id IN (\"XL\", \"L\")\n\nWHERE size_filter.product_id IS NOT NULL\nAND color_filter.product_id IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifecycle Webhooks in Shopware Manifest XML\nDESCRIPTION: XML configuration that defines webhook endpoints for app lifecycle events including activation, deactivation, and deletion. These webhooks are registered in the manifest.xml file of the Shopware app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/02-lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<webhooks>\n    <webhook name=\"appActivate\" url=\"https://app-server.com/app/activate\" event=\"app.activated\"/>\n    <webhook name=\"appDeactivated\" url=\"https://app-server.com/app/deactivate\" event=\"app.deactivated\"/>\n    <webhook name=\"appDelete\" url=\"https://app-server.com/app/delete\" event=\"app.deleted\"/>\n</webhooks>\n```\n\n----------------------------------------\n\nTITLE: Specifying Subscription Context via HTTP Headers - Shopware Headless API (Bash)\nDESCRIPTION: This Bash code demonstrates how to activate a subscription cart in Shopware's headless API by making a POST request and providing the required context via custom HTTP headers. The headers sw-subscription-plan and sw-subscription-interval must be set with the appropriate planId and intervalId values to initiate the subscription checkout in the correct context. The URL and body should be adjusted according to the target subscription and API endpoint; Shopware's store-api.xml must be configured to accept and interpret these headers accordingly. Only valid when the correct endpoints and token values are used.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/subscriptions/guides/request-scoping.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST /\n    -H 'sw-subscription-plan: planId' /\n    -H 'sw-subscription-interval: intervalId' /\n    -d 'your body' /\n    '/store-api/subscription/{subscriptionId}/activate'\n```\n\n----------------------------------------\n\nTITLE: Extending Flow Sequence Action Component for Custom Action\nDESCRIPTION: Overrides the sw-flow-sequence-action component to add support for the custom CreateTagAction, including title, description, and modal handling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/extension/sw-flow-sequence-action/index.js\nimport { ACTION, GROUP } from '../../constant/create-tag-action.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-flow-sequence-action', {\n    computed: {\n        // Not necessary if you use an existing group\n        // Push the `groups` method in computed if you are defining a new group\n        groups() {\n            this.actionGroups.unshift(GROUP);\n\n            return this.$super('groups');\n        },\n\n        modalName() {\n            if (this.selectedAction === ACTION.CREATE_TAG) {\n                return 'sw-flow-create-tag-modal';\n            }\n\n            return this.$super('modalName');\n        },\n    },\n\n    methods: {\n        getActionDescriptions(sequence) {\n            if(sequence.actionName === ACTION.CREATE_TAG){\n                return this.getCreateTagDescription(sequence.config)\n            }\n            return this.$super('getActionDescriptions', sequence)\n        },\n        \n        getCreateTagDescription(config) {\n            const tags = config.tags.join(', ');\n\n            return this.$tc('create-tag-action.descriptionTags', 0, {\n                tags\n            });\n        },\n\n        getActionTitle(actionName) {\n            if (actionName === ACTION.CREATE_TAG) {\n                return {\n                    value: actionName,\n                    icon: 'regular-tag',\n                    label: this.$tc('create-tag-action.titleCreateTag'),\n                    group: GROUP,\n                }\n            }\n\n            return this.$super('getActionTitle', actionName);\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Redis Connection Provider via XML Service Definition\nDESCRIPTION: Demonstrates how to inject the RedisConnectionProvider service into a custom service using XML service configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/redis.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"MyCustomService\">\n    <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Adapter\\Redis\\RedisConnectionProvider\" />\n    <argument>%myservice.redis_connection_name%</argument>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Selecting Modal Trigger Elements in Cypress Tests\nDESCRIPTION: Illustrates selecting a modal trigger button in Cypress tests. It discourages selecting based on potentially brittle framework-specific attributes (like `[data-toggle=\"modal\"]`) and recommends using a dedicated, application-specific class (like `.btn-open-settings`) for more robust and maintainable tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ✗ Avoid using framework specific syntax from Bootstrap as a selector.\ncy.get('[data-toggle=\"modal\"]').click();\n\n// ✓ Instead, you should use a shopware specific class like `.btn-open-settings`.\ncy.get('.btn-open-settings').click();\n```\n\n----------------------------------------\n\nTITLE: Compiling Storefront JavaScript Bundle in Shopware 6\nDESCRIPTION: This command builds only the JavaScript bundle for the Shopware 6 storefront, skipping theme compilation and Puppeteer download. It's designed for CI environments where a full theme build isn't necessary.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/build-w-o-db.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCI=1 SHOPWARE_SKIP_THEME_COMPILE=true PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true bin/build-storefront.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shopware Installation\nDESCRIPTION: Command to install Shopware through the CLI, which creates an admin user with predefined credentials. This is an alternative to the browser-based setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Completion Fields in YAML (YAML)\nDESCRIPTION: This snippet shows how to configure completion fields for a custom entity in the advanced_search.yaml configuration file. It specifies which fields should be used as completion keywords for a given entity.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-modify-completion.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadvanced_search:\n    completion:\n        your_custom_entity:\n            - email\n            - company\n```\n\n----------------------------------------\n\nTITLE: Action Button Request Sample Payload\nDESCRIPTION: Shows the JSON payload structure sent to your app when a user clicks an action button. The payload includes source information, data with selected IDs, and metadata like timestamp and language.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\":{\n    \"url\":\"http:\\/\\/localhost:8000\",\n    \"appVersion\":\"1.0.0\",\n    \"shopId\":\"F0nWInXj5Xyr\"\n  },\n  \"data\":{\n    \"ids\":[\n      \"2132f284f71f437c9da71863d408882f\"\n    ],\n    \"entity\":\"product\",\n    \"action\":\"restockProduct\"\n  },\n  \"meta\":{\n    \"timestamp\":1592403610,\n    \"reference\":\"9e968471797b4f29be3e3cf09f52d8da\",\n    \"language\":\"2fbb5fe2e29a4d70aa5854ce7ce3e20b\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Service in PHP\nDESCRIPTION: Implements the ExampleService class extending the AbstractExampleService. It throws a DecorationPatternException in getDecorated() as it's the base implementation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/adjusting-service.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\n\nclass ExampleService extends AbstractExampleService\n{\n    public function getDecorated(): AbstractExampleService\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    public function doSomething(): string\n    {\n        return 'Did something.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Shopware Cache via Command Line\nDESCRIPTION: This command clears the Shopware cache, which is necessary after making template changes to see them reflected in the storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/customize-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Error Logging in Shopware\nDESCRIPTION: Configuration for setting monolog log levels to error and limiting buffer size to prevent memory overflows in production environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n    handlers:\n        main:\n            level: error\n            buffer_size: 30\n        business_event_handler_buffer:\n            level: error\n```\n\n----------------------------------------\n\nTITLE: Updating Product Stock Information in PHP\nDESCRIPTION: This code snippet demonstrates how to update a product's stock information using data from the stock storage. It sets various stock-related properties on the product object and adds extended stock data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-15-stock-api.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$product->setStock($stock->stock);\n$product->setAvailable($stock->available);\n\n// optional values\n$product->setMinPurchase($stock->minPurchase ?? $product->get('minPurchase'));\n$product->setMaxPurchase($stock->maxPurchase ?? $product->get('maxPurchase'));\n$product->setIsCloseout($stock->isCloseout ?? $product->get('isCloseout'));\n\n// really flexible for projects\n$product->addExtension('stock_data', $stock);\n```\n\n----------------------------------------\n\nTITLE: Searching with Repository - PHP\nDESCRIPTION: This PHP snippet demonstrates how to search with a repository using provided criteria and context, then retrieve the first result's ID. It requires a repository object capable of the search operation, and both $criteria and $context should be valid for the repository. The code returns the ID of the first matching entity or null if none is found. This form is often mocked in unit tests, which can lead to tightly coupled tests as discussed in the document.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/unit-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$id = $this->repository->search($criteria, $context)->first()?->getId();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order Placement Flow in Shopware\nDESCRIPTION: This diagram shows the flow of events in the system when an order is placed on the Storefront, from user action to core processing including FlowDispatcher and FlowExecutor.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/flow-concept.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart-elk TD\n    A([Start])\nsubgraph Storefront\n    B[User]\nend\nA-->Storefront\nStorefront--Place an order-->Core\nsubgraph Core\n    C[\"CartOrderRoute::Order()\"]--dispatch [checkout.order.place]-->D[\"FlowDispatcher::dispatch()\"]\n    D-->E[\"FlowExecutor::execute()\"]\n    E-->F[\"FlowExecutor::executeAction()\"]\n    F-->G[\"StopFlowAction::handleFlow()\"]\nend\n    G-->H([End])\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Resolve Node Modules in Shopware 6\nDESCRIPTION: This snippet demonstrates how to extend the Webpack configuration to make it aware of the new NPM dependencies by adding your plugin's node_modules directory to the resolution path.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-npm-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (params) => {\n    return { \n        resolve: { \n            modules: [\n                `${params.basePath}/Resources/app/storefront/node_modules`,\n            ],\n       } \n   }; \n}\n```\n\n----------------------------------------\n\nTITLE: Preselecting a Date in Datepicker Input Field\nDESCRIPTION: This snippet shows how to preselect a date in the datepicker input field by setting the value attribute of the input element.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-the-datepicker-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n\n    {% set pickerOptions = {\n        locale: app.request.locale,\n        enableTime: true\n    } %}\n    \n    <label>\n        <input type=\"text\"\n               name=\"customDate\"\n               class=\"customDate\"\n               value=\"2021-01-01T00:00:00+00:00\"\n               data-date-picker\n               data-date-picker-options=\"{{ pickerOptions|json_encode|escape('html_attr') }}\"\n        />\n    </label>\n\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Abstract Class with Optional Parameter\nDESCRIPTION: Provides the concrete implementation of an abstract class method that includes a new optional parameter (`$criteria`). This demonstrates the straightforward implementation possible when using abstract classes compared to interfaces for extending method signatures. Depends on `AbstractCustomerRoute`, `Request`, `SalesChannelContext`, `Criteria`, and `CustomerResponse`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass CustomerRoute extends AbstractCustomerRoute\n{\n    public function load(Request $request, SalesChannelContext $context, ?Criteria $criteria = null): CustomerResponse\n    {\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration for Shopware 6 Admin Plugin\nDESCRIPTION: This code snippet demonstrates how to create a custom Webpack configuration file for a Shopware 6 Administration plugin. It exports a function that returns a Webpack configuration object, which adds a custom alias for the plugin's source directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/extending-webpack.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/build/webpack.config.js\nconst path = require('path');\n\nmodule.exports = () => {\n    return {\n        resolve: {\n            alias: {\n                SwagBasicExample: path.join(__dirname, '..', 'src')\n            }\n        }\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Running the App with Deno\nDESCRIPTION: Command to serve the app using Deno runtime.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/01-getting_started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno serve index.js\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriber via Services XML\nDESCRIPTION: Registers the ThemeVariableSubscriber as a service in the Symfony container using XML configuration, tagging it as a kernel event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\ThemeVariableSubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: HTML Example for Modal Trigger Selector\nDESCRIPTION: Shows an HTML button element designed to trigger a modal, using Bootstrap's `data-toggle` and `data-target` attributes. It also includes a specific class (`btn-open-settings`) which is recommended for use as a stable selector in E2E tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-toggle=\"modal\"\n    data-target=\"#exampleModal\"\n    class=\"btn btn-primary btn-open-settings\">\n    Open settings modal\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining the Payment Refund Processor Method in PHP\nDESCRIPTION: This PHP method signature belongs to the `PaymentRefundProcessor`. The `processRefund` method is triggered via an Admin API action to initiate a refund. It accepts the `refundId` (likely referencing `OrderTransactionCaptureRefund`) and the Shopware `Context`, coordinates the refund process (potentially invoking the specific `PaymentRefundHandlerInterface`), and returns a `Response` object, indicating the outcome of the initiation request to the Admin API.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-10-13-refund-handling.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\npublic function processRefund(string $refundId, Context $context): Response;\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Services XML with SystemConfigService Dependency\nDESCRIPTION: Modifies the services.xml file to inject the SystemConfigService into the ThemeVariableSubscriber, enabling access to plugin configuration values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\ThemeVariableSubscriber\">\n            <!-- add argument `SystemConfigService` -->\n            <argument type=\"service\" id=\"Shopware\\Core\\System\\SystemConfig\\SystemConfigService\"/>\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Managing Embedded Repositories with Docs CLI (Bash)\nDESCRIPTION: Executes the `docs-cli` script located in the root of the `developer-portal` repository with the `manage` command. This interactive tool guides the user through adding or updating repository embedding configurations stored in `.vitepress/portal.json`. Requires Node.js.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./docs-cli manage\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing Overwrites in shopware.yaml for Shopware\nDESCRIPTION: This YAML snippet shows how to configure routing overwrites in the shopware.yaml file. It demonstrates how to overwrite the default routing for specific message classes, which is particularly useful when you need to change the routing for messages that already have a default routing based on their interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  messenger:\n    routing_overwrite:\n      'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexingMessage': entity_indexing\n```\n\n----------------------------------------\n\nTITLE: Complete Feature Helper Test with Assertions\nDESCRIPTION: A complete Jest test for a feature helper that verifies active, inactive, and non-existent feature flags. The test uses Jest's matchers to perform assertions on the helper's behavior.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/test/helper/feature.helper.test.js\nimport Feature from 'src/helper/feature.helper';\n\nconst default_flags = {\n    test1: true,\n    test2: false\n};\n\ndescribe('feature.helper.js', () => {\n    beforeEach(() => {\n        Feature.init(default_flags);\n    });\n\n    test('checks the flags', () => {\n        expect(Feature.isActive('test1')).toBeTruthy();\n        expect(Feature.isActive('test2')).toBeFalsy();\n        expect(Feature.isActive('test3')).toBeFalsy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: API Trigger Data Example\nDESCRIPTION: JSON payload example for triggering custom flow events via API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"customerId\": \"d20e4d60e35e4afdb795c767eee08fec\",\n    \"salesChannelId\": \"55cb094fd1794d489c63975a6b4b5b90\",\n    \"shopName\": \"Shopware's Shop\",\n    \"url\": \"https://shopware.com\" \n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Storefront Styles in Shopware 6\nDESCRIPTION: Command to compile and build the SCSS files for the Storefront in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-styling.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-storefront.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run build:js:storefront\n```\n\n----------------------------------------\n\nTITLE: Showing Shopware Platform Test Integration Folder Structure\nDESCRIPTION: Displays the organizational structure for integration tests in Shopware platform, showing how tests are organized by business domain.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n`-- integration\n  |-- catalogue\n  |-- content\n  |-- customer\n  |-- general\n  |-- media-marketing\n  |-- order\n  |-- rule-product-stream\n  `-- settings\n```\n\n----------------------------------------\n\nTITLE: Implementing OwnLocaleGateway for Migration in PHP\nDESCRIPTION: This class implements the GatewayInterface and provides methods for reading product data, environment information, and totals during the migration process.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Gateway;\n\nuse Shopware\\Core\\Framework\\Context;\nuse SwagMigrationAssistant\\Migration\\EnvironmentInformation;\nuse SwagMigrationAssistant\\Migration\\Gateway\\GatewayInterface;\nuse SwagMigrationAssistant\\Migration\\Gateway\\Reader\\ReaderRegistry;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Migration\\RequestStatusStruct;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Exception\\DatabaseConnectionException;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Connection\\ConnectionFactoryInterface;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile;\n\nclass OwnLocaleGateway implements GatewayInterface\n{\n    public const GATEWAY_NAME = 'local';\n\n    private ConnectionFactoryInterface $connectionFactory;\n\n    private ReaderRegistry $readerRegistry;\n\n    public function __construct(\n        ReaderRegistry $readerRegistry,\n        ConnectionFactoryInterface $connectionFactory\n    ) {\n        $this->readerRegistry = $readerRegistry;\n        $this->connectionFactory = $connectionFactory;\n    }\n\n    public function getName(): string\n    {\n        return self::GATEWAY_NAME;\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile;\n    }\n\n    public function getSnippetName(): string\n    {\n        return 'swag-migration.wizard.pages.connectionCreate.gateways.shopwareLocal';\n    }\n\n    public function read(MigrationContextInterface $migrationContext): array\n    {\n        $reader = $this->readerRegistry->getReader($migrationContext);\n\n        return $reader->read($migrationContext);\n    }\n\n    public function readEnvironmentInformation(\n        MigrationContextInterface $migrationContext,\n        Context $context\n    ): EnvironmentInformation {\n        $connection = $this->connectionFactory->createDatabaseConnection($migrationContext);\n        $profile = $migrationContext->getProfile();\n\n        try {\n            $connection->connect();\n        } catch (\\Exception $e) {\n            $error = new DatabaseConnectionException();\n\n            return new EnvironmentInformation(\n                $profile->getSourceSystemName(),\n                $profile->getVersion(),\n                '-',\n                [],\n                [],\n                new RequestStatusStruct($error->getErrorCode(), $error->getMessage())\n            );\n        }\n        $connection->close();\n\n        $totals = $this->readTotals($migrationContext, $context);\n\n        return new EnvironmentInformation(\n            $profile->getSourceSystemName(),\n            $profile->getVersion(),\n            'Example Host Name',\n            $totals,\n            [],\n            new RequestStatusStruct(),\n            false\n        );\n    }\n\n    public function readTotals(MigrationContextInterface $migrationContext, Context $context): array\n    {\n        $readers = $this->readerRegistry->getReaderForTotal($migrationContext);\n\n        $totals = [];\n        foreach ($readers as $reader) {\n            $total = $reader->readTotal($migrationContext);\n\n            if ($total === null) {\n                continue;\n            }\n\n            $totals[$total->getEntityName()] = $total;\n        }\n\n        return $totals;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: App Directory Structure Example\nDESCRIPTION: Shows the expected directory structure for implementing custom CMS blocks in a Shopware app\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/content/cms/add-custom-cms-blocks.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── Resources\n│   ├── app\n│   │   └── storefront\n│   │       └── src\n│   │           └── scss\n│   │               └── base.scss\n│   ├── cms\n│   │   └── blocks\n│   │       └── swag-image-text-reversed\n│   │           ├── preview.html\n│   │           └── styles.css\n│   ├── views\n│   │   └── storefront\n│   │       └── block\n│   │           └── cms-block-swag-image-text-reversed-component.html.twig\n│   └── cms.xml\n└── manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Documenting User Recovery Request Event in Shopware\nDESCRIPTION: This snippet describes the user recovery request event in Shopware. It requires 'user_recovery:read' permission and includes a payload with the 'user_recovery' entity and a reset URL.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": \"user_recovery\",\n  \"resetUrl\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Snippets in Twig Templates\nDESCRIPTION: Shows how to use translation snippets in Twig templates, including basic usage and pluralization example using the $tc helper function.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/adding-snippets.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% block my_custom_block %}\n    <p>\n       {{ $tc('swag-example.general.myCustomText') }}\n    </p>\n{% endblock %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% block my_custom_block %}\n    <p>\n       {{ $tc('swag-example.nested.examplePluralization', products.length) }}\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Extension Verifier GitHub Action\nDESCRIPTION: YAML configuration for using the Extension Verifier as a GitHub Action. This setup runs checks against both the lowest and highest compatible Shopware versions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n    check:\n        runs-on: ubuntu-24.04\n        strategy:\n            fail-fast: false\n            matrix:\n                version-selection: [ 'lowest', 'highest']\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v4\n\n            - name: Check extension\n              uses: shopware/github-actions/extension-verifier@main\n              with:\n                   action: check\n                   check-against: ${{ matrix.version-selection }}\n```\n\n----------------------------------------\n\nTITLE: Handling Action Button in Symfony Bundle\nDESCRIPTION: Example of a Symfony controller that handles an action button request using attributes for routing. The controller returns a notification response upon successful processing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\ActionButton\\ActionButtonAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[AsController]\nclass ActionButtonController {\n    #[Route('/action/product/detail')]\n    public function handle(ActionButtonAction $button): ResponseInterface\n    {\n        // handle button\n        \n        return ActionButtonResponse::notification('success', 'Success message');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Response JSON Structure\nDESCRIPTION: JSON response format for payment status updates from the app to Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"authorize\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"authorize\",\n  \"message\": \"The customer failed to pass the credit check.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing accessible companies in Shopware Account\nDESCRIPTION: This command lists all companies that the authenticated user has access to within their Shopware Account.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account company list\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Condition Logic in Twig for Shopware App\nDESCRIPTION: This Twig script implements the logic for the custom approval rule condition in a Shopware app. It checks if the cart is available and compares the total price with the specified amount using the given operator.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/order-approval/guides/04-add-new-approval-condition.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if scope.cart is not defined %}\n    {% return false %}\n{% endif %}\n\n{% return compare(operator, scope.cart.price.totalPrice, amount) %}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Shopware 6 Component in JavaScript\nDESCRIPTION: This snippet shows how to register a custom Shopware 6 component named 'sw-hello-world'. It imports the component's template and registers it using Shopware.Component.register.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/add-custom-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('sw-hello-world', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Document Event Payload Structure in JSON\nDESCRIPTION: JSON structure for document events in Shopware. It specifies the entity name, operation type, primary key, and payload array.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"document\",\"operation\":\"update insert\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"document\",\"operation\":\"deleted\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\n----------------------------------------\n\nTITLE: Weighted Search Query Configuration\nDESCRIPTION: Demonstrates how to create weighted search queries with scoring\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"query\": [\n        {\n            \"score\": 500,\n            \"query\": { \"type\": \"contains\", \"field\": \"name\", \"value\": \"Bronze\"}\n        },\n        { \n            \"score\": 500,\n            \"query\": { \"type\": \"equals\", \"field\": \"active\", \"value\": true }\n        },\n        {\n            \"score\": 100,\n            \"query\": {\n                \"type\": \"equals\",\n                \"field\": \"manufacturerId\",\n                \"value\": \"db3c17b1e572432eb4a4c881b6f9d68f\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Data Loading API Request in HTTP\nDESCRIPTION: Example HTTP request demonstrating how to use partial data loading to retrieve only the name field of a currency entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/partial-data-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/search/currency\nAuthorization: Bearer YOUR_ACCESS_TOKEN\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"fields\": [\n        \"name\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Order Transaction State in Shopware 6\nDESCRIPTION: Example demonstrating how to transition an order transaction state from 'open' to 'in_progress' using the do_pay action. Requires transaction ID and uses OrderTransactionDefinition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$this->stateMachineRegistry->transition(new Transition(\n    OrderTransactionDefinition::ENTITY_NAME,\n    '<Order transaction ID here>',\n    'do_pay',\n    'stateId'\n), $context);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order Transaction State Machine Workflow with Mermaid\nDESCRIPTION: Mermaid flowchart illustrating the order transaction state machine with multiple states including Open, Paid, Paid partially, Cancelled, Reminded, Refunded, and more. The diagram shows all possible payment state transitions with actions like pay, cancel, remind, refund, and authorize.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/orders.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nSTART_STATE[Start state] --> 018c4a0eeba171db8f885b1b74f5895f\n\n018c4a0eeba171db8f885b1b74f5895f(Open)\n018c4a0eeba171db8f885b1b75b3a3e3(Paid)\n018c4a0eeba171db8f885b1b760cc537(Paid partially)\n018c4a0eeba171db8f885b1b76166310(Cancelled)\n018c4a0eeba171db8f885b1b76cb7f9c(Reminded)\n018c4a0eeba171db8f885b1b77a3112c(Refunded)\n018c4a0eeba171db8f885b1b77a3112c --> FINAL_STATE[Final state]\n018c4a0eeba171db8f885b1b7833adb3(Refunded partially)\n018c4a0eff2670648f1f92d85efca4dd(In Progress)\n018c4a0eff2670648f1f92d85f9cd806(Failed)\n018c4a0f109d7034995df01ceddd9b6a(Authorized)\n018c4a0f10bc7230939f1a53ffc3ad22(Chargeback)\n018c4a0f2f00710bb4227243818b33ad(Unconfirmed)\n\n018c4a0eeba171db8f885b1b74f5895f -- pay --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eeba171db8f885b1b74f5895f -- pay_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eeba171db8f885b1b74f5895f -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b74f5895f -- remind --> 018c4a0eeba171db8f885b1b76cb7f9c\n018c4a0eeba171db8f885b1b76cb7f9c -- pay --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eeba171db8f885b1b76cb7f9c -- pay_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eeba171db8f885b1b76cb7f9c -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b760cc537 -- remind --> 018c4a0eeba171db8f885b1b76cb7f9c\n018c4a0eeba171db8f885b1b760cc537 -- pay --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eeba171db8f885b1b760cc537 -- refund_partially --> 018c4a0eeba171db8f885b1b7833adb3\n018c4a0eeba171db8f885b1b760cc537 -- refund --> 018c4a0eeba171db8f885b1b77a3112c\n018c4a0eeba171db8f885b1b760cc537 -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b75b3a3e3 -- refund_partially --> 018c4a0eeba171db8f885b1b7833adb3\n018c4a0eeba171db8f885b1b75b3a3e3 -- refund --> 018c4a0eeba171db8f885b1b77a3112c\n018c4a0eeba171db8f885b1b75b3a3e3 -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b7833adb3 -- refund --> 018c4a0eeba171db8f885b1b77a3112c\n018c4a0eeba171db8f885b1b7833adb3 -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b76166310 -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eeba171db8f885b1b76166310 -- refund --> 018c4a0eeba171db8f885b1b77a3112c\n018c4a0eeba171db8f885b1b76166310 -- refund_partially --> 018c4a0eeba171db8f885b1b7833adb3\n018c4a0eff2670648f1f92d85efca4dd -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eff2670648f1f92d85efca4dd -- fail --> 018c4a0eff2670648f1f92d85f9cd806\n018c4a0eff2670648f1f92d85efca4dd -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eff2670648f1f92d85efca4dd -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eff2670648f1f92d85efca4dd -- paid_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eff2670648f1f92d85efca4dd -- pay_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eff2670648f1f92d85f9cd806 -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eff2670648f1f92d85f9cd806 -- do_pay --> 018c4a0eff2670648f1f92d85efca4dd\n018c4a0eff2670648f1f92d85f9cd806 -- pay --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eff2670648f1f92d85f9cd806 -- fail --> 018c4a0eff2670648f1f92d85f9cd806\n018c4a0eff2670648f1f92d85f9cd806 -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eff2670648f1f92d85f9cd806 -- paid_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eff2670648f1f92d85f9cd806 -- pay_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eeba171db8f885b1b74f5895f -- do_pay --> 018c4a0eff2670648f1f92d85efca4dd\n018c4a0eeba171db8f885b1b74f5895f -- fail --> 018c4a0eff2670648f1f92d85f9cd806\n018c4a0eeba171db8f885b1b76cb7f9c -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eeba171db8f885b1b76cb7f9c -- do_pay --> 018c4a0eff2670648f1f92d85efca4dd\n018c4a0eeba171db8f885b1b760cc537 -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eeba171db8f885b1b760cc537 -- do_pay --> 018c4a0eff2670648f1f92d85efca4dd\n018c4a0eeba171db8f885b1b75b3a3e3 -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eeba171db8f885b1b7833adb3 -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n018c4a0eeba171db8f885b1b74f5895f -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eeba171db8f885b1b74f5895f -- paid_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0eff2670648f1f92d85efca4dd -- authorize --> 018c4a0f109d7034995df01ceddd9b6a\n018c4a0eeba171db8f885b1b74f5895f -- authorize --> 018c4a0f109d7034995df01ceddd9b6a\n018c4a0eeba171db8f885b1b76cb7f9c -- authorize --> 018c4a0f109d7034995df01ceddd9b6a\n018c4a0f109d7034995df01ceddd9b6a -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0f109d7034995df01ceddd9b6a -- paid_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0f109d7034995df01ceddd9b6a -- fail --> 018c4a0eff2670648f1f92d85f9cd806\n018c4a0f109d7034995df01ceddd9b6a -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b75b3a3e3 -- chargeback --> 018c4a0f10bc7230939f1a53ffc3ad22\n018c4a0eeba171db8f885b1b760cc537 -- chargeback --> 018c4a0f10bc7230939f1a53ffc3ad22\n018c4a0f10bc7230939f1a53ffc3ad22 -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0f10bc7230939f1a53ffc3ad22 -- paid_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0f10bc7230939f1a53ffc3ad22 -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0eeba171db8f885b1b76166310 -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0eeba171db8f885b1b74f5895f -- process_unconfirmed --> 018c4a0f2f00710bb4227243818b33ad\n018c4a0eeba171db8f885b1b76cb7f9c -- process_unconfirmed --> 018c4a0f2f00710bb4227243818b33ad\n018c4a0eff2670648f1f92d85f9cd806 -- process_unconfirmed --> 018c4a0f2f00710bb4227243818b33ad\n018c4a0eeba171db8f885b1b76166310 -- process_unconfirmed --> 018c4a0f2f00710bb4227243818b33ad\n018c4a0eeba171db8f885b1b760cc537 -- process_unconfirmed --> 018c4a0f2f00710bb4227243818b33ad\n018c4a0f2f00710bb4227243818b33ad -- paid --> 018c4a0eeba171db8f885b1b75b3a3e3\n018c4a0f2f00710bb4227243818b33ad -- paid_partially --> 018c4a0eeba171db8f885b1b760cc537\n018c4a0f2f00710bb4227243818b33ad -- fail --> 018c4a0eff2670648f1f92d85f9cd806\n018c4a0f2f00710bb4227243818b33ad -- cancel --> 018c4a0eeba171db8f885b1b76166310\n018c4a0f2f00710bb4227243818b33ad -- authorize --> 018c4a0f109d7034995df01ceddd9b6a\n018c4a0f2f00710bb4227243818b33ad -- reopen --> 018c4a0eeba171db8f885b1b74f5895f\n```\n\n----------------------------------------\n\nTITLE: Implementing Currency Context in PHP Controller\nDESCRIPTION: Shows how to create and use CurrencyService in a controller to generate currency context. Demonstrates dependency injection and basic context creation.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Shopware\\B2B\\Currency\\Framework\\CurrencyContext;\nuse Shopware\\B2B\\Currency\\Framework\\CurrencyService;\n\nclass TestController\n{\n    private CurrencyService $currencyService;\n\n    public function __construct(\n        CurrencyService $currencyService\n    ) {\n        $this->currencyService = $currencyService;\n    }\n\n    public function testAction(): array\n    {\n        return [\n            'currencyContext' => $this->currencyService->createCurrencyContext(),\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing lazy loading in Twig thumbnail component\nDESCRIPTION: Example showing how to add the loading=\"lazy\" attribute to the thumbnail component to enable native lazy loading for images in the Shopware 6 storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-01-30-image-lazy-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-thumbnail' with {\n    media: category.media,\n    attributes: {\n        'class': 'my-css-class'\n+        'loading': 'lazy'\n    }\n} %}\n```\n\n----------------------------------------\n\nTITLE: Configuring ExampleController in Shopware 6 services.xml\nDESCRIPTION: XML configuration to register the ExampleController as a service, injecting the ExamplePageLoader and setting up the container and Twig environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<service id=\"Swag\\BasicExample\\Storefront\\Controller\\ExampleController\" public=\"true\">\n    <argument type=\"service\" id=\"Swag\\BasicExample\\Storefront\\Page\\Example\\ExamplePageLoader\" />\n    <call method=\"setContainer\">\n        <argument type=\"service\" id=\"service_container\"/>\n    </call>\n    <call method=\"setTwig\">\n        <argument type=\"service\" id=\"twig\"/>\n    </call>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Accessing Shopware Custom Entities via Generic API Routes\nDESCRIPTION: Shopware provides generic API routes to access custom entities, avoiding the need for pre-defined routes for each entity. Requests like `/api/custom-entity-swag-blog` or `/api/ce-swag-blog` (depending on the prefix used in the definition, `custom_entity_` or `ce_` respectively) are directed to a custom controller. This controller extracts the entity name (`swag-blog` in this example) from the route parameter and uses it to interact with the appropriate entity data via the standard `ApiController` logic.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-14-technical-concept-custom-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/api/custom-entity-{entity}\n```\n\nLANGUAGE: text\nCODE:\n```\n/api/custom-entity-swag-blog\n```\n\nLANGUAGE: text\nCODE:\n```\n/api/ce-{entity}\n```\n\n----------------------------------------\n\nTITLE: Adding a Deprecated Public Function in PHP\nDESCRIPTION: Demonstrates how to add a new public method to an abstract class that will become abstract in a future version, using proper deprecation annotations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/** Before */\nabstract class AbstractProductRoute\n{\n    abstract public function getDecorated(): AbstractProductRoute;\n \n    abstract public function load();\n}\n \n \n/** After */\nabstract class AbstractProductRoute\n{\n    abstract public function getDecorated(): AbstractProductRoute;\n \n    abstract public function load();\n \n    /**\n     * @deprecated tag:v6.5.0 - Will be abstract \n     */\n    public function loadV2()\n    {\n        return $this->getDecorated()->loadV2();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring local database connection in Shopware\nDESCRIPTION: Example of setting the DATABASE_URL in the .env.local file for connecting to a local database server.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL=mysql://username:password@localhost:3306/dbname\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecated Code with PHP Annotations\nDESCRIPTION: This PHP code snippet demonstrates how to use the @deprecated annotation to indicate obsolete public code that is scheduled for removal in a future major Shopware release. The annotation should include the specific major version tag (e.g., v6.5.0) and a comment stating the recommended replacement. It is required for any code intended to be phased out while maintaining backward compatibility until the major update. Users referencing this code should switch to the suggested alternative before the indicated version.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @deprecated tag:v6.5.0 - Use NewFunction() instead\n */\n```\n\n----------------------------------------\n\nTITLE: Array Element Access Examples in Twig\nDESCRIPTION: Demonstrates various ways to interact with array elements using ArrayFacade in Twig, including pushing values, setting properties, and checking conditions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/miscellaneous-script-services-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do array.push('test') %}\n\n{% do array.foo = 'bar' }\n\n{% do array.has('foo') }\n\n{% if array.foo === 'bar' %}\n\n{% foreach array as key => value %}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Module with Entity Reference in Shopware 6\nDESCRIPTION: This JavaScript code registers a custom module in Shopware 6, specifying the color, icon, and entity reference. This is used to change the appearance of the search tag for the custom entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Module.register('any-name', {\n    color: '#ff0000',\n    icon: 'default-basic-shape-triangle',\n    entity: 'my_entity',\n})\n```\n\n----------------------------------------\n\nTITLE: Redis Connection Factory Configuration in XML\nDESCRIPTION: Demonstrates how to use RedisConnectionProvider as a factory to create custom Redis connection services.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/redis.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"my.custom.redis_connection\" class=\"Redis\">\n    <factory service=\"Shopware\\Core\\Framework\\Adapter\\Redis\\RedisConnectionProvider\" method=\"getConnection\" />\n    <argument>%myservice.redis_connection_name%</argument>\n</service>\n\n<service id=\"MyCustomService\">\n    <argument type=\"service\" id=\"my.custom.redis_connection\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Exposing Local App Server with ngrok\nDESCRIPTION: Uses ngrok to expose the local Symfony server on a public URL for cloud store communication.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nngrok http 8000\n```\n\n----------------------------------------\n\nTITLE: Adding Inheritance to Translated Fields in PHP\nDESCRIPTION: Code snippet showing how to flag translated fields and translation associations as inheritable in an entity definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/field-inheritance.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new TranslatedField('name'))->addFlags(new Inherited()),\n(new TranslationsAssociationField(ExampleTranslationDefinition::class))->addFlags(new Inherited()),\n```\n\n----------------------------------------\n\nTITLE: Full Shop Reindexing Command in Shopware\nDESCRIPTION: Command to reindex the entire Shopware shop, including Elasticsearch, SEO-URLs, and product index. It uses the message queue for handling large product volumes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/console dal:refresh:index --use-queue\n```\n\n----------------------------------------\n\nTITLE: Implementing InitialStateIdLoader Service with Caching in Shopware PHP\nDESCRIPTION: This snippet defines the InitialStateIdLoader class, which offers fast retrieval of initial state IDs for state machines by using a cached approach. The get method checks for already loaded IDs or reloads them from cache, and uses a cached database fetch for performance. The service depends on cache and database connection objects, and is intended for internal use in Shopware 6. It significantly reduces load by eliminating the need to load entire state machine objects.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-initial-state-id-loader.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\System\\StateMachine\\Loader;\n\nclass InitialStateIdLoader implements ResetInterface\n{\n    public const CACHE_KEY = 'state-machine-initial-state-ids';\n\n    public function get(string $name): string\n    {\n        if (isset($this->ids[$name])) {\n            return $this->ids[$name];\n        }\n\n        $this->ids = $this->load();\n\n        return $this->ids[$name];\n    }\n\n    private function load(): array\n    {\n        return $this->cache->get(self::CACHE_KEY, function () {\n            return $this->connection->fetchAllKeyValue(\n                'SELECT technical_name, LOWER(HEX(`initial_state_id`)) as initial_state_id FROM state_machine'\n            );\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting App Events in BusinessEventCollector - PHP\nDESCRIPTION: Presents methods for the BusinessEventCollector responsible for aggregating events that implement FlowEventAware, including custom events from active apps. The code shows interaction patterns for fetching and creating custom app events and updating the collector's response object with additional app-defined events.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function collect(Context $context): BusinessEventCollectorResponse\\n{\\n    //fetch app event\\n    $this->fetchAppEvents(new BusinessEventCollectorResponse)\\n}\\n\\nprivate function fetchAppEvents(BusinessEventCollectorResponse $result): BusinessEventCollectorResponse\\n{\\n    //check valid app events from the database\\n    return $this->createCustomAppEvent();\\n}\\n\\nprivate function createCustomAppEvent(): CustomAppEvent\\n{\\n   // return new CustomAppEvent\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Extending Storefront Template for Custom Field\nDESCRIPTION: This code extends the product description template to include a custom field. It uses the Twig extend functionality and block overriding.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-custom-fields-storefront.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/product-detail/description.html.twig' %}\n\n{% block page_product_detail_description_content_text %}\n    {{ parent() }}\n\n    {# Insert your custom field here, as seen below: #}\n    {{ \"customFields.my_test_field\"|trans|sw_sanitize }}: {{ page.product.translated.customFields.my_test_field }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a PostUpdateIndexer in PHP\nDESCRIPTION: Example implementation of a PostUpdateIndexer class that handles one-time data migrations. It demonstrates how to create an iterator for entities and process them in batches.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-27-post-updater.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass PostUpdateExample extends PostUpdateIndexer\n{\n    public function getName(): string\n    {\n        return 'post.update.example';\n    }\n\n    public function iterate(?array $offset): ?EntityIndexingMessage\n    {\n        $iterator = $this->iteratorFactory->createIterator('my_entity', $offset);\n\n        $ids = $iterator->fetch();\n\n        if (empty($ids)) {\n            return null;\n        }\n\n        return new EntityIndexingMessage(array_values($ids), $iterator->getOffset());\n    }\n    \n    public function handle(EntityIndexingMessage $message): void\n    {\n        // handle ids\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Name and Author Configuration in Shopware 6\nDESCRIPTION: Configuration of the theme's name, author, and multilingual description in the theme.json file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleTheme\",\n  \"author\": \"Shopware AG\",\n  \"description\": {\n    \"en-GB\": \"Just another description\",\n    \"de-DE\": \"Nur eine weitere Beschreibung\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ExamplePageLoader in Shopware 6 services.xml\nDESCRIPTION: XML configuration to register the ExamplePageLoader as a service in the Shopware 6 Dependency Injection container, injecting the GenericPageLoader and event_dispatcher.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-page.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<service id=\"Swag\\BasicExample\\Storefront\\Page\\Example\\ExamplePageLoader\" public=\"true\">\n    <argument type=\"service\" id=\"Shopware\\Storefront\\Page\\GenericPageLoader\" />\n    <argument type=\"service\" id=\"event_dispatcher\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Service Configuration for URL Provider Decoration\nDESCRIPTION: XML service configuration that registers the DecoratedProductUrlProvider as a decorator for the core ProductUrlProvider service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/modify-sitemap-entries.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Sitemap\\Provider\\DecoratedProductUrlProvider\" decorates=\"Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Core\\Content\\Sitemap\\Provider\\DecoratedProductUrlProvider.inner\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering Global Vue Directive in Shopware 6\nDESCRIPTION: Example of registering a focus directive globally using Shopware.Directive.register(). The directive automatically focuses an element when it's inserted into the DOM.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/adding-directives.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Directive } = Shopware;\n\nDirective.register('focus', {\n    // when the bound element is inserted into the DOM...\n    inserted: function (el) {\n        // Focus the element\n        el.focus();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Backdrop in JavaScript\nDESCRIPTION: Shows how to customize modal appearance by disabling the backdrop using PseudoModalUtil configuration options. Demonstrates basic modal initialization with custom backdrop settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PluginBaseClass } = window;\nimport PseudoModalUtil from 'src/utility/modal-extension/pseudo-modal.util';\n\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        // declaring some basic content\n        const content = `\n            <div class=\"js-pseudo-modal-template\">\n                <div class=\"js-pseudo-modal-template-title-element\">Modal title</div>\n                <div class=\"js-pseudo-modal-template-content-element\">Modal content</div>\n            </div>\n        `;\n        \n        this.openModal(content);\n    }\n    \n    openModal(content) {\n        // disable backdrop\n        const useBackrop = false;\n        \n        // create a new modal instance\n        this.modal = new PseudoModalUtil(content, useBackrop);\n        \n        // open the modal window and make it visible\n        this.modal.open();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Currency Repository in PHP\nDESCRIPTION: Basic repository setup with CurrencyCalculator dependency injection for handling currency calculations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Shopware\\B2B\\Currency\\Framework\\CurrencyCalculator;\n\nclass Repository\n{\n    private CurrencyCalculator $currencyCalculator;\n\n    public function __construct(\n        CurrencyCalculator $currencyCalculator\n    ) {\n        $this->currencyCalculator = $currencyCalculator;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shopware.Store Public API for Pinia Implementation\nDESCRIPTION: TypeScript interface defining the public API of the Shopware.Store namespace for Pinia integration. The interface provides methods for listing, getting, registering, and unregistering Pinia stores.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-17-replace-vuex-with-pinia.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a list of all registered Pinia store IDs.\n */\npublic list(): string[];\n\n/**\n * Gets the Pinia store with the given ID.\n */\npublic get(id: keyof PiniaRootState): PiniaStore;\n\n/**\n * Registers a new Pinia store. Works similarly to Vuex's registerModule.\n */\npublic register(options: DefineStoreOptions): void;\n\n/**\n * Unregisters a Pinia store. Works similarly to Vuex's unregisterModule.\n */\npublic unregister(id: keyof PiniaRootState): void;\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation or Exception Based on Feature Flag in PHP\nDESCRIPTION: This PHP static method `triggerDeprecationOrThrow` within the `Feature` class provides a standardized way to handle deprecations. It checks if a specified major feature flag (`$majorFlag`) is active or doesn't exist. If true, it throws a `RuntimeException` indicating the deprecated functionality is being used after its removal target. If the flag is inactive, it triggers a standard PHP deprecation notice using `trigger_deprecation` with the provided `$message`. This ensures consistent deprecation handling and helps prevent internal reliance on deprecated code.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-28-consistent-deprecation-notices-in-core.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    public static function triggerDeprecationOrThrow(string $message, string $majorFlag): void\n    {\n        if (self::isActive($majorFlag) || !self::has($majorFlag)) {\n            throw new \\RuntimeException('Deprecated Functionality: ' . $message);\n        }\n\n        trigger_deprecation('', '', $message);\n    }\n```\n\n----------------------------------------\n\nTITLE: Table Content Ignore Configuration - YAML\nDESCRIPTION: YAML configuration to specify additional tables whose content should be ignored during dump generation.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/mysql-dump.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndump:\n  nodata:\n    - <table-name>\n```\n\n----------------------------------------\n\nTITLE: Formatting Extensions with Extension Verifier\nDESCRIPTION: Command to run the formatter on an extension. It mounts the current directory to the Docker container and applies formatting rules.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest format /ext\n```\n\n----------------------------------------\n\nTITLE: Defining Sorting Fields Structure using JSON5\nDESCRIPTION: Illustrates the JSON structure used within the `fields` column of the `product_sorting` table. Each object in the array represents a sorting criterion, specifying the product property (`field`), sorting direction (`order`), application priority (`priority`), and whether natural sorting should be used (`naturalSorting`). This structure allows defining complex, multi-field sorting configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-14-implement-individual-sorting.md#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n[\n  {\n    \"field\": \"product.name\",        // property to sort by (mandatory)  \n    \"order\": \"desc\",                // \"asc\" or \"desc\" (mandatory)\n    \"priority\": 0,                  // in which order the sorting is to applied (higher priority comes first) (mandatory)\n    \"naturalSorting\": 0\n  },\n  {\n    \"field\": \"product.cheapestPrice\",\n    \"order\": \"asc\",\n    \"priority\": 100,\n    \"naturalSorting\": 0\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Flow Trigger\nDESCRIPTION: XML configuration for a single flow trigger with name and aware properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<flow-event>\n    <name>swag.before.open_the_doors</name>\n    <aware>orderAware</aware>\n</flow-event>\n```\n\n----------------------------------------\n\nTITLE: External Template Import (Standard)\nDESCRIPTION: Shows how to import and use an external template file in a component using standard property notation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/add-custom-component.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from 'hello-world.html.twig';\n\nexport default Shopware.Component.wrapComponentConfig('hello-world', {\n    template: template\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Synchronization with Existence Check\nDESCRIPTION: Enhanced YAML configuration that includes an existence check to prevent creating duplicate entities. The criteria checks if an entity with the specified name already exists before creating a new one.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/project-config-sync.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsync:\n  entity:\n    - entity: tax\n      # build a criteria to check that the entity already exists. when exists this will be skipped\n      exists:\n        - type: equals\n          field: name\n          value: 'Tax'\n      # actual api payload to create something\n      payload:\n        name: 'Tax'\n        taxRate: 19\n```\n\n----------------------------------------\n\nTITLE: Showing a Notification Response with HTTP\nDESCRIPTION: HTTP response example that displays a notification to the user after an action button is clicked. The response includes the notification status and message.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"actionType\": \"notification\",\n  \"payload\": {\n    \"status\": \"success\",\n    \"message\": \"This is the successful message\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Fields Price Definition in XML\nDESCRIPTION: Defines custom price fields in product and customer entities using XML configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<custom-fields>\n    <custom-field-set>\n        <name>custom_field_test</name>\n        <label>Custom field test</label>\n        <label lang=\"de-DE\">Zusatzfeld Test</label>\n        <related-entities>\n            <product/>\n            <customer/>\n        </related-entities>\n        <fields>\n            <price name=\"test_price_field\">\n                <label>Test price field</label>\n            </price>\n        </fields>\n    </custom-field-set>\n</custom-fields>\n```\n\n----------------------------------------\n\nTITLE: Implementing CartRedisCompilerPass in PHP\nDESCRIPTION: This PHP code defines the `CartRedisCompilerPass`, a Symfony compiler pass. Its purpose is to conditionally configure the dependency injection container. If a Redis URL (`shopware.cart.redis_url`) is provided in the configuration, it removes the default `CartPersister` and aliases `RedisCartPersister` to it. Otherwise, it removes the definitions for the Redis persister and its service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-redis-cart-persister.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\DependencyInjection\\CompilerPass;\n\nclass CartRedisCompilerPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        if (!$container->getParameter('shopware.cart.redis_url')) {\n            $container->removeDefinition('shopware.cart.redis');\n            $container->removeDefinition(RedisCartPersister::class);\n\n            return;\n        }\n\n        $container->removeDefinition(CartPersister::class);\n        $container->setAlias(CartPersister::class, RedisCartPersister::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Media Event Payload Structure in JSON\nDESCRIPTION: JSON structure for media events in Shopware. It includes the entity name, operation type, primary key, and payload array.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"media\",\"operation\":\"update insert\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"media\",\"operation\":\"deleted\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Event Subscriber in Shopware services.xml\nDESCRIPTION: This XML snippet registers the BusinessEventCollectorSubscriber in the Shopware container configuration. It defines the service with its class name, injects the BusinessEventCollector dependency, and tags it as a kernel event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-trigger.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Swag\\ExamplePlugin\\Core\\Checkout\\Customer\\Subscriber\\BusinessEventCollectorSubscriber\">\n    <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Event\\BusinessEventCollector\"/>\n    <tag name=\"kernel.event_subscriber\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions for ZIP\nDESCRIPTION: YAML configuration to specify files to exclude when creating extension ZIP archive.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# .shopware-extension.yml\nbuild:\n  zip:\n    pack:\n      excludes:\n        paths:\n          - <path>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Nullable Properties Without Nullsafe Operator in PHP\nDESCRIPTION: This pre-PHP 8.0 code demonstrates verbose handling of nullable properties when accessing nested structure attributes, using explicit null checks. Shows how to safely access Address.addressLine2 on a User object via stepwise conditional logic, requiring multiple checks and temporary variables. Requires $user instance; returns value of addressLine2 or only proceeds if both address and addressLine2 are not null.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n\n$user = new User(/**  */);\n$address = $user->address;\n\nif ($address !== null) {\n   $addressLine2 = $address->addressLine2;\n   \n   if ($addressLine2 !== null) {\n       //do something\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML with Global Sanitizer Helper\nDESCRIPTION: Example of using the Sanitizer Helper to clean potentially malicious HTML content via the global Shopware object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/the-sanitizer-helper.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Helper.SanitizerHelper.sanitize('<img src=x onerror=alert(1)//>');\n```\n\n----------------------------------------\n\nTITLE: Basic MySQL Dump Command - Bash\nDESCRIPTION: Simple command to generate a MySQL dump using Shopware CLI. Creates a dump.sql file in the current directory using database credentials from .env file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/mysql-dump.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project dump\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule Condition Logic in Twig for Shopware App\nDESCRIPTION: This Twig script implements the logic for a custom rule condition in a Shopware app. It checks if a customer is in a specific customer group based on the provided operator and customer group IDs.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# ExampleApp/scripts/rule-conditions/customer-group-rule-script.twig #}\n\n{% if scope.salesChannelContext.customer is not defined %}\n    {% return false %}\n{% endif %}\n\n{% if operator == \"=\" %}\n    {% return scope.salesChannelContext.customer.groupId in customerGroupIds %}\n{% else %}\n    {% return scope.salesChannelContext.customer.groupId not in customerGroupIds %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Registering ACL Table Definition as a Service in XML\nDESCRIPTION: This XML snippet defines a service for the `AddressContactAclTable` class within the Shopware Dependency Injection Container (DIC). The `b2b_acl.table` tag makes this table definition accessible to the B2B ACL component, allowing it to manage the corresponding relationship.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"b2b_address.contact_acl_table\" class=\"Shopware\\B2B\\Address\\Framework\\AddressContactAclTable\">\n    <tag name=\"b2b_acl.table\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Advanced K6 Test with Multiple Scenarios for Shopware\nDESCRIPTION: A JavaScript example showing how to define multiple test scenarios in a single K6 test file, including browsing, purchasing, and API operations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// example.js\nimport { productChangePrice, productChangeStocks, fetchBearerToken, useCredentials, productImport } from \"./helpers/api.js\";\nimport {\n  accountRegister,\n  addProductToCart,\n  placeOrder,\n  visitNavigationPage,\n  visitProductDetailPage,\n  visitSearchPage,\n  visitStorefront,\n} from \"./helpers/storefront.js\";\n\nexport const options = {\n  scenarios: {\n    browse_only: {\n      executor: 'constant-vus',\n      vus: 10,\n      duration: '5m',\n      exec: 'browseOnly',\n    },\n    fast_buy: {\n      executor: 'constant-vus',\n      vus: 1,\n      duration: '5m',\n      exec: 'fastBuy',\n    },\n    import: {\n      executor: 'constant-vus',\n      vus: 1,\n      duration: '5m',\n      exec: 'importer',\n    }\n  },\n};\n\nexport function browseOnly() {\n  visitStorefront();\n  visitSearchPage();\n  visitNavigationPage();\n  visitProductDetailPage();\n}\n\nexport function fastBuy() {\n  addProductToCart(visitProductDetailPage().id);\n  accountRegister();\n  placeOrder();\n}\n\nexport function setup() {\n  const token = fetchBearerToken();\n\n  return { token };\n}\n\nexport function importer(data) {\n  useCredentials(data.token);\n  productImport();\n  productChangePrice();\n  productChangeStocks();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Error Command in Shopware 6\nDESCRIPTION: This command adds an error to the cart. It requires a message string, an integer level to determine the severity of the error message, and a boolean to decide whether to block the checkout for the customer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/command-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `add-cart-error`         | Adds an error to the cart. The level decides the severity of the cart error flash message. Blocking decides, whether to block the checkout for the customer. | `{\"message\": \"string\", \"level\": \"int\", \"blocking\": \"boolean\"}` | 6.6.3.0 |\n```\n\n----------------------------------------\n\nTITLE: Documenting Customer Rules - Markdown Table\nDESCRIPTION: Markdown table documenting customer-related rule classes including billing, company status, and order-related rules.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/rules-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| [Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule]   | Matches if active billing address is not the default. |\n| [Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule]                     | Matches if the customer is a company |\n| [Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule]             | Matches if a customer is new, by matching the `firstLogin` property with today. |\n```\n\n----------------------------------------\n\nTITLE: Refactoring FlowDispatcher: Before State (PHP)\nDESCRIPTION: This snippet shows the previous implementation of the `FlowDispatcher` class. The `dispatch` method directly received and passed the original `Event` object to the flow execution logic (`callFlowExecutor`), creating dependencies on live event data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass FlowDispatcher \n{\n    public function dispatch(Event $event) {\n        ...\n        // Currently, dispatch on Flow Builder use the original event to execute the Flow \n        $this->callFlowExecutor($event);\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Cache Tags with CacheInvalidatorFacade in Twig\nDESCRIPTION: Examples of using the cache service to invalidate cache entries with specific tags. Shows invalidating hard-coded tags, dynamically generated tags based on entity IDs, and conditional tag generation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/custom-endpoint-script-services-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cache.invalidate(['my-tag']) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.event.getIds('product_manufacturer') %}\n\n{% if ids.empty %}\n    {% return %}\n{% endif %}\n\n{% set tags = [] %}\n{% for id in ids %}\n    {% set tags = tags|merge(['my-manufacturer-' ~ id]) %}\n{% endfor %}\n\n{% do services.cache.invalidate(tags) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.event.getIds('product') %}\n\n{% set ids = ids.only('insert').with('description', 'parentId') %}\n{% if ids.empty %}\n    {% return %}\n{% endif %}\n\n{% set tags = [] %}\n{% for id in ids %}\n    {% set tags = tags|merge(['my-product-' ~ id]) %}\n{% endfor %}\n\n{% do services.cache.invalidate(tags) %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Mail Variable Updates via Shopware Configuration - YAML\nDESCRIPTION: This YAML snippet illustrates how to disable automatic mail template variable updates in Shopware by setting the update_mail_variables_on_send flag to false. Place this configuration in the relevant config/packages/*.yaml file. No software prerequisites beyond Shopware are needed; this setting prevents PHP-side updates described above and reduces unnecessary database load. By default, this option may be true and should be set after all templates are configured.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-prevent-mail-updates.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    mail:\n        update_mail_variables_on_send: false\n```\n\n----------------------------------------\n\nTITLE: Configuring theme.json for Bootstrap-only styling in Shopware\nDESCRIPTION: This code snippet shows how to configure the theme.json file to use Bootstrap SCSS without Shopware's default storefront styling. It demonstrates the use of '@StorefrontBootstrap' and '@Plugins' in the style section.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-theme-inheritance-without-resources.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"style\": [\n    \"@StorefrontBootstrap\",\n    \"@Plugins\",\n    \"app/storefront/src/scss/base.scss\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Media Selection in Shopware Plugin Configuration\nDESCRIPTION: Illustrates how to implement a media upload or selection field using the sw-media-field component in the plugin configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<component name=\"sw-media-field\">\n    <name>pluginMedia</name>\n    <label>Upload media or choose one from the media manager</label>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Conceptual SQL for Anti-Join Filter\nDESCRIPTION: This SQL query demonstrates the concept behind the anti-join filter. It selects products that do *not* have specific properties ('red' or 'yellow' for color, 'XL' or 'L' for size) by using LEFT JOINs for each property group and checking for NULL in the WHERE clause, indicating the absence of matching associated properties.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-19-dal-join-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT product.id\n\nFROM product\n    LEFT JOIN property_properties color_filter\n        ON color_filter.product_id = product.id\n        AND color_filter.id IN (\"red\", \"yellow\")\n\n    LEFT JOIN property_properties size_filter\n        ON size_filter.product_id = product.id\n        AND size_filter.id IN (\"XL\", \"L\")\n\nWHERE size_filter.product_id IS NULL\nAND color_filter.product_id IS NULL\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub Keys\nDESCRIPTION: Instructions for setting up publisher and subscriber JWT keys for the Mercure hub to enhance security.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/setup-3rd-party/realtime-service-mercure.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- *Set up the publisher (JWT) key* - Set whatever you want.\n- *Set up the subscriber (JWT) key* - Set whatever you want.\n```\n\n----------------------------------------\n\nTITLE: Fastly Configuration\nDESCRIPTION: YAML configuration for enabling Fastly as reverse proxy cache in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  http_cache:\n    reverse_proxy:\n        enabled: true\n        fastly:\n          enabled: true\n          api_key: '<personal-token-from-fastly>'\n          service_id: '<service-id>'\n```\n\n----------------------------------------\n\nTITLE: Ensuring Object Instance Type with assert() in PHP\nDESCRIPTION: Illustrates using `assert($foo instanceof Foo)` to confirm that a variable `$foo` (potentially `object`) is an instance of the `Foo` class, primarily during development and testing. It throws an `AssertionError` if the check fails and assertions are active.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is object, but we expect it to be Foo instance\n\nassert($foo instanceof Foo);\n```\n\n----------------------------------------\n\nTITLE: Registering Search Logic Decorator Service in XML\nDESCRIPTION: Service definition for decorating the Shopware SearchLogic class with custom implementation\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-modify-search-logic.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"YourPluginNameSpace\\Domain\\Search\\SearchLogicDecorator\" decorates=\"Shopware\\Commercial\\AdvancedSearch\\Domain\\Search\\SearchLogic\">\n    <argument type=\"service\" id=\".inner\"/>\n    <argument type=\"service\" id=\"Shopware\\Commercial\\AdvancedSearch\\Domain\\Configuration\\ConfigurationLoader\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output from sw_thumbnails\nDESCRIPTION: Example HTML output that is automatically generated by the sw_thumbnails Twig function. It includes srcset and sizes attributes to handle responsive images across different viewports.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img \n    src=\"http://shopware.local/media/06/f0/5c/1614258798/example-image.jpg\" \n    srcset=\"http://shopware.local/media/06/f0/5c/1614258798/example-image.jpg 1921w, \n            http://shopware.local/thumbnail/06/f0/5c/1614258798/example-image_1920x1920.jpg 1920w, \n            http://shopware.local/thumbnail/06/f0/5c/1614258798/example-image_800x800.jpg 800w, \n            http://shopware.local/thumbnail/06/f0/5c/1614258798/example-image_400x400.jpg 400w\" \n    sizes=\"(max-width: 1920px) and (min-width: 1200px) 284px,\n           (max-width: 1199px) and (min-width: 992px) 333px, \n           (max-width: 991px) and (min-width: 768px) 427px, \n           (max-width: 767px) and (min-width: 576px) 315px, \n           (max-width: 575px) and (min-width: 0px) 501px, 100vw\">\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Committing Project Files (Shell)\nDESCRIPTION: These shell commands initialize a new Git repository within the local Shopware project directory, add all existing project files to the Git staging area, and create the initial commit. This prepares the project for version control and deployment to PaaS.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/index.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit init\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -am \"initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Custom Service Definition Example in XML\nDESCRIPTION: Example showing how to override a service with custom implementation while maintaining parent service relationship.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/overload-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service id=\"b2b_role.repository\" class=\"Your/Class\" parent=\"b2b_role.repository_abstract\">\n            <argument id=\"Your/own/class\" type=\"service\"/>\n        </service>\n        [...]\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Example Structure for Private Composer Dependencies in Shopware 6 Plugins\nDESCRIPTION: This code block demonstrates the directory structure for bundling private Composer dependencies with a Shopware 6 plugin. The dependencies are placed in the '/packages/' folder of the plugin and can then be required like other dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-composer-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSwagBasicExample\n├── packages\n│   └── my-private-dependency/\n│       ├── composer.json\n│       └── src/\n│           └── SomeCoolService.php\n├── src/\n│   └── SwagBasicExample.php\n└── composer.json\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Native Enums for Methods - PHP (PHP 8.1+)\nDESCRIPTION: Demonstrates PHP 8.1's native enum feature by modeling method options as strict enum cases and typehints, ensuring type safety and exhaustive handling. No manual validation or in_array checks are needed. Integrates cleanly with match expressions and allows for extensibility, serialization, and additional methods. Requires PHP 8.1 or higher.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nenum IndexMethod\n{\n    case PARTIAL;\n    case FULL;\n}\n\nclass Indexer\n{\n    public function product(int $id, IndexMethod $method): void\n    {\n        match ($method) {\n            IndexMethod::PARTIAL => $this->partial($id),\n            IndexMethod::FULL => $this->full($id)\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Translator Service in a PHP Class\nDESCRIPTION: Example of implementing the injected translator service in a PHP class with constructor dependency injection and type hinting.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-translations.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprivate TranslatorInterface $translator;\n\npublic function __construct(TranslatorInterface $translator)\n{\n    $this->translator = $translator;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Source Identifier for Product in Shopware Migration\nDESCRIPTION: This method retrieves the unique identifier for a product from the source data. It's used to look up already migrated data and is specific to each converter.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getSourceIdentifier(array $data): string\n{\n    return $data['detail']['ordernumber'];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ExamplePlugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to register a custom ExamplePlugin in the Shopware PluginManager. It imports the plugin and registers it with a specific selector.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-a-modal-window.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Import all necessary Storefront plugins\n import ExamplePlugin from './example-plugin/example-plugin.plugin';\n\n // Register your plugin via the existing PluginManager\n const PluginManager = window.PluginManager;\n PluginManager.register('ExamplePlugin', ExamplePlugin, '[data-example-plugin]');\n```\n\n----------------------------------------\n\nTITLE: Adding Notice with Custom ID to Cart in Twig\nDESCRIPTION: Demonstrates adding a notice to the cart with a custom ID for reference.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.errors.notice('YOU_SHOULD_REALLY_ADD_PRODUCTS', 'add-same-message') %}\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Test Structure for Storefront Components\nDESCRIPTION: Shows the basic structure of a Jest test file with a describe block and a test function. This empty template demonstrates how to organize test code before adding assertions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/test/helper/feature.helper.test.js\n// describe is meant for grouping and structure\ndescribe('feature.helper.js', () => {\n\n    // This is your actual test\n    test('checks the flags', () => {\n        // Assertions come here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring Private Composer Dependencies in a Shopware 6 Plugin\nDESCRIPTION: This JSON snippet shows how to require private dependencies in a Shopware 6 plugin's composer.json file. The private dependency is referenced using the vendor name and package name, along with its version constraint.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-composer-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"require\": {\n    \"my-vendor-name/my-private-dependency\": \"^1.2.3\",\n}\n```\n\n----------------------------------------\n\nTITLE: App Configuration Price Fields\nDESCRIPTION: Configures price fields in app configuration using XML schema.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<card>\n    <title>Basic configuration</title>\n    <title lang=\"de-DE\">Grundeinstellungen</title>\n    <name>TestCard</name>\n    <input-field type=\"price\">\n        <name>priceField</name>\n        <label>Test price field</label>\n        <defaultValue>null</defaultValue>\n    </input-field>\n</card>\n```\n\n----------------------------------------\n\nTITLE: Using the Block Pattern with Use and Sw_Extends in Twig - Twig\nDESCRIPTION: Illustrates an alternative pattern where document-type-specific customizations are made by overwriting only the relevant blocks in invoice.html.twig after extending base.html.twig, without the need to overwrite separate includes. This leverages the use of block tags, sw_extends for inheritance, and supports easy header or content customization. Requires proper Shopware template setup and assumes the existing base template defines the overridable blocks; outputs the customized content for the targeted document type.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-12-document-template-refactoring.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% block include_header %}\n    {% sw_include '@Framework/documents/header.html.twig' %}\n{% endblock %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Framework/documents/base.html.twig' %}\n\n{% block headline %}\n    <h1>invoice</h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Custom Attributes from sw_thumbnails\nDESCRIPTION: Example HTML output from sw_thumbnails when custom attributes are applied. The resulting img tag includes the specified class, alt, and title attributes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<img \n    src=\"...\" \n    sizes=\"...\" \n    class=\"my-custom-class\" \n    alt=\"Image name\" \n    title=\"My beautiful image\">\n```\n\n----------------------------------------\n\nTITLE: Common Shopware Setup Commands\nDESCRIPTION: General commands for managing Shopware installation, including clearing components, initialization, and testing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./psh.phar clear # remove vendor components and previously set state\n./psh.phar init # init Composer, install plugins\n./psh.phar unit # execute test suite\n```\n\n----------------------------------------\n\nTITLE: Overriding Shopware 6 Dashboard Header in Twig\nDESCRIPTION: Example of overriding a specific block in the dashboard component to customize the welcome message\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_7\n\nLANGUAGE: Twig\nCODE:\n```\n{% block sw_dashboard_index_content_intro_content_headline %}\n    <h1>\n        Welcome to a customized component\n    </h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Theme Preview Media Configuration in Shopware 6\nDESCRIPTION: Setting the path to the preview image that will be displayed in the Shopware administration interface for the theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"previewMedia\": \"app/storefront/dist/assets/defaultThemePreview.jpg\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Translation\nDESCRIPTION: Updates product translation by making a PATCH request to Shopware's API with the translated description and stores the translation hash.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function __invoke(WebhookAction $action): void\n{\n    //...\n    $response = $client->patch(sprintf('%s/api/product/%s', $action->shop->getShopUrl(), $id), [\n        'translations' => [\n            'en-GB' => [\n                'name' => $name,\n                'description' => $this->translate($description)\n            ],\n        ],\n        'customFields' => [\n            'translator-last-translation-hash' => md5($description)\n        ]\n    ]);\n\n    if (!$response->ok()) {\n        $this->logger->error('Could not update product', ['response' => $response->json()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Manufacturers using API Criteria in JSON\nDESCRIPTION: Demonstrates how to use the API to count the number of distinct manufacturers. It includes both the request payload and the expected response format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {  \n            \"name\": \"count-manufacturers\",\n            \"type\": \"count\",\n            \"field\": \"manufacturerId\"\n        }\n    ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"count-manufacturers\": {\n            \"count\": 44,\n            \"extensions\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Local Reader for Bundle Data in PHP\nDESCRIPTION: This PHP code defines the `LocalBundleReader` class, which extends `AbstractReader` from the Shopware Migration Assistant framework. It's responsible for reading 'bundle' data from a local Shopware database. Key methods include `supports` and `supportsTotal` to check applicability, `readTotal` to count entities, and `read` to fetch bundle data along with associated product information using Doctrine DBAL. It relies on `MigrationContextInterface` for context and `Connection` for database queries.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationBundleExample\\Profile\\Shopware\\Gateway\\Local\\Reader;\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Driver\\ResultStatement;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Migration\\TotalStruct;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local\\Reader\\AbstractReader;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local\\ShopwareLocalGateway;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\nuse SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet\\BundleDataSet;\n\nclass LocalBundleReader extends AbstractReader\n{\n    public function supportsTotal(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface\n            && $migrationContext->getGateway()->getName() === ShopwareLocalGateway::GATEWAY_NAME;\n    }\n\n    public function readTotal(MigrationContextInterface $migrationContext): ?TotalStruct\n    {\n        $this->setConnection($migrationContext);\n\n        $query = $this->connection->createQueryBuilder()\n            ->select('COUNT(*)')\n            ->from('s_bundles')\n            ->execute();\n\n        $total = 0;\n        if ($query instanceof ResultStatement) {\n            $total = (int) $query->fetchColumn();\n        }\n\n        return new TotalStruct(BundleDataSet::getEntity(), $total);\n    }\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        // Make sure that this reader is only called for the BundleDataSet entity\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface\n            && $migrationContext->getGateway()->getName() === ShopwareLocalGateway::GATEWAY_NAME\n            && $migrationContext->getDataSet()::getEntity() === BundleDataSet::getEntity();\n    }\n\n    /**\n     * Read all bundles with associated product data\n     */\n    public function read(MigrationContextInterface $migrationContext, array $params = []): array\n    {\n        $this->setConnection($migrationContext);\n\n        // Fetch the ids of the given table with the given offset and limit\n        $ids = $this->fetchIdentifiers('s_bundles', $migrationContext->getOffset(), $migrationContext->getLimit());\n\n        // Strip the table prefix 'bundles' out of the bundles array \n        $bundles = $this->mapData($this->fetchBundles($ids), [], ['bundles']);\n        $bundleProducts = $this->fetchBundleProducts($ids);\n\n        foreach ($bundles as &$bundle) {\n            if (isset($bundleProducts[$bundle['id']])) {\n                $bundle['products'] = $bundleProducts[$bundle['id']];\n            }\n        }\n\n        return $bundles;\n    }\n\n    /**\n     * Fetch all bundles by given ids\n     */\n    private function fetchBundles(array $ids): array\n    {\n        $query = $this->connection->createQueryBuilder();\n\n        $query->from('s_bundles', 'bundles');\n        $this->addTableSelection($query, 's_bundles', 'bundles');\n\n        $query->where('bundles.id IN (:ids)');\n        $query->setParameter('ids', $ids, Connection::PARAM_STR_ARRAY);\n\n        $query->addOrderBy('bundles.id');\n\n        return $query->execute()->fetchAll();\n    }\n\n    /**\n     * Fetch all bundle products by bundle ids\n     */\n    private function fetchBundleProducts(array $ids): array\n    {\n        $query = $this->connection->createQueryBuilder();\n\n        $query->from('s_bundle_products', 'bundleProducts');\n        $this->addTableSelection($query, 's_bundle_products', 'bundleProducts');\n\n        $query->where('bundleProducts.bundle_id IN (:ids)');\n        $query->setParameter('ids', $ids, Connection::PARAM_INT_ARRAY);\n\n        return $query->execute()->fetchAll(\\PDO::FETCH_GROUP | \\PDO::FETCH_COLUMN);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Semantic HTML with Bootstrap Utilities Example\nDESCRIPTION: Example showing how to use semantic class names alongside Bootstrap utility classes for better CSS extensibility.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-10-19-bootstrap-css-utils.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Classes \"shipping-modal-actions\", \"shipping-abort\" and \"shipping-submit\" are added for better semantics and CSS extensibility, but ship no default CSS. -->\n<div class=\"border p-3 mb-3 shipping-modal-actions\">\n    <button class=\"btn btn-light shipping-abort\">Abort</button>\n    <button class=\"btn btn-primary shipping-submit\">Submit</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Twig Block Indentation Formatting in Vue-Twig Templates - HTML\nDESCRIPTION: Demonstrates the before-and-after formatting for Twig block tags inside HTML templates to align with linting requirements when processing Vue templates containing Twig syntax. No external dependencies are required; this approach is implemented as a code convention supported by a custom ESLint processor. The focus is on ensuring proper block indentation by reducing extra indentation after Twig block declarations to minimize linter confusion.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-05-28-introduce-eslint-on-vue-admin.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- before -->\\n    …\\n    <div>\\n        {% block block_name %}\\n            <div>\\n                …\\n    …\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- now -->\\n    …\\n    <div>\\n        {% block block_name %}\\n        <div>\\n        …\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Type Detector in Shopware XML Services\nDESCRIPTION: This XML snippet demonstrates how to register the custom image type detector in the Shopware dependency injection container. It uses the 'shopware.media_type.detector' tag to integrate the detector into Shopware's media handling system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/add-custom-file-extension.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Media\\TypeDetector\\CustomImageTypeDetector\">\n            <tag name=\"shopware.media_type.detector\" priority=\"10\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Declaring Experimental PHP Class with Feature Property\nDESCRIPTION: Example of declaring a new experimental PHP class using the @experimental annotation with the feature property, following the requirement to specify which feature the code belongs to.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @experimental stableVersion:v6.6.0 feature:WISHLIST\n */\nclass Foo\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing createDefaultFixture Command for Shopware E2E Testing\nDESCRIPTION: Defines the createDefaultFixture Cypress command, which creates a fixture using data from a JSON file and merges it with custom data if provided.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('createDefaultFixture', (endpoint, data = {}, jsonPath) => {\n    const fixture = new Fixture();\n    let finalRawData = {};\n\n    if (!jsonPath) {\n        jsonPath = endpoint;\n    }\n\n    // Get test data from cy.fixture first\n    return cy.fixture(jsonPath).then((json) => {\n\n        // Merge fixed test data with possible custom one\n        finalRawData = Cypress._.merge(json, data);\n\n        // Create the fixture using method from fixture service\n        return fixture.create(endpoint, finalRawData);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing ACL Configuration in PHP\nDESCRIPTION: Code to sync the ACL configuration array to the database using the AclRoutingUpdateService.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nShopware\\B2B\\AclRoute\\Framework\\AclRoutingUpdateService::create()\n    ->addConfig($myAclConfig);\n```\n\n----------------------------------------\n\nTITLE: Payment Finalization Request Structure\nDESCRIPTION: JSON schema for the payment finalization request including transaction details and request data.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"orderTransaction\": {\n    //...\n  },\n  \"requestData\": {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an ACL Table Relationship for Contact-Address in PHP\nDESCRIPTION: This PHP class `AddressContactAclTable` extends `AclTable` to define the relationship between the 'contact' context and the 'address' subject within the Shopware B2B ACL framework. The constructor specifies the table names and primary keys involved, while `getContextResolvers` provides utility classes for extracting context IDs.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Address\\Framework;\n\nuse Shopware\\B2B\\Acl\\Framework\\AclTable;\nuse Shopware\\B2B\\Contact\\Framework\\AclTableContactContextResolver;\n\nclass AddressContactAclTable extends AclTable\n{\n    public function __construct()\n    {\n        parent::__construct(\n            'contact_address', // name suffix\n            'b2b_debtor_contact', // context table\n            'id', // context primary key\n            's_user_addresses', // subject table name\n            'id' // subject primary key\n        );\n    }\n\n    protected function getContextResolvers(): array\n    {\n        return [\n            new AclTableContactContextResolver(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Shopware Console in Docker Container\nDESCRIPTION: Commands to either enter the Docker container shell to run Shopware console commands or execute them directly from the host machine.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake shell\n```\n\n----------------------------------------\n\nTITLE: Processing In-App Purchase Gateway Request in JSON\nDESCRIPTION: Example of the JSON payload sent to the In-App Purchase Gateway endpoint and the expected response format. This shows how to filter available purchases.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/in-app-purchase/in-app-purchase-gateway.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\",\n    \"inAppPurchases\": \"eyJWTEncodedTokenOfActiveInAppPurchases\"\n  },\n  \"purchases\": [\n    \"my-in-app-purchase-bronze\",\n    \"my-in-app-purchase-silver\",\n    \"my-in-app-purchase-gold\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"purchases\": [\n    \"my-in-app-purchase-bronze\",\n    \"my-in-app-purchase-silver\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Action with Manual Transaction Handling (Before)\nDESCRIPTION: Example of a flow action that manually handles database transactions by explicitly beginning and committing transactions. This approach requires developers to handle transaction logic themselves and has issues with error propagation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-02-11-transactional-flow-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SetOrderStateAction extends FlowAction implements DelayableAction\n{\n    public function handleFlow(StorableFlow $flow): void\n    {\n        $this->connection->beginTransaction();\n        \n        //do stuff\n        \n        try {\n            $this->connection->commit();\n        } catch (\\Throwable $e) {\n                \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag State Conditionally (PHP)\nDESCRIPTION: Illustrates using the `Feature::isActive` static method within an `if` statement in PHP to conditionally execute code based on whether the 'v6.5.0.0' feature flag is enabled. This is useful for branching logic based on feature availability.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Framework\\Feature;\n \nclass ApiController\n{\n  public function indexAction(Request $request)\n  {\n    // some old stuff\n    if (Feature::isActive('v6.5.0.0')) {\n      //awesome new stuff\n    }\n    // some old stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Framework Rules - Markdown Table\nDESCRIPTION: Markdown table documenting framework rule classes including logical operators (AND, OR, NOT, XOR) and time-based rules.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/rules-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| [Shopware\\Core\\Framework\\Rule\\Container\\AndRule] | Composition of rules. Matches if all match. |\n| [Shopware\\Core\\Framework\\Rule\\Container\\NotRule] | Negates one rule. |\n| [Shopware\\Core\\Framework\\Rule\\Container\\OrRule] | Composition of rules. Matches if at least one rule matches. |\n```\n\n----------------------------------------\n\nTITLE: Fallback Adapter Configuration with S3 Migration Example\nDESCRIPTION: YAML configuration demonstrating how to migrate from local storage to Amazon S3 for public files while maintaining local storage for theme, asset, and sitemap files in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  filesystem:\n    public:\n      url: \"{{S3_URL}}\"\n      type: \"amazon-s3\"\n      config:\n        bucket: \"{{AWS_BUCKET}}\"\n        region: \"{{AWS_REGION}}\"\n        endpoint: \"{{AWS_ENDPOINT}}\"\n        visibility: \"public\"\n        credentials:\n          key: \"{{AWS_ACCESS_KEY_ID}}\"\n          secret: \"{{AWS_SECRET_ACCESS_KEY}}\"\n    theme:\n      type: \"local\"\n      url: \"https://your.domain/public\"\n      config:\n        root: \"%kernel.project_dir%/public\"\n    asset:\n      type: \"local\"\n      url: \"https://your.domain/public\"\n      config:\n        root: \"%kernel.project_dir%/public\"\n    sitemap:\n      type: \"local\"\n      url: \"https://your.domain/public\"\n      config:\n        root: \"%kernel.project_dir%/public\"\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring Action Data Access: Before State (PHP)\nDESCRIPTION: This snippet demonstrates how flow actions previously accessed event data. They relied on checking if the original event implemented specific `Aware` interfaces (e.g., `CustomerAware`) and then called methods on the event itself.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    public function handle(StorableFlow $event) {\n        ...\n        $baseEvent = $event->getEvent();\n    \n        if ($baseEvent instanceof CustomerAware) {\n            $customerId= $baseEvent->getCustomerId();\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in XML\nDESCRIPTION: XML configuration for route registration in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-controller.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <import resource=\"../../Storefront/Controller/*Controller.php\" type=\"attribute\" />\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Synchronization in YAML\nDESCRIPTION: YAML configuration for entity synchronization using the Shopware API. This example shows how to synchronize a tax entity with a specified name and tax rate.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/project-config-sync.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsync:\n  entity:\n      - entity: tax\n        payload:\n          name: 'Tax'\n          taxRate: 19\n```\n\n----------------------------------------\n\nTITLE: Customizing Elasticsearch Index Settings in Shopware\nDESCRIPTION: YAML configuration for customizing Elasticsearch index settings including shard and replica counts in Shopware 6.4.12.0+.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nelasticsearch:\n  index_settings:\n    number_of_shards: 1\n    number_of_replicas: 0\n```\n\n----------------------------------------\n\nTITLE: MediaEntity Dump Output for Debugging\nDESCRIPTION: The debug output of a MediaEntity object showing its structure and available properties. This helps understand what data is available after retrieving a media object with searchMedia.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/custom-fields-of-type-media.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n//dump() output\nShopware\\Core\\Content\\Media\\MediaEntity {#5302 ▼\n  #extensions: array:1 [▶]\n  #_uniqueIdentifier: \"f69ab8ae42d04e17b2bab5ec2ff0a93c\"\n  #versionId: null\n  #translated: array:3 [▶]\n  #createdAt: DateTimeImmutable @1691755154 {#7298 ▶}\n  #updatedAt: DateTimeImmutable @1691755154 {#6848 ▶}\n  -_entityName: \"media\"\n  -_fieldVisibility: Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldVisibility {#4511 ▶}\n  #userId: \"0189e47673a671198c21a14f15cf563e\"\n  #mimeType: \"image/jpeg\"\n  #fileExtension: \"jpg\"\n  #fileSize: 21914\n  #title: null\n  #metaDataRaw: null\n  #mediaTypeRaw: \"O:47:\\\"Shopware\\\\Core\\\\Content\\\\Media\\\\MediaType\\\\ImageType\\\":3:{s:13:\\\"\\\\x00*\\\\x00extensions\\\";a:0:{}s:7:\\\"\\\\x00*\\\\x00name\\\";s:5:\\\"IMAGE\\\";s:8:\\\"\\\\x00*\\\\x00flags\\\";a:0:{}}\"\n  #metaData: array:3 [▶]\n  #mediaType: Shopware\\Core\\Content\\Media\\MediaType\\ImageType {#6626 ▶}\n  #uploadedAt: DateTimeImmutable @1691755154 {#7376 ▶}\n  #alt: null\n  #url: \"http://YOUR_SHOP_URL.TEST/media/f5/d3/45/1691755154/shirt_red_600x600.jpg\"\n  #fileName: \"shirt_red_600x600\"\n  #user: null\n  #translations: null\n  #categories: null\n  #productManufacturers: null\n  #productMedia: null\n  #avatarUsers: null\n  #thumbnails: Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailCollection {#7086 ▶}\n  #mediaFolderId: \"0189e474eda5709fb8ef632219dd6fc0\"\n  #mediaFolder: null\n  #hasFile: true\n  #private: false\n  #propertyGroupOptions: null\n  #mailTemplateMedia: null\n  #tags: null\n  #thumbnailsRo: \"O:77:\\\"Shopware\\\\Core\\\\Content\\\\Media\\\\Aggregate\\\\MediaThumbnail\\\\MediaThumbnailCollection\\\":2:{s:13:\\\"\\\\x00*\\\\x00extensions\\\";a:0:{}s:11:\\\"\\\\x00*\\\\x00elements\\\";a:4:{s:32:\\\"018 ▶\"\n  #documentBaseConfigs: null\n  #shippingMethods: null\n  #paymentMethods: null\n  #productConfiguratorSettings: null\n  #orderLineItems: null\n  #cmsBlocks: null\n  #cmsSections: null\n  #cmsPages: null\n  #documents: null\n  #appPaymentMethods: null\n  #productDownloads: null\n  #orderLineItemDownloads: null\n  #customFields: null\n  #id: \"f69ab8ae42d04e17b2bab5ec2ff0a93c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flag in config.xml (XML)\nDESCRIPTION: Illustrates how to conditionally include configuration fields (e.g., an `<input-field>`) in a `config.xml` file based on a feature flag. The field will only be available in the configuration if the 'v6.5.0.0' flag is active.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<input-field type=\"bool\" flag=\"v6.5.0.0\">\n  <name>showTitleField</name>\n  <label>Show title</label>\n  <label lang=\"de-DE\">Titel anzeigen</label>\n  <flag>v6.5.0.0</flag>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Not Filter in Shopware\nDESCRIPTION: Demonstrates Not filter usage for negating other filters. Combines multiple conditions with OR operator inside a NOT filter.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(new EqualsFilter('active', true));\n\n$criteria->addFilter(\n    new NotFilter(\n        NotFilter::CONNECTION_OR,\n        [\n            new EqualsFilter('stock', 1),\n            new EqualsFilter('availableStock', 10)\n        ]\n    )\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": [\n        { \n            \"type\": \"not\", \n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"stock\",\n                    \"value\": 1\n                },\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"availableStock\",\n                    \"value\": 1\n                }    \n            ]\n        },\n        {\n            \"type\": \"equals\",\n            \"field\": \"active\",\n            \"value\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware Composer Registry\nDESCRIPTION: Commands to add Shopware Composer Registry to project and configure authentication token.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config repositories.shopware-packages '{\"type\": \"composer\", \"url\": \"https://packages.shopware.com\"}'\n\ncomposer config bearer.packages.shopware.com <your-token>\n```\n\n----------------------------------------\n\nTITLE: Theme Checkbox Field Configuration in Shopware 6\nDESCRIPTION: Adding a customizable boolean checkbox field for fixing navigation as an alternative to the switch field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"config\": {\n    \"fields\": {\n      \"navigation-fixed\": {\n        \"label\": {\n          \"en-GB\": \"Fix navigation\",\n          \"de-DE\": \"Navigation fixieren\"\n        },\n        \"type\": \"checkbox\",\n        \"value\": true,\n        \"editable\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from SQL to Redis Cart Storage in Shopware CLI\nDESCRIPTION: Specific command-line example for migrating cart data from the default SQL storage to Redis storage in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/cart-storage.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbin/console cart:migrate sql\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Admin CLI Commands in Shopware\nDESCRIPTION: CLI commands for managing Elasticsearch in the Shopware Admin context, including indexing, resetting, and testing the admin search functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/console es:admin:index                                              \nbin/console es:admin:reset                                              \nbin/console es:admin:test\n```\n\n----------------------------------------\n\nTITLE: Setting Order Delivery State Using OrderRepository\nDESCRIPTION: Alternative approach to update order delivery state using the order repository directly. This method uses associations to access the delivery information through the order entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/order/using-the-state-machine.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function setOrderDeliveryToShipped(string $orderId, $context): void\n{\n\n    $criteria = new Criteria([$orderId]);\n    $criteria->addAssociation('deliveries');\n\n    /** @var OrderEntity $orderEntity */\n    $orderEntity = $this->orderRepository->search($criteria, $context)->first();\n    $orderDeliveryId = $orderEntity->getDeliveries()->first()->getId();\n\n    $this->stateMachineRegistry->transition(new Transition(\n        OrderDeliveryDefinition::ENTITY_NAME,\n        $orderDeliveryId,\n        'ship',\n        'stateId'\n    ), $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Shopware K6 Repository\nDESCRIPTION: Commands for cloning the Shopware K6 repository, installing dependencies, and copying the environment configuration file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/shopware/k6-shopware.git\ncd k6-shopware\nbun install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: ACL Query Filter Implementation in PHP\nDESCRIPTION: Implementation of ACL filtering for database queries using the QueryBuilder with support for ownership context.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Shopware\\B2B\\Acl\\Framework\\AclUnsupportedContextException;\nuse Shopware\\B2B\\StoreFrontAuthentication\\Framework\\OwnershipContext;\n\nprotected function applyAcl(OwnershipContext $context, QueryBuilder $query): void\n{\n    try {\n        $aclQuery = $this->aclRepository->getUnionizedSqlQuery($context);\n\n        $query->innerJoin(\n            self::TABLE_ALIAS,\n            '(' . $aclQuery->sql . ')',\n            'acl_query',\n            self::TABLE_ALIAS . '.id = acl_query.referenced_entity_id'\n        );\n\n        foreach ($aclQuery->params as $name => $value) {\n            $query->setParameter($name, $value);\n        }\n    } catch (AclUnsupportedContextException $e) {\n        // nth\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Twig Components with Conditional Accessibility Logic\nDESCRIPTION: This Twig snippet shows how developers should extend a Shopware component that has undergone accessibility improvements behind a feature flag. It demonstrates overriding both the new block (`component_list_items_inner` with `li`) and the old, deprecated block (`component_list_items` with `div`) to ensure the extension works correctly regardless of whether the `ACCESSIBILITY_TWEAKS` feature flag is enabled. The deprecated block override can be removed after the changes become default (v6.7.0).\nSOURCE: https://github.com/shopware/docs/blob/main/resources/accessibility/storefront/index.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/component/list.html.twig' %}\n\n{# Consider the new structure already #}\n{% block component_list_items_inner %}\n    {{ parent() }}\n    <li class=\"list-item\"><a href=\"#\">My item</a></li>\n{% endblock %}\n\n{# This can be removed after v6.7.0 #}\n{% block component_list_items %}\n    {{ parent() }}\n    <div class=\"list-item\"><a href=\"#\">My item</a></div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Common Identity ID in Shopware B2B Authentication\nDESCRIPTION: PHP code demonstrating how to access the common identity ID using the AuthenticationService in Shopware B2B Suite.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ownershipContext = $authenticationService\n    ->getIdentity()\n    ->getOwnershipContext();\n\necho 'The common identity id ' . $ownershipContext->authId . '\\n';\n```\n\n----------------------------------------\n\nTITLE: Extending Product Detail Twig Template in Shopware 6\nDESCRIPTION: This snippet shows the core Shopware 6 twig template for the product detail page, highlighting the block structure for tabs.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% block sw_product_detail_content_tabs %}\n    <sw-tabs class=\"sw-product-detail-page__tabs\" v-if=\"productId\">\n        {% block sw_product_detail_content_tabs_general %}\n            <sw-tabs-item\n                class=\"sw-product-detail__tab-general\"\n                :route=\"{ name: 'sw.product.detail.base', params: { id: $route.params.id } }\"\n                :hasError=\"swProductDetailBaseError\"\n                :title=\"$tc('sw-product.detail.tabGeneral')\">\n                {{ $tc('sw-product.detail.tabGeneral') }}\n            </sw-tabs-item>\n        {% endblock %}\n\n        ...\n\n        {% block sw_product_detail_content_tabs_reviews %}\n            <sw-tabs-item\n                class=\"sw-product-detail__tab-reviews\"\n                :route=\"{ name: 'sw.product.detail.reviews', params: { id: $route.params.id } }\"\n                :title=\"$tc('sw-product.detail.tabReviews')\">\n                {{ $tc('sw-product.detail.tabReviews') }}\n            </sw-tabs-item>\n        {% endblock %}\n    </sw-tabs>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Declaring Theme Plugin Requirements in composer.json - JSON\nDESCRIPTION: Illustrates how to use the require property in a composer.json file to establish plugin or theme dependencies for Shopware 6 themes. Each key in the require object specifies a dependency and version constraint, ensuring that installation of the current theme only succeeds if dependencies are present. Inputs are dependency names and version requirements, and outputs are enforced by Composer during install/update.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-22-refactor-theme-inheritance.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\" \\\"require\\\": {\\n        \\\"swag/previous-theme\\\": \\\"~1.1\\\"\\n    },\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CookieProvider in Shopware 6 (PHP)\nDESCRIPTION: PHP implementation of a custom CookieProvider class that extends the default CookieProviderInterface in Shopware 6. It demonstrates how to add custom cookies and cookie groups to the cookie consent manager.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-cookie-to-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace PluginName\\Framework\\Cookie;\n\nuse Shopware\\Storefront\\Framework\\Cookie\\CookieProviderInterface;\n\nclass CustomCookieProvider implements CookieProviderInterface {\n\n    private CookieProviderInterface $originalService;\n\n    public function __construct(CookieProviderInterface $service)\n    {\n        $this->originalService = $service;\n    }\n\n    private const singleCookie = [\n        'snippet_name' => 'cookie.name',\n        'snippet_description' => 'cookie.description ',\n        'cookie' => 'cookie-key',\n        'value' => 'cookie value',\n        'expiration' => '30'\n    ];\n\n    // cookies can also be provided as a group\n    private const cookieGroup = [\n        'snippet_name' => 'cookie.group_name',\n        'snippet_description' => 'cookie.group_description ',\n        'entries' => [\n            [\n                'snippet_name' => 'cookie.first_child_name',\n                'cookie' => 'cookie-key-1',\n                'value'=> 'cookie value',\n                'expiration' => '30'\n            ],\n            [\n                'snippet_name' => 'cookie.second_child_name',\n                'cookie' => 'cookie-key-2',\n                'value'=> 'cookie value',\n                'expiration' => '60'\n            ]\n        ],\n    ];\n\n    public function getCookieGroups(): array\n    {\n        return array_merge(\n            $this->originalService->getCookieGroups(),\n            [\n                self::cookieGroup,\n                self::singleCookie\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Inheritance in Shopware API\nDESCRIPTION: Example showing how to enable parent-child inheritance relationships using the sw-inheritance header. Commonly used with products and their variants.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/request-headers.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/product\n--header 'sw-inheritance: 1'\n```\n\n----------------------------------------\n\nTITLE: Refactoring Action Data Access: After State (PHP)\nDESCRIPTION: This snippet shows the updated approach for accessing data within flow actions. Actions now receive a `StorableFlow` object and directly access the required data (typically identifiers or scalar values) from its `store` using methods like `hasStore` and `getStore`, removing the dependency on the original event structure and `Aware` interfaces.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    public function handle(StorableFlow $event) {\n        ...\n        if ($event->hasStore('customerId') {\n            $customerId= $event->getStore('customerId');\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with ArrayFacade\nDESCRIPTION: Shows how to set a new element in a product payload array using the set() method.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/miscellaneous-script-services-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set product = services.cart.products.get(hook.ids.get('p1')) %}\n\n{% do product.payload.set('test', 1) %}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSearch Environment Variables for Shopware\nDESCRIPTION: Required environment variables configuration for setting up OpenSearch integration with Shopware. Includes server URL, multilingual indexing settings, and search feature toggles.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPENSEARCH_URL=http://localhost:9200\nES_MULTILINGUAL_INDEX=1\nSHOPWARE_ES_ENABLED=1\nSHOPWARE_ES_INDEXING_ENABLED=1\nSHOPWARE_ES_INDEX_PREFIX=sw\n```\n\n----------------------------------------\n\nTITLE: Implementing ResetInterface to Reset Memoization - PHP\nDESCRIPTION: This PHP code shows the recommended solution: FooService now implements Symfony\\Contracts\\Service\\ResetInterface, adding a public reset() method that clears the memoized state. The getData functionality remains as before. Dependency: symfony/contracts library is required. Key parameter: reset() resets private data array to empty before new requests, preventing data leakage or inconsistency. This enables compatibility with modern PHP servers that do not reboot per request.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-09-reset-class-state-during-requests.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\Service\\ResetInterface;\n\nclass FooService implements ResetInterface\n{\n    private array $data = [];\n    \n    public function getData(): array\n    {\n        if ($this->data) {\n            return $this->data;\n        }\n        \n        return $this->data = $this->fetchDataFromSomewhere();\n    }\n\n    public function reset(): void\n    {\n        $this->data = [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Entity Schema in XML for Shopware Apps\nDESCRIPTION: Apps define custom entities using a `config/custom_entity.xml` file. This XML structure specifies the entity name (prefixed with `custom_entity_` or `ce_` and a developer prefix), its fields, and their data types. Supported types include scalars (int, string, text, float, date, boolean), JSON fields, and many-to-one/many-to-many associations. Each entity automatically gets an `IdField` primary key and a required `TranslatedField(label)` for display. The system automatically manages database schema updates during app installation/updates.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-14-technical-concept-custom-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nconfig/custom_entity.xml\n```\n\n----------------------------------------\n\nTITLE: Extending a Class with an Abstract Class in PHP\nDESCRIPTION: Example showing how to refactor a class by introducing an abstract class that implements the interface. This demonstrates the proper way to extend a class in Shopware while maintaining interface compatibility.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** Before */\nclass MailService implements MailServiceInterface\n \n/** After */\nclass MailService extends AbstractMailService\nclass AbstractMailService implements MailServiceInterface\n```\n\n----------------------------------------\n\nTITLE: Custom Component Template Definition\nDESCRIPTION: HTML template for the custom component, implementing a basic card layout with a title\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/routing-navigation/add-new-tab.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/view/sw-product-detail-custom/sw-product-detail-custom.html.twig\n<sw-card title=\"Custom\">\n    Hello world!\n</sw-card>\n```\n\n----------------------------------------\n\nTITLE: Full Icon Implementation Example\nDESCRIPTION: Complete example showing icon implementation in a Storefront template with extended configuration including size and pack type.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-icons.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/base.html.twig' %}\n\n{% block base_body %}\n\n    {# We want to set our own icon here #}\n    <h1>Custom icon:</h1>\n    {% sw_icon 'done-outline-24px' style {\n        'size': 'lg',\n        'namespace': 'TestPlugin',\n        'pack': 'solid'\n    } %}\n    {{ parent() }}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering Product Subscriber Service\nDESCRIPTION: XML configuration for registering the product subscriber as a kernel event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\ProductSubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Custom Repository Implementation in PHP\nDESCRIPTION: Example PHP class showing how to extend and customize the base RoleRepository with additional functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/overload-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n    \n[...]\n    \nclass YourRoleRepository extends RoleRepository\n{\n    public array $myService;\n        \n    public function __construct()\n    {\n        $args = func_get_args();\n        \n        $this->myService = array_pop($args);       \n        \n        parent::__construct(... $args);\n    }\n         \n    public function updateRole(RoleEntity $role): RoleEntity\n    {\n        // your stuff\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundle Reader for Shopware 6 API Migration in PHP\nDESCRIPTION: Defines a `BundleReader` class extending `ApiReader` within a Shopware 6 plugin (SwagMigrationBundleExample). The `supports` method checks if the migration context uses the Shopware profile, the API gateway, and targets the `BundleDataSet`. The `getApiRoute` method specifies the corresponding Shopware 5 API controller route (`SwagMigrationBundles`) to fetch the bundle data during an API migration. Depends on the Migration Assistant framework.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationBundleExample\\Profile\\Shopware\\Gateway\\Api\\Reader;\n\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Api\\Reader\\ApiReader;\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Api\\ShopwareApiGateway;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\nuse SwagMigrationBundleExample\\Profile\\Shopware\\DataSelection\\DataSet\\BundleDataSet;\n\nclass BundleReader extends ApiReader\n{\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface\n            && $migrationContext->getGateway()->getName() === ShopwareApiGateway::GATEWAY_NAME\n            && $migrationContext->getDataSet()::getEntity() === BundleDataSet::getEntity();\n    }\n\n    protected function getApiRoute(): string\n    {\n        return 'SwagMigrationBundles'; // This defines which API route should called\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Storefront Plugin Using NPM Dependency\nDESCRIPTION: This code demonstrates how to import and use an NPM package (missionlog) in a Shopware 6 Storefront plugin. It shows the initialization of the logger and basic plugin structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-npm-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/example.plugin.js\nconst { PluginBaseClass } = window;\n\n// Import logger\nimport { log } from 'missionlog';\n\n// Initializing the logger\nlog.init({ initializer: 'INFO' }, (level, tag, msg, params) => {\n    console.log(`${level}: [${tag}] `, msg, ...params);\n});\n\n// The plugin skeleton\nexport default class ExamplePlugin extends PluginBaseClass {\n    init() {\n        console.log('init');\n\n        // Use logger\n        log.info('initializer', 'example plugin got started', this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Twig Evaluation Macro and Capturing Output\nDESCRIPTION: This Twig snippet demonstrates how the previously defined `evaluate` macro is invoked within the Twig template used by `ScriptRule`. It passes the necessary context (`%1$s`) to the macro and stores the returned value in the `var` variable, which is then outputted for validation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{%% set var = _self.evaluate(%1$s) %%}\n{{ var }}\n```\n\n----------------------------------------\n\nTITLE: Searching Products with Language Fallback in Elasticsearch\nDESCRIPTION: Example of searching products in German with English as the fallback language using the new multilingual index structure. This demonstrates the language inheritance mechanism.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-11-new-language-inheritance-mechanism-for-opensearch.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// GET /sw_product/_search\n{\n  \"query\": {\n    \"multi_match\": {\n      \"query\": \"some keyword\",\n      \"fields\": [\n          \"title.de.search\", // context languge\n          \"title.en.search\" // fallback language\n      ],\n      \"type\": \"best_fields\" \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SCSS Variables in Shopware 6 Plugin\nDESCRIPTION: Creates a variables.scss file to define reusable color variables for the plugin's styles.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-styling.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/abstract/variables.scss\n// in variables.scss\n$sw-storefront-assets-color-background: blue;\n```\n\n----------------------------------------\n\nTITLE: Marking Experimental Block in Storefront Twig Template\nDESCRIPTION: Example of marking a specific block as experimental in a Twig template with version annotation. Used for isolating experimental features in the storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-10-experimental-features.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# @experimental stableVersion:v6.6.0 #}\n{% block awesome_new_feature %}\n   ...\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Waiting for API Response with Route Alias in Cypress\nDESCRIPTION: This snippet demonstrates waiting for a specific network request to complete in Cypress. It uses `cy.server()` and `cy.route()` to intercept POST requests to `/api/search/category` and assign the alias `getData`. The test then uses `cy.wait('@getData')` to pause execution until this specific API call finishes, after which it asserts that the response status is 200 using `expect`. This is a robust way to synchronize tests with background operations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.server();\n\n// Route POST requests with matching URL and assign an alias to it\ncy.route({\n    url: '/api/search/category',\n    method: 'post'\n}).as('getData');\n\n// Later, you can use the alias to wait for the API response\ncy.wait('@getData').then((xhr) => {\n    expect(xhr).to.have.property('status', 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring In-App Purchase Gateway in Shopware App Manifest\nDESCRIPTION: XML configuration to enable the In-App Purchase Gateway in a Shopware app's manifest file. This sets up the gateway endpoint URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/in-app-purchase/in-app-purchase-gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest>\n    <!-- ... -->\n\n    <gateways>\n        <inAppPurchases>https://my-app.server.com/inAppPurchases/gateway</inAppPurchases>\n    </gateways>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Cache Invalidation Script\nDESCRIPTION: Shows how to get and process IDs of modified product manufacturers for cache invalidation. Demonstrates basic usage of the cache-invalidation hook.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.event.getIds('product_manufacturer') %}\n\n{% if ids.empty %}\n    {% return %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Configuration Structure in Shopware 6\nDESCRIPTION: The core theme.json file structure showing the basic configuration including name, author, description, views, media paths, style, script, and asset configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleTheme\",\n  \"author\": \"Shopware AG\",\n  \"description\": {\n    \"en-GB\": \"My custom theme\",\n    \"de-DE\": \"Mein custom thema\"\n  },\n  \"views\": [\n     \"@Storefront\",\n     \"@Plugins\",\n     \"@SwagBasicExampleTheme\"\n  ],\n  \"previewMedia\": \"app/storefront/dist/assets/defaultThemePreview.jpg\",\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\",\n    \"@Storefront\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  \"script\": [\n    \"@Storefront\",\n    \"app/storefront/dist/storefront/js/swag-basic-example-theme/swag-basic-example-theme.js\"\n  ],\n  \"asset\": [\n    \"@Storefront\",\n    \"app/storefront/src/assets\"\n  ],\n  \"configInheritance\": [\n    \"@Storefront\",\n    \"@OtherTheme\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Checkbox Labels in Cypress Tests\nDESCRIPTION: Provides Cypress code examples for interacting with a checkbox label. It contrasts the less stable approach of using potentially fragile framework-dependent selectors (`.custom-checkbox label`) with the preferred method of using a specific, application-related class (`.checkout-confirm-tos-label`) for improved test reliability.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ✗ Avoid using framework specific syntax from Bootstrap as a selector.\ncy.get('.custom-checkbox label').click();\n\n// ✓ Instead, you should use a shopware specific class like `.checkout-confirm-tos-label`.\ncy.get('.checkout-confirm-tos-label').click();\n```\n\n----------------------------------------\n\nTITLE: Creating a Private or Final Service Decorator in PHP\nDESCRIPTION: Provides an alternative decorator implementation for cases where service decoration is needed for internal purposes only. Utilizes @final annotation for restricting class extensibility and employs private and readonly dependencies to enforce architectural constraints. The load method implements caching logic around the decorated service. Requires CacheInterface and a cache key; inputs are Context objects and outputs are RuleCollections, with caching behavior as a functional constraint.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/decorator-pattern.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nabstract class AbstractRuleLoader\n{\n    abstract public function load(Context $context): RuleCollection;\n}\n\n/**\n * @final - if you want that developers can use your service\n */\nclass CachedLoader extends AbstractRuleLoader\n{\n    public function __construct(\n        private readonly AbstractRuleLoader $decorated,\n        private readonly CacheInterface $cache\n    ) {\n    }\n\n    public function load(Context $context): RuleCollection {\n        return $this->cache->get(\n            self::CACHE_KEY, \n            fn (): RuleCollection => $this->decorated->load($context)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation or Exception Based on Feature Flag (PHP)\nDESCRIPTION: Demonstrates using `Feature::triggerDeprecationOrThrow` in PHP. This method will trigger a deprecation notice if the feature flag ('v6.5.0.0') is inactive, but throw an exception if the flag is active, typically used to enforce the removal of deprecated code associated with the feature.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Framework\\Feature;\n \n/**\n * @deprecated tag:v6.5.0 - Class is deprecated, use ... instead\n */\nclass ApiController\n{\n  public function indexAction(Request $request)\n  {\n     Feature::triggerDeprecationOrThrow('v6.5.0.0', 'Class is deprecated, use ... instead');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chained Cache Invalidation Filtering\nDESCRIPTION: Shows how to chain multiple filter operations for more precise cache invalidation targeting specific actions and property changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.event.getIds('product') %}\n\n{% set ids = ids.only('insert').with('description', 'parentId') %}\n{% if ids.empty %}\n    {% return %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Commercial Bundles in Shopware 6\nDESCRIPTION: Environment variable configuration example for enabling specific commercial bundles like CustomPricing and Subscription.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/commercial/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSHOPWARE_COMMERCIAL_ENABLED_BUNDLES=CustomPricing,Subscription\n```\n\n----------------------------------------\n\nTITLE: Selective Stock Update Based on Field Changes in Shopware 6 ProductIndexer (PHP)\nDESCRIPTION: This snippet filters stock updates to execute only when specific relevant fields ('stock', 'isCloseout', 'minPurchase') have changed. Called within the ProductIndexer update method, it obtains primary keys where these properties have changed and triggers the stock updater. Dependencies include event data structures and ProductDefinition constants. Input is the written entity event; output is an efficient, targeted stock update, reducing the frequency of unnecessary computations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-available-stock.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$stocks = $event->getPrimaryKeysWithPropertyChange(ProductDefinition::ENTITY_NAME, ['stock', 'isCloseout', 'minPurchase']);\n$this->stockUpdater->update($stocks, $event->getContext());\n```\n\n----------------------------------------\n\nTITLE: Implementing New Function in Example Service in PHP\nDESCRIPTION: Updates the ExampleService class to implement the new doSomethingNew() function added to the abstract class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/adjusting-service.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\n\nclass ExampleService extends AbstractExampleService\n{\n    public function getDecorated(): AbstractExampleService\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    public function doSomething(): string\n    {\n        return 'Did something.';\n    }\n\n    public function doSomethingNew(): string\n    {\n        return 'Did something new.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Storefront and Administration\nDESCRIPTION: Shopware CLI commands to replace traditional shell scripts for building and watching storefront and administration. Includes options to watch specific extensions or exclude certain ones.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/helper-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project storefront-build\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project admin-build\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project storefront-watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project admin-watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project admin-watch --only-extensions <name>,<second>....\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project admin-watch --skip-extensions <name>,<second>....\n```\n\n----------------------------------------\n\nTITLE: Updating App Manifest with Entry Point URL for Shopware Admin Extension (XML)\nDESCRIPTION: Adds the admin section to the manifest.xml file, specifying the base app URL for the entry point of the Shopware admin extension.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/starter-admin-extension.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <!-- ... -->\n    </meta>\n  <setup>\n    <registrationUrl>http://127.0.0.1:8000/app/lifecycle/register</registrationUrl>\n    <secret>TestSecret</secret>\n  </setup>\n    <admin>\n        <base-app-url>http://127.0.0.1:8080</base-app-url>\n    </admin>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Calculating Prices with PriceCalculator in PHP\nDESCRIPTION: Guideline for handling price calculations within the cart. All calculations must be performed using an appropriate `PriceCalculator` implementation. These calculators are managed within the `Shopware\\Core\\Checkout\\Cart\\Price` class.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/cart-process.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPriceCalculator\n```\n\n----------------------------------------\n\nTITLE: Clearing Shopware Cache via CLI\nDESCRIPTION: Command to clear Shopware's cache from the command line after making template changes. This is necessary to see the changes in the storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/customize-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: PHP Namespace Reference for ProductSearchRouteDecorator\nDESCRIPTION: Reference to the PHP namespace path for the ProductSearchRoute decorator class that handles advanced product search functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/Search-and-suggest-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Commercial\\AdvancedSearch\\Domain\\Search\\ProductSearchRouteDecorator\n```\n\n----------------------------------------\n\nTITLE: Migrating from Docblock Annotations to PHP Attributes for Routing in Symfony\nDESCRIPTION: These Symfony controller snippets demonstrate the migration from traditional PHP docblock annotations to PHP 8+ native attributes for route configuration. The first example uses legacy comments; the second uses native attributes for type-safety and better tooling. Requires PHP 8+ and Symfony's Routing component. Typically, the controller method receives HTTP requests and returns responses as part of a web application.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * @Route(\"/blog\", name=\"blog_list\")\n     */\n    public function list(): Response\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass BlogController extends AbstractController\n{\n    #[Route('/blog', name: 'blog_list')]\n    public function list(): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExamplePageletLoadedEvent in Shopware\nDESCRIPTION: A PHP class that extends PageletLoadedEvent to handle events when a custom pagelet is loaded. This event can be used by other plugins to modify or extend the pagelet's functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-pagelet.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Storefront/Pagelet/Example/ExamplePageletLoadedEvent.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Pagelet\\Example;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Pagelet\\PageletLoadedEvent;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ExamplePageletLoadedEvent extends PageletLoadedEvent\n{\n    protected ExamplePagelet $pagelet;\n\n    public function __construct(ExamplePagelet $pagelet, SalesChannelContext $salesChannelContext, Request $request)\n    {\n        $this->pagelet = $pagelet;\n        parent::__construct($salesChannelContext, $request);\n    }\n\n    public function getPagelet(): ExamplePagelet\n    {\n        return $this->pagelet;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Cache Invalidation in Shopware\nDESCRIPTION: Configuration to disable cache invalidation for logged-in users or users with filled carts, allowing pages to be cached by HTTP cache or reverse proxy even in these scenarios.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/shopware.yaml\nshopware:\n    cache:\n        invalidation:\n            http_cache: []\n```\n\n----------------------------------------\n\nTITLE: Running Elasticsearch Update Commands in Bash\nDESCRIPTION: Terminal commands to update Elasticsearch indices mapping and reindex the data. These commands apply the new field mappings to the Elasticsearch server and populate it with data.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-add-more-fields-to-product-search.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Update the Elasticsearch indices mapping, introduce since 6.5.4.0\nbin/console es:mapping:update\n\n// Assume the new field data are already set in products, otherwise you don't need to reindex\nbin/console es:index --no-queue\n```\n\n----------------------------------------\n\nTITLE: Disabling Composer Dependencies Bundling\nDESCRIPTION: YAML configuration to disable automatic bundling of composer dependencies in extension ZIP.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# .shopware-extension.yml\nbuild:\n  zip:\n    composer:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-Controller Structure in PHP for B2B Suite\nDESCRIPTION: This snippet shows the typical structure of a sub-controller in the B2B Suite. It includes actions for listing and assigning entities, demonstrating the context-dependent nature of sub-controllers.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/complex-views.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace My\\Namespace;\n\nclass SubController\n{\n    /**\n     * Provides the layout for the controller and contains the listing\n     */\n    public function indexAction() { [...] }\n\n    /**\n     * Post only!\n     *\n     * Assign two id's to each other\n     */\n    public function assignAction() { [...] }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Settings Items in Shopware\nDESCRIPTION: Shows how to protect settings items by adding privilege requirements.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nModule.register('your-plugin-module', {\n    settingsItem: [{\n        group: 'system',\n        to: 'sw.your.plugin.detail',\n        privilege: 'your_key.your_role' // e.g. product.viewer\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Custom Entities via Admin API in Shopware\nDESCRIPTION: Demonstrates how to perform a search on custom entities using the Shopware Admin API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/custom-entity-blog\n```\n\n----------------------------------------\n\nTITLE: Complete composer.json Example for Shopware Theme Plugin - JSON\nDESCRIPTION: Provides a sample composer.json for a Shopware 6 custom development theme plugin. The structure defines the plugin name, description, type, autoload settings, required dependencies, and Shopware-specific extra fields like main plugin class and localized labels. The necessary dependency is listed in the require field, while autoload and extra are for Shopware recognition. Inputs are standard composer.json fields, outputs are utilized by Composer and Shopware for setup and integration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-22-refactor-theme-inheritance.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"name\\\": \\\"swag/my-development-theme\\\",\\n    \\\"description\\\": \\\"My Development Theme\\\",\\n    \\\"type\\\": \\\"shopware-platform-plugin\\\",\\n    \\\"version\\\": \\\"1.7\\\",\\n    \\\"license\\\": \\\"MIT\\\",\\n    \\\"autoload\\\": {\\n        \\\"psr-4\\\": {\\n            \\\"MyDevelopmentTheme\\\\\\\\\\\": \\\"src/\\\"\\n        }\\n    },\\n    \\\"require\\\": {\\n        \\\"swag/previous-theme\\\": \\\"~1.1\\\"\\n    },\\n    \\\"extra\\\": {\\n        \\\"shopware-plugin-class\\\": \\\"MyDevelopmentTheme\\\\\\\\MyDevelopmentTheme\\\",\\n        \\\"label\\\": {\\n            \\\"de-DE\\\": \\\"Theme MyDevelopmentTheme plugin\\\",\\n            \\\"en-GB\\\": \\\"Theme MyDevelopmentTheme plugin\\\"\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using compatUtils Helper for Vue Compatibility in JavaScript\nDESCRIPTION: Example demonstrating how to use the compatUtils helper from Vue compat to make components work in both compatibility modes. This approach allows for conditional code execution based on the current compat mode setting.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-12-add-jest-runner-with-disabled-compat-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example\nimport { compatUtils } from '@vue/compat';\n\n...\n\nif (compatUtils.isCompatEnabled('INSTANCE_LISTENERS')) {\n    return this.$listeners;\n}\n\nreturn {};\n\n...\n```\n\n----------------------------------------\n\nTITLE: Protected Internal Framework Method Example in PHP\nDESCRIPTION: Demonstrates a protected internal method in the GridHelper class that handles limit and offset extraction from requests. These methods are not guaranteed to maintain compatibility across minor version changes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/concept/method-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Common\\Controller;\n\n[...]\n\nclass GridHelper\n{    \n    [...]\n    \n    /**\n     * @internal\n     */\n    protected function extractLimitAndOffset(Request $request, SearchStruct $struct): void\n    {\n        $struct->offset = $request->getParam('offset', null);\n        $struct->limit = $request->getParam('limit', null);\n    }\n\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced StaticEntityRepository Configuration Options\nDESCRIPTION: Shows various configuration options for the StaticEntityRepository including different types of collections and results that can be passed to the constructor, such as EntityCollections, AggregationResultCollections, and IdSearchResults.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-01-mocking-repositories.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass SomeCoreClassTest extends TestCase\n{\n    public function testFoo() \n    {\n        $repository = new StaticEntityRepository([\n            new UnitCollection([\n                new UnitEntity(),\n            ]),\n            new AggregationResultCollection([\n                new AvgResult('some-aggregation', 12.0),\n            ]),\n            new EntitySearchResult(\n                'entity', \n                1, \n                new EntityCollection(), \n                new AggregationResultCollection(), \n                new Criteria(), \n                Context::createDefaultContext()\n            ),\n            [Uuid::randomHex(), Uuid::randomHex(), Uuid::randomHex()]       \n            new IdSearchResult(0, [], new Criteria(), Context::createDefaultContext()),\n        ]);\n        \n        $class = new SomeCoreClass($repository);\n        \n        $class->foo();\n        \n        // some assertions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscriber Implementation for All Config Fields as SCSS Variables\nDESCRIPTION: Extends the ThemeVariableSubscriber to automatically convert all plugin configuration fields to SCSS variables. Uses a name converter to transform camelCase names to kebab-case for proper SCSS naming conventions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Subscriber;\n\n// ...\nuse Symfony\\Component\\Serializer\\NameConverter\\CamelCaseToSnakeCaseNameConverter;\n\nclass ThemeVariableSubscriber implements EventSubscriberInterface\n{\n    // ...\n\n    public function onAddVariables(ThemeCompilerEnrichScssVariablesEvent $event): void\n    {\n        $configFields = $this->systemConfig->get('SwagBasicExample.config', $event->getSalesChannelId());\n\n        foreach($configFields as $key => $value) {\n            // convert `customVariableName` to `custom-variable-name`\n            $kebabCased = str_replace('_', '-', (new CamelCaseToSnakeCaseNameConverter())->normalize($key));\n\n            $event->addVariable($kebabCased, $value);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Initial State Using StateMachineRegistry in Shopware PHP\nDESCRIPTION: These code snippets demonstrate the previous approach to retrieving the initial state ID for order, order delivery, and transaction state machines by using the getInitialState method from the StateMachineRegistry. The method is called with specific state machine names and a context, returning the corresponding state ID. This approach requires loading full state machine objects, resulting in high database load, and has been deprecated and replaced in Shopware 6. Dependencies include the StateMachineRegistry service and context-aware state constants.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-initial-state-id-loader.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->stateMachineRegistry->getInitialState(OrderStates::STATE_MACHINE, $context->getContext())->getId(),\n//...\n$this->stateMachineRegistry->getInitialState(OrderDeliveryStates::STATE_MACHINE, $context->getContext())->getId(),\n//...\n$this->stateMachineRegistry->getInitialState(OrderTransactionStates::STATE_MACHINE, $context->getContext())->getId(),\n//...\n```\n\n----------------------------------------\n\nTITLE: Injecting Component into Section via Position ID in Shopware Admin (JavaScript)\nDESCRIPTION: This snippet illustrates the 'Component Sections' feature, allowing developers to inject components into predefined areas. It uses `sw.ui.componentSection()` with a specific `positionID` ('sw-manufacturer-card-custom-fields__before') to add a component. In this example, a prebuilt 'card' component is added, configured with props (title, subtitle), and linked to a custom iframe view using a `locationId`. This requires the Shopware Admin Extension SDK (`sw` object).\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-12-07-admin-extension-api-standards.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding a card before the manufacturer card with custom fields entries.\nsw.ui.componentSection('sw-manufacturer-card-custom-fields__before').add({\n    // The Extension-API provides different components out of the box\n    component: 'card', \n    // Props are depending on the type of component\n    props: {\n        title: 'This is the title',\n        subtitle: 'I am the subtitle',\n        // Some components can render a custom view. In this case the extension can render custom content in the card.\n        locationId: 'example-app-card-before-manufactuer-custom-fields-card'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Logo Asset Path (File Path)\nDESCRIPTION: This file path indicates the location (`./public/logo.svg`) for the Sales Agent's logo image file. Replacing the file at this path allows for branding customization. Square dimensions are recommended.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/appearance.md#2025-04-22_snippet_3\n\nLANGUAGE: filepath\nCODE:\n```\n./public/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of B2B Actions\nDESCRIPTION: Reference table listing B2B action classes including ChangeEmployeeStatusAction for employee status management and ChangeCustomerSpecificFeaturesAction for B2B component configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/actions-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Class                                           | Description                                                    | Component           |\n|:------------------------------------------------|:---------------------------------------------------------------|:--------------------|\n| ChangeEmployeeStatusAction                      | Assigns the configured status to the employee                  | Employee Management |\n| ChangeCustomerSpecificFeaturesAction            | Adds or removes the configured b2b components for the customer | Employee Management |\n```\n\n----------------------------------------\n\nTITLE: Plugin Test Setup with Element Creation\nDESCRIPTION: Test setup including element creation and plugin instantiation in the beforeEach lifecycle hook.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nimport HelloWorldPlugin from 'src/plugin/hello-world/hello-world.plugin';\n\ndescribe('HelloWorldPlugin tests', () => {\n\n    // Definition of plugin\n    let plugin;\n\n    beforeEach(() => {\n        // you need to get an element for the plugin\n        const mockedElement = document.createElement('div');\n        plugin = new HelloWorldPlugin(mockedElement);\n\n    });\n\n    afterEach(() => {\n        // Teardown\n    });\n\n    test('custom plugin exists', () => {\n        // your actual test, temporary filled with a placeholder\n        console.log(plugin);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CMS Page Structure in JSON\nDESCRIPTION: Demonstrates the hierarchical tree structure of a CMS page in Shopware, showing the relationship between sections, blocks, and slots.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/content/shopping-experiences-cms.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  cmsPage: {\n      sections: [{\n          blocks: [{\n              slots: [{\n                  slot: \"content\",\n                  type: \"product-listing\",\n                  /* ... */\n              }]\n          }, /* ... */]\n      }, /* ... */]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchStruct Class in PHP for Shopware B2B\nDESCRIPTION: This code defines the SearchStruct class, which is a data container for filter, sorting, and pagination data used in Shopware B2B Suite's listing service. It includes properties for filters, limit, offset, ordering, and search term.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/listing-service.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Common\\Repository;\n\nuse Shopware\\B2B\\Common\\Filter\\Filter;\n\nclass SearchStruct\n{\n    /**\n     * @var Filter[]\n     */\n    public array $filters = [];\n\n    public int $limit;\n\n    public int $offset;\n\n    public string $orderBy;\n\n    public string $orderDirection = 'ASC';\n\n    public string $searchTerm;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Manager Read-only Mode\nDESCRIPTION: YAML configuration to disable extension installation in Shopware Administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    deployment:\n        runtime_extension_management: false\n```\n\n----------------------------------------\n\nTITLE: Registering BundleConverter in Service XML Configuration\nDESCRIPTION: XML configuration to register the BundleConverter as a service in Shopware's dependency injection container. It injects required dependencies like MappingService and LoggingService, and tags it as a migration converter for discovery by the Migration Assistant.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationBundleExample\\Profile\\Shopware\\Converter\\BundleConverter\">\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Mapping\\MappingService\"/>\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Logging\\LoggingService\"/>\n    <tag name=\"shopware.migration.converter\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Defining EnumField in SQL Database Schema for Shopware\nDESCRIPTION: SQL definition for creating a table with an ENUM column to store EnumField values. Note that INT is used for numeric enums instead of ENUM type.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/enum-field.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `batch_order` (\n    `id` BINARY(16) NOT NULL,\n    `payment_method` ENUM('paypal', 'credit_card', 'invoice') NOT NULL,\n    `amount` INT NOT NULL,\n    PRIMARY KEY (`id`)\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending CookiePermissionPlugin in JavaScript\nDESCRIPTION: This snippet shows how to import the original CookiePermissionPlugin and create a new class that extends it. This is the basic structure for overriding an existing plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/override-existing-javascript.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CookiePermissionPlugin from 'src/plugin/cookie/cookie-permission.plugin';\n\nexport default class MyCookiePermission extends CookiePermissionPlugin {\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storefront Unit Tests with Composer\nDESCRIPTION: Command to execute all storefront unit tests and generate a code coverage report using Composer. This uses scripts provided by the Shopware development template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> composer run storefront:unit\n```\n\n----------------------------------------\n\nTITLE: Renaming or Removing JavaScript Plugins\nDESCRIPTION: Shows how to deprecate a JavaScript plugin class by adding deprecation annotations and creating a replacement plugin class.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// buy-button.plugin.js\n/**\n* @deprecated tag:v6.5.0 - Use NewBuyButtonPlugin instead (new-buy-button.plugin.js)\n*/\nexport default class BuyButtonPlugin extends Plugin {\n    // ...\n}\n \n// new-buy-button.plugin.js\nexport default class NewBuyButtonPlugin extends Plugin {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic sw-alert Component Test in Shopware\nDESCRIPTION: A simple test for the sw-alert component that verifies it mounts correctly. This test uses shallowMount and stubs the sw-icon component to focus on testing the alert component in isolation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { shallowMount } from '@vue/test-utils';\nimport 'src/app/component/base/sw-alert';\n\ndescribe('components/base/sw-alert', () => {\n    it('should be a Vue.js component', () => {\n        const wrapper = shallowMount(Shopware.Component.build('sw-alert'), {\n            stubs: ['sw-icon']\n        });\n\n        // Assert if our component is a vue instance = mountes correctly\n        expect(wrapper.vm).toBeTruthy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Cart Calculation Process Flow\nDESCRIPTION: Mermaid diagram illustrating the multi-stage calculation process of the cart, from enrichment through to persistence.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/cart.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Cart Calculation\n---\nstateDiagram-v2\n    [*] --> Enrich\n    Enrich --> Process\n    Process --> Validate\n    Validate --> Validate : repeat until no changes occur\n    Validate --> Persist\n    Persist --> [*]\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Endpoint Action Button in Shopware 6 Twig Script\nDESCRIPTION: This Twig script handles the action button click by processing the selected product IDs and returning a JSON response. It demonstrates how to provide feedback to the user in the administration interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.request.ids %}\n\n{% set response = services.response.json({\n    \"actionType\": \"notification\",\n    \"payload\": {\n        \"status\": \"success\",\n        \"message\": \"You selected \" ~ ids|length ~ \" products.\"\n    }\n}) %}\n\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Activating Digital Sales Rooms Plugin in Shopware using Symfony Commands\nDESCRIPTION: This code snippet demonstrates the Symfony commands to refresh the plugin list, install and activate the SwagDigitalSalesRooms plugin, and clear the cache. These steps are necessary after obtaining the plugin files.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/admin-side-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# refresh the list of available plugins\nbin/console plugin:refresh\n# find the plugin **name** (first column on the list). In this case, it is \"**SwagDigitalSalesRooms\"\nbin/console plugin:install **SwagDigitalSalesRooms** --activate\n# clear the cache afterward\nbin/console cache:clear\n\n# Now it is ready to use\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Theme Assets\nDESCRIPTION: Text representation of the file structure showing where compiled assets and theme files are stored in the Shopware public directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-assets-to-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n// <shopware root>/public\n# \n.\n└── theme\n    ├── <theme-uuid>\n    │   ├── css\n    │   │   └── all.css\n    │   └── js\n    │       └── all.js\n    └── <theme-asset-uuid>\n        └── asset\n            └── your-image.png <-- Your asset is copied here  \n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Nullable Properties Using Nullsafe Operator in PHP\nDESCRIPTION: This PHP 8.0+ snippet demonstrates using the nullsafe operator (?->) for succinctly accessing deep or nested nullable properties (address and addressLine2) on an object. If the chain resolves to null at any step, the operation short-circuits, returning null safely and avoiding exceptions. Requires $user instance; $addressLine2 is either a string|null and subsequent logic can check its value directly.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$user = new User(/**  */);\n$addressLine2 = $user?->address?->addressLine2;\n\nif ($addressLine2 !== null) {\n    //do something\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding FeatureFlagExtension to PHPUnit Configuration in XML\nDESCRIPTION: This snippet shows how to add the FeatureFlagExtension to the extension list in the phpunit.xml configuration file. This is required to enable the feature flag functionality in unit tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-31-add-more-unit-tests-namespaces-to-featureflag-extension.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions>\n    ...\n    <bootstrap class=\"Shopware\\Core\\Test\\PHPUnit\\Extension\\FeatureFlag\\FeatureFlagExtension\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Documenting Product CRUD Events in Shopware\nDESCRIPTION: This snippet outlines the events triggered when a product is written or deleted in Shopware. It requires 'product:read' permission and includes a payload with operation details, primary key, and other relevant data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": \"product\",\n  \"operation\": \"update insert\",\n  \"primaryKey\": \"array string\",\n  \"payload\": \"array\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": \"product\",\n  \"operation\": \"deleted\",\n  \"primaryKey\": \"array string\",\n  \"payload\": \"array\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Thumbnail Generation in Shopware YAML\nDESCRIPTION: This YAML configuration enables remote thumbnail generation in Shopware and sets the URL pattern for the external CDN service. It allows for customization of the thumbnail URL structure using various parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/media/remote-thumbnail-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  media:\n    remote_thumbnails:\n      enable: true\n      pattern: '{mediaUrl}/{mediaPath}?width={width}&ts={mediaUpdatedAt}'\n```\n\n----------------------------------------\n\nTITLE: Context Rules State Flow\nDESCRIPTION: Mermaid diagram demonstrating how cart rules are applied through iterations, showing the example of car purchase with automatic additions of sunglasses and discount.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/cart.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Empty_cart : checkout started\n    Empty_cart --> Enrichment : User orders a car\n        state Enrichment {\n    Cart_with_lineitem(car) --> Cart_with_lineitem(car+sunglasses) : Iteration 1 - Cart automatically adds sunglasses\n    Cart_with_lineitem(car+sunglasses) --> Cart_with_lineitem(car+sunglasses+2%discount) : Iteration 2 - Cart automatically adds discount\n    }\n    Cart_with_lineitem(car+sunglasses+2%discount) --> [*] : valid\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Ignores\nDESCRIPTION: YAML configuration for ignoring specific errors or warnings in the validation process. This is done by creating a .shopware-extension.yaml file in the extension root.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  ignore:\n    # Ignore all errors by identifier\n    - identifier: 'Shopware.XXXXXX'\n    # Ignore all errors by identifier and path\n    - identifier: 'Shopware.XXXXXX'\n      path: 'path/to/file.php'\n    # Ignore all errors by message and path\n    - message: 'Some error message'\n      path: 'path/to/file.php'\n    # Ignore all errors by message\n    - message: 'Some error message'\n```\n\n----------------------------------------\n\nTITLE: App Lifecycle Hook Documentation\nDESCRIPTION: Documentation for app lifecycle hooks, specifically the app-activated event that triggers when an app is activated.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | app-activated |\n| Since | 6.4.9.0 |\n| Class | Shopware\\Core\\Framework\\App\\Event\\Hooks\\AppActivatedHook |\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI on Fedora/CentOS/SUSE/RedHat Linux\nDESCRIPTION: Script to add the Shopware repository and install the CLI tool on RPM-based Linux distributions using YUM/DNF.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n  'https://dl.cloudsmith.io/public/friendsofshopware/stable/setup.rpm.sh' \\\n  | sudo -E bash\nsudo dnf install shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Accessing Product Properties with ProductProxy in Twig\nDESCRIPTION: This snippet shows how to access and modify product properties using the ProductProxy. It creates a new price structure with graduated pricing based on quantity.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/product-script-services-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{ to: 30, price: services.price.create({ 'default': { 'gross': 10, 'net': 10} }) },\n    { to: null, price: services.price.create({ 'default': { 'gross': 5, 'net': 5} }) },\n]) %}\n```\n\n----------------------------------------\n\nTITLE: Processing Translation Message in PHP for Shopware Exceptions\nDESCRIPTION: This code snippet shows how the translation message is processed in Shopware. It removes non-alphanumeric characters and capitalizes words to create a snippet key from the translation message.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/exception.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npreg_replace('([^a-zA-Z0-9]+)', '', ucwords($exception->getTranslationMessage()))\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Composer on macOS\nDESCRIPTION: Homebrew command to install PHP 8.3 and Composer on macOS. This one-line command sets up the required PHP environment for Shopware 6 on macOS systems.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install php@8.3 composer\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Remotes for Shopware PaaS Deployment - Shell\nDESCRIPTION: This snippet uses the `git remote -v` command to verify the configured remotes in the local Git repository. The output lists both fetch and push URLs for each remote, confirming the presence of both the 'origin' (GitHub or equivalent) and 'shopware' (PaaS environment) remotes. No special dependencies are required other than Git. This verification step is essential to ensure correct deployment targets before pushing code.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/repository.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit remote -v\n\norigin\\tgit@github.com:<project-repository>.git (fetch)\norigin\\tgit@github.com:<project-repository>.git (push)\nshopware\\t<paas-url>.git (fetch)\nshopware\\t<paas-url>.git (push)\n```\n\n----------------------------------------\n\nTITLE: Styling the Block Preview with SCSS\nDESCRIPTION: This SCSS file defines a simple two-column grid layout for the block preview, with appropriate spacing and padding to create a visually appealing representation of the block in the block selection interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/preview/sw-cms-preview-my-image-text-reversed.scss\n.sw-cms-preview-my-image-text-reversed {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 20px;\n    padding: 15px;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CommercialB2BBundle for B2B Components in PHP\nDESCRIPTION: Demonstrates how to extend CommercialB2BBundle and add the 'B2B' type attribute to the describeFeatures() method for B2B components. This helps identify and categorize B2B-specific features.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Shopware\\Commercial\\B2B\\YourB2BComponent;\n\nclass YourB2BComponent extends CommercialB2BBundle\n{\n    public function describeFeatures(): array\n    {\n        return [\n            [\n                ...,\n                'type' => self::TYPE_B2B,\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Syntax in Shopware App Scripts: Equality Checks\nDESCRIPTION: Demonstrates the use of '===' and '!==' operators for equality checks in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if var === 1 %}\n    ...\n{% endif %}\n\n{% if var !== 1 %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Theme Asset Configuration without Storefront Inheritance in Shopware 6\nDESCRIPTION: Configuring paths to theme assets like images and fonts without inheriting from the Storefront theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"asset\": [\n     \"app/storefront/src/assets\"\n   ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Staging Mode in Shopware using YAML\nDESCRIPTION: YAML configuration for Shopware's staging mode, including options for mailing, storefront, administration, and sales channel domain rewriting.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/staging.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# <shopware-root>/config/packages/staging.yaml\nshopware:\n    staging:\n        mailing:\n            # Disables the sending of mails (default: true)\n            disable_delivery: true\n        storefront:\n            # Shows a banner in the storefront when staging mode is active (default: true)\n            show_banner: true\n        administration:\n            # Shows a banner in the administration when staging mode is active (default: true)\n            show_banner: true\n        sales_channel:\n            domain_rewrite:\n                # See below for more information\n        elasticsearch:\n            # Checks that no indices are existing yet (default: true)\n            check_for_existence: true\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram of B2B Structure using Mermaid\nDESCRIPTION: An ER diagram showing the relationships between B2B entities: business partners, employees, and roles. It details the table structure with fields and defines relationships between entities, including how they connect to the core customer entity.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/concepts/entities-and-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    swag_b2b_business_partner {\n        uuid id PK\n        uuid customer_id FK\n        uuid default_role_id FK\n        json custom_fields\n    }\n    swag_b2b_employee {\n        uuid id PK\n        uuid business_partner_customer_id FK\n        uuid role_id FK\n        boolean active\n        string first_name\n        string last_name\n        string email\n        string password\n        datetime recovery_time\n        string recovery_hash\n    }\n    swag_b2b_role {\n        uuid id PK\n        uuid business_partner_customer_id FK\n        string name\n        json permissions\n    }\n    swag_b2b_business_partner |o--|| customer : \"is company administrator\"\n    swag_b2b_employee }o--|| customer : \"uses data for orders from\"\n    swag_b2b_employee }o--o| swag_b2b_role : \"has role\"\n    swag_b2b_role }o--|| customer : \"belongs to\"\n```\n\n----------------------------------------\n\nTITLE: Marking Internal Feature-Flagged Code in Shopware (PHP)\nDESCRIPTION: This code snippet demonstrates the @internal annotation combined with a feature flag to label newly introduced code as non-API, meaning it can be changed or removed freely before feature release. The annotation includes the specific feature flag (e.g., FEATURE_NEXT_11111). Once the feature is released, the @internal marker should be removed to make the code publicly accessible, enabling flexible iterative development.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @internal (flag:FEATURE_NEXT_11111)\n */\n```\n\n----------------------------------------\n\nTITLE: Registering ProductSubscriber Service\nDESCRIPTION: XML configuration to register the ProductSubscriber as a service in the Symfony container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/fetching-data-from-entity-selection.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Subscriber\\ProductSubscriber\">\n            <tag name=\"kernel.event_subscriber\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Custom Log Entry Implementation for Empty Fields\nDESCRIPTION: Implementation of a custom LogEntry class for handling empty necessary fields, extending BaseRunLogEntry with specific logging functionality and snippet handling.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Migration\\Logging\\Log;\n\nclass EmptyNecessaryFieldRunLog extends BaseRunLogEntry\n{\n    private string $emptyField;\n\n    public function __construct(string $runId, string $entity, string $sourceId, string $emptyField)\n    {\n        parent::__construct($runId, $entity, $sourceId);\n        $this->emptyField = $emptyField;\n    }\n\n    public function getCode(): string\n    {\n        $entity = $this->getEntity();\n        if ($entity === null) {\n            return 'SWAG_MIGRATION_EMPTY_NECESSARY_FIELD';\n        }\n\n        return sprintf('SWAG_MIGRATION_EMPTY_NECESSARY_FIELD_%s', mb_strtoupper($entity));\n    }\n\n    public function getLevel(): string\n    {\n        return self::LOG_LEVEL_WARNING;\n    }\n\n    public function getTitle(): string\n    {\n        $entity = $this->getEntity();\n        if ($entity === null) {\n            return 'The entity has one or more empty necessary fields';\n        }\n\n        return sprintf('The %s entity has one or more empty necessary fields', $entity);\n    }\n\n    public function getParameters(): array\n    {\n        return [\n            'entity' => $this->getEntity(),\n            'sourceId' => $this->getSourceId(),\n            'emptyField' => $this->emptyField,\n        ];\n    }\n\n    public function getDescription(): string\n    {\n        $args = $this->getParameters();\n\n        return sprintf(\n            'The %s entity with the source id %s does not have the necessary data for the field(s): %s',\n            $args['entity'],\n            $args['sourceId'],\n            $args['emptyField']\n        );\n    }\n\n    public function getTitleSnippet(): string\n    {\n        return sprintf('%s.%s.title', $this->getSnippetRoot(), 'SWAG_MIGRATION__SHOPWARE_EMPTY_NECESSARY_DATA_FIELDS');\n    }\n\n    public function getDescriptionSnippet(): string\n    {\n        return sprintf('%s.%s.description', $this->getSnippetRoot(), 'SWAG_MIGRATION__SHOPWARE_EMPTY_NECESSARY_DATA_FIELDS');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Repository Integration\nDESCRIPTION: Implementation example for DynamoDB repository integration with installation command and configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/06-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDBRepository } from '@shopware-ag/app-server-sdk/integration/dynamodb';\n\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\n\nconst client = new DynamoDBClient();\n\n// Usage with Hono\nconfigureAppServer(app, {\n  appName: \"Test\",\n  appSecret: \"Test\",\n  shopRepository: new DynamoDBRepository(client, 'my-table-name'),\n});\n\n// Without Hono\nconst appServer = new AppServer(..., new DynamoDBRepository(client, 'my-table-name'));\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Condition in XML Manifest for Shopware App\nDESCRIPTION: This XML snippet defines a custom rule condition in a Shopware app manifest. It specifies the condition name, group, script file, and constraints including operator selection and customer group selection.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ExampleApp/manifest.xml -->\n<!-- ... -->\n<rule-conditions>\n    <rule-condition>\n        <name>My custom rule condition</name>\n        <group>customer</group>\n        <script>customer-group-rule-script.twig</script>\n        <constraints>\n            <single-select name=\"operator\">\n                <label>Operator</label>\n                <placeholder>Choose an operator...</placeholder>\n                <options>\n                    <option value=\"=\">\n                        <name>Is equal to</name>\n                    </option>\n                    <option value=\"!=\">\n                        <name>Is not equal to</name>\n                    </option>\n                </options>\n                <required>true</required>\n            </single-select>\n            <multi-entity-select name=\"cusstomerGroupIds\">\n                <label>Customer groups</label>\n                <placeholder>Choose customer groups...</placeholder>\n                <entity>customer_group</entity>\n                <required>true</required>\n            </multi-entity-select>\n        </constraints>\n    </rule-condition>\n</rule-conditions>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: CMS Block Preview Template\nDESCRIPTION: HTML template for previewing the custom CMS block in the administration interface\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/content/cms/add-custom-cms-blocks.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"sw-cms-preview-swag-image-text-reversed\">\n    <div>\n        <h2>Lorem ipsum dolor</h2>\n        <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr.</p>\n    </div>\n    <img src=\"https://example.com/preview.jpg\" alt=\"Preview image\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter to PHP Interface with Deprecation\nDESCRIPTION: Demonstrates the approach for adding a new, optional parameter to a PHP interface method. It uses comments and a `@deprecated` tag to indicate the upcoming change and maintain backward compatibility, although implementation requires workarounds.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\ninterface DataValidationFactoryInterface\n{\n    /**\n     * @param array $data - @deprecated tag:v6.4.0 - Will be introduced in v6.4.0\n     */\n    public function create(SalesChannelContext $context /* array $data */): DataValidationDefinition;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Price using API Criteria in JSON\nDESCRIPTION: Illustrates how to use the API to find the maximum price of products. It includes both the request payload and the expected response format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {  \n            \"name\": \"max-price\",\n            \"type\": \"max\",\n            \"field\": \"price\"\n        }\n    ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"max-price\": {\n            \"max\": \"979\",\n            \"extensions\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Elasticsearch Indices\nDESCRIPTION: Deletes all indices in the Elasticsearch cluster using the REST API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'elasticsearch:9200/_all'\n```\n\n----------------------------------------\n\nTITLE: Defining BackedEnums in PHP for Shopware EnumField\nDESCRIPTION: Examples of defining BackedEnums for string and integer values, which can be used with EnumField to restrict possible values.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/enum-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum PaymentMethod : string {\n    case PAYPAL = 'paypal';\n    case CREDIT_CARD = 'credit_card';\n    case INVOICE = 'invoice';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum BatchOrderSize: int {\n    case DOZEN = 12;\n    case SCORE = 20;\n    case SMALL_GROSS = 120;\n    case GROSS = 144;\n    case GRAND = 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Checksum in Shopware Converter (PHP)\nDESCRIPTION: This protected method generates a unique checksum for a given data array using md5 hash of its serialized contents. Used within Shopware's migration converters, it helps detect unchanged data in subsequent migrations. Requires no external dependencies beyond PHP's built-in functions, and expects an array as input, setting the resulting checksum to the object property for further processing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/* SwagMigrationAssistant/Migration/Converter/Converter.php */\\n\\n/**\\n * Generates a unique checksum for the data array to recognize changes\\n * on repeated migrations.\\n */\\nprotected function generateChecksum(array $data): void\\n{\\n    $this->checksum = md5(serialize($data));\\n}\n```\n\n----------------------------------------\n\nTITLE: Order Address Event Payload Structure in JSON\nDESCRIPTION: JSON structure for order_address events in Shopware. It includes the entity name, operation type, primary key, and payload array.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"order_address\",\"operation\":\"update insert\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"order_address\",\"operation\":\"deleted\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\n----------------------------------------\n\nTITLE: Renaming or Removing JavaScript Services\nDESCRIPTION: Demonstrates how to properly deprecate a JavaScript service class by adding deprecation annotations and creating a replacement class.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// http-client.service.js\n/**\n* @deprecated tag:v6.5.0 - Use NewHttpClient instead (new-http-client.service.js)\n*/\nexport default class HttpClient {\n    // ...\n}\n \n// new-http-client.service.js\nexport default class NewHttpClient {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Load Priority in Manifest XML\nDESCRIPTION: Demonstrates how to set template loading priority in the manifest.xml file to control the order of template loading relative to other extensions. Supports values above 0 for earlier loading and below 0 for later loading.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/index.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        ....\n    </meta>\n    <storefront>\n        <template-load-priority>100</template-load-priority>\n    </storefront>    \n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Routes in PHP\nDESCRIPTION: Example configuration array structure for defining ACL routes mapping controllers and actions to resources and privileges.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$myAclConfig =  [\n    'contingentgroup' => //resource name\n    [\n        'B2bContingentGroup' => // controller name\n        [\n            'index' => 'list', // action name => privilege name\n            [...]\n            'detail' => 'detail',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: External Composable Integration\nDESCRIPTION: Example of using external composable functions in Pinia stores.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useMyComposable() {\n  const count = ref(0);\n\n  const doubled = computed(() => count.value * 2);\n\n  function increment() {\n    count.value++;\n  }\n\n  function decrement() {\n    count.value--;\n  }\n\n  return { count, doubled, increment, decrement };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMyComposable } from '../composables/myComposable';\n\nconst store = Shopware.Store.register('myStore', useMyComposable);\n```\n\n----------------------------------------\n\nTITLE: Registering ProductConverter in services.xml for Shopware 6\nDESCRIPTION: This XML snippet shows how to register the ProductConverter service in the services.xml file. It defines the service with its class and dependencies, and tags it as a migration converter.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\Converter\\ProductConverter\">\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Mapping\\MappingService\"/>\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Logging\\LoggingService\"/>\n    <tag name=\"shopware.migration.converter\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Deleting Product and Media via Shopware API\nDESCRIPTION: Deletes existing products and media assets using their IDs through the Shopware Import API.\nSOURCE: https://github.com/shopware/docs/blob/main/assets/adr/catalog-import/examples.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8000/api/import/{{import_id}}/record/delete\nContent-Type: application/json\nAccept: application/json\nAuthorization: Bearer {{auth_token}}\n{\n    \"products\": [\n        \"018a6b222b5a734d956fb03dda765bfa\"\n    ],\n    \"media\": [\n        \"018a6b222b5a734d956fb03dda765bfb\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product and Media via Shopware API\nDESCRIPTION: Updates an existing product and its associated media using the Shopware Import API. Demonstrates how to modify product name and media title.\nSOURCE: https://github.com/shopware/docs/blob/main/assets/adr/catalog-import/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8000/api/import/{{import_id}}/record\nContent-Type: application/json\nAccept: application/json\nAuthorization: Bearer {{auth_token}}\n\n{\n    \"media\": [\n        {\n            \"id\": \"018a6b222b5a734d956fb03dda765bfb\",\n            \"title\": \"New title\"\n        }\n    ],\n    \"products\": [\n        {\n            \"id\": \"018a6b222b5a734d956fb03dda765bfa\",\n            \"name\": \"My update product\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Prepared Payment in Shopware 6 (JSON)\nDESCRIPTION: JSON request and response for capturing a prepared payment. The request includes order transaction, order, and pre-order payment data. The response contains the payment status and an optional message.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"shopId\": \"hRCw2xo1EDZnLco4\",\n    \"appVersion\": \"1.0.0\"\n  },\n  \"orderTransaction\": {\n    //...\n  },\n  \"order\": {\n    //...\n  },\n  \"preOrderPayment\": {\n    //...\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"authorize\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"authorize\",\n  \"message\": \"The customer failed to pass the credit check.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Panel Linking Implementation in HTML\nDESCRIPTION: Demonstrates how to link different Ajax Panels together using IDs and targets.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n <div ... data-id=\"foreign\"></div>\n <a [...] data-target=\"foreign\">Open in another component</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Parameter to PHP Abstract Class Method\nDESCRIPTION: Illustrates adding an optional parameter (`$criteria`) to an abstract method in a PHP abstract class. It uses standard optional parameter syntax (`?Criteria $criteria = null`) and a `@deprecated` tag to note that the parameter will become mandatory later. This is presented as a cleaner alternative to the interface approach.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\nabstract class AbstractCustomerRoute\n{\n    /**\n     * @deprecated tag:v6.4.0 - Parameter $criteria will be mandatory in future implementation\n     */\n    abstract public function load(Request $request, SalesChannelContext $context/*, Criteria $criteria*/): CustomerResponse;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring Snippets for Custom Entity Admin UI in JSON\nDESCRIPTION: This JSON snippet illustrates the required structure for defining administration text snippets (translations) for a custom entity module generated via `admin-ui.xml`. It shows how to organize snippets under a main key (e.g., `custom_entity_bundle`) and provides keys for the module title, description, tab names, card names, and field labels/help texts/placeholders, corresponding to the structure defined in the `admin-ui.xml` configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-19-blog-concept.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"custom_entity_bundle\": {\n       \"moduleTitle\": \"Blog posts\",\n       \"moduleDescription\": \"Blog is colorful and has pics\",\n       \"tabs\": {\n           \"main\": \"Main settings\",\n           \"tabClone\": \"Optional stuff\"\n       },\n       \"cards\": {\n           \"general\": \"General stuff\",\n           \"cardClone\": \"Just a clone\",\n           \"generalSecond\": \"More general stuff\"\n       },\n       \"fields\": {\n           \"swTitle\": \"Title\",\n           \"swContent\": \"Product description\",\n           \"swContentHelpText\": \"Help text!\",\n           \"swContentPlaceholder\": \"Enter description...\",\n           \"position\": \"Positioning\"\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure package.json scripts for Cypress\nDESCRIPTION: NPM script configuration to run Cypress tests locally\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n   \"open\": \"node_modules/.bin/cypress open\"\n},\n```\n\n----------------------------------------\n\nTITLE: Generating Proof for Shopware App Registration Response in PHP\nDESCRIPTION: Demonstrates how to generate the proof required in the registration response to verify possession of the app secret.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\n/** @var RequestInterface $request */\n$queryString = $request->getUri()->getQuery();\nparse_str($queryString, $queryValues);\n$proof = \\hash_hmac(\n    'sha256',\n    $queryValues['shop-id'] . $queryValues['shop-url'] . $appname,\n    $appSecret\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog for Business Event Logging in Shopware\nDESCRIPTION: This snippet shows how to configure Monolog to log all sent emails and business events by setting the business_event_handler_buffer to info level. This configuration enables detailed monitoring but may impact performance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n  handlers:\n    business_event_handler_buffer:\n      level: info\n```\n\n----------------------------------------\n\nTITLE: Configuring Default CMS Page for Products (Shopware, Markdown/PHP Reference)\nDESCRIPTION: This snippet documents the system configuration key used to specify the default CMS page for products in Shopware. When a product has no CMS page assigned, the system will check the config value and use its referenced page. The dependency is the proper definition of the configuration constant \\Shopware\\Core\\Content\\Product\\ProductDefinition::CONFIG_KEY_DEFAULT_CMS_PAGE_PRODUCT. Expected input is a valid CMS page ID, and the main constraint is that no cmsPageId is directly assigned to the product.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-04-06-add-default-cms-layouts-to-products-and-categories.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\\Shopware\\Core\\Content\\Product\\ProductDefinition::CONFIG_KEY_DEFAULT_CMS_PAGE_PRODUCT\n```\n\n----------------------------------------\n\nTITLE: Defining ProductWriter for Shopware 6 Migration in PHP\nDESCRIPTION: This code snippet shows the ProductWriter class that extends AbstractWriter. It defines the supports method to indicate that this writer is responsible for handling product entities during the migration process.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Migration\\Writer;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DefaultEntities;\n\nclass ProductWriter extends AbstractWriter\n{\n    public function supports(): string\n    {\n        return DefaultEntities::PRODUCT;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Joke Service with Activity Flag\nDESCRIPTION: Modified version of JokeService that includes an activity status flag.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass JokeService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        this.isActive = false;\n    }\n\n    joke() {\n        return this.httpClient\n            .get(`https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political`)\n            .then(response => response.data)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StockData Instance from Array in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a StockData instance using the fromArray static method, including both required and optional attributes for stock information.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/loading-stock-information-from-different-source.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$stockData = \\Shopware\\Core\\Content\\Product\\Stock\\StockData::fromArray([\n    'productId' => 'product-1',\n    'stock' => 5,\n    'available' => true,\n    'minPurchase' => 1,\n    'maxPurchase' => 10,\n    'isCloseout' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Twig Template Configuration Access\nDESCRIPTION: Example of accessing configuration values in Twig templates using the config function\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ config('DemoApp.config.field1') }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sanitizer Helper via Shopware Global Object\nDESCRIPTION: Shows how to access the Sanitizer Helper through the Shopware Global Object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/the-sanitizer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sanitizer = Shopware.Helper.SanitizerHelper;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bar Entity Definition with Many-to-Many Association in PHP\nDESCRIPTION: Adds ManyToManyAssociationField to the Bar entity definition to establish the relationship with Foo entities through the mapping definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n\n        new ManyToManyAssociationField(\n            'foos',\n            FooDefinition::class,\n            FooBarMappingDefinition::class,\n            'bar_id',\n            'foo_id'\n        ),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Component Slots with sw-alert in Shopware\nDESCRIPTION: An example of testing a component's slot content by passing content to the default slot and verifying it renders correctly. This test demonstrates how to test that the alert component properly displays the message passed to its default slot.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    it('should render the message inside the default slot', () => {\n        const wrapper = shallowMount(Shopware.Component.build('sw-alert'), {\n            slots: {\n                default: 'My custom message'\n            }\n        });\n        expect(wrapper.find('.sw-alert__message').text()).toBe('My custom message');\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining CustomAppEvent for Application Events - PHP\nDESCRIPTION: Establishes a CustomAppEvent class implementing both CustomAppAware and FlowEventAware, inheriting from the base Event. It defines private properties for event name and data, to be accessed via constructor and getter methods. This class serves as the representation of app-defined events within the Shopware flow system.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nclass CustomAppEvent extends Event implements CustomAppAware, FlowEventAware\\n{\\n    private string $name;\\n\\n    private array $data;\\n    \\n    // __construct()\\n    //getters\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Profiler Backend in Shopware XML Configuration\nDESCRIPTION: This XML snippet shows how to register a custom profiler backend as a service in Shopware. It uses the 'shopware.profiler' tag and specifies the integration name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/profiling.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"App\\Profiler\">\n    <tag name=\"shopware.profiler\" integration=\"Console\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Entity Allow-List Example in JSON\nDESCRIPTION: Provides a concrete example of the entity allow-list showing how to specify category and product entities with their respective fields for data collection.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-03-collecting-entity-data.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"category\": [\n        \"id\",\n        \"parentId\",\n        \"type\"\n    ],\n    \"product\": [\n        \"id\",\n        \"parentId\",\n        \"name\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Offcanvas Hook Implementation\nDESCRIPTION: Hook triggered when loading the off-canvas menu, with access to menu pagelet data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Storefront\\Pagelet\\Menu\\Offcanvas\\MenuOffcanvasPageletLoadedHook\n```\n\n----------------------------------------\n\nTITLE: Fetching Fixtures for K6 Tests\nDESCRIPTION: Command to fetch the necessary fixtures (salutation IDs, country IDs, etc.) for running K6 tests against a Shopware store.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run fetch-fixtures.ts\n```\n\n----------------------------------------\n\nTITLE: Navigating to the External Repository Directory (Bash)\nDESCRIPTION: Provides example commands to change the current working directory to the location where the external repository's documentation source code resides (e.g., `../docs` relative to the `developer-portal` or an absolute path like `/www/shopware/docs`). This step is needed before configuring the external repository itself.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd ../docs\n# or\ncd /www/shopware/docs\n```\n\n----------------------------------------\n\nTITLE: General Module Structure in Shopware Administration\nDESCRIPTION: Demonstrates the hierarchical organization of a typical module in the Administration, showing how pages contain views which contain components. At least one page is mandatory for each module.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/architecture/administration-concept.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n|- page1\n  |- view1\n    |- component1\n    |- component2\n      |- subcomponent1\n      |- …\n  |- view2\n    |- component3\n    |- …\n```\n\n----------------------------------------\n\nTITLE: Adding Warning to Cart in Twig\nDESCRIPTION: Shows how to add a warning message to the cart using the notice() method. This will display a message but won't block checkout.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.errors.notice('YOU_SHOULD_REALLY_ADD_PRODUCTS') %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Increment Storage in Shopware\nDESCRIPTION: YAML configuration to disable the increment storage functionality in Shopware. When disabled, features like Queue Notification and Module Usage Overview in the Administration will not work.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/increment.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    increment:\n        user_activity:\n            type: 'array'\n\n        message_queue:\n            type: 'array'\n```\n\n----------------------------------------\n\nTITLE: Adding New Function to Abstract Service in PHP\nDESCRIPTION: Demonstrates how to add a new function to an existing service for backwards compatibility. The new function is added as a public method in the abstract class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/adjusting-service.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nabstract class AbstractExampleService\n{\n    abstract public function getDecorated(): AbstractExampleService; \n\n    abstract public function doSomething(): string;\n\n    public function doSomethingNew(): string\n    {\n        return $this->getDecorated()->doSomethingNew();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Twig Blocks in Storefront\nDESCRIPTION: Shows how to deprecate a Twig block in the storefront using the 'deprecated' tag with proper deprecation annotations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% block the_block_name %}\n    {% deprecated '@deprecated tag:v6.5.0 - Block will be removed completely including the content' %}\n    <div>Content</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Flex Template Dev-Tools for PHPUnit Testing\nDESCRIPTION: A command to install the dev-tools package via Composer, which is required to run PHPUnit tests with the Symfony Flex template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/php-unit.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require --dev dev-tools\n```\n\n----------------------------------------\n\nTITLE: Disabling Shopware Auto-Update in YAML\nDESCRIPTION: Configuration to disable Shopware's auto-update functionality in a cluster environment, ensuring updates are controlled via deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/cluster-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    auto_update:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cart Storage in Shopware YAML (Before v6.6.8.0)\nDESCRIPTION: YAML configuration for using Redis as cart storage in Shopware versions before 6.6.8.0. It specifies the Redis URL with host, port, and database index.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/cart-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  cart:\n    redis_url: 'redis://host:port/dbindex?persistent=1'\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Checkout Cart Route - Shopware XML\nDESCRIPTION: This XML snippet defines a custom route for subscription checkout cart pages in the Storefront, specifying the route's path, HTTP method, and controller action. Context and cart scoping is established by setting custom defaults such as _subscriptionCart and _subscriptionContext to true. Dependencies include Shopware's routing system, and key parameters like subscriptionToken (for identifying the subscription session) are required. This configuration ensures that the cart and context used are distinct for subscription flows; the route should reside in a routes XML file (e.g., store-api.xml or storefront.xml).\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/subscriptions/guides/request-scoping.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <route id=\"frontend.subscription.checkout.cart.page\"\n           path=\"/subscription/checkout/cart/{subscriptionToken}\"\n           methods=\"GET\"\n           controller=\"subscription.storefront.controller.checkout::cartPage\">\n        <default key=\"_noStore\">true</default>\n        <default key=\"_routeScope\"><list><string>storefront</string></list></default>\n        <default key=\"_subscriptionCart\">true</default>\n        <default key=\"_subscriptionContext\">true</default>\n        <default key=\"_controllerName\">checkout</default>\n        <default key=\"_controllerAction\">cartpage</default>\n        <default key=\"_templateScopes\">subscription</default>\n        <option key=\"seo\">false</option>\n    </route>\n```\n\n----------------------------------------\n\nTITLE: Default Icon Path Structure\nDESCRIPTION: The default directory path structure for storing custom icons in a Shopware plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-icons.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<YourPlugin>/src/Resources/app/storefront/dist/assets/icon/default\n```\n\n----------------------------------------\n\nTITLE: Using Type Casting with Caution for Type Conversion in PHP\nDESCRIPTION: Shows how to use explicit type casting (e.g., `(string)`) to convert a variable `$foo` to a specific type. However, it warns that this approach should be used carefully as PHP's type juggling can lead to unexpected results or hide underlying type errors, making debugging harder.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is mixed, but we expect only string\n\n$foo = (string) $foo; // this might hide unexpected conversions from non-string values to string\n```\n\n----------------------------------------\n\nTITLE: Form Disable Plugin Implementation in Twig\nDESCRIPTION: Shows how to implement form element disabling during panel reload using the ajaxPanelFormDisable plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div\n    class=\"b2b--ajax-panel\"\n    data-url=\"{{ path('frontend.b2b.b2bcontact.grid') }}\"\n    data-plugins=\"ajaxPanelFormDisable\"\n>\n    <!-- will load content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Refreshing DAL Index with Queue in Shopware 6\nDESCRIPTION: Creates a complete reindex from the Shopware DAL using a queue to prevent server overload.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/console dal:refresh:index --use-queue\n```\n\n----------------------------------------\n\nTITLE: Alternative Repository Implementations\nDESCRIPTION: Code examples for implementing different storage solutions including Deno KV, Cloudflare KV, Bun SQLite, and Better SQLite3.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/06-integration.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DenoKVRepository } from '@shopware-ag/app-server-sdk/integration/deno-kv';\n\n// Usage with Hono\nconfigureAppServer(app, {\n  appName: \"Test\",\n  appSecret: \"Test\",\n  shopRepository: new DenoKVRepository('my-namespace'),\n});\n\n// Without Hono\nconst appServer = new AppServer(..., new DenoKVRepository('my-namespace'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CloudflareShopRepository } from '@shopware-ag/app-server-sdk/integration/cloudflare-kv';\n\n// Usage with Hono\nconfigureAppServer(app, {\n  appName: \"Test\",\n  appSecret: \"Test\",\n  shopRepository: new CloudflareShopRepository(env.KV_BINDING),\n});\n\n// Without Hono\nconst appServer = new AppServer(..., new CloudflareShopRepository(env.KV_BINDING));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BunSqliteRepository } from '@shopware-ag/app-server-sdk/integration/bun-sqlite';\n\n// Usage with Hono\nconfigureAppServer(app, {\n  appName: \"Test\",\n  appSecret: \"Test\",\n  shopRepository: new BunSqliteRepository('my-sqlite.db'),\n});\n\n// Without Hono\nconst appServer = new AppServer(..., new BunSqliteRepository('my-sqlite.db'));\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save better-sqlite3\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BetterSqlite3Repository } from '@shopware-ag/app-server-sdk/integration/better-sqlite3';\n\n// Usage with Hono\nconfigureAppServer(app, {\n  appName: \"Test\",\n  appSecret: \"Test\",\n  shopRepository: new BetterSqlite3Repository('my-sqlite.db'),\n});\n\n// Without Hono\nconst appServer = new AppServer(..., new BetterSqlite3Repository('my-sqlite.db'));\n```\n\n----------------------------------------\n\nTITLE: Adding Security and Metadata Headers to HTML Documents\nDESCRIPTION: Implementation of Content-Security-Policy meta tag to prevent XSS attacks by disallowing JavaScript and restricting base URLs, along with document generation date metadata.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% block document_head_meta_protection %}\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'none'; base-uri 'self';\">\n    <meta name=\"date\" content=\"{{ 'now'|date('c') }}\">\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Sanitizer in Shopware 6.5\nDESCRIPTION: This code snippet demonstrates how to completely disable the HTML sanitizer in the z-shopware.yaml configuration file, with a warning that this may allow unsafe or malicious HTML code.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/html-sanitizer.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    html_sanitizer:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Updating REBUILD_DATE Variable to Force Shopware Rebuild - Bash\nDESCRIPTION: Updates the existing `REBUILD_DATE` environment variable to a new value, again using the current date, to force a Shopware PaaS environment rebuild. Dependencies include the Shopware CLI and appropriate permissions. This command can be run any time to retrigger the build/deploy lifecycle for the main environment, even if no code changes are present.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/build-deploy.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshopware variable:update --environment main --value \"$(date)\" \"env:REBUILD_DATE\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Role Entity in PHP for B2B Suite\nDESCRIPTION: This code defines a RoleEntity class that represents a role in the B2B Suite. It implements the CrudEntity interface and includes methods for data conversion and serialization.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/crud-service.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\B2B\\Role\\Framework;\n\nuse Shopware\\B2B\\Common\\CrudEntity;\nuse Shopware\\B2B\\Common\\IdValue;\nuse function get_object_vars;\nuse function property_exists;\n\nclass RoleEntity implements CrudEntity\n{\n    public IdValue $id;\n\n    public string $name;\n\n    public IdValue $contextOwnerId;\n\n    public int $left;\n\n    public int $right;\n\n    public int $level;\n\n    public bool $hasChildren;\n\n    public array $children = [];\n\n    public function __construct()\n    {\n        $this->id = IdValue::null();\n        $this->contextOwnerId = IdValue::null();\n    }\n\n    public function isNew(): bool\n    {\n        return $this->id instanceof NullIdValue;\n    }\n\n    public function toDatabaseArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'context_owner_id' => $this->contextOwnerId->getStorageValue(),\n        ];\n    }\n\n    public function fromDatabaseArray(array $roleData): CrudEntity\n    {\n        $this->id = IdValue::create($roleData['id']);\n        $this->name = (string) $roleData['name'];\n        $this->contextOwnerId = IdValue::create($roleData['context_owner_id']);\n        $this->left = (int) $roleData['left'];\n        $this->right = (int) $roleData['right'];\n        $this->level = (int) $roleData['level'];\n        $this->hasChildren = (bool) $roleData['hasChildren'];\n\n        return $this;\n    }\n\n    public function setData(array $data)\n    {\n        foreach ($data as $key => $value) {\n            if (!property_exists($this, $key)) {\n                continue;\n            }\n\n            $this->{$key} = $value;\n        }\n    }\n\n    public function toArray(): array\n    {\n        $vars = get_object_vars($this);\n        \n        foreach ($vars as $key => $var) {\n            if ($var instanceof IdValue) {\n                $vars[$key] = $var->getValue();\n            }\n        }\n\n        return $vars;\n    }\n\n    public function jsonSerialize(): array\n    {\n        return $this->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Extension in Shopware CLI\nDESCRIPTION: This command updates a specific extension in the Shopware project using the Shopware CLI. Replace <extension-name> with the actual name of the extension to be updated.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension update <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Custom Pack Icon Path Structure\nDESCRIPTION: Shows the directory path structure for storing custom icon packs with custom pack names.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-icons.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<YourPlugin>/src/Resources/app/storefront/dist/assets/icon/<pack-name>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Shopware Project Directory\nDESCRIPTION: Commands to create a new empty directory for your Shopware project and navigate to it. This is the first step before setting up the Docker-based Shopware environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-project\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware App SDK via NPM\nDESCRIPTION: Command to install the Shopware App SDK server package using NPM package manager.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/01-getting_started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @shopware-ag/app-sdk-server\n```\n\n----------------------------------------\n\nTITLE: Posting Shopware Technology Partner Commission Reports - JSON\nDESCRIPTION: This snippet defines the expected JSON payload for submitting Technology Partner commission reports to the Shopware reporting API via a POST request. It requires fields such as a unique identifier, report date, instance ID, Shopware version, and an array of key-value objects with customer and turnover reporting data. The reportDataKeys property must contain objects reflecting relevant business metrics. All fields are required and the JSON must be properly structured to be accepted by the API, with timestamps formatted as ISO 8601 strings.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-apps/index.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"identifier\\\": \\\"8e167662-6bbb-11eb-9439-0242ac130002\\\",\\n  \\\"reportDate\\\": \\\"2005-08-15T15:52:01\\\",\\n  \\\"instanceId\\\": \\\"alur24esfaw3ghk\\\",\\n  \\\"shopwareVersion\\\": \\\"6.3.1\\\",\\n  \\\"reportDataKeys\\\": [\\n    {\\n      \\\"customer\\\": 3\\n    },\\n    {\\n      \\\"turnover\\\": 440\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CompletionDefinitionEnrichment in Custom Elasticsearch Definition (PHP)\nDESCRIPTION: This snippet demonstrates how to inject and use CompletionDefinitionEnrichment in a custom Elasticsearch definition class. It shows modifications to the getMapping and fetch methods to include completion functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-modify-completion.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nclass YourCustomElasticsearchDefinition extends AbstractElasticsearchDefinition\n{\n    public function __construct(\n        private readonly EntityDefinition $definition,\n        private readonly Connection $connection,\n        private readonly AbstractSearchLogic $searchLogic,\n        private readonly CompletionDefinitionEnrichment $completionDefinitionEnrichment,\n        private readonly array $languageAnalyzerMapping\n    ) {\n    }\n\n    public function getMapping(Context $context): array\n    {\n        // ...\n        \n        return [\n            '_source' => ['includes' => ['id']],\n            // to add the mapping of completion field in your definition\n            'properties' => array_merge($properties, $this->completionDefinitionEnrichment->enrichMapping()),\n        ];\n    }\n\n    public function fetch(array $ids, Context $context): array\n    {\n        // ...\n\n        // to add the completion keywords to the existing data\n        return $this->completionDefinitionEnrichment->enrichData($this->getEntityDefinition(), $documents);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Arbitrary Custom Field Data in PHP\nDESCRIPTION: This example demonstrates inserting arbitrary custom field data into an entity. It shows that custom fields can be added without prior definition, allowing flexible data structures.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$this->swagExampleRepository->upsert([\n    [\n        'id' => '<your ID here>',\n        'customFields' => [ 'foo' => 'bar', 'baz' => [] ]\n    ]\n], $context);\n```\n\n----------------------------------------\n\nTITLE: Injecting In-App Purchases into JavaScript (HTML/Twig)\nDESCRIPTION: This snippet shows how to inject the retrieved In-App Purchases data into the JavaScript application within an admin.html.twig template. It parses the JSON-encoded data and assigns it to a global window variable.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/in-app-purchase/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <script>\n            try {\n                window.inAppPurchases = JSON.parse('{{ inAppPurchases | json_encode | raw }}');\n            } catch (e) {\n                window.inAppPurchases = [];\n                console.error('Unable to decode In-App Purchases', e);\n            }\n        </script>\n\n        <!-- ... -->\n    </head>\n\n    <!-- ... -->\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Flex for Shopware Migration\nDESCRIPTION: Commands to install Symfony Flex and reset recipes when migrating to the new Shopware project template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"symfony/flex:*\" \"symfony/runtime:*\"\n\ncomposer recipe:install --force --reset\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Deployment Workflow\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for deploying the Shopware project. It sets up PHP, installs Shopware CLI, builds the project, and deploys using Deployer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deployment\non:\n  push:\n    branches: main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.3'\n\n      - name: Install Shopware CLI\n        uses: shopware/shopware-cli-action@v1\n\n      - name: Build\n        run: shopware-cli project ci .\n\n      - name: Deploy\n        uses: deployphp/action@v1\n        with:\n          dep: deploy\n          private-key: ${{ secrets.SSH_PRIVATE_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Search Associations in Shopware YAML\nDESCRIPTION: Configuration example showing how to enable or disable cross-search capabilities between different entities like products, manufacturers, and categories. This configuration helps optimize index size by controlling which associations can be cross-searched without requiring duplicate data indexing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/Cross-search.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/advanced_search.yaml\nadvanced_search:\n    # When searching for `manufacturer.product.name`, if `product_manufacturer.product` cross_search is enabled, the `product` index will be used for search field `name`\n    cross_search:\n        product.product_manufacturer: false\n        product.category: false\n        category.product: true\n        product_manufacturer.product: true\n```\n\n----------------------------------------\n\nTITLE: Watch Storefront Changes in Source Code\nDESCRIPTION: Command to enable Hot Module Replacement for the storefront in development.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run watch:storefront\n```\n\n----------------------------------------\n\nTITLE: Updating Main Mapping Before Returning ConvertStruct in Shopware Converter (PHP)\nDESCRIPTION: This snippet demonstrates calling updateMainMapping before returning a ConvertStruct in a Shopware converter. It ensures all collected mapping IDs are associated with the main mapping for efficient lookup and caching in future migrations. The code expects established migration and Shopware context objects, and prepares the main mapping reference for the final ConvertStruct output. It is a crucial step for optimizing mapping retrieval in repeated conversions.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/* SwagMigrationAssistant/Profile/Shopware/Converter/ProductConverter.php */\\n\\npublic function convert(\\n    array $data,\\n    Context $context,\\n    MigrationContextInterface $migrationContext\\n): ConvertStruct {\\n    /* ... */\\n\\n    $this->updateMainMapping($this->migrationContext, $this->context);\\n\\n    $mainMapping = $this->mainMapping['id'] ?? null;\\n\\n    return new ConvertStruct($converted, $returnData, $mainMapping);\\n\\n    /* ... */\\n}\n```\n\n----------------------------------------\n\nTITLE: Single Argument Filter in Twig Template\nDESCRIPTION: Shows how to apply a custom filter to translated text in a Twig template block using the pipe syntax.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/using-filter.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% block my_custom_block %}\n    <p>\n       {{ $tc('swag-example.general.myCustomText')|example }}\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Building Shopware Administration in Source Code\nDESCRIPTION: Command to build JavaScript for the Shopware administration interface when working with source code.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run build:js:admin\n```\n\n----------------------------------------\n\nTITLE: Component Override in Shopware 6.7\nDESCRIPTION: Example of extending existing components using Shopware's override system\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.override('sw-text-field', {\n   template: `\n     {% block sw-text-field %}\n       {% parent %}\n       \n       {{ helpText }}\n     {% endblock %}\n   `,\n   \n   props: {\n       helpText: {\n           type: String,\n           required: false,\n       }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Instance Type with @var Annotation for Static Analysis in PHP\nDESCRIPTION: Illustrates using `@var Foo $foo` PHPDoc annotation to signal to static analysis tools that a variable `$foo` (potentially `object`) is expected to be an instance of the `Foo` class. Like other `@var` uses, this only affects static analysis and doesn't guarantee runtime type safety.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/** @var Foo $foo */\n$foo = $bar->getFoo(); // $foo is object, but we expect it to be Foo instance\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Field from Enum in Twig Template\nDESCRIPTION: Twig template code to generate a select input field using the cases of a PHP enum, useful for form creation in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/enum-field.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<select name=\"payment_method\">\n    {% for method in PaymentMethod::cases() %}\n        <option value=\"{{ method.value }}\">{{ method.name }}</option>\n    {% endfor %}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest File for Shopware 6 App\nDESCRIPTION: Shows the structure of the manifest.xml file, which defines the interface between the app and the Shopware instance, including app metadata.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>FlowBuilderActionApp</name>\n        <label>Flow Builder Action App</label>\n        <label lang=\"de-DE\">Flow Builder Aktions-App</label>\n        <description>This is the example description for app</description>\n        <description lang=\"de-DE\">Dies ist die Beispielbeschreibung für app</description>\n        <author>shopware AG</author>\n        <copyright>(c) shopware AG</copyright>\n        <version>4.14.0</version>\n        <icon>Resources/app-icon.png</icon>\n        <license>MIT</license>\n    </meta>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding script_id Association to RuleConditionDefinition (Diff)\nDESCRIPTION: This diff illustrates the changes made to the `RuleConditionDefinition` class in PHP. It adds a foreign key `script_id` and a `ManyToOneAssociationField` named `script` to link rule conditions to the corresponding `AppScriptConditionDefinition`, enabling the use of app-provided scripts within the standard rule system.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// src/Core/Content/Rule/Aggregate/RuleCondition/RuleConditionDefinition.php \n\n            (new FkField('rule_id', 'ruleId', RuleDefinition::class))->addFlags(new Required()),\n+           new FkField('script_id', 'scriptId', AppScriptConditionDefinition::class),\n            // ...\n            new ManyToOneAssociationField('rule', 'rule_id', RuleDefinition::class, 'id', false),\n+           new ManyToOneAssociationField('script', 'script_id', AppScriptConditionDefinition::class, 'id', true),\n```\n\n----------------------------------------\n\nTITLE: Deprecating Admin Component Properties\nDESCRIPTION: Demonstrates how to deprecate component properties in Shopware admin components using the deprecated configuration object.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    name: 'example-component',\n    props: {\n        /** @deprecated tag:v6.5.0 - Insert additional information in comments */\n        exampleProp: {\n            type: String,\n            required: false,\n            default: 'Default value',\n            deprecated: {\n                version: '6.5.0',\n                comment: 'Insert additional information in comments'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order Approval Workflow with Mermaid\nDESCRIPTION: A flowchart diagram showing the complete order approval process flow, from order placement through approval rule evaluation to final order processing. The diagram illustrates the decision points and resulting events based on whether approval is required and granted.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/order-approval/concepts/01-entities-and-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A(Employee places an order) -->B{Approval rule applies}\n    B-->|No| C[Event: Order Placed]\n    B-->|Yes| D[Event: Order needs approval]\n    D-->E{Order approved?}\n    E-->|No| F[Event: Order declined]\n    E-->|Yes| G[Event: Order Approved & Event: Order placed]\n```\n\n----------------------------------------\n\nTITLE: Assigning Blocks via Twig Use Syntax - Twig\nDESCRIPTION: Shows the recommended Shopware ADR pattern: using Twig's use syntax to import blocks from an external template (logo.html.twig), then rendering them with Twig's block() function for modular inclusion. This pattern prevents direct extension via sw_extends for includes, encouraging composition via block usage. Requires Shopware 6 with support for Twig 3.x, and referenced logo templates must exist; outputs the content of the imported logo block when rendered.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-12-document-template-refactoring.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% use '@Framework/documents/includes/logo.html.twig' %}\n\n{{ block('logo') }}\n\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tools with Extension Verifier\nDESCRIPTION: Commands to run specific tools within the Extension Verifier. This allows for focused checking on particular aspects of the code.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest check /ext --only phpstan\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest check /ext --only \"phpstan,eslint,stylelint\"\n```\n\n----------------------------------------\n\nTITLE: Switch Statement for Status Codes - PHP\nDESCRIPTION: Provides the previous approach of handling multiple status codes using a switch statement, requiring explicit break statements and duplicate assignments. This pattern can be error-prone due to weak comparison and the necessity to handle each case explicitly, as well as possible fall-through behavior.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nswitch ($statusCode) {\n    case 200:\n    case 300:\n        $message = null;\n        break;\n    case 400:\n        $message = 'not found';\n        break;\n    case 500:\n        $message = 'server error';\n        break;\n    default:\n        $message = 'unknown status code';\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Bundle Repository Service in Shopware 5 using XML\nDESCRIPTION: Defines the `BundleRepository` as a service in the Shopware 5 plugin's `service.xml`. It sets the class and specifies `SwagMigrationConnector\\Repository\\AbstractRepository` as its parent, integrating it into the dependency injection container for use within the plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"swag_migration_bundle_api_example.bundle_repository\"\n         class=\"SwagMigrationBundleApiExample\\Repository\\BundleRepository\"\n         parent=\"SwagMigrationConnector\\Repository\\AbstractRepository\"\n         />\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Worker in Shopware YAML (PHP)\nDESCRIPTION: YAML configuration to disable the admin worker in Shopware, typically used when setting up a CLI worker for production environments.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/shopware.yaml\nshopware:\n    admin_worker:\n        enable_admin_worker: false\n```\n\n----------------------------------------\n\nTITLE: Custom SEO URLs Query Implementation\nDESCRIPTION: Override of getSeoUrls method to customize the SQL query for fetching SEO URLs, allowing for additional filtering and customization of the URL generation process.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/sitemap/modify-sitemap-entries.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function getSeoUrls(array $ids, string $routeName, SalesChannelContext $context, Connection $connection): array\n{\n    /* Make adjustments to this SQL */\n    $sql = 'SELECT LOWER(HEX(foreign_key)) as foreign_key, seo_path_info\n                FROM seo_url WHERE foreign_key IN (:ids)\n                 AND `seo_url`.`route_name` =:routeName\n                 AND `seo_url`.`is_canonical` = 1\n                 AND `seo_url`.`is_deleted` = 0\n                 AND `seo_url`.`language_id` =:languageId\n                 AND (`seo_url`.`sales_channel_id` =:salesChannelId OR seo_url.sales_channel_id IS NULL)';\n\n    return $connection->fetchAll(\n        $sql,\n        [\n            'routeName' => $routeName,\n            'languageId' => Uuid::fromHexToBytes($context->getSalesChannel()->getLanguageId()),\n            'salesChannelId' => Uuid::fromHexToBytes($context->getSalesChannelId()),\n            'ids' => Uuid::fromHexToBytesList(array_values($ids)),\n        ],\n        [\n            'ids' => Connection::PARAM_STR_ARRAY,\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @LoginRequired Annotation for Shopware Route Authentication in PHP\nDESCRIPTION: This snippet demonstrates how to apply the `@LoginRequired` annotation to Shopware 6 route definitions within PHP DocBlocks. The first example shows `@LoginRequired()` applied to a Store API logout route, enforcing a strict customer login. The second example uses `@LoginRequired(allowGuest=true)` for a storefront route, allowing access for both logged-in customers and guests. The annotation validates the customer's status via `SalesChannelContext` and throws `CustomerNotLoggedInException` if the requirement is not met.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-20-add-login-required-annotation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Since(\"6.0.0.0\")\n * @LoginRequired()\n * @Route(path=\"/store-api/v{version}/account/logout\", name=\"store-api.account.logout\", methods={\"POST\"})\n */\n\n/**\n * @Since(\"6.2.0.0\")\n * @LoginRequired(allowGuest=true)\n * @Route(\"/account/order/edit/{orderId}\", name=\"frontend.account.edit-order.page\", methods={\"GET\"})\n */\n```\n\n----------------------------------------\n\nTITLE: Updating Mail Template Type in Shopware - PHP\nDESCRIPTION: This PHP snippet demonstrates the method by which Shopware updates mail template types in the database when sending emails. It checks for a template ID and invokes an update process on the mailTemplateTypeRepository with new template data. Requires Shopware core classes (FlowEvent, MailAware, MailTemplateEntity), access to the mailTemplateTypeRepository, and the updateMailTemplate flag. The key inputs are event objects and template entities; it returns void but updates database state. Can cause performance issues if used with high-frequency events.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-prevent-mail-updates.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Flow\\Dispatching\\Action;\n\nclass SendMailAction extends FlowAction\n{\n    public function handle(Event $event): void\n    {\n        // ...\n        \n        if ($data->has('templateId')) {\n            $this->updateMailTemplateType($event, $mailEvent, $mailTemplate);\n        }\n        \n        // ...\n    }\n\n    private function updateMailTemplateType(\n        FlowEvent $event, \n        MailAware $mailAware, \n        MailTemplateEntity $mailTemplate\n        ): void {\n        if (!$mailTemplate->getMailTemplateTypeId()) {\n            return;\n        }\n\n        if (!$this->updateMailTemplate) {\n            return;\n        }\n\n        $this->mailTemplateTypeRepository->update([[\n            'id' => $mailTemplate->getMailTemplateTypeId(),\n            'templateData' => $this->getTemplateData($mailAware),\n        ]], $mailAware->getContext());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service with Event Dispatcher in XML\nDESCRIPTION: Shows how to define a service in Shopware 6's dependency injection container that requires the event dispatcher as an argument.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Some\\Service\">\n            <argument type=\"service\" id=\"Another/Service\"/>\n            <argument type=\"service\" id=\"event_dispatcher\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Deployer Host Configuration\nDESCRIPTION: PHP configuration for setting up deployment host settings including paths and user permissions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nhost('SSH-HOSTNAME')\n    ->setLabels([\n        'type' => 'web',\n        'env'  => 'prod',\n    ])\n    ->setRemoteUser('www-data')\n    ->set('deploy_path', '/var/www/shopware')\n    ->set('http_user', 'www-data')\n    ->set('writable_mode', 'chmod');\n```\n\n----------------------------------------\n\nTITLE: Administration SPA Directory Structure\nDESCRIPTION: Shows the main directory structure of the Administration Single Page Application source code, organized into app (application basis), core (API bindings and services), and module (UI components) directories.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/architecture/administration-concept.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<shopware/src/Administration/Resources/app/administration/src/>\n|- app\n|- core\n|- module\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware for Cluster Setup in YAML\nDESCRIPTION: Sets the cluster_setup option to true in the shopware.yaml file to prevent operations that could corrupt the cluster state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/cluster-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    deployment:\n        cluster_setup: true\n```\n\n----------------------------------------\n\nTITLE: Defining the Elasticsearch Service in Platform.sh Services YAML\nDESCRIPTION: This YAML snippet defines an Elasticsearch service named `elasticsearch` using the `opensearch:2` type and allocates 256MB of disk space. This configuration should be added or uncommented within the `.platform/services.yaml` file to provision the Elasticsearch service within the Platform.sh environment.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/elasticsearch.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n// .platform/services.yaml\nelasticsearch:\n   type: opensearch:2\n   disk: 256\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Theme JSON Structure in Shopware 6\nDESCRIPTION: Default theme.json file structure that shows the basic configuration for a theme, including views, style, script, and asset inheritance from the Storefront default theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-theme-inheritance.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleThemeExtend\",\n  \"author\": \"Shopware AG\",\n  \"views\": [\n     \"@Storefront\",\n     \"@Plugins\",\n     \"@SwagBasicExampleThemeExtend\"\n  ],\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\",\n    \"@Storefront\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  \"script\": [\n    \"@Storefront\",\n    \"app/storefront/dist/storefront/js/swag-example-plugin-theme-extended/swag-example-plugin-theme-extended.js\"\n  ],\n  \"asset\": [\n    \"@Storefront\",\n    \"app/storefront/src/assets\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order State Machine Workflow with Mermaid\nDESCRIPTION: Mermaid flowchart showing the order state machine with states including Open, In Progress, Done, and Cancelled. The diagram displays possible transitions between states like process, cancel, complete, and reopen.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/orders.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nSTART_STATE[Start state] --> 018c4a0eeaec71b7a0415b572e1a07f5\n\n018c4a0eeaec71b7a0415b572e1a07f5(Open)\n018c4a0eeaec71b7a0415b572e8c7a86(Done)\n018c4a0eeaec71b7a0415b572e8c7a86 --> FINAL_STATE[Final state]\n018c4a0eeaec71b7a0415b572f6990c5(In Progress)\n018c4a0eeaec71b7a0415b572fa73aa1(Cancelled)\n018c4a0eeaec71b7a0415b572fa73aa1 --> FINAL_STATE[Final state]\n\n018c4a0eeaec71b7a0415b572e1a07f5 -- process --> 018c4a0eeaec71b7a0415b572f6990c5\n018c4a0eeaec71b7a0415b572e1a07f5 -- cancel --> 018c4a0eeaec71b7a0415b572fa73aa1\n018c4a0eeaec71b7a0415b572f6990c5 -- cancel --> 018c4a0eeaec71b7a0415b572fa73aa1\n018c4a0eeaec71b7a0415b572f6990c5 -- complete --> 018c4a0eeaec71b7a0415b572e8c7a86\n018c4a0eeaec71b7a0415b572fa73aa1 -- reopen --> 018c4a0eeaec71b7a0415b572e1a07f5\n018c4a0eeaec71b7a0415b572e8c7a86 -- reopen --> 018c4a0eeaec71b7a0415b572e1a07f5\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Service and Plugin Decorator with PHP\nDESCRIPTION: Demonstrates the structure of the decorator pattern in Shopware 6, defining an abstract service loader and its core and plugin decorator implementations. Shows how to enforce and implement the getDecorated() method, manage dependencies, and override functionality. Requires Shopware 6 core classes and context, and expects RuleCollection and DecorationPatternException to be available. Inputs primarily include Context objects; outputs are RuleCollection instances.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/decorator-pattern.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nabstract class AbstractRuleLoader\n{\n    abstract public function getDecorated(): AbstractRuleLoader;\n\n    abstract public function load(Context $context): RuleCollection;\n}\n\nclass CoreRuleLoader\n{\n    public function getDecorated(): AbstractRuleLoader {\n        throw new DecorationPatternException(self::class);\n    }\n    \n    public function load(Context $context): RuleCollection {\n        // do some stuff \n    }\n}\n\nclass SomePlugin extends AbstractRuleLoader\n{\n    public function __construct(private AbstractRuleLoader $inner) {}\n    \n    public function getDecorated(): AbstractRuleLoader {\n        return $this->inner;\n    }\n    \n    public function load(Context $context): RuleCollection {\n        $rules = $this->inner->load($context);\n        // add some data or execute some logic\n        return $rules;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OneToManyAssociationField with CascadeDelete Flag - Shopware 6 - PHP\nDESCRIPTION: This snippet demonstrates how to define a one-to-many association in Shopware 6 Doctrine entity definitions, attaching a CascadeDelete flag with a parameter to disable association cloning. It requires Shopware's Entity Framework, particularly the OneToManyAssociationField class and the CascadeDelete flag. The key parameters include the association name ('searchKeywords'), the target definition class (ProductSearchKeywordDefinition::class), and the foreign key ('product_id'). Setting new CascadeDelete(false) disables clone inclusion for this association. The input is the association field configuration, the output is a properly flagged association on the entity, and the approach is extensible to other associations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-07-02-control-clone-behavior.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n(new OneToManyAssociationField('searchKeywords', ProductSearchKeywordDefinition::class, 'product_id'))\n    ->addFlags(new CascadeDelete(false)),\n```\n\n----------------------------------------\n\nTITLE: Explaining Optimized Cart Cleanup Query in SQL\nDESCRIPTION: This SQL query explains the execution plan of the optimized cart cleanup operation, which reorders query parameters to leverage the created_at index (idx.cart.created_at), resulting in dramatically improved performance.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-09-optimise-cart-cleanup.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN DELETE FROM cart\n        WHERE created_at <= '2023-02-01'\n          AND (updated_at IS NULL OR updated_at <= '2023-02-01') LIMIT 1000;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Styles with Feature Flags in SCSS\nDESCRIPTION: This SCSS snippet demonstrates how to use the globally available `feature()` function to check the status of a specific feature flag ('FEATURE_NEXT_1'). Based on whether the feature is active (true) or inactive (false), different CSS rules (in this case, `background-color` for the `body`) are applied. This functionality relies on the `$sw-features` SCSS map being defined during compilation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-05-add-feature-flag-support-for-storefront-scss.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\nbody {\n    @if feature('FEATURE_NEXT_1') {\n        background-color: #ff0000;\n    } @else {\n        background-color: #ffcc00;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shopware Docker Build Configuration\nDESCRIPTION: Dockerfile for building and deploying a Shopware project, including multi-stage build process and dependency management.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\n#syntax=docker/dockerfile:1.4\n\n# pin versions\nFROM shopware/docker-base:8.3 AS base-image\nFROM shopware/shopware-cli:latest-php-8.3 AS shopware-cli\n\n# build\n\nFROM shopware-cli AS build\n\nARG SHOPWARE_PACKAGES_TOKEN\n\nADD . /src\nWORKDIR /src\n\nRUN --mount=type=secret,id=composer_auth,dst=/src/auth.json \\\n    --mount=type=cache,target=/root/.composer \\\n    --mount=type=cache,target=/root/.npm \\\n    /usr/local/bin/entrypoint.sh shopware-cli project ci /src\n\nFROM base-image\n\nCOPY --from=build --chown=82 --link /src /var/www/html\n```\n\n----------------------------------------\n\nTITLE: TypeScript Public Method Implementation\nDESCRIPTION: Shows a typed TypeScript public method implementation with explicit access modifier and type declarations for parameters and return value.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/concept/method-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class {\n    public addClass(element: HTMLElement, name: string): void {\n        element.classList.add(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting System Rules - Markdown Table\nDESCRIPTION: Markdown table documenting system-level rules including currency matching.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/rules-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| [Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule] | Match a specific currency to the current context. |\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Files When Migrating to New Shopware Template\nDESCRIPTION: Command to remove unnecessary files when migrating from the old Shopware zip installation to the new Composer project template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -r .dockerignore \\\n    .editorconfig \\\n    .env.dist \\\n    .github \\\n    .gitlab-ci \\\n    .gitlab-ci.yml \\\n    Dockerfile \\\n    docker-compose.yml \\\n    easy-coding-standard.php \\\n    PLATFORM_COMMIT_SHA \\\n    artifacts \\\n    bin/deleted_files_vendor.sh \\\n    bin/entrypoint.sh \\\n    bin/package.sh \\\n    config/etc \\\n    src \\\n    config/secrets \\\n    config/services \\\n    config/services.xml \\\n    config/services_test.xml \\\n    license.txt \\\n    phpstan.neon \\\n    phpunit.xml.dist \\\n    psalm.xml\n\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Dump Rewrite Configuration - YAML\nDESCRIPTION: YAML configuration for customizing data anonymization in dumps. Allows setting static values or using faker functions to generate dynamic data.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/mysql-dump.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndump:\n  rewrite:\n    <table-name>:\n      <column-name>: \"'new-value'\"\n      <column-name>: \"faker.Internet().Email()\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Shopware Flags\nDESCRIPTION: A markdown table listing various flags used in Shopware's entity definitions. Each row contains the classname of the flag and a detailed description of its functionality and use cases.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/flags-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Classname | Description                                                                                                                                                                                                                                                                                                                                     |\n| :--- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| AllowEmptyString | Flag a text column that an empty string should not be considered as null                                                                                                                                                                                                                                                                        |\n| AllowHtml | In case a column is allowed to contain HTML-escaped data. Beware of injection possibilities                                                                                                                                                                                                                                                    |\n| ApiAware | Makes a field available in the Store or Admin API. If no parameter is passed for the flag, the field will be exposed in the both Store and Admin API. By default, all fields are enabled for the Admin API, as the flag is added in the base Field class. However, the scope can be restricted to `AdminApiSource` and `SalesChannelApiSource`. |\n| CascadeDelete | In case the referenced association data will be deleted, the related data will be deleted too                                                                                                                                                                                                                                                   |\n| Computed | The value is computed by indexer or external systems and cannot be written using the DAL.                                                                                                                                                                                                                                                       |\n| Deprecated | This flag is used to mark the field that has been deprecated and will be removed with the next major version.                                                                                                                                                                                                                                   |\n| Extension | Defines that the data of this field is stored in an Entity::$extension and are not part of the struct itself.                                                                                                                                                                                                                                   |\n| Inherited | Defines that the data of this field can be inherited by the parent record                                                                                                                                                                                                                                                                       |\n| PrimaryKey | The PrimaryKey flag defines the field as part of the entity's primary key. Usually, this should be the ID field.                                                                                                                                                                                                                                |\n| Required | Fields marked as \"Required\" must be specified during the create request of an entity. This configuration is only taken into account during the write process.                                                                                                                                                                                   |\n| RestrictDelete | Associated data with this flag, restricts the delete of the entity in case that a record with the primary key exists.                                                                                                                                                                                                                           |\n| ReverseInherited | Flags \"ReverseInherited\"                                                                                                                                                                                                                                                                                                                        |\n| Runtime | Defines that the data of the field will be loaded at runtime by an event subscriber or other class. Used in entity extensions for plugins or not directly fetchable associations.                                                                                                                                                               |\n| SearchRanking | Defines the weight for a search query on the entity for this field                                                                                                                                                                                                                                                                              |\n| SetNullOnDelete | In case the referenced association data will be deleted, the related data will be set to null and an Written event will be thrown                                                                                                                                                                                                               |\n| Since | The \"Since\" flag defines since which Shopware version the field is available.                                                                                                                                                                                                                                                                   |\n| WriteProtected | By setting the \"WriteProtected\" flag, write access via API can be restricted. This flag is mostly used to protect indexed data from direct writing via API.                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware using Symfony console\nDESCRIPTION: Command to install Shopware with basic setup using Symfony console.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsymfony console system:install --basic-setup\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag for Conditional Association Autoloading in PHP\nDESCRIPTION: Example code showing how to conditionally add an association field to a field collection based on the v6.6.0.0 feature flag. This allows for backward compatibility during the transition from autoloaded associations to explicit loading.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-02-deprecate-autoload-true-in-dal-associations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineFields(): FieldCollection\n{\n   $fields = new FieldCollection(...);\n\n  if (Feature::isActive('v6.6.0.0') {\n     $fields->add(new ManyToOneAssociationField(..., autoload: false);\n  } else {\n     $fields->add(new ManyToOneAssociationField(..., autoload: true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrangler Installation Command\nDESCRIPTION: Command to install Wrangler CLI tool for Cloudflare Pages deployment as a dev dependency using pnpm.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/best-practices/app-deployment/cloudflare.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install wrangler --save-dev\n```\n\n----------------------------------------\n\nTITLE: Removing Unwanted Shopware Bundles\nDESCRIPTION: Command to remove optional Shopware bundles from your project.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer remove shopware/<bundle-name>\n```\n\n----------------------------------------\n\nTITLE: Migrating a Project to Symfony Flex using Shopware-CLI\nDESCRIPTION: Command to migrate a Shopware project to the Symfony Flex structure. This updates configuration file locations, modifies composer.json and bin/console to use the new configuration files, and removes unnecessary configuration files.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/autofix.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project autofix flex\n```\n\n----------------------------------------\n\nTITLE: Deleting OneToMany Association in Shopware 6 PHP\nDESCRIPTION: Demonstrates how to remove a OneToMany association that is actually a hidden ManyToMany association. This example removes a media association from a product.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/deleting-associated-data.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function removeAssocData(Context $context): void\n{\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('productId', 'myProductId'));\n    $criteria->addFilter(new EqualsFilter('mediaId', 'myMediaId'));\n\n    $productMediaId = $this->productMediaRepository->searchIds($criteria, $context)->firstId();\n\n    $this->productMediaRepository->delete([\n        [\n            'id' => $productMediaId\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Products from Cart in Twig\nDESCRIPTION: Example showing how to add and then remove a product line item from the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% do services.cart.products.remove(hook.ids.get('p1')) %}\n```\n\n----------------------------------------\n\nTITLE: Restricting User to Specific Customers via Shopware API - Bash\nDESCRIPTION: This snippet demonstrates how to restrict a user's access to only customers with a specific last name by sending a POST request to the Shopware '/api/entity-restriction' endpoint. The curl command includes authentication via 'x-api-key', sets 'Content-type' to 'application/json', and supplies a payload specifying the restricted entity ('customer'), the user's email, and filter criteria (lastName equals 'Doe'). The criteria object follows Shopware's search criteria format; see Shopware's API documentation for field details. Requires curl, a valid API key, and a configured Shopware backend.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/users.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST -H 'x-api-key: <secret>' -H \"Content-type: application/json\" -d '{\n    \"entity\": \"customer\",\n    \"email\": <user_email>,\n    \"criteria\": {\n      \"filter\": [{\n        \"field\": \"lastName\",\n        \"type\": \"equals\",\n        \"value\": \"Doe\"\n      }]\n    }\n}' '<sales_agent_instance_url>/api/entity-restriction'\n```\n\n----------------------------------------\n\nTITLE: Installing Deployer Dependencies\nDESCRIPTION: Command to install required Composer packages for deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require deployer/deployer shopware/deployment-helper\n```\n\n----------------------------------------\n\nTITLE: Basic Shopware Filesystem Configuration in YAML\nDESCRIPTION: Example YAML configuration for setting up filesystem storage in Shopware 6, showing URL configuration for different file system types including public, private, theme, asset, and sitemap files.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  filesystem:\n    public:\n      url: \"{url-to-your-public-files}\"\n      # The Adapter Configuration\n    private:\n      visibility: \"private\"\n      # The Adapter Configuration\n    theme:\n      url: \"{url-to-your-theme-files}\"\n      # The Adapter Configuration\n    asset:\n      url: \"{url-to-your-asset-files}\"\n      # The Adapter Configuration\n    sitemap:\n      url: \"{url-to-your-sitemap-files}\"\n      # The Adapter Configuration\n\n```\n\n----------------------------------------\n\nTITLE: Removing DeviceHelper Resize Listener in JavaScript\nDESCRIPTION: Shows how to properly remove a resize listener when a component is destroyed, preventing memory leaks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/ui-ux/adding-responsive-behavior.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$device.removeResizeListener(component);\n```\n\n----------------------------------------\n\nTITLE: Constructor with Event Dispatcher in PHP\nDESCRIPTION: Demonstrates a PHP class constructor that requires the EventDispatcherInterface, indicating the class likely dispatches events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n    Some\\Service $someService,\n    EventDispatcherInterface $eventDispatcher\n) {\n    $this->someService = $someService;\n    $this->eventDispatcher = $eventDispatcher;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete theme.json Structure with Part Inheritances - JSON\nDESCRIPTION: Presents a full example of a theme.json file for a custom Shopware 6 theme, showing how partial inheritance can be set for views, styles, scripts, assets, and config inheritance. Fields, blocks, sections, and select field options, with both English and German translations, are defined as examples of configuration structure. Dependencies include referenced themes; the configInheritance field points to base and previous themes. Input is a complete JSON object, output is used by Shopware to generate and manage theme behaviors dynamically.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-22-refactor-theme-inheritance.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"name\\\": \\\"MyDevelopmentTheme\\\",\\n    \\\"author\\\": \\\"Shopware AG\\\",\\n    \\\"views\\\": [\\n        \\\"@Storefront\\\",\\n        \\\"@Plugins\\\",\\n        \\\"@MyDevelopmentTheme\\\"\\n    ],\\n    \\\"style\\\": [\\n        \\\"app/storefront/src/scss/overrides.scss\\\",\\n        \\\"@Storefront\\\",\\n        \\\"app/storefront/src/scss/base.scss\\\"\\n    ],\\n    \\\"script\\\": [\\n        \\\"@Storefront\\\",\\n        \\\"app/storefront/dist/storefront/js/my-development-theme.js\\\"\\n    ],\\n    \\\"asset\\\": [\\n        \\\"@Storefront\\\",\\n        \\\"app/storefront/src/assets\\\"\\n    ],\\n    \\\"configInheritance\\\": [\\n        \\\"@Storefront\\\",\\n        \\\"@PreviousTheme\\\",\\n        \\\"@MyDevelopmentTheme\\\"\\n    ],\\n    \\\"config\\\": {\\n        \\\"blocks\\\": {\\n            \\\"exampleBlock\\\": {\\n                \\\"label\\\": {\\n                    \\\"en-GB\\\": \\\"Example block\\\",\\n                    \\\"de-DE\\\": \\\"Beispiel Block\\\"\\n                }\\n            }\\n        },\\n        \\\"sections\\\": {\\n            \\\"exampleSection\\\": {\\n                \\\"label\\\": {\\n                    \\\"en-GB\\\": \\\"Example section\\\",\\n                    \\\"de-DE\\\": \\\"Beispiel Sektion\\\"\\n                }\\n            }\\n        },\\n        \\\"fields\\\": {\\n            \\\"my-single-test-select-field\\\": {\\n                \\\"editable\\\": false\\n            },\\n            \\\"my-single-select-field\\\": {\\n                \\\"label\\\": {\\n                    \\\"en-GB\\\": \\\"Select a font size\\\",\\n                    \\\"de-DE\\\": \\\"Wähle ein Schriftgröße\\\"\\n                },\\n                \\\"type\\\": \\\"text\\\",\\n                \\\"value\\\": \\\"24\\\",\\n                \\\"custom\\\": {\\n                    \\\"componentName\\\": \\\"sw-single-select\\\",\\n                    \\\"options\\\": [\\n                        {\\n                            \\\"value\\\": \\\"16\\\",\\n                            \\\"label\\\": {\\n                                \\\"en-GB\\\": \\\"16px\\\",\\n                                \\\"de-DE\\\": \\\"16px\\\"\\n                            }\\n                        },\\n                        {\\n                            \\\"value\\\": \\\"20\\\",\\n                            \\\"label\\\": {\\n                                \\\"en-GB\\\": \\\"20px\\\",\\n                                \\\"de-DE\\\": \\\"20px\\\"\\n                            }\\n                        },\\n                        {\\n                            \\\"value\\\": \\\"24\\\",\\n                            \\\"label\\\": {\\n                                \\\"en-GB\\\": \\\"24px\\\",\\n                                \\\"de-DE\\\": \\\"24px\\\"\\n                            }\\n                        }\\n                    ]\\n                },\\n                \\\"editable\\\": true,\\n                \\\"block\\\": \\\"exampleBlock\\\",\\n                \\\"section\\\": \\\"exampleSection\\\"\\n            },\\n            \\\"usps-positions\\\": {\\n                \\\"label\\\":\\n                {\\n                    \\\"en-GB\\\": \\\"Position\\\",\\n                    \\\"de-DE\\\": \\\"Position\\\"\\n                },\\n                \\\"scss\\\": true,\\n                \\\"type\\\": \\\"text\\\",\\n                \\\"value\\\": [\\n                    \\\"top\\\",\\n                    \\\"bottom\\\"\\n                ],\\n                \\\"custom\\\": {\\n                    \\\"componentName\\\": \\\"sw-multi-select\\\",\\n                    \\\"options\\\": [\\n                        {\\n                            \\\"value\\\": \\\"bottom\\\",\\n                            \\\"label\\\":\\n                            {\\n                                \\\"en-GB\\\": \\\"bottom\\\",\\n                                \\\"de-DE\\\": \\\"unten\\\"\\n                            }\\n                        },\\n                        {\\n                            \\\"value\\\": \\\"top\\\",\\n                            \\\"label\\\":\\n                            {\\n                                \\\"en-GB\\\": \\\"top\\\",\\n                                \\\"de-DE\\\": \\\"oben\\\"\\n                            }\\n                        },\\n                        {\\n                            \\\"value\\\": \\\"middle\\\",\\n                            \\\"label\\\":\\n                            {\\n                                \\\"en-GB\\\": \\\"middle\\\",\\n                                \\\"de-DE\\\": \\\"mittel\\\"\\n                            }\\n                        }\\n                    ]\\n                },\\n                \\\"editable\\\": true,\\n                \\\"tab\\\": \\\"usps\\\",\\n                \\\"block\\\": \\\"exampleBlock\\\",\\n                \\\"section\\\": \\\"exampleSection\\\"\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackfire Profiler for Shopware\nDESCRIPTION: YAML configuration for setting up Blackfire profiler in a Shopware Docker environment, including both the web service configuration and the Blackfire service with authentication tokens.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    web:\n        environment:\n            - PHP_PROFILER=blackfire\n    blackfire:\n        image: blackfire/blackfire:2\n        environment:\n            BLACKFIRE_SERVER_ID: XXXX\n            BLACKFIRE_SERVER_TOKEN: XXXX\n```\n\n----------------------------------------\n\nTITLE: Recurring Capture Response in JSON\nDESCRIPTION: Example of the JSON response structure for a successful recurring capture in Shopware. It indicates the payment status as 'paid'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"paid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Results in Shopware Twig Template\nDESCRIPTION: This snippet demonstrates how to access various search results in the Shopware search overview template. It retrieves the multi-search result, products, manufacturers, categories, and custom entities from the page object.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-extend-the-search-and-suggest-template.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set searchResult = page.listing.extensions.multiSearchResult %}\n{% set products = page.listing %}\n{% set manufacturers = searchResult.getResult('product_manufacturer') %}\n{% set categories = searchResult.getResult('category') %}\n{% set customEntities = searchResult.getResult('custom_entity') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Profile Interface in PHP\nDESCRIPTION: This PHP class `OwnProfile` implements the `ProfileInterface` from the SwagMigrationAssistant. It defines constants specifying metadata for the custom migration profile, such as its name, the source system name, version, author, and icon path. This class acts as a configuration container for the profile.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample;\n\nuse SwagMigrationAssistant\\Migration\\Profile\\ProfileInterface;\n\nclass OwnProfile implements ProfileInterface\n{\n    public const PROFILE_NAME = 'ownProfile';\n\n    public const SOURCE_SYSTEM_NAME = 'MySourceSystem';\n\n    public const SOURCE_SYSTEM_VERSION = '1.0';\n\n    public const AUTHOR_NAME = 'shopware AG';\n\n    public const ICON_PATH = '/swagmigrationassistant/static/img/migration-assistant-plugin.svg';\n\n    public function getName(): string\n    {\n        return self::PROFILE_NAME;\n    }\n\n    public function getSourceSystemName(): string\n    {\n        return self::SOURCE_SYSTEM_NAME;\n    }\n\n    public function getVersion(): string\n    {\n        return self::SOURCE_SYSTEM_VERSION;\n    }\n\n    public function getAuthorName(): string\n    {\n        return self::AUTHOR_NAME;\n    }\n\n    public function getIconPath(): string\n    {\n        return self::ICON_PATH;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a PostUpdateIndexer in Migration Step\nDESCRIPTION: Example of how to register a PostUpdateIndexer through a database migration step. This ensures the indexer will run during the update process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-27-post-updater.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass MigrationExample extends \\Shopware\\Core\\Framework\\Migration\\MigrationStep\n{\n    public function update(Connection $connection): void\n    {\n        $this->registerIndexer($connection, 'post.update.example');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Template\nDESCRIPTION: Example Twig template that extends from base.html.twig and overrides the base_content block.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-controller.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/base.html.twig' %}\n\n{% block base_content %}\n    <h1>Our example controller!</h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Structuring B2B Components in Shopware Commercial Plugin\nDESCRIPTION: Shows the recommended folder structure for organizing B2B components within the Commercial plugin. This structure improves code organization and maintainability.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── src\n│   ├── B2B\n│   │   ├── QuickOrder\n│   │   ├── AnotherB2BComponent\n│   │   │   CommercialB2BBundle.php\n...\n```\n\n----------------------------------------\n\nTITLE: Initial Implementation Using Constants\nDESCRIPTION: Example of a class using string constants to define valid indexing methods with validation logic.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-16-php-enums.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Indexer\n{\n    public const PARTIAL = 'partial';\n    public const FULL = 'full';\n\n    public function product(int $id, string $method): void\n    {\n        if (!in_array($method, [self::PARTIAL, self::FULL], true)) {\n            throw new \\InvalidArgumentException();\n        }\n    \n        match ($method) {\n            self::PARTIAL => $this->partial($id),\n            self::FULL => $this->full($id)\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Bundle Names in Composer\nDESCRIPTION: JSON configuration for mapping custom bundle folder names to actual bundle names in composer.json.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"shopware-bundles\": {\n            \"src/MyBundle\": {\n                \"name\": \"MyFancyBundle\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Item via Position ID in Shopware Admin (JavaScript)\nDESCRIPTION: This snippet shows how to extend a specific UI element, in this case a tab bar identified by the `positionID` 'sw-product-detail', by adding a new tab item. It utilizes the `sw.ui.tabs()` method from the Shopware Admin Extension SDK, targeting the specific tab bar and calling `addTabItem` with the configuration for the new tab.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-12-07-admin-extension-api-standards.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsw.ui.tabs('sw-product-detail').addTabItem({ ... })\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Method Position in Shopware manifest.xml\nDESCRIPTION: Example XML configuration showing how to set the display position of a shipping method in the Shopware checkout using the manifest.xml file. The position tag defines the order in which shipping methods appear, with a default value of 1 if omitted.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/shipping-methods.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n\n    ...\n\n    <shipping-methods>\n\n        <shipping-method>\n            <identifier>NameOfYourFirstShippingMethod</identifier>\n            <name>First shipping method</name>\n            ...\n            <position>2</position>\n            ...\n        </shipping-method>\n\n    </shipping-methods>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Fixtures with Jest Lifecycle Hooks\nDESCRIPTION: Demonstrates how to use Jest's beforeEach lifecycle hook to set up test fixtures. In this example, feature flags are initialized before each test runs.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/test/helper/feature.helper.test.js\nimport Feature from 'src/helper/feature.helper';\n\n// One flag should be active, the other shouldn't.\nconst default_flags = {\n    test1: true,\n    test2: false\n};\n\ndescribe('feature.helper.js', () => {\n\n    // This hook is executed before every test\n    beforeEach(() => {\n        // Applying the flag fixture\n        Feature.init(default_flags);\n    });\n\n    test('checks the flags', () => {\n        // Assertions come here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage with pnpm (Bash)\nDESCRIPTION: This command runs the unit tests and generates a code coverage report using the pnpm package manager. It relies on the testing framework (Vitest, as per the document context) and associated coverage tooling being properly configured. This command executes the script named 'test:coverage' defined in the project's `package.json` file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Setting Required Input Fields in Shopware Plugin Configuration\nDESCRIPTION: Demonstrates how to mark an input field as required in the plugin configuration XML. The 'required' setting only accepts boolean values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<input-field>\n    <name>email</name>\n    <required>true</required>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Defining a Migration Connection Entity for Shopware 6 Migration - PHP\nDESCRIPTION: This PHP snippet shows the definition of SwagMigrationConnectionDefinition, an EntityDefinition subclass for storing connection entities in Shopware Migration Assistant. The defineFields() method registers fields for IDs, names, credentials, premapping, profile and gateway names, timestamps, and relationships to migration runs, mappings, and settings. Requires usage within the Shopware data abstraction layer and appropriate dependency classes (e.g., FieldCollection, StringField, JsonField); input comes from database migration setup and is intended for Shopware plugin developers.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/profile-and-connection.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\\n\\nnamespace SwagMigrationAssistant\\\\Migration\\\\Connection;\\n\\n/*...*/\\n\\nclass SwagMigrationConnectionDefinition extends EntityDefinition\\n{\\n    /*...*/\\n\\n    protected function defineFields(): FieldCollection\\n    {\\n        return new FieldCollection([\\n             (new IdField('id', 'id'))->setFlags(new PrimaryKey(), new Required()),\\n             (new StringField('name', 'name'))->setFlags(new Required()),\\n             (new JsonField('credential_fields', 'credentialFields'))->setFlags(new WriteProtected(MigrationContext::SOURCE_CONTEXT)),\\n             new JsonField('premapping', 'premapping'),\\n             (new StringField('profile_name', 'profileName'))->setFlags(new Required()),\\n             (new StringField('gateway_name', 'gatewayName'))->setFlags(new Required()),\\n             new CreatedAtField(),\\n             new UpdatedAtField(),\\n             new OneToManyAssociationField('runs', SwagMigrationRunDefinition::class, 'connection_id'),\\n             new OneToManyAssociationField('mappings', SwagMigrationMappingDefinition::class, 'connection_id'),\\n             new OneToManyAssociationField('settings', GeneralSettingDefinition::class, 'selected_connection_id'),\\n        ]);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Cache Invalidation by Action and Properties\nDESCRIPTION: Demonstrates advanced filtering of entity IDs based on specific actions (insert) and property changes (description, parentId) for targeted cache invalidation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.event.getIds('product') %}\n\n{% set ids = ids.only('insert') %} // filter by action = insert\n{% set ids = ids.with('description', 'parentId') %} // filter all entities were 'description` OR `parentId` was changed\n{% if ids.empty %}\n    {% return %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Initial Test Structure for Plugin Testing\nDESCRIPTION: Basic test setup with Jest including test environment configuration and lifecycle hooks for testing the Hello World plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\n// import your plugin here\nimport HelloWorldPlugin from 'src/plugin/hello-world/hello-world.plugin';\n\ndescribe('HelloWorldPlugin tests', () => {\n\n    beforeEach(() => {\n        // Here we need to do all the mocking\n    });\n\n    afterEach(() => {\n        // Teardown\n    });\n\n    test('custom plugin exists', () => {\n        // your actual test\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild for JavaScript Bundling\nDESCRIPTION: YAML configuration to enable ESBuild for Administration and Storefront asset bundling.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# .shopware-extension.yml\nbuild:\n  zip:\n    assets:\n      # Use esbuild for Administration\n      enable_es_build_for_admin: true\n      # Use esbuild for Storefront\n      enable_es_build_for_storefront: true\n```\n\n----------------------------------------\n\nTITLE: Development Service Definition in XML\nDESCRIPTION: Example of services.xml configuration from the development environment with direct service definitions and dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/overload-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service id=\"b2b_role.repository\" class=\"Shopware\\B2B\\Role\\Framework\\RoleRepository\">\n            <argument type=\"service\" id=\"dbal_connection\"/>\n            <argument type=\"service\" id=\"b2b_common.repository_dbal_helper\"/>\n        </service>\n\n        <service id=\"b2b_role.grid_helper\" class=\"Shopware\\B2B\\Common\\Controller\\GridHelper\">\n            <argument type=\"service\" id=\"b2b_role.repository\"/>\n        </service>\n\n        <service id=\"b2b_role.crud_service\" class=\"Shopware\\B2B\\Role\\Framework\\RoleCrudService\">\n            <argument type=\"service\" id=\"b2b_role.repository\"/>\n            <argument type=\"service\" id=\"b2b_role.validation_service\"/>\n        </service>\n\n        <service id=\"b2b_role.validation_service\" class=\"Shopware\\B2B\\Role\\Framework\\RoleValidationService\">\n            <argument type=\"service\" id=\"b2b_common.validation_builder\"/>\n            <argument type=\"service\" id=\"validator\"/>\n        </service>\n\n        <service id=\"b2b_role.acl_route_table\" class=\"Shopware\\B2B\\Role\\Framework\\AclRouteAclTable\">\n            <tag name=\"b2b_acl.table\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware Environment for Grafana Stack\nDESCRIPTION: Environment variables required for Shopware to work with the example Grafana Stack setup, including exporter configuration and service name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/opentelemetry.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nOTEL_PHP_AUTOLOAD_ENABLED=true\nOTEL_SERVICE_NAME=shopware\nOTEL_TRACES_EXPORTER=otlp\nOTEL_LOGS_EXPORTER=otlp\nOTEL_METRICS_EXPORTER=otlp\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Collecting Cart Data with CartDataCollectorInterface::collect in PHP\nDESCRIPTION: Guideline for implementing the `\\Shopware\\Core\\Checkout\\Cart\\CartDataCollectorInterface::collect` method. Implementations must always check if required data already exists in the provided `CartDataCollection` before querying the database to prevent redundant queries and improve performance. Newly loaded data should be appended to the collection.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/cart-process.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Core\\Checkout\\Cart\\CartDataCollectorInterface::collect\n```\n\n----------------------------------------\n\nTITLE: Using @experimental Annotation in JavaScript Component\nDESCRIPTION: Example of applying the @experimental annotation with the feature property to a JavaScript component. This follows the same pattern as PHP with stableVersion and the ALL_CAPS feature name convention.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @experimental stableVersion:v6.6.0 feature:WISHLIST\n */\nComponent.register('sw-new-component', {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Properties with Promoted Properties - PHP\nDESCRIPTION: Demonstrates the traditional definition of class properties and initialization within a constructor prior to PHP 8.0. This pattern requires explicit declaration and assignment of private properties. Suitable for PHP versions before property promotion became available. It is replaced as of PHP 8.0 by a more concise syntax.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Point {\n    private int $x;\n    private int $y;\n    public function __construct(int $x, int $y)\n    {\n        $this->x = $x;\n        $this->y = $y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Language Analyzer in Shopware YAML\nDESCRIPTION: This YAML configuration demonstrates how to create a custom language analyzer with specific stopwords and stemmer for Shopware's advanced search. It includes the definition of a custom analyzer, custom filters for stopwords and stemming, and mapping the analyzer to a language ISO code.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-add-modify-language-analyzers-stopwords-stemmer.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadvanced_search:\n    analysis:\n        analyzer:\n            sw_your_custom_language_analyzer:\n                type: custom\n                tokenizer: standard\n                filter: ['lowercase', 'my_stopwords_filter', 'my_stemmer_filter']\n    filter:\n        my_stopwords_filter:\n            type: 'stop'\n            stopwords: ['foo', 'bar']\n        my_stemmer_filter:\n            type: 'stemmer'\n            language: 'english'\n    # It's important to map your analyzer with the language iso code\n    language_analyzer_mapping:\n        custom_iso: sw_your_custom_language_analyzer\n```\n\n----------------------------------------\n\nTITLE: Listing Elasticsearch Indices\nDESCRIPTION: Returns high-level information about indices in the Elasticsearch cluster.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XGET 'http://elasticsearch:9200/_cat/indices/?pretty'\n```\n\n----------------------------------------\n\nTITLE: Example SCSS Code for Testing\nDESCRIPTION: A simple SCSS example that sets the background color of the body element to blue. This can be used to test if the SCSS compilation process is working correctly.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-css-js-to-theme.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/base.scss\nbody {\n    background-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Object Default Values in Constructors - PHP (Pre-PHP 8.1)\nDESCRIPTION: Illustrates assigning an object default to a property within the constructor body, as was necessary prior to PHP 8.1. The constructor accepts an optional Hasher instance, and if null, instantiates a Bcrypt object instead. Requires explicit null coalescing logic and additional property assignment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PasswordHasher\n{\n    private Hasher $hasher;\n    public function __construct(private Hasher $hasher = null)\n    {\n        $this->hasher = $hasher ?? new Bcrypt();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Premapping Reader Service in XML\nDESCRIPTION: This XML snippet defines a Symfony service for the `SalutationReader` class within the Shopware Migration Assistant. It injects the `salutation.repository` and `GatewayRegistry` services as arguments and tags the service with `shopware.migration.pre_mapping_reader` to register it as a premapping reader. This service is responsible for providing premapping choices and source system structure for salutations during migration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/premapping.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<service id=\"SwagMigrationAssistant\\Profile\\Shopware\\Premapping\\SalutationReader\">\n    <argument type=\"service\" id=\"salutation.repository\" />\n    <argument type=\"service\" id=\"SwagMigrationAssistant\\Migration\\Gateway\\GatewayRegistry\"/>\n    <tag name=\"shopware.migration.pre_mapping_reader\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Extended Syntax in Shopware App Scripts: Logical Operators\nDESCRIPTION: Shows the use of '&&' and '||' operators for logical conditions in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% if condition === true && condition2 === true %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Administration and Storefront in Shopware\nDESCRIPTION: Commands to build and watch for changes in the Shopware Administration and Storefront interfaces.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-administration.sh\n./bin/build-storefront.sh\n./bin/watch-administration.sh\n./bin/watch-storefront.sh\n```\n\n----------------------------------------\n\nTITLE: Running Shopware CLI Build Command\nDESCRIPTION: Core command to build and prepare a Shopware project for deployment. Handles dependency installation, asset compilation, and cleanup.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project ci <path>\n```\n\n----------------------------------------\n\nTITLE: Setting Shopware PaaS Git Remote - Bash\nDESCRIPTION: This snippet shows how to add a Shopware PaaS Git remote to your local repository using the Shopware CLI command `shopware project:set-remote`. Provide your specific project ID as an argument to the command. This step is mandatory for integrating your local repository with the remote PaaS environment, allowing deployments from your machine to the PaaS service.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/repository.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware project:set-remote 7xasjkyld189e # Replace with your project ID\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI with Nix package manager\nDESCRIPTION: Command to install Shopware CLI using the Nix package manager from either the official Nixpkgs or the more up-to-date FriendsOfShopware repository.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnix profile install nixpkgs#shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Calculators via Shopware\\Core\\Checkout\\Cart\\Price in PHP\nDESCRIPTION: Reference point for accessing available price calculators. The `Shopware\\Core\\Checkout\\Cart\\Price` class serves as a container or registry for all standard price calculators used in the cart process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/cart-process.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nShopware\\Core\\Checkout\\Cart\\Price\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Vue.js Components\nDESCRIPTION: Illustrates how to emit custom events in Vue.js components within the Shopware 6 Administration. This is used for two-way data binding and communication between components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.$emit('some-event', additionalData);\n```\n\n----------------------------------------\n\nTITLE: Mapping Elasticsearch Relationship in Platform.sh App YAML\nDESCRIPTION: This YAML snippet configures the relationship between the Shopware application and the Elasticsearch service within the `.platform.app.yaml` file. It defines a relationship named `elasticsearch` that points to the previously defined service named `elasticsearch` using its `opensearch` endpoint, making connection details available to the application.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/elasticsearch.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n// .platform.app.yaml\nrelationships:\n    elasticsearch: \"elasticsearch:opensearch\"\n```\n\n----------------------------------------\n\nTITLE: Starting and stopping Symfony server for Shopware\nDESCRIPTION: Commands to start and stop the Symfony server for running Shopware locally.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsymfony server:start\n\nsymfony server:start -d\n\nsymfony server:stop\n```\n\n----------------------------------------\n\nTITLE: Enabling CMS Integration for Custom Entities in Shopware XML\nDESCRIPTION: This XML snippet (`cms-aware.xml`) declares specific custom entities (`custom_entity_example`, `custom_entity_example_second`) as 'CMS-aware' within Shopware 6. This integration automatically adds predefined CMS-related fields (like `sw_title`, `sw_content`, `sw_cms_page_id`) to the entities and enables specific UI components for these fields within the Shopping Experiences editor. It references the corresponding XSD schema for validation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-19-blog-concept.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<cms-aware xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:noNamespaceSchemaLocation=\"../../../../../../../../src/Core/System/CustomEntity/Xml/Config/CmsAware/cms-aware-1.0.xsd\">\n    <entity name=\"custom_entity_example\"/>\n    <entity name=\"custom_entity_example_second\"/>\n</cms-aware>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Editor in Shopware Plugin Configuration\nDESCRIPTION: Demonstrates how to add a WYSIWYG text editor field using the sw-text-editor component in the plugin configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<component name=\"sw-text-editor\">\n    <name>textEditor</name>\n    <label>Write some nice text with WYSIWYG editor</label>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Narrowing Type with @var Annotation for Static Analysis in PHP\nDESCRIPTION: Demonstrates using a `@var Foo $foo` PHPDoc annotation to inform static analysis tools like PHPStan that the variable `$foo`, potentially `Foo|null`, should be treated as type `Foo`. This annotation affects static analysis only and provides no runtime type safety, so it should be used as a last resort.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/** @var Foo $foo */\n$foo = $bar->getFoo(); // $foo is Foo|null, but we expect only Foo\n```\n\n----------------------------------------\n\nTITLE: Stubbing Injections in Jest for Shopware Administration Components\nDESCRIPTION: Shows how to stub injections in Jest tests for Shopware Administration components. This example demonstrates mocking the 'mediaService' injection with a Promise-resolving method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmediaService: {\n    renameMedia: () => Promise.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Component Sections with Warning Messages\nDESCRIPTION: Shows how to mark a component section as deprecated using the added boolean and message props, including a proper code comment with the deprecation tag and version information.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-16-deprecating-sdk-public-api.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    {# @deprecated tag:v6.7.0 - Will be removed use position XYZ instead #}\n    <sw-extension-component-section\n        position-identifier=\"sw-chart-card__before\"\n        :deprecated=\"true\"\n        deprecation-message=\"Use position XYZ instead.\"\n    />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizer Helper\nDESCRIPTION: Demonstrates how to set and clear configuration options for the Sanitizer Helper.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/the-sanitizer-helper.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Helper.SanitizerHelper.setConfig({\n    USE_PROFILES: { html: true }\n});\n\nShopware.Helper.SanitizerHelper.clearConfig()\n```\n\n----------------------------------------\n\nTITLE: API Hook Reference Documentation\nDESCRIPTION: Documentation for the api-{hook} endpoint that handles general API requests. Includes details about available data, services and stoppable behavior.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | api-{hook} |\n| Since | 6.4.9.0 |\n| Class | Shopware\\Core\\Framework\\Script\\Api\\ApiHook |\n```\n\n----------------------------------------\n\nTITLE: Ensuring Object Instance Type in PHPUnit Tests with assertInstanceOf\nDESCRIPTION: Illustrates using `static::assertInstanceOf()` in PHPUnit tests to assert that a variable `$foo` (potentially `object`) is an instance of the `Foo` class. This provides type safety within tests, causing a failure if the variable is not of the expected class.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is object, but we expect it to be Foo instance\n\nstatic::assertInstanceOf(Foo::class, $foo);\n```\n\n----------------------------------------\n\nTITLE: Deprecating Vue Slots in Templates\nDESCRIPTION: Demonstrates how to deprecate a Vue slot while maintaining backward compatibility by including both old and new slot names with proper comments.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{# @deprecated tag:v6.5.0 - Use slot \"main-content\" instead #}\n<slot name=\"content\"></slot>\n<slot name=\"main-content\"></slot>\n```\n\n----------------------------------------\n\nTITLE: Using Composer Dependencies in a Shopware 6 Event Subscriber\nDESCRIPTION: This PHP code shows how to use the 'sebastian/exporter' Composer package in a Shopware 6 event subscriber. The subscriber listens to the NavigationPageLoadedEvent and uses the Exporter class to log a formatted message to the Symfony profiler logs.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-composer-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/SwagBasicExample.php\n<?php\nnamespace SwagBasicExample\\Subscriber;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Shopware\\Storefront\\Page\\Navigation\\NavigationPageLoadedEvent;\n\nuse Psr\\Log\\LoggerInterface;\nuse SebastianBergmann\\Exporter\\Exporter;\n\nclass MySubscriber implements EventSubscriberInterface\n{\n     private LoggerInterface $logger;\n\n    public function __construct(\n        LoggerInterface $logger\n    ) {\n        $this->logger = $logger;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        // Return the events to listen to as array like this:  <event to listen to> => <method to execute>\n        return [\n            NavigationPageLoadedEvent::class => 'onNavigationPage'\n        ];\n    }\n\n    public function onNavigationPage(NavigationPageLoadedEvent $event)\n    {\n        $exporter = new Exporter;\n        $this->logger->info($exporter->export('hello, world!'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono App Server for External Frontend in Shopware\nDESCRIPTION: This code snippet demonstrates how to set up a Hono app server for a Shopware external frontend. It configures the app server to handle authentication, enables iframe support, and sets up API endpoints. The server verifies requests, manages cookies, and forwards authenticated requests to the frontend.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/07-external-frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono/tiny\";\nimport { configureAppServer } from \"@shopware-ag/app-server-sdk/integration/hono\";\n\nconst app = new Hono();\n\nconfigureAppServer(app, {\n  /** ... */\n  appIframeEnable: true,\n  appIframeRedirects: {\n    '/app/browser': '/client'\n  }\n});\n\napp.get('/client-api/test', (c) => {\n  console.log(c.get('shop').getShopId());\n\n  return c.json({ shopId: c.get('shop').getShopId() });\n});\n```\n\n----------------------------------------\n\nTITLE: Cart Manipulation Hook Implementation\nDESCRIPTION: Hook triggered during cart calculation process, allowing cart manipulation and access to cart data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Core\\Checkout\\Cart\\Hook\\CartHook\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Single Select for Products in Shopware\nDESCRIPTION: Demonstrates how to create a single product selection field using the sw-entity-single-select component in the plugin configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<component name=\"sw-entity-single-select\">\n    <name>exampleProduct</name>\n    <entity>product</entity>\n    <label>Choose a product for the plugin configuration</label>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom SCSS Styles to a Shopware 6 Component\nDESCRIPTION: This SCSS snippet defines custom styles for the 'sw-hello-world' component. It sets the text color to blue for elements with the 'sw-hello-world' class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/add-custom-styles.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.sw-hello-world {\n    color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware Plugin via CLI\nDESCRIPTION: Command to upload and activate a Shopware plugin using shopware-cli tool. Includes option for version increment when manifest.xml changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nshopware-cli project extension upload . --activate\n```\n\nLANGUAGE: shell\nCODE:\n```\nshopware-cli project extension upload . --activate --increase-version\n```\n\n----------------------------------------\n\nTITLE: Migrating Vue $listeners Usage\nDESCRIPTION: Demonstrates the change in handling event listeners between Vue 2 and Vue 3, where $listeners is now included in $attrs.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-migration-build.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <sw-button v-on=\"$listeners\">Click me</sw-button>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <sw-button v-bind=\"$attrs\">Click me</sw-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Activating Feature Flag via .env (Bash)\nDESCRIPTION: Demonstrates how to activate a specific feature flag (e.g., 'v6.5.0.0') by setting an environment variable in the `.env` file. Note that dots in the flag name are replaced with underscores in the environment variable name.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nV6_5_0_0=1\n```\n\n----------------------------------------\n\nTITLE: Enabling K6 Dashboard for Real-time Monitoring\nDESCRIPTION: Command to run K6 tests with the built-in web dashboard enabled for real-time monitoring of test results.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nK6_WEB_DASHBOARD=true k6 run --vus 10 --duration 5m example.js\n```\n\n----------------------------------------\n\nTITLE: Registering SeoUrlRoute Service in XML\nDESCRIPTION: This XML snippet shows how to register the custom SeoUrlRoute class as a service in the Symfony container, with the necessary tag for Shopware to recognize it as a SEO URL route.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ExamplePageSeoUrlRoute\">\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Core\\Content\\Example\\ExampleDefinition\"/>\n\n            <tag name=\"shopware.seo_url.route\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Fields with Custom Serialization in Shopware 6\nDESCRIPTION: This example demonstrates how to use the Serialized attribute to store JSON data in a field with custom validation and serialization logic. It uses a PriceFieldSerializer for a PriceCollection field.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Serialized;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceFieldSerializer;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Pricing\\PriceCollection;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n    \n    #[Serialized(serializer: PriceFieldSerializer::class)]\n    public ?PriceCollection $serialized = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Translatable Card Titles in Plugin Configuration\nDESCRIPTION: Demonstrates how to create translatable card titles in the plugin configuration by using the lang attribute for different locales.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n    ...\n    <card>\n        <title>English Title</title>\n        <title lang=\"de-DE\">German Titel</title>\n    </card>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring theme.json with overrides.scss Entry Point\nDESCRIPTION: This code snippet shows how to configure the theme.json file to include an overrides.scss entry point before the main Storefront styles, allowing Bootstrap variable overrides to be applied globally.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/override-bootstrap-variables-in-a-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  \"name\": \"SwagBasicExampleTheme\",\n  \"author\": \"Shopware AG\",\n  \"views\": [\n        \"@Storefront\",\n        \"@Plugins\"\n  ],\n  \"style\": [\n    \"app/storefront/src/scss/overrides.scss\", <-- Variable overrides\n    \"@Storefront\",\n    \"app/storefront/src/scss/base.scss\"\n  ],\n  \"script\": [\n    \"@Storefront\",\n    \"app/storefront/dist/storefront/js/just-another-theme/just-another-theme.js\"\n  ],\n  \"asset\": [\n    \"@Storefront\",\n    \"app/storefront/src/assets\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing collect method for CMS Element Resolver in PHP\nDESCRIPTION: Demonstrates how to implement the collect method to prepare criteria for media entities based on the CMS element configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-data-to-cms-elements.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function collect(CmsSlotEntity $slot, ResolverContext $resolverContext): ?CriteriaCollection\n{\n    $config = $slot->getFieldConfig();\n    $myCustomMedia = $config->get('myCustomMedia');\n\n    if (!$myCustomMedia) {\n        return null;\n    }\n\n    $mediaId = $myCustomMedia->getValue();\n\n    $criteria = new Criteria([$mediaId]);\n\n    $criteriaCollection = new CriteriaCollection();\n    $criteriaCollection->add('media_' . $slot->getUniqueIdentifier(), MediaDefinition::class, $criteria);\n\n    return $criteriaCollection;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom CMS Block in Shopware 6 Administration\nDESCRIPTION: This snippet shows how to import a custom CMS block into the main.js file of a Shopware 6 plugin's administration resources.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/main.js\nimport './module/sw-cms/blocks/text-image/my-image-text-reversed';\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware Version for Build\nDESCRIPTION: YAML configuration to specify the Shopware version constraint for building extension assets.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .shopware-extension.yml\nbuild:\n  shopwareVersionConstraint: '6.6.9.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in XML\nDESCRIPTION: XML configuration for registering the controller in the DI-container with necessary service calls.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-controller.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\" \n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Storefront\\Controller\\ExampleController\" public=\"true\">\n            <call method=\"setContainer\">\n                <argument type=\"service\" id=\"service_container\"/>\n            </call>\n            <call method=\"setTwig\">\n                <argument type=\"service\" id=\"twig\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Migration File\nDESCRIPTION: Command to generate a new migration file for a Shopware 6 plugin with a descriptive name, which adds a timestamp automatically.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/console database:create-migration -p SwagBasicExample --name ExampleDescription\n```\n\n----------------------------------------\n\nTITLE: Deprecating Twig Blocks in Administration\nDESCRIPTION: Shows how to deprecate a Twig block in the administration panel using Twig comments since the deprecated tag is not supported.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{% block the_block_name %}\n    {# @deprecated tag:v6.5.0 - Block will be removed completely including the content #}\n    <div>Content</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Shopping List with Store API\nDESCRIPTION: POST endpoint for creating a new shopping list. Requires a name parameter as a string.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_0\n\nLANGUAGE: http request\nCODE:\n```\nPOST {url}/store-api/shopping-list {\n    name: {string}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User ID on Linux Systems\nDESCRIPTION: Command to check the user ID on Linux systems. This is important because the Docker setup requires the host user ID to be 1000 for proper functioning on Linux.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nid -u\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration - YAML\nDESCRIPTION: Shows how to use Symfony Configuration processors with environment variables to set system configuration values dynamically.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/static-system-config.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  system_config:\n    default:\n      core.listing.allowBuyInListing: '%env(bool:ALLOW_BUY_IN_LISTING)%'\n```\n\n----------------------------------------\n\nTITLE: MySQL Dump with Custom Credentials - Bash\nDESCRIPTION: Extended dump command with custom database connection parameters including host, username, password, and database name.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/mysql-dump.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project dump --host 127.0.0.1 --username root --password root --database sw6\n```\n\n----------------------------------------\n\nTITLE: CMS Block Styles\nDESCRIPTION: CSS styling for the CMS block preview and editor components\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/content/cms/add-custom-cms-blocks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.sw-cms-preview-swag-image-text-reversed {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 20px;\n    padding: 15px;\n}\n\n.sw-cms-block-swag-image-text-reversed-component {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(195px, 1fr));\n    grid-gap: 40px;\n}\n\n.sw-cms-block-swag-image-text-reversed-component .sw-cms-slot-left {\n    \n}\n\n.sw-cms-block-swag-image-text-reversed-component .sw-cms-slot-right {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Storefront Unit Tests\nDESCRIPTION: Shows the recommended folder structure for placing unit tests in a Shopware storefront plugin. Tests should be placed in a directory structure that mirrors the source code structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nResources\n  `-- app\n    `-- <environment>\n      `-- test\n        `-- plugin\n          `-- <plugin-name>\n            `-- js-plugin-test.spec.js\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table with Context Owner ID for B2B Authentication\nDESCRIPTION: SQL code to create a table with a context_owner_id column for B2B authentication, including foreign key constraints and indexing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `b2b_my` (\n  `id` INT(11) NOT NULL AUTO_INCREMENT,\n  `context_owner_id` INT(11) NOT NULL,\n  [...]\n\n  PRIMARY KEY (`id`),\n\n  INDEX `b2b_my_auth_owner_id_IDX` (`context_owner_id`),\n\n  CONSTRAINT `b2b_my_auth_owner_id_FK` FOREIGN KEY (`context_owner_id`)\n    REFERENCES `b2b_store_front_auth` (`id`) ON UPDATE NO ACTION ON DELETE CASCADE\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Price using API Criteria in JSON\nDESCRIPTION: Shows how to use the API to find the minimum price of products. It includes both the request payload and the expected response format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {  \n            \"name\": \"min-price\",\n            \"type\": \"min\",\n            \"field\": \"price\"\n        }\n    ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"min-price\": {\n            \"min\": \"5\",\n            \"extensions\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shopware Demo Data\nDESCRIPTION: Command to set up a full test environment with demo data for Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncomposer setup && APP_ENV=prod bin/console framework:demodata && APP_ENV=prod bin/console dal:refresh:index\n```\n\n----------------------------------------\n\nTITLE: Compiling Shopware CLI from source\nDESCRIPTION: Steps to clone the Shopware CLI repository, build the binary from source code, and verify the installation.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/shopware/shopware-cli\ncd shopware-cli\n\ngo mod tidy\n\ngo build -o shopware-cli .\n\n./shopware-cli --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Repository for Shop Domain\nDESCRIPTION: Command to generate auth.json and update composer.json with the repository configuration for a specific shop domain. Supports tab completion for available shop domains.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/configure-composer-repository.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account merchant shop configure-composer <domain>\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Shopware PaaS CLI using Shell\nDESCRIPTION: This shell command uses `curl` to download the Shopware PaaS CLI installer script from the official source and pipes it directly to `php` for execution. This command handles the download and installation process in a single step. Requires `curl` and `php` to be installed on the system.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/cli-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sfS https://cli.shopware.com/installer | php\n```\n\n----------------------------------------\n\nTITLE: Illustrating B2B Suite Store API Route Pattern Changes\nDESCRIPTION: Demonstrates how the route patterns change from the Admin API to the Store API for the B2B Suite. The identity identifier is removed, and the base path changes from '/api/b2b/' to '/store-api/b2b/'.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/store-api.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/api/b2b/debtor/address/type/ becomes /store-api/b2b/address/type/\n/api/b2b/debtor/offer becomes /store-api/b2b/offer\n/api/b2b/debtor/order becomes /store-api/b2b/order\n```\n\n----------------------------------------\n\nTITLE: Direct Redis Connection Service Definition\nDESCRIPTION: Shows how to inject a Redis connection directly by name using XML service configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/redis.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"MyCustomService\">\n    <argument type=\"service\" id=\"shopware.redis.connection.connection_name\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment Variables for Elasticsearch\nDESCRIPTION: Example .env file configuration for a production environment with Elasticsearch settings including database connection, URLs, and Elasticsearch-specific parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=prod\nAPP_SECRET=1\nINSTANCE_ID=1\nDATABASE_URL=mysql://mysqluser:mysqlpassword@localhost:3306/shopwaredatabasename\nAPP_URL=http://localhost\nMAILER_URL=smtp://localhost:1025\nCOMPOSER_HOME=/var/www/html/var/cache/composer\n\nOPENSEARCH_URL=\"elasticsearchhostname:9200\"\nSHOPWARE_ES_ENABLED=\"1\"\nSHOPWARE_ES_INDEXING_ENABLED=\"1\"\nSHOPWARE_ES_INDEX_PREFIX=\"sw\"\nSHOPWARE_ES_THROW_EXCEPTION=1\n```\n\n----------------------------------------\n\nTITLE: Setting PHP version for Shopware project\nDESCRIPTION: Example of setting the PHP version to 8.3 for a Shopware project using a .php-version file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\n8.3\n```\n\n----------------------------------------\n\nTITLE: Running Single Scheduled Task in Shopware CLI\nDESCRIPTION: Command to execute a specific scheduled task directly without using the queue system. Uses the scheduled-task:run-single command followed by the task name (e.g., log_entry.cleanup).\nSOURCE: https://github.com/shopware/docs/blob/main/snippets/guide/debugging_scheduled_tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/console scheduled-task:run-single log_entry.cleanup\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key Relationship for A11y Document Media Files\nDESCRIPTION: PHP code defining the foreign key relationship between the document and media tables for A11y documents, with API awareness flag to expose this field to the API.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new FkField('document_a11y_media_file_id', 'documentA11yMediaFileId', MediaDefinition::class))\n    ->addFlags(new ApiAware());\n```\n\n----------------------------------------\n\nTITLE: Theme Asset Configuration with Storefront Inheritance in Shopware 6\nDESCRIPTION: Configuring paths to theme assets with inheritance from the default Storefront theme assets.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"asset\": [\n     \"@Storefront\",\n     \"app/storefront/src/assets\"\n   ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RulePayloadUpdater for App Script Conditions (Diff)\nDESCRIPTION: This diff shows modifications to the `RulePayloadUpdater` to support app script conditions. The SQL query is updated to LEFT JOIN `app_script_condition` and retrieve the script content when fetching rule conditions. The PHP logic is adjusted to check if the rule object is an instance of `ScriptRule` and, if so, assign the fetched `script` and decoded `values` appropriately when building the rule payload.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// src/Core/Content/Rule/DataAbstractionLayer/RulePayloadUpdater.php \n\n        $conditions = $this->connection->fetchAll(\n-           'SELECT LOWER(HEX(rc.rule_id)) as array_key, rc.* FROM rule_condition rc  WHERE rc.rule_id IN (:ids) ORDER BY rc.rule_id',\n+           'SELECT LOWER(HEX(rc.rule_id)) as array_key, rc.*, rs.script\n+           FROM rule_condition rc\n+           LEFT JOIN app_script_condition rs ON rc.script_id = rs.id AND rs.active = 1\n+           WHERE rc.rule_id IN (:ids)\n+           ORDER BY rc.rule_id',\n            ['ids' => Uuid::fromHexToBytesList($ids)],\n            ['ids' => Connection::PARAM_STR_ARRAY]\n        );\n        \n        // ...\n        \n-           if ($rule['value'] !== null) {\n+           if ($object instanceof ScriptRule) {\n+               $object->assign([\n+                   'script' => $rule['script'],\n+                   'values' => $rule['value'] ? json_decode($rule['value'], true) : []\n+               ]);\n+           }\n+           elseif ($rule['value'] !== null) {\n                $object->assign(json_decode($rule['value'], true));\n            }\n```\n\n----------------------------------------\n\nTITLE: Removing RabbitMQ Relationships in App Configuration YAML\nDESCRIPTION: This code demonstrates removing the RabbitMQ relationship from the application's YAML configuration by commenting it out in .platform.app.yaml. No dependencies are needed to simply remove a relationship. The configuration references a relationship named 'rabbitmqqueue' that links to a RabbitMQ service. Properly commenting these lines prevents the application from attempting to connect to RabbitMQ. Requires a git deployment after changes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/rabbitmq.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n// .platform.app.yaml\\n#relationships:\\n#   rabbitmqqueue: \\\"rabbitmq:rabbitmq\\\"\n```\n\n----------------------------------------\n\nTITLE: Running Storefront Hot-Proxy in Shopware 6\nDESCRIPTION: Command to start the Storefront hot-proxy for live style updates in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-styling.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/watch-storefront.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run watch:storefront\n```\n\n----------------------------------------\n\nTITLE: Storefront Block Template\nDESCRIPTION: Twig template extending the base image-text block for storefront rendering\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/content/cms/add-custom-cms-blocks.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/block/cms-block-image-text.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Index in Shopware 6\nDESCRIPTION: Creates only the index for Elasticsearch without any output.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console es:index\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Cluster Information\nDESCRIPTION: Retrieves basic information about the Elasticsearch cluster using the REST API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XGET 'http://elasticsearch:9200/?pretty'\n```\n\n----------------------------------------\n\nTITLE: Using Shopware CLI in Devenv configuration\nDESCRIPTION: Nix configuration to include Shopware CLI from FriendsOfShopware packages in a devenv.nix file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, inputs, ... }: {\n  packages = [\n    inputs.froshpkgs.packages.${pkgs.system}.shopware-cli\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Response for Finalize Endpoint in JSON\nDESCRIPTION: Example of a successful response from the Finalize endpoint, indicating that the payment has been completed.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/payment-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"paid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Images in Twig Templates\nDESCRIPTION: Two examples of how to display media images in Twig templates: using a direct HTML img tag for the original image or the sw_thumbnails function for responsive images.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/custom-fields-of-type-media.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ sportsMedia.url }}\" alt=\"{{ sportsMedia.alt }}\">\n```\n\n----------------------------------------\n\nTITLE: YAML Navigation Configuration for Shopware Admin Docs\nDESCRIPTION: Defines the navigation structure for Shopware Administration documentation with title and position parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/upgrades/administration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: Administration\n  position: 10\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Support Configuration for Shopware 6 Storefront\nDESCRIPTION: The .browserslist configuration that defines which browsers are supported by the Shopware 6 Storefront. This configuration determines which vendor prefixes would theoretically be needed in the compiled CSS.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-03-disable-css-autoprefixer.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n>= 0.5%\nlast 2 major versions\nnot dead\nChrome >= 60\nFirefox >= 60\nFirefox ESR\niOS >= 12\nSafari >= 12\nnot Explorer <= 11\n```\n\n----------------------------------------\n\nTITLE: Shopware CLI Command for App Installation\nDESCRIPTION: This shell command uses the Shopware CLI to upload and activate the custom app extension in a Shopware store.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nshopware-cli project extension upload . --activate\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Data Structure with Mermaid ER Diagram\nDESCRIPTION: This Mermaid code defines an Entity Relationship Diagram (ERD) for the proposed Shopware blog feature. It outlines the `blog_post` entity, including standard fields and CMS-aware fields (prefixed with `sw_`), and its relationships with `category` (via `blog_post_category`), `tag` (via `blog_post_tag`), and `cms_page`. It also shows the `category` type field used to identify blog categories and the relationship between `cms_slot_config` and `category` for listing blocks.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-19-blog-concept.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    blog_post {\n        uuid id PK\n        uuid sw_cms_page_id\n        uuid sw_media_id\n        string sw_title\n        string sw_content\n        string sw_seo_meta_title\n        string sw_seo_meta_description\n        string sw_seo_keywords\n        json custom_fields\n        datetime publish_at\n    }\n    category {\n        uuid id PK\n        string type\n    }\n    blog_post_category {\n        uuid blog_post_id PK\n        uuid category_id PK\n    }\n    blog_post_tag {\n        uuid blog_post_id PK\n        uuid tag_id PK\n    }\n    blog_post ||--o{ blog_post_category : \"collected in\"\n    blog_post_category }o--|| category : \"collected in\"\n    blog_post }o--|| cms_page : \"has blog post template\"\n    cms_slot_config |o--o| category : \"listing block\"\n    blog_post ||--o{ blog_post_tag : \"\"\n    blog_post_tag }o--|| tag : \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Session Storage in PHP.ini\nDESCRIPTION: Example of how to configure Redis as the session handler directly in PHP.ini. This sets Redis as the session storage mechanism with basic connection parameters to the Redis server.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/session.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsession.save_handler = redis\nsession.save_path = \"tcp://host:6379?database=0\"\n```\n\n----------------------------------------\n\nTITLE: Utilizing Named Arguments with htmlspecialchars - PHP (PHP 8.0+)\nDESCRIPTION: Highlights the use of named arguments for PHP's global functions (PHP 8.0+), allowing developers to only specify parameters they wish to override, such as 'double_encode', while omitting others. Improves clarity and reduces cognitive load for functions with many parameters. Should only be used for PHP built-ins, not Shopware APIs.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nhtmlspecialchars($string, double_encode: false);\n```\n\n----------------------------------------\n\nTITLE: Registering CartAmountRule in services.xml for Shopware Plugin\nDESCRIPTION: This XML snippet registers the CartAmountRule service and tags it as a Shopware approval rule definition in the services.xml file of the plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/order-approval/guides/04-add-new-approval-condition.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"YourPluginNameSpace\\CartAmountRule\" public=\"true\">\n    <tag name=\"shopware.approval_rule.definition\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Blacklist in Shopware Administration\nDESCRIPTION: This snippet demonstrates how to add a property to the general blacklist in the Shopware Administration. It overrides the 'sw-product-stream-field-select' component to add 'deliveryTimeId' to the blacklist.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/modify-blacklist-for-dynamic-product-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Component } = Shopware;\n\nComponent.override('sw-product-stream-field-select', {\n    computed: {\n        options() {\n            this.conditionDataProviderService.addToGeneralBlacklist(['deliveryTimeId']);\n            return this.$super('options');\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Configuration\nDESCRIPTION: Example of GET request response format when retrieving app configuration values through the API\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGET /api/_action/system-config?domain=DemoApp.config&salesChannelId=98432def39fc4624b33213a56b8c944d\\n\\n{\\n    \"DemoApp.config.field1\": true,\\n    \"DemoApp.config.field2\": \"successfully configured\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Building Shopware Components with NPM Dependencies\nDESCRIPTION: Bash commands for building the Storefront or Administration components after adding NPM dependencies and modifying the webpack configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/using-npm-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Storefront\n./bin/build-storefront.sh\n\n# Build the Administration\n./bin/build-administration.sh\n```\n\n----------------------------------------\n\nTITLE: Store Testing Setup\nDESCRIPTION: Example of testing setup for Pinia stores with store reset.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport './store/my.store';\n\ndescribe('my store', () => {\n  const store = Shopware.Store.get('myStore');\n\n  beforeEach(() => {\n    store.$reset();\n  });\n\n  it('has initial state', () => {\n    expect(store.count).toBe(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Endpoints in App Manifest\nDESCRIPTION: XML configuration for defining checkout gateway endpoints in the app manifest file, introducing a new 'gateways' element structure.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-04-01-checkout-gateway.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest>\n    <!-- ... -->\n\n    <gateways>\n        <checkout>https://example.com/checkout/gateway</checkout>\n    </gateways>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Registering CMS Element Configuration\nDESCRIPTION: Configuration for registering the Dailymotion CMS element with component definitions and default settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Service('cmsService').registerCmsElement({\n    name: 'dailymotion',\n    label: 'sw-cms.elements.customDailymotionElement.label',\n    component: 'sw-cms-el-dailymotion',\n    configComponent: 'sw-cms-el-config-dailymotion',\n    previewComponent: 'sw-cms-el-preview-dailymotion',\n    defaultConfig: {\n        dailyUrl: {\n            source: 'static',\n            value: ''\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Executing PHPUnit Tests for Shopware 6 Plugin\nDESCRIPTION: Shell commands for running different types of PHPUnit tests: executing a specific testsuite, all tests in a plugin, or filtering by class or method name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/php-unit.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/phpunit --configuration=\"custom/plugins/SwagBasicExample\" --testsuite \"migration\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/phpunit --configuration=\"custom/plugins/SwagBasicExample\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/phpunit --configuration=\"custom/plugins/SwagBasicExample\" --filter testNoChanges\n./vendor/bin/phpunit --configuration=\"custom/plugins/SwagBasicExample\" --filter Migration1611740369ExampleDescriptionTest\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Aggregations via API JSON in Shopware\nDESCRIPTION: Example of how to create nested aggregations through the API using JSON. The request shows how to combine filter and terms aggregations, and the response shows the multi-level structure of the results with category and manufacturer data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 1,\n    \"includes\": {\n        \"product\": [\"id\", \"name\"]\n    },\n    \"aggregations\": [\n        {\n            \"name\": \"my-filter\",\n            \"type\": \"filter\",\n            \"filter\": [\n                { \n                    \"type\": \"range\", \n                    \"field\": \"price\", \n                    \"parameters\": {\n                        \"gte\": 500\n                    }\n                }\n            ],\n            \"aggregation\": {  \n                \"name\": \"per-category\",\n                \"type\": \"terms\",\n                \"field\": \"categories.id\",\n                \"aggregation\": {\n                    \"name\": \"manufacturer-ids\",\n                    \"type\": \"terms\", \n                    \"field\": \"manufacturerId\"\n                }\n            }\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"data\": [\n        {\n            \"name\": \"Gorgeous Cotton Magellanic Penguin\",\n            \"id\": \"0402ca6a746b41458fd000124c308cc8\",\n            \"apiAlias\": \"product\"\n        }\n    ],\n    \"aggregations\": {\n        \"per-category\": {\n            \"buckets\": [\n                {\n                    \"key\": \"25fb912226fa48c2a5c9f4788f1f552d\",\n                    \"count\": 1,\n                    \"extensions\": [],\n                    \"manufacturer-ids\": {\n                        \"buckets\": [\n                            {\n                                \"key\": \"715901f2b5864181a777d1a1b912d9a2\",\n                                \"count\": 1,\n                                \"extensions\": []\n                            }\n                        ],\n                        \"extensions\": []\n                    }\n                },\n                {\n                    \"key\": \"59b38c960597446e8c7bb76593ff7043\",\n                    \"count\": 2,\n                    \"extensions\": [],\n                    \"manufacturer-ids\": {\n                        \"buckets\": [\n                            {\n                                \"key\": \"98e53a711d8549059325da044da2951d\",\n                                \"count\": 1,\n                                \"extensions\": []\n                            },\n                            {\n                                \"key\": \"ee8b37324c5a4c32962367146be4d7b4\",\n                                \"count\": 1,\n                                \"extensions\": []\n                            }\n                        ],\n                        \"extensions\": []\n                    }\n                }\n            ],\n            \"apiAlias\": \"per-category_aggregation\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Filesystem Configuration for File Extensions and Download Strategy\nDESCRIPTION: YAML configuration for regulating allowed file extensions in public and private filesystems, and configuring the download strategy for private files in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  filesystem:\n    public:\n      # The Adapter Configuration\n    private:\n      # The Adapter Configuration\n    allowed_extensions: # Array with allowed file extensions for public filesystem\n    private_allowed_extensions: # Array with allowed file extensions for private filesystem\n    private_local_download_strategy: # Name of the download strategy: php, x-sendfile or x-accel\n\n```\n\n----------------------------------------\n\nTITLE: Storing StorableFlow State for Delayed Actions (PHP/SQL)\nDESCRIPTION: This PHP snippet demonstrates how the state of a `StorableFlow` is prepared for a delayed action. The `$store` array (containing scalar data) is retrieved using `$flow->stored()` (assuming such a method exists or `$flow->store` is accessed), JSON-encoded, and then inserted into a database table (e.g., `swag_delay_action`) for later retrieval.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// In handler delay actions -> put the actions to `queue`\n$stored = json_encode($flow->stored());\n\n$connection->executeStatement('INSERT INTO `swag_delay_action` (store) VALUES (:stored)...', ['stored' => $stored]);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Basic Settings\nDESCRIPTION: Environment variables to enable OpenTelemetry auto-instrumentation and set the service name for Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/opentelemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOTEL_PHP_AUTOLOAD_ENABLED=true\nOTEL_SERVICE_NAME=shopware\n```\n\n----------------------------------------\n\nTITLE: Authenticating the Shopware PaaS CLI using Shell\nDESCRIPTION: This shell command executes the installed Shopware PaaS CLI (`shopware`). When run for the first time or after authentication expires, it typically initiates a browser-based login flow to authenticate the user with their Shopware PaaS account. Follow the on-screen or browser instructions to complete authentication.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/cli-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nshopware\n```\n\n----------------------------------------\n\nTITLE: Updating Shopware with Maintenance Mode\nDESCRIPTION: Commands for safely updating Shopware by enabling maintenance mode, updating packages, and finishing the update.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/console system:update:prepare\ncomposer update --no-scripts\nbin/console system:update:finish\n```\n\n----------------------------------------\n\nTITLE: Loading Identity by Auth ID in Shopware B2B Authentication\nDESCRIPTION: PHP code snippet showing how to load an identity using the AuthenticationService in Shopware B2B Suite.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$ownerIdentity = $authenticationService->getIdentityByAuthId($contextOwnerId);\n```\n\n----------------------------------------\n\nTITLE: Assigning WarehouseGroups to Products API Example\nDESCRIPTION: JSON payload example for the sync API to assign WarehouseGroups to Products and create ProductWarehouses via association.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/multi-inventory.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"action\": \"upsert\",\n    \"entity\": \"product\",\n    \"payload\": [{\n        \"id\": \"86d38702be7e4ac9a941583933a1c6f5\",\n        \"versionId\": \"0fa91ce3e96a4bc2be4bd9ce752c3425\",\n        \"warehouseGroups\": [{\n            \"id\": \"8cf7736855594501aaf86351e147c61e\"\n        }],\n        \"warehouses\": [{\n            \"id\": \"f5c850109fe64c228377cbd369903b75\",\n            \"productId\": \"86d38702be7e4ac9a941583933a1c6f5\",\n            \"productVersionId\": \"0fa91ce3e96a4bc2be4bd9ce752c3425\",\n            \"warehouseId\":\"4ce2bd36d2824153812fcb6a97f22d22\",\n            \"stock\": 0\n        }]\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Referencing Stock Handling Feature Flag in Shopware\nDESCRIPTION: This snippet shows the feature flag that must be enabled for the stock management system to be active in Shopware 6.5.5.0+. The \\STOCK_HANDLING\\ flag controls the activation of the stock management feature.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/index.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\\STOCK_HANDLING\\\n```\n\n----------------------------------------\n\nTITLE: Verifying PHP version and configuration\nDESCRIPTION: Commands to verify the PHP version and configuration being used by Symfony CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsymfony php -v\n\nsymfony php -i\n```\n\n----------------------------------------\n\nTITLE: Adding a Deprecated Method Argument in PHP\nDESCRIPTION: Shows how to handle a parameter that will become mandatory in a future version using feature flags and deprecation annotations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @feature-deprecated tag:v6.5.0 (flag:FEATURE_NEXT_22222)\n * Parameter $precision will be mandatory in future implementation\n */\npublic function calculate(ProductEntity $product, Context $context /*, int $precision */): Product\n{\n   if (Feature::isActive('FEATURE_NEXT_22222')) {\n      if (\\func_num_args() === 3) {\n         $precision = func_get_arg(2);\n         // Do new calculation\n      } else {\n         throw new InvalidArgumentException('Argument 3 $precision is required with feature FEATURE_NEXT_22222');\n      }\n   } else {\n      // Do old calculation\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastly PHP Client via Composer (Shell)\nDESCRIPTION: This shell command utilizes Composer, the PHP dependency manager, to install the `fastly/fastly` package. This package provides the necessary PHP client library for the Shopware application to interact with the Fastly service. Requires Composer to be installed and accessible in the environment. This is step 2 in the documented setup process.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/fastly.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer req fastly\n```\n\n----------------------------------------\n\nTITLE: Referencing the Old Tooltip Utility File Path\nDESCRIPTION: This specifies the file path for the original utility class used solely for initializing Bootstrap tooltips. This utility is being deprecated.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-09-23-add-bootstrap-util.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/utility/tooltip/tooltip.util.js\n```\n\n----------------------------------------\n\nTITLE: Example FlowStorer Implementation: OrderStorer (PHP)\nDESCRIPTION: This PHP class `OrderStorer` implements `FlowStorer`. The `store` method checks if the event implements `OrderAware` and stores the `orderId`. The `restore` method checks for the stored `orderId` and sets up lazy loading for the full order entity within the `StorableFlow` instance, demonstrating how entity data is handled.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass OrderStorer implements FlowStorer\n{\n    // This function to check the original event is the instanceof Aware interface, and store the representation.\n    public function store(FlowEventAware $event, array $storedData): array \n    {\n        if ($event instanceof OrderAware) {\n            $storedData['orderId'] = $event->getOrderId();\n        }\n        \n        return $storedData;\n    }\n    \n    // This function is restore the data based on representation in `storedData`\n    public function restore(StorableFlow $flow): void\n    {\n        if ($flow->hasStore('orderId')) {\n            // allows to provide a closure for lazy data loading\n            // this opens the opportunity to have lazy loading for big data\n            // When we load the entity, we need to add the necessary associations for each entity\n            $flow->lazy('order', [$this, 'load']);    \n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Backoff Policy for Plugin Rate Limiting\nDESCRIPTION: Example of implementing a time backoff policy for a custom route in a plugin configuration file, showing throttling at different request thresholds.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/rate-limiter.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n// <plugin root>/src/Resources/config/rate_limiter.yaml\nexample_route:\n    enabled: true\n    policy: 'time_backoff'\n    reset: '24 hours'\n    limits:\n        - limit: 3\n          interval: '10 seconds'\n        - limit: 5\n          interval: '60 seconds'\n```\n\n----------------------------------------\n\nTITLE: Bundle Configuration in Composer\nDESCRIPTION: JSON configuration for composer.json to define a Shopware bundle extension type and name.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-vendor/my-bundle\",\n    \"type\": \"shopware-bundle\",\n    \"extra\": {\n        \"shopware-bundle-name\": \"MyBundle\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching IDs with Repository - PHP\nDESCRIPTION: This PHP snippet illustrates searching for IDs using a repository and obtaining the first ID from the resulting set. The repository must support the 'searchIds' method and requires appropriate $criteria and $context. It returns the first ID found or null. This refactored approach can replace the more generic search, but can cause test failures if heavily mocked.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/unit-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$id = $this->repository->searchIds($criteria, $context)->firstId();\n```\n\n----------------------------------------\n\nTITLE: Inserting Custom Filter After Price Filter in Twig\nDESCRIPTION: Demonstrates how to place the custom 'isCloseout' filter after the price filter in the Storefront's filter panel.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-listing-filters.md#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/component/listing/filter-panel.html.twig\n{% sw_extends '@Storefront/storefront/component/listing/filter-panel.html.twig' %}\n\n{% block component_filter_panel_item_price %}\n    {{ parent() }}\n\n    {# We'll include our filter element here #}\n    {% sw_include '@Storefront/storefront/component/listing/filter/filter-boolean.html.twig' with {\n        name: 'isCloseout',\n        displayName: 'Closeout'\n    } %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Non-Null Type in PHPUnit Tests with assertNotNull\nDESCRIPTION: Demonstrates using `static::assertNotNull()` within a PHPUnit test to assert that a variable `$foo` (potentially `Foo|null`) is not null. This guarantees type safety during test execution and causes the test to fail if the assertion is false. This is preferred over other methods within unit tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is Foo|null, but we expect only Foo\n\nstatic::assertNotNull($foo);\n```\n\n----------------------------------------\n\nTITLE: Committing Integration Setup in External Repository (Shell)\nDESCRIPTION: Sequence of Git commands executed within the external repository (e.g., `meteor`). It navigates to the repository, checks out a new feature branch (`feature/embed-meteor-repo-to-developer-portal`), stages changes (implied `git add .` after adding helper scripts or other setup), and commits them with a message indicating updates for developer portal integration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncd /www/shopware/meteor/\ngit checkout -b feature/embed-meteor-repo-to-developer-portal\n# apply changes\ngit commit -m \"chore: updated shortcuts, set up pipeline for developer portal\"\n```\n\n----------------------------------------\n\nTITLE: Initializing App Directory Structure\nDESCRIPTION: Basic directory structure setup for a Shopware app that implements custom flow triggers.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── custom\n    ├── apps\n    │   └── FlowBuilderTriggerApp\n    │       └── Resources\n    │           └── app\n    │               └── administration\n    │                   └── snippet\n    │                       └── de-DE.json\n    │                       └── en-GB.json\n    │           └── flow.xml\n    │       └── manifest.xml\n    └── plugins\n```\n\n----------------------------------------\n\nTITLE: Marking Twig Blocks as Experimental\nDESCRIPTION: Example of how to mark specific Twig blocks as experimental using the new annotation format with the feature property. This allows for granular marking of template sections as experimental.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# @experimental stableVersion:v6.6.0 feature:WISHLIST #}\n{% block awesome_new_feature %}\n   ...\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Loading CMS Element Templates in viewRenderer.ts\nDESCRIPTION: This code demonstrates how to load and render the required templates for the custom CMS element using Vue.js and the Meteor Admin SDK. It includes components for the element, config, and preview.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-cms-element-via-admin-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport { location } from '@shopware-ag/meteor-admin-sdk';\n\nlocation.startAutoResizer();\n\nconst app = new Vue({\n    el: '#app',\n    data() {\n        return { location };\n    },\n    components: {\n        'SwagDailymotionElement':\n            () => import('./views/swag-dailymotion/swag-dailymotion-element'),\n        'SwagDailymotionConfig':\n            () => import('./views/swag-dailymotion/swag-dailymotion-config'),\n        'SwagDailymotionPreview':\n            () => import('./views/swag-dailymotion/swag-dailymotion-preview'),\n    },\n    template: `\n        <SwagDailymotionElement\n            v-if=\"location.is('swag-dailymotion-element')\"\n        ></SwagDailymotionElement>\n        <SwagDailymotionConfig\n            v-else-if=\"location.is('swag-dailymotion-config')\"\n        ></SwagDailymotionConfig>\n        <SwagDailymotionPreview\n            v-else-if=\"location.is('swag-dailymotion-preview')\"\n        ></SwagDailymotionPreview>\n    `,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware Flow Builder Action App\nDESCRIPTION: Command line instruction for installing and activating a Flow Builder Action App using the Shopware CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/console app:install --activate FlowBuilderActionApp\n```\n\n----------------------------------------\n\nTITLE: Starting Standalone Admin Watcher in Shopware CLI\nDESCRIPTION: Command to start the Standalone Admin Watcher for monitoring Shopware extension changes. Requires path to extension and URL to Shopware instance as parameters. Can watch multiple extensions simultaneously.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/admin-watcher.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli extension admin-watch <path-to-extension> <url-to-shopware>\n```\n\n----------------------------------------\n\nTITLE: Registering Component Shortcuts in Shopware 6\nDESCRIPTION: Example of registering keyboard shortcuts in a Shopware 6 component. Shows how to configure shortcuts with ACL checks and define system key combinations. Includes handlers for save (SYSTEMKEY+S) and cancel (ESCAPE) operations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-shortcuts.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Component } = Shopware;\n\nComponent.register('swag-basic-example', {\n    \n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.acl.can('product.editor');\n            },\n            method: 'myEditProductFunction'\n        },\n        ESCAPE: 'myCancelEditProductFunction'\n    },\n\n   \n    methods: {\n        myEditProductFunction() {\n            console.log(\"myEditProductFunction\")\n        },\n        myCancelEditProductFunction() {\n            console.log(\"myCancelEditProductFunction\")\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Failure Response for Pay Endpoint in JSON\nDESCRIPTION: Example of a failure response from the Pay endpoint, indicating missing credentials for the payment provider.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/payment-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"message\": \"The shop has not provided all credentials for the payment provider.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storefront Watcher in Production Mode\nDESCRIPTION: Example of using environment variables to run the storefront watcher in production mode.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=prod composer run watch:storefront\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Versions in Unix Shell\nDESCRIPTION: Commands to check versions of PHP, Composer, Node.js, and NPM in a Unix shell environment. These commands help verify if the installed versions meet Shopware 6 requirements.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp -v\nphp -m\nphp -i | grep memory_limit\ncomposer -V\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Registering Administration Snippets in JavaScript\nDESCRIPTION: This JavaScript code registers the custom JSON snippet file with the Shopware Administration's localization system. It imports the English snippets (`en-GB.json`) and uses the `localeFactory` initializer decorator to extend the 'en-GB' locale, making the defined snippets available in the admin interface. This code should typically reside in the plugin's `Resources/administration/main.js` file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/decorating-a-shopware-migration-assistant-converter.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport enGBSnippets from './snippet/en-GB.json';\n\nconst { Application } = Shopware;\n\nApplication.addInitializerDecorator('locale', (localeFactory) => {\n    localeFactory.extend('en-GB', enGBSnippets);\n\n     return localeFactory;\n});\n```\n\n----------------------------------------\n\nTITLE: Building frontend app for production\nDESCRIPTION: Command to build the frontend application for production deployment using pnpm.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/app-installation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Storage for Number Ranges (Pre v6.6.8.0)\nDESCRIPTION: YAML configuration for setting up Redis as the number range storage before Shopware version 6.6.8.0. Specifies the increment storage type and Redis connection URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/number-ranges.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    number_range:\n        increment_storage: \"Redis\"\n        redis_url: 'redis://host:port/dbindex'\n```\n\n----------------------------------------\n\nTITLE: Finding the Longest String Using First-Class Callables in PHP\nDESCRIPTION: These snippets showcase transitioning from pre-PHP 8.1 classic callables (using strings) to the modern first-class callable syntax in PHP for better static analysis and refactoring. They operate on an array of strings to determine the maximum string length. Dependencies: PHP 8.1+ for the 'fn(...)' syntax. Requires an array named $strings; returns the numeric length of the longest string. The updated syntax avoids bugs and enables improved analysis support.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$longest = max(array_map('strlen', $strings));\n```\n\nLANGUAGE: php\nCODE:\n```\n$longest = max(array_map(strlen(...), $strings));\n```\n\n----------------------------------------\n\nTITLE: Defining Special Field Types in Shopware 6 Entities\nDESCRIPTION: This code snippet shows how to use special field types like AutoIncrement and ForeignKey in Shopware 6 entities. These fields implement specific behaviors and have their own PHP attribute classes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\AutoIncrement;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\ForeignKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n    \n    #[AutoIncrement]\n    public int $autoIncrement;\n\n    #[ForeignKey(entity: 'currency')]\n    public ?string $foreignKey;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Cookie in Shopware Manifest\nDESCRIPTION: Example manifest.xml configuration for adding a single cookie to the cookie consent manager. Demonstrates required fields like cookie name and snippet references, plus optional settings for value and expiration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/cookies-with-apps.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>ExampleAppWithCookies</name>\n        <version>1.0.0</version>\n        <!-- other meta data goes here -->\n    </meta>\n    <cookies>\n        <cookie>\n            <cookie>my-cookie</cookie>\n            <snippet-name>example-app-with-cookies.my-cookie.name</snippet-name>\n            <snippet-description>example-app-with-cookies.my-cookie.description</snippet-description>\n            <value>a static value for the cookie</value>\n            <expiration>1</expiration>\n        </cookie>\n    </cookies>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Translation File Structure\nDESCRIPTION: Example of structuring translation snippets in a JSON file for Shopware 6 administration. Shows nested object structure with single values and pluralization examples.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/adding-snippets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"swag-example\": {\n        \"nested\": {\n            \"value\": \"example\",\n            \"examplePluralization\": \"1 Product | {n} Products\"\n        },\n        \"foo\": \"bar\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Indexing in Shopware 6 Database\nDESCRIPTION: SQL queries to reset the indexing process in the Shopware 6 database.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ntruncate enqueue ; \ntruncate dead_message ;\ntruncate message_queue_stats ;\nupdate scheduled_task set status = 'scheduled' where status = 'queued';\n```\n\n----------------------------------------\n\nTITLE: Creating Modal with Navigation Sidebar in Twig\nDESCRIPTION: This code snippet shows how to implement a modal with a navigation sidebar. It extends the base modal template, enables navigation, and includes blocks for the modal title, navigation entries, and content.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/modal-component.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@SwagB2bPlatform/storefront/_partials/_b2bmodal/_modal.html.twig' %}\n\n{% set modalSettings = {\n    navigation: true\n} %}\n\n{% block b2b_modal_base_navigation_header %}\n    Modal Title\n{% endblock %}\n\n{% block b2b_modal_base_navigation_entries %}\n    <li>\n        <a class=\"b2b--tab-link\">\n            Navigation Link\n        </a>\n    </li>\n{% endblock %}\n\n{% block b2b_modal_base_content_inner %}\n    Modal Content\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Non-Null Type with Runtime Check in PHP\nDESCRIPTION: Demonstrates using an explicit `if ($foo === null)` check to ensure a variable `$foo`, potentially of type `Foo|null`, is not null at runtime. If it is null, an `InvalidArgumentException` is thrown, guaranteeing type safety for subsequent code. This is the preferred method for handling potential null values.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is Foo|null, but we expect only Foo\n\nif ($foo === null) {\n    // handle the error case\n    throw new \\InvalidArgumentException('Foo must not be null');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom PDO Session Handler Service in XML\nDESCRIPTION: Example XML service definition for using Symfony's PdoSessionHandler as a session storage adapter. This creates a service that can be referenced in the session configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/session.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"session.db\" class=\"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler\">\n    <argument ....></argument>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Original Shopware 6 Component Template in Twig\nDESCRIPTION: Example of an original component template with block structure that can be customized\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{% block card %}\n    <div class=\"sw-card\">\n        {% block card_header %}\n            <div class=\"sw-card--header\">\n                {{ header }}\n            </div>\n        {% endblock %}\n\n        {% block card_content %}\n            <div class=\"sw-card--content\">\n                {{ content }}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: HTML Diff for Bootstrap Utility Class Replacement\nDESCRIPTION: Example showing how to replace a custom selector with Bootstrap's mb-3 utility class in HTML markup.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-10-19-bootstrap-css-utils.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <div class=\"register-login-collapse-toogle\"><div>\n+ <div class=\"register-login-collapse-toogle mb-3\"><div>\n```\n\n----------------------------------------\n\nTITLE: Preparing Shopware Database for Cypress E2E Testing\nDESCRIPTION: This command installs dependencies and prepares the database for Cypress usage in Shopware E2E testing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run e2e:prepare\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Deployment Job Configuration\nDESCRIPTION: This YAML snippet defines the deployment job for GitLab CI. It uses the Shopware CLI Docker image, configures the SSH agent, builds the project, and deploys it using Deployer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nDeploy:\n    stage: deploy\n    image:\n        name: shopware/shopware-cli:latest\n        entrypoint: [ \"/bin/sh\", \"-c\" ]\n    before_script:\n        - *configureSSHAgent\n    script:\n        - shopware-cli project ci .\n        - vendor/bin/dep deploy\n```\n\n----------------------------------------\n\nTITLE: App Installation Command\nDESCRIPTION: Bash command for installing and activating the custom flow trigger app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-triggers-from-app-system.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/console app:install --activate FlowBuilderTriggerApp\n```\n\n----------------------------------------\n\nTITLE: Checking Translation Hash\nDESCRIPTION: Prevents infinite loops by checking if the description has already been translated using an MD5 hash stored in custom fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function __invoke(WebhookAction $action): void\n{\n    //...\n    $lastHash = $product['customFields']['translator-last-translation-hash'] ?? '';\n    if (md5($description) === $lastHash) {\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Digital Sales Rooms templates directory\nDESCRIPTION: Command to change directory to the Digital Sales Rooms templates folder from the Shopware root directory.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/app-installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ./custom/plugins/SwagDigitalSalesRooms/templates/dsr-frontends\n```\n\n----------------------------------------\n\nTITLE: Calling htmlspecialchars with Positional Arguments - PHP\nDESCRIPTION: The standard usage of the htmlspecialchars function requiring all arguments (including defaults) to be explicitly passed, which can lead to verbose and hard-to-read code. This example is used to motivate the improvement via named parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nhtmlspecialchars($string, ENT_COMPAT | ENT_HTML, 'UTF-8', false);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Data in Actions - PHP\nDESCRIPTION: Demonstrates how to retrieve event-specific data within flow actions using the flow object's getData method. This snippet illustrates getting customer and sales channel IDs, which are stored in the flow event data. Proper keys (e.g., from MailAware or CustomerAware) must be used to access relevant data segments during action processing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$salesChanelId = $flow->getData(MailAware::SALES_CHANNEL_ID));\\n$customer = $flow->getData(CustomerAware::CUSTOMER_ID));\\n\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Responses with ScriptResponseFactoryFacade in Twig\nDESCRIPTION: Examples of using the response service to create JSON responses, redirect responses, and render Twig templates. Demonstrates various use cases including API responses and storefront interactions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/custom-endpoint-script-services-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({ 'foo': 'bar' }) %}\n{% do hook.setResponse(response) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n{% set products = services.repository.search('product', hook.request) %}\n\n{% set response = services.response.json({ 'products': products }) %}\n{% do hook.setResponse(response) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set ids = hook.request.ids %}\n\n{% set response = services.response.json({\n    \"actionType\": \"notification\",\n    \"payload\": {\n        \"status\": \"success\",\n        \"message\": \"You selected \" ~ ids|length ~ \" products.\"\n    }\n}) %}\n\n{% do hook.setResponse(response) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.redirect('api.product.detail', { 'path': productId }) %}\n{% do hook.setResponse(response) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.redirect('frontend.detail.page', { 'productId': productId }) %}\n{% do hook.setResponse(response) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set product = services.store.search('product', { 'ids': [productId]}).first %}\n\n{% do hook.page.addExtension('myProduct', product) %}\n\n{% do hook.setResponse(\n    services.response.render('@MyApp/storefront/page/custom-page/index.html.twig', { 'page': hook.page })\n) %}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Validation Errors in Shopware Extensions\nDESCRIPTION: Configuration example for ignoring specific validation errors in Shopware extensions using the .shopware-extension.yml file. Each error has a unique identifier that can be listed under the ignore section.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/validation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  ignore:\n    # This is an example key\n    - \"metadata.setup\"\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI from FriendsOfShopware repository with Nix\nDESCRIPTION: Command to install Shopware CLI directly from the FriendsOfShopware GitHub repository using Nix package manager.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnix profile install github:FriendsOfShopware/nur-packages#shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Deprecated Tooltip Utility\nDESCRIPTION: This JavaScript code shows the previous method of initializing tooltips by creating a new instance of the `TooltipUtil` class. This method is now deprecated in favor of `BootstrapUtil.initBootstrapPlugins()`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-09-23-add-bootstrap-util.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew TooltipUtil()\n```\n\n----------------------------------------\n\nTITLE: Overwriting a Method in a Component\nDESCRIPTION: Demonstrates how to overwrite an existing method (increment) in the sw-customer-list component.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('sw-customer-list', (previousState) => {\n    // Overwrite the existing method\n    const newIncrement = () => {\n        // Able to access the previous method\n        previousState.increment();\n        // Add custom logic\n        console.log('Incremented by 1');\n    };\n\n    return {\n        increment: newIncrement,\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Cron Job Configuration for Shopware Scheduled Tasks\nDESCRIPTION: Example cron job configuration to run Shopware scheduled tasks at 5-minute intervals using the --no-wait flag. This command executes the scheduled task runner without waiting for completion.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/scheduled-task.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n*/5 * * * * /usr/bin/php /var/www/html/bin/console scheduled-task:run --no-wait\n```\n\n----------------------------------------\n\nTITLE: Restoring StorableFlow for Executing Delayed Actions (PHP/SQL)\nDESCRIPTION: This PHP snippet shows the process of executing a delayed action. The previously stored JSON string is retrieved from the database, decoded back into an array, and then passed to the `FlowFactory::restore` method to reconstruct the `StorableFlow` object with its associated data, ready for execution.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// In handler execute delay actions\n$stored = 'SELECT store FROM `swag_delay_action` .... ';\n\n$flow = $this->flowFactory->restore(json_decode($stored));\n```\n\n----------------------------------------\n\nTITLE: Registering an ACL Repository Service in XML\nDESCRIPTION: This XML snippet registers an `AclRepository` service for the `s_user_addresses` entity (presumably addresses) in the Shopware DIC. It uses the `b2b_acl.repository_factory` service to create the repository instance, specifying the target entity table name as an argument.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"b2b_address.acl_repository\" class=\"Shopware\\B2B\\Acl\\Framework\\AclRepository\">\n    <factory service=\"b2b_acl.repository_factory\" method=\"createRepository\"/>\n    <argument type=\"string\">s_user_addresses</argument>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Varnish Cache Debugging Command\nDESCRIPTION: Curl command for debugging cache headers against the upstream server.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -vvv -H 'Host: <sales-channel-domain>' <app-server-ip> 1> /dev/null\n```\n\n----------------------------------------\n\nTITLE: TypeScript Store Definition\nDESCRIPTION: Example of Pinia store definition with TypeScript typing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = Shopware.Store.register({\n  id: 'myStore',\n  ...\n});\n\nexport type StoreType = ReturnType<typeof store>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StoreType } from './store/myStore';\n\ndeclare global {\n    interface PiniaRootState {\n        myStore: StoreType;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Associative Data and Mapping Key-Value - PHP\nDESCRIPTION: This PHP snippet fetches all associative rows with specified columns from a database connection and then maps them to a key-value array using a helper function. It assumes existence of a working database connection object and a custom 'mapToKeyValue' method. The inputs are the raw SQL query and the database connection; the outputs are processed key-value pairs. Mocking database connections for such code can introduce fragility in tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/unit-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$values = $this->connection->fetchAllAssociative('SELECT first, second FROM foo ...');\n\n$values = $this->mapToKeyValue($values);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Assets in SCSS Files\nDESCRIPTION: Shows how to reference custom assets in SCSS/CSS files using the $sw-asset-public-url variable to properly build the path to the asset.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-assets.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/base.scss\nbody {\n    background-image: url(\"#{$sw-asset-public-url}/bundles/swagbasicexample/image.png\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Properties in Component Override\nDESCRIPTION: Shows how to access private properties of a component using the _private property of the previousState object.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.overrideComponentSetup()('sw-customer-list', (previousState, props, context) => {\n    // Access the private properties\n    console.log(previousState._private.thePrivateProperty);\n});\n```\n\n----------------------------------------\n\nTITLE: YAML Navigation Configuration\nDESCRIPTION: YAML front matter defining the navigation title and position for the documentation page.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/guides/creating-own-permissions-via-app.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: Create permissions via App\n  position: 40\n```\n\n----------------------------------------\n\nTITLE: Stopping Script Propagation in Shopware App Scripts\nDESCRIPTION: Demonstrates how to prevent the execution of further scripts in the same hook by using the 'stopPropagation' method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do hook.stopPropagation() %}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP settings for Shopware\nDESCRIPTION: Example of changing the PHP memory limit in a custom php.ini file for a Shopware project.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmemory_limit = 512M\n```\n\n----------------------------------------\n\nTITLE: Adding Main Module in manifest.xml\nDESCRIPTION: Example of how to define a main module for an app in the manifest.xml file, which can be opened from the list of installed apps or the app detail page.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-modules.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>myApp</name>\n        ...\n    </meta>\n    <admin>\n        <module name=\"normalModule\"\n                source=\"https://example.com/main\"\n                parent=\"sw-catalogue\"\n                position=\"50\"\n        >\n            <label>Module in admin menu</label>\n            <label lang=\"de-DE\">Modul im Adminmenü</label>\n        </module>\n\n        <!-- You can use the same url to open your module from the app store -->\n        <main-module source=\"https://example.com/main\"/>\n    </admin>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductReviewDataSelection in Shopware\nDESCRIPTION: Shows how to implement a ProductReviewDataSelection that reuses DataSets from other selections while adding review-specific functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/dataselection-and-dataset.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationAssistant\\Profile\\Shopware\\DataSelection;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionInterface;\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSelectionStruct;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\CrossSellingDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\CustomerAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\CustomerDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ManufacturerAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\MediaFolderDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductOptionRelationDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductPriceAttributeDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductPropertyRelationDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\ProductReviewDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\PropertyGroupOptionDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\DataSelection\\DataSet\\TranslationDataSet;\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\n\nclass ProductReviewDataSelection implements DataSelectionInterface\n{\n    public const IDENTIFIER = 'productReviews';\n\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface;\n    }\n\n    public function getData(): DataSelectionStruct\n    {\n        return new DataSelectionStruct(\n            self::IDENTIFIER,\n            $this->getDataSets(),\n            $this->getDataSetsRequiredForCount(),\n            'swag-migration.index.selectDataCard.dataSelection.productReviews',\n            250,\n            true\n        );\n    }\n\n    public function getDataSets(): array\n    {\n        return [\n            new MediaFolderDataSet(),\n            new ProductAttributeDataSet(),\n            new ProductPriceAttributeDataSet(),\n            new ManufacturerAttributeDataSet(),\n            new ProductDataSet(),\n            new PropertyGroupOptionDataSet(),\n            new ProductOptionRelationDataSet(),\n            new ProductPropertyRelationDataSet(),\n            new TranslationDataSet(),\n            new CrossSellingDataSet(),\n            new CustomerAttributeDataSet(),\n            new CustomerDataSet(),\n            new ProductReviewDataSet(),\n        ];\n    }\n\n    public function getDataSetsRequiredForCount(): array\n    {\n        return [\n            new ProductReviewDataSet(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Namespace Hierarchy Builder in PHP\nDESCRIPTION: PHP class implementing TemplateNamespaceHierarchyBuilderInterface to extend template namespace hierarchy. Merges plugin's namespace into existing hierarchy array.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/how-to-extend-the-storefront.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace MyPlugin\\Framework\\Adapter\\Twig\\NamespaceHierarchy;\n\nuse Shopware\\Core\\Framework\\Adapter\\Twig\\NamespaceHierarchy\\TemplateNamespaceHierarchyBuilderInterface;\nuse function array_merge;\n\nclass TemplateNamespaceHierarchyBuilder implements TemplateNamespaceHierarchyBuilderInterface\n{\n    public function buildNamespaceHierarchy(array $namespaceHierarchy): array\n    {\n        return array_merge($namespaceHierarchy, ['MyPlugin']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ajax Panel Template for Modal Content in Twig\nDESCRIPTION: This snippet shows how to configure the ajax panel template for modal content. It extends the modal content template, sets up various modal settings, and includes blocks for headline, actions, content, and bottom section.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/modal-component.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends \"@SwagB2bPlatform/storefront/_partials/_b2bmodal/_modal-content.html.twig\" %}\n\n{% set modalSettings = {\n    navigation: true,\n    bottom: true,\n    content: {\n      padding: true\n    }\n} %}\n\n{% block b2b_modal_base_content_inner_topbar_headline %}\n    Modal Content Headline\n{% endblock %}\n\n{% block b2b_modal_base_content_inner_scrollable_inner_actions_inner %}\n    Modal Actions\n{% endblock %}\n\n{% block b2b_modal_base_content_inner_scrollable_inner_content_inner %}\n    Modal Content\n{% endblock %}\n\n{% block b2b_modal_base_content_inner_scrollable_inner_bottom_inner %}\n    Modal Bottom\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Watch Storefront Changes in Production Template\nDESCRIPTION: Shell script to enable Hot Module Replacement for the storefront using production template.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./bin/watch-storefront.sh\n```\n\n----------------------------------------\n\nTITLE: Registering the Bundle Service in Shopware 5 using XML\nDESCRIPTION: Defines the `BundleService` as a service in the Shopware 5 plugin's `service.xml`. It specifies the service class and injects the previously defined `swag_migration_bundle_api_example.bundle_repository` service as a constructor argument, making the repository available to the service.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<service class=\"SwagMigrationBundleApiExample\\Service\\BundleService\" id=\"swag_migration_bundle_api_example.bundle_service\">\n    <argument type=\"service\" id=\"swag_migration_bundle_api_example.bundle_repository\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Adding Shopware CLI to a Docker image\nDESCRIPTION: Dockerfile instruction to copy the Shopware CLI binary from the official Docker image into a custom Docker image.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Dockerfile\nCOPY --from=shopware/shopware-cli:bin /shopware-cli /usr/local/bin/shopware-cli\n```\n\n----------------------------------------\n\nTITLE: Regenerating Composer Autoloader\nDESCRIPTION: Command to regenerate the Composer class loader after enabling class map authoritative mode.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer dump-autoload\n```\n\n----------------------------------------\n\nTITLE: Extended Syntax in Shopware App Scripts: Return Tag\nDESCRIPTION: Illustrates the use of the 'return' tag in Twig macros within Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% macro foo() %} \n     {% return 'bar' %}\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Listing Extension Class in PHP\nDESCRIPTION: Defines a ResolveListingExtension class that serves as an extension point for product listing resolution. The class includes criteria and context parameters for product loading customization.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-18-extended-event-system.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Product\\Extension;\n\nuse Shopware\\Core\\Content\\Product\\ProductCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearchResult;\nuse Shopware\\Core\\Framework\\Extensions\\Extension;\nuse Shopware\\Core\\Framework\\Log\\Package;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n\n/**\n * @extends Extension<EntitySearchResult<ProductCollection>>\n */\n#[Package('inventory')]\nfinal class ResolveListingExtension extends Extension\n{\n    public const NAME = 'listing-loader.resolve';\n\n    /**\n     * @internal shopware owns the __constructor, but the properties are public API\n     */\n    public function __construct(\n        /**\n         * @public\n         *\n         * @description The criteria which should be used to load the products. Is also containing the selected customer filter\n         */\n        public readonly Criteria $criteria,\n        /**\n         * @public\n         *\n         * @description Allows you to access to the current customer/sales-channel context\n         */\n        public readonly SalesChannelContext $context\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Index Mapping (Old Structure)\nDESCRIPTION: Example of the old Elasticsearch mapping structure that creates separate indexes for each language. This approach requires multiple indices and has no built-in language fallback mechanism.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-11-new-language-inheritance-mechanism-for-opensearch.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// PUT /sw_product\n{\n    \"mappings\": {\n        \"properties\": {\n            \"productNumber\": {\n                \"type\": \"keyword\"\n            },\n            \"name\": {\n                \"type\": \"keyword\",\n                \"fields\": {\n                    \"text\": {\n                        \"type\": \"text\"\n                    },\n                    \"ngram\": {\n                        \"type\": \"text\",\n                        \"analyzer\": \"sw_ngram_analyzer\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue Directive in Shopware Template\nDESCRIPTION: Shows how to use a registered directive in a Shopware component template by applying the v-focus directive to an input element.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/mixins-directives/adding-directives.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" v-focus=\"\">\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flag in YAML Configuration\nDESCRIPTION: Example of defining a feature flag in the feature.yaml configuration file that corresponds to an experimental feature. The description field includes the experimental annotation details for traceability.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  feature:\n    flags:\n      - name: WISHLIST\n        default: false\n        major: true\n        description: \"experimental stableVersion:v6.6.0 feature:WISHLIST\"\n```\n\n----------------------------------------\n\nTITLE: Cart Line Item Enrichment Example in PHP\nDESCRIPTION: Demonstrates how to add a line item to a cart and shows the enrichment process where the price is initially null but gets populated after cart enrichment.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/cart.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\nuse Shopware\\Core\\Checkout\\Cart\\Cart;\nuse Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\n\n$lineItem = new LineItem(/* ... */);\n/** @var $cart Cart */\n$cart->getLineItems()->add($lineItem);\n\n$lineItem->getPrice(); // is now null\n// enrich the cart\n$lineItem->getPrice(); // now set up\n```\n\n----------------------------------------\n\nTITLE: Adding Custom PHP Configuration to Docker\nDESCRIPTION: Dockerfile command to add custom PHP configuration by copying an INI file to the appropriate directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/docker.md#2025-04-22_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY custom.ini /usr/local/etc/php/conf.d/\n```\n\n----------------------------------------\n\nTITLE: Copying Environment File Template - Shell\nDESCRIPTION: This shell command copies the '.env.template' file to create a new '.env' configuration file. This establishes a baseline for environment-specific settings the application will use. Dependency is access to both files, with the expectation that the user will edit '.env' for their deployment. Inputs: file paths. Outputs: customized '.env' file for local configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Creating Default Fixture in Cypress for Shopware E2E Testing\nDESCRIPTION: Demonstrates how to use the createDefaultFixture command in a Cypress test to create a tax rate fixture using data from a JSON file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n    cy.createDefaultFixture('tax');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB on Ubuntu/Debian\nDESCRIPTION: Bash command to install MariaDB server on Ubuntu or Debian systems. MariaDB is one of the supported database systems for Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y mariadb-server\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter\nDESCRIPTION: Environment variables to configure the OpenTelemetry exporter for traces, logs, and metrics using gRPC protocol.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/opentelemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nOTEL_TRACES_EXPORTER=otlp\nOTEL_LOGS_EXPORTER=otlp\nOTEL_METRICS_EXPORTER=otlp\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Defining Config Inheritance Array in theme.json - JSON\nDESCRIPTION: Demonstrates how to specify the configInheritance array in a theme.json file to enable multiple theme-based configuration inheritances in Shopware 6. No dependencies are necessary beyond Shopware 6; the array elements should be theme references as strings. The array dictates the order and theme sources for config field inheritance. Limitations include potential incompatibilities if dependent themes don't provide required config subsets.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-22-refactor-theme-inheritance.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"\\\"configInheritance\\\": [\\n        \\\"@Storefront\\\",\\n        \\\"@PreviousTheme\\\",\\n        \\\"@MyDevelopmentTheme\\\"\\n    ],\"\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing Event Data with Primary Keys (PHP)\nDESCRIPTION: This snippet discusses a best practice for event data in Shopware. Instead of passing entire objects like `OrderEntity` within an event, it suggests passing only the primary key (e.g., `orderId`). This simplifies event handling, allows listeners to fetch data as needed, and facilitates asynchronous processing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/extendability.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nAn optimized variant of this event would not contain the `private OrderEntity $order;` but only the primary key for the order `private string $orderId;`.\n```\n\n----------------------------------------\n\nTITLE: Example Cache Response Headers\nDESCRIPTION: Example of expected cache response headers when properly configured.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n< HTTP/1.1 200 OK\n< Cache-Control: public, s-maxage=7200\n< Content-Type: text/html; charset=UTF-8\n< Xkey: theme.sw-logo-desktop, ...\n```\n\n----------------------------------------\n\nTITLE: OS X Setup Commands for Shopware\nDESCRIPTION: Available commands for managing Shopware installation on OS X systems, including initialization and service control.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./psh.phar mac:init         # build installation\n./psh.phar mac:start        # start apache, mysql \n./psh.phar mac:stop         # stop apache, mysql\n./psh.phar mac:restart      # restart apache, mysql\n```\n\n----------------------------------------\n\nTITLE: Enabling Composer Classmap Authoritative Mode\nDESCRIPTION: Composer configuration to enable classmap-authoritative mode for optimized autoloading.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n\"config\": {\n        \"allow-plugins\": {\n            \"symfony/flex\": true,\n            \"symfony/runtime\": true\n        },\n        \"optimize-autoloader\": true,\n+        \"classmap-authoritative\": true,\n        \"sort-packages\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomAppAware Interface - PHP\nDESCRIPTION: Defines the CustomAppAware interface for custom app events in the flow builder. This interface requires implementing classes to provide the custom application data via the getCustomAppData method and defines a constant for referencing the key. Implementing this interface enables flexible event data extraction and integration with the flow system.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\ninterface CustomAppAware\\n{\\n    public const APP_DATA = 'customAppData';\\n\\n    public function getCustomAppData(): array;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Dynamic Rule Condition Fields in Shopware Administration\nDESCRIPTION: This HTML template is used to render the dynamic fields for custom rule conditions in the Shopware administration interface. It iterates over the constraints to create appropriate form fields.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-21-rule-scripting-in-apps.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- /src/app/component/rule/condition-type/sw-condition-script/sw-condition-script.html.twig -->\n{% block sw_condition_value_content %}\n<div class=\"sw-condition-script sw-condition__condition-value\">\n    {% block sw_condition_script_fields %}\n    <sw-arrow-field\n        v-for=\"(constraint, index) in constraints\"\n        :disabled=\"disabled\"\n    >\n        <!-- use the specific type of field as need for a constraint -->\n        <!-- e.g. sw-entity-multi-select, sw-tagged-field, sw-number-field ... -->\n    </sw-arrow-field>\n    {% endblock %}\n</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating Description Lists with Bolded Titles in Markdown\nDESCRIPTION: Provides an example of a description list format using Markdown. Each item starts with an asterisk, followed by the title/term enclosed in double asterisks for bolding (`**bold title**`), and then the description either on the same line (after a hyphen) or on a new line. This structure helps define or explain specific terms or concepts.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/01-text.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n```text\nThe Administrations components implement a number of cross-cutting concerns. The most important are:\n\n* **Providing inheritance** - As Shopware 6 offers a flexible extension system to develop your own Apps, Plugins, or Themes.\n* **Data management** - The Administration displays entities of the Core component.\n* **State management** - Proper state management is key here.\n```\n```\n\n----------------------------------------\n\nTITLE: Uninstalling an Extension in Shopware CLI\nDESCRIPTION: This command uninstalls a specific extension from the Shopware project using the Shopware CLI. Replace <extension-name> with the actual name of the extension to be uninstalled.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension uninstall <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Administration Snippets for Premapping Card in JSON\nDESCRIPTION: This JSON snippet file defines the text labels used in the Shopware Administration interface for the custom manufacturer premapping card. It specifically sets the title 'Manufacturer' for the premapping group identified by 'swag_manufacturer'. This file should be placed in the plugin's `Resources/administration/snippet` directory.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/decorating-a-shopware-migration-assistant-converter.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"swag-migration\": {\n         \"index\": {\n             \"premappingCard\": {\n                 \"group\": {\n                     \"swag_manufacturer\": \"Manufacturer\"\n                 }\n             }\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: CDN Configuration for Production Environment\nDESCRIPTION: YAML configuration for serving public files via a CDN in Shopware 6's production environment, using the local filesystem type with a custom URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/filesystem.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# <project root>/config/packages/prod/shopware.yml\nshopware:\n  filesystem:\n    public:\n      url: \"YOUR_CDN_URL\"\n      type: \"local\"\n      config:\n        root: \"%kernel.project_dir%/public\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Access with Symfony Route Defaults in PHP (After Migration)\nDESCRIPTION: This snippet illustrates the migrated configuration where access requirements (such as login enforcement) are declared in the defaults parameter of Symfony's @Route annotation using a special key (_loginRequired). This approach removes the need for custom annotations and relies solely on Symfony's routing and attribute bags. It requires Symfony's routing and controller system. The main parameter is defaults={\"_loginRequired\"=true}, which is used by middleware or event listeners to enforce security. This results in easier extensibility and reduces the risk of decorator mismatches. Input and output remain standard HTTP requests and responses.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-09-controller-configuration-route-defaults.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@Route(\"/store-api/product\", name=\"store-api.product.search\", methods={\"GET\", \"POST\"}, defaults={\"_loginRequired\"=true})\npublic function myAction()\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite and Secure Cookie Settings in Symfony YAML\nDESCRIPTION: This YAML configuration snippet sets the cookie_secure and cookie_samesite attributes for the Symfony framework. It ensures cookies are sent securely and implements the 'lax' SameSite policy.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/framework/samesite-protection.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n  session:\n    cookie_secure: 'auto'\n    cookie_samesite: lax\n```\n\n----------------------------------------\n\nTITLE: Converting Webpack Config to Vite Config\nDESCRIPTION: Example showing how to migrate a basic Webpack configuration to its Vite equivalent, demonstrating the conversion of alias resolution settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vite.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => {\n    return {\n        resolve: {\n            alias: {\n                '@example': 'src/example',\n            }\n        }\n    };\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n    resolve: {\n        alias: {\n            '@example': 'src/example',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Cart Compression in YAML\nDESCRIPTION: This YAML configuration snippet shows how to disable the default cache compression for carts stored in Redis. Setting `shopware.cart.compress` to `false` in a `config/packages/*.yaml` file turns off compression, which might be useful in specific scenarios despite potentially increasing network traffic.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-redis-cart-persister.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    cart:\n        compress: false\n```\n\n----------------------------------------\n\nTITLE: Extending PHP Interface to Add New Method\nDESCRIPTION: Shows the pattern of creating a new interface (`DataValidationFactoryInterfaceV2`) that extends an existing one (`DataValidationFactoryInterface`) solely to introduce a new method (`update`). This is presented as a complex and potentially problematic way to evolve interfaces, especially in decorated service chains.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n```php\ninterface DataValidationFactoryInterface\n{\n    public function create(SalesChannelContext $context /* array $data */): DataValidationDefinition;\n}\n\ninterface DataValidationFactoryInterfaceV2 extends DataValidationFactoryInterface\n{\n    public function update(SalesChannelContext $context /* array $data */): DataValidationDefinition;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating ProductWarehouse Stocks API Example\nDESCRIPTION: JSON payload examples for updating ProductWarehouse stocks using both the sync API and direct PATCH requests.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/multi-inventory.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"action\": \"upsert\",\n    \"entity\": \"product_warehouse\",\n    \"payload\": [{\n        \"id\": \"f5c850109fe64c228377cbd369903b75\",\n        \"stock\": 1500\n    }, {\n        \"id\": \"228377cbd369903b75f5c850109fe64c\",\n        \"stock\": 0\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Exploring Storefront Directory Structure in Bash\nDESCRIPTION: This directory listing shows the main structural components of the Storefront module, including controllers, dependency injection, pages, pagelets, resources, and theming files.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/architecture/storefront-concept.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<Storefront>\n|- Controller\n|- DependencyInjection\n|- Event\n|- Framework\n|- Migration\n|- Page\n|- Pagelet\n|- Resources\n|- Test\n|- Theme\n|- .gitignore\n|- composer.json\n|- phpunit.xml.dist\n|- README.md\n|- Storefront.php\n```\n\n----------------------------------------\n\nTITLE: Database Structure Diagram for Audit Log System\nDESCRIPTION: Mermaid class diagram showing the relationships between audit log tables including b2b_audit_log_index, b2b_audit_log, and b2b_audit_log_author tables. Illustrates the database structure for storing audit logs with author information and entity references.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/audit-log.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram \n    b2b_audit_log_index <--o b2b_audit_log : n to 1\n    b2b_audit_log o--> b2b_audit_log_author : n to 1\n    class b2b_audit_log_index{\n        id \n        audit_log_id \n        reference_table \n        reference_id\n    }\n    class b2b_audit_log{\n        id \n        log_value \n        log_type \n        event_date \n        author_hash\n    }\n    class b2b_audit_log_author{\n        hash\n        salutation\n        title\n        firstname\n        lastname\n        email\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining an App Flow Action in XML for Shopware 6\nDESCRIPTION: This XML snippet demonstrates the structure of the `Resources/flow-action.xml` file used by Shopware apps to define custom flow actions. It includes metadata (`<meta>`) for identification and UI display, webhook headers (`<headers>`), webhook parameters (`<parameters>`) potentially using Twig-like syntax for dynamic data, and configuration fields (`<config>`) for the admin interface. This specific example defines a 'Telegram send message' action.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-04-19-integrate-app-into-flow-action.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<flow-actions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://test-flow.com/flow-action-1.0.xsd\">\n    <flow-action>\n        <meta>\n            <name>telegram.send.message</name>\n            <badge>Telegram</badge>\n            <label>Telegram send message</label>\n            <description>Telegram send message description</description>\n            <url>https://test-flow.com</url>\n            <sw-icon>default-communication-speech-bubbles</sw-icon>\n            <requirements>orderAware</requirements>\n        </meta>\n        <headers>\n            <parameter type=\"string\" name=\"content-type\" value=\"application/json\"/>\n        </headers>\n        <parameters>\n            <parameter type=\"string\" name=\"message\" value=\"{{ subject }} \\n {{ customer.lastName }} some text here\"/>\n        </parameters>\n        <config>\n            <input-field type=\"text\">\n                <name>subject</name>\n                <label>Subject</label>\n                <required>true</required>\n            </input-field>\n        </config>\n    </flow-action>\n</flow-actions>\n```\n\n----------------------------------------\n\nTITLE: Sending Partner Commission Reports via REST API - JSON\nDESCRIPTION: Demonstrates the structure of a JSON payload used by external technology apps to send commission reports to the Shopware partners API. Dependencies include correct partner authentication and knowledge of the POST endpoint `/shopwarepartners/reports/technology`. Key parameters include 'identifier' (UUID for the report), 'reportDate' (ISO timestamp), 'instanceId' (Shopware instance identifier), 'shopwareVersion', and 'reportDataKeys' (metrics such as customer and turnover). The input must match expected types/structures; outputs are determined by API responses. Omitting required fields or incorrect types may lead to API rejection.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-plugins/index.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"identifier\\\": \\\"8e167662-6bbb-11eb-9439-0242ac130002\\\",\\n  \\\"reportDate\\\": \\\"2005-08-15T15:52:01\\\",\\n  \\\"instanceId\\\": \\\"alur24esfaw3ghk\\\",\\n  \\\"shopwareVersion\\\": \\\"6.3.1\\\",\\n  \\\"reportDataKeys\\\": [\\n    {\\n      \\\"customer\\\": 3\\n    },\\n    {\\n      \\\"turnover\\\": 440\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shopware App Manifest XML\nDESCRIPTION: Defines the manifest.xml file with meta-information, setup details, permissions, and webhooks for the Shopware app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n    <meta>\n        <name>product-translator</name>\n        <label>Product translator</label>\n        <description>App to translate product descriptions</description>\n        <author>shopware AG</author>\n        <copyright>(c) by shopware AG</copyright>\n        <version>0.1.0</version>\n        <license>MIT</license>\n    </meta>\n    <setup>\n        <registrationUrl>http://localhost:8000/app/lifecycle/register</registrationUrl>\n        <secret>TestSecret</secret>\n    </setup>\n    <permissions>\n        <read>product</read>\n        <read>product_translation</read>\n        <read>language</read>\n        <read>locale</read>\n        <update>product</update>\n        <update>product_translation</update>\n        <create>product_translation</create>\n    </permissions>\n    <webhooks>\n        <webhook name=\"appActivated\" url=\"http://localhost:8000/app/lifecycle/activate\" event=\"app.activated\"/>\n        <webhook name=\"appDeactivated\" url=\"http://localhost:8000/app/lifecycle/deactivate\" event=\"app.deactivated\"/>\n        <webhook name=\"appDeleted\" url=\"http://localhost:8000/app/lifecycle/delete\" event=\"app.deleted\"/>\n        <webhook name=\"productWritten\" url=\"http://localhost:8000/app/webhook\" event=\"product.written\"/>\n    </webhooks>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Manipulating Product Prices with PriceCollectionFacade in Twig\nDESCRIPTION: This snippet demonstrates how to use the PriceCollectionFacade to manipulate product prices. It shows dumping the original price, applying a surcharge, and then dumping the updated price.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/product-script-services-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do debug.dump(product.calculatedPrice.unit, 'discount') %}\n\n{% do product.calculatedPrice.surcharge(10) %}\n\n{% do debug.dump(product.calculatedPrice.unit, 'surcharge') %}\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Modal Response with HTTP\nDESCRIPTION: HTTP response example that opens a custom modal with an embedded iframe after an action button is clicked. The response includes the iframe URL, size, and expansion settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"actionType\": \"openModal\",\n  \"payload\": {\n    \"iframeUrl\": \"http://google.com\",\n    \"size\": \"medium\",\n    \"expand\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Twig Script for Custom Shopware API Endpoint\nDESCRIPTION: This snippet shows a basic Twig script that creates a simple JSON response for a custom Shopware API endpoint. It demonstrates the structure of the script and how to set a response.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/add-api-endpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% block response %}\n    {% set response = services.response.json({ test: 'This is my API endpoint' }) %}\n    {% do hook.setResponse(response) %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Twig Template\nDESCRIPTION: Demonstrates how to check permissions in a Twig template using the isB2bAllowed function. Extends a base template and validates user permissions using the defined constants.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/guides/creating-own-permissions-via-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/checkout/checkout-item.html.twig' %}\n\n{{ parent() }}\n\n{% if isB2bAllowed(constant('PermissionCollectorSubscriber::EMPLOYEE_READ')) %}\n...\n{% endif  %}\n```\n\n----------------------------------------\n\nTITLE: Shopware App Manifest Configuration\nDESCRIPTION: XML configuration for the app manifest showing registration URLs and webhook configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/06-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<setup>\n    <registrationUrl>http://localhost:3000/app/register</registrationUrl>\n</setup>\n<webhooks>\n    <webhook name=\"appActivated\" url=\"http://localhost:3000/app/activate\" event=\"app.activated\"/>\n    <webhook name=\"appDeactivated\" url=\"http://localhost:3000/app/deactivate\" event=\"app.deactivated\"/>\n    <webhook name=\"appDeleted\" url=\"http://localhost:3000/app/delete\" event=\"app.deleted\"/>\n</webhooks>\n```\n\n----------------------------------------\n\nTITLE: Order Structure Definition in Markdown\nDESCRIPTION: Documentation detailing the fundamental concepts of Orders in Shopware, including their relationship to carts and key design principles around denormalization and workflow management.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/orders.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Orders\n\nFrom a cart instance, an `Order` can be created. The whole structure of the cart is stored in the database. Contrary to the cart, a structure that allows a great degree of freedom and is *calculation optimized*, the order is *workflow optimized*.\n\n## Design goals\n\n### Denormalization\n\nThe order itself does not depend on the catalog or the products. The line item with all of its data, as well as all calculated prices, is persisted in the database. Orders only get recalculated when triggered explicitly through the API.\n\n### Workflow dependant\n\nThe order state changes in a defined, predictable and configurable way - other state transitions are blocked.\n```\n\n----------------------------------------\n\nTITLE: Adding Error to Cart in Twig\nDESCRIPTION: Demonstrates how to add an error message to the cart using the error() method. This will block the checkout process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.errors.error('NO_PRODUCTS_IN_CART') %}\n```\n\n----------------------------------------\n\nTITLE: Executing Migrations for a Specific Plugin\nDESCRIPTION: Command to manually execute all migrations for a specific plugin in Shopware 6, using the plugin's bundle name as identifier.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/database-migrations.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/console database:migrate SwagBasicExample --all\n```\n\n----------------------------------------\n\nTITLE: Input Field with Default Value in Plugin Configuration\nDESCRIPTION: Shows how to add a default value to a text input field in the plugin configuration XML. The defaultValue element defines the initial value.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input-field type=\"text\">\n    <name>textField</name>\n    <label>Test field with default value</label>\n    <defaultValue>test</defaultValue>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Defining MetricTransportInterface in PHP for Shopware 6 Telemetry\nDESCRIPTION: This interface defines the 'emit' method for sending metrics to monitoring backends. It throws a MetricNotSupportedException for unsupported metric types.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-30-add-telemetry-abstraction-layer.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface MetricTransportInterface\n{\n    /**\n     * @throws MetricNotSupportedException\n     */\n    public function emit(MetricInterface $metric): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Notifications\nDESCRIPTION: Demonstrates how to add notice-level messages to the cart that don't block checkout but display information to users.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.errors.notice('my-notice') %}\n```\n\n----------------------------------------\n\nTITLE: Example of Experimental Annotation Usage in Symfony\nDESCRIPTION: This code snippet shows how Symfony uses the @experimental annotation in their codebase, specifically in the AbstractRequestParser class. This is referenced as an example of how annotations are used for experimental features.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-10-experimental-features.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[this example](https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/Webhook/Client/AbstractRequestParser.php#LL23C5-L23C17)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import Transformation Example\nDESCRIPTION: Demonstrates how the vue-globals Vite plugin transforms Vue imports to use Shopware's Vue instance, preventing multiple Vue instance issues.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vite.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n// From this\n<script setup>\nimport { ref } from 'vue';\n</script>\n\n// To this\n<script setup>\nconst { ref } = window['Shopware']['Vue'];\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Shopware Workers with CLI\nDESCRIPTION: Command to start multiple Shopware workers simultaneously for development purposes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/helper-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project worker <amount>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Entering the Repository - Shell\nDESCRIPTION: This shell snippet clones the 'swagsalesagent' repository from GitHub and changes the working directory to the cloned folder. It requires a functioning Git installation and network access to GitHub. The 'git clone' command downloads a local copy, and 'cd' switches context to begin development or setup. Input: none or optional destination. Output: Local directory created or used for further steps.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/shopware/swagsalesagent.git\\ncd swagsalesagent\n```\n\n----------------------------------------\n\nTITLE: Running K6 Tests Against Shopware\nDESCRIPTION: Commands to run K6 tests with different configurations, including setting the number of virtual users and iterations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nk6 run example.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nk6 run --vus 10 --iterations 100 example.js\n```\n\n----------------------------------------\n\nTITLE: Creating New Shopware Project with Composer\nDESCRIPTION: Commands to create a new Shopware project and add Docker support using Composer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project shopware/production <folder>\ncd <folder>\ncomposer require shopware/docker\n```\n\n----------------------------------------\n\nTITLE: Multi-Argument Filter Registration in Shopware\nDESCRIPTION: Example showing how to register a filter that accepts multiple arguments for more complex text formatting operations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-filter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFilter.register('example', (value, secondValue, thirdValue) => {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Invalidation Subscriber in Shopware XML\nDESCRIPTION: This XML snippet defines the service for CacheInvalidationSubscriber in Shopware, specifying event listeners for various cache invalidation scenarios. It demonstrates how cache invalidation is configured for different events like category indexing and landing page updates.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/custom-cache-invalidation.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber\">\n    <tag name=\"kernel.event_listener\" event=\"Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent\" method=\"invalidateCategoryRouteByCategoryIds\" priority=\"2000\" />\n\n    <tag name=\"kernel.event_listener\" event=\"Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent\" method=\"invalidateListingRouteByCategoryIds\" priority=\"2001\" />\n\n    <tag name=\"kernel.event_listener\" event=\"Shopware\\Core\\Content\\LandingPage\\Event\\LandingPageIndexerEvent\" method=\"invalidateIndexedLandingPages\" priority=\"2000\" />\n    \n    <!-- ... -->\n</service>\n```\n\n----------------------------------------\n\nTITLE: Storefront Hook Reference Documentation\nDESCRIPTION: Documentation for storefront-{hook} endpoint that handles storefront-specific requests. Includes available page data and storefront context information.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | storefront-{hook} |\n| Since | 6.4.9.0 |\n| Class | Shopware\\Storefront\\Framework\\Script\\Api\\StorefrontHook |\n```\n\n----------------------------------------\n\nTITLE: Using generateChecksum and Using Main Mapping in Product Converter (PHP)\nDESCRIPTION: This method shows the application of generateChecksum at the start of data conversion in a Shopware ProductConverter. It calls the checksum function, retrieves or creates a main mapping via the mapping service (associating the checksum), and returns a ConvertStruct instance. Dependencies include Shopware migration types (ConvertStruct, MappingService) and context interfaces; critical parameters include incoming data and context objects. Outputs a converted data structure while maintaining entity-to-mapping relationships for migration tracking.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/* SwagMigrationAssistant/Profile/Shopware/Converter/ProductConverter.php */\\n\\npublic function convert(\\n    array $data,\\n    Context $context,\\n    MigrationContextInterface $migrationContext\\n): ConvertStruct {\\n    $this->generateChecksum($data);\\n\\n    /* ... */\\n\\n    // This is also important, so the checksum can be saved to the right mapping!\\n    $this->mainMapping = $this->mappingService->getOrCreateMapping(\\n        $this->connectionId,\\n        DefaultEntities::PRODUCT,\\n        $this->oldProductId,\\n        $this->context,\\n        $this->checksum\\n    );\\n\\n    /* ... */\\n\\n    // Important to put the mainMapping['id'] to the ConvertStruct\\n    $mainMapping = $this->mainMapping['id'] ?? null;\\n    return new ConvertStruct($converted, $returnData, $mainMapping);\\n\\n    /* ... */\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Shopware project with Composer\nDESCRIPTION: Commands to create a new Shopware project using Composer. Includes options for installing a specific version.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project shopware/production <project-name>\n\n# or install a specific version\ncomposer create-project shopware/production:6.6.10.0 <project-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Docs CLI in CI/CD (Shell)\nDESCRIPTION: Snippet from a CI/CD script (`.github/scripts/mount.sh`) defining environment variables (`BRANCH_METEOR_ICON_KIT`, `ORG_METEOR_ICON_KIT`) and using the `docs-cli.cjs` tool to clone a specific repository (`shopware/meteor`), branch, source folder (`packages/icon-kit/docs`), and destination (`resources/meteor-icon-kit`) during automated builds. Uses `--ci` flag for CI environment optimizations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# ...\nBRANCH_METEOR_ICON_KIT=main\nORG_METEOR_ICON_KIT=shopware\n\n# ...\n./docs-cli.cjs clone \\\n --ci \\\n --repository shopware/meteor \\\n --branch ${BRANCH_METEOR_ICON_KIT:-main} \\\n --src packages/icon-kit/docs \\\n --dst resources/meteor-icon-kit \\\n --org ${ORG_METEOR_ICON_KIT:-shopware} \\\n --root ../..\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomAppStore for Event Data Storage - PHP\nDESCRIPTION: Defines a CustomAppStore class extending FlowStorer to save custom app event data into the flow's storage mechanism. It utilizes the getCustomAppData method and stores each key-value pair under the ScalarValuesAware namespace as well as the root of the storage array. The restore method is provided for completeness but is effectively a no-op here.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nclass CustomAppStore extends FlowStorer\\n{\\n    public function store(FlowEventAware $event, array $stored): array\\n    {\\n        //check if $event is an instance of CustomAppAware\\n        foreach ($event->getCustomAppData() as $key => $data) {\\n            $stored[ScalarValuesAware::STORE_VALUES][$key] = $data;\\n            $stored[$key] = $data;\\n        }\\n    }\\n\\n    public function restore(StorableFlow $storable): void\\n    {\\n        return;\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Retrieval for ShippingFixtureService in Shopware E2E Testing\nDESCRIPTION: Defines functions to retrieve necessary IDs for creating a shipping method fixture, using the search method to find rule and delivery time IDs.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst findRuleId = () => this.search('rule', {\n    type: 'equals',\n    value: 'Cart >= 0 (Payment)'\n});\nconst findDeliveryTimeId = () => this.search('delivery-time', {\n    type: 'equals',\n    value: '3-4 weeks'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating the Configuration Template for Dailymotion CMS Element\nDESCRIPTION: Twig template for the configuration component that displays a text field for entering the Dailymotion video ID. The field is bound to the configuration value using v-model.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/config/sw-cms-el-config-dailymotion.html.twig\n{% block sw_cms_element_dailymotion_config %}\n    <sw-text-field\n          v-model=\"dailyUrl\"\n          class=\"swag-dailymotion-field\"\n          label=\"Dailymotion video link\"\n          placeholder=\"Enter dailymotion link...\"\n          @update:value=\"onElementUpdate\">\n    </sw-text-field>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Refactoring with Extension Verifier\nDESCRIPTION: Command to run the refactoring tool on an extension. This uses Rector and ESLint to apply code improvements.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest fix /ext\n```\n\n----------------------------------------\n\nTITLE: Running development server for frontend app\nDESCRIPTION: Command to start the development server for the frontend application using pnpm.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/app-installation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Adding Default Value to Colorpicker Configuration\nDESCRIPTION: Extends the plugin's color picker configuration to include a default value, which will be pre-selected when the plugin is installed.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/SystemConfig/Schema/config.xsd\">\n\n    <card>\n        <title>Example configuration</title>\n        <input-field type=\"colorpicker\">\n            <name>sassPluginHeaderBgColor</name>\n            <label>Header background color</label>\n            <defaultValue>#fff</defaultValue>\n        </input-field>\n    </card>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Shopware Project Build Configuration\nDESCRIPTION: Complete YAML configuration options for customizing the build process including cleanup paths, extension exclusions, and asset handling.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  # Browserlist configuration for Storefront\n  browserslist: 'defaults'\n  # Paths that should be deleted\n  cleanup_paths:\n    - 'node_modules'\n  # At the end of the process, bin/console asset:install is executed, this can be disabled here\n  disable_asset_copy: false\n  # Exclude the following extensions from the build process\n  exclude_extensions:\n    - 'SwagExample'\n  # Keep the extension Administration and Storefront source code\n  keep_extension_source: false\n  # Keep the source maps of the compiled assets\n  keep_source_maps: false\n  # Delete after bin/console asset:install all assets in the extensions, so only live in public folder.\n  # This only works when the assets are served directly from the public folder.\n  remove_extension_assets: false\n  # Allows to force building an extension even when the assets existing. A use-case could be if you used composer patches for a specific extension.\n  force_extension_build:\n    - name: 'SomePlugin'\n```\n\n----------------------------------------\n\nTITLE: Controlling Response Caching in an App Script (Twig)\nDESCRIPTION: Demonstrates methods available on the `response.cache` object to configure caching for Storefront and Store-API script responses (caching is opt-out for these). Shows how to set cache invalidation states, max age, disable caching, and add custom cache tags. Cache configurations are ignored for `/api` script responses.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% do response.cache.invalidationState('logged-in', 'cart-filled') %}\n{% do response.cache.maxAge(7200) %}\n{% do response.cache.disable() %}\n{% do response.cache.tag('my-manufacturer-tag-' ~ manufacturerId, 'another-tag') %}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Class Map Configuration\nDESCRIPTION: JSON diff showing how to enable Composer class map authoritative mode for improved performance.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n{\n    \"require\": {\n        \"shopware/core\": \"....\",\n        // .....\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n+       \"classmap-authoritative\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Extension Version with Shopware CLI in Bash\nDESCRIPTION: Command to extract the version information from a Shopware extension. It takes a path parameter that can be absolute or relative to the current working directory and outputs the extension version.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/extract-meta-data.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli extension get-version <path>\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Lazy Loading from sw_thumbnails\nDESCRIPTION: Example HTML output from sw_thumbnails when the lazy loading attribute is applied. The resulting img tag includes the loading=\"lazy\" attribute for native lazy loading.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<img \n    src=\"...\" \n    sizes=\"...\" \n    loading=\"lazy\">\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag in Storefront JavaScript\nDESCRIPTION: Demonstrates how to check if a feature flag ('v6.5.0.0') is active in Shopware Storefront JavaScript using the imported `Feature` helper. The example shows logging a message if the feature is active within the `data` function.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Feature from 'src/helper/feature.helper';\n...\ndata() {\n   if (Feature.isActive('v6.5.0.0')) {\n        console.log('v6.5.0.0 is active')\n   }\n };\n```\n\n----------------------------------------\n\nTITLE: Example PremappingStruct JSON Structure for Salutations\nDESCRIPTION: This JSON object exemplifies the structure of a `PremappingStruct` as returned by a premapping reader, specifically for the 'salutation' entity. It contains an array of 'choices' representing available Shopware 6 salutations (with UUIDs and descriptions) and a 'mapping' array listing source system salutations ('mr', 'ms') with their corresponding 'destinationUuid' if pre-mapped. This structure is used in the `generate-premapping` API response.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/premapping.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"entity\":\"salutation\",\n   \"choices\":[\n      {\n         \"uuid\":\"d4883ea9db2b4a5ca033873903358062\",\n         \"description\":\"mr\",\n         \"extensions\":[\n\n         ]\n      },\n      {\n         \"uuid\":\"7a7ef1e4a9064c46b5f85e28b4d942a9\",\n         \"description\":\"mrs\",\n         \"extensions\":[\n\n         ]\n      },\n      {\n         \"uuid\":\"a6fa00aef9a648d9bd012dbe16c112bf\",\n         \"description\":\"not_specified\",\n         \"extensions\":[\n\n         ]\n      }\n   ],\n   \"mapping\":[\n      {\n         \"sourceId\":\"mr\",\n         \"description\":\"mr\",\n         \"destinationUuid\":\"d4883ea9db2b4a5ca033873903358062\",\n         \"extensions\":[\n\n         ]\n      },\n      {\n         \"sourceId\":\"ms\",\n         \"description\":\"ms\",\n         \"destinationUuid\":\"\",\n         \"extensions\":[\n\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Premapped Salutation Identifier using MappingService in PHP\nDESCRIPTION: This PHP snippet demonstrates how to fetch the Shopware 6 UUID for a source system salutation using the `MappingService`. It calls the `getMapping` method with the connection ID, the mapping name from `SalutationReader`, the source salutation identifier, and the context. If a mapping exists, it returns the `entityUuid`; otherwise, it logs an `UnknownEntityLog` and returns null. The mapping ID is stored for potential preloading if found.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/premapping.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\n/* ... */\n\nprotected function getSalutation(string $salutation): ?string\n{\n    $mapping = $this->mappingService->getMapping(\n        $this->connectionId,\n        SalutationReader::getMappingName(),\n        $salutation,\n        $this->context\n    );\n\n    if ($mapping === null) {\n        $this->loggingService->addLogEntry(new UnknownEntityLog(\n            $this->runId,\n            DefaultEntities::SALUTATION,\n            $salutation,\n            DefaultEntities::CUSTOMER,\n            $this->oldCustomerId\n        ));\n\n        return null;\n    }\n    $this->mappingIds[] = $mapping['id'];\n\n    return $mapping['entityUuid'];\n}\n\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Building Shopware Storefront in Source Code\nDESCRIPTION: Command to build JavaScript for the Shopware storefront when working with source code.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run build:js:storefront\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Implementation\nDESCRIPTION: Basic implementation of the sw_icon twig action with namespace configuration for custom icons.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-icons.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_icon 'done-outline-24px' style {\n    'namespace': 'TestPlugin'\n} %}\n```\n\n----------------------------------------\n\nTITLE: Importing Component in Block Registration\nDESCRIPTION: This JavaScript snippet shows how to import the block component into the main block registration file, ensuring the custom component is loaded and available when registering the CMS block.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/index.js\nimport './component'; // <- Right here!\n\nShopware.Service('cmsService').registerCmsBlock({\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Example for Checkbox Label Selector\nDESCRIPTION: Presents an HTML structure for a custom checkbox, likely using Bootstrap classes (`custom-control`, `custom-checkbox`, `custom-control-label`). It includes a specific class (`checkout-confirm-tos-label`) on the label element, which is the recommended selector for interacting with this element in E2E tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-control custom-checkbox\">\n  <label \n      for=\"tos\" \n      class=\"checkout-confirm-tos-label custom-control-label\">\n      I have read and accepted the general terms and conditions.\n  </label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Changelog Files Using Shopware Console Command - Bash\nDESCRIPTION: This snippet shows how to generate a custom changelog for a specific version or area of Shopware using the CLI. The 'changelog:change' command accepts a version and optional arguments. Required dependencies are a working Shopware CLI environment. Parameters include <version> and available options; output is a generated changelog file reflecting the selected criteria. Use '--help' for possible options.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-03-implement-new-changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console changelog:change [<version>] [options]\n```\n\n----------------------------------------\n\nTITLE: Decorating the EmployeeRouteAccessLoader in PHP\nDESCRIPTION: Example of how to extend the route access control by decorating the EmployeeRouteAccessLoader class. This allows for custom modifications to the denylist configuration without changing the core files.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/guides/api-route-restriction-for-employees.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Commercial\\B2B\\Domain\\RouteAccess;\n\nclass DecoratedEmployeeRouteAccessLoader extends AbstractEmployeeRouteAccessLoader\n{\n    private const CONFIG = __DIR__ . '/../../Resources/config/new-custom-employee_route_access.xml';\n\n    public function __construct(\n        private readonly AbstractEmployeeRouteAccessLoader $decorated\n    ) {\n    }\n\n    public function getDecorated(): AbstractEmployeeRouteAccessLoader\n    {\n        return $this->decorated;\n    }\n\n    public function load(): array\n    {\n        $oldConfig = $this->decorated->load();\n        $customConfig = (array) @simplexml_load_file(self::CONFIG);\n\n        // This example merges the old config with the new created custom config.\n        // Return the $customConfig variable to override the old completely\n\n        return array_merge_recursive($oldConfig, $customConfig);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Adminer Port\nDESCRIPTION: Nix configuration for customizing the Adminer service port for database management.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.adminer.listen = \"127.0.0.1:9084\";\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Secret with Shopware CLI\nDESCRIPTION: Command to generate a new JWT secret without requiring a Shopware project or PHP installation.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/helper-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project generate-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Auto-Prefixing in Shopware YAML\nDESCRIPTION: Example of how to activate CSS auto-prefixing in Shopware using the configuration key in the storefront.yaml file. This is provided as a fallback option for supporting older browsers or special CSS properties.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-03-disable-css-autoprefixer.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstorefront:\n  theme:\n    auto_prefix_css: true\n```\n\n----------------------------------------\n\nTITLE: Enabling NPM Strict Mode\nDESCRIPTION: YAML configuration to enable strict NPM dependency handling for optimized builds.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# .shopware-extension.yml\nbuild:\n  zip:\n    assets:\n      npm_strict: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Template for a Shopware 6 Component\nDESCRIPTION: This HTML template defines the structure of the 'sw-hello-world' component. It includes a parent div with the component's class name and a paragraph with the text 'Hello world!'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/add-custom-styles.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% block example_block %}\n    <div class=\"sw-hello-world\">\n        <p>Hello world!</p>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Cache Loading in Shopware Core (Before Symfony Cache)\nDESCRIPTION: This PHP code snippet shows the `CachedRuleLoader` class implementation before adopting Symfony's `CacheInterface` with built-in stampede protection. It uses `TagAwareAdapterInterface` for caching, manually checks for cache hits (`item->isHit()`), handles potential exceptions during retrieval, logs cache hits and misses, and saves the generated rule data to the cache (`cache->save()`) if it's not found.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-cache-stampede-protection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Checkout\\Cart;\n\nuse Psr\\Log\\LoggerInterface;\nuse Shopware\\Core\\Content\\Rule\\RuleCollection;\nuse Shopware\\Core\\Framework\\Context;\nuse Symfony\\Component\\Cache\\Adapter\\TagAwareAdapterInterface;\n\nclass CachedRuleLoader extends AbstractRuleLoader\n{\n    public const CACHE_KEY = 'cart_rules';\n\n    private AbstractRuleLoader $decorated;\n\n    private TagAwareAdapterInterface $cache;\n\n    private LoggerInterface $logger;\n\n    public function __construct(AbstractRuleLoader $decorated, TagAwareAdapterInterface $cache, LoggerInterface $logger)\n    {\n        $this->decorated = $decorated;\n        $this->cache = $cache;\n        $this->logger = $logger;\n    }\n\n    public function getDecorated(): AbstractRuleLoader\n    {\n        return $this->decorated;\n    }\n\n    public function load(Context $context): RuleCollection\n    {\n        $item = $this->cache->getItem(self::CACHE_KEY);\n\n        try {\n            if ($item->isHit() && $item->get()) {\n                $this->logger->info('cache-hit: ' . self::CACHE_KEY);\n\n                return $item->get();\n            }\n        } catch (\\Throwable $e) {\n            $this->logger->error($e->getMessage());\n        }\n\n        $this->logger->info('cache-miss: ' . self::CACHE_KEY);\n\n        $rules = $this->getDecorated()->load($context);\n\n        $item->set($rules);\n        $this->cache->save($item);\n\n        return $rules;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Interface with Optional Parameter using func_get_arg\nDESCRIPTION: Shows the implementation of an interface method where a new parameter was added using the comment-based approach. It utilizes `func_get_arg(1)` to access the optional second argument (`$data`), ensuring compatibility but potentially reducing code clarity. Depends on `DataValidationFactoryInterface` and `SalesChannelContext`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass ContactFormValidationFactory implements DataValidationFactoryInterface\n{\n    public function create(SalesChannelContext $context  /* array $data */): DataValidationDefinition\n    {\n        $data = func_get_arg(1) ?? [];\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Datepicker via Buttons in Twig\nDESCRIPTION: This snippet demonstrates how to control the datepicker using buttons for opening, closing, and resetting. It uses selectors to associate the buttons with the datepicker functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/using-the-datepicker-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/page/content/index.html.twig' %}\n\n{% block base_main_inner %}\n\n    {% set pickerProperties = {\n        locale: app.request.locale,\n        enableTime: true,\n        selectors: {\n            openButton: \".openDatePicker\",\n            closeButton: \".closeDatePicker\",\n            clearButton: \".resetDatePicker\"\n        }\n    } %}\n\n    <label>\n        <input type=\"text\"\n               name=\"foo\"\n               class=\"customDate\"\n               value=\"2021-04-13T00:00:00+00:00\"\n               data-date-picker\n               data-date-picker-options=\"{{ pickerProperties|json_encode|escape('html_attr') }}\"\n        />\n\n        <button class=\"openDatePicker\">Open</button>\n        <button class=\"closeDatePicker\">Close</button>\n        <button class=\"resetDatePicker\">Reset</button>\n    </label>\n\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for frontend app\nDESCRIPTION: Command to install the required dependencies for the frontend application using pnpm package manager.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/app-installation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-Specific Configuration for Production\nDESCRIPTION: Shows the file path structure for creating production-specific configuration files in Shopware 6, using mailer settings as an example.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/index.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<project root>\n└── config\n   └── packages\n      └── prod\n         └── mailer.yaml\n```\n\n----------------------------------------\n\nTITLE: Pushing Shopware Changes to PaaS Repository - Bash\nDESCRIPTION: Stages, commits, and pushes changes to the Shopware project's configured PaaS git repository from the user's terminal. Requires git installed and correct remote (`shopware`) set for the target PaaS environment. All changes are added, committed with a message, and pushed to the main branch, which triggers a new build and deployment. Takes no parameters, and outputs deployment build log info upon completion.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/build-deploy.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Applied new configuration\"\ngit push -u shopware main\n```\n\n----------------------------------------\n\nTITLE: Configuring PaaS CLI and Pushing Code to Shopware PaaS (Shell)\nDESCRIPTION: This set of shell commands configures the Shopware PaaS CLI to link the local project with a remote PaaS project using its unique PROJECT_ID. It then pushes the committed code from the local Git repository to the configured 'shopware' remote, triggering the deployment process on the PaaS platform. The Shopware PaaS CLI must be installed and authenticated.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/index.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nshopware project:set-remote PROJECT_ID\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit push shopware\n```\n\n----------------------------------------\n\nTITLE: Successful Redirect Response for Pay Endpoint in JSON\nDESCRIPTION: Example of a successful response from the Pay endpoint, providing a redirect URL for the user to complete the payment process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/payment-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redirectUrl\": \"https://payment.app/user/go/here/068b1ec4d7ff431b95d3b7431cc725aa/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CredentialsBuilder in Shopware B2B Authentication\nDESCRIPTION: PHP code showing an example implementation of a CredentialsBuilder for creating CredentialsEntity in Shopware B2B Suite.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function createCredentials(array $parameters): AbstractCredentialsEntity\n{\n    $entity = new CredentialsEntity();\n\n    $entity->email = $parameters['email'];\n    $entity->salesChannelId = IdValue::create($this->contextProvider->getSalesChannelContext()->getSalesChannel()->getId());\n    $entity->customerScope = $this->systemConfigService->get('core.systemWideLoginRegistration.isCustomerBoundToSalesChannel');\n\n    return $entity;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Administration for Changes\nDESCRIPTION: These bash commands rebuild the Shopware Administration to incorporate the new CMS block. Two options are provided: one for a template setup and another for a platform-only (contribution) setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-administration.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run build:js:admin\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Fields in PHP Entity Definition\nDESCRIPTION: PHP code example showing how to define runtime fields in a custom entity definition, including field dependencies required for runtime field generation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/partial-data-loading.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new ApiAware(), new PrimaryKey(), new Required()),\n        (new StringField('path', 'path'))->addFlags(new ApiAware()),\n\n        // When this field is requested, we need the data of path field to generate the url\n        (new StringField('url', 'url'))->addFlags(new ApiAware(), new Runtime(['path'])),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Wrangler Pages Deploy Command\nDESCRIPTION: Command to deploy the built application to Cloudflare Pages using Wrangler CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/best-practices/app-deployment/cloudflare.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwrangler pages deploy dist/\n```\n\n----------------------------------------\n\nTITLE: Committing Embedding Configuration in Developer Portal (Shell)\nDESCRIPTION: Sequence of Git commands executed within the `developer-portal` repository. It navigates to the repository, checks out a new feature branch (`feature/embeds-meteor-icon-kit`), stages changes (implied `git add .` after applying configuration changes), and commits them with a message indicating the embedding of the meteor repository.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd /www/shopware/developer-portal/\ngit checkout -b feature/embeds-meteor-icon-kit\n# apply changes\ngit commit -m \"feat: embedded meteor repo\"\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Plugin in Main.js\nDESCRIPTION: JavaScript code to register the AJAX loading plugin with the Shopware 6 plugin manager.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-dynamic-content-via-ajax-calls.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport AjaxLoadPlugin from './example-plugin/example-plugin.plugin';\n\nwindow.PluginManager.register('AjaxLoadPlugin', AjaxLoadPlugin, '[data-ajax-helper]');\n```\n\n----------------------------------------\n\nTITLE: Creating Error Notification with Global Namespace in Shopware 6 Administration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an error notification using the global notification mixin in Shopware 6's administration. It leverages the unified notification title ('Error') and specifies only the translatable error message, simplifying localization and reducing redundancy. Dependencies include the Shopware administration's notification mixin; the key parameter is 'message', which should reference a localization snippet.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-21-unified-notification-titles.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.createNotificationError({\n    message: this.$tc('sw-module.messageError')\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Accessibility Changes with Feature Flags in Twig\nDESCRIPTION: This Twig snippet demonstrates how Shopware implements potentially breaking accessibility changes using the `ACCESSIBILITY_TWEAKS` feature flag. It shows a conditional structure where the improved, accessible version (using `ul` and `li`) is rendered if the flag is active, while the older, less accessible version (using `div`s) is rendered otherwise. Deprecation tags indicate the planned removal of the old structure and blocks.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/accessibility/storefront/index.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# @deprecated tag:v6.7.0 - The list will be changed to `<ul>` and `<li>` to improve accessibility #}\n{% if feature('ACCESSIBILITY_TWEAKS') %}\n    <ul class=\"sidebar-list\">\n        {% block component_list_items_inner %}\n            <li class=\"list-item\"><a href=\"#\">Item</a></li>\n            <li class=\"list-item\"><a href=\"#\">Item</a></li>\n            <li class=\"list-item\"><a href=\"#\">Item</a></li>\n        {% endblock %}\n    </ul>\n{% else %}\n    <div class=\"sidebar-list\">\n        {# @deprecated tag:v6.7.0 - Use `component_list_items_inner` instead with `<li>` #}\n        {% block component_list_items %}\n            <div class=\"list-item\"><a href=\"#\">Item</a></div>\n            <div class=\"list-item\"><a href=\"#\">Item</a></div>\n            <div class=\"list-item\"><a href=\"#\">Item</a></div>\n        {% endblock %}\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Setting Currency ID in Shopware API\nDESCRIPTION: Example of using sw-currency-id header to specify the desired currency for price calculations in API responses.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/request-headers.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/search/order\n--header 'sw-currency-id: 1987f5c352434028802556e065cd5b1e'\n```\n\n----------------------------------------\n\nTITLE: Referencing Sales Agent Configuration File (TypeScript)\nDESCRIPTION: This refers to the `config.ts` file. This file is used to customize and configure various aspects of the Sales Agent application.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/appearance.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconfig.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Worker in Shopware YAML (PHP)\nDESCRIPTION: YAML configuration to enable and configure the admin worker in Shopware, specifying poll interval and transports.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/message-queue.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/shopware.yaml\nshopware:\n    admin_worker:\n        enable_admin_worker: true\n        poll_interval: 30\n        transports: [\"async\", \"low_priority\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Storefront Route with PHP Attributes\nDESCRIPTION: This PHP snippet exemplifies the standard schema for defining routes within Shopware 6 Storefront controllers using PHP 8 attributes (`#[Route]`). It demonstrates how to specify the route's path with parameters, a unique name prefixed with 'frontend.', options like SEO handling, default parameter values (including controlling AJAX requests, login requirements, and HTTP caching), and the allowed HTTP methods (GET, POST, DELETE).\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-08-10-storefront-coding-standards.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#[Route(path: '/example/endpoint/{id}', name: 'frontend.example.endpoint', options: ['seo' => false], defaults: ['id' => null, 'XmlHttpRequest' => true, '_loginRequired' => true, '_httpCache' => true], methods: ['GET', 'POST', 'DELETE'])]\n```\n\n----------------------------------------\n\nTITLE: Fastly Soft Purge Configuration\nDESCRIPTION: YAML configuration for enabling soft purge functionality with Fastly, including stale cache settings.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  http_cache:\n    stale_while_revalidate: 300\n    stale_if_error: 3600\n    reverse_proxy:\n        enabled: true\n        fastly:\n          enabled: true\n          api_key: '<personal-token-from-fastly>'\n          service_id: '<service-id>'\n          soft_purge: '1'\n```\n\n----------------------------------------\n\nTITLE: Creating App Directory Structure for Shopware 6\nDESCRIPTION: Demonstrates the recommended file and folder structure for a Shopware 6 app that implements custom flow actions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── custom\n    ├── apps\n    │   └── FlowBuilderActionApp\n    │       └── Resources\n    │           └── flow-action.xml\n    │           └── app-icon.png\n    │           └── slack-icon.png\n    │       └── manifest.xml\n    └── plugins\n```\n\n----------------------------------------\n\nTITLE: Defining the FlowStorer Interface in PHP\nDESCRIPTION: This snippet defines a simple marker interface `FlowStorer`. Classes implementing this interface are responsible for storing relevant data from a `FlowEventAware` event into a storable format and restoring data into a `StorableFlow` instance.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ninterface FlowStorer {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Foo Entity Definition with Many-to-Many Association in PHP\nDESCRIPTION: Adds ManyToManyAssociationField to the Foo entity definition to establish the relationship with Bar entities through the mapping definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n\n        new ManyToManyAssociationField(\n            'bars',\n            BarDefinition::class,\n            FooBarMappingDefinition::class,\n            'foo_id',\n            'bar_id'\n        ),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Asset Filter Component\nDESCRIPTION: JavaScript computed property implementation for handling asset filtering in Vue components.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/using-assets.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed: {\n    assetFilter() {\n        return Shopware.Filter.getByName('asset');\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Administration for Shopware\nDESCRIPTION: Shell commands to build the Shopware Administration after implementing the new CMS element. Shows two approaches: one for the template setup and one for platform-only contribution setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-administration.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run build:js:admin\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Pack Path Structure\nDESCRIPTION: Directory path structure for storing custom icon packs with specific pack names.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-icons.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<YourPlugin>/src/Resources/app/storefront/dist/assets/icon/<pack-name>\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerSpecificFeatureTwigExtension for Shopware Storefront\nDESCRIPTION: Implements a Twig extension to check if a customer has access to specific B2B features in Twig templates. This allows for conditional rendering of B2B components in the storefront.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Shopware\\Commercial\\B2B\\QuickOrder\\Storefront\\Framework\\Twig\\Extension;\n\nclass CustomerSpecificFeatureTwigExtension extends AbstractExtension\n{\n    public function getFunctions(): array\n    {\n        return [\n            new TwigFunction('customerHasFeature', $this->isAllowed(...), ['needs_context' => true]),\n        ];\n    }\n\n    public function isAllowed(array $twigContext, string $feature): bool\n    {\n        $customerId = null;\n        if (\\array_key_exists('context', $twigContext) && $twigContext['context'] instanceof SalesChannelContext) {\n            $customerId = $twigContext['context']->getCustomerId();\n        }\n        \n        if (!$customerId) {\n            return false;\n        }\n        \n        return $this->customerSpecificFeatureService->isAllowed($customerId, $feature);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating REBUILD_DATE Variable to Trigger Shopware Rebuild - Bash\nDESCRIPTION: Creates an environment variable named `REBUILD_DATE` to manually trigger a rebuild and deployment without code changes. Requires Shopware PaaS CLI and relevant project environment access. The value is set to the output of `date`, so each execution results in a unique value and triggers a new build. This is typically used on the main environment and is visible during the build step.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/build-deploy.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshopware variable:create --environment main --level environment --prefix env --name REBUILD_DATE --value \"$(date)\" --visible-build true\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on Ubuntu/Debian\nDESCRIPTION: Bash commands to install Node.js version 22.x on Ubuntu or Debian systems. This setup meets the JavaScript runtime requirements for Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://deb.nodesource.com/setup_22.x -o nodesource_setup.sh\nsudo -E bash nodesource_setup.sh\n\nsudo apt-get install -y nodejs\n```\n\n----------------------------------------\n\nTITLE: Handling Recurring Captures with Shopware Symfony Bundle\nDESCRIPTION: PHP code example showing how to handle recurring captures using the Shopware Symfony Bundle. It defines a controller action for processing recurring payment captures.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/payment.md#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Payment\\PaymentPayAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Shopware\\App\\SDK\\Response\\PaymentResponse;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[AsController]\nclass PaymentController {\n    #[Route('/payment/pay')]\n    public function handle(PaymentPayAction $payment): ResponseInterface\n    {\n        // handle recurring payment capture\n        \n        return PaymentResponse::paid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Feature Toggle in Shopware Storefront Twig Template\nDESCRIPTION: Demonstrates how to use the customerHasFeature() Twig function to conditionally render B2B components based on customer-specific feature access in a Twig template.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% if customerHasFeature('QUICK_ORDER') %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Store Image Directory in YAML\nDESCRIPTION: YAML configuration for specifying a single directory containing all store images for an extension.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/updating-store-page.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstore:\n  image_directory: <path-to-directory>\n```\n\n----------------------------------------\n\nTITLE: ER Diagram for Product Variants and Property Group Relations in Shopware\nDESCRIPTION: Mermaid entity relationship diagram illustrating how product variants are represented through self-referencing in the Product entity with parent-child relationships. It also shows the connections between products and property group options that define variant characteristics.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/catalog/products.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    Product||--|| Product : \"uuid=variant\"\n    Product {\n        uuid product_id\n        uuid parent_id\n    }\n    Product ||--|{ PropertyGroupOption : \"1:M\"\n    PropertyGroupOption{\n        uuid property_group_option_id\n        uuid property_group_id\n    }\n    PropertyGroupOption }|--|| PropertyGroup : \"M:1\"\n    PropertyGroup{\n        uuid property_group_id\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding a New Public Function in JavaScript\nDESCRIPTION: Shows how to add a new function while deprecating an existing one in a JavaScript service class with proper JSDoc annotations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// route.service.js\nexport default class RouteService {\n    /**\n     * @deprecated tag:v6.5.0 - Use getRouteConfig() instead\n     */\n    getRoute(symfonyRoute) {\n        // Returns string 'foo/bar'\n        return this._someMagic(symfonyRoute);\n    }\n \n    getRouteConfig() {\n        // Returns object { name: 'foo/bar', params: [] }\n        return {\n            url: this._someMagic(symfonyRoute).url,\n            params: this._someMagic(symfonyRoute).params\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Extension Changelog with Shopware CLI in Bash\nDESCRIPTION: Command to extract the changelog from a Shopware extension. It takes a path parameter that can be absolute or relative to the current working directory and outputs the English changelog of the extension.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/extract-meta-data.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli extension get-changelog <path>\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Exception Factory Class - Shopware - PHP\nDESCRIPTION: This PHP snippet shows a domain exception class pattern where exceptions are created via static factory methods, preventing direct instantiation outside the class by making the constructor private. It assigns each exception a unique error code and message, improving traceability and consistent API error reporting. Prerequisites include extending Shopware's HttpException and integrating with Symfony's Response constants.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-24-domain-exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Shopware\\Core\\Content\\Cms;\n\nuse Shopware\\Core\\Framework\\HttpException;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass CmsException extends HttpException\n{\n    public const NOT_FOUND_CODE = 'CMS_NOT_FOUND';\n    public const SOME_FOO_CODE = 'CMS_SOME_FOO';\n    \n    public static function notFound(?\\Throwable $e = null): void\n    {\n        return new self(Response::HTTP_NOT_FOUND, self::NOT_FOUND_CODE, 'Cms page not found', [], $e);\n    }\n\n    public static function anExceptionIDontCatchAnywhere(?\\Throwable $e = null) \n    {\n        return new self(Response::HTTP_INTERNAL_SERVER_ERROR, self::SOME_FOO_CODE, 'Some foo', [], $e);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running the App with Bun\nDESCRIPTION: Command to run the app server using Bun runtime.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/01-getting_started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.js\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for App Configuration\nDESCRIPTION: Shows the required directory structure for including config.xml file in a Shopware app\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n...\\n└── DemoApp\\n      └── Resources\\n            └── config  \\n                  └── config.xml\\n      └── manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Default SCSS Variable in Plugin\nDESCRIPTION: Sets up a default SCSS variable in the plugin's base.scss file that will be overridden by the subscriber. The example creates a variable for header background color with a fallback value.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables-via-subscriber.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/base.scss\n// The value will be overwritten by the subscriber when the plugin is installed and activated\n$sass-plugin-header-bg-color: #ffcc00 !default;\n\n.header-main {\n    background-color: $sass-plugin-header-bg-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Method for Replacing Category Association in Shopware 6\nDESCRIPTION: This example demonstrates a common mistake when trying to replace a category association for a product. This approach will add a new category without removing the old one, resulting in two categories being assigned to the product instead of replacing the original.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/replacing-associated-data.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function replaceData(Context $context): void\n{\n    $this->productRepository->update([\n        [\n            'id' => 'myProductId',\n            'categories' => [\n                [\n                    'id' => 'newCategoryId'\n                ]\n            ]\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Configuration for Nuxt Build\nDESCRIPTION: Required NPM configuration settings to resolve Nuxt build issues, setting shamefully-hoist and strict-peer-dependencies flags.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/best-practices/app-deployment/cloudflare.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshamefully-hoist=true\nstrict-peer-dependencies=false\n```\n\n----------------------------------------\n\nTITLE: Implementing the Concrete Route Class for Store API in PHP\nDESCRIPTION: Implements the concrete Store API route class that extends the abstract route. It handles the actual logic for retrieving data from the repository and defines the route path and methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/add-store-api-route.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Core/Content/Example/SalesChannel/ExampleRoute.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['store-api']])]\nclass ExampleRoute extends AbstractExampleRoute\n{\n    protected EntityRepository $exampleRepository;\n\n    public function __construct(EntityRepository $exampleRepository)\n    {\n        $this->exampleRepository = $exampleRepository;\n    }\n\n    public function getDecorated(): AbstractExampleRoute\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    #[Route(path: '/store-api/example', name: 'store-api.example.search', methods: ['GET','POST'], defaults: ['_entity' => 'swag_example'])]\n    public function load(Criteria $criteria, SalesChannelContext $context): ExampleRouteResponse\n    {\n        return new ExampleRouteResponse($this->exampleRepository->search($criteria, $context->getContext()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Denied ACL Actions\nDESCRIPTION: Example of generated HTML classes for denied ACL actions in the template.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a [...] class=\"is--b2b-acl is--b2b-acl-controller-b2broleaddress is--b2b-acl-action-assign is--b2b-acl-forbidden\"/>\n```\n\n----------------------------------------\n\nTITLE: Calling New Method on Service Implementing Abstract Class\nDESCRIPTION: Shows that when using the abstract class pattern with `getDecorated()`, new methods (like `loadV2`) can be called directly on the service instance without explicit type checking, simplifying the calling code compared to the interface extension approach.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-25-decoration-pattern.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n```php\n$service->loadV2(..);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware Bundle Package\nDESCRIPTION: JSON configuration for setting up a standalone Shopware bundle as a Composer package.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-vendor/my-bundle\",\n    \"type\": \"shopware-bundle\",\n    \"extra\": {\n        \"shopware-bundle-name\": \"MyBundle\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Release Package Service Definition in XML\nDESCRIPTION: Example of services.xml configuration from the release package showing parameter and service definitions with abstract services.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/overload-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <parameters>\n        <parameter key=\"b2b_role.repository_class\">Shopware\\B2B\\Role\\Framework\\RoleRepository</parameter>\n        [...]\n    </parameters>\n    <services>\n        <service id=\"b2b_role.repository_abstract\" abstract=\"true\">\n            <argument type=\"service\" id=\"dbal_connection\"/>\n            <argument type=\"service\" id=\"b2b_common.repository_dbal_helper\"/>\n        </service>\n        [...]\n\n        <service id=\"b2b_role.repository\" class=\"%b2b_role.repository_class%\" parent=\"b2b_role.repository_abstract\"/>\n        [...]\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Install Lock File Task\nDESCRIPTION: PHP task for creating the install.lock file during deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntask('sw:touch_install_lock', static function () {\n    run('cd {{release_path}} && touch install.lock');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection URL in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to specify the connection URL for the Redis instance used by the `RedisCartPersister`. The `shopware.cart.redis_url` parameter is set within a `config/packages/*.yaml` file to point to the Redis server.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-redis-cart-persister.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    cart:\n        redis_url: 'redis://redis'\n```\n\n----------------------------------------\n\nTITLE: Installing an Extension in Shopware CLI\nDESCRIPTION: This command installs a specific extension in the Shopware project using the Shopware CLI. Replace <extension-name> with the actual name of the extension to be installed.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension install <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Setting External Repository Branch for CI Preview (Bash)\nDESCRIPTION: Sets the `BRANCH_METEOR_ICON_KIT` environment variable within the `developer-portal`'s CI script (`.github/scripts/mount.sh`). This forces the CI build to clone and embed the specified feature branch (`feature/embed-meteor-repo-to-developer-portal`) from the external repository, enabling preview of changes before they are merged into the external repository's main branch.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nBRANCH_METEOR_ICON_KIT=feature/embed-meteor-repo-to-developer-portal\n```\n\n----------------------------------------\n\nTITLE: EntityRepository Usage in TypeScript\nDESCRIPTION: Demonstrates the EntityRepository abstraction for simplified interaction with Shopware API, including searching, updating, and deleting entities.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/05-http-client.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from \"@shopware-ag/app-server-sdk\"\nimport { EntityRepository } from \"@shopware-ag/app-server-sdk/helper/admin-api\";\nimport { Criteria } from \"@shopware-ag/app-server-sdk/helper/criteria\";\n\n// Get the shop by repository directly\nconst shop = ...;\n\nconst httpClient = new HttpClient(shop);\n\ntype Product = {\n  id: string;\n  name: string;\n};\n\nconst repository = new EntityRepository<Product>(httpClient, \"product\");\n\n// Fetch all products\nconst products = await repository.search(new Criteria());\n\n// Get the first product and print the name\nconsole.log(products.first().name);\n// Same as above\nconsole.log(products.data[0].name);\n\n// Fetch a single product\n\nconst product = await repository.search(new Criteria(['my-uuid'])).first();\n\n// Product can be null\nconsole.log(product.name);\n\n// Upserts update the given product if found, otherwise creates it\nawait repository.upsert(['id': 'my-uuid', 'name': 'My Product']);\n\n// This would try to create a product, but fail as not all required fields are provided\nawait repository.upsert(['name': 'My Product']);\n\n// Delete a product\nawait repository.delete([{id: 'my-uuid'}]);\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Shopware Development Packages\nDESCRIPTION: Commands to install additional development tools, PaaS integration, and Fastly integration for Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install profiler and other dev tools, eg Faker for demo data generation\ncomposer require --dev shopware/dev-tools\n\n# Or Install symfony dev tools\ncomposer require --dev symfony/profiler-pack\n\n# Install PaaS integration\ncomposer require paas --ignore-platform-req=ext-amqp\n\n# Install Fastly integration\ncomposer require fastly\n```\n\n----------------------------------------\n\nTITLE: Refactoring FlowDispatcher: After State (PHP)\nDESCRIPTION: This snippet illustrates the updated `FlowDispatcher` implementation. The `dispatch` method now uses a `FlowFactory` to create or restore a `StorableFlow` object from the original `Event`. This `StorableFlow` instance, containing detached and potentially restored data, is then passed to the execution logic (`execute`), decoupling it from the original event.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass FlowDispatcher \n{\n    public function dispatch(Event $event) {\n        ...\n        // The `FlowFactory` will create/restore the `StorableFlow` from original event\n        $flow = $this->flowFactory->create($event);\n        // use the `StorableFlow` to execute the flow builder actions instead of the original events\n        $this->execute($flow);\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IDs-based Record Lookup\nDESCRIPTION: Shows how to perform a simple lookup using specific record IDs\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ids\": [\n        \"012cd563cf8e4f0384eed93b5201cc98\", \n        \"075fb241b769444bb72431f797fd5776\",\n        \"090fcc2099794771935acf814e3fdb24\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Absolute Surcharge to Cart in Twig\nDESCRIPTION: Example showing how to add a fixed surcharge amount to the cart using the cart service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% set price = services.cart.price.create({\n    'default': { 'gross': 19.99, 'net': 19.99}\n}) %}\n\n{% do services.cart.surcharge('my-surcharge', 'absolute', price, 'Fancy surcharge') %}\n```\n\n----------------------------------------\n\nTITLE: Devenv Local Configuration\nDESCRIPTION: Example devenv.local.nix configuration file showing various service customizations including virtual hosts, NodeJS version, and environment variables.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  # Disable a service\n  services.adminer.enable = false;\n  \n  # Use a custom virtual host\n  services.caddy.virtualHosts.\"http://shopware.swag\" = {\n    extraConfig = ''\n      root * public\n      php_fastcgi unix/${config.languages.php.fpm.pools.web.socket}\n      file_server\n    '';\n  };\n  \n  # Customize nodejs version\n  languages.javascript = {\n    package = pkgs.nodejs-18_x;\n  };\n\n  # Override an environment variable\n  env.APP_URL = \"http://shopware.swag:YOUR_CADDY_PORT\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Shopware App via CLI\nDESCRIPTION: Shows the command to install and activate a Shopware app using the command line interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console app:install --activate MyExampleApp\n```\n\n----------------------------------------\n\nTITLE: Listing Extendable Rule Classes in Shopware 6\nDESCRIPTION: List of rule classes that will remain extendable due to their reliance on configuration that is expected to be extended by third-party developers.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2025-01-29-make-rule-classes-final.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLineItemOfTypeRule\nLineItemProductStatesRule\nPromotionCodeOfTypeRule\nZipCodeRule\nBillingZipCodeRule\nShippingZipCodeRule\n```\n\n----------------------------------------\n\nTITLE: Varnish Soft Purge Configuration\nDESCRIPTION: Diff showing modification to enable soft purge functionality in Varnish configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/reverse-http-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-set req.http.n-gone = xkey.purge(req.http.xkey);\n+set req.http.n-gone = xkey.softpurge(req.http.xkey);\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Command\nDESCRIPTION: Command to install plugin assets by copying them to the public/bundles directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/using-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console assets:install\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Event Data with AdditionalStorer (PHP)\nDESCRIPTION: The `AdditionalStorer` class handles data defined in `availableData` of events that aren't covered by specific `Aware` interfaces. The `store` method determines data types (Entity, EntityCollection, Scalar, Object) and stores appropriate representations (IDs for entities, serialized objects). The `restore` method reconstructs this data within the `StorableFlow`, loading entities or setting scalar/deserialized values.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass AdditionalStorer extends FlowStorer\n{\n    public function store(FlowEventAware $event, array $storedData)\n    {\n        ...\n        // based on the `getAvailableData` in the original event to get the type of additional data\n        $additionalDataTypes = $event::getAvailableData()->toArray();\n        \n        foreach ($additionalDataTypes as $key => $eventData) {\n            // Check if the type of data is Entity or EntityCollection\n            // in the $storedData, we only store the presentation like ['id' => id, 'entity' => entity], we'll restore the data in `AdditionalStorer::restore`\n            if ($eventData['type'] === 'Entity' || 'EntityCollection') {\n                $storedData[$key] = [\n                    'id' => $event->getId(),\n                    'entity' => Entity                 \n                ];\n            }\n            \n            // Check if the type of data is ScalarValueType\n            if ($eventData['type'] === ScalarValueType) {\n                $storedData[$key] = value\n            }\n            \n            // start to implement /Serializable for ObjectType\n            if ($eventData['type'] === ObjectType) {\n                $storedData[$key] = value->serialize()\n            }\n            \n            ...\n        }\n        \n        ... \n        \n        return $storedData;\n    }\n      \n    // this function  make sure we can restore the additional data from original data are not covered in `Storer`\n    // The additional data can be other entity, because the entities we defined in Aware interface like `order`, `customer` ... covered be `Storer`\n    public function restore(StorableFlow $flow): void\n    {\n        if (type === entity) {\n            // About the associations for entity data, mostly the additional entity data is the base entity, we don't need to add associations for this\n            $flow->setData($key, $this->load());\n        } else {\n            $flow->setData($key, $flow->getStore($key));\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default URL Structures for Core Mail Templates\nDESCRIPTION: Defines the standard relative URL paths used in Shopware core mail templates. These URLs are intended to be combined with the `{{ domain }}` variable within the templates to form absolute links. Custom frontends should implement these paths or provide redirects. Placeholders like `{deepLinkCode}` or `{recoverHash}` are expected to be replaced with actual data in the template context.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-09-06-make-core-mail-templates-independent-from-storefront-urls.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/account/order/{deepLinkCode} -> opens the order details of the given order\n/account/recover/password?hash={recoverHash} -> start password recovery process\n/newsletter-subscribe?em={emailHash}&hash={subscribeHash} -> Subscribe email with given hash to the newsletter (for douple-opt in)\n/registration/confirm?em={emailHash}&hash={subscribeHash} -> Confirm registration for user eith the given mail hash (for douple-opt in)\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Default Size from sw_thumbnails\nDESCRIPTION: Example HTML output when using the default size parameter with sw_thumbnails. This results in a simpler sizes attribute that applies a single size regardless of viewport.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img \n    src=\"http://shopware.local/media/06/f0/5c/1614258798/example-image.jpg\" \n    srcset=\"http://shopware.local/media/06/f0/5c/1614258798/example-image.jpg 1921w, \n            http://shopware.local/thumbnail/06/f0/5c/1614258798/example-image_1920x1920.jpg 1920w, \n            http://shopware.local/thumbnail/06/f0/5c/1614258798/example-image_800x800.jpg 800w, \n            http://shopware.local/thumbnail/06/f0/5c/1614258798/example-image_400x400.jpg 400w\" \n    sizes=\"100px\">\n```\n\n----------------------------------------\n\nTITLE: Demonstrating B2B Suite Store API Headers in HTTP\nDESCRIPTION: Shows the required headers for authenticating requests to the B2B Suite Store API. The sw-context-token is obtained by logging in as a customer, while the sw-access-key is found in the Administration when editing a SalesChannel.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/store-api.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nsw-context-token: <customer-context-token>\nsw-access-key: <sales-channel-access-key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Suffix Filter in Shopware\nDESCRIPTION: Shows how to use Suffix filter for matching string endings. Filters items where name ends with 'Lightweight'.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/filters-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$criteria = new Criteria();\n$criteria->addFilter(new SuffixFilter('name', 'Lightweight'));\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": [\n        {\n            \"type\": \"suffix\",\n            \"field\": \"name\",\n            \"value\": \"Lightweight\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic System Check Context in PHP\nDESCRIPTION: Shows how to define allowed execution contexts for readiness checks in Shopware system checks. These checks are used by infrastructure teams to validate system rollout readiness.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-08-02-system-health-check.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    protected function allowedSystemCheckExecutionContexts(): array\n    {\n        return \\Shopware\\Core\\Framework\\SystemCheck\\Check\\SystemCheckExecutionContext::readiness();\n    }\n```\n\n----------------------------------------\n\nTITLE: Modal Panel Implementation in Twig\nDESCRIPTION: Demonstrates how to implement a modal dialog box for Ajax Panel content using b2bAjaxPanelModal plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<div\n    class=\"b2b--ajax-panel b2b-modal-panel\"\n    data-url=\"{{ path('frontend.b2b.b2bcontact.grid') }}\"\n    data-plugins=\"ajaxPanelFormDisable\"\n>\n    <!-- will load content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Release Changelog Section Example in Markdown - Markdown\nDESCRIPTION: This snippet provides an example structure of a generated release section in the main CHANGELOG.md file, following release automation. Each entry links to a specific changelog file and includes its Jira key and title for clarity. Inputs are release version information and a list of changelog files, output is a markdown section; dependencies are build scripts that aggregate changelogs. Only changelogs not behind feature flags are included.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-03-implement-new-changelog.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.3.1.0\n*  [NEXT-12345 - Implemented cool new feature](/changelog/release-6-3-1-0/2020-08-05-Implemented-cool-feature)\n*  [NEXT-56789 - Refactored an important service](/changelog/release-6-3-1-0/2020-08-03-Refactored-service)\n...\n```\n\n----------------------------------------\n\nTITLE: Changing the Current Storefront Theme in Shopware 6\nDESCRIPTION: This interactive command allows assigning the newly created theme to a sales channel. It prompts the user to select a sales channel and then a theme to apply to it.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/create-a-theme.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# run this to change the current Storefront theme\n$ bin/console theme:change\n\n# you will get an interactive prompt to change the \n# current theme of the Storefront like this\n\nPlease select a sales channel:\n[0] Storefront | 64bbbe810d824c339a6c191779b2c205\n[1] Headless | 98432def39fc4624b33213a56b8c944d\n> 0\n\nPlease select a theme:\n[0] Storefront\n[1] SwagBasicExampleTheme\n> 1\n\nSet \"SwagBasicExampleTheme\" as new theme for sales channel \"Storefront\"\nCompiling theme 13e0a4a46af547479b1347617926995b for sales channel SwagBasicExampleTheme\n```\n\n----------------------------------------\n\nTITLE: Listing Shopware Plugins with Console Command\nDESCRIPTION: Shell command example showing how to list all plugins in a Shopware installation to identify extension names for configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-helper.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./bin/console plugin:list\n\nShopware Plugin Service\n=======================\n\n ----------------------------- ------------------------------------------ ---------------------------------------------- --------- ----------------- ------------------- ----------- -------- ------------- ---------------------- \n  Plugin                        Label                                      Composer name                                  Version   Upgrade version   Author              Installed   Active   Upgradeable   Required by composer  \n ----------------------------- ------------------------------------------ ---------------------------------------------- --------- ----------------- ------------------- ----------- -------- ------------- ----------------------\n  SwagPlatformDemoData          Shopware 6 Demo data                       swag/demo-data                                 2.0.1                       shopware AG         Yes         No       No            No \n ----------------------------- ------------------------------------------ ---------------------------------------------- --------- ----------------- ------------------- ----------- -------- ------------- ----------------------\n```\n\n----------------------------------------\n\nTITLE: Storing API Event Data Example - JSON\nDESCRIPTION: Shows a JSON payload as it might be received from an API when triggering a custom app flow event. The structure includes standard customer and sales channel information as well as arbitrary data like shop name and URL – these are stored by FlowStorer for later use in flow actions. This format must match what is expected by the API and subsequent flow processing routines.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"customerId\\\": \\\"d20e4d60e35e4afdb795c767eee08fec\\\",\\n    \\\"salesChannelId\\\": \\\"55cb094fd1794d489c63975a6b4b5b90\\\",\\n    \\\"shopName\\\": \\\"Shopware's Shop\\\",\\n    \\\"url\\\": \\\"https://shopware.com\\\" \\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Error Notification from Error Object in Shopware 6 Administration (JavaScript)\nDESCRIPTION: This JavaScript snippet shows an alternative (not recommended) way of creating an error notification by passing an error object or variable directly as the message. While technically possible, this is discouraged since it may result in untranslatable or unclear notifications. The example highlights the importance of localization and meaningful messaging.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-21-unified-notification-titles.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.createNotificationError({\n    message: err\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Rules for Specific Template Blocks - HTML\nDESCRIPTION: Demonstrates in-template disabling of ESLint rules for a specific section of code in a Vue HTML template via an inline comment. This approach removes selected linting warnings for the affected block, allowing exceptions when necessary. Dependencies include ESLint integration and configuration support. The input is an ESLint-specific HTML comment followed by standard template markup; as output, the linter ignores selected rules in the immediately following block.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-05-28-introduce-eslint-on-vue-admin.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- eslint-disable vue/eslint-rule-to-be-disabled -->\\n<div>\\n…\n```\n\n----------------------------------------\n\nTITLE: Creating Database Dumps with shopware-cli in Bash\nDESCRIPTION: Commands for creating regular and anonymized database dumps using shopware-cli. These commands help in preparing the database for the staging environment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/staging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# creating a regular dump, the clean parameter will not dump the data of cart table\nshopware-cli project dump --clean --host localhost --username db_user --password db_pass --output shop.sql shopware\n\n# create a dump with anonymize data\nshopware-cli project dump --clean --anonymize --host localhost --username db_user --password db_pass --output shop.sql shopware\n```\n\n----------------------------------------\n\nTITLE: Defining CMS Visibility Configuration Structure using JSON\nDESCRIPTION: This JSON structure represents the proposed format for storing visibility settings within a new JSON column in the `cms_section` and `cms_block` database tables. Each key corresponds to a viewport (mobile, tablet, desktop), and the boolean value indicates whether the element should be visible (`true`) or hidden (`false`) on that viewport.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-10-17-hide-and-show-cms-content.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    'mobile': true,\n    'tablet': true,\n    'desktop': true\n}\n```\n\n----------------------------------------\n\nTITLE: Successful App Registration Response (JSON)\nDESCRIPTION: This snippet demonstrates the JSON response structure for a successful app registration. It includes a proof, a secret, and a confirmation URL for the next step in the registration process.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proof\": \"94b42d39280141de84bd6fc8e538946ccdd182e4558f1e690eabb94f924e7bc7\",\n  \"secret\": \"random secret string\",\n  \"confirmation_url\": \"https://my.example.com/registration/confirm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring String Type with assert() in PHP\nDESCRIPTION: Shows how to use `assert(is_string($foo))` to verify that a variable `$foo` (potentially `mixed`) is a string during development or testing phases. An `AssertionError` is thrown on failure when assertions are enabled.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is mixed, but we expect only string\n\nassert(is_string($foo));\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI in GitHub Actions workflow\nDESCRIPTION: YAML configuration to use the Shopware CLI GitHub Action in a workflow.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install shopware-cli\n  uses: shopware/shopware-cli-action@v1\n```\n\n----------------------------------------\n\nTITLE: Basic Static Configuration with Sales Channel Override - YAML\nDESCRIPTION: Demonstrates setting default system configuration and overriding it for a specific sales channel. Shows how to set the allowBuyInListing parameter globally and override it for a particular sales channel ID.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/shopware/static-system-config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  system_config:\n    default:\n      core.listing.allowBuyInListing: true\n    # Disable it for the specific sales channel\n    0188da12724970b9b4a708298259b171:\n      core.listing.allowBuyInListing: false\n```\n\n----------------------------------------\n\nTITLE: Generated ACL Configuration Example\nDESCRIPTION: Example of an auto-generated ACL configuration file showing the structure with NOT_MAPPED placeholders.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'NOT_MAPPED' => //resource name\n      array(\n          'B2bContingentGroup' => // controller name\n              array(\n                  'index' => 'NOT_MAPPED', // action name => privilege name\n                  [...]\n                  'detail' => 'NOT_MAPPED',\n              ),\n      ),\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Command in Bash\nDESCRIPTION: Command to create a migration file for adding the new search field to the advanced search configuration. This prepares the database migration that will make the new field searchable.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-add-more-fields-to-product-search.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/console database:create-migration --name AddNewPrefixProductNumberFieldIntoProductAdvancedSearch --plugin YourPlugin\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Agent for GitLab CI Deployment\nDESCRIPTION: This YAML snippet sets up the SSH agent for GitLab CI deployment. It adds the private key, sets up the known hosts, and configures SSH permissions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n.configureSSHAgent: &configureSSHAgent |-\n    eval $(ssh-agent -s)\n    echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add -\n    mkdir -p ~/.ssh\n    ssh-keyscan $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts\n    chmod 700 ~/.ssh\n```\n\n----------------------------------------\n\nTITLE: Trigger Reload Implementation in Twig\nDESCRIPTION: Shows how to implement panel reload triggering between multiple Ajax Panels using data attributes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"b2b--ajax-panel\" data-url=\"{{ path('frontend.b2b.b2bcontact.grid') }}\" data-id=\"grid\">\n    <!-- grid -->\n</div>\n\n<div class=\"b2b--ajax-panel\" data-url=\"{{ path('frontend.b2b.b2bcontact.edit') }}\" data-ajax-panel-trigger-reload=\"grid\">\n    <!-- form -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dumping Shopware 6 Theme in Production\nDESCRIPTION: This command dumps the theme configuration on the production system when the database is available. It's typically run after deploying new theme variables or after changes made via the admin panel.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/build-w-o-db.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/console theme:dump\n```\n\n----------------------------------------\n\nTITLE: SSH Key Generation Command\nDESCRIPTION: Command to generate a new ED25519 SSH key for deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519\n```\n\n----------------------------------------\n\nTITLE: Cancellation Response for Finalize Endpoint in JSON\nDESCRIPTION: Example of a cancellation response from the Finalize endpoint, indicating that the user did not complete the payment process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/payment-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"cancel\",\n  \"message\": \"The user did not finish payment.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation for Webhook Events Reference in YAML\nDESCRIPTION: This YAML snippet defines the navigation configuration for the Webhook Events Reference section in Shopware documentation. It sets the title, position, and aside property for the page.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnav:\n  title: Webhook Events Reference\n  position: 20\naside: false\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Selector for Popover Initialization\nDESCRIPTION: This HTML attribute selector targets elements intended to have Bootstrap popovers initialized. The new `BootstrapUtil` uses this selector with event delegation to automatically enable popovers, even on dynamically added elements.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-09-23-add-bootstrap-util.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n[data-toogle=\"popover\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Class to Load Package Configuration in Shopware 6\nDESCRIPTION: Extends the Shopware Plugin class to load package configurations from the Resources/config/packages directory. This setup is necessary to enable Monolog configuration for custom logging in the plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample;\n\nuse Shopware\\Core\\Framework\\Plugin;\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\Config\\Loader\\DelegatingLoader;\nuse Symfony\\Component\\Config\\Loader\\LoaderResolver;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\DirectoryLoader;\nuse Symfony\\Component\\DependencyInjection\\Loader\\GlobFileLoader;\nuse Symfony\\Component\\DependencyInjection\\Loader\\YamlFileLoader;\n\nclass SwagBasicExample extends Plugin\n{\n    public function build(ContainerBuilder $container): void\n    {\n        parent::build($container);\n\n        $locator = new FileLocator('Resources/config');\n\n        $resolver = new LoaderResolver([\n            new YamlFileLoader($container, $locator),\n            new GlobFileLoader($container, $locator),\n            new DirectoryLoader($container, $locator),\n        ]);\n\n        $configLoader = new DelegatingLoader($resolver);\n\n        $confDir = \\rtrim($this->getPath(), '/') . '/Resources/config';\n\n        $configLoader->load($confDir . '/{packages}/*.yaml', 'glob');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering a To-Many Association with Separate Filters in PHP\nDESCRIPTION: This PHP snippet shows an alternative way to filter products using the Shopware DAL Criteria object by adding separate `EqualsFilter` conditions directly to the criteria. Under the new join logic, this query returns products that are assigned to the category 'test-category' AND are also assigned to *any* category that is active (not necessarily the same 'test-category'). This illustrates how filter placement affects the resulting join behavior and query outcome compared to using a single `AndFilter`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-11-19-dal-join-filter.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$criteria->addFilter(\n    new EqualsFilter('product.categories.name', 'test-category')\n);\n$criteria->addFilter(\n    new EqualsFilter('product.categories.active', true)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Handler in Shopware YAML Configuration\nDESCRIPTION: Example YAML configuration that sets a custom session handler service (session.db) as the handler_id. This connects the framework's session management to the previously defined service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/session.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/redis.yml\nframework:\n    session:\n        handler_id: \"session.db\"\n```\n\n----------------------------------------\n\nTITLE: Specifying String Type with @var Annotation for Static Analysis in PHP\nDESCRIPTION: Shows how to use `@var string $foo` PHPDoc annotation to tell static analysis tools that a variable `$foo` of `mixed` type is expected to be a `string`. This annotation impacts only static analysis and offers no runtime checks, carrying the risk of hiding actual type mismatches.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/** @var string $foo */\n$foo = $bar->getFoo(); // $foo is mixed, but we expect only string\n```\n\n----------------------------------------\n\nTITLE: Setting Up Image Proxy for Production Assets\nDESCRIPTION: YAML configuration for creating an image proxy service that fetches and caches images from the production environment, useful when working with a production database copy locally.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    imageproxy:\n        image: ghcr.io/shopwarelabs/devcontainer/image-proxy\n        ports:\n          - \"8050:80\"\n        environment:\n          # Your production URL.\n          REMOTE_SERVER_HOST: shopware.com\n```\n\n----------------------------------------\n\nTITLE: Validating EnumField Input in Shopware\nDESCRIPTION: PHP code demonstrating how to check if a user-provided input is a valid enum value, using the tryFrom method and null checking.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/fields-reference/enum-field.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$validPaymentMethod = PaymentMethod::tryFrom($userProvidedInput);\n\n// Either check for null\nif (is_null($validPaymentMethod)) {\n    // The input was not a valid payment method\n}\n\n// Or check for the class\nif($validPaymentMethod instanceof PaymentMethod) {\n    // The input was a valid payment method\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Shopware Components\nDESCRIPTION: Make commands for building and watching the Shopware administration panel and storefront. These commands help during development to rebuild assets after changes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Build the administration\nmake build-admin\n\n# Build the storefront\nmake build-storefront\n\n# Start watcher for administration\nmake watch-admin\n\n# Start watcher for storefront\nmake watch-storefront\n```\n\n----------------------------------------\n\nTITLE: Referencing the New Bootstrap Utility File Path\nDESCRIPTION: This specifies the file path for the new utility module designed to handle the initialization of multiple Bootstrap plugins, starting with Tooltips and Popovers.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-09-23-add-bootstrap-util.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/utility/bootstrap/bootstrap.util\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Composer.json Configuration Example\nDESCRIPTION: Example configuration from a SwagBasicExample plugin's composer.json file showing the essential name and version fields needed to reference a plugin as a dependency.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"swag/swag-basic-example\",\n    \"description\": \"Plugin quick start plugin\",\n    \"version\": \"v1.0.0\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mercure Hub Information for Shopware Integration\nDESCRIPTION: List of required Mercure hub information to be integrated into Shopware Digital Sales Rooms configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/setup-3rd-party/realtime-service-mercure.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- *Hub url* - The hub URL.\n- *Hub public url* - The hub public URL, normally it's the same as the hub URL.\n- *Hub subscriber secret* - The JWT key used for authenticating subscribers\n- *Hub publisher secret* - The JWT key used for authenticating publishers\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Processing Logic\nDESCRIPTION: Implementation of the onProductLoaded method to process custom fields for each loaded product entity.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/fetching-data-from-entity-selection.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function onProductLoaded(EntityLoadedEvent $event): void\n{\n    // loop through all loaded product      \n    /** @var ProductEntity $productEntity */\n    foreach ($event->getEntities() as $productEntity) {\n        $customFields = $productEntity->getCustomFields();\n\n        // loop through each product's custom fields\n        foreach($customFields as $name => $value) {\n            if ($name !== 'custom_linked_product' || empty($value)) {\n                continue;\n            }\n\n           // resolve the $value here\n        }\n\n        $productEntity->setCustomFields($customFields);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Denying Entity Access in PHP\nDESCRIPTION: Example of revoking access to an entity for a specific contact.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$aclAdressRepository->deny(\n    $contact, // the contact \n    22, // the id of the address\n);\n```\n\n----------------------------------------\n\nTITLE: Extending a Shopware 6 Component in JavaScript\nDESCRIPTION: Shows how to extend an existing component (sw-text-field) to create a custom component (sw-custom-field) with a new template\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/module-component-management/customizing-components.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// import the custom twig-template file\nimport template from './sw-custom-field.html.twig';\n\n// extend the existing component `sw-text-field` by passing\n// a new component name and the new configuration\nShopware.Component.extend('sw-custom-field', 'sw-text-field', {\n    template\n});\n```\n\n----------------------------------------\n\nTITLE: Nuxt Build Command for Cloudflare Pages\nDESCRIPTION: Command to build the Nuxt project specifically for Cloudflare Pages deployment using the cloudflare_pages preset.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/best-practices/app-deployment/cloudflare.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi build --preset=cloudflare_pages\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Alias in Shopware 6\nDESCRIPTION: Creates an alias linking to the index after es:index is done. Required in older versions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console es:create:alias\n```\n\n----------------------------------------\n\nTITLE: Initiating In-App Purchase in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to allow users to initiate an In-App Purchase. It uses the inAppPurchaseCheckout store to make a purchase request with a specific identifier and extension name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/in-app-purchase/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    computed: {\n        inAppPurchaseCheckout() {\n            return Shopware.Store.get('inAppPurchaseCheckout');\n        }\n    },\n\n    methods: {\n        onClick() {\n            this.inAppPurchaseCheckout.request({ identifier: 'my-iap-identifier' }, 'MyExtensionName');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing $set and $delete Usage\nDESCRIPTION: Shows the simplification of reactive property modifications in Vue 3, eliminating the need for $set and $delete methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-migration-build.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$set(this.myObject, 'key', 'value');\nthis.$delete(this.myObject, 'key');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.myObject.key = 'value';\ndelete this.myObject.key;\n```\n\n----------------------------------------\n\nTITLE: Retrieving StockData from Product in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to fetch the StockData instance from a product using the 'stock_data' extension, allowing access to the custom stock information.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/stock/loading-stock-information-from-different-source.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$stockData = $product->getExtension('stock_data');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bundle Path in Composer\nDESCRIPTION: JSON configuration for specifying custom bundle paths in the project's composer.json file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"shopware-bundles\": {\n            \"src/MyBundle\": {}\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Symfony Flex Configuration to composer.json\nDESCRIPTION: JSON configuration to add to your composer.json file when migrating from old zip installation to the new Composer project template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"extra\": {\n    \"symfony\": {\n        \"allow-contrib\": true,\n        \"endpoint\": [\n            \"https://raw.githubusercontent.com/shopware/recipes/flex/main/index.json\",\n            \"flex://defaults\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Shopware Extension Assets with CLI\nDESCRIPTION: Command to build extension assets using Shopware CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli extension build <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming Twig Blocks with Deprecation\nDESCRIPTION: Demonstrates how to rename a Twig block while maintaining backward compatibility through nesting and proper deprecation notices.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{% block new_block_name %}\n    {% block old_block_name %}\n    {% deprecated '@deprecated tag:v6.5.0 - Use `new_block_name` instead' %}\n        <div>Content</div>\n    {% endblock %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Migrating Events API Usage\nDESCRIPTION: Demonstrates the replacement of removed events API methods ($on, $off, $once) with inject/provide pattern in Vue 3.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-migration-build.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncreated() {\n  this.$parent.$on('doSomething', this.eventHandler);\n},\n\nbeforeDestroy() {\n  this.$parent.$off('doSomething', this.eventHandler);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninject: ['registerDoSomething', 'unregisterDoSomething'],\n\ncreated() {\n  this.registerDoSomething(this.eventHandler);\n},\n\nbeforeDestroy() {\n  this.unregisterDoSomething(this.eventHandler);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Associations in Storefront Search Results using Store Facade in Twig\nDESCRIPTION: Shows how to include associated entities (like manufacturer) when searching for a storefront product using the store facade.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'ids': [ hook.productId ],\n    'associations': {\n        'manufacturer': {}\n    }\n} %}\n\n{% set product = services.store.search('product', criteria).first %}\n\n{% do page.addExtension('myProduct', product) %}\n{% do page.addExtension('myManufacturer', product.manufacturer) %}\n```\n\n----------------------------------------\n\nTITLE: Defining the Accessibility Feature Flag in Environment Variables\nDESCRIPTION: This snippet shows the environment variable `ACCESSIBILITY_TWEAKS` used as a feature flag in Shopware. Activating this flag in the `.env` file enables accessibility improvements that might introduce breaking changes, allowing developers to test and adapt their projects or extensions before these changes become default in a future major release.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/accessibility/storefront/index.md#2025-04-22_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nACCESSIBILITY_TWEAKS\n```\n\n----------------------------------------\n\nTITLE: Cart Enrichment Sequence\nDESCRIPTION: Mermaid sequence diagram showing the enrichment process flow between different collectors including product, promotions, and discount collection.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/checkout-concept/cart.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Enrichment\n---\nsequenceDiagram\nEnrichment->>Enrichment : \nbox\n    participant Enrichment\n    participant ProductCartProcessor\n    participant CartPromotionsCollector\n    participant CartDiscountCollector\n    end\n    Note over Enrichment,CartDiscountCollector: Collect\n    Enrichment->>ProductCartProcessor: collect\n    Enrichment->>CartPromotionsCollector: collect\n    Enrichment->>CartDiscountCollector: collect\n    Note over Enrichment,CartDiscountCollector: Enrichment\n    Enrichment->>ProductCartProcessor: enrich\n    Enrichment->>CartPromotionsCollector: enrich\n    Enrichment->>CartDiscountCollector: enrich\n    Enrichment->>Enrichment : \n```\n\n----------------------------------------\n\nTITLE: Configuring Devenv with FriendsOfShopware packages for Shopware CLI\nDESCRIPTION: YAML configuration to update devenv.yaml with FriendsOfShopware repository as a new input source for Nix packages.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: github:NixOS/nixpkgs/nixpkgs-unstable\n  froshpkgs:\n    url: github:FriendsOfShopware/nur-packages\n    inputs:\n      nixpkgs:\n        follows: \"nixpkgs\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Tax Provider Return Structure in Shopware (PHP)\nDESCRIPTION: Defines the `TaxProviderStruct` class in PHP, which extends the base `Struct`. This class serves as the data transfer object returned by implementations of `TaxProviderInterface::provideTax`. It contains nullable arrays to hold calculated tax collections for line items (`lineItemTaxes`, keyed by line item ID) and deliveries (`deliveryTaxes`, keyed by delivery ID), as well as a nullable collection for the overall cart price taxes (`cartPriceTaxes`). If any of these properties are filled by a provider, subsequent providers are not called, and the provided taxes overwrite the existing ones in the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-04-28-tax-providers.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass TaxProviderStruct extends Struct \n{\n    /**\n     * @param null|array<string, CalculatedTaxCollection> key is line item id\n     */\n    protected ?array $lineItemTaxes = null;\n\n    /**\n     * @param null|array<string, CalculatedTaxCollection> key is delivery id\n     */\n    protected ?array $deliveryTaxes = null;\n\n    protected ?CalculatedTaxCollection $cartPriceTaxes = null;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Project for Shopware App\nDESCRIPTION: Uses Symfony CLI to create a new project for the Shopware app and installs the Shopware App Bundle.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsymfony new translator-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require shopware/app-bundle\n```\n\n----------------------------------------\n\nTITLE: Building Shopware Storefront in Production\nDESCRIPTION: Shell script command to build the storefront in a production environment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-storefront.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Available Bundle Names in Shopware 6\nDESCRIPTION: Command to list all available bundle names in JSON format using the debug:container command.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/commercial/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console debug:container --parameter kernel.bundles --format=json\n```\n\n----------------------------------------\n\nTITLE: Integrating B2B Components into a Shopware Plugin using Dependency Injection (PHP)\nDESCRIPTION: Demonstrates how to enable a B2B component (specifically the Contact component) within a custom Shopware plugin using the `B2BContainerBuilder`. The example shows overriding the `build` method of a plugin class (`MyB2bPlugin`). Inside `build`, it instantiates `B2BContainerBuilder`, adds the desired B2B component's configuration (`ContactFrameworkConfiguration`), and then uses `registerConfigurations` to integrate these services into the main Symfony container provided by Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/dependency-injection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace MyB2bPlugin;\n\nuse Shopware\\B2B\\Common\\B2BContainerBuilder;\nuse Shopware\\B2B\\Contact\\Framework\\DependencyInjection\\ContactFrameworkConfiguration\nuse Shopware\\Components\\Plugin;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\nclass MyB2bPlugin extends Plugin\n{\n    [...]\n\n    public function build(ContainerBuilder $container)\n    {\n        $containerBuilder = B2BContainerBuilder::create();\n        $containerBuilder->addConfiguration(new ContactFrameworkConfiguration());\n        $containerBuilder->registerConfigurations($container);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Configuration\nDESCRIPTION: Initial GitLab CI/CD pipeline configuration with variables setup.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n    GIT_STRATEGY: clone\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware CLI from AUR on Arch Linux\nDESCRIPTION: Command to install the Shopware CLI from the Arch User Repository using yay helper.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyay -S shopware-cli-bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Action Requirements for Specific Events\nDESCRIPTION: This PHP snippet shows how to make the action available only for specific event types by specifying awareness interfaces in the requirements array. This example makes the action available only for Order and Customer events.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/flow/add-flow-builder-action.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    // <plugin root>/src/Core/Content/Flow/Dispatching/Action/CreateTagAction.php\n    ...\n\n    public function requirements(): array\n    {\n        return [OrderAware::class, CustomerAware::class];\n    }\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Markdown File Naming Convention for Documentation Assets (Markdown)\nDESCRIPTION: This snippet provides an example of the standard naming pattern for Markdown files added as documentation assets. Each file should use a two-digit number prefix followed by a hyphen and meaningful image name, ending with the .md extension. This convention aids asset ordering and discoverability. The expected result is a filename like 01-doc-process.md, with inputs being a numeric index and a descriptive name.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/05-methodize-assets.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n01-doc-process.md\n```\n\n----------------------------------------\n\nTITLE: HTML Selector for Tooltip Initialization\nDESCRIPTION: This HTML attribute selector targets elements intended to have Bootstrap tooltips initialized. The new `BootstrapUtil` uses this selector with event delegation to automatically enable tooltips, even on dynamically added elements.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-09-23-add-bootstrap-util.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n[data-toogle=\"tooltip\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Required Properties to Components\nDESCRIPTION: Shows how to indicate that a property will become required in a future version by displaying a warning when the property is not provided.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    createdComponent() {\n        /** @deprecated tag:v6.5.0 - Warning will be removed when prop is required */\n        if (!this.newProp) {\n            debug.warn(\n                'sw-example-component',\n                '\"newProp\" will be required in tag:v6.5.0'\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring String Type in PHPUnit Tests with assertIsString\nDESCRIPTION: Shows how to use `static::assertIsString()` in PHPUnit tests to verify that a variable `$foo` (potentially `mixed`) is a string. The test fails if the variable is not a string, ensuring type correctness within the test environment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is mixed, but we expect only string\n\nstatic::assertIsString($foo);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Formatting Example in Markdown - Markdown\nDESCRIPTION: This example snippet illustrates the recommended format for individual changelog entries in markdown files. Entries must start with a keyword (e.g., 'Changed') and provide a clear, technical summary including file paths or method names. No dependencies besides markdown syntax are required. Properly formatted entries improve traceability; avoid ambiguous terms like 'Fixed'. Input should be a descriptive markdown list item, output is consistent documentation. Limitation: only use approved keywords.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-03-implement-new-changelog.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n*  Changed method `registerCmsElement()` in `module/sw-cms/service/cms.service.js` to fix the mapping of the element data.\n```\n\n----------------------------------------\n\nTITLE: Defining BundleDefinition for Shopware Entity Structure\nDESCRIPTION: Entity definition class that specifies the structure and fields for the bundle entity in Shopware 6. It defines required fields, associations with other entities, and translation capabilities. This definition is used by the converter to understand the target data structure.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BundleExample\\Core\\Content\\Bundle;\n\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityDefinition;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Required;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\FloatField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\IdField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\ManyToManyAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\StringField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\TranslatedField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Field\\TranslationsAssociationField;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldCollection;\nuse Swag\\BundleExample\\Core\\Content\\Bundle\\Aggregate\\BundleProduct\\BundleProductDefinition;\nuse Swag\\BundleExample\\Core\\Content\\Bundle\\Aggregate\\BundleTranslation\\BundleTranslationDefinition;\n\nclass BundleDefinition extends EntityDefinition\n{\n    public function getEntityName(): string\n    {\n        return 'swag_bundle';\n    }\n\n    public function getEntityClass(): string\n    {\n        return BundleEntity::class;\n    }\n\n    public function getCollectionClass(): string\n    {\n        return BundleCollection::class;\n    }\n\n    protected function defineFields(): FieldCollection\n    {\n        return new FieldCollection([\n            (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n            new TranslatedField('name'),\n            (new StringField('discount_type', 'discountType'))->addFlags(new Required()),\n            (new FloatField('discount', 'discount'))->addFlags(new Required()),\n            new TranslationsAssociationField(BundleTranslationDefinition::class, 'swag_bundle_id'),\n            new ManyToManyAssociationField('products', ProductDefinition::class, BundleProductDefinition::class, 'bundle_id', 'product_id'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Metadata for Sales Agent Page (YAML)\nDESCRIPTION: This YAML frontmatter block defines metadata used for navigation within a documentation system (likely VuePress or similar). It specifies the title 'Sales Agent' to be displayed in the navigation and sets its display order or position to 10.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnav:\n  title: Sales Agent\n  position: 10\n\n---\n```\n\n----------------------------------------\n\nTITLE: Experimental Twig Upgrade using LLMs\nDESCRIPTION: Command to use the experimental Twig upgrade feature which utilizes Large Language Models to upgrade Twig templates.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/ext ghcr.io/shopwarelabs/extension-verifier:latest twig-upgrade /ext 6.6.0.0 6.7.0.0-rc1 --provider gemini --model gemini-2.5-pro-exp-03-25\n```\n\n----------------------------------------\n\nTITLE: Displaying B2B Trigger Interfaces Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing B2B trigger interfaces in Shopware, including the interface name and provided data.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/flow-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Provided   |\n|:--------------|:-----------|\n| EmployeeAware | employeeId |\n```\n\n----------------------------------------\n\nTITLE: Disabled Input Field in Plugin Configuration\nDESCRIPTION: Demonstrates how to create a disabled input field in the plugin configuration by adding the disabled element with a boolean value.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input-field>\n    <name>email</name>\n    <disabled>true</disabled>\n</input-field>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default CMS Page for Categories (Shopware, Markdown/PHP Reference)\nDESCRIPTION: This snippet documents the system configuration key used to set the default CMS page for categories of type product_list. If a category's cmsPageId is null and the type matches, this config value will be used as the fallback. It requires the constant \\Shopware\\Core\\Content\\Category\\CategoryDefinition::CONFIG_KEY_DEFAULT_CMS_PAGE_CATEGORY to be defined. The expected value is the CMS page ID, and the category entity must lack a directly assigned cmsPageId.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-04-06-add-default-cms-layouts-to-products-and-categories.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n\\Shopware\\Core\\Content\\Category\\CategoryDefinition::CONFIG_KEY_DEFAULT_CMS_PAGE_CATEGORY\n```\n\n----------------------------------------\n\nTITLE: Manipulating Product Prices in the Cart\nDESCRIPTION: Example showing how to access and modify the price of a product that is already in the shopping cart. Demonstrates methods for changing prices, applying discounts, and adding surcharges.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-01-app-script-product-pricing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n{# manipulate price of a product inside the cart #}\n{% set product = services.cart.get('my-product-id') %}\n\n{% set price = services.prices.create({\n   'default': { 'gross': 20, 'net': 20 }\n}) %}\n\n{% do product.price.change(price) %}\n\n{% do product.price.discount(10) %}\n{% do product.price.surcharge(10) %}\n```\n\n----------------------------------------\n\nTITLE: Indicating Feature-Flagged Deprecation in Shopware (PHP)\nDESCRIPTION: This PHP annotation snippet shows how to use @feature-deprecated for code that is obsolete but still hidden behind a feature flag during development. The annotation should specify the related feature flag (e.g., FEATURE_NEXT_11111). Upon feature release, this should be converted to a standard @deprecated annotation. This pattern prevents deprecation warnings for non-public, feature-gated code prior to the public release.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @feature-deprecated (flag:FEATURE_NEXT_11111)\n */\n```\n\n----------------------------------------\n\nTITLE: Leaving Loading State in JavaScript\nDESCRIPTION: JavaScript function to send a message to the parent window indicating that the app module has finished loading, which removes the loading spinner.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-modules.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sendReadyState() {\n    window.parent.postMessage('sw-app-loaded', '*');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Custom Local Reader as a Service in XML\nDESCRIPTION: This XML snippet defines a service for the `LocalBundleReader` class within the Shopware dependency injection container. It specifies that the service inherits configuration from the parent `AbstractReader` service and tags it with `shopware.migration.reader`, making it discoverable by the Shopware Migration Assistant framework.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"SwagMigrationBundleExample\\Profile\\Shopware\\Gateway\\Local\\Reader\\LocalBundleReader\"\n         parent=\"SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local\\Reader\\AbstractReader\">\n    <tag name=\"shopware.migration.reader\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: File Structure for Shopware Rate Limiter Configuration\nDESCRIPTION: Shows the directory structure for locating the shopware.yml configuration file where rate limiter settings are defined.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/rate-limiter.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<shop root>\n└── config\n   └── packages\n      └── shopware.yml\n```\n\n----------------------------------------\n\nTITLE: Validating a Shopware Extension with CLI\nDESCRIPTION: Command for validating a Shopware extension using the shopware-cli tool. The path parameter can be absolute or relative to either the directory containing the extension or the zip file.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/validation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli extension validate <path>\n```\n\n----------------------------------------\n\nTITLE: Registering Template Hierarchy Builder Service in Symfony XML\nDESCRIPTION: XML configuration to register a TemplateNamespaceHierarchyBuilder service with Shopware's template system. Sets priority to 750 for template hierarchy resolution.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/how-to-extend-the-storefront.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service id=\"MyPlugin\\Framework\\Adapter\\Twig\\NamespaceHierarchy\\TemplateNamespaceHierarchyBuilder\">\n            <tag name=\"shopware.twig.hierarchy_builder\" priority=\"750\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductDataSet for Shopware Migration\nDESCRIPTION: This PHP class extends the DataSet class to create a custom ProductDataSet. It defines the entity identifier and specifies support for the OwnProfile.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\DataSet;\n\nuse SwagMigrationAssistant\\Migration\\DataSelection\\DataSet\\DataSet;\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\nuse SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\OwnProfile;\n\nclass ProductDataSet extends DataSet\n{\n    /**\n     * Returns the entity identifier of this DataSet\n     */\n    public static function getEntity(): string\n    {\n        return 'product';\n    }\n\n    /**\n     * Supports only an OwnProfile\n     */\n    public function supports(MigrationContextInterface $migrationContext): bool\n    {\n        return $migrationContext->getProfile() instanceof OwnProfile;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Mail Variable Updates in Shopware\nDESCRIPTION: Configuration to prevent Shopware from writing example mail data into the database when sending mail, which reduces database load.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/shopware.yaml\nshopware:\n    mail:\n        update_mail_variables_on_send: false\n```\n\n----------------------------------------\n\nTITLE: Registering Feature Flags during Framework Boot in PHP\nDESCRIPTION: Initialization of feature flags during the Framework boot process by calling the register method on the FeatureFlagRegistry service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-11-29-toggle-feature-flag-on-demand.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Framework extends Bundle\n    public function boot(): void\n    {\n        ...\n        $featureFlagRegistry = $this->container->get(FeatureFlagRegistry::class);\n        $featureFlagRegistry->register();\n    }\n```\n\n----------------------------------------\n\nTITLE: Template for Architecture Decision Records - Markdown - English\nDESCRIPTION: This Markdown snippet provides a templated structure for writing an Architecture Decision Record (ADR) in the Shopware platform. Dependencies include support for Markdown formatting and adherence to the ADR workflow described in the repository. The template defines the required headings (date, title, context, decision, and consequences) that ensure each ADR is consistently formatted and easy to understand. Inputs are the ADR content, while the output is a well-structured documentation file; no code execution is involved.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-06-25-implement-architecture-decision-records.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# [Date] - [Title]\n## Context\n## Decision\n## Consequences\n\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Files Using Shopware Console Command - Bash\nDESCRIPTION: This code snippet demonstrates how to use the Shopware CLI tool to create a new changelog markdown file. It invokes the 'changelog:create' command, optionally passing a title and additional options. Dependencies include the Shopware installation and appropriate command-line access. Inputs are the title of the changelog and any options specified; the output is a file in the changelog directory, following the naming convention. Use '--help' to see all options.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-03-implement-new-changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console changelog:create [<title>] [options]\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress E2E Test Runner for Shopware\nDESCRIPTION: This command opens the Cypress E2E test runner interface for Shopware testing.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run e2e:open\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware App SDK via Composer\nDESCRIPTION: Command to install the Shopware APP SDK using Composer. This will automatically install the required HTTP client if it's missing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/php/01-getting_started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require shopware/app-php-sdk\n```\n\n----------------------------------------\n\nTITLE: Exposing Cart Functionality via Store API Routes in PHP\nDESCRIPTION: Requirement for exposing shopping cart features. All cart-related functions must be mapped through corresponding Store API routes located within the `Shopware\\Core\\Checkout\\Cart\\SalesChannel` namespace to ensure proper API integration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/cart-process.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nShopware\\Core\\Checkout\\Cart\\SalesChannel\n```\n\n----------------------------------------\n\nTITLE: Illustrating Suboptimal HTML Structure in Twig\nDESCRIPTION: This Twig snippet provides an example of a list implemented using `div` elements instead of semantic list tags (`ul`, `li`). This structure is presented as suboptimal from an accessibility standpoint and serves as the 'before' state in an example demonstrating how Shopware introduces accessibility improvements.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/accessibility/storefront/index.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar-list\">\n    {% block component_list_items %}\n        <div class=\"list-item\"><a href=\"#\">Item</a></div>\n        <div class=\"list-item\"><a href=\"#\">Item</a></div>\n        <div class=\"list-item\"><a href=\"#\">Item</a></div>\n    {% endblock %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Shopware Shops\nDESCRIPTION: Command to display all accessible shops in Shopware Account to verify access permissions.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/configure-composer-repository.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account merchant shop list\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB on macOS\nDESCRIPTION: Homebrew command to install MariaDB on macOS. This command provides an easy way to set up MariaDB for Shopware 6 on macOS systems.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install mariadb\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Service in Symfony Container\nDESCRIPTION: XML configuration for registering a custom field service with the custom_field_set.repository dependency injected. This defines the service container configuration needed to work with custom fields in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\CustomFieldClass\">\n          <argument type=\"service\" id=\"custom_field_set.repository\"/>\n          ...\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Migration in PHP\nDESCRIPTION: Migration class that creates the translation table with necessary columns including foreign keys to the main entity and language table.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-translations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\n\nclass Migration1612863838ExampleTranslation extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1612863838;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $query = <<<SQL\nCREATE TABLE IF NOT EXISTS `swag_example_translation` (\n    `swag_example_id` BINARY(16) NOT NULL,\n    `language_id` BINARY(16) NOT NULL,\n    `name` VARCHAR(255),\n    `created_at` DATETIME(3) NOT NULL,\n    `updated_at` DATETIME(3) NULL,\n    PRIMARY KEY (`swag_example_id`, `language_id`),\n    CONSTRAINT `fk.swag_example_translation.swag_example_id` FOREIGN KEY (`swag_example_id`)\n        REFERENCES `swag_example` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n    CONSTRAINT `fk.swag_example_translation.language_id` FOREIGN KEY (`language_id`)\n        REFERENCES `language` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\n    ENGINE = InnoDB\n    DEFAULT CHARSET = utf8mb4\n    COLLATE = utf8mb4_unicode_ci;\nSQL;\n        $connection->executeStatement($query);\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Structure for Plugin Configuration\nDESCRIPTION: Shows the required directory structure for adding plugin configuration, with the config.xml file placed in the Resources/config directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/add-plugin-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── plugins\n    └── SwagBasicExample\n        ├── src\n        │   ├── Resources\n        │   │   └── config\n        │   │       └── config.xml \n        │   └── SwagBasicExample.php\n        └── composer.json\n```\n\n----------------------------------------\n\nTITLE: Completely Resetting Elasticsearch and Reindexing in Shopware 6\nDESCRIPTION: A series of commands to completely reset Elasticsearch, clear cache, and reindex in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'elasticsearch:9200/_all'\nbin/console cache:clear\nbin/console es:index\nbin/console messenger:consume -vv\n```\n\n----------------------------------------\n\nTITLE: OS X Database Configuration YAML\nDESCRIPTION: YAML configuration template for customizing database settings in OS X environment.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmac:\n    paths:\n      - \"dev-ops/mac/actions\"\n    const:\n      DB_USER: \"USERNAME\"\n      DB_PASSWORD: \"PASSWORD\"\n      DB_HOST: \"DB_HOST\"\n      SW_HOST: \"SWHost\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Extension Store Page Updates with Shopware CLI\nDESCRIPTION: Command to upload images and metadata to the Extension Store page after making local changes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/updating-store-page.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account producer extension info push <path-to-extension-folder>\n```\n\n----------------------------------------\n\nTITLE: Generating Cache Key in Cached Base Context Factory (PHP)\nDESCRIPTION: Illustrates part of the `create` method in `CachedBaseContextFactory`. It constructs a cache key by first filtering the input `options` array to include only keys relevant to the base context (like currency, language, payment/shipping method IDs, country, state). These relevant options are sorted by key, JSON encoded, and then hashed using md5 to create a unique identifier for caching the `BaseContext` based on these specific parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-base-context-factory.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\System\\SalesChannel\\Context;\n\nclass CachedBaseContextFactory extends AbstractBaseContextFactory\n{\n    public function create(string $salesChannelId, array $options = []): BaseContext\n    {\n        ksort($options);\n\n        $keys = \\array_intersect_key($options, [\n            SalesChannelContextService::CURRENCY_ID => true,\n            SalesChannelContextService::LANGUAGE_ID => true,\n            SalesChannelContextService::DOMAIN_ID => true,\n            SalesChannelContextService::PAYMENT_METHOD_ID => true,\n            SalesChannelContextService::SHIPPING_METHOD_ID => true,\n            SalesChannelContextService::VERSION_ID => true,\n            SalesChannelContextService::COUNTRY_ID => true,\n            SalesChannelContextService::COUNTRY_STATE_ID => true,\n        ]);\n\n        $key = implode('-', [$name, md5(json_encode($keys, \\JSON_THROW_ON_ERROR))]);\n        \n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Composer Auth Variable in Shopware PaaS - Bash\nDESCRIPTION: Stores a Composer authentication token securely as a PaaS environment variable for Shopware projects via the CLI. Dependency: Shopware PaaS CLI. Replaces the need to commit an `auth.json` to the codebase. The JSON token must be replaced with an actual value, for example, from the Shopware Account portal. Parameters set variable name, visibility, sensitivity, and content, and the variable will be automatically picked up by Composer during build steps.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/build-deploy.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware variable:create --level project --name env:COMPOSER_AUTH --json true --visible-runtime false --sensitive true --visible-build true --value '{\"bearer\": {\"packages.shopware.com\": \"%place your key here%\"}}'\n```\n\n----------------------------------------\n\nTITLE: Formatting Placeholders in Markdown Documentation - Markdown\nDESCRIPTION: This snippet demonstrates how to represent placeholders in inline code within markdown, specifying that placeholders should be wrapped in both backticks and asterisks for emphasis and clarity. No external dependencies are required. The input is a markdown-formatted line showing the placeholder, and the output is formatted Markdown text suitable for documentation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/02-code.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(*`PLACEHOLDER_NAME`*)\n```\n\n----------------------------------------\n\nTITLE: Documenting Context Rules and Rule Systems Constraints in Shopware Documentation (Markdown)\nDESCRIPTION: This Markdown snippet provides detailed documentation for Shopware’s context rules and rule systems. It enumerates constraints and requirements for business logic validation, such as prohibiting direct database queries in rules and specifying scope class support. Intended for documentation consumption, it should be placed under the relevant section heading; it uses Markdown lists and headings for structured presentation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/context-rules-rule-systems.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Context Rules and Rule Systems\n\n* In a rule, there must never be a query against the database because all configured rules are validated in a request.\n* Rules that check for the cart must always support the `\\Shopware\\Core\\Checkout\\Cart\\Rule\\CartRuleScope` class and the `\\Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemScopeclass`.\n* Rules may only access data provided in the appropriate scopes.\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Nuxt Project in Production Mode (bash)\nDESCRIPTION: This snippet demonstrates how to build and start the Nuxt project in production mode using the package manager through the command line. It requires a compatible Node.js and package management environment (pnpm). The key commands are 'pnpm run build' for compiling the production build, and 'pnpm run start' for launching the already built project. Inputs: none required; simply run in the project root. Output: The project will build and start, listening for production traffic. Ensure all environment variables and storage adapter configurations are set before running.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Checking Commercial License Information in Shopware 6\nDESCRIPTION: Command to display current license key status, including whether it's set and its expiration date.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/commercial/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console commercial:license:info\n```\n\n----------------------------------------\n\nTITLE: Defining MetricInterface in PHP for Shopware 6 Telemetry\nDESCRIPTION: This empty interface provides flexibility for different monitoring tools to define their own metric structures alongside the core ones in Shopware 6.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-30-add-telemetry-abstraction-layer.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface MetricInterface\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Syntax in Shopware App Scripts: Type Casting\nDESCRIPTION: Demonstrates type casting using filters like 'intval' in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% if '5'|intval === 5 %}\n    {# always evaluates to true #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Binding Error Properties in Vue Template\nDESCRIPTION: This HTML snippet shows how to bind the computed error properties to a form field in a Vue template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-error-handling.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <sw-field ... :error=\"propertyError\"></sw-field>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Validating Method Parameter with Constants - PHP (Pre-PHP 8.1)\nDESCRIPTION: Shows how constant string values and in_array validation were used to represent and check allowed methods before native enums. The product method throws an exception if the method argument doesn't match allowed constants, and dispatches behavior using a match statement. Verbose and error-prone, especially as the set of allowed values Grows.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass Indexer\n{\n    public const PARTIAL = 'partial';\n    public const FULL = 'full';\n\n    public function product(int $id, string $method): void\n    {\n        if (!in_array($method, [self::PARTIAL, self::FULL], true)) {\n            throw new \\InvalidArgumentException();\n        }\n    \n        match ($method) {\n            self::PARTIAL => $this->partial($id),\n            self::FULL => $this->full($id)\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Invalid Shop URL in App Registration (JSON)\nDESCRIPTION: This snippet shows the JSON response structure when the shop URL provided during app registration is invalid. It includes an error message indicating the issue.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"The shop URL is invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Data Sets as Deprecated with Warning Messages\nDESCRIPTION: Demonstrates how to publish a data set with deprecation flags, including the boolean deprecated property and a deprecationMessage to guide users on alternative approaches.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-16-deprecating-sdk-public-api.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncreatedComponent() {\n    /* @deprecated tag:v6.7.0 - Will be removed, use API instead */ \n    Shopware.ExtensionAPI.publishData({\n        id: 'sw-dashboard-detail__todayOrderData',\n        path: 'todayOrderData',\n        scope: this,\n        deprecated: true,\n        deprecationMessage: 'No replacement available, use API instead.'\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Defining ScalarValuesAware Interface in PHP\nDESCRIPTION: A new generic interface that can be implemented by events to store simple scalar values which should be stored and restored one-to-one. It defines a STORE_VALUES constant and requires implementation of a getValues method that returns an array of scalar values.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-02-flow-storer-with-scalar-values.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface ScalarValuesAware\n{\n    public const STORE_VALUES = 'scalar_values';\n    \n    /** @return array<string, scalar|null|array> */\n    public function getValues(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Prefix for Custom Entities in Shopware\nDESCRIPTION: Illustrates the use of the 'ce_' shorthand prefix for custom entities to prevent issues with database name length restrictions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/custom-data/custom-entities.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<entities xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/System/CustomEntity/Xml/entity-1.0.xsd\">\n    <entity name=\"ce_bundle\">\n        <fields>\n            ...\n        </fields>\n    </entity>\n</entities>\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Associations Allow-List Example in JSON\nDESCRIPTION: Demonstrates how to specify many-to-many associations in the allow-list using the association name rather than property name. This example shows how to include product-to-category and product-to-tag associations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-08-03-collecting-entity-data.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"product\": [\n        \"categories\",\n        \"tags\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Attribute Alignment in Vue Templates - HTML\nDESCRIPTION: Illustrates the enforced attribute alignment style in Vue templates, where each attribute is placed on its own line if multiple attributes are present. This convention is enforced via ESLint for readability and maintainability. The input is a single-line HTML element with multiple attributes, and the output is an element with attributes broken across individual lines; this affects both standard elements and custom Vue components.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-05-28-introduce-eslint-on-vue-admin.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- before -->\\n    …\\n    <div v-for=\\\"strategy in strategies\\\" class=\\\"sw-app-app-url-changed-modal__content-choices\\\">\\n    …\\n    <sw-icon small color=\\\"#189eff\\\" name=\\\"default-basic-shape-circle-filled\\\"></sw-icon>\\n    …\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- now -->\\n    …\\n    <div\\n        v-for=\\\"strategy in strategies\\\"\\n        class=\\\"sw-app-app-url-changed-modal__content-choices\\\"\\n    >\\n    …\\n    <sw-icon\\n        small\\n        color=\\\"#189eff\\\"\\n        name=\\\"default-basic-shape-circle-filled\\\"\\n    />\\n    …\n```\n\n----------------------------------------\n\nTITLE: Initializing Context Resolution in Shopware App SDK\nDESCRIPTION: Demonstrates basic usage of the ContextResolver to handle both browser-based requests (like iframes) and API requests (like webhooks and action buttons).\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/03-context.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppServer } from '@shopware-ag/app-server-sdk'\n\nconst app = new AppServer(/** ... */);\n\n// Resolve the context from the request like iframe\napp.contextResolver.fromBrowser(/** Request */);\n\n// Resolve the context from the request like webhook, action button\napp.contextResolver.fromAPI(/** Request */);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware Extension with YAML\nDESCRIPTION: Example configuration file showing the structure and available options for Shopware extension setup. Includes build settings, changelog configuration, store settings, and validation rules.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  extraBundles:\n    - path: src/Foo\n    - name: OverrideName\n      path: src/Override\n  shopwareVersionConstraint: '~6.6.0'\n  zip:\n    assets:\n      enabled: false\n      before_hooks: []\n      after_hooks: []\n      disable_sass: false\n      enable_es_build_for_admin: false\n      enable_es_build_for_storefront: false\n      npm_strict: false\n\nchangelog:\n  enabled: true\n\nstore:\n  automatic_bugfix_version_compatibility: true\n  # ...\n\nvalidation:\n  ignore:\n    - 'xx'\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flag in Storefront Template (Twig)\nDESCRIPTION: Shows how to use the `feature()` Twig function in Shopware Storefront templates to conditionally render content based on whether a feature flag ('v6.5.0.0') is active.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% if feature('v6.5.0.0') %}\n    <span>Feature is active</span>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Delete Context Configuration\nDESCRIPTION: Example configuration for one-to-many relationship delete context in rule assignments.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteContext: {\n    type: 'one-to-many',\n    entity: 'cms_block',\n    column: 'extensions.swagCmsExtensionsBlockRule.visibilityRuleId',\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Symfony Secrets\nDESCRIPTION: Configuration to disable Symfony Secrets functionality to save CPU cycles during application boot.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n  secrets:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Listing Allowed HTML Tags in Shopware App Descriptions - Markdown\nDESCRIPTION: This snippet lists the set of HTML tags permitted in Shopware app descriptions. It is provided as a fenced markdown code block within the documentation. Developers should ensure that only these tags are used in their description content to comply with Shopware editorial review rules. No dependencies are required; the snippet acts as guidance for allowed HTML formatting.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-plugins/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a> <p> <br> <b> <strong> <i> <ul> <ol> <li> <h2> <h3> <h4> <h5>\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts in composer.json for Symfony Flex\nDESCRIPTION: JSON configuration to replace existing scripts in composer.json when migrating to the new Composer project template.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"auto-scripts\": [],\n    \"post-install-cmd\": [\n        \"@auto-scripts\"\n    ],\n    \"post-update-cmd\": [\n        \"@auto-scripts\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Require Block Example - XML\nDESCRIPTION: Illustrates an invalid composer.json 'require' block using XML formatting, cited in error reports when dependencies are incorrectly specified. Though not an exact composer.json (JSON) snippet, it's presented as formatted XML within the documentation for clarification. Key 'require' fields such as 'shopware/core' and 'shopware/storefront' are wildcarded (*) to indicate any version, leading to instability in dependency resolution. These settings can inadvertently allow incompatible or early access Shopware versions. The snippet is for documentation reference only and shouldn't be used directly in a real composer.json file.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-plugins/index.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<pre>\\\"require\\\": {\\n\\n    \\\"shopware/core\\\": \\\"*\\\",\\n\\n    \\\"shopware/storefront\\\": \\\"*\\\"\\n\\n},</pre>\n```\n\n----------------------------------------\n\nTITLE: Stable Version Composer Require and Minimum Stability Example - XML\nDESCRIPTION: Provides a corrected composer.json configuration block (shown as XML in the docs) for targeting a minimum Shopware version and setting required stability. Key fields are 'require' for both 'shopware/core' and 'shopware/storefront', now using '~6.1.0' to ensure compatible versions, and 'minimum-stability' set to 'RC' to specify accepted pre-release versions. This configuration, included in composer.json, ensures at least Shopware 6.1 is used and prevents installation of unsuitable early access versions. Although formatted in XML for readability, this structure should be reflected in a valid JSON composer.json.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-plugins/index.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<pre>\\\"require\\\": {\\n\\n    \\\"shopware/core\\\": \\\"~6.1.0\\\",\\n\\n    \\\"shopware/storefront\\\": \\\"~6.1.0\\\"\\n\\n},\\n\\n\\\"minimum-stability\\\": \\\"RC\\\"</pre>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm - Shell\nDESCRIPTION: This shell command uses pnpm to install Node.js project dependencies from 'package.json', ensuring that the lockfile is honored and offline cache is preferred. Requires 'pnpm' to be installed globally and access to the project directory. Key parameters include '--frozen-lockfile' for deterministic installs and '--prefer-offline' for speed. Output: node_modules populated, errors if lockfile differs.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install --frozen-lockfile --prefer-offline\n```\n\n----------------------------------------\n\nTITLE: Defining and Overriding Includes with Blocks in Twig - Twig\nDESCRIPTION: Demonstrates how to define a block around a template include in base.html.twig, which can then be overridden in document-type-specific Twig templates like invoice.html.twig. This approach allows selective replacement of included templates through block overriding and sw_include, but requires careful block management to avoid inheritance conflicts. Dependencies include Shopware's sw_include implementation and the existence of referenced template paths; expected inputs are proper Twig file structure and output is the rendered section of the document.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-12-document-template-refactoring.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% block include_header %}\n    {% sw_include '@Framework/documents/header.html.twig' %}\n{% endblock %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends '@Framework/documents/base.html.twig' %}\n\n{% block include_header %}\n    {% sw_include '@Framework/documents/invoice_header.html.twig' %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Building Storefront JavaScript Dependencies with Composer\nDESCRIPTION: Command to install and build all JavaScript dependencies for the Shopware storefront using Composer. This should be executed before running the tests.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-storefront.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> composer run build:js:storefront\n```\n\n----------------------------------------\n\nTITLE: Flagging Major Deprecated Features with PHP Annotations\nDESCRIPTION: This snippet illustrates the use of @major-deprecated to mark breaking changes or obsolete functionality that must remain behind a major feature flag until the next major Shopware release. The annotation references the designated feature flag (e.g., FEATURE_NEXT_22222) to ensure proper tracking and cleanup when the major release occurs. This helps maintain API stability while preparing for significant structural changes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @major-deprecated (flag:FEATURE_NEXT_22222)\n */\n```\n\n----------------------------------------\n\nTITLE: Interacting with Shopware Admin API\nDESCRIPTION: Commands to obtain JWT tokens and make API requests using Shopware CLI, simplifying the process of authenticating and interacting with the Shopware API.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/helper-commands.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project admin-api --output-token\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project admin-api GET /_info/version\n```\n\n----------------------------------------\n\nTITLE: Selecting Button Elements in Cypress Tests\nDESCRIPTION: Demonstrates the recommended practice for selecting elements in Cypress E2E tests using `cy.get()`. It advises against using framework-specific selectors (like `.btn.btn-primary` from Bootstrap) and promotes using more specific, application-level classes (like `.btn-buy`) for better stability and maintainability, especially if styling changes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/e2e-best-practises.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ✗ Avoid using framework specific syntax from Bootstrap as a selector.\ncy.get('.btn.btn-primary').click();\n\n// ✓ Instead, you should use a shopware specific class like `.btn-buy`.\n// (This also remains stable when the button variant is changed to, e.g., `.btn-secondary`.)\ncy.get('.btn-buy').click();\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Virtual Host with Custom Domain and Port\nDESCRIPTION: Nix configuration for setting up Caddy with a custom domain and port for Shopware development.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.caddy.virtualHosts.\"http://shopware.swag:8029\" = {\n    extraConfig = ''\n      root * public\n      php_fastcgi unix/${config.languages.php.fpm.pools.web.socket}\n      file_server\n    '';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Remote Command via Shopware CLI\nDESCRIPTION: Demonstrates how to execute a command (`bin/console theme:dump`) on the application container using the Shopware CLI's SSH functionality. The `-A app` argument specifies the target application name, which corresponds to the `name` property defined in `applications.yaml`.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/setup-template.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware ssh -A app 'bin/console theme:dump'\n```\n\n----------------------------------------\n\nTITLE: Text-Hero Block with Image Element Example\nDESCRIPTION: Shows how the same block type can contain different element types, demonstrating the flexibility of Shopware's CMS. This example shows an image element within a text-hero block.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/content/shopping-experiences-cms.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nblock: {\n    type: \"text-hero\",\n    slots: [{\n        type: \"image\",\n        slot: \"content\",\n        config: {\n            media: {\n                source: \"static\",\n                value: \"ebc314b11cb74c2080f6f27f005e9c1d\"\n            }\n        },\n        data: {\n            media: {\n                url: \"https://my-shop-host.com/media/ab/cd/ef/image.jpg\"\n            }\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages in Shopware 6\nDESCRIPTION: Starts a message consumer to work on all tasks. Multiple instances can be run concurrently.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/console messenger:consume -vv\n```\n\n----------------------------------------\n\nTITLE: Shopping List Event Subscription in Shopware\nDESCRIPTION: PHP class that subscribes to shopping list events for price calculation. Handles different loading contexts including admin and sales channel.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass ShoppingListSubscriber implements EventSubscriberInterface\n{\n    ...\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            self::SHOPPING_LIST_LOADED => 'adminLoadedForSpecificCustomer',\n            self::SALES_CHANNEL_SHOPPING_LIST_LOADED => 'salesChannelLoaded',\n            self::SALES_CHANNEL_SHOPPING_LIST_LINE_ITEM_LOADED => 'salesChannelLineItemLoaded',\n        ];\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastly Meta Package for Integration\nDESCRIPTION: Command to install the Fastly meta package which enables Fastly VCL Snippets deployment with the Deployment Helper.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-helper.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require shopware/fastly-meta\n```\n\n----------------------------------------\n\nTITLE: Blocking Cart Based on Minimum Value with Twig (Twig)\nDESCRIPTION: This Twig script enforces a minimum cart total by blocking carts below a threshold of 500. It uses a custom 'cart.block' method, likely exposed via Shopware app scripting, to notify the user. The script requires a 'cart' context object and outputs a block notification if the rule is triggered. Intended for use in Shopware script events, it demonstrates secure business rule enforcement via sandboxed Twig.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-10-21-app-scripting.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if cart.price.totalPrice < 500 %}\n    {# allow only carts with high values #}\n    {% do cart.block('you have to pay at least 500€ for this cart') %}\n{% endif %}\n\n```\n\n----------------------------------------\n\nTITLE: Running Shopware CLI in Docker container\nDESCRIPTION: Docker command to run Shopware CLI in a container while mounting the current directory to build extension assets.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    --rm \\\n    -v $(pwd):$(pwd) \\\n    -w $(pwd) \\\n    -u $(id -u) \\\n    shopware/shopware-cli \\\n    extension build FroshPlatformAdminer\n```\n\n----------------------------------------\n\nTITLE: Extending a Twig Template with Multiple Scopes in Shopware\nDESCRIPTION: This Twig code snippet demonstrates how to extend the base Storefront template (`@Storefront/storefront/base.html.twig`) using the `sw_extends` tag. The `scopes` parameter is set to `['default', 'subscription']`, ensuring that the extended template and its modifications are applied in both the standard storefront context ('default') and the specific subscription context within Shopware. This mechanism allows developers to control template inheritance precisely based on the application area, preventing inappropriate elements (like standard checkout buttons) from appearing in specialized flows like subscription checkouts.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/subscriptions/guides/template-scoping.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_extends {\n    template: '@Storefront/storefront/base.html.twig',\n    scopes: ['default', 'subscription']\n} %}\n```\n\n----------------------------------------\n\nTITLE: Building Shopware Administration in Production\nDESCRIPTION: Shell script command to build the administration interface in a production environment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-administration.sh\n```\n\n----------------------------------------\n\nTITLE: Basic Elasticsearch Indexing Command in Shopware\nDESCRIPTION: Command to perform basic Elasticsearch indexing in Shopware. This is typically used for regular indexing operations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/console es:index\n```\n\n----------------------------------------\n\nTITLE: Identifying Blocked PHP Statements in Shopware Code Reviews\nDESCRIPTION: Lists PHP statements (`die;`, `exit;`, `var_dump;`) that are blocked by Shopware's automatic code review process (SonarQube rules) effective from October 1st, 2022. These functions are often used for debugging but are considered unsuitable for production code submitted to the Shopware store.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-apps/index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndie; exit; var_dump\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Allowed ACL Actions\nDESCRIPTION: Example of generated HTML classes for allowed ACL actions in the template.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a [...] class=\"is--b2b-acl is--b2b-acl-controller-b2broleaddress is--b2b-acl-action-assign is--b2b-acl-allowed\"/>\n```\n\n----------------------------------------\n\nTITLE: Theme CSS Override Example\nDESCRIPTION: Example showing how a theme might override the margin-bottom property of a custom selector.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-10-19-bootstrap-css-utils.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n/* CustomTheme */\n.register-login-collapse-toogle {\n+    margin-bottom: 80px;\n}\n\n/* Storefront */\n.register-login-collapse-toogle {\n-    margin-bottom: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Console Input Arguments with Autocompletion in Symfony\nDESCRIPTION: This PHP snippet shows how to define a console command argument with autocompletion using Symfony's Console component enhancements in 6.1. The 'addArgument' call accepts a closure as a fifth parameter, enabling dynamic auto-suggested values based on the availableFeatures static method. Requires a compatible Symfony Console Command class and the existence of self::availableFeatures method. Arguments set up with flags, a description, and a custom autocompletion callback.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function configure(): void\n{\n    $this->addArgument(\n        'features',\n        InputArgument::REQUIRED | InputArgument::IS_ARRAY,\n        'The features to enable',\n        null,\n        fn () => self::availableFeatures()\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Twig Block Tag Whitespace Formatting - Twig\nDESCRIPTION: Provides a correct and incorrect example for spacing around Twig block tag syntax in HTML templates, demonstrating a linting pitfall (invalid-x-end-tag). This rule is essential for satisfying the custom linter that processes Twig syntax, which requires whitespace between the tag delimiters ('{%', '%}') and the block's name to avoid errors.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-05-28-introduce-eslint-on-vue-admin.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% block block_name %} ✔ <!-- whitespace after and before twig syntax `{% ` and ` %}`. -->\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% block block_name%} ✘ <!-- missing whitespace after or before twig syntax `{%` or `%}` -->\n```\n\n----------------------------------------\n\nTITLE: Company Filter Types Table Definition in Markdown\nDESCRIPTION: Markdown table defining the different company filter types and their applications in the CompanyFilterStruct. Shows three filter types: acl, assignment, and inheritance with their respective purposes.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/company.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Filter name   |                        What it applies                         |\n|:---------------:|:--------------------------------------------------------------:|\n| acl           |  Shows only entities which are visible to this `grantContext`  |\n| assignment    |      Shows only entities assigned to this `grantContext`       |\n| inheritance   | Shows only entities which are visible to this or inherited `grantContext`s                          |\n```\n\n----------------------------------------\n\nTITLE: Marking Entire Twig Template as Experimental\nDESCRIPTION: Example of marking an entire Twig template as experimental, affecting all content within the template. Used when extending existing templates with experimental features.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-10-experimental-features.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# @experimental stableVersion:v6.6.0 #}\n{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia Search Sections in Vitepress (JavaScript)\nDESCRIPTION: Defines a configuration object for Algolia search facets within the Vitepress setup (likely in `.vitepress/navigation.ts`). This specific entry groups articles under the path `/resources/meteor-icon-kit/` into a new search section titled 'Meteor Icon Kit'. `SwagSectionsConfig` is a custom type for Shopware's theme configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sections: SwagSectionsConfig[] = [\n    // ...\n    {\n        title: 'Meteor Icon Kit',\n        matches: [\n            '/resources/meteor-icon-kit/',\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: ER Diagram for Product, Category, and Property Relationships in Shopware\nDESCRIPTION: Mermaid entity relationship diagram showing how products are connected to categories and property groups in the Shopware database schema. It illustrates the many-to-many relationships between products and categories through the ProductCategory entity, as well as the connection between products and property group options.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/catalog/products.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    Product||--|{ ProductCategory : \"M:1\"\n    ProductCategory}|--|| Category : \"1:M\"\n    Product {\n        uuid product_id\n    }\n    ProductCategory {\n        uuid product_id \n        uuid category_id \n    }\n    Category {\n        uuid category_id\n    }\n    Product ||--|{ ProductOption : \"1:M\"\n    ProductOption{\n        uuid product_id\n        uuid property_group_option_id\n    }\n    ProductOption }|--|| PropertyGroupOption : \"M:1\"\n    PropertyGroupOption{\n        uuid property_group_option_id\n        uuid property_group_id\n    }\n        PropertyGroupOption }|--|| PropertyGroup : \"M:1\"\n    PropertyGroup{\n        uuid property_group_id\n    }\n```\n\n----------------------------------------\n\nTITLE: Component Self-Closing Syntax Enforcement in Vue Templates - HTML\nDESCRIPTION: Shows the transition from standard HTML-style custom element closing tags to self-closing component tags as enforced by linter configuration. There are no external module dependencies; changes are stylistic and required for consistent formatting. Inputs are Vue component elements in templates, and the expected output is a standardized self-closing form for single elements, following Vue's recommended code style.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-05-28-introduce-eslint-on-vue-admin.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- before -->\\n…\\n    <sw-language-switcher></sw-language-switcher>\\n…\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- now -->\\n…\\n    <sw-language-switcher />\\n…\n```\n\n----------------------------------------\n\nTITLE: Using Default Size with sw_thumbnails in Twig\nDESCRIPTION: Example of using the default size parameter with sw_thumbnails to override viewport-specific settings and use a single image size for all viewports.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/use-media-thumbnails.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% sw_thumbnails 'my-thumbnails' with {\n    media: cover,\n    sizes: {\n        'xs': '501px', {# Will be ignored #}\n        'sm': '315px', {# Will be ignored #}\n        'md': '427px', {# Will be ignored #}\n        'lg': '333px', {# Will be ignored #}\n        'xl': '284px', {# Will be ignored #}\n        'default': '100px'\n    }\n} %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Aggregation via API JSON in Shopware\nDESCRIPTION: Example of how to create a range aggregation through the API using JSON. The request shows how to define price ranges, and the response demonstrates the format of the returned buckets with counts of items in each range.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"aggregations\": {\n        \"price_ranges\": {\n            \"range\": {\n                \"field\": \"products.price\",\n                    \"ranges\": [\n                    { \"to\": 100.0 },\n                    { \"from\": 100.0, \"to\": 200.0 },\n                    { \"from\": 200.0 }\n                ]\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"aggregations\": {\n        \"price_ranges\": {\n            \"buckets\": [\n                {\n                    \"key\": \"*-100.0\",\n                    \"to\": 100.0,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": \"100.0-200.0\",\n                    \"from\": 100.0,\n                    \"to\": 200.0,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": \"200.0-*\",\n                    \"from\": 200.0,\n                    \"doc_count\": 3\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Delete Context Configuration\nDESCRIPTION: Example configuration for many-to-many relationship delete context in rule assignments.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteContext: {\n    type: 'many-to-many',\n    entity: 'category',\n    column: 'extensions.swagDynamicAccessRules',\n}\n```\n\n----------------------------------------\n\nTITLE: Messenger Consumer Command for Message Queue Processing\nDESCRIPTION: Command to start messenger consumer processes for processing message queue entries. The -vv option adds verbose output for processed messages.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/console messenger:consume -vv\n```\n\n----------------------------------------\n\nTITLE: Implementing a Migration Profile Class for Shopware 5.5 - PHP\nDESCRIPTION: This code defines the Shopware55Profile class, which implements the ShopwareProfileInterface for Shopware Migration Assistant. The class provides metadata (profile name, system name, version, author, icon) with respective getter methods, enabling the migration system to identify different migration source profiles. The implementation requires the SwagMigrationAssistant\\Profile\\Shopware namespace and assumes the interface ShopwareProfileInterface is defined elsewhere; it outputs key profile properties using constants and methods.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/profile-and-connection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\\n\\nnamespace SwagMigrationAssistant\\\\Profile\\\\Shopware55;\\n\\nuse SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\ShopwareProfileInterface;\\n\\nclass Shopware55Profile implements ShopwareProfileInterface\\n{\\n    public const PROFILE_NAME = 'shopware55';\\n\\n    public const SOURCE_SYSTEM_NAME = 'Shopware';\\n\\n    public const SOURCE_SYSTEM_VERSION = '5.5';\\n\\n    public const AUTHOR_NAME = 'shopware AG';\\n\\n    public const ICON_PATH = '/swagmigrationassistant/static/img/migration-assistant-plugin.svg';\\n\\n    public function getName(): string\\n    {\\n        return self::PROFILE_NAME;\\n    }\\n\\n    public function getSourceSystemName(): string\\n    {\\n        return self::SOURCE_SYSTEM_NAME;\\n    }\\n\\n    public function getVersion(): string\\n    {\\n        return self::SOURCE_SYSTEM_VERSION;\\n    }\\n\\n    public function getAuthorName(): string\\n    {\\n        return self::AUTHOR_NAME;\\n    }\\n\\n    public function getIconPath(): string\\n    {\\n        return self::ICON_PATH;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Faker Dependencies for Shopware Demo Data\nDESCRIPTION: Command to install dependencies required for the framework:demo-data command in Shopware versions prior to 6.4.17.0.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/template.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev mbezhanov/faker-provider-collection maltyxx/images-generator\n```\n\n----------------------------------------\n\nTITLE: Using SCSS Variables in Shopware 6 Plugin Styles\nDESCRIPTION: Imports the variables.scss file into base.scss and uses the defined variable for styling.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-styling.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/base.scss\n@import 'abstract/variables.scss';\n\nbody {\n    background: $sw-storefront-assets-color-background;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting active company in Shopware Account\nDESCRIPTION: This command sets the active company for API interactions. The <id> parameter should be replaced with the desired company's ID.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account company use <id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelog Generation\nDESCRIPTION: YAML configuration for automated changelog generation from git commits with pattern matching and templating.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nchangelog:\n  enabled: true\n  # only the commits matching to this regex will be used\n  pattern: '^NEXT-\\d+'\n  # variables allow extracting metadata out of the commit message\n  variables:\n    ticket: '^(NEXT-\\d+)\\s'\n  # go template for the changelog, it loops over all commits\n  template: |\n    {{range .Commits}}- [{{ .Message }}](https://issues.shopware.com/issues/{{ .Variables.ticket }})\n    {{end}}\n```\n\n----------------------------------------\n\nTITLE: Public Bundle Structure\nDESCRIPTION: Shows the resulting folder structure in the public/bundles directory after assets installation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/templates-styling/using-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# shopware-root/public/bundles\n.\n├── administration\n├── framework\n├── storefront\n└── swagbasicexample\n    └── your-image.png <-- Your asset is copied here\n```\n\n----------------------------------------\n\nTITLE: Registering Translation Definition in services.xml\nDESCRIPTION: XML configuration to register the translation definition in Shopware's service container.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-translations.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\ExampleDefinition\">\n            <tag name=\"shopware.entity.definition\" entity=\"swag_example\" />\n        </service>\n\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\Aggregate\\ExampleTranslation\\ExampleTranslationDefinition\">\n            <tag name=\"shopware.entity.definition\" entity=\"swag_example_translation\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Delete Custom Price - JSON API Request\nDESCRIPTION: Example of deleting customer-specific prices by specifying combinations of product IDs, customer IDs, and customer group IDs. At least one ID array must contain values.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/customer-specific-pricing.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"action\": \"delete\",\n    \"payload\": [\n      {\n        \"productIds\": [\n          \"0001e32041ac451386bf9b7351c540f3\",\n          \"363a6985f6434a7493b1ef3dabeed40f\"\n        ],\n        \"customerIds\": [\n          \"53fc38877a510a47b0e0c44f1615f0c5\"\n        ],\n        \"customerGroupIds\": []\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting the Vitepress Development Server (Bash)\nDESCRIPTION: Runs the Vitepress development server using the `pnpm dev` command within the `developer-portal` repository. This allows developers to preview their documentation changes, including newly embedded content, in a local web server environment. Requires `pnpm` and Node.js.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Tag-based Cache Invalidation\nDESCRIPTION: Demonstrates how to invalidate cache using entity-specific tags by processing filtered IDs and using the cache service.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% set tags = [] %}\n{% for id in ids %}\n    {% set tags = tags|merge(['my-product-' ~ id]) %}\n{% endfor %}\n\n{% do services.cache.invalidate(tags) %}\n```\n\n----------------------------------------\n\nTITLE: Using Twig's use tag (Not Recommended)\nDESCRIPTION: Example of using Twig's use tag, which is not officially supported in Shopware due to potential issues with template inheritance and core template changes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/storefront-reference/twig-function-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% use %}\n```\n\n----------------------------------------\n\nTITLE: Wishlist Widget Hook Implementation\nDESCRIPTION: Hook triggered when the WishlistWidget is loaded, giving access to widget data and context information.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Storefront\\Page\\Wishlist\\WishlistWidgetLoadedHook\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopware 6 Console Commands in Markdown Tables\nDESCRIPTION: This code snippet demonstrates how to create markdown tables to display Shopware 6 console commands along with their descriptions. The tables are organized by command categories, providing a clear and structured view of available commands.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/commands-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Router\n\n| Command | Description |\n| :--- | :--- |\n| `router:match` | Helps debug routes by simulating a path info match |\n\n### S3\n\n| Command | Description |\n| :--- | :--- |\n| `s3:set-visibility` | Sets the visibility of all files in the s3 filesystem to public |\n\n### Sales-channel\n\n| Command | Description |\n| :--- | :--- |\n| `sales-channel:create` | Creates a new sales channel |\n| `sales-channel:create:storefront` | Creates a new storefront sales channel |\n| `sales-channel:list` | Lists all sales channels |\n| `sales-channel:maintenance:disable` | Disables maintenance mode for a sales channel |\n| `sales-channel:maintenance:enable` | Enables maintenance mode for a sales channel |\n| `sales-channel:update:domain` | Updates a sales channel domain |\n\n### Scheduled-task\n\n| Command | Description | Version |\n| :--- | :--- | :--- |\n| `scheduled-task:register` | Registers all scheduled tasks |\n| `scheduled-task:run` | Runs scheduled tasks |\n| `scheduled-task:run-single` | Runs single scheduled tasks | 6.5.5.0 |\n| `scheduled-task:list` | Lists all scheduled tasks | 6.5.5.0 |\n\n### Secrets\n\n| Command | Description |\n| :--- | :--- |\n| `secrets:decrypt-to-local` | Decrypts all secrets and stores them in the local vault |\n| `secrets:encrypt-from-local` | Encrypts all local secrets to the vault |\n| `secrets:generate-keys` | Generates new encryption keys |\n| `secrets:list` | Lists all secrets |\n| `secrets:remove` | Removes a secret from the vault |\n| `secrets:set` | Sets a secret in the vault |\n\n### Sitemap\n\n| Command | Description |\n| :--- | :--- |\n| `sitemap:generate` | Generates sitemaps for a given shop \\(or all active ones\\) |\n\n### Snippets\n\n| Command | Description |\n| :--- | :--- |\n| `snippets:validate` | Validates snippets |\n\n### State-machine\n\n| Command | Description |\n| :--- | :--- |\n| `state-machine:dump` | Dumps a state machine to a graphviz file |\n\n### Store\n\n| Command | Description |\n| :--- | :--- |\n| `store:download` | Downloads a plugin from the store |\n| `store:login` | Login for the store |\n\n### System\n\n| Command | Description |\n| :--- | :--- |\n| `system:config:get` | Gets a config value |\n| `system:config:set` | Sets a config value |\n| `system:configure-shop` | Configures the shop |\n| `system:generate-app-secret` | Generates a new app secret |\n| `system:generate-jwt-secret` | Generates a new JWT secret |\n| `system:install` | Installs the Shopware 6 system |\n| `system:setup` | Setup the system |\n| `system:update:finish` | Finishes the update process |\n| `system:update:prepare` | Prepares the update process |\n\n### Theme\n\n| Command | Description |\n| :--- | :--- |\n| `theme:change` | Changes the active theme for a sales channel |\n| `theme:compile` | Compiles the theme |\n| `theme:create` | Creates a theme skeleton |\n| `theme:dump` | Dumps the theme configuration |\n| `theme:prepare-icons` | Prepares the theme icons |\n| `theme:refresh` | Refreshes the theme configuration |\n\n### User\n\n| Command | Description |\n| :--- | :--- |\n| `user:change-password` | Changes the password of a user |\n| `user:create` | Creates a new user |\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Approval Rule Condition in manifest.xml for Shopware App\nDESCRIPTION: This XML snippet defines a custom approval rule condition in the manifest.xml file of a Shopware app. It specifies the condition's identifier, name, group, script file, and constraints for the UI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/order-approval/guides/04-add-new-approval-condition.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<rule-condition>\n    <identifier>cart_amount_rule_script</identifier>\n    <name>Total cart amount</name>\n    <group>cart</group>\n    <script>/approval-rule-conditions/custom-condition.twig</script>\n    <constraints>\n        <single-select name=\"operator\">\n            <options>\n                <option value=\"<\">\n                    <name>Is less than</name>\n                </option>\n                <option value=\"<=\">\n                    <name>Is less than or equal to</name>\n                </option>\n                <option value=\"=\">\n                    <name>Is equal to</name>\n                </option>\n                <option value=\">=\">\n                    <name>Is greater than or equal to</name>\n                </option>\n                <option value=\">\">\n                    <name>Is greater than</name>\n                </option>\n            </options>\n        </single-select>\n        <float name=\"amount\">\n            <placeholder>Enter amount</placeholder>\n        </float>\n    </constraints>\n</rule-condition>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware to Use Image Proxy\nDESCRIPTION: YAML configuration to tell Shopware to use the proxy server URL for all images. This configuration file should be placed in the Shopware config directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n  filesystem:\n    public:\n      url: \"http://localhost:8050\"\n```\n\n----------------------------------------\n\nTITLE: Styling the Dailymotion CMS Element with SCSS\nDESCRIPTION: CSS styles for the Dailymotion element to ensure responsive behavior. Sets up a proper aspect ratio container for the video and positions the iframe correctly.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/component/sw-cms-el-dailymotion.scss\n.sw-cms-el-dailymotion {\n    height: 100%;\n    width: 100%;\n    min-height: 315px;\n\n    .sw-cms-el-dailymotion-iframe-wrapper {\n        position: relative;\n        padding-bottom: 56.25%;\n        height: 0;\n        overflow: hidden;\n\n        iframe {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            left: 0;\n            top: 0;\n            overflow: hidden\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setup XQuartz environment variables\nDESCRIPTION: Commands for configuring XQuartz environment for running Cypress in Docker on Mac\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIP=$(ipconfig getifaddr en0)\nDISPLAY=$IP:0\nxhost + $IP\n```\n\n----------------------------------------\n\nTITLE: Reverting to Main Branch in CI Script and Committing (Shell)\nDESCRIPTION: Sequence of Git commands executed within the `developer-portal` repository on its feature branch (`feature/embeds-meteor-icon-kit`). It involves navigating to the repository, checking out the feature branch, editing the `.github/scripts/mount.sh` file to set the external repository's branch variable (`BRANCH_METEOR_ICON_KIT`) back to `main` (implied change), staging the modification (implied `git add .`), and committing this change before the portal's PR is merged.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncd /www/shopware/developer-portal/\ngit checkout feature/embeds-meteor-icon-kit\n# change BRANCH_METEOR_ICON_KIT=main inside .github/scripts/mount.sh\ngit commit -m \"chore: switched back to main branch for meteor repo\"\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Locale for Redis\nDESCRIPTION: Command to set the correct locale for Redis operation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport LANG=en_US.UTF8;\n```\n\n----------------------------------------\n\nTITLE: Media API Operations in TypeScript\nDESCRIPTION: Demonstrates using Media API helpers for managing media files and folders in Shopware, including creating folders and uploading files.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/05-http-client.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMediaFolder, uploadMediaFile, getMediaFolderByName } from '@shopware-ag/app-server-sdk/helper/media';\n\n// The same http client as usual\nconst httpClient = ...;\n\n// Create a new folder\nconst folderId = await createMediaFolder(httpClient, 'My Folder', {});\n\n// Create a new folder with parent folder id\nconst folderId = await createMediaFolder(httpClient, 'My Folder', {parentId: \"parent-id\"});\n\n// Lookup a folder by name\nconst folderId = await getMediaFolderByName(httpClient, 'My Folder');\n\n// Lookup a folder by default folder for an entity\n// Returns back the folderId to be used when using a media for a product\nconst folderId = await getMediaDefaultFolderByEntity(httpClient, 'product');\n\n// Upload a file to the media manager\nawait uploadMediaFile(httpClient, {\n    file: new Blob(['my text'], { type: 'text/plain' }),\n    fileName: `foo.text`,\n    // Optional, a folder id to upload the file to\n    mediaFolderId: folderId\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default SCSS Variable in Plugin Base Stylesheet\nDESCRIPTION: Defines a default SCSS variable for the header background color with a fallback value that will be overwritten when the plugin is installed and activated. The variable is then applied to the header-main class.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-scss-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// <plugin root>/src/Resources/app/storefront/src/scss/base.scss\n// The value will be overwritten when the plugin is installed and activated\n$sass-plugin-header-bg-color: #ffcc00 !default;\n\n.header-main {\n    background-color: $sass-plugin-header-bg-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating environment file\nDESCRIPTION: Command to create a .env file by copying the template file. This sets up the necessary environment variables for the frontend application.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/app-installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Amount Calculation\nDESCRIPTION: Example of a simple SQL query for calculating amounts without currency conversion.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/currency.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    public function fetchAmount(int $budgetId): float\n    {\n        return (float) $this-connection->fetchColumn(\n            'SELECT SUM(amount) AS sum_amount FROM b2b_budget_transaction WHERE budget_id=:budgetId',\n            ['budgetId' => $budgetId]\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Ensuring String Type with Runtime Check in PHP\nDESCRIPTION: Shows how to use `is_string()` within an `if` condition to verify that a variable `$foo` (potentially `mixed`) holds a string value at runtime. An `InvalidArgumentException` is thrown if the type check fails, ensuring the variable is a string before further use.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is mixed, but we expect only string\n\nif (!is_string($foo)) {\n    // handle the error case\n    throw new \\InvalidArgumentException('$foo must not be string');  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Folder Structure for Custom Assets\nDESCRIPTION: Shows the proper folder structure for adding custom assets to a Shopware plugin, with the image file placed in the Resources/public directory.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# PluginRoot\n.\n├── composer.json\n└── src\n    ├── Resources\n    │   ├── public\n    │   │   └── your-image.png <-- Asset file here\n    └── SwagBasicExample.php\n```\n\n----------------------------------------\n\nTITLE: Generating ACL Routes with RoutingIndexer\nDESCRIPTION: Example of using the RoutingIndexer to automatically generate ACL route configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/acl-routing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire __DIR__ . '/../B2bContact.php';\n$indexer = new Shopware\\B2B\\AclRoute\\Framework\\RoutingIndexer();\n$indexer->generate(\\Shopware_Controllers_Frontend_B2bContact::class, __DIR__ . '/my-acl-config.php');\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Utility with !important Overriding Theme CSS\nDESCRIPTION: Example showing how a Bootstrap utility with !important would override a theme's custom styling.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-10-19-bootstrap-css-utils.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n/* Utility class from HTML overrules CustomTheme */\n.mb-3 {\n+    margin-bottom: 1rem !important;\n}\n\n/* CustomTheme */\n.register-login-collapse-toogle {\n-    margin-bottom: 80px;\n}\n\n/* Storefront */\n.register-login-collapse-toogle {\n-    margin-bottom: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Non-Null Type with assert() in PHP\nDESCRIPTION: Demonstrates using PHP's built-in `assert()` function to check if a variable `$foo` (potentially `Foo|null`) is not null. These checks are typically active only during development and testing, throwing an `AssertionError` if the condition fails, and can be disabled in production for performance.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/writing-code-for-static-analysis.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$foo = $bar->getFoo(); // $foo is Foo|null, but we expect only Foo\n\nassert($foo !== null);\n```\n\n----------------------------------------\n\nTITLE: Grouping Query Example\nDESCRIPTION: Shows how to use the grouping parameter to group results by specific fields.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"limit\": 5,\n    \"grouping\": [\"active\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Shopware Initialization Command\nDESCRIPTION: Command to start the Shopware initialization process after accessing the container.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./psh.phar init\n```\n\n----------------------------------------\n\nTITLE: Executing Shopware CLI Commands - Basic Syntax\nDESCRIPTION: Shows the basic syntax for executing Shopware CLI commands from within a Shopware project directory. Commands are run using the console script in the bin directory followed by the command name and any parameters.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/commands-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/console [command] [parameters]\n```\n\n----------------------------------------\n\nTITLE: Detailed Shopware Theme Configuration\nDESCRIPTION: Comprehensive JSON configuration for a Shopware theme, including color schemes, typography settings, e-commerce elements, and media assets. It defines various UI components and their properties.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/build-w-o-db.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extensions\": [],\n  \"themeConfig\": {\n    \"blocks\": {\n      \"themeColors\": {\n        \"label\": {\n          \"en-GB\": \"Theme colours\",\n          \"de-DE\": \"Theme-Farben\"\n        }\n      },\n      \"typography\": {\n        \"label\": {\n          \"en-GB\": \"Typography\",\n          \"de-DE\": \"Typografie\"\n        }\n      },\n      \"eCommerce\": {\n        \"label\": {\n          \"en-GB\": \"E-Commerce\",\n          \"de-DE\": \"E-Commerce\"\n        }\n      },\n      \"statusColors\": {\n        \"label\": {\n          \"en-GB\": \"Status messages\",\n          \"de-DE\": \"Status-Ausgaben\"\n        }\n      },\n      \"media\": {\n        \"label\": {\n          \"en-GB\": \"Media\",\n          \"de-DE\": \"Medien\"\n        }\n      },\n      \"unordered\": {\n        \"label\": {\n          \"en-GB\": \"Misc\",\n          \"de-DE\": \"Sonstige\"\n        }\n      }\n    },\n    \"fields\": {\n      \"sw-color-brand-primary\": {\n        \"label\": {\n          \"en-GB\": \"Primary colour\",\n          \"de-DE\": \"Prim\\u00e4rfarbe\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#ff0000\",\n        \"editable\": true,\n        \"block\": \"themeColors\",\n        \"order\": 100\n      },\n      \"sw-color-brand-secondary\": {\n        \"label\": {\n          \"en-GB\": \"Secondary colour\",\n          \"de-DE\": \"Sekund\\u00e4rfarbe\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#3d444d\",\n        \"editable\": true,\n        \"block\": \"themeColors\",\n        \"order\": 200\n      },\n      \"sw-border-color\": {\n        \"label\": {\n          \"en-GB\": \"Border\",\n          \"de-DE\": \"Rahmen\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#798490\",\n        \"editable\": true,\n        \"block\": \"themeColors\",\n        \"order\": 300\n      },\n      \"sw-background-color\": {\n        \"label\": {\n          \"en-GB\": \"Background\",\n          \"de-DE\": \"Hintergrund\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#fff\",\n        \"editable\": true,\n        \"block\": \"themeColors\",\n        \"order\": 400\n      },\n      \"sw-color-success\": {\n        \"label\": {\n          \"en-GB\": \"Success\",\n          \"de-DE\": \"Erfolg\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#3cc261\",\n        \"editable\": true,\n        \"block\": \"statusColors\",\n        \"order\": 100\n      },\n      \"sw-color-info\": {\n        \"label\": {\n          \"en-GB\": \"Information\",\n          \"de-DE\": \"Information\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#26b6cf\",\n        \"editable\": true,\n        \"block\": \"statusColors\",\n        \"order\": 200\n      },\n      \"sw-color-warning\": {\n        \"label\": {\n          \"en-GB\": \"Notice\",\n          \"de-DE\": \"Hinweis\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#ffbd5d\",\n        \"editable\": true,\n        \"block\": \"statusColors\",\n        \"order\": 300\n      },\n      \"sw-color-danger\": {\n        \"label\": {\n          \"en-GB\": \"Error\",\n          \"de-DE\": \"Fehler\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#e52427\",\n        \"editable\": true,\n        \"block\": \"statusColors\",\n        \"order\": 400\n      },\n      \"sw-font-family-base\": {\n        \"label\": {\n          \"en-GB\": \"Fonttype text\",\n          \"de-DE\": \"Schriftart Text\"\n        },\n        \"type\": \"fontFamily\",\n        \"value\": \"'Inter', sans-serif\",\n        \"editable\": true,\n        \"block\": \"typography\",\n        \"order\": 100\n      },\n      \"sw-text-color\": {\n        \"label\": {\n          \"en-GB\": \"Text colour\",\n          \"de-DE\": \"Textfarbe\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#2b3136\",\n        \"editable\": true,\n        \"block\": \"typography\",\n        \"order\": 200\n      },\n      \"sw-font-family-headline\": {\n        \"label\": {\n          \"en-GB\": \"Fonttype headline\",\n          \"de-DE\": \"Schriftart \\u00dcberschrift\"\n        },\n        \"type\": \"fontFamily\",\n        \"value\": \"'Inter', sans-serif\",\n        \"editable\": true,\n        \"block\": \"typography\",\n        \"order\": 300\n      },\n      \"sw-headline-color\": {\n        \"label\": {\n          \"en-GB\": \"Headline colour\",\n          \"de-DE\": \"\\u00dcberschriftfarbe\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#2b3136\",\n        \"editable\": true,\n        \"block\": \"typography\",\n        \"order\": 400\n      },\n      \"sw-color-price\": {\n        \"label\": {\n          \"en-GB\": \"Price\",\n          \"de-DE\": \"Preis\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#2b3136\",\n        \"editable\": true,\n        \"block\": \"eCommerce\",\n        \"order\": 100\n      },\n      \"sw-color-buy-button\": {\n        \"label\": {\n          \"en-GB\": \"Buy button\",\n          \"de-DE\": \"Kaufen-Button\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#0b539b\",\n        \"editable\": true,\n        \"block\": \"eCommerce\",\n        \"order\": 200\n      },\n      \"sw-color-buy-button-text\": {\n        \"label\": {\n          \"en-GB\": \"Buy button text\",\n          \"de-DE\": \"Kaufen-Button Text\"\n        },\n        \"type\": \"color\",\n        \"value\": \"#fff\",\n        \"editable\": true,\n        \"block\": \"eCommerce\",\n        \"order\": 300\n      },\n      \"sw-logo-desktop\": {\n        \"label\": {\n          \"en-GB\": \"Desktop\",\n          \"de-DE\": \"Desktop\"\n        },\n        \"helpText\": {\n          \"en-GB\": \"Displayed on viewport sizes above 991px and as a fallback on smaller viewports, if no other logo is set.\",\n          \"de-DE\": \"Wird bei Ansichten \\u00fcber 991px angezeigt und als Alternative bei kleineren Aufl\\u00f6sungen, f\\u00fcr die kein anderes Logo eingestellt ist.\"\n        },\n        \"type\": \"media\",\n        \"value\": \"http:\\/\\/shopware.local\\/media\\/64\\/17\\/g0\\/1678462492\\/demostore-logo.png\",\n        \"editable\": true,\n        \"block\": \"media\",\n        \"order\": 100,\n        \"fullWidth\": true\n      },\n      \"sw-logo-tablet\": {\n        \"label\": {\n          \"en-GB\": \"Tablet\",\n          \"de-DE\": \"Tablet\"\n        },\n        \"helpText\": {\n          \"en-GB\": \"Displayed between a viewport of 767px to 991px\",\n          \"de-DE\": \"Wird zwischen einem viewport von 767px bis 991px angezeigt\"\n        },\n        \"type\": \"media\",\n        \"value\": \"http:\\/\\/shopware.local\\/media\\/64\\/17\\/g0\\/1678462492\\/demostore-logo.png\",\n        \"editable\": true,\n        \"block\": \"media\",\n        \"order\": 200,\n        \"fullWidth\": true\n      },\n      \"sw-logo-mobile\": {\n        \"label\": {\n          \"en-GB\": \"Mobile\",\n          \"de-DE\": \"Mobil\"\n        },\n        \"helpText\": {\n          \"en-GB\": \"Displayed up to a viewport of 767px\",\n          \"de-DE\": \"Wird bis zu einem Viewport von 767px angezeigt\"\n        },\n        \"type\": \"media\",\n        \"value\": \"http:\\/\\/shopware.local\\/media\\/64\\/17\\/g0\\/1678462492\\/demostore-logo.png\",\n        \"editable\": true,\n        \"block\": \"media\",\n        \"order\": 300,\n        \"fullWidth\": true\n      },\n      \"sw-logo-share\": {\n        \"label\": {\n          \"en-GB\": \"App & share icon\",\n          \"de-DE\": \"App- & Share-Icon\"\n        },\n        \"type\": \"media\",\n        \"value\": \"\",\n        \"editable\": true,\n        \"block\": \"media\",\n        \"order\": 400\n      },\n      \"sw-logo-favicon\": {\n        \"label\": {\n          \"en-GB\": \"Favicon\",\n          \"de-DE\": \"Favicon\"\n        },\n        \"type\": \"media\",\n        \"value\": \"http:\\/\\/shopware.local\\/media\\/d3\\/f5\\/b7\\/1678462492\\/favicon.png\",\n        \"editable\": true,\n        \"block\": \"media\",\n        \"order\": 500\n      }\n    },\n    \"sw-color-brand-primary\": {\n      \"extensions\": [],\n      \"name\": \"sw-color-brand-primary\",\n      \"label\": {\n        \"en-GB\": \"Primary colour\",\n        \"de-DE\": \"Prim\\u00e4rfarbe\"\n      },\n      \"helpText\": null,\n      \"type\": \"color\",\n      \"value\": \"#0b539b\",\n      \"editable\": true,\n      \"block\": \"themeColors\",\n      \"section\": null,\n      \"tab\": null,\n      \"order\": 100,\n      \"sectionOrder\": null,\n      \"blockOrder\": null,\n      \"tabOrder\": null,\n      \"custom\": null,\n      \"scss\": null,\n      \"fullWidth\": null\n    },\n    \"sw-color-brand-secondary\": {\n      \"extensions\": [],\n      \"name\": \"sw-color-brand-secondary\",\n      \"label\": {\n        \"en-GB\": \"Secondary colour\",\n        \"de-DE\": \"Sekund\\u00e4rfarbe\"\n      },\n      \"helpText\": null,\n      \"type\": \"color\",\n      \"value\": \"#3d444d\",\n      \"editable\": true,\n      \"block\": \"themeColors\",\n      \"section\": null,\n      \"tab\": null,\n      \"order\": 200,\n      \"sectionOrder\": null,\n      \"blockOrder\": null,\n      \"tabOrder\": null,\n      \"custom\": null,\n      \"scss\": null,\n      \"fullWidth\": null\n    },\n    \"sw-border-color\": {\n      \"extensions\": [],\n      \"name\": \"sw-border-color\",\n      \"label\": {\n        \"en-GB\": \"Border\",\n        \"de-DE\": \"Rahmen\"\n      },\n      \"helpText\": null,\n      \"type\": \"color\",\n      \"value\": \"#798490\",\n      \"editable\": true,\n      \"block\": \"themeColors\",\n      \"section\": null,\n      \"tab\": null,\n      \"order\": 300,\n      \"sectionOrder\": null,\n      \"blockOrder\": null,\n      \"tabOrder\": null,\n      \"custom\": null,\n      \"scss\": null,\n      \"fullWidth\": null\n    },\n    \"sw-background-color\": {\n      \"extensions\": [],\n      \"name\": \"sw-background-color\",\n      \"label\": {\n        \"en-GB\": \"Background\",\n        \"de-DE\": \"Hintergrund\"\n      },\n      \"helpText\": null,\n      \"type\": \"color\",\n      \"value\": \"#fff\",\n      \"editable\": true,\n      \"block\": \"themeColors\",\n      \"section\": null,\n      \"tab\": null,\n      \"order\": 400,\n      \"sectionOrder\": null,\n      \"blockOrder\": null,\n      \"tabOrder\": null,\n      \"custom\": null,\n      \"scss\": null,\n      \"fullWidth\": null\n    },\n    \"sw-color-success\": {\n      \"extensions\": [],\n      \"name\": \"sw-color-success\",\n      \"label\": {\n        \"en-GB\": \"Success\",\n        \"de-DE\": \"Erfolg\"\n      },\n      \"helpText\": null,\n      \"type\": \"color\",\n      \"value\": \"#3cc261\",\n      \"editable\": true,\n      \"block\": \"statusColors\",\n      \"section\": null,\n      \"tab\": null,\n      \"order\": 100,\n      \"sectionOrder\": null,\n      \"blockOrder\": null,\n      \"tabOrder\": null,\n      \"custom\": null,\n      \"scss\": null,\n      \"fullWidth\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Composer Command Structure\nDESCRIPTION: Basic syntax for executing Composer commands within a Shopware project. Commands should be run from the project root directory.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/composer-commands-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer [command] [parameters]\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Add Assignment Context in Shopware\nDESCRIPTION: Example configuration for a many-to-many relationship add assignment context. Demonstrates how to set up entity associations and criteria for dynamic access category rules.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\naddContext: {\n    type: 'many-to-many',\n    entity: 'swag_dynamic_access_category_rule',\n    column: 'categoryId',\n    searchColumn: 'name',\n    association: 'swagDynamicAccessRules',\n    criteria: () => {\n        const criteria = new Criteria();\n        criteria.addFilter(Criteria.equals('parentId', null));\n\n        return criteria;\n    },\n    gridColumns: [\n        // Definition of columns\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as Increment Storage in Shopware (Before v6.6.8.0)\nDESCRIPTION: YAML configuration for setting up Redis as the increment storage for user activity and message queue in Shopware versions before 6.6.8.0. This implementation directly specifies the Redis URL in the configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/increment.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    increment:\n        user_activity:\n          type: 'redis'\n          config:\n            url: 'redis://host:port/dbindex'\n\n        message_queue:\n          type: 'redis'\n          config:\n            url: 'redis://host:port/dbindex'\n```\n\n----------------------------------------\n\nTITLE: Managing and Selecting Gateways in Shopware 6 Migration (PHP)\nDESCRIPTION: This PHP snippet defines the GatewayRegistry class that manages all available migration gateways. It dynamically retrieves or selects gateways based on the migration context by filtering registered services that support the current context and match a specific gateway name. Its methods utilize dependency injection to iterate gateways, throw appropriate exception types, and return gateway interfaces, ensuring robust gateway resolution. Dependencies include the Shopware migration assistant library and adherence to interfaces like GatewayRegistryInterface and GatewayInterface. The class expects valid migration context data and throws exceptions when expected properties (e.g., connection, profile) are missing.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/gateway-and-reader.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\\n\\nnamespace SwagMigrationAssistant\\Migration\\Gateway;\\n\\nuse SwagMigrationAssistant\\Exception\\MigrationContextPropertyMissingException;\\nuse SwagMigrationAssistant\\Exception\\GatewayNotFoundException;\\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\\n\\nclass GatewayRegistry implements GatewayRegistryInterface\\n{\\n    /**\\n     * @var GatewayInterface[]\\n     */\\n    private iterable $gateways;\\n\\n    /**\\n     * @param GatewayInterface[] $gateways\\n    */\\n    public function __construct(iterable $gateways)\\n    {\\n        $this->gateways = $gateways;\\n    }\\n\\n    /**\\n     * @throws GatewayNotFoundException\\n     *\\n     * @return GatewayInterface[]\\n     */\\n    public function getGateways(MigrationContextInterface $migrationContext): array\\n    {\\n        $gateways = [];\\n        foreach ($this->gateways as $gateway) {\\n            if ($gateway->supports($migrationContext)) {\\n                $gateways[] = $gateway;\\n            }\\n        }\\n\\n        return $gateways;\\n    }\\n\\n    /**\\n     * @throws GatewayNotFoundException\\n     */\\n    public function getGateway(MigrationContextInterface $migrationContext): GatewayInterface\\n    {\\n        $connection = $migrationContext->getConnection();\\n        if ($connection === null) {\\n            throw new MigrationContextPropertyMissingException('Connection');\\n        }\\n\\n        $profileName = $connection->getProfileName();\\n        $gatewayName = $connection->getGatewayName();\\n\\n        foreach ($this->gateways as $gateway) {\\n            if ($gateway->supports($migrationContext) && $gateway->getName() === $gatewayName) {\\n                return $gateway;\\n            }\\n        }\\n\\n        throw new GatewayNotFoundException($profileName . '-' . $gatewayName);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Copying Static Assets During Vitepress Build (JavaScript)\nDESCRIPTION: Demonstrates how to use the `buildEnd` hook in the Vitepress configuration (`vitepress/config.js` or similar) to copy static assets from an embedded repository during the production build. This example copies icons from the embedded `meteor-icon-kit` resources to the final build output directory. Requires a helper function like `copyAdditionalAssets`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    // ...\n    async buildEnd() {\n        // ...\n        await copyAdditionalAssets([\n            // meteor-icon-kit\n            {\n                src: './resources/meteor-icon-kit/public/icons/regular',\n                dst: 'icons/regular',\n            }\n        ])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Mapping Entity Query Example in Shopware 6\nDESCRIPTION: Shows an incorrect way to read mapping entities, demonstrating what not to do when querying ManyToMany associations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/reading-data.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function readData(Context $context): void\n{\n    $criteria = new Criteria();\n\n    // It's the product_category.repository here\n    $result = $this->productCategoryRepository->search($criteria, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shopware Frontend Dependency in theme.json\nDESCRIPTION: Shows an example entry within the `require` section of a Shopware theme's `theme.json` file. This specific entry declares a dependency on the Shopware frontend package, which might be necessary to resolve \"Class Shopware\\Storefront\\* not found\" errors during code review.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/testing/store/quality-guidelines-apps/index.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\"shopware/frontend\": \"*\"},\n```\n\n----------------------------------------\n\nTITLE: Customer Address Event Payload Structure in JSON\nDESCRIPTION: JSON structure for customer_address events in Shopware. It includes the entity name, operation type, primary key, and payload array.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"customer_address\",\"operation\":\"update insert\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"customer_address\",\"operation\":\"deleted\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\n----------------------------------------\n\nTITLE: Text-Hero Block with Text Element Example\nDESCRIPTION: Illustrates a text-hero block configuration with a text element in the content slot. Shows how static content is defined within the CMS structure.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/commerce/content/shopping-experiences-cms.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nblock: {\n    type: \"text-hero\",\n    slots: [{\n        type: \"text\",\n        slot: \"content\",\n        config: {\n            content: {\n                source: \"static\",\n                value: \"Hello World\"\n            }\n        },\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Access with Annotations in PHP (Before Migration)\nDESCRIPTION: This snippet shows the traditional approach of securing Shopware controllers using custom annotations like @LoginRequired alongside Symfony's @Route. @LoginRequired enforces that a customer must be logged in before accessing the associated route. The dependencies include the Shopware-specific annotation system and Symfony's routing component. The key parameters in @Route define the path, route name, and allowed HTTP methods. Inputs and outputs pertain to HTTP requests and controller actions. Limitations include tight coupling of custom annotations and the need for decorators to replicate annotation changes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-02-09-controller-configuration-route-defaults.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@LoginRequired\n@Route(\"/store-api/product\", name=\"store-api.product.search\", methods={\"GET\", \"POST\"})\npublic function myAction()\n```\n\n----------------------------------------\n\nTITLE: Wishlist Page Hook Implementation\nDESCRIPTION: Hook triggered when the WishlistPage is loaded. Provides access to page data, context, and sales channel context.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Storefront\\Page\\Wishlist\\WishlistPageLoadedHook\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish with Caddy for Shopware\nDESCRIPTION: Complete Nix configuration for setting up Varnish caching with Caddy reverse proxy for Shopware, including CORS headers and logging.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.caddy = {\n    enable = true;\n    virtualHosts.\"http://localhost\" = {\n      extraConfig = ''\n        reverse_proxy 127.0.0.1:6081 {\n          header_up Host sw.localhost\n        }\n      '';\n    };\n    virtualHosts.\"http://sw.localhost\" = {\n      extraConfig = ''\n        header {\n            Access-Control-Allow-Origin *\n            Access-Control-Allow-Credentials true\n            Access-Control-Allow-Methods *\n            Access-Control-Allow-Headers *\n            defer\n        }\n        root * public\n        php_fastcgi unix/${config.languages.php.fpm.pools.web.socket}\n        encode zstd gzip\n        file_server\n        log {\n          output stderr\n          format console\n          level ERROR\n        }\n      '';\n    };\n  };\n  services.varnish = {\n    enable = true;\n    package = pkgs.varnish;\n    listen = \"127.0.0.1:6081\";\n    extraModules = [ pkgs.varnishPackages.modules ];\n    vcl = ''\n      backend default {\n          .host = \"sw.localhost\";\n          .port = \"80\";\n      }\n      acl purgers {\n          \"sw.localhost\";\n          \"127.0.0.1\";\n          \"localhost\";\n          \"::1\";\n      }\n    '';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Service for State Reset in Symfony DI - XML\nDESCRIPTION: The XML snippet configures a Symfony service definition for FooService with the kernel.reset tag, specifying that the reset method should be invoked between requests. This requires the ResetInterface implementation on the service. Key parameter: method=\\\"reset\\\" ensures the reset method is automatically called during the kernel reset process.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-09-reset-class-state-during-requests.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\\\"FooService\\\">\\n    <tag name=\\\"kernel.reset\\\" method=\\\"reset\\\"/>\\n</service>\n```\n\n----------------------------------------\n\nTITLE: Mapping Configuration File in Shopware Theme\nDESCRIPTION: JSON structure mapping a specific ID to the configuration file name for the Shopware theme.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/build-w-o-db.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"99ef1e95716d43d7be78e9d9921c7163\":\"a729322c1f4e4b4e851137c807b4f363\"}\n```\n\n----------------------------------------\n\nTITLE: Core Component Implementation in Shopware 6.7\nDESCRIPTION: Example of core component registration using Options API and Twig.Js templates\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('sw-text-field', {\n   template: `\n     {% block sw-text-field %}\n       <input type=text v-model=\"value\" @change=\"onChange\">\n     {% endblock %}\n   `,\n   \n   data() {\n       return {\n           value: null,\n       }\n   },\n   \n   methods: {\n       onChange() {\n           this.$emit('update:value', this.value);\n       }\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the BaseContext Data Structure (PHP)\nDESCRIPTION: Shows the definition of the `BaseContext` class within the `Shopware\\Core\\System\\SalesChannel` namespace. This internal class acts as a container for data that is specific to the sales channel but independent of the logged-in customer, such as customer groups, currency, tax rules, selected payment/shipping methods, shipping location, and rounding configurations. This separation allows these elements to be cached more broadly.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-base-context-factory.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\System\\SalesChannel;\n\nclass BaseContext\n{\n    protected CustomerGroupEntity $currentCustomerGroup;\n\n    protected CustomerGroupEntity $fallbackCustomerGroup;\n\n    protected CurrencyEntity $currency;\n\n    protected SalesChannelEntity $salesChannel;\n\n    protected TaxCollection $taxRules;\n\n    protected PaymentMethodEntity $paymentMethod;\n\n    protected ShippingMethodEntity $shippingMethod;\n\n    protected ShippingLocation $shippingLocation;\n\n    protected Context $context;\n\n    private CashRoundingConfig $itemRounding;\n\n    private CashRoundingConfig $totalRounding;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Existing Mapping in Shopware Migration\nDESCRIPTION: This method from the MappingService retrieves an existing mapping from the database. It uses caching to improve performance and returns null if no mapping is found.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getMapping(\n    string $connectionId,\n    string $entityName,\n    string $oldIdentifier,\n    Context $context\n): ?array {\n    if (isset($this->mappings[md5($entityName . $oldIdentifier)])) {\n        return $this->mappings[md5($entityName . $oldIdentifier)];\n    }\n\n    $criteria = new Criteria();\n    $criteria->addFilter(new EqualsFilter('connectionId', $connectionId));\n    $criteria->addFilter(new EqualsFilter('entity', $entityName));\n    $criteria->addFilter(new EqualsFilter('oldIdentifier', $oldIdentifier));\n    $criteria->setLimit(1);\n\n    $result =  $this->migrationMappingRepo->search($criteria, $context);\n\n    if ($result->getTotal() > 0) {\n        /** @var SwagMigrationMappingEntity $element */\n        $element = $result->getEntities()->first();\n\n        $mapping = [\n            'id' => $element->getId(),\n            'connectionId' => $element->getConnectionId(),\n            'entity' => $element->getEntity(),\n            'oldIdentifier' => $element->getOldIdentifier(),\n            'entityUuid' => $element->getEntityUuid(),\n            'checksum' => $element->getChecksum(),\n            'additionalData' => $element->getAdditionalData(),\n        ];\n        $this->mappings[md5($entityName . $oldIdentifier)] = $mapping;\n\n        return $mapping;\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Docker containers for Shopware database\nDESCRIPTION: Commands to start, stop, and remove Docker containers for the Shopware database.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/symfony-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n\ndocker compose down\n\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Marking Entire Twig Template as Experimental\nDESCRIPTION: Example showing how to mark an entire Twig template as experimental using the annotation at the top of the file, before any template content.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# @experimental stableVersion:v6.6.0 feature:WISHLIST #}\n{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Using HTML for Bulleted Lists within Markdown Tables\nDESCRIPTION: Illustrates how to embed a bulleted list within a Markdown table cell using HTML `<ul>` and `<li>` tags. This approach is necessary because standard Markdown list syntax may not render correctly inside tables.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/01-text.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```text\n| Who is the audience? | What are their roles? |\n| :--- | :--- |\n| Fullstack Developer | <ul><li>Plugin Development</li><li>Templates</li><li>Routes/ Controllers</li></ul>|\n```\n```\n\n----------------------------------------\n\nTITLE: Ignore Links Configuration in HTML\nDESCRIPTION: Shows how to exclude specific links and forms from Ajax Panel behavior using ignore class.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/ajax-panel.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"http://www.shopware.com\" class=\"ignore--b2b-ajax-panel\">Go to Shopware Home</a>\n\n<form class=\"ignore--b2b-ajax-panel\">\n    [...]\n</form>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Cloudflare Deployment\nDESCRIPTION: GitHub Actions workflow configuration for automated deployment to Cloudflare Pages, including environment setup, build process, and deployment steps.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/best-practices/app-deployment/cloudflare.md#2025-04-22_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\non:\n  push:\n   # Specify the pipeline trigger\n   branches:\n      - main\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      deployments: write\n    name: Cloudflare Pages Deployment\n    # Specify the environment name\n    environment: production\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: pnpm/action-setup@v4\n        name: Install pnpm\n        with:\n          version: 8\n          run_install: false\n\n      - name: Install dependencies\n        run: |\n          pnpm install\n\n      - name: Build env file\n        run: |\n          touch .env\n          # echo ALLOW_ANONYMOUS_MERCURE=${{ vars.ALLOW_ANONYMOUS_MERCURE }} >> .env\n          echo SHOPWARE_STORE_API=${{ vars.SHOPWARE_STORE_API }} >> .env\n          echo SHOPWARE_ADMIN_API=${{ vars.SHOPWARE_ADMIN_API }} >> .env\n          echo SHOPWARE_STORE_API_ACCESS_TOKEN=${{ vars.SHOPWARE_STORE_API_ACCESS_TOKEN }} >> .env\n          echo SHOPWARE_STOREFRONT_URL=${{ vars.SHOPWARE_STOREFRONT_URL }} >> .env\n          echo ORIGIN=${{ vars.ORIGIN }} >> .env\n          cat .env\n\n      - name: Build code\n        run: |\n          npx nuxi build --preset=cloudflare_pages\n\n      - name: Publish to Cloudflare Pages\n        uses: cloudflare/pages-action@v1.5.0\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: YOUR_ACCOUNT_ID\n          projectName: YOUR_PROJECT_NAME\n          directory: dist\n          wranglerVersion: '3'\n```\n\n----------------------------------------\n\nTITLE: CMS Element Preview Template\nDESCRIPTION: Twig template for the preview display of the Dailymotion element, showing a placeholder image and play icon.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% block sw_cms_element_dailymotion_preview %}\n    <div class=\"sw-cms-el-preview-dailymotion\">\n        <img class=\"sw-cms-el-preview-dailymotion-img\"\n             :src=\"'customcmselement/static/img/background_dailymotion_preview.jpg' | asset\">\n\n        <sw-icon class=\"sw-cms-el-preview-dailymotion-icon\"\n                 name=\"multicolor-action-play\"></sw-icon>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Generating Entity-Relationship Diagram for Quote Management System using Mermaid\nDESCRIPTION: This Mermaid code snippet generates an entity-relationship diagram (ERD) for a quote management system. It defines entities such as Quote, QuoteComment, QuoteDelivery, QuoteDeliveryPosition, QuoteDocument, QuoteEmployee, QuoteLineItem, and QuoteTransaction, along with their attributes and relationships.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/quotes-management/concepts/entities-and-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    Quote {\n        id uuid PK\n        version_id uuid PK\n        auto_increment bigint\n        state_id uuid\n        customer_id uuid\n        order_id uuid\n        order_version_id uuid\n        quote_number varchar(64)\n        price json\n        shipping_costs json\n        discount json\n        amount_total double\n        amount_net double\n        custom_fields json\n    }\n    QuoteComment {\n        id uuid PK\n        version_id uuid PK\n        comment longtext\n        seen_at datetime(3)\n        quote_id uuid\n        quote_version_id uuid\n        state_id uuid\n        customer_id uuid\n    }\n    QuoteDelivery {\n        id uuid PK\n        version_id uuid PK\n        quote_id uuid\n        quote_version_id uuid\n        shipping_method_id uuid\n        shipping_costs json\n        custom_fields json\n    }\n    QuoteDeliveryPosition {\n        id uuid PK\n        version_id uuid PK\n        quote_line_item_id uuid\n        quote_line_item_version_id uuid\n        price json\n        total_price int\n        unit_price int\n        quantity int\n        custom_fields json\n    }\n    QuoteDocument {\n        id uuid PK\n        version_id uuid PK\n        document_number varchar(255)\n        document_type_id uuid\n        file_type varchar(255)\n        quote_id uuid\n        quote_version_id uuid\n        config json\n        custom_fields json\n    }\n    QuoteEmployee {\n        id uuid PK\n        version_id uuid PK\n        quote_id uuid\n        quote_version_id uuid\n        employee_id uuid\n        first_name varchar(255)\n        last_name varchar(255)\n    }\n    QuoteLineItem {\n        id uuid PK\n        version_id uuid PK\n        product_id uuid\n        product_version_id uuid\n        label varchar(255)\n        quantity int\n        type varchar(255)\n        payload json\n        price json\n        discount json\n        position int\n    }\n    QuoteTransaction {\n        id uuid PK\n        version_id uuid PK\n        quote_id uuid\n        quote_version_id uuid\n        payment_method_id uuid\n        amount json\n        custom_fields json\n    }\n    QuoteDelivery o{--|| Quote : \"has deliveries\"\n    QuoteDeliveryPosition o{--|| QuoteDelivery : \"has positions\"\n    QuoteLineItem o{--|| Quote : \"has line items\"\n    QuoteComment o{--|| Quote : \"has comments\"\n    QuoteTransaction o{--|| Quote : \"has transactions\"\n    QuoteDocument o{--|| Quote : \"has documents\"\n    QuoteEmployee o{--|| Quote : \"belongs to employee\"\n    QuoteDeliveryPosition o{--|| QuoteLineItem : \"has positions\"\n```\n\n----------------------------------------\n\nTITLE: Representing Blockquotes in Text Syntax - Text\nDESCRIPTION: This snippet shows how to use standard text blockquote notation ('>') to highlight quoted statements in documentation. This format is typical in markdown or plaintext files to demarcate quoted or commented sections. The only input is a line of text with the blockquote prefix, and output is visually separated quoted text.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/02-code.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> Added A Name preset according to new naming scheme.\n```\n\n----------------------------------------\n\nTITLE: Installing Required Symfony Packages for Database Management\nDESCRIPTION: Installs the Symfony maker-bundle and migrations packages using Composer. These packages are needed for database management and migration creation in the Shopware App Bundle.\nSOURCE: https://github.com/shopware/docs/blob/main/snippets/guide/app_database_setup.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer req symfony/maker-bundle migrations\n```\n\n----------------------------------------\n\nTITLE: Count Sorting Response Example\nDESCRIPTION: Example response showing the ordered results based on count sorting with aggregations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/search-criteria.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 3,\n    \"aggregations\": {\n        \"product-id\": {\n            \"buckets\": [\n                {\n                    \"key\": \"f977f6a845a54b0381cbaf322f53b63e\",\n                    \"count\": 5\n                },\n                {\n                    \"key\": \"8d0ee52433df44b78a6f7827180049d9\",\n                    \"count\": 4\n                },\n                {\n                    \"key\": \"003a9df163474b28bc8a000243549547\",\n                    \"count\": 3\n                }\n            ]\n        }\n    },\n    \"elements\": [\n        { \"id\": \"f977f6a845a54b0381cbaf322f53b63e\" },\n        { \"id\": \"8d0ee52433df44b78a6f7827180049d9\" },\n        { \"id\": \"003a9df163474b28bc8a000243549547\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing SCSS Dev Dependency File (JSON)\nDESCRIPTION: This refers to the `package.json` file, which lists SCSS as a development dependency. The text notes this dependency is present but discourages the use of SCSS for styling within the Sales Agent project in favor of UnoCSS.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/appearance.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\npackage.json\n```\n\n----------------------------------------\n\nTITLE: YAML Navigation Configuration\nDESCRIPTION: Navigation metadata configuration for the Digital Sales Rooms documentation page defining title and position.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/configuration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: Configuration\n  position: 30\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Feature Flag Management in Shopware\nDESCRIPTION: Command-line interface commands for enabling, disabling, and listing feature flags. These commands provide a convenient way to manage feature flags during development, testing, and in CI/CD pipelines.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-11-29-toggle-feature-flag-on-demand.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// to enable the feature FEATURE_EXAMPLE\nbin/console feature:enable FEATURE_EXAMPLE \n\n// to disable the feature FEATURE_EXAMPLE\nbin/console feature:disable FEATURE_EXAMPLE\n\n// to list all registered feature flags\nbin/console feature:list\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Collector Subscriber in PHP\nDESCRIPTION: Creates a Symfony event subscriber that defines and registers custom permissions. The subscriber implements EventSubscriberInterface and handles the PermissionCollectorEvent to add custom entity permissions with their respective dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/employee-management/guides/creating-own-permissions-via-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass PermissionCollectorSubscriber implements EventSubscriberInterface\n{\n    public const OWN_ENTITY_GROUP = 'own_entity';\n\n    // Here you define your custom permissions as constants\n    public const OWN_ENTITY_READ = 'own_entity.read';\n    \n    public const OWN_ENTITY_EDIT = 'own_entity.edit';\n    \n    public const OWN_ENTITY_CREATE = 'own_entity.create';\n    \n    public const OWN_ENTITY_DELETE = 'own_entity.delete';\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            PermissionCollectorEvent::NAME => [ 'onAddOwnPermissions' , 1000 ]\n        ];\n    }\n\n    // This method is called when the PermissionCollectorEvent is triggered\n    public function onAddOwnPermissions(PermissionCollectorEvent $event): void\n    {\n        $collection = $event->getCollection();\n\n        // Here you add your custom permissions to the permission collection\n        $collection->addPermission(self::EMPLOYEE_READ, self::OWN_ENTITY_GROUP, []);\n        $collection->addPermission(self::EMPLOYEE_EDIT, self::OWN_ENTITY_GROUP, [ self::EMPLOYEE_READ ]);\n        $collection->addPermission(self::EMPLOYEE_CREATE, self::OWN_ENTITY_GROUP, [ self::EMPLOYEE_READ, self::EMPLOYEE_EDIT ]);\n        $collection->addPermission(self::EMPLOYEE_DELETE, self::OWN_ENTITY_GROUP, [ self::EMPLOYEE_READ, self::EMPLOYEE_EDIT ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deployer PHP Configuration for Shopware 6\nDESCRIPTION: This PHP script configures Deployer for a Shopware 6 project. It sets up the deployment environment, defines shared files and directories, configures writable directories, and defines deployment tasks.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Deployer;\n\nrequire_once 'recipe/common.php';\nrequire_once 'contrib/cachetool.php';\n\nset('bin/console', '{{bin/php}} {{release_or_current_path}}/bin/console');\n\nset('cachetool', '/run/php/php-fpm.sock');\nset('application', 'Shopware 6');\nset('allow_anonymous_stats', false);\nset('default_timeout', 3600);\n\nhost('SSH-HOSTNAME')\n    ->setLabels([\n        'type' => 'web',\n        'env'  => 'production',\n    ])\n    ->setRemoteUser('www-data')\n    ->set('deploy_path', '/var/www/shopware')\n    ->set('http_user', 'www-data')\n    ->set('writable_mode', 'chmod')\n    ->set('keep_releases', 3);\n\nset('shared_files', [\n    '.env.local',\n    'install.lock',\n    'public/.htaccess',\n    'public/.user.ini',\n]);\n\nset('shared_dirs', [\n    'config/jwt',\n    'files',\n    'var/log',\n    'public/media',\n    'public/thumbnail',\n    'public/sitemap',\n]);\n\nset('writable_dirs', [\n    'config/jwt',\n    'custom/plugins',\n    'files',\n    'public/bundles',\n    'public/css',\n    'public/fonts',\n    'public/js',\n    'public/media',\n    'public/sitemap',\n    'public/theme',\n    'public/thumbnail',\n    'var',\n]);\n\ntask('sw:deployment:helper', static function() {\n   run('cd {{release_path}} && vendor/bin/shopware-deployment-helper run');\n});\n\ntask('sw:touch_install_lock', static function () {\n    run('cd {{release_path}} && touch install.lock');\n});\n\ntask('sw:health_checks', static function () {\n    run('cd {{release_path}} && bin/console system:check --context=pre_rollout');\n});\n\ndesc('Deploys your project');\ntask('deploy', [\n    'deploy:prepare',\n    'deploy:clear_paths',\n    'sw:deployment:helper',\n    \"sw:touch_install_lock\",\n    'sw:health_checks',\n    'deploy:publish',\n]);\n\ntask('deploy:update_code')->setCallback(static function () {\n    upload('.', '{{release_path}}', [\n        'options' => [\n            '--exclude=.git',\n            '--exclude=deploy.php',\n            '--exclude=node_modules',\n        ],\n    ]);\n});\n\nafter('deploy:failed', 'deploy:unlock');\nafter('deploy:symlink', 'cachetool:clear:opcache');\n```\n\n----------------------------------------\n\nTITLE: Importing Rule Creator Privileges into Promotion Editor Role using Shopware Privileges Service\nDESCRIPTION: This JavaScript snippet demonstrates how to define ACL privileges for a 'promotion' module in Shopware 6. It uses the `Shopware.Service('privileges').addPrivilegeMappingEntry` function to configure roles. Specifically, it shows the 'editor' role importing all privileges associated with 'rule.creator' by calling `Shopware.Service('privileges').getPrivileges('rule.creator')` within its `privileges` array, avoiding duplication and inheriting necessary permissions dynamically. This requires the Shopware `privileges` service.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2020-08-28-import-acl-privileges-from-other-roles.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nShopware.Service('privileges')\n    .addPrivilegeMappingEntry({\n        category: 'permissions',\n        parent: null,\n        key: 'promotion',\n        roles: {\n            viewer: {\n                privileges: ['promotion:read',],\n                dependencies: []\n            },\n            editor: {\n                privileges: [\n                    'promotion:update',\n                    Shopware.Service('privileges').getPrivileges('rule.creator')\n                ],\n                dependencies: [\n                    'promotion.viewer'\n                ]\n            }   \n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Marking Jest Test Files for Disabled Compat Mode in JavaScript\nDESCRIPTION: Example showing how to mark a Jest test file to run with disabled compatibility mode using the @group disabledCompat JSDoc tag. The tag signals that this test should be included in the disabled-compat test run.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-12-add-jest-runner-with-disabled-compat-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @package admin\n * @group disabledCompat\n */\n\nimport { mount } from '@vue/test-utils';\n\nasync function createWrapper() {\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Templates with Twig.Js\nDESCRIPTION: Example of current template system using Twig.Js blocks\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% block sw-component %}\n    <sw-card></sw-card>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Checkout Gateway App Response Format\nDESCRIPTION: JSON structure for app server responses, including commands for payment method removal and cart error handling.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-04-01-checkout-gateway.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"command\": \"remove-payment-method\",\n    \"payload\": {\n      \"paymentMethodTechnicalName\": \"payment-myApp-payment-method\"\n    }\n  },\n  {\n    \"command\": \"add-cart-error\",\n    \"payload\": {\n      \"reason\": \"Payment method not available for this cart.\",\n      \"level\": 20,\n      \"blockOrder\": true\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Price Collection in Twig\nDESCRIPTION: Example demonstrating how to create a new price collection in the default currency.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set price = services.cart.price.create({\n    'default': { 'gross': 19.99, 'net': 19.99}\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Translation Snippet Definition for Custom Flow Events - JSON\nDESCRIPTION: Defines JSON structure for localization of flow event trigger names in Shopware's administration interface. Keys must match those used in the flow.xml configuration. Includes sections for both trigger tree and flow list translations. Placed in the specified snippet directory within the app's Resources.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-06-17-integrate-app-into-flow-event.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"sw-flow-custom-event\\\": {\\n  \\\"event-tree\\\": {\\n    \\\"swag\\\": \\\"Swag\\\",\\n    \\\"before\\\": \\\"Before\\\",\\n    \\\"openTheDoors\\\": \\\"Open the doors\\\"\\n  },\\n  \\\"flow-list\\\": {\\n    \\\"swag_before_open_the_doors\\\": \\\"Before open the doors\\\"\\n  }\\n}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table with Auth ID for B2B User Ownership\nDESCRIPTION: SQL code to create a table with an auth_id column for B2B user ownership, including foreign key constraints.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `b2b_my` (\n    `id` INT(11) NOT NULL AUTO_INCREMENT,\n    `auth_id` INT(11) NULL DEFAULT NULL,\n\n    [...]\n\n    PRIMARY KEY (`id`),\n\n    CONSTRAINT `b2b_my_auth_user_id_FK` FOREIGN KEY (`auth_id`)\n      REFERENCES `b2b_store_front_auth` (`id`) ON UPDATE NO ACTION ON DELETE CASCADE\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Bootstrap Plugins with the New Utility\nDESCRIPTION: This JavaScript function call demonstrates how the new `BootstrapUtil` is invoked, likely within the main storefront JavaScript file (`main.js`), to initialize all configured Bootstrap plugins (Tooltips, Popovers).\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-09-23-add-bootstrap-util.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBootstrapUtil.initBootstrapPlugins()\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic Shopware 6 Configuration File Path\nDESCRIPTION: Shows the file path structure for the main Shopware 6 configuration file where customization options are stored.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<project root>\n└── config\n   └── packages\n      └── shopware.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Demo Data in Shopware\nDESCRIPTION: Commands to create test products in Shopware and refresh the index for testing purposes.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/k6.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=prod php bin/console framework:demodata\nAPP_ENV=prod php bin/console dal:refresh:index\n```\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=prod php bin/console framework:demodata --reset-defaults --products=5000\nAPP_ENV=prod php bin/console dal:refresh:index\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Lists in Markdown\nDESCRIPTION: Demonstrates the Markdown syntax for creating an ordered (numbered) list. This format is recommended when documenting sequential steps or a fixed number of items. Each item starts with a number followed by a period and a space.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/01-text.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nFollow the below steps to start your project:\n\n1. Create a docker-compose.yml file\n2. Start the Docker\n3. Prepare Development\n4. ...\n```\n```\n\n----------------------------------------\n\nTITLE: DevEnv Shell Reload Command\nDESCRIPTION: Command to manually reload the development environment shell.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndevenv shell\n```\n\n----------------------------------------\n\nTITLE: Disabling RabbitMQ Service in Platform Services YAML\nDESCRIPTION: This snippet shows how to disable RabbitMQ by commenting out its service configuration in the .platform/services.yaml file. No dependencies are required for disabling. The configuration includes details for RabbitMQ type and disk allocation, and commenting it out ensures the service is not started. Inputs are YAML configuration content; output is a deactivated RabbitMQ service upon redeployment. Ensure proper indentation and consistent commenting across all related entries.\nSOURCE: https://github.com/shopware/docs/blob/main/products/paas/rabbitmq.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n// .platform/services.yaml\\n#rabbitmq:\\n#   type: rabbitmq:3.8\\n#   disk: 1024\n```\n\n----------------------------------------\n\nTITLE: Adding Service Middleware\nDESCRIPTION: Demonstrates how to add middleware to check service status before execution.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/add-custom-service.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Application.addServiceProviderMiddleware('joker', (service, next) => {\n    if(!service.isActive) {\n        return next(new Error('Service is inActive'));\n    }\n\n    next();\n});\n\nShopware.Service().register('joker', (container) => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new JokeService(initContainer.httpClient);\n});\n```\n\n----------------------------------------\n\nTITLE: Restoring Shopware Database for E2E Testing\nDESCRIPTION: This command sets Shopware back to the state of the backup for E2E testing purposes.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console e2e:restore-db\n```\n\n----------------------------------------\n\nTITLE: Sorting Word List for Spellcheck\nDESCRIPTION: Bash command to alphabetically sort the .wordlist.txt file used for spellcheck exclusions. Uses LC_ALL=C for consistent sorting across systems.\nSOURCE: https://github.com/shopware/docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLC_ALL=C sort .wordlist.txt -o .wordlist.txt\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Styles for A11y HTML Documents\nDESCRIPTION: CSS styles applied to the HTML document version to ensure proper formatting and readability, including setting appropriate font sizes and line heights.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% block document_style_html %}\n    body {\n        max-width: 1200px;\n        margin: auto;\n        font-size: 14px;\n        line-height: 18px;\n    }\n    ...\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Table Ignore Configuration - YAML\nDESCRIPTION: YAML configuration to completely ignore specific tables (including structure) during dump generation.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/mysql-dump.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndump:\n  ignore:\n    - <table-name>\n```\n\n----------------------------------------\n\nTITLE: Displaying Order-related Events Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing various order-related events in Shopware, including their triggers and possible actions.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/flow-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| state_enter.order_transaction.state.refunded           | Triggers when an order payment enters status \"Refunded\"                                           | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_transaction.state.refunded           | Triggers when an order payment leaves status \"Refunded\"                                           | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_transaction.state.in_progress        | Triggers when an order payment enters status \"In progress\"                                        | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_transaction.state.in_progress        | Triggers when an order payment leaves status \"In progress\"                                        | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_delivery.state.returned_partially    | Triggers when an order delivery enters status \"Return partially\"                                  | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_delivery.state.returned_partially    | Triggers when an order delivery leaves status \"Return partially\"                                  | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_delivery.state.returned              | Triggers when an order delivery enters status \"Returned\"                                          | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_delivery.state.returned              | Triggers when an order delivery leaves status \"Returned\"                                          | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_delivery.state.cancelled             | Triggers when an order delivery enters status \"Cancelled\"                                         | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_delivery.state.cancelled             | Triggers when an order delivery leaves status \"Cancelled\"                                         | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_delivery.state.open                  | Triggers when an order delivery enters status \"Open\"                                              | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_delivery.state.open                  | Triggers when an order delivery leaves status \"Open\"                                              | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_delivery.state.shipped               | Triggers when an order delivery enters status \"Shipped\"                                           | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_delivery.state.shipped               | Triggers when an order delivery leaves status \"Shipped\"                                           | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_delivery.state.shipped_partially     | Triggers when an order delivery enters status \"Shipped partially\"                                 | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_delivery.state.shipped_partially     | Triggers when an order delivery status is changed from \"Shipped partially\" to from another status | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order.state.in_progress                    | Triggers when an order enters status \"In progress\"                                                | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order.state.in_progress                    | Triggers when an order leaves status \"In progress\"                                                | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order.state.completed                      | Triggers when an order enters status \"Completed\"                                                  | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order.state.completed                      | Triggers when an order leaves status \"Completed\"                                                  | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order.state.open                           | Triggers when an order enters status \"Open\"                                                       | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order.state.open                           | Triggers when an order leaves status \"Open\"                                                       | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order.state.cancelled                      | Triggers when an order enters status \"Cancelled\"                                                  | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order.state.cancelled                      | Triggers when an order leaves status \"Cancelled\"                                                  | Add/remove tag, send mail, generate document, set order status |\n| state_enter.order_transaction.state.unconfirmed        | Triggers when an order payment enters status \"Unconfirmed\"                                        | Add/remove tag, send mail, generate document, set order status |\n| state_leave.order_transaction.state.unconfirmed        | Triggers when an order payment leaves status \"Unconfirmed\"                                        | Add/remove tag, send mail, generate document, set order status |\n```\n\n----------------------------------------\n\nTITLE: Checking Cacheability in Original Sales Channel Context Factory (PHP)\nDESCRIPTION: Demonstrates the `isCacheable` method within `CachedSalesChannelContextFactory`. This method checks if customer-specific data (customer ID, billing address ID, shipping address ID) is present in the options array. If any of these are set (indicating a logged-in user with specific selections), the method returns false, preventing the sales channel context from being cached and forcing regeneration.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-base-context-factory.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\System\\SalesChannel\\Context;\n\nclass CachedSalesChannelContextFactory extends AbstractSalesChannelContextFactory\n{\n    public function create(string $token, string $salesChannelId, array $options = []): SalesChannelContext\n    {\n        if (!$this->isCacheable($options)) {\n            return $this->getDecorated()->create($token, $salesChannelId, $options);\n        }\n\n        // ...\n    }\n\n    private function isCacheable(array $options): bool\n    {\n        return !isset($options[SalesChannelContextService::CUSTOMER_ID])\n            && !isset($options[SalesChannelContextService::BILLING_ADDRESS_ID])\n            && !isset($options[SalesChannelContextService::SHIPPING_ADDRESS_ID]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Sections in Vue Templates with sw-extension-component-section\nDESCRIPTION: Shows how to add a component section using the sw-extension-component-section component with a position identifier, which allows rendering components in place via the SDK.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-16-deprecating-sdk-public-api.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <sw-extension-component-section\n        position-identifier=\"sw-chart-card__before\"\n    />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Order Placement Events for Stock Updates in Shopware 6 (PHP)\nDESCRIPTION: This code snippet demonstrates how Shopware 6 updates available stock directly within the CheckoutOrderPlaced event handler. It aggregates product quantities, reduces database load by issuing targeted update queries per product, and then invokes a method to update availability flags. Dependencies include the database connection, event context, and the RetryableQuery utility. Inputs are the CheckoutOrderPlacedEvent details; the output is a database update to the product's available_stock. This approach aims for efficiency in high-load scenarios and assumes valid product and order structures.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-03-25-available-stock.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function orderPlaced(CheckoutOrderPlacedEvent $event): void\n{\n    $ids = [];\n    foreach ($event->getOrder()->getLineItems() as $lineItem) {\n        if ($lineItem->getType() !== LineItem::PRODUCT_LINE_ITEM_TYPE) {\n            continue;\n        }\n\n        if (!\\array_key_exists($lineItem->getReferencedId(), $ids)) {\n            $ids[$lineItem->getReferencedId()] = 0;\n        }\n\n        $ids[$lineItem->getReferencedId()] += $lineItem->getQuantity();\n    }\n\n    // order placed event is a high load event. Because of the high load, we simply reduce the quantity here instead of executing the high costs `update` function\n    $query = new RetryableQuery(\n        $this->connection,\n        $this->connection->prepare('UPDATE product SET available_stock = available_stock - :quantity WHERE id = :id')\n    );\n\n    foreach ($ids as $id => $quantity) {\n        $query->execute(['id' => Uuid::fromHexToBytes((string) $id), 'quantity' => $quantity]);\n    }\n\n    $this->updateAvailableFlag(\\array_keys($ids), $event->getContext());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Bundle Paths\nDESCRIPTION: YAML configuration for specifying additional bundle paths when building extensions with multiple bundles.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# .shopware-extension.yml\nbuild:\n  extraBundles:\n    # Assumes the bundle name is the same as the directory name\n    - path: src/Foo\n    # Explicitly specify the bundle name\n    - path: src/Foo\n      name: Foo\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Search Input Field in Twig\nDESCRIPTION: Creates an input field with product search autocompletion functionality. The code disables browser's default autocompletion and connects to a B2B product search endpoint.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/storefront/product-search.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"b2b--search-container\">\n    <input type=\"text\" name=\"\" data-product-search=\"{{ path('frontend.b2b.b2bproductsearch.searchProduct') }}\" value=\"\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Optimized Media Loading in Product Listings with Twig\nDESCRIPTION: A Twig template example for efficiently loading media objects in product listings. It demonstrates how to collect all media IDs first and then fetch them in a single database query, avoiding performance issues with loops.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/custom-fields-of-type-media.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/views/storefront/component/product/listing.html.twig\n{% sw_extends '@Storefront/storefront/component/product/listing.html.twig' %}\n\n{% block element_product_listing_col %}\n    {# initial ID array #}\n    {% set sportsMediaIds = [] %}\n\n    {% for product in searchResult %}\n        {# simplify ID access #}\n        {% set sportsMediaId = product.translated.customFields.custom_sports_media_id %}\n\n        {# merge IDs to a single array #}\n        {% set sportsMediaIds = sportsMediaIds|merge([sportsMediaId]) %}\n    {% endfor %}\n\n    {# do a single fetch from database #}\n    {% set mediaCollection = searchMedia(sportsMediaIds, context.context) %}\n\n    {% for product in searchResult %}\n        {# simplify ID access #}\n        {% set sportsMediaId = product.translated.customFields.custom_sports_media_id %}\n\n        {# get access to media of product #}\n        {% set sportsMedia = mediaCollection.get(sportsMediaId) %}\n\n        {{ dump(sportsMedia) }}\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering the Store API Route Decorator in services.xml\nDESCRIPTION: This XML configuration registers the ExampleRouteDecorator in the service container, decorating the original ExampleRoute. It injects the example repository and the inner decorated service as dependencies.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/store-api/override-existing-route.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n// <plugin root>/src/Resources/config/services.xml\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        ...\n\n        <service id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRouteDecorator\" decorates=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRoute\" public=\"true\">\n            <argument type=\"service\" id=\"swag_example.repository\"/>\n            <argument type=\"service\" id=\"Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel\\ExampleRouteDecorator.inner\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Plugins Table in Markdown\nDESCRIPTION: A markdown table listing various example plugins for the B2B Suite, including their file names and descriptions. The table covers plugins for ACL implementation, Ajax Panels, audit log, authentication, login customization, REST API routing, service extension, and template extension.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/example-plugins/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Plugin                                 | Description                                                                                            |\n|----------------------------------------|--------------------------------------------------------------------------------------------------------|\n| [B2bAcl](B2bAcl.zip)                   | A plugin to show our ACL implementation incl. frontend usage. It also shows the CRUD and listing usage |\n| [B2bAjaxPanel](B2bAjaxPanel.zip)       | Example to show our Ajax Panels and how to use them                                                    |\n| [B2bAuditLog](B2bAuditLog.zip)         | A implementation of our audit log component                                                            |\n| [B2bAuth](B2bAuth.zip)                 | Login as a certain user                                                                                |\n| [B2bLogin](B2bLogin.zip)               | Exchange the E-Mail login with a staff-number login                                                    |\n| [B2bRestApi](B2bRestApi.zip)           | Plugin to show the `RestApi` Routing                                                                   |\n| [B2bServiceExtension](B2bServiceExtension.zip) | Plugin to show how to extend a Service                                                         |\n| [B2bTemplateExtension](B2bTemplateExtension.zip) | Plugin to show how to extend the **SwagB2bPlatform** templates                               |\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Metadata in Markdown for Shopware Docs\nDESCRIPTION: This snippet defines the navigation metadata for a 'Best practices' section in Shopware documentation. It specifies the title and position of the section in the navigation structure.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/best-practices/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnav:\n  title: Best practices\n  position: 40\n\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Favicon Asset Path (File Path)\nDESCRIPTION: This file path indicates the location (`./public/favicon.ico`) where the custom favicon image file should be placed to override the default Sales Agent browser icon. Square dimensions are recommended.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/appearance.md#2025-04-22_snippet_2\n\nLANGUAGE: filepath\nCODE:\n```\n./public/favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for DAL Documentation\nDESCRIPTION: Defines the navigation structure and metadata for the Data Abstraction Layer documentation page using YAML frontmatter and markdown syntax.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnav:\n  title: Data Handling / DataAbstractionLayer\n  position: 10\n\n---\n\n# Data Handling/DataAbstractionLayer\n\nThe data handling, or the Data Abstraction Layer \\(DAL\\), can be an overwhelming topic. Yet, if you know the right start, it will be fairly easy to deal with.\n\nHence, here are some good starting topics:\n\n<PageRef page=\"add-custom-complex-data\" />\n\n<PageRef page=\"reading-data\" />\n\n<PageRef page=\"writing-data\" />\n\nAlso, [listening to events](using-database-events) of the DAL will come in handy for sure.\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber for Product Listing in PHP\nDESCRIPTION: Creates an event subscriber class that handles product listing resolution through API calls. Demonstrates how to implement custom logic for loading product data using the event-based system.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-06-18-extended-event-system.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Shopware\\Tests\\Examples;\n\nuse GuzzleHttp\\ClientInterface;\nuse Shopware\\Core\\Content\\Product\\Extension\\ResolveListingExtension;\nuse Shopware\\Core\\Content\\Product\\ProductCollection;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nreadonly class ResolveListingExample implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            'listing-loader.resolve.pre' => 'replace',\n        ];\n    }\n\n    /**\n     * @param EntityRepository<ProductCollection> $repository\n     */\n    public function __construct(\n        // you can inject your own services\n        private ClientInterface $client,\n        private EntityRepository $repository\n    ) {\n    }\n\n    public function replace(ResolveListingExtension $event): void\n    {\n        $criteria = $event->criteria;\n\n        // building a json aware array for the API call\n        $context = [\n            'salesChannelId' => $event->context->getSalesChannelId(),\n            'currencyId' => $event->context->getCurrency(),\n            'languageId' => $event->context->getLanguageId(),\n        ];\n\n        // do an api call against your own server or another storage, or whatever you want\n        $ids = $this->client->request('GET', 'https://your-api.com/listing-ids', [\n            'query' => [\n                'criteria' => json_encode($criteria),\n                'context' => json_encode($context),\n            ],\n        ]);\n\n        $data = json_decode($ids->getBody()->getContents(), true);\n\n        $criteria = new Criteria($data['ids']);\n\n        $event->result = $this->repository->search($criteria, $event->context->getContext());\n\n        // stop the event propagation, so the core function will not be executed\n        $event->stopPropagation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Language Identifier in Markdown Code Fences - Markdown\nDESCRIPTION: This snippet shows how to declare a language identifier for a fenced code block in markdown to enable syntax highlighting. It demonstrates the syntax for creating a code fence with the 'markdown' language specifier. No dependencies are needed. Input and output are both markdown.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/02-code.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nLanguage identifier is markdown here.  \n```\n```\n\n----------------------------------------\n\nTITLE: Failure Response for Finalize Endpoint in JSON\nDESCRIPTION: Example of a failure response from the Finalize endpoint, indicating insufficient funds for the payment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/payment-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"message\": \"The user did not have adequate funds.\"\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Namespace Reference for ProductSuggestRouteDecorator\nDESCRIPTION: Reference to the PHP namespace path for the ProductSuggestRoute decorator class that handles product suggestion functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/Search-and-suggest-routes.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Commercial\\AdvancedSearch\\Domain\\Suggest\\ProductSuggestRouteDecorator\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Cache Invalidation with MySQL in Shopware\nDESCRIPTION: Configuration for enabling delayed cache invalidation using MySQL as storage, recommended only when Redis is not available.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/shopware.yaml\nshopware:\n    cache:\n        invalidation:\n            delay: 1 # 0 = disabled, 1 = enabled\n            delay_options:\n                storage: mysql\n```\n\n----------------------------------------\n\nTITLE: Opening a New Tab Response with PHP SDK\nDESCRIPTION: PHP SDK example showing how to create a response that opens a new tab in the user's browser after an action button is clicked.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Response\\ActionButtonResponse;\n\nActionButtonResponse::openNewTab('https://www.shopware.com');\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Inheritance in Shopware\nDESCRIPTION: This snippet demonstrates how to configure theme inheritance in Shopware. It shows how to specify additional themes from which the current theme will inherit fields configuration and snippets.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/theme-configuration.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/theme.json\n{\n  ...\n  \"configInheritance\": [\n     \"@Storefront\", \n     \"@BasicTheme\"\n   ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Splitting Product Line Items in Twig\nDESCRIPTION: This snippet demonstrates how to add a product to the cart, split an existing line item by taking a quantity of 2, and add the split item back to the cart.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% do services.cart.products.add(hook.ids.get('p1'), 5) %}\n\n{% set product = services.cart.products.get(hook.ids.get('p1')) %}\n\n{% set split = product.take(2, 'new-key') %}\n\n{% do services.cart.products.add(split) %}\n```\n\n----------------------------------------\n\nTITLE: Custom Component Registration in Shopware 6.7\nDESCRIPTION: Example of current component registration using Shopware's custom system\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/vue-native.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Component.register('sw-component', {\n    template,\n\n    //...\n});\n```\n\n----------------------------------------\n\nTITLE: Blackfire Configuration\nDESCRIPTION: Configuration for enabling and setting up Blackfire profiler in devenv.local.nix.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.blackfire.enable = true;\n  services.blackfire.server-id = \"<SERVER_ID>\";\n  services.blackfire.server-token = \"<SERVER_TOKEN>\";\n  services.blackfire.client-id = \"<CLIENT_ID>\";\n  services.blackfire.client-token = \"<CLIENT_TOKEN>\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User via Shopware API - Bash\nDESCRIPTION: This snippet shows how to create a new user by sending a POST request to the Shopware '/api/user' endpoint using curl in Bash. It requires the 'x-api-key' header (set via the environment key 'API_AUTH_SECRET_KEY') and a JSON payload that includes 'name', 'email', 'id', and 'password'. The output reflects success or failure of user creation based on the server response. Required dependencies include curl and a valid Shopware instance with API access.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/users.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST -H 'x-api-key: <secret>' -H \"Content-type: application/json\" -d '{\n    \"name\": <name>,\n    \"email\": <email>,\n    \"id\": <id>,\n    \"password\": <password>\n}' '<sales_agent_instance_url>/api/user'\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Removal in YAML\nDESCRIPTION: YAML configuration example showing how to mark an extension for removal in the Shopware Deployment Helper configuration file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-helper.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndeployment:\n  extension-management:\n    enabled: true\n\n    overrides:\n      TheExtensionWeWantToGetRidOf:\n        # This plugin will be uninstalled if it is installed\n        state: remove\n        # should the extension data of an uninstalled extension be kept\n        keepUserData: true\n```\n\n----------------------------------------\n\nTITLE: Displaying B2B Events Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing B2B-specific events in Shopware, including the event class, description, and associated component.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/flow-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Class                     | Description                                            | Component           |\n|:--------------------------|:-------------------------------------------------------|:--------------------|\n| collect.permission-events | Triggers when base permissions are created             | Employee Management |\n| employee.invite.sent      | Triggers when an employee invitation has been sent     | Employee Management |\n| employee.invite.accepted  | Triggers when an employee invitation has been accepted | Employee Management |\n| employee.recovery.request | Triggers when an employee requests password recovery   | Employee Management |\n| employee.status.changed   | Triggers when the status of an employee changes        | Employee Management |\n| employee.role.changed     | Triggers when the role of an employee changes          | Employee Management |\n| employee.order.placed     | Triggers when an employee places an order              | Employee Management |\n```\n\n----------------------------------------\n\nTITLE: Table Where Clause Configuration - YAML\nDESCRIPTION: YAML configuration to add WHERE clauses for filtering specific table data during export.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/mysql-dump.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndump:\n  where:\n    <table-name>: 'id > 5'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom E2E Commands Table in Markdown\nDESCRIPTION: This markdown snippet defines a table of custom Cypress commands for Shopware E2E testing. It includes command names, parameters, and descriptions for various categories of commands.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-custom-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command | Parameter | Description |\n| :--- | :--- | :--- |\n| setLocaleToEnGb | - | Switches administration UI locale to EN\\_GB |\n| login | `(userType)` | Logs in to the Administration manually |\n| typeAndCheck | `(textToType)` | Types in an input element and checks if the content was correctly typed |\n| clearTypeAndCheck | `(textToType)` | Clears field, types in an input element and checks if the content was correctly typed |\n| typeMultiSelectAndCheck | `(textToType, { searchTerm: searchTerm })` | Types in a sw-select field and checks if the content was correctly typed \\(multi select\\) |\n| typeSingleSelect | `(textToType, selector)` | Types in an sw-select field \\(single select\\) |\n| typeSingleSelectAndCheck | `(textToType, selector)` | Types in an sw-select field and checks if the content was correctly typed \\(single select\\) |\n| typeLegacySelectAndCheck | `(textToType, { searchTerm: searchTerm })` | Types in an legacy swSelect field and checks if the content was correctly typed |\n| typeAndCheckSearchField | `(searchTerm)` | Types in the global search field and verify search terms in url |\n| awaitAndCheckNotification | `(message)` | Wait for a notification to appear and check its message |\n| clickContextMenuItem | `(actionInMenuSelector, openMenuSelector, scope = '')` | Click context menu in order to cause a desired action |\n| clickMainMenuItem | `({ targetPath, mainMenuId, subMenuId })` | Navigate to module by clicking the corresponding main menu item |\n| openUserActionMenu | `({ targetPath, mainMenuId, subMenuId })` | Click user menu to open it up |\n| dragTo | `(target)` | Drags the previous subject element to a target, performing a drag and drop operation |\n| onlyOnFeature | `(feature)` | Only run the test \\(skip otherwise\\) if the feature is activated |\n| skipOnFeature | `(feature)` | Skip the test if the feature is activated |\n```\n\n----------------------------------------\n\nTITLE: Installing the App via Shopware CLI\nDESCRIPTION: Command to upload and activate the ProductTranslator extension using Shopware CLI tools with version increment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nshopware-cli project extension upload ProductTranslator/release --activate --increase-version\n```\n\n----------------------------------------\n\nTITLE: Defining the StorableFlow Class in PHP\nDESCRIPTION: This PHP class `StorableFlow` is designed to hold flow data independently of the original event. It contains a `$store` array for scalar, serializable data representation and a `$data` array for the restored, non-serializable object data. Methods are provided to set and get data from both storage types.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-07-21-adding-the-storable-flow-to-implement-delay-action-in-flow-builder.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass StorableFlow\n{\n    // contains the scalar values based on the original events\n    // $store can be serialized and used to restore the object data\n    protected array $store = [];\n    \n    // contains the restored object data like the data we defined in the `availableData` in original events \n    // $data can not be serialized, but can be restored from $store\n    protected array $data = [];\n      \n    public function __construct(array $store = [], array $data = [])\n    {\n        $this->store = $store;\n        $this->data = $data;\n    }\n    \n    // This method will be called in each `Storer` to store the representation of data\n    public function setStore(string $key, $value) {\n        $this->store[$key] = $value;\n    }\n    \n    public function getStore(string $key) {\n        return $this->store[$key];\n    }\n    \n    // After we restored the data in `Storer`, we can set the data, we'll use `$this->data` instead getter data on original event\n    public function setData(string $key, $value) {\n        $this->data[$key] = $value;\n    }\n    \n    public function getData(string $key) {\n        return $this->data[$key];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Environment Start Command\nDESCRIPTION: Command to initialize and start the Docker environment for Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./psh.phar docker:start\n```\n\n----------------------------------------\n\nTITLE: Starting Shopware Docker Containers\nDESCRIPTION: Command to start the Docker containers for a Shopware project using the provided Makefile. This starts all necessary services in the background.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake up\n```\n\n----------------------------------------\n\nTITLE: Using Shopware CLI in GitLab CI pipeline\nDESCRIPTION: YAML configuration for GitLab CI that uses a Shopware CLI Docker image to run commands in a build job.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  stage: build\n  image:\n    name: shopware/shopware-cli:latest\n    entrypoint: [ \"/bin/sh\", \"-c\" ]\n  script:\n    - shopware-cli --version\n```\n\n----------------------------------------\n\nTITLE: Logging in to Shopware Account API using CLI\nDESCRIPTION: This command initiates an interactive login process for the Shopware Account API. It prompts the user for their credentials.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account login\n```\n\n----------------------------------------\n\nTITLE: Listing All Extensions in Shopware CLI\nDESCRIPTION: This command lists all extensions installed in the Shopware project using the Shopware CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension list\n```\n\n----------------------------------------\n\nTITLE: Removing Payment Method Command in Shopware 6\nDESCRIPTION: This command removes a payment method from the available payment methods. It requires the technical name of the payment method as a string payload.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/gateways/checkout/command-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `remove-payment-method`  | Removes a payment method from the available payment methods.                                                                                                 | `{\"paymentMethodTechnicalName\": \"string\"}`                     | 6.6.3.0 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Front Matter in Markdown ADRs\nDESCRIPTION: Example of using YAML front matter in ADR markdown files to include metadata like title, date, area, and tags. This approach replaces folder-based organization and enables better content structuring, searching, and filtering across different platforms.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-20-unstructured-adrs.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Unstructured ADRs\ndate: 2023-02-23\narea: Product Operation #I added prod-ops because this is a workflow topic\ntags: [ADR, file structure, workflow]\n---\n```\n\n----------------------------------------\n\nTITLE: Flow Action with TransactionalAction Interface (After)\nDESCRIPTION: Updated implementation using the new TransactionalAction interface. The flow executor automatically wraps the action in a database transaction, eliminating the need for manual transaction handling code.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-02-11-transactional-flow-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SetOrderStateAction extends FlowAction implements DelayableAction, TransactionalAction\n{\n    public function handleFlow(StorableFlow $flow): void\n    {        \n        //do stuff - will be wrapped in a transaction\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Profile Component - Shopware Administration - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import and register the previously created custom migration profile credential form component in the Shopware Administration's main entry point. It ensures the credentials page component becomes available throughout the application's component registry, and requires the component source path to be correctly specified.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './own-profile/profile';\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameters for Flow Action in Shopware 6\nDESCRIPTION: Illustrates how to set up parameters for a flow action, including dynamic content using variables from the trigger event.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/flow-builder/add-custom-flow-actions-from-app-system.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<flow-action>\n    <meta>\n        ...\n    </meta>\n    <headers>\n        ...\n    </headers>\n    <parameters>\n        <parameter type=\"string\" name=\"text\" value=\"{{ message }} \\n Order Number: {{ order.orderNumber }}\"/>\n    </parameters>\n    ...\n</flow-action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining navigation settings for the IDE documentation page, specifying the title and position in the navigation hierarchy.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/ide/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: IDE\n  position: 20\n```\n\n----------------------------------------\n\nTITLE: Starting Services with Docker Compose - Shell\nDESCRIPTION: This shell command brings up all services defined in the local 'docker-compose.yml' file, initializing the application's Dockerized environment. Requires Docker and Docker Compose to be installed, and a suitable compose file to be present. Input: none or service overrides. Output: running service containers, logs to terminal.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Extending Storefront Footer Template in Twig for Shopware 6\nDESCRIPTION: This Twig template extends the default Storefront footer template to display the product count. It adds a new column to the navigation block if the product count extension is available.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_9\n\nLANGUAGE: Twig\nCODE:\n```\n{% sw_extends '@Storefront/storefront/layout/footer/footer.html.twig' %}\n\n{% block layout_footer_navigation_columns %}\n    {{ parent() }}\n\n    {% if page.footer.extensions.product_count %}\n        <div class=\"col-md-4 footer-column\">\n            <p>This shop offers you {{ page.footer.extensions.product_count.count }} products</p>\n        </div>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on macOS\nDESCRIPTION: Homebrew command to install Node.js version 22 on macOS. This single command sets up the required Node.js environment for Shopware 6 on macOS systems.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/requirements.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node@22\n```\n\n----------------------------------------\n\nTITLE: Defining Twig Block Structure in B2B Suite\nDESCRIPTION: Demonstrates the convention for creating Twig template blocks in the B2B Suite. All blocks should be prefixed with 'b2b_' and empty blocks should be written in a single line.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/concept/basic-conventions.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% block b2b_* %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer JSON for Shopware 6.7 Compatibility\nDESCRIPTION: JSON configuration to update the composer.json file for compatibility with Shopware 6.7. This enables the fixers for the 6.7 version.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/extension-verifier.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"minimum-stability\": \"dev\",\n    \"require\": {\n        \"shopware/core\": \"~6.7.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Plugin List in Shopware 6\nDESCRIPTION: Command to refresh the list of plugins that Shopware is aware of. This should be run after creating a new plugin to make it discoverable by Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-base-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console plugin:refresh\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Running Check Context in PHP\nDESCRIPTION: Shows implementation of long-running check contexts that are CLI-only operations, suitable for extensive system checks like log file analysis.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-08-02-system-health-check.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    protected function allowedSystemCheckExecutionContexts(): array\n    {\n        return \\Shopware\\Core\\Framework\\SystemCheck\\Check\\SystemCheckExecutionContext::longRunning();\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with pnpm - Shell\nDESCRIPTION: This shell command starts the Shopware SalesAgent development server using pnpm's 'dev' script. It requires that dependencies are already installed and that there is an appropriate entry in 'package.json' under scripts. Input: none. Output: development server running for live testing and debugging.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Theme Configuration\nDESCRIPTION: Shows the file structure for the theme configuration, including the index file and a specific configuration file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/build-w-o-db.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\na729322c1f4e4b4e851137c807b4f363.json\nindex.json\n```\n\n----------------------------------------\n\nTITLE: Documenting B2B Rules - Markdown Table\nDESCRIPTION: Markdown table documenting B2B-specific rules including employee management rules.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/rules-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Class                         | Description                                                           | Component           |\n|:------------------------------|:----------------------------------------------------------------------|:--------------------|\n| EmployeeOrderRule             | Matches if the order was placed by an employee                        | Employee Management |\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Schema for Shopware APIs\nDESCRIPTION: This snippet provides the endpoint for accessing the schema definitions of all available entities for both Admin API and Store API. The path is relative and requires choosing between 'api' or 'store-api'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/integrations-api/general-concepts/generated-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/(api|store-api)/_info/open-api-schema.json\n```\n\n----------------------------------------\n\nTITLE: Starting Production Deployment with Docker Compose (bash)\nDESCRIPTION: This command initiates the Nuxt project in production mode using Docker Compose with a production-specific configuration file. It assumes Docker and Docker Compose are installed and the 'docker-compose.prod.yml' file is present in the project root. The input is the Docker Compose CLI command, which launches any defined containers, including application server and dependencies. Outputs are running containers, set up according to production needs. Limitation: verify that custom storage adapter and environment variables are included in the Docker configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/sales-agent/deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.prod.yml up\n```\n\n----------------------------------------\n\nTITLE: Creating Bulleted Lists using Asterisks in Markdown\nDESCRIPTION: Shows the syntax for creating a simple unordered (bulleted) list using an asterisk (*) followed by a space in Markdown. This format is suitable for general lists where the order of items is not significant.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/01-text.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```text\nYou can install Shopware on Mac with the help of tools like:\n\n* Docker\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy VirtualHost Port\nDESCRIPTION: Nix configuration for customizing Caddy VirtualHost port settings, including PHP-FPM configuration for Shopware development.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.caddy.virtualHosts.\":8029\" = {\n    extraConfig = ''\n      root * public\n      php_fastcgi unix/${config.languages.php.fpm.pools.web.socket}\n      file_server\n    '';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Database Table Structure in SQL\nDESCRIPTION: SQL schema definition for creating the base ACL relation table structure that manages entity access permissions.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/entity-acl.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `b2b_acl_*` (\n    `id` INT(11) NOT NULL AUTO_INCREMENT,\n    `entity_id` INT(11) NOT NULL, \n    `referenced_entity_id` INT(11) NOT NULL,\n    `grantable` TINYINT(4) NOT NULL DEFAULT '0',\n    \n    [...]\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Composer Dependency in Bash\nDESCRIPTION: Command to update a specific dependency using Composer, useful for addressing security vulnerabilities in third-party packages.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/cluster-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update <dependency-name>\n```\n\n----------------------------------------\n\nTITLE: Oh My ZSH Nix Configuration\nDESCRIPTION: Example configuration block for Nix in zshrc file when using Oh My ZSH.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Nix\n\n# ... content ...\n\n# End Nix\n```\n\n----------------------------------------\n\nTITLE: Implementing a Shopware Local Gateway for Data Migration (PHP)\nDESCRIPTION: This PHP class implements the ShopwareLocalGateway, which forms the core for reading data from and exchanging environment information with a Shopware 5 source system locally. It uses injected services (such as reader registries, connection factories, and repositories) to read environment info, entity tables, and totals, handling potential connection errors and setting up context-aware data retrieval. Key methods include getName, supports, read, readEnvironmentInformation, and readTable. Dependencies are numerous Shopware migration classes; inputs typically include a migration context and an application context; outputs are arrays or transfer objects. The class handles absent connections, missing data, and provides robust integration via interface adherence.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/gateway-and-reader.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\\n\\nnamespace SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Local;\\n\\nuse Shopware\\Core\\Defaults;\\nuse Shopware\\Core\\Framework\\Context;\\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;\\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\\nuse Shopware\\Core\\System\\Currency\\CurrencyEntity;\\nuse SwagMigrationAssistant\\Migration\\EnvironmentInformation;\\nuse SwagMigrationAssistant\\Migration\\Gateway\\Reader\\EnvironmentReaderInterface;\\nuse SwagMigrationAssistant\\Migration\\Gateway\\Reader\\ReaderRegistry;\\nuse SwagMigrationAssistant\\Migration\\MigrationContextInterface;\\nuse SwagMigrationAssistant\\Migration\\RequestStatusStruct;\\nuse SwagMigrationAssistant\\Profile\\Shopware\\Exception\\DatabaseConnectionException;\\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Connection\\ConnectionFactoryInterface;\\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\ShopwareGatewayInterface;\\nuse SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\TableReaderInterface;\\nuse SwagMigrationAssistant\\Profile\\Shopware\\ShopwareProfileInterface;\\n\\nclass ShopwareLocalGateway implements ShopwareGatewayInterface\\n{\\n    public const GATEWAY_NAME = 'local';\\n\\n    private ReaderRegistry $readerRegistry;\\n\\n    private EnvironmentReaderInterface $localEnvironmentReader;\\n\\n    private TableReaderInterface $localTableReader;\\n\\n    private ConnectionFactoryInterface $connectionFactory;\\n\\n    private EntityRepository $currencyRepository;\\n\\n    public function __construct(\\n        ReaderRegistry $readerRegistry,\\n        EnvironmentReaderInterface $localEnvironmentReader,\\n        TableReaderInterface $localTableReader,\\n        ConnectionFactoryInterface $connectionFactory,\\n        EntityRepository $currencyRepository\\n    ) {\\n        $this->readerRegistry = $readerRegistry;\\n        $this->localEnvironmentReader = $localEnvironmentReader;\\n        $this->localTableReader = $localTableReader;\\n        $this->connectionFactory = $connectionFactory;\\n        $this->currencyRepository = $currencyRepository;\\n    }\\n\\n    public function getName(): string\\n    {\\n        return self::GATEWAY_NAME;\\n    }\\n\\n    public function getSnippetName(): string\\n    {\\n        return 'swag-migration.wizard.pages.connectionCreate.gateways.shopwareLocal';\\n    }\\n\\n    public function supports(MigrationContextInterface $migrationContext): bool\\n    {\\n        return $migrationContext->getProfile() instanceof ShopwareProfileInterface;\\n    }\\n\\n    public function read(MigrationContextInterface $migrationContext): array\\n    {\\n        $reader = $this->readerRegistry->getReader($migrationContext);\\n\\n        return $reader->read($migrationContext);\\n    }\\n\\n    public function readEnvironmentInformation(MigrationContextInterface $migrationContext, Context $context): EnvironmentInformation\\n    {\\n        $connection = $this->connectionFactory->createDatabaseConnection($migrationContext);\\n        $profile = $migrationContext->getProfile();\\n\\n        if ($connection === null) {\\n            $error = new DatabaseConnectionException();\\n\\n            return new EnvironmentInformation(\\n                $profile->getSourceSystemName(),\\n                $profile->getVersion(),\\n                '-',\\n                [],\\n                [],\\n                new RequestStatusStruct($error->getErrorCode(), $error->getMessage())\\n            );\\n        }\\n\\n        try {\\n            $connection->connect();\\n        } catch (\\Exception $e) {\\n            $error = new DatabaseConnectionException();\\n\\n            return new EnvironmentInformation(\\n                $profile->getSourceSystemName(),\\n                $profile->getVersion(),\\n                '-',\\n                [],\\n                [],\\n                new RequestStatusStruct($error->getErrorCode(), $error->getMessage())\\n            );\\n        }\\n        $connection->close();\\n        $environmentData = $this->localEnvironmentReader->read($migrationContext);\\n\\n        /** @var CurrencyEntity $targetSystemCurrency */\\n        $targetSystemCurrency = $this->currencyRepository->search(new Criteria([Defaults::CURRENCY]), $context)->get(Defaults::CURRENCY);\\n        if (!isset($environmentData['defaultCurrency'])) {\\n            $environmentData['defaultCurrency'] = $targetSystemCurrency->getIsoCode();\\n        }\\n\\n        $totals = $this->readTotals($migrationContext, $context);\\n\\n        return new EnvironmentInformation(\\n            $profile->getSourceSystemName(),\\n            $profile->getVersion(),\\n            $environmentData['host'],\\n            $totals,\\n            $environmentData['additionalData'],\\n            new RequestStatusStruct(),\\n            false,\\n            [],\\n            $targetSystemCurrency->getIsoCode(),\\n            $environmentData['defaultCurrency']\\n        );\\n    }\\n\\n    public function readTotals(MigrationContextInterface $migrationContext, Context $context): array\\n    {\\n        $readers = $this->readerRegistry->getReaderForTotal($migrationContext);\\n\\n        $totals = [];\\n        foreach ($readers as $reader) {\\n            $total = $reader->readTotal($migrationContext);\\n\\n            if ($total === null) {\\n                continue;\\n            }\\n\\n            $totals[$total->getEntityName()] = $total;\\n        }\\n\\n        return $totals;\\n    }\\n\\n    public function readTable(MigrationContextInterface $migrationContext, string $tableName, array $filter = []): array\\n    {\\n        return $this->localTableReader->read($migrationContext, $tableName, $filter);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Links for Embedded Repositories (JavaScript)\nDESCRIPTION: Configures the mapping for \"Edit this page on GitHub\" links within the Vitepress theme configuration (`const embeds: SwagEmbedsConfig[]`). This entry maps the portal path `/resources/meteor-icon-kit/` to the `main` branch of the `shopware/meteor` repository, specifically within the `packages/icon-kit/docs` folder, ensuring correct link generation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst embeds: SwagEmbedsConfig[] = [\n    // ...\n    {\n        repository: 'meteor',\n        points: {\n            '/resources/meteor-icon-kit/': 'main',\n        },\n        folder: 'packages/icon-kit/docs',\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Vuex Store Structure (Before Migration)\nDESCRIPTION: Traditional Vuex store structure with namespaced modules containing state, mutations, getters, and actions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    namespaced: true,\n\n    state: {\n      // Initial state\n      ...\n    },\n    mutations: {\n      ...\n    },\n    getters: {\n       ...\n    },\n    actions: {\n       ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Test with Component Dependencies in Shopware\nDESCRIPTION: An example showing how to handle component dependencies by importing and stubbing the sw-select-base component. This approach is useful when the component under test requires other components to function properly.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// test/app/component/form/select/base/sw-multi-select.spec.js\nimport 'src/app/component/form/select/base/sw-select-base';\n\nwrapper = shallowMount(Shopware.Component.build('sw-multi-select'), {\n    props: {\n        options: [],\n        value: ''\n    },\n    stubs: {\n        'sw-select-base': Shopware.Component.build('sw-select-base'),\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Killing All DevEnv Processes\nDESCRIPTION: Command to stop all running DevEnv processes at once.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkill $(ps -ax | grep /nix/store | grep -v \"grep\" | awk '{print $1}')\n```\n\n----------------------------------------\n\nTITLE: Deleting an Extension in Shopware CLI\nDESCRIPTION: This command deletes a specific extension from the Shopware instance using the Shopware CLI. Replace <extension-name> with the actual name of the extension to be deleted.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/remote-extension-managment.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project extension delete <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Fine-grained Cache Tagging\nDESCRIPTION: Configuration to disable granular cache tagging for system config, translation and theme config to reduce Redis keys and Varnish entries.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    cache:\n        tagging:\n            each_config: false\n            each_snippet: false\n            each_theme_config: false\n```\n\n----------------------------------------\n\nTITLE: Creating Service Decorator in PHP\nDESCRIPTION: Implements the ExampleServiceDecorator class extending AbstractExampleService. It wraps the original service and can modify or extend its behavior.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-fundamentals/adjusting-service.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Service;\n\nclass ExampleServiceDecorator extends AbstractExampleService\n{\n    private AbstractExampleService $decoratedService;\n\n    public function __construct(AbstractExampleService $exampleService)\n    {\n        $this->decoratedService = $exampleService;\n    }\n\n    public function getDecorated(): AbstractExampleService\n    {\n        return $this->decoratedService;\n    }\n\n    public function doSomething(): string\n    {\n        $originalResult = $this->decoratedService->doSomething();\n\n        return $originalResult . ' Did something additionally.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Admin Changes in Production Template\nDESCRIPTION: Shell script to enable Hot Module Replacement for the administration interface using production template.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bin/watch-administration.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Services with XML for Shopware 6 Migration (HTML)\nDESCRIPTION: This snippet demonstrates how to define and register migration gateways for Shopware 6 using XML in a Symfony-style service configuration file. By assigning the 'shopware.migration.gateway' tag to services, Shopware can discover and use them in migration workflows. Each gateway lists its dependencies as service arguments, such as reader registries and repositories. Required dependencies are Shopware's migration assistant components and currency repository. The services expect proper class implementations and will be loaded by the migration system registry to support communication with different Shopware instances.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/gateway-and-reader.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Shopware Profile Gateways -->\\n<service id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Local\\\\ShopwareLocalGateway\\\">\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Local\\\\ReaderRegistry\\\" />\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Local\\\\Reader\\\\EnvironmentReader\\\" />\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Local\\\\Reader\\\\TableReader\\\" />\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Connection\\\\ConnectionFactory\\\" />\\n    <argument type=\\\"service\\\" id=\\\"currency.repository\\\"/>\\n    <tag name=\\\"shopware.migration.gateway\\\" />\\n</service>\\n\\n<service id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Api\\\\ShopwareApiGateway\\\">\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Migration\\\\Gateway\\\\Reader\\\\ReaderRegistry\\\"/>\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Api\\\\Reader\\\\EnvironmentReader\\\" />\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Api\\\\Reader\\\\TableReader\\\" />\\n    <argument type=\\\"service\\\" id=\\\"SwagMigrationAssistant\\\\Profile\\\\Shopware\\\\Gateway\\\\Api\\\\Reader\\\\TableCountReader\\\" />\\n    <argument type=\\\"service\\\" id=\\\"currency.repository\\\"/>\\n    <tag name=\\\"shopware.migration.gateway\\\" />\\n</service>\n```\n\n----------------------------------------\n\nTITLE: Registering Mocked Services in Jest for Shopware Administration\nDESCRIPTION: Illustrates how to register mocked services before running Jest tests for Shopware Administration components. This example shows registering a mocked 'mediaService'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/jest-admin.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeAll(() => {\n  Shopware.Service.register('mediaService', {\n    // your service mock\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Type Definition for Context Resolution\nDESCRIPTION: Demonstrates how to create and use custom types with the ContextResolver for specific webhook handling scenarios. Shows type inference with custom interfaces.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/03-context.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyCustomWebHook = {\n  foo: string;\n}\n\nconst ctx = await app.contextResolver.fromBrowser<MyCustomWebHook>(/** Request */);\n\nctx.payload.foo; // This is now typed and the IDE will help you\n```\n\n----------------------------------------\n\nTITLE: Importing Rule Assignment Module in main.js\nDESCRIPTION: Entry point configuration to import the custom rule assignment module into Shopware 6 administration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './module/sw-settings-rule/extension/sw-settings-rule-detail-assignments';\n```\n\n----------------------------------------\n\nTITLE: Embedding React JSX in Markdown Code Blocks - JSX\nDESCRIPTION: This code snippet illustrates embedding a React JSX expression inside a markdown code block, using the 'jsx' language identifier for syntax highlighting. The code defines a Payment component instance, showing standard data passing via props. There are no external dependencies beyond React. The main parameter is the 'type' prop set to 'COD', and the output is a JSX expression.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/04-fonts-and-formats/02-code.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst pay_type = <Payment type=COD />;\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Navigation Metadata in Shopware Documentation (YAML)\nDESCRIPTION: This YAML snippet defines navigation metadata for the documentation, setting the navigation title and its position. It is intended as front-matter configuration for documentation systems that use navigation structure, such as Docusaurus or similar static site generators. Required fields include 'title' (display name in navigation) and 'position' (ordering); this has no constraints other than adhering to the documentation system’s format.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/context-rules-rule-systems.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: Context Rules & Rule Systems\n  position: 40\n```\n\n----------------------------------------\n\nTITLE: Dumping Available Variables in Twig Templates\nDESCRIPTION: Twig snippet that dumps all variables available in the current template context. This is useful for debugging and discovering what data is available to use in custom templates.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/customize-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Product Sorting with Database Migration in Shopware\nDESCRIPTION: This PHP migration class adds a custom product sorting option that will be manageable in the Administration. It inserts records into the product_sorting and product_sorting_translation tables, configuring a custom sorting by product name in descending order.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-sorting-product-listing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Migration/Migration1615470599ExampleSorting.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\nclass Migration1615470599ExampleSorting extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1615470599;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $myCustomSorting = [\n            'id' => Uuid::randomBytes(),\n            'url_key' => 'my-custom-sort',  // shown in url - must be unique system wide\n            'priority' => 5,                // the higher the priority, the further upwards it will be shown in the sortings dropdown in Storefront\n            'active' => 1,                  // activate / deactivate the sorting\n            'locked' => 0,                  // you can lock the sorting here to prevent it from being edited in the Administration\n            'fields' => json_encode([\n                [\n                    'field' => 'product.name',  // field to sort by\n                    'order' => 'desc',          // asc or desc\n                    'priority' => 1,            // in which order the sorting is to applied (higher priority comes first)\n                    'naturalSorting' => 0       // apply natural sorting logic to this field\n                ],\n                // ... more fields\n            ]),\n            'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n        ];\n\n        // insert the product sorting\n        $connection->insert(ProductSortingDefinition::ENTITY_NAME, $myCustomSorting);\n\n        // insert the translation for the translatable label\n        // if you use multiple languages, you will need to update all of them\n        $connection->executeStatement(\n            'REPLACE INTO product_sorting_translation\n             (`language_id`, `product_sorting_id`, `label`, `created_at`)\n             VALUES\n             (:language_id, :product_sorting_id, :label, :created_at)',\n            [\n                'language_id' => Uuid::fromHexToBytes(Defaults::LANGUAGE_SYSTEM),\n                'product_sorting_id' => $myCustomSorting['id'],\n                'label' => 'My Custom Sorting',\n                'created_at' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n            ]\n        );\n    }\n\n    public function updateDestructive(Connection $connection): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Shipping Method Configuration in Shopware App Manifest\nDESCRIPTION: Shows all possible configurations for a shipping method, including translations, description, icon, active status, and tracking URL.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/shipping-methods.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<manifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/shopware/shopware/trunk/src/Core/Framework/App/Manifest/Schema/manifest-2.0.xsd\">\n\n    ...\n\n    <shipping-methods>\n\n        <shipping-method>\n            <!-- Identifier should not change after the first release -->\n            <identifier>NameOfYourFirstShippingMethod</identifier>\n            <name>First shipping method</name>\n            <name lang=\"de-DE\">Erste Versandmethode</name>\n            <delivery-time>\n                <!-- Remember to remove the dashes from generated UUID -->\n                <id>c8864e36a4d84bd4a16cc31b5953431b</id>\n                <name>From 2 to 4 days</name>\n                <min>2</min>\n                <max>4</max>\n                <unit>day</unit>\n            </delivery-time>\n            <!-- The following configurations are optional -->\n            <description>This is a simple description</description>\n            <description lang=\"de-DE\">Das ist eine einfache Beschreibung</description>\n            <icon>icon.png</icon>\n            <active>true</active>\n            <tracking-url>https://www.yourtrackingurl.com</tracking-url>\n            <position>2</position>\n        </shipping-method>\n\n    </shipping-methods>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Handling App Lifecycle Events in JSON\nDESCRIPTION: Example of the JSON payload received during app lifecycle events such as installation, updates, and deletion. It shows the structure of the event data and source information.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-base-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"payload\": [],\n    \"event\": \"app_deleted\"\n  },\n  \"source\": {\n    \"url\": \"http:\\/\\/localhost:8000\",\n    \"appVersion\": \"0.0.1\",\n    \"shopId\": \"wPNrYZgArBTL\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Product Data using Repository Facade in Twig\nDESCRIPTION: Demonstrates how to use the repository.aggregate() method to calculate the sum of gross prices for all products.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/data-loading-script-services-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set page = hook.page %}\n{% set criteria = {\n    'aggregations': [\n        { 'name': 'sumOfPrices', 'type': 'sum', 'field': 'price.gross' }\n    ]\n} %}\n\n{% set sumResult = services.repository.aggregate('product', criteria).get('sumOfPrices') %}\n\n{% do page.addArrayExtension('myProductAggregations', {\n    'sum': sumResult.getSum\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthenticationIdentityLoader in Shopware B2B\nDESCRIPTION: PHP code demonstrating an example implementation of AuthenticationIdentityLoader for fetching identity by credentials in Shopware B2B Suite.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function fetchIdentityByCredentials(CredentialsEntity $credentialsEntity, LoginContextService $contextService, bool $isApi = false): Identity\n{\n    if (!$credentialsEntity->email) {\n        throw new NotFoundException('Unable to handle context');\n    }\n    \n    $entity = $this->yourEntityRepository->fetchOneByEmail($email);\n\n    /** @var DebtorIdentity $debtorIdentity */\n    $debtorIdentity = $this->debtorRepository->fetchIdentityById($entity->debtor->id, $contextService);\n    \n    $authId = $contextService->getAuthId(YourEntityRepository::class, $entity->id, $debtorIdentity->getAuthId());\n    \n    $this->yourEntityRepository->setAuthId($entity->id, $authId);\n    \n    return new YourEntityIdentity($authId, (int) $entity->id, YourEntityRepository::TABLE_NAME, $entity, $debtorIdentity);\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Navigation Configuration\nDESCRIPTION: Navigation metadata configuration for the testing reference documentation, specifying the title and position in navigation hierarchy.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: Testing Reference\n  position: 70\n```\n\n----------------------------------------\n\nTITLE: Custom MySQL Port Configuration\nDESCRIPTION: Configuration for customizing MySQL port in devenv.local.nix.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.mysql.settings = {\n    mysqld = {\n      port = 33881;\n    };\n  };\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Base Page Class in Shopware PHP\nDESCRIPTION: This snippet specifies the fully qualified namespace for the base 'Page' class within the Shopware Storefront framework. According to the guidelines, all custom Page objects returned by Page Loaders must inherit from this base class to ensure consistency and fundamental functionality across Storefront pages.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/pageloader.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Storefront\\Page\\Page\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Shopware Plugins\nDESCRIPTION: Structured table listing all available storefront plugins with their descriptions and usage notes\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/storefront-reference/plugin-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Plugin                                 | Description                                                                                                                                                                       | Notes                            |\n|:---------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------|\n| `AccountGuestAbortButtonPlugin`        | Used on the logout button to fire a `guest-logout` event after logging out from a guest session.                                                                                                  | ---                              |\n| `AddToCartPlugin`                      | Submits the form that adds a product to the cart and opens the OffCanvasCart. E.g., used on product buy buttons.                                                                                   | ---                              |\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Shopware Developer Portal Locally (Bash)\nDESCRIPTION: Clones the `shopware/developer-portal` repository into the `/www/shopware/` directory, navigates into the new directory, and installs project dependencies using `pnpm`. This is the first step in setting up a local environment for embedding external documentation. Requires `git` and `pnpm` to be installed.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /www/shopware/\ngit clone https://github.com/shopware/developer-portal.git\ncd developer-portal\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Warehouse API Example\nDESCRIPTION: JSON payload example for creating or updating a Warehouse and assigning it to existing WarehouseGroups via POST or PATCH requests.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/multi-inventory.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"4ce2bd36d2824153812fcb6a97f22d22\",\n    \"name\": \"Warehouse A\",\n    \"groups\": [{\n        \"id\": \"8cf7736855594501aaf86351e147c61e\"\n    }, {\n        \"id\": \"4154501a3812fcb6a501aaf8c7736855\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram for Multi-Inventory\nDESCRIPTION: Mermaid diagram showing relationships between Order, Warehouse, Product, and related entities in the Multi-Inventory system.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/multi-inventory.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    OrderWarehouseGroup }|..|| Order : \"M:1\"\n    OrderWarehouseGroup {\n        uuid order_id\n        uuid warehouse_group_id\n    }\n    OrderWarehouseGroup }|..|| WarehouseGroup : \"M:1\"\n    OrderProductWarehouse }|..|| Order : \"1:M\"\n    OrderProductWarehouse{\n        uuid order_id\n        uuid product_id\n        uuid warehouse_id\n    }\n    Order {\n        uuid order_id\n    }\n    OrderProductWarehouse }|..|{ WarehouseGroupWarehouse : \"M:N\"\n    Warehouse {\n        uuid warehouse_id\n    }\n    WarehouseGroup }|..|| Rule : \"M:1\"\n    Rule{\n        uuid rule_id\n    }\n    WarehouseGroup {\n        uuid rule_id\n        uuid warehouse_group_id\n    }\n    WarehouseGroup ||..|{ ProductWarehouseGroup : \"1:M\"\n    ProductWarehouseGroup {\n        uuid product_id\n        uuid warehouse_group_id\n    }\n    WarehouseGroup ||..|{ WarehouseGroupWarehouse : \"1:M\"\n    WarehouseGroup }|..|{ WarehouseGroupWarehouse : \"M:N\"\n    WarehouseGroupWarehouse {\n        uuid warehouse_id\n        uuid warehouse_group_id\n    }\n    ProductWarehouseGroup }|..|| Product : \"M:1\"\n    OrderProductWarehouse }|..|| Product : \"M:1\"\n    Product {\n        uuid produtc_id\n    }\n    ProductWarehouse }|..|| Product : \"M:1\"\n    WarehouseGroupWarehouse }|..|| Warehouse : \"M:1\"\n    WarehouseGroupWarehouse }|..|{ Warehouse : \"M:N\"\n    ProductWarehouse }|..|| Warehouse : \"1:M\"\n    ProductWarehouse {\n        uuid product_id\n        uuid warehouse_id\n    }\n    Warehouse ||..|{ OrderProductWarehouse : \"1:M\"\n```\n\n----------------------------------------\n\nTITLE: XDebug Configuration\nDESCRIPTION: Configuration for enabling and configuring XDebug in devenv.local.nix.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  # XDebug\n  languages.php.extensions = [ \"xdebug\" ];\n  languages.php.ini = ''\n    xdebug.mode = debug\n    xdebug.discover_client_host = 1\n    xdebug.client_host = 127.0.0.1\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Cypress Folder Structure in Shopware Platform\nDESCRIPTION: Shows the standard folder structure for Cypress E2E tests in Shopware platform, including fixtures, integration, plugins, and support directories.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n`-- e2e\n  `-- cypress\n    |-- fixtures\n        `-- example.json\n    |-- integration\n        `-- testfile.spec.js\n    |-- plugins\n        `-- index.js\n    |-- support\n        |-- commands.js\n        `-- index.js\n    |--cypress.json\n    `--cypress.env.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Support in Shopware Project\nDESCRIPTION: YAML configuration for specifying browser support targeting in the Storefront through browserlist settings.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/build.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  # Browserlist configuration for Storefront\n  browserslist: 'defaults'\n```\n\n----------------------------------------\n\nTITLE: Registering Shopware Subscriber Service\nDESCRIPTION: This XML configuration defines the service for the custom subscriber in Shopware. It injects the Doctrine DBAL Connection and tags the service as a kernel event subscriber.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-indexer.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Service\\Subscriber\" >\n            <argument type=\"service\" id=\"Doctrine\\DBAL\\Connection\" />\n            <tag name=\"kernel.event_subscriber\" />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Line Item Condition Example in manifest.xml\nDESCRIPTION: XML definition for a custom line item condition that allows selecting multiple products and comparing them with cart items.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/rule-builder/add-custom-rule-conditions.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- ... -->\n<rule-condition>\n    <identifier>line_item_condition</identifier>\n    <name>Custom product multi select</name>\n    <group>item</group>\n    <script>line-item-condition.twig</script>\n    <constraints>\n        <single-select name=\"operator\">\n            <placeholder>Choose an operator...</placeholder>\n            <options>\n                <option value=\"=\">\n                    <name>Is equal to</name>\n                </option>\n                <option value=\"!=\">\n                    <name>Is not equal to</name>\n                </option>\n            </options>\n            <required>true</required>\n        </single-select>\n        <multi-entity-select name=\"productIds\">\n            <placeholder>Choose products...</placeholder>\n            <entity>product</entity>\n            <required>true</required>\n        </multi-entity-select>\n    </constraints>\n</rule-condition>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Adding a Relative Discount to the Cart in Twig\nDESCRIPTION: This snippet demonstrates how to add a relative (percentage) discount to the cart, checking for existing items and preventing duplicate discounts.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# @var services \\Shopware\\Core\\Framework\\Script\\ServiceStubs #}\n\n{% do services.cart.products.add(hook.ids.get('p1')) %}\n\n{% if services.cart.has('my-discount') %}\n    {% return %}\n{% endif %}\n\n{% do services.cart.discount('my-discount', 'percentage', -10, 'Fancy discount') %}\n```\n\n----------------------------------------\n\nTITLE: Creating the Configuration Component for Dailymotion CMS Element\nDESCRIPTION: Implementation of the configuration component for the Dailymotion element. This allows shop managers to input the Dailymotion video ID through the Administration interface.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/config/index.js\nimport template from './sw-cms-el-config-dailymotion.html.twig';\n\nShopware.Component.register('sw-cms-el-config-dailymotion', {\n    template,\n\n    mixins: [\n        'cms-element'\n    ],\n\n    computed: {\n        dailyUrl: {\n            get() {\n                return this.element.config.dailyUrl.value;\n            },\n\n            set(value) {\n                this.element.config.dailyUrl.value = value;\n            }\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initElementConfig('dailymotion');\n        },\n\n        onElementUpdate(value) {\n            this.element.config.dailyUrl.value = value;\n\n            this.$emit('element-update', this.element);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Metadata for Flow Reference in YAML\nDESCRIPTION: This YAML snippet defines navigation metadata for a Flow reference section in Shopware documentation. It sets the title and position of the page in the navigation structure.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/flow-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnav:\n  title: Flow Reference\n  position: 20\n\n---\n```\n\n----------------------------------------\n\nTITLE: Using Webkit Vendor Prefixes for CSS Properties\nDESCRIPTION: This snippet demonstrates the usage of Webkit vendor prefixes for various CSS properties. It includes both fully supported and partially supported properties, along with their standard counterparts.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-03-disable-css-autoprefixer.md#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n-webkit-box-reflect: <direction> <offset> <mask-box-image>;\nbox-reflect: <direction> <offset> <mask-box-image>;\n\n-webkit-column-count: <integer>;\ncolumn-count: <integer>;\n\n-webkit-column-gap: <length>;\ncolumn-gap: <length>;\n\n-webkit-column-rule: <width> <style> <color>;\ncolumn-rule: <width> <style> <color>;\n\n-webkit-clip-path: <clip-source> | [ <basic-shape> || <geometry-box> ] | none;\nclip-path: <clip-source> | [ <basic-shape> || <geometry-box> ] | none;\n\n-webkit-user-select: none | text | all | auto;\nuser-select: none | text | all | auto;\n\n-webkit-appearance: none | auto;\nappearance: none | auto;\n\n-webkit-animation: <single-animation>#;\nanimation: <single-animation>#;\n\n-webkit-transition: <single-transition>#;\ntransition: <single-transition>#;\n\n-webkit-transform: none | <transform-function>+;\ntransform: none | <transform-function>+;\n\n-webkit-transform-origin: [ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?;\ntransform-origin: [ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?;\n\n-webkit-backface-visibility: visible | hidden;\nbackface-visibility: visible | hidden;\n\n-webkit-perspective: none | <length>;\nperspective: none | <length>;\n\n-webkit-background-clip: border-box | padding-box | content-box | text;\nbackground-clip: border-box | padding-box | content-box | text;\n\n-webkit-filter: none | <filter-function-list>;\nfilter: none | <filter-function-list>;\n\n-webkit-font-feature-settings: normal | <feature-tag-value>#;\nfont-feature-settings: normal | <feature-tag-value>#;\n\n-webkit-hyphens: none | manual | auto;\nhyphens: none | manual | auto;\n\n-webkit-mask-image: <mask-reference>#;\nmask-image: <mask-reference>#;\n\n-webkit-mask-repeat: <repeat-style>#;\nmask-repeat: <repeat-style>#;\n\n-webkit-mask-position: <position>#;\nmask-position: <position>#;\n\n-webkit-mask-size: <bg-size>#;\nmask-size: <bg-size>#;\n\ndisplay: -webkit-flex;\ndisplay: flex;\n\ndisplay: -webkit-inline-flex;\ndisplay: inline-flex;\n\nposition: -webkit-sticky;\nposition: sticky;\n\n::-webkit-input-placeholder { /* styles */ }\n::placeholder { /* styles */ }\n\n::-webkit-file-upload-button { /* styles */ }\n::file-selector-button { /* styles */ }\n\n@-webkit-keyframes <keyframes-name> { /* rules */ }\n@keyframes <keyframes-name> { /* rules */ }\n```\n\n----------------------------------------\n\nTITLE: YAML Navigation Configuration\nDESCRIPTION: YAML configuration block defining the navigation properties for the setup documentation section, including title and position.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  title: Setups\n  position: 3000\n```\n\n----------------------------------------\n\nTITLE: MariaDB Configuration\nDESCRIPTION: Configuration for using MariaDB instead of MySQL in devenv.local.nix.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  services.mysql.package = pkgs.mariadb;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Storefront Controller in Shopware PHP\nDESCRIPTION: Example controller implementation that creates a route '/example' accessible via frontend.example.example. Extends StorefrontController and includes basic route configuration for storefront scope.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/seo/add-custom-seo-url.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// <plugin root>/src/Storefront/Controller/ExampleController.php\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Storefront\\Controller;\n\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Storefront\\Controller\\StorefrontController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['storefront']])]\nclass ExampleController extends StorefrontController\n{\n    #[Route(path: '/example', name: 'frontend.example.example', methods: ['GET'])]\n    public function showExample(): Response\n    {\n        return $this->renderStorefront('@SwagBasicExample/storefront/page/example/index.html.twig', [\n            'example' => 'Hello world'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Shopware Page Object with Twig\nDESCRIPTION: Demonstrates how to use debug.dump() function to inspect the page object in Shopware scripts. This debugging technique outputs the contents of the page object to the Symfony debug view.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{% do debug.dump(hook.page) %}\n```\n\n----------------------------------------\n\nTITLE: Defining Administration Snippet for Bundle Entity Count (JSON)\nDESCRIPTION: A JSON snippet file (e.g., `en-GB.json`) providing the user interface text for the custom bundle entity count in the Shopware Administration. It follows the standard structure, defining the text \"Bundles:\" under the key `swag_bundle` within the `swag-migration.index.selectDataCard.entities` namespace, matching the entity identifier and snippet path defined in `BundleDataSet`.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-a-shopware-migration-profile.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"swag-migration\": {\n        \"index\": {\n            \"selectDataCard\": {\n                \"entities\": {\n                    \"swag_bundle\": \"Bundles:\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Arguments Filter in Twig Template\nDESCRIPTION: Demonstrates how to pass multiple arguments to a custom filter in a Twig template block.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/services-utilities/using-filter.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% block my_custom_block %}\n    <p>\n       {{ $tc('swag-example.general.myCustomText')|example('secondArgument', 'thirdArgument') }}\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Listing Cart Features with Proper Markdown Bullets (Markdown)\nDESCRIPTION: This snippet demonstrates the recommended formatting for listing new cart features in documentation using Markdown syntax. It shows the correct way to number features in a list and clarifies that phrases (rather than complete sentences) do not require periods. No external dependencies are required. Input is a set of feature phrases; output is a visually clear, numbered list for user documentation.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/03-language-and-grammar.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNew cart features:\\n\\n1. Store-level sales tax\\n2. Shipping modifier\\n3. Minimum and maximum order quantities\n```\n\n----------------------------------------\n\nTITLE: Configuring Increment Pools in Shopware YAML\nDESCRIPTION: This YAML configuration example demonstrates how to define and configure different increment pools within Shopware under the `shopware.increment` key. It shows setting up pools like 'user_activity' using MySQL, 'message_queue' using Redis with a specific connection URL, and a 'custom_pool' using an in-memory array adapter. This allows developers to choose the appropriate storage backend (type: 'mysql', 'redis', 'array') for different types of frequently incremented data based on performance needs.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2021-11-09-increment-pattern.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    increment:\n        user_activity:\n            type: 'mysql'\n\n        message_queue:\n            type: 'redis'\n            config:\n                url: 'redis://localhost'\n        \n        custom_pool:\n          type: 'array'\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests Based on Feature Flag (PHP)\nDESCRIPTION: Shows how to use the `Feature::skipTestIfActive` helper function within a PHPUnit test method (or `setUp` method) to skip the test execution if the specified feature flag ('v6.5.0.0') is active. This is useful when a test covers functionality replaced or made obsolete by the feature.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-20-feature-flags-for-major-versions.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\Core\\Framework\\Feature;\n \nclass ProductTest\n{\n  public function testNewFeature() \n  {\n     Feature::skipTestIfActive('v6.5.0.0', $this);\n\n     // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Shopware App Scripts\nDESCRIPTION: Shows how to use the Storefront translation mechanism in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set translated = 'my.snippet.key'|trans %}\n\n{% do call.something('my.snippet.key'|trans) %}\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager\nDESCRIPTION: Command to install the Nix package manager using the Determinate Systems installer script.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install\n```\n\n----------------------------------------\n\nTITLE: Naming Subtopic Markdown Image Assets in Shopware Docs (Markdown)\nDESCRIPTION: This snippet demonstrates the naming format for image files associated with a specific topic and subtopic. It maintains clarity in organizing assets and helps in easy retrieval. Required input is a topic, subtopic, and descriptive image name, with expected output being a dashed, hyphenated SVG file name. The convention requires only letters, hyphens, and optional subtopic sections.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/05-methodize-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nstorefront-dataHandling-pages.svg \n```\n\n----------------------------------------\n\nTITLE: Adding A11y Document Media File Column to Database Schema\nDESCRIPTION: SQL statement to alter the document table by adding a new column to store the media file ID for HTML A11y documents, establishing the relationship with media entities.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `document`\nADD COLUMN `document_a11y_media_file_id` BINARY(16);\n```\n\n----------------------------------------\n\nTITLE: Enabling zstd Compression for Cart\nDESCRIPTION: Configuration to enable zstd compression for cart data to improve compression speed and ratio compared to gzip.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/performance-tweaks.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nshopware:\n    cart:\n      compress: true\n      compression_method: zstd\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rule Component in Shopware Administration\nDESCRIPTION: Implementation of a custom rule component that extends from sw-condition-base. This component defines selectValues for boolean options and implements getter/setter methods for handling the rule's value state.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/rule/add-custom-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/core/component/swag-first-monday/index.js\nimport template from './swag-first-monday.html.twig';\n\nShopware.Component.extend('swag-first-monday', 'sw-condition-base', {\n    template,\n\n    computed: {\n        selectValues() {\n            return [\n                {\n                    label: this.$tc('global.sw-condition.condition.yes'),\n                    value: true\n                },\n                {\n                    label: this.$tc('global.sw-condition.condition.no'),\n                    value: false\n                }\n            ];\n        },\n\n        isFirstMondayOfTheMonth: {\n            get() {\n                this.ensureValueExist();\n\n                if (this.condition.value.isFirstMondayOfTheMonth == null) {\n                    this.condition.value.isFirstMondayOfTheMonth = false;\n                }\n\n                return this.condition.value.isFirstMondayOfTheMonth;\n            },\n            set(isFirstMondayOfTheMonth) {\n                this.ensureValueExist();\n                this.condition.value = { ...this.condition.value, isFirstMondayOfTheMonth };\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Naming Markdown Image Assets in Shopware Docs (Markdown)\nDESCRIPTION: This snippet illustrates the naming convention for image files representing documentation visuals such as diagrams or screenshots. It demonstrates a basic, topic-aligned SVG naming format. The dependency is adherence to Shopware document naming best practices. Expected input is a topic name, and the output is a filename structured as <topicName>-<meaningfulImageName>.svg; only letters and hyphens are allowed.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/05-methodize-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nstorefront-pages.svg\n```\n\n----------------------------------------\n\nTITLE: Adding A11y Document Links to Order Emails\nDESCRIPTION: Twig template code for emails that generates accessible HTML document links for customers to access in addition to PDF documents, including proper URL generation with document identifiers.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-12-19-offer-html-alternative-to-our-pdf-standard-document.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% if a11yDocuments %}\nFor better accessibility, we also provide an HTML version of the documents here:\n\n{% for a11y in a11yDocuments %}\n{% set documentLink = rawUrl(\n    'frontend.account.order.single.document.a11y',\n    {\n        documentId: a11y.documentId,\n        deepLinkCode: a11y.deepLinkCode,\n        fileType: a11y.fileExtension,\n    },\n    salesChannel.domains|first.url\n) %}\n\n    - {{ documentLink }}\n{% endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Suggest Results in Shopware Twig Template\nDESCRIPTION: This snippet shows how to access various suggest results in the Shopware suggest dropdown template. It retrieves the multi-suggest result, products, completions, manufacturers, categories, and custom entities from the page object.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-extend-the-search-and-suggest-template.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set suggestResult = page.searchResult.extensions.multiSuggestResult %}\n{% set products = page.searchResult %}\n{% set completions = page.searchResult.extensions.completionResult %}\n{% set manufacturers = suggestResult.getResult('product_manufacturer') %}\n{% set categories = suggestResult.getResult('category') %}\n{% set customEntities = suggestResult.getResult('custom_entity') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Criteria Search\nDESCRIPTION: Shows comprehensive usage of the Criteria class for filtering, sorting, and pagination when searching for products.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/using-data-handling.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Criteria } = Shopware.Data;\nShopware.Component.register('swag-basic-example', {\n    inject: ['repositoryFactory'],\n\n    template,\n\n    data: function () {\n        return {\n            result: undefined\n        }\n    },\n\n    computed: {\n        productRepository() {\n            // create a repository for the `product` entity\n            return this.repositoryFactory.create('product');\n        },\n    },\n\n    created() {\n        const criteria = new Criteria();\n\n        criteria.setPage(1);\n        criteria.setLimit(10);\n        criteria.setTerm('foo');\n        criteria.setIds(['some-id', 'some-id']);\n\n        criteria.setTotalCountMode(2);\n\n        criteria.addFilter(\n            Criteria.equals('product.active', true)\n        );\n\n        criteria.addSorting(\n            Criteria.sort('product.name', 'DESC')\n        );\n\n        criteria.addAggregation(\n            Criteria.avg('average_price', 'product.price')\n        );\n\n        criteria.getAssociation('categories')\n            .addSorting(Criteria.sort('category.name', 'ASC'));\n\n        this.productRepository.create('product');\n\n        this.productRepository\n            .search(criteria, Shopware.Context.api)\n            .then(result => {\n                this.result = result;\n            });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Feature Flag Registry in PHP\nDESCRIPTION: Method for merging static feature flags from YAML file with stored flags from the database, then activating flags marked as active. It filters out major feature flags that cannot be toggled.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-11-29-toggle-feature-flag-on-demand.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass FeatureFlagRegistry\n{\n    public function registry(): void\n    {\n        $static = $this->featureFlags;\n        $stored = $this->keyValueStorage->get(self::STORAGE_KEY, []);\n\n        if (!empty($stored) && \\is_string($stored)) {\n            $stored = \\json_decode($stored, true, 512, \\JSON_THROW_ON_ERROR);\n        }\n        \n        // Major feature flags cannot be toggled with stored flags\n        $stored = array_filter($stored, static function (array $flag) {\n            return !\\array_key_exists('major', $flag) || !$flag['major'];\n        });\n\n        $flags = array_merge($static, $stored);\n        \n        Feature::registerFeatures($flags);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Server for Shopware\nDESCRIPTION: This Caddyfile configuration sets up a server for a Shopware e-commerce site. It includes security headers, content security policies for SVG files, PHP FastCGI handling, and file serving directives. The configuration is designed to enhance security and optimize performance for a Shopware deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/config-reference/server/caddy.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmydomain.com {\n  header {\n    X-Frame-Options DENY\n    Referrer-Policy no-referrer-when-downgrade\n  }\n\n  @svg {\n    file\n    path *.svg\n  }\n\n  header @svg Content-Security-Policy \"script-src 'none'\"\n\n  @default {\n    not path /theme/* /media/* /thumbnail/* /bundles/* /css/* /fonts/* /js/* /recovery/* /sitemap/*\n  }\n\n  root * public\n  php_fastcgi 127.0.0.1:9000\n  encode zstd gzip\n  file_server\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Markdown Image Asset Filenames for Multiple Visuals (Markdown)\nDESCRIPTION: This snippet describes the pattern for serializing visual asset file names when there are multiple related images under one topic. The convention is to append an underscore and sequence number. This ensures uniqueness and maintains order, aiding in versioning or stepwise representation. Inputs include topic, subtopic, image name, and sequence number; output is a filename like <topicName>-<subtopicName>-<meaningfulImageName>_01.svg.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/05-methodize-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nstorefront-dataHandling-pages_01.svg\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Test Namespace for FeatureFlag in PHP\nDESCRIPTION: This PHP code demonstrates how to register a custom test namespace using the new addTestNamespace method of the FeatureFlagExtension class. This allows specific namespaces to be considered when enabling major flags in unit tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-07-31-add-more-unit-tests-namespaces-to-featureflag-extension.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nFeatureFlagExtension::addTestNamespace('Your\\\\Unit\\\\Tests\\\\Namespace\\\\');\n```\n\n----------------------------------------\n\nTITLE: Implementing Translated Fields in Shopware Entity\nDESCRIPTION: Demonstrates how to implement translated fields in a Shopware entity using the translated property of the Field attribute. The example shows how to define a TranslatedField and set up an EntityTranslationDefinition automatically.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Examples;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Entity;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Field;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\FieldType;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\PrimaryKey;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Translations;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Attribute\\Entity as EntityAttribute;\n\n#[EntityAttribute('example_entity')]\nclass ExampleEntity extends Entity\n{\n    #[PrimaryKey]\n    #[Field(type: FieldType::UUID)]\n    public string $id;\n\n    #[Field(type: FieldType::STRING, translated: true)]\n    public ?string $string = null;\n\n    /**\n     * @var array<string, ArrayEntity>|null\n     */\n    #[Translations]\n    public ?array $translations = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScalarValuesStorer Class in PHP\nDESCRIPTION: A implementation of FlowStorer that handles storage and restoration of scalar values from events implementing ScalarValuesAware. It stores the values returned by getValues() and allows for simple restoration without additional logic.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-02-02-flow-storer-with-scalar-values.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ScalarValuesStorer extends FlowStorer\n{\n    public function store(FlowEventAware $event, array $stored): array\n    {\n        if (!$event instanceof ScalarValuesAware) return $stored\n\n        $stored[ScalarValuesAware::STORE_VALUES] = $event->getValues();\n\n        return $stored;\n    }\n\n    public function restore(StorableFlow $storable): void\n    {\n        $values = $storable->getStore(ScalarValuesAware::STORE_VALUES);\n        foreach ($values as $key => $value) {\n            $storable->setData($key, $value);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Bundle Reader Service in Shopware 6 using XML\nDESCRIPTION: Defines the `BundleReader` as a service in the Shopware 6 plugin's service definition file (e.g., `services.xml`). It inherits configuration from the base `SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Api\\Reader\\ApiReader` service and is tagged with `shopware.migration.reader` to register it with the Shopware Migration Assistant, making it available for bundle data migration.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"SwagMigrationBundleExample\\Profile\\Shopware\\Gateway\\Api\\BundleReader\"\n         parent=\"SwagMigrationAssistant\\Profile\\Shopware\\Gateway\\Api\\Reader\\ApiReader\">\n    <tag name=\"shopware.migration.reader\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Uploading Extension to Shopware Store using CLI\nDESCRIPTION: Command to upload an extension zip file to the Shopware Store using shopware-cli. The command validates the version, processes compatibility constraints from composer.json or manifest.xml, and waits for automatic validation results.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/shopware-account-commands/releasing-extension-to-shopware-store.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli account producer extension upload <zip-path>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Profiler Backend in PHP for Shopware\nDESCRIPTION: This PHP class implements the ProfilerInterface to create a custom profiler backend for Shopware. It logs the traces to the console, demonstrating how to extend the profiling functionality.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/configurations/observability/profiling.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Profiler;\n\nuse Shopware\\Core\\Profiling\\Integration\\ProfilerInterface;\n\nclass ConsoleProfiler implements ProfilerInterface\n{\n    public function start(string $title, string $category, array $tags): void\n    {\n        echo \"Start $name\\n\";\n    }\n\n    public function stop(string $title): void\n    {\n        echo \"Stop $name\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Store API Route for Product Count in PHP\nDESCRIPTION: An abstract class defining the contract for a custom Store API route that retrieves the count of products. It uses route attributes to define it as a store-api route and requires implementing a load method.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-data-to-storefront-page.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Swag\\BasicExample\\Core\\Content\\Example\\SalesChannel;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route(defaults: ['_routeScope' => ['store-api']])]\nabstract class AbstractProductCountRoute\n{\n    abstract public function getDecorated(): AbstractProductCountRoute;\n\n    abstract public function load(Criteria $criteria, SalesChannelContext $context): ProductCountRouteResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Statistics using StatsAggregation in PHP\nDESCRIPTION: Shows how to use StatsAggregation to calculate multiple statistics (max, min, avg, sum) for product prices in a single query. It creates a Criteria object, adds the aggregation, and retrieves the results.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/core-reference/dal-reference/aggregations-reference.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$criteria = new Criteria();\n$criteria->setLimit(1);\n\n$criteria->addAggregation(\n    new StatsAggregation('stats-price', 'price')\n);\n\n$result = $repository->search($criteria, $context);\n\n/** @var StatsResult $aggregation */\n$aggregation = $result->getAggregations()->get('stats-price');\n\n$aggregation->getSum();\n$aggregation->getMax();\n$aggregation->getAvg();\n$aggregation->getMin();\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache and Accessing Console\nDESCRIPTION: Shopware CLI shortcuts for clearing cache and accessing the Shopware console without being in the project root directory.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/helper-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project clear-cache\n```\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project console <command>\n```\n\n----------------------------------------\n\nTITLE: Autowiring Services with Attributes in Symfony 6.1 (PHP)\nDESCRIPTION: This PHP snippet demonstrates the use of autowire attributes for dependency injection in Symfony 6.1+, directly binding dependencies by specifying services and parameters. The class Mailer receives an Adapter and a boolean flag injected automatically through PHP attributes. Requires Symfony\\Component\\DependencyInjection\\Attribute\\Autowire, and suitable service configuration for 'email_adapter'; the example works in PHP 8+ environments. Expected inputs are service container parameters; outputs are ready-to-use class instances.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/core/6.5-new-php-language-features.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass Mailer\n{\n    public function __construct(\n        #[Autowire(service: 'email_adapter')]\n        private Adapter $adapter,\n\n        #[Autowire('%kernel.debug_mode%')]\n        private bool $debugMode,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Integration Changes in External Repository (Shell)\nDESCRIPTION: Sequence of Git commands executed within the external repository (e.g., `meteor`) after successful preview. It switches to the `main` branch and merges the feature branch (`feature/embed-meteor-repo-to-developer-portal`) containing the documentation integration setup (like `package.json` scripts).\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncd /www/shopware/meteor/\ngit checkout main\ngit merge feature/embed-meteor-repo-to-developer-portal\n```\n\n----------------------------------------\n\nTITLE: Displaying App Resource Directory Structure\nDESCRIPTION: Shows the recommended folder structure for organizing Storefront customization files including SCSS, JavaScript, views, and public assets within a Shopware app.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/storefront/index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── DemoApp\n    ├── Resources\n    │   ├── app\n    │   │   └── storefront\n    │   │       └── src\n    │   │           ├── scss\n    │   │           │   └── base.scss\n    │   │           └── main.js\n    │   ├── views\n    │   │   └── storefront\n    │   │       └── ...\n    │   └── public\n    │       └── ... // public assets go here\n    └── manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Integration with Shopware App Server SDK\nDESCRIPTION: Demonstrates how to set up and configure the Hono framework integration with Shopware App Server SDK, including type declarations and route configuration.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-sdks/javascript/06-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InMemoryShopRepository } from '@shopware-ag/app-server-sdk'\nimport type {\n  AppServer,\n  ShopInterface,\n  Context,\n} from \"@shopware-ag/app-server-sdk\";\nimport { Hono } from \"hono\";\nimport { configureAppServer } from \"@shopware-ag/app-server-sdk/integration/hono\";\n\nconst app = new Hono();\n\n// You can configure all registered routes here\nconfigureAppServer(app, {\n  appName: \"Test\",\n  appSecret: \"Test\",\n  shopRepository: new InMemoryShopRepository(),\n});\n\ndeclare module \"hono\" {\n  interface ContextVariableMap {\n    app: AppServer;\n    shop: ShopInterface;\n    context: Context;\n  }\n}\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Activating Shopware Extensions\nDESCRIPTION: Command to install and activate extensions in Shopware after Composer installation.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console plugin:install --activate <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Merging Arrays with ArrayFacade\nDESCRIPTION: Demonstrates how to merge two arrays using the merge() method of ArrayFacade.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/miscellaneous-script-services-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set my_array = array({'bar': 'foo', 'baz': true}) %}\n\n{% do product.payload.merge(my_array) %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Developer Portal Repository (Bash)\nDESCRIPTION: Creates and checks out a new Git branch named `feature/embed-meteor-icon-kit` within the local `developer-portal` repository. This allows developers to work on embedding a new repository in isolation before merging changes. Requires `git`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/embed-meteor-icon-kit\n```\n\n----------------------------------------\n\nTITLE: Referencing Translated Value in Twig Template for Shopware 6\nDESCRIPTION: This snippet demonstrates how to use the 'trans' Twig function to reference a translated value in a Shopware 6 template. It uses the 'general.homeLink' key to fetch the corresponding translation.\nSOURCE: https://github.com/shopware/docs/blob/main/concepts/framework/architecture/storefront-concept.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"general.homeLink\"|trans }}\n```\n\n----------------------------------------\n\nTITLE: Registering DataSelection and DataSet in services.xml for Shopware Migration\nDESCRIPTION: This XML snippet shows how to register the ProductDataSelection and ProductDataSet in the services.xml file. They are tagged with 'shopware.migration.data_selection' and 'shopware.migration.data_set' respectively.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/creating-a-new-migration-profile.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\ProductDataSelection\">\n    <tag name=\"shopware.migration.data_selection\"/>\n</service>\n\n<service id=\"SwagMigrationOwnProfileExample\\Profile\\OwnProfile\\DataSelection\\DataSet\\ProductDataSet\">\n    <tag name=\"shopware.migration.data_set\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Explaining Original Unoptimized Cart Cleanup Query in SQL\nDESCRIPTION: This SQL query explains the execution plan of the original cart cleanup operation, which doesn't use any database index for finding outdated cart entries, leading to poor performance on high-traffic shops.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-05-09-optimise-cart-cleanup.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN DELETE FROM cart\nWHERE (updated_at IS NULL AND created_at <= '2023-02-01')\n   OR (updated_at IS NOT NULL AND updated_at <= '2023-02-01') LIMIT 1000;\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Plugin Options in Shopware 6 Twig Templates\nDESCRIPTION: Demonstrates how to modify existing plugin options in Shopware 6 using the replace_recursive Twig filter. This example shows how to override a specific option (mouseDrag) for a product slider plugin.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% block element_product_slider_slider %}\n    {% set productSliderOptions = productSliderOptions|replace_recursive({\n        slider: {\n            mouseDrag: true\n        }\n    }) %}\n\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating WarehouseGroup API Example\nDESCRIPTION: JSON payload example for creating or updating a WarehouseGroup and assigning it to an existing Warehouse via POST or PATCH requests.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/api/multi-inventory.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"8cf7736855594501aaf86351e147c61e\",\n    \"name\": \"Group A\",\n    \"description\": \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore.\",\n    \"priority\": 25,\n    \"ruleId\": \"93248b220a064424a1f6e90010820ba2\",\n    \"warehouses\":  [{\n        \"id\": \"4ce2bd36d2824153812fcb6a97f22d22\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Commands for Deployer Structure\nDESCRIPTION: Bash commands for migrating existing Shopware instance to Deployer directory structure.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncp /var/www/shopware_backup/.env.local /var/www/shopware/shared/.env.local\ncp -R /var/www/shopware_backup/custom/plugins /var/www/shopware/shared/custom\ncp -R /var/www/shopware_backup/config/jwt /var/www/shopware/shared/config\ncp -R /var/www/shopware_backup/config/packages /var/www/shopware/shared/config\ncp -R /var/www/shopware_backup/files /var/www/shopware/shared\ncp -R /var/www/shopware_backup/var/log /var/www/shopware/shared/var\ncp -R /var/www/shopware_backup/public/media /var/www/shopware/shared/public\ncp -R /var/www/shopware_backup/public/thumbnail /var/www/shopware/shared/public\ncp -R /var/www/shopware_backup/public/sitemap /var/www/shopware/shared/public\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Property for Dailymotion Video URL in JavaScript\nDESCRIPTION: Enhances the component by adding a computed property that constructs the Dailymotion embed URL using the video ID configured by the shop manager.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/elements/dailymotion/component/index.js\nimport template from './sw-cms-el-dailymotion.html.twig';\nimport './sw-cms-el-dailymotion.scss';\n\nShopware.Component.register('sw-cms-el-dailymotion', {\n    template,\n\n    computed: {\n        dailyUrl() {\n            return `https://www.dailymotion.com/embed/video/${this.element.config.dailyUrl.value}`;\n        }\n    },    \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific RabbitMQ Version\nDESCRIPTION: Nix configuration for pinning RabbitMQ to a specific version (3.13.7) using package override.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/installation/setups/devenv.md#2025-04-22_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\n{\n  services.rabbitmq = let\n    rabbitmq3137 = pkgs.rabbitmq-server.overrideAttrs (oldAttrs: {\n      version = \"3.13.7\";\n      src = pkgs.fetchurl {\n        url = \"https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.13.7/rabbitmq-server-3.13.7.tar.xz\";\n        sha256 = \"sha256-GDUyYudwhQSLrFXO21W3fwmH2tl2STF9gSuZsb3GZh0=\";\n      };\n    });\n  in\n  {\n    enable = true;\n    package = rabbitmq3137;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Check Context in PHP\nDESCRIPTION: Demonstrates how to implement custom check contexts for specific requirements, allowing selective execution in specific environments.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2024-08-02-system-health-check.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    protected function allowedSystemCheckExecutionContexts(): array\n    {\n        # list of contexts\n        return [SystemCheckExecutionContext::CRON, SystemCheckExecutionContext::WEB];\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing One to One Association in Bar Entity Definition\nDESCRIPTION: Example of adding a One to One association from Bar to Foo entity. Includes a foreign key field and a OneToOneAssociationField.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-data-associations.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function defineFields(): FieldCollection\n{\n    return new FieldCollection([\n        (new IdField('id', 'id'))->addFlags(new Required(), new PrimaryKey()),\n        (new FkField('foo_id', 'fooId', FooDefinition::class))->addFlags(new Required()),\n        (new StringField('name', 'name'))->addFlags(new Required()),\n\n        new OneToOneAssociationField('foo', 'foo_id', 'id', FooDefinition::class, false)\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in Shopware 6\nDESCRIPTION: Clears the cache for the dev environment with debug mode enabled.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/infrastructure/elasticsearch/elasticsearch-debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom System Checker in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom system checker class that takes all registered system checks as a constructor argument via dependency injection. It provides a framework for implementing custom check logic.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/system-check/index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CustomSystemChecker\n{\n   public function __construct(private readonly iterable $checks)\n    {\n    }\n\n    public function check(): array\n    {\n       # ... add your custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Check with Experimental Code\nDESCRIPTION: Example showing how to use the feature flag in conjunction with experimental code. This demonstrates the connection point between the feature flag system and experimental implementations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-09-06-feature-property-for-experimental-anotation.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif (Feature.isActive('WISHLIST') {\n        $obj = new Foo();\n        // New implementation\n} else {\n        // Old/current implementation\n}\n```\n\n----------------------------------------\n\nTITLE: CMS Element Preview Styling\nDESCRIPTION: SCSS styles for the preview component, positioning the play icon over the preview image.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-element.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.sw-cms-el-preview-dailymotion {\n    position: relative;\n\n    .sw-cms-el-preview-dailymotion-img {\n        display: block;\n        max-width: 100%;\n    }\n\n    .sw-cms-el-preview-dailymotion-icon {\n        $icon-height: 50px;\n        $icon-width: $icon-height;\n        position: absolute;\n        height: $icon-height;\n        width: $icon-width;\n\n        left: calc(50% - #{$icon-width/2});\n        top: calc(50% - #{$icon-height/2});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Custom Field Data Using Repository in PHP\nDESCRIPTION: This code shows how to insert custom field data into an entity using the Data Abstraction Layer (DAL) repository. It demonstrates adding a custom field without prior definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/custom-field/add-custom-field.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$this->swagExampleRepository->upsert([\n    [\n        'id' => '<your ID here>',\n        'customFields' => ['swag_example_size' => 15]\n    ]\n], $context);\n```\n\n----------------------------------------\n\nTITLE: Converting Local Plugins to Composer Management using Shopware-CLI\nDESCRIPTION: Command to migrate locally installed plugins to be managed via Composer through Shopware Packagist. Requires a Shopware Packages Token from the Shopware Account under Shops > Licenses.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/project-commands/autofix.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli project autofix composer-plugins\n```\n\n----------------------------------------\n\nTITLE: Country State Data Hook Implementation\nDESCRIPTION: Hook triggered when loading country state data, providing access to country state pagelet information.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Storefront\\Pagelet\\Country\\CountryStateDataPageletLoadedHook\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Helper Scripts in package.json (JSON)\nDESCRIPTION: Defines three npm scripts (`docs:env`, `docs:link`, `docs:preview`) within the `package.json` of the external repository being embedded. These scripts automate cloning/updating the developer portal, linking the local documentation into it using the Docs CLI (`docs-cli.cjs`), and starting the Vitepress preview server, simplifying the developer workflow. Requires `git` and `pnpm`.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/documentation-guidelines/07-embedding-external-repositories.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"docs:env\": \"[ -d \\\"../developer-portal\\\" ] && ../developer-portal/docs-cli.cjs pull || (git clone git@github.com:shopware/developer-portal.git ../developer-portal && pnpm i -C ../developer-portal)\",\n    \"docs:link\": \"../developer-portal/docs-cli.cjs link --src . --dst docs --symlink\",\n    \"docs:preview\": \"../developer-portal/docs-cli.cjs preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Session Handler in Shopware YAML Configuration\nDESCRIPTION: Example of how to configure Redis as the session handler in Shopware using YAML configuration when direct PHP.ini access is not available. This sets up the framework to use Redis at the specified host and port.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/session.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/redis.yml\nframework:\n    session:\n        handler_id: \"redis://host:port/0\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Route Events in PHP\nDESCRIPTION: Demonstrates how to subscribe to specific route events in Shopware 6 using PHP. It shows how to listen for request and encode events for a product listing route.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/event/finding-events.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getSubscribedEvents(): array\n{\n    return [\n        'store-api.product.listing.request' => 'onListingRequest',\n        'store-api.product.listing.encode' => 'onListingEncode'\n    ];\n}\n\npublic function onListingRequest(RequestEvent $event): void\n{\n}\n\npublic function onListingEncode(ResponseEvent $event): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Repository Mocking in Shopware 6\nDESCRIPTION: Shows the verbose way of mocking repository search results by manually creating EntitySearchResult objects, which leads to boilerplate code in tests.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-04-01-mocking-repositories.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$result = new EntitySearchResult(\n    'my-entity',\n    1,\n    new EntityCollection([]),\n    null,\n    new Criteria(),\n    Context::createDefaultContext()\n);\n\n$entityRepository = $this->createMock(EntityRepository::class);\n$entityRepository\n    ->expects(static::once())\n    ->method('search')\n    ->willReturn($result);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data to Cart Line Items\nDESCRIPTION: Shows how to add and access custom payload data for cart line items using the payload.set() and array access methods.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/cart-manipulation.md#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set lineItem = services.cart.get(lineItemId) %}\n{# Add a custom payload value #}\n{% do lineItem.payload.set('custom-payload', myValue) %}\n{# Access the value #}\n{%  set value = lineItem.payload['custom-payload']) %}\n```\n\n----------------------------------------\n\nTITLE: Registering an Entity in Shopware 6 services.xml\nDESCRIPTION: This XML snippet demonstrates how to register a custom entity in the Shopware 6 DI container using the services.xml file. It adds the 'shopware.entity' tag to the service definition.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/entities-via-attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Shopware\\Tests\\Integration\\Core\\Framework\\DataAbstractionLayer\\fixture\\ExampleEntity\">\n    <tag name=\"shopware.entity\"/>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Registering a custom module in Shopware Administration\nDESCRIPTION: Shows how to register a custom module using the Module.register() method from the Shopware object. Modules are encapsulated units of routes and pages that implement whole features.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/the-shopware-object.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Module } = Shopware;\n\nModule.register('your-module', {});\n```\n\n----------------------------------------\n\nTITLE: Deleting ToOne Association in Shopware 6 PHP\nDESCRIPTION: Demonstrates how to remove a ToOne association (OneToOne or ManyToOne) by setting the ID field to null. This example removes a manufacturer from a product.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/deleting-associated-data.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function removeAssocData(Context $context): void\n{\n    $this->productRepository->update([\n        [\n            'id' => 'myProductId',\n            'manufacturerId' => null\n        ]\n    ], $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Tags for Custom Responses\nDESCRIPTION: Demonstrates how to add custom cache tags to a response for fine-grained cache invalidation. This example adds a custom tag to a JSON response.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/custom-endpoints.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set response = services.response.json({ 'foo': 'bar' }) %}\n{% do response.cache.tag('my-custom-tag') %}\n\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundle Service for Shopware 5 API Data Retrieval in PHP\nDESCRIPTION: Defines a `BundleService` extending `AbstractApiService` in a Shopware 5 plugin. It utilizes the injected `BundleRepository` to fetch bundle and associated product data, maps it into a structured array using `mapData`, links products to bundles, and prepares the result set using `cleanupResultSet` for the API controller. Depends on the custom `BundleRepository` and Migration Connector services.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/guides/extending-the-migration-connector.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * (c) shopware AG <info@shopware.com>\n * For the full copyright and license information, please view the LICENSE\n * File that was distributed with this source code.\n */\n\nnamespace SwagMigrationBundleApiExample\\Service;\n\nuse SwagMigrationBundleApiExample\\Repository\\BundleRepository;\nuse SwagMigrationConnector\\Repository\\ApiRepositoryInterface;\nuse SwagMigrationConnector\\Service\\AbstractApiService;\n\nclass BundleService extends AbstractApiService\n{\n    private BundleRepository $bundleRepository;\n\n    /**\n     * @param ApiRepositoryInterface $bundleRepository\n     */\n    public function __construct(ApiRepositoryInterface $bundleRepository)\n    {\n        $this->bundleRepository = $bundleRepository;\n    }\n\n    /**\n     * @param int $offset\n     * @param int $limit\n     *\n     * @return array\n     */\n    public function getBundles($offset = 0, $limit = 250)\n    {\n        $bundles = $this->bundleRepository->fetch($offset, $limit);\n        $ids = array_column($bundles, 'bundles.id');\n        $bundleProducts = $this->bundleRepository->fetchBundleProducts($ids);\n\n        // Strip the table prefix 'bundles' out of the bundles array\n        $bundles = $this->mapData($bundles, [], ['bundles']);\n\n        foreach ($bundles as &$bundle) {\n            if (isset($bundleProducts[$bundle['id']])) {\n                $bundle['products'] = $bundleProducts[$bundle['id']];\n            }\n        }\n\n        return $this->cleanupResultSet($bundles);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deprecating CSS Selectors in Templates\nDESCRIPTION: Shows how to deprecate CSS class names while maintaining backward compatibility by including both old and new class names with proper comments.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{# @deprecated tag:v6.5.0 - CSS class \"card-primary\" is deprecated, use \"card-major\" instead #}\n<div class=\"card card-major card-primary\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Product Line Item by ID in Twig\nDESCRIPTION: Example of using the get() method to retrieve a product line item by its ID in Twig. This snippet demonstrates how to get a product line item from the cart using a product ID.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_26\n\nLANGUAGE: twig\nCODE:\n```\n{% set product = services.cart.products.get(hook.ids.get('p1')) %}\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Modal Response with PHP SDK\nDESCRIPTION: PHP SDK example showing how to create a response that opens a custom modal with an embedded iframe after an action button is clicked.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/administration/add-custom-action-button.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Response\\ActionButtonResponse;\n\nActionButtonResponse::modal('https://shopware.com', size: 'medium', expand: true)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Entity Translation in Shopware 6\nDESCRIPTION: This JSON snippet shows how to add a translation for a custom entity in Shopware 6. It defines singular and plural forms for the entity name.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/data-handling-processing/search-custom-data.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"global\": {\n        \"entities\": {\n            \"my_entity\": \"My entity | My entities\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Symfony Bundle JWT Validation\nDESCRIPTION: PHP code showing JWT validation implementation using Symfony Bundle with CORS configuration\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/clientside-to-app-backend.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Shopware\\App\\SDK\\Context\\Storefront\\StorefrontAction;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[AsController]\nclass StorefrontController {\n    #[Route('/storefront/action')]\n    public function handle(StorefrontAction $webhook): Response\n    {\n        // handle action\n        \n        return new Response(null, 204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Payment Method Mapping in Shopware Migration\nDESCRIPTION: This method from the CustomerConverter retrieves the mapping for a default payment method. It demonstrates how to use the MappingService to get existing mappings without creating new ones.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/migration-assistant/concept/convert-and-mapping.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function getDefaultPaymentMethod(array $originalData): ?string\n{\n    $paymentMethodMapping = $this->mappingService->getMapping(\n        $this->connectionId,\n        PaymentMethodReader::getMappingName(),\n        $originalData['id'],\n        $this->context\n    );\n\n    if ($paymentMethodMapping === null) {\n        $this->loggingService->addLogEntry(new UnknownEntityLog(\n            $this->runId,\n            DefaultEntities::PAYMENT_METHOD,\n            $originalData['id'],\n            DefaultEntities::CUSTOMER,\n            $this->oldCustomerId\n        ));\n\n        return null;\n    }\n    $this->mappingIds[] = $paymentMethodMapping['id'];\n\n    return $paymentMethodMapping['entityUuid'];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Class for Search Field Configuration in PHP\nDESCRIPTION: PHP migration class that adds the 'prefixProductNumber' field to the advanced search configuration. This makes the field searchable by inserting its definition into the advanced_search_config_field table.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/How-to-add-more-fields-to-product-search.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace YourPluginNameSpace\\Migration;\n\nuse Doctrine\\DBAL\\Connection;\nuse Shopware\\Commercial\\AdvancedSearch\\Entity\\AdvancedSearchConfig\\Aggregate\\AdvancedSearchConfigFieldDefinition;\nuse Shopware\\Core\\Content\\Product\\ProductDefinition;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Migration\\MigrationStep;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\nclass Migration1692954529AddNewPrefixProductNumberFieldIntoProductAdvancedSearch extends MigrationStep\n{\n    public function getCreationTimestamp(): int\n    {\n        return 1692954529;\n    }\n\n    public function update(Connection $connection): void\n    {\n        $configSalesChannelIds = $connection->fetchFirstColumn('SELECT id FROM advanced_search_config');\n\n        $createdAt = (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT);\n\n        foreach ($configSalesChannelIds as $configSalesChannelId) {\n            $connection->insert(AdvancedSearchConfigFieldDefinition::ENTITY_NAME, [\n                'id' => Uuid::randomBytes(),\n                'field' => 'prefixProductNumber',\n                'config_id' => $configSalesChannelId,\n                'entity' => ProductDefinition::ENTITY_NAME,\n                'tokenize' => 1,\n                'searchable' => 1,\n                'ranking' => 500,\n                'created_at' => $createdAt,\n            ]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SCSS Example for Spacing\nDESCRIPTION: Example of custom SCSS selector that adds bottom margin of $spacer, which could be replaced with a Bootstrap utility class.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2023-10-19-bootstrap-css-utils.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.register-login-collapse-toogle {\n    margin-bottom: $spacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Slot Existence in Vue 3\nDESCRIPTION: Updated method to check for slot existence in Vue 3, verifying if the slot contains an actual v-node.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/upgrades/administration/vue3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Vue 2\nif (this.$slots.mySlot) {\n  // Slot exists\n}\n\n// Vue 3\nif (this.$slots.mySlot && this.$slots.mySlot().length > 0) {\n  // Slot exists and has content\n}\n```\n\n----------------------------------------\n\nTITLE: Computed Property Override for Rule Assignments\nDESCRIPTION: Implementation of the computed property override to extend the associationEntitiesConfig with custom configurations.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/advanced-configuration/add-rule-assignment-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nComponent.override('sw-settings-rule-detail-assignments', {\n    computed: {\n        associationEntitiesConfig() {\n            const associationEntitiesConfig = this.$super('associationEntitiesConfig');\n            associationEntitiesConfig.push(/* insert your configuration here */);\n            return associationEntitiesConfig;\n        },\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Additional System Permissions\nDESCRIPTION: Example demonstrating how to add additional permissions for system operations like cache clearing.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/permissions-error-handling/add-acl-rules.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'additional_permissions',\n    parent: null,\n    key: 'system',\n    roles: {\n        clear_cache: {\n            privileges: ['system:clear:cache'],\n            dependencies: []\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating a Plugin in Shopware 6\nDESCRIPTION: Command to install and activate a Shopware 6 plugin. This command both installs the plugin into the system and activates it in one step.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/plugin-base-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console plugin:install --activate SwagBasicExample\n```\n\n----------------------------------------\n\nTITLE: Extended Syntax in Shopware App Scripts: Type Checks\nDESCRIPTION: Illustrates how to perform type checks using the 'is' keyword in Shopware App Scripts.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/app-scripts/index.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% if var is string %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Migrating Number Range Storage\nDESCRIPTION: Shell command template for migrating number range data between different storage backends.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/performance/number-ranges.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/console number-range:migrate {fromStorage} {toStorage}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopware App Environment Variables\nDESCRIPTION: Sets up environment variables for the Shopware app name and secret in the .env file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/apps/starter/product-translator.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n// .env\n....\n\n###> shopware/app-bundle ###\nSHOPWARE_APP_NAME=TestApp\nSHOPWARE_APP_SECRET=TestSecret\n###< shopware/app-bundle ###\n```\n\n----------------------------------------\n\nTITLE: Order Event Payload Structure in JSON\nDESCRIPTION: JSON structure for order events in Shopware. It specifies the entity name, operation type, primary key, and payload array.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/webhook-events-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"order\",\"operation\":\"update insert\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"entity\":\"order\",\"operation\":\"deleted\",\"primaryKey\":\"array string\",\"payload\":\"array\"}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Configuration\nDESCRIPTION: YAML frontmatter configuration for navigation settings of the documentation page, defining the title and position in navigation hierarchy\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/setup-3rd-party/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnav:\n  title: Setup 3rd parties\n  position: 20\n\n---\n```\n\n----------------------------------------\n\nTITLE: Setting up Shopware CLI in GitHub Codespaces\nDESCRIPTION: JSON configuration for GitHub Codespaces that installs Shopware CLI as a feature in the development container.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/installation.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/base:ubuntu\",\n    \"features\": {\n        \"ghcr.io/shyim/devcontainers-features/shopware-cli:latest\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Location Configuration\nDESCRIPTION: JSON configuration for defining custom icon locations in theme.json file, allowing custom icon pack definitions.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/add-icons.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* ... */\n  \"iconSets\": {\n    \"custom-icons\": \"app/storefront/src/assets/icon-pack/custom-icons\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Notice to Cart in Twig\nDESCRIPTION: Illustrates adding a notice to the cart using the warning() method. This displays a message without blocking checkout.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/cart-manipulation-script-services-reference.md#2025-04-22_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{% do services.cart.errors.warning('ADD_PRODUCTS_OR_GO_AWAY') %}\n```\n\n----------------------------------------\n\nTITLE: Writing to Custom Product Extension\nDESCRIPTION: Example of writing data to the custom product extension field using the product repository.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/framework/data-handling/add-complex-data-to-existing-entities.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->productRepository->upsert([[\n    'id' => '<your product ID here>',\n    'exampleExtension' => [\n        'customString' => 'foo bar'\n    ]\n]], $context);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Shopping List with Store API\nDESCRIPTION: GET endpoint for retrieving a specific shopping list by its ID.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-components/shopping-lists/guides/api-and-pricing.md#2025-04-22_snippet_2\n\nLANGUAGE: http request\nCODE:\n```\nGET {url}/store-api/shopping-list/{id}\n```\n\n----------------------------------------\n\nTITLE: Guest Wishlist Hook Implementation\nDESCRIPTION: Hook triggered when loading guest wishlist data, providing access to guest wishlist pagelet information.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/app-reference/script-reference/script-hooks-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nShopware\\Storefront\\Pagelet\\Wishlist\\GuestWishlistPageletLoadedHook\n```\n\n----------------------------------------\n\nTITLE: Watch Admin Changes in Source Code\nDESCRIPTION: Command to enable Hot Module Replacement for the administration interface in development.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/tooling/cli/using-watchers.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run watch:admin\n```\n\n----------------------------------------\n\nTITLE: Running Shopware Storefront E2E Tests with Cypress\nDESCRIPTION: This command runs Cypress E2E tests for the Shopware storefront in the command-line interface.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer e2e:cypress -- run --spec=\"cypress/e2e/storefront/**/*.cy.js\"\n```\n\n----------------------------------------\n\nTITLE: Docker SSH Access Command\nDESCRIPTION: Command to access the web container via SSH in the Docker environment.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/installation/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./psh.phar docker:ssh\n```\n\n----------------------------------------\n\nTITLE: Registering Tax Provider in DI Container using XML\nDESCRIPTION: Shows how to register the custom tax provider in the Dependency Injection container using a services.xml file. The service is tagged as 'shopware.tax.provider'.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/tax-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Swag\\BasicExample\\Checkout\\Cart\\Tax\\TaxProvider\">\n            <tag name=\"shopware.tax.provider\" />\n        </service>\n    </services>\n```\n\n----------------------------------------\n\nTITLE: Creating Shopware Database Backup for E2E Testing\nDESCRIPTION: This command creates a backup of Shopware's database specifically for E2E testing environment.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/testing-reference/e2e-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=e2e bin/console e2e:dump-db\n```\n\n----------------------------------------\n\nTITLE: Implementing the Theme Interface in Shopware\nDESCRIPTION: This snippet mentions the interface that needs to be implemented to distinguish a theme from a regular plugin or app in Shopware.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/themes/differences-plugins-and-apps-vs-themes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Shopware\\Storefront\\Framework\\ThemeInterface`\n```\n\n----------------------------------------\n\nTITLE: Deployment Helper Task\nDESCRIPTION: PHP task for running the Shopware deployment helper during deployment.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/deployments/deployment-with-deployer.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntask('sw:deployment:helper', static function() {\n    run('cd {{release_path}} && vendor/bin/shopware-deployment-helper run');\n});\n```\n\n----------------------------------------\n\nTITLE: Building Storefront in Shopware 6\nDESCRIPTION: Commands for building the Storefront in Shopware 6 to see changes in plugins. Includes options for both template and platform-only (contribution) setups.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/storefront/add-custom-javascript.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./bin/build-storefront.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run build:js:storefront\n```\n\n----------------------------------------\n\nTITLE: Refreshing Shopware Plugins\nDESCRIPTION: Command to refresh Shopware's plugin list after migrating extensions to Composer.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/hosting/installation-updates/extension-managment.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/console plugin:refresh\n```\n\n----------------------------------------\n\nTITLE: Store Unregistration in Pinia\nDESCRIPTION: Example of how to unregister a Pinia store.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/administration/system-updates/pinia.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nShopware.Store.unregister('<storeName>');\n```\n\n----------------------------------------\n\nTITLE: PHP Event Class References for Search Criteria\nDESCRIPTION: References to event classes that can be subscribed to for adjusting search criteria in both multi-content search and suggest functionalities.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/advanced-search/Search-and-suggest-routes.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Commercial\\AdvancedSearch\\Event\\MultiContentSearchCriteriaEvent\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Shopware\\Commercial\\AdvancedSearch\\Event\\MultiContentSuggestCriteriaEvent\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Archive with CLI\nDESCRIPTION: Command to create a ZIP archive of the extension using Shopware CLI.\nSOURCE: https://github.com/shopware/docs/blob/main/products/cli/extension-commands/build.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nshopware-cli extension zip <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming a Method in JavaScript\nDESCRIPTION: Demonstrates how to rename a JavaScript method while maintaining backward compatibility through delegation and proper JSDoc annotations.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/guidelines/code/backward-compatibility.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @deprecated tag:v6.5.0 - Use onItemClick() instead\n */\nonClick(event) {\n    return onItemClick(event);\n},\n \nonItemClick(event) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Context Owner in Shopware B2B Authentication\nDESCRIPTION: PHP code demonstrating how to access the current context owner using the AuthenticationService in Shopware B2B Suite.\nSOURCE: https://github.com/shopware/docs/blob/main/products/extensions/b2b-suite/guides/core/authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var AuthenticationService $authenticationService */\n$authenticationService = $this->container->get('b2b_front_auth.authentication_service');\n\nif (!$authenticationService->isB2b()) {\n    throw new \\Exception('User must be logged in');\n}\n\n$ownershipContext = $authenticationService\n    ->getIdentity()\n    ->getOwnershipContext();\n\necho 'The context owner id ' . $ownershipContext->contextOwnerId . '\\n';\n```\n\n----------------------------------------\n\nTITLE: Creating Block Template Structure with Twig\nDESCRIPTION: This Twig template defines the HTML structure for the custom CMS block, creating a container with two named slots ('left' and 'right') that will be used to position content elements within the block.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/content/cms/add-cms-block.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n// <plugin root>/src/Resources/app/administration/src/module/sw-cms/blocks/text-image/my-image-text-reversed/component/sw-cms-block-my-image-text-reversed.html.twig\n{% block sw_cms_block_my_image_text_reversed %}\n    <div class=\"sw-cms-block-my-image-text-reversed\">\n        <slot name=\"left\">{% block sw_cms_block_my_image_text_reversed_slot_left %}{% endblock %}</slot>\n        <slot name=\"right\">{% block sw_cms_block_my_image_text_reversed_slot_right %}{% endblock %}</slot>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ShippingFixtureService for Shopware E2E Testing\nDESCRIPTION: Defines a custom ShippingFixtureService class that extends AdminFixtureService to create shipping method fixtures with necessary data retrieved from the REST API.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/testing/end-to-end-testing.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst AdminFixtureService = require('../fixture.service.js');\n\nclass ShippingFixtureService extends AdminFixtureService {\n    setShippingFixture(userData) {\n        // Here we're going to create our shipping fixture\n    }\n}\n\nmodule.exports = ShippingFixtureService;\n\nglobal.ShippingFixtureService = new ShippingFixtureService();\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm globally\nDESCRIPTION: Command to install pnpm package manager with global scope using npm.\nSOURCE: https://github.com/shopware/docs/blob/main/products/digital-sales-rooms/installation/app-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Setting the Response in a Storefront Script Hook (Twig)\nDESCRIPTION: Assigns a previously created response object (e.g., JsonResponse, RedirectResponse, StorefrontResponse) to the script hook. This determines the output sent back to the client from a custom Storefront endpoint. If no response is explicitly set using this method, an empty 204 No Content response is sent by default.\nSOURCE: https://github.com/shopware/docs/blob/main/resources/references/adr/2022-01-06-custom-app-api-endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do hook.setResponse(response) %}\n```\n\n----------------------------------------\n\nTITLE: Installing Static Plugins via Composer in Shopware\nDESCRIPTION: Command for installing project-specific static plugins in Shopware using Composer. This requires knowing the vendor/package name from the plugin's composer.json file.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# You can find the vendor/package name in the plugin's composer.json file under \"name\"\ncomposer req <vendor>/<plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Persisting Tax Provider using Entity Repository in PHP\nDESCRIPTION: Demonstrates how to use the entity repository to persist the custom tax provider to the database within the plugin's install method. It also creates an availability rule for the provider.\nSOURCE: https://github.com/shopware/docs/blob/main/guides/plugins/plugins/checkout/cart/tax-provider.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace SwagBasicExample;\n\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\nuse Shopware\\Core\\Framework\\Plugin;\nuse Shopware\\Core\\Framework\\Plugin\\Context\\InstallContext;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\nclass SwagBasicExample extends Plugin\n{\n    public function install(InstallContext $installContext): void\n    {\n        $ruleRepo = $this->container->get('rule.repository');\n\n        $rule = $ruleRepo->create([\n            [\n                'name' => 'Cart > 0',\n                'priority' => 0,\n                'conditions' => [\n                    [\n                        'type' => 'cart.cartAmount',\n                        'operator' => '>=',\n                        'value' => 0,\n                    ],\n                ],\n            ],\n        ], $installContext->getContext());\n        \n        $criteria = new Criteria();\n        $criteria->addFilter(\n            new EqualsFilter('name', 'Cart > 0')\n        );\n\n        $ruleId = $ruleRepo->searchIds($criteria, $installContext->getContext())->firstId();\n\n        $taxRepo = $this->container->get('tax_provider.repository');\n        $taxRepo->create([\n            [\n                'id' => Uuid::randomHex(),\n                'identifier' => Swag\\BasicExample\\Checkout\\Cart\\Tax\\TaxProvider::class,\n                'priority' => 1,\n                'active' => false,\n                'availabilityRuleId' => $ruleId,\n            ],\n        ], $installContext->getContext());\n    }\n}\n```"
  }
]