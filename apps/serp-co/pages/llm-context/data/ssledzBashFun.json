[
  {
    "owner": "ssledz",
    "repo": "bash-fun",
    "content": "TITLE: Quick Start Example for fun.sh Library in Bash\nDESCRIPTION: Demonstrates how to source the fun.sh library and use the 'sum' function on a sequence of numbers.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n. <(test -e fun.sh || curl -Ls https://raw.githubusercontent.com/ssledz/bash-fun/master/src/fun.sh > fun.sh; cat fun.sh)\n\nseq 1 4 | sum\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Examples in Bash\nDESCRIPTION: Shows how to use 'try' and 'catch' functions for error handling in Bash scripts.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ echo 'expr 2 / 0' | try λ _ . 'echo 0'\n0\n\n$ echo 'expr 2 / 0' | try λ status . 'echo $status'\n2\n\n$ echo 'expr 2 / 2' | try λ _ . 'echo 0'\n1\n\ntry λ  _ . 'echo some errors during pull; exit 1' < <(echo git pull)\n\n$ echo 'expr 2 / 0' \\\n    | LANG=en catch λ cmd status val . 'echo cmd=$cmd,status=$status,val=$val'\ncmd=expr 2 / 0,status=2,val=(expr:,division,by,zero)\n\n$ echo 'expr 2 / 2' | catch λ _ _ val . 'tupl $val'\n1\n```\n\n----------------------------------------\n\nTITLE: Name Processing Example using Multiple Functions in Bash\nDESCRIPTION: Demonstrates a complex example using multiple functions like 'filter', 'map', and 'foldl' to process a list of names.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nprocessNames() {\n\n  uppercase() {\n     local str=$1\n     echo $(tr 'a-z' 'A-Z' <<< ${str:0:1})${str:1}\n  }\n\n  list $@ \\\n    | filter λ name . '[[ ${#name} -gt 1 ]] && ret true || ret false' \\\n    | map λ name . 'uppercase $name' \\\n    | foldl λ acc el . 'echo $acc,$el'\n\n}\n\nprocessNames adam monika s slawek d daniel Bartek j k\n```\n\n----------------------------------------\n\nTITLE: Map Function Examples in Bash\nDESCRIPTION: Demonstrates various uses of the 'map' function for applying operations to list items.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ seq 1 5 | map λ a . 'echo $((a + 5))'\n6\n7\n8\n9\n10\n\n$ list a b s d e | map λ a . 'echo $a$(echo $a | tr a-z A-Z)'\naA\nbB\nsS\ndD\neE\n\n$ list 1 2 3 | map echo\n1\n2\n3\n\n$ list 1 2 3 | map 'echo $ is a number'\n1 is a number\n2 is a number\n3 is a number\n\n$ list 1 2 3 4 | map 'echo \\($,$\\) is a point'\n(1,1) is a point\n(2,2) is a point\n(3,3) is a point\n(4,4) is a point\n```\n\n----------------------------------------\n\nTITLE: List Manipulation Functions Example in Bash\nDESCRIPTION: Demonstrates usage of 'drop', 'lhead', 'ltail', 'last', and 'take' functions for list manipulation.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ list 1 2 3 4 | drop 2\n3\n4\n\n$ list 1 2 3 4 5 | lhead\n1\n\n$ list 1 2 3 4 | ltail\n2\n3\n4\n\n$ list 1 2 3 4 5 | last\n5\n\n$ list 1 2 3 4 5 | take 2\n1\n2\n```\n\n----------------------------------------\n\nTITLE: File System Check Functions Examples in Bash\nDESCRIPTION: Demonstrates usage of various file system check functions like 'isfile', 'isnonzerofile', 'isreadable', 'iswritable', and 'isdir'.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ touch /tmp/foo\n\n$ isfile /tmp/foo\ntrue\n\n$ not iswritable /\ntrue\n\n$ files=\"/etc/passwd /etc/sudoers /tmp /tmp/foo /no_such_file\"\n\n$ list $files | filter λ a . 'isfile $a'\n/etc/passwd\n/etc/sudoers\n/tmp/foo\n\n$ list $files | filter λ a . 'isdir $a'\n/tmp\n\n$ list $files | filter λ a . 'isreadable $a'\n/etc/passwd\n/tmp\n/tmp/foo\n\n$ list $files | filter λ a . 'iswritable $a'\n/tmp\n/tmp/foo\n\n$ list $files | filter λ a . 'isnonzerofile $a'\n/etc/passwd\n/etc/sudoers\n/tmp\n\n$ list $files | filter λ a . 'not isfile $a'\n/tmp\n/no_such_file\n```\n\n----------------------------------------\n\nTITLE: List and Unlist Functions Example in Bash\nDESCRIPTION: Shows usage of 'list' function to create a list and 'unlist' to concatenate list items.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ list 1 2 3\n1\n2\n3\n\n$ list 1 2 3 4 5 | unlist\n1 2 3 4 5\n```\n\n----------------------------------------\n\nTITLE: Filter Function Example in Bash\nDESCRIPTION: Demonstrates using the 'filter' function to select even numbers from a sequence.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ seq 1 10 | filter λ a . '[[ $(mod $a 2) -eq 0 ]] && ret true || ret false'\n2\n4\n6\n8\n10\n```\n\n----------------------------------------\n\nTITLE: Fold Left and Right Examples in Bash\nDESCRIPTION: Shows usage of 'foldl' and 'foldr' functions for list reduction operations.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ list a b c d | foldl λ acc el . 'echo -n $acc-$el'\na-b-c-d\n\n$ list '' a b c d | foldr λ acc el .\\\n    'if [[ ! -z $acc ]]; then echo -n $acc-$el; else echo -n $el; fi'\nd-c-b-a\n\n$ seq 1 4 | foldl λ acc el . 'echo $(($acc + $el))'\n10\n\n$ seq 1 4 | foldl λ acc el . 'echo $(mul $(($acc + 1)) $el)'\n64 # 1 + (1 + 1) * 2 + (4 + 1) * 3 + (15 + 1) * 4 = 64\n\n$ seq 1 4 | foldr λ acc el . 'echo $(mul $(($acc + 1)) $el)'\n56 # 1 + (1 + 1) * 4 + (8 + 1) * 3 + (27 + 1) * 2 = 56\n```\n\n----------------------------------------\n\nTITLE: Boolean and Type Checking Functions Examples in Bash\nDESCRIPTION: Shows usage of 'not', 'isint', and 'isempty' functions for boolean operations and type checking.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ isint 42\ntrue\n\n$ list blah | isint\nfalse\n\n$ not true\nfalse\n\n$ not isint 777\nfalse\n\n$ list 1 2 \"\" c d 6 | filter λ a . 'isint $a'\n1\n2\n6\n\n$ list 1 2 \"\" c d 6 | filter λ a . 'not isempty $a'\n1\n2\nc\nd\n6\n```\n\n----------------------------------------\n\nTITLE: Peek Function Examples in Bash\nDESCRIPTION: Shows how to use the 'peek' function for debugging and inspecting intermediate results in a pipeline.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ list 1 2 3 \\\n    | peek lambda a . echo 'dbg a : $a' \\\n    | map lambda a . 'mul $a 2' \\\n    | peek lambda a . echo 'dbg b : $a' \\\n    | sum\n\ndbg a : 1\ndbg a : 2\ndbg a : 3\ndbg b : 2\ndbg b : 4\ndbg b : 6\n12\n\n$ a=$(seq 1 4 | peek lambda a . echo 'dbg: $a' | sum)\n\ndbg: 1\ndbg: 2\ndbg: 3\ndbg: 4\n\n$ echo $a\n\n10\n```\n\n----------------------------------------\n\nTITLE: Join Function Example in Bash\nDESCRIPTION: Shows how to use the 'join' function to concatenate list items with a separator and optional wrapping.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ list 1 2 3 4 5 | join ,\n1,2,3,4,5\n\n$ list 1 2 3 4 5 | join , [ ]\n[1,2,3,4,5]\n```\n\n----------------------------------------\n\nTITLE: Maybe Monad Functions Examples in Bash\nDESCRIPTION: Demonstrates the use of 'maybe', 'maybemap', and 'maybevalue' functions for handling optional values.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ list Hello | maybe\n(Just,Hello)\n\n$ list \"   \" | maybe\n(Nothing)\n\n$ list Hello | maybe | maybemap λ a . 'tr oH Oh <<<$a'\n(Just,hellO)\n\n$ list \"   \" | maybe | maybemap λ a . 'tr oH Oh <<<$a'\n(Nothing)\n\n$ echo bash-fun rocks | maybe | maybevalue DEFAULT\nbash-fun rocks\n\n$ echo | maybe | maybevalue DEFAULT\nDEFAULT\n```\n\n----------------------------------------\n\nTITLE: Flat Map Examples in Bash\nDESCRIPTION: Shows how to use 'map' function for flat mapping operations on lists.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ seq 2 3 | map λ a . 'seq 1 $a' | join , [ ]\n[1,2,1,2,3]\n\n$ list a b c | map λ a . 'echo $a; echo $a | tr a-z A-z' | join , [ ]\n[a,A,b,B,c,C]\n```\n\n----------------------------------------\n\nTITLE: Buffer Function Example in Bash\nDESCRIPTION: Demonstrates the use of 'buff' function for processing lists in chunks.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ seq 1 10 | buff λ a b . 'echo $(($a + $b))'\n3\n7\n11\n15\n19\n\n$ seq 1 10 | buff λ a b c d e . 'echo $(($a + $b + $c + $d + $e))'\n15\n40\n```\n\n----------------------------------------\n\nTITLE: Trampoline Function Example for Factorial Calculation in Bash\nDESCRIPTION: Shows how to use 'with_trampoline', 'res', and 'call' functions to implement tail-recursive factorial calculation.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nfactorial() {\n    fact_iter() {\n        local product=$1\n        local counter=$2\n        local max_count=$3\n        if [[ $counter -gt $max_count ]]; then\n            res $product\n        else\n            call fact_iter $(echo $counter\\*$product | bc) $(($counter + 1)) $max_count\n        fi\n    }\n\n    with_trampoline fact_iter 1 1 $1\n}\n\n$ time factorial 30 | fold -w 70\n265252859812191058636308480000000\n\nreal    0m1.854s\nuser    0m0.072s\nsys     0m0.368s\n\ntime factorial 60 | fold -w 70\n8320987112741390144276341183223364380754172606361245952449277696409600\n000000000000\n\nreal    0m3.635s\nuser    0m0.148s\nsys     0m0.692s\n\n$ time factorial 90 | fold -w 70\n1485715964481761497309522733620825737885569961284688766942216863704985\n393094065876545992131370884059645617234469978112000000000000000000000\n\nreal    0m4.371s\nuser    0m0.108s\nsys     0m0.436s\n```\n\n----------------------------------------\n\nTITLE: Curry Function Example in Bash\nDESCRIPTION: Demonstrates the use of 'curry' function to create partially applied functions.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nadd2() {\n    echo $(($1 + $2))\n}\n\n$ curry inc add2 1\n\n$ inc 2\n3\n\n$ seq 1 3 | map λ a . 'inc $a'\n2\n3\n4\n```\n\n----------------------------------------\n\nTITLE: Tuple Functions Examples in Bash\nDESCRIPTION: Demonstrates usage of tuple creation and manipulation functions like 'tup', 'tupx', 'tupl', and 'tupr'.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ tup a 1\n(a,1)\n\n$ tup 'foo bar' 1 'one' 2\n(foo bar,1,one,2)\n\n$ tup , 1 3\n(u002c,1,3)\n\n$ tupl $(tup a 1)\na\n\n$ tupr $(tup a 1)\n1\n\n$ tup , 1 3 | tupl\n,\n\n$ tup 'foo bar' 1 'one' 2 | tupl\nfoo bar\n\n$ tup 'foo bar' 1 'one' 2 | tupr\n2\n\n$ tup 'foo bar' 1 'one' 2 | tupx 2\n1\n\n$ tup 'foo bar' 1 'one' 2 | tupx 1,3\nfoo bar\none\n\n$ tup 'foo bar' 1 'one' 2 | tupx 2-4\n1\none\n2\n```\n\n----------------------------------------\n\nTITLE: Nested Tuple Functions Examples in Bash\nDESCRIPTION: Shows usage of nested tuple functions like 'ntup', 'ntupx', 'ntupl', and 'ntupr' for handling complex data structures.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ntup tuples that $(ntup safely nest)\n(dHVwbGVzCg==,dGhhdAo=,KGMyRm1aV3g1Q2c9PSxibVZ6ZEFvPSkK)\n\necho '(dHVwbGVzCg==,dGhhdAo=,KGMyRm1aV3g1Q2c9PSxibVZ6ZEFvPSkK)' | ntupx 3 | ntupr\nnest\n\n$ ntup 'foo,bar' 1 one 1\n(Zm9vLGJhcgo=,MQo=,b25lCg==,MQo=)\n\n$ echo '(Zm9vLGJhcgo=,MQo=,b25lCg==,MQo=)' | ntupx 1\nfoo,bar\n\n$ ntupl $(ntup 'foo bar' 1 one 2)\nfoo bar\n\n$ ntupr $(ntup 'foo bar' 1 one 2)\n2\n```\n\n----------------------------------------\n\nTITLE: List Zip Function Example in Bash\nDESCRIPTION: Shows how to use the 'lzip' function to combine two lists into tuples.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ list a b c d e f | lzip $(seq 1 10)\n(a,1)\n(b,2)\n(c,3)\n(d,4)\n(e,5)\n(f,6)\n\n$ list a b c d e f | lzip $(seq 1 10) | last | tupr\n6\n```\n\n----------------------------------------\n\nTITLE: Scanl Function Example in Bash\nDESCRIPTION: Demonstrates the use of 'scanl' function for generating a list of successive reduced values from a list.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ seq 1 5 | scanl lambda acc el . 'echo $(($acc + $el))'\n1\n3\n6\n10\n15\n\n$ seq 1 5 | scanl lambda a b . 'echo $(($a + $b))' | last\n15\n```\n\n----------------------------------------\n\nTITLE: Running Tests for fun.sh Library in Bash\nDESCRIPTION: Shows the command to run the test suite for the fun.sh library.\nSOURCE: https://github.com/ssledz/bash-fun/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncd test\n./test_runner\n```"
  }
]