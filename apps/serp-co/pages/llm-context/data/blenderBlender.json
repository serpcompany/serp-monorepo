[
  {
    "owner": "blender",
    "repo": "blender",
    "content": "TITLE: Dynamically Adding Properties to Blender Object Types\nDESCRIPTION: This snippet dynamically adds properties to an existing Blender object type, demonstrating how Blender's API can be leveraged for runtime modifications.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Add a new property to an existing type.\nbpy.types.Object.my_float: bpy.props.FloatProperty()\n# Remove it.\ndel bpy.types.Object.my_float\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing Data in Blender Python API\nDESCRIPTION: Demonstrates proper data creation and removal using collection methods rather than direct instantiation. Shows how to create and remove a mesh object in Blender's data structure.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh = bpy.data.meshes.new(name=\"MyMesh\")\n>>> print(mesh)\n<bpy_struct, Mesh(\"MyMesh.001\")>\n\n>>> bpy.data.meshes.remove(mesh)\n```\n\n----------------------------------------\n\nTITLE: Defining Blender Build Options and Features\nDESCRIPTION: Declares configurable build options for Blender including feature toggles (Python integration, internationalization), platform-specific components like thumbnailers, and development settings.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Blender internal features\noption(WITH_BLENDER \"Build blender (disable to build only Cycles stand-alone).\" ON)\nmark_as_advanced(WITH_BLENDER)\n\nif(WIN32)\n  option(WITH_BLENDER_THUMBNAILER \"\\\nBuild \\\"BlendThumb.dll\\\" helper for Windows explorer integration to support extracting \\\nthumbnails from `.blend` files.\"\n    ON\n  )\nelseif(UNIX AND NOT APPLE)\n  option(WITH_BLENDER_THUMBNAILER \"\\\nBuild stand-alone \\\"blender-thumbnailer\\\" command-line thumbnail extraction utility, \\\nintended for use by file-managers to extract PNG images from `.blend` files.\"\n    ON\n  )\nelseif(APPLE)\n  option(WITH_BLENDER_THUMBNAILER \"\\\nBuild \\\"blender-thumbnailer.appex\\\" extension for Finder/ QuickLook thumbnail \\\nsupport for blend files.\"\n    ON\n  )\nendif()\n\noption(WITH_INTERNATIONAL \"Enable I18N (International fonts and text)\" ON)\n\noption(WITH_PYTHON \"Enable Embedded Python API (only disable for development)\" ON)\noption(WITH_PYTHON_SECURITY \"Disables execution of scripts within blend files by default\" ON)\n# Don't want people disabling this unless they really know what they are doing.\nmark_as_advanced(WITH_PYTHON)\n# Some distributions see this as a security issue, rather than have them patch it,\n# make a build option.\nmark_as_advanced(WITH_PYTHON_SECURITY)\n\noption(WITH_PYTHON_SAFETY \"\\\nEnable internal API error checking to track invalid data to prevent crash on access \\\n(at the expense of some efficiency, only enable for development).\"\n  OFF\n)\nmark_as_advanced(WITH_PYTHON_SAFETY)\noption(WITH_PYTHON_MODULE \"\\\nEnable building as a python module which runs without a user interface, \\\nlike running regular blender in background mode (only enable for development), \\\ninstalls to PYTHON_SITE_PACKAGES (or CMAKE_INSTALL_PREFIX if WITH_INSTALL_PORTABLE is enabled).\"\n  OFF\n)\n\noption(WITH_BUILDINFO \"\\\nInclude extra build details (only disable for development & faster builds)\"\n  ON\n)\nset(BUILDINFO_OVERRIDE_DATE \"\" CACHE STRING \"\\\nUse instead of the current date for reproducible builds (empty string disables this option)\"\n)\nset(BUILDINFO_OVERRIDE_TIME \"\" CACHE STRING \"\\\nUse instead of the current time for reproducible builds (empty string disables this option)\"\n)\nset(CPACK_OVERRIDE_PACKAGENAME \"\" CACHE STRING \"\\\nUse instead of the standard packagename (empty string disables this option)\"\n)\nmark_as_advanced(CPACK_OVERRIDE_PACKAGENAME)\nmark_as_advanced(BUILDINFO_OVERRIDE_DATE)\nmark_as_advanced(BUILDINFO_OVERRIDE_TIME)\n```\n\n----------------------------------------\n\nTITLE: Accessing Data-Blocks and Collections in Blender Python API\nDESCRIPTION: Examples showing how to access Blender's data-blocks and collections using the bpy.data module. The snippet demonstrates accessing objects, scenes, and materials programmatically.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.data.objects\n<bpy_collection[3], BlendDataObjects>\n\n>>> bpy.data.scenes\n<bpy_collection[1], BlendDataScenes>\n\n>>> bpy.data.materials\n<bpy_collection[1], BlendDataMaterials>\n```\n\n----------------------------------------\n\nTITLE: Working with Pose Bones in Blender Python\nDESCRIPTION: Demonstrates how to access pose bone data, including constraints and selections, in Object or Pose-Mode using Python in Blender.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Gets the name of the first constraint (if it exists).\nbpy.context.object.pose.bones[\"Bone\"].constraints[0].name\n\n# Gets the last selected pose bone (Pose-Mode only).\nbpy.context.active_pose_bone\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Operator in Blender Python\nDESCRIPTION: This snippet demonstrates how to create a simple Blender operator class and register it using the register and unregister functions. The operator allows for integration into Blender's interface.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\nclass SimpleOperator(bpy.types.Operator):\n    \"\"\" See example above \"\"\"\n\ndef register():\n    bpy.utils.register_class(SimpleOperator)\n\ndef unregister():\n    bpy.utils.unregister_class(SimpleOperator)\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: OpenGL Shader Management Functions\nDESCRIPTION: Function declarations for creating, attaching, and managing shader objects and programs.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\ndef glCreateProgram():\n    \"\"\"Creates a program object\"\"\"\n    pass\n\ndef glCreateShader(shaderType):\n    \"\"\"Creates a shader object\"\"\"\n    pass\n\ndef glDeleteProgram(program):\n    \"\"\"Deletes a program object\"\"\"\n    pass\n\ndef glDeleteShader(shader):\n    \"\"\"Deletes a shader object\"\"\"\n    pass\n\ndef glDetachShader(program, shader):\n    \"\"\"Detaches a shader object from a program object\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Inserting Python Interpreter in Blender Script\nDESCRIPTION: This snippet shows how to insert an interactive Python interpreter within a Blender script for debugging purposes. It allows inspection of local variables.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport code\ncode.interact(local=locals())\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Blender Installation\nDESCRIPTION: Sets up installation targets for Blender on Unix systems, handling both portable and system installations. Includes configuration for Python modules, desktop integration files, and bundled libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(PLATFORM_BUNDLED_LIBRARIES AND TARGETDIR_LIB)\n    install(\n      FILES ${PLATFORM_BUNDLED_LIBRARIES}\n      DESTINATION ${TARGETDIR_LIB}\n    )\n  endif()\n\n  if(WITH_PYTHON_MODULE)\n    if(WITH_INSTALL_PORTABLE)\n      install(\n        TARGETS blender\n        DESTINATION ${TARGETDIR_BPY}\n      )\n    else()\n      install(\n        TARGETS blender\n        LIBRARY DESTINATION ${TARGETDIR_BPY}\n      )\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Blender Operator Class\nDESCRIPTION: Demonstrates how to create and register a basic operator class in Blender that can be called through the operator API. The example shows the essential structure with idname, label, and execute method.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass SimpleOperator(bpy.types.Operator):\n    bl_idname = \"object.simple_operator\"\n    bl_label = \"Tool Name\"\n\n    def execute(self, context):\n        print(\"Hello World\")\n        return {'FINISHED'}\n\nbpy.utils.register_class(SimpleOperator)\n```\n\n----------------------------------------\n\nTITLE: Inefficient String Start Checking\nDESCRIPTION: Demonstrates a less efficient way of checking the start of a string using slicing.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif line[0:5] == \"vert \": ...\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Vertex Group Weights in BMesh\nDESCRIPTION: Demonstrates how to access and set vertex group weights in a BMesh. It uses the active vertex group index from the object and either prints the existing weight or sets a new weight for each vertex.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/include__bmesh.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# In this example the active vertex group index is used,\n# this is stored in the object, not the `BMesh`.\ngroup_index = obj.vertex_groups.active_index\n\n# Only ever one deform weight layer.\ndvert_lay = bm.verts.layers.deform.active\n\nfor vert in bm.verts:\n    dvert = vert[dvert_lay]\n\n    if group_index in dvert:\n        print(\"Weight %f\" % dvert[group_index])\n    else:\n        print(\"Setting Weight\")\n        dvert[group_index] = 0.5\n```\n\n----------------------------------------\n\nTITLE: Unsupported Continuous Timer Implementation in Blender Python\nDESCRIPTION: This example shows an unsupported implementation of a timer that continuously moves a cube. This approach can lead to random crashes or errors and should be avoided.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef func():\n    print(\"Running...\")\n    import bpy\n    bpy.data.objects['Cube'].location.x += 0.05\n\ndef my_timer():\n    from threading import Timer\n    t = Timer(0.1, my_timer)\n    t.start()\n    func()\n\nmy_timer()\n```\n\n----------------------------------------\n\nTITLE: Blender Node System Library Configuration\nDESCRIPTION: Configures the main node system library build settings including source files, include directories, and library dependencies. Also handles conditional compilation based on various build options like Bullet physics, TBB, OpenEXR support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  composite\n  function\n  geometry\n  intern\n  shader\n  texture\n  geometry/include\n  ../animrig\n  ../editors/include\n  ../depsgraph\n  ../makesrna\n  ../modifiers\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  intern/derived_node_tree.cc\n  intern/geometry_nodes_bundle.cc\n  # ... [truncated for brevity]\n)\n\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  # ... [truncated for brevity]\n)\n\nblender_add_lib(bf_nodes \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::nodes ALIAS bf_nodes)\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Attributes in Blender Python API\nDESCRIPTION: Shows how to access and manipulate attributes of Blender data-blocks such as objects, scenes, and materials. Includes examples of accessing object names and creating new materials.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.data.objects[0].name\n'Camera'\n\n>>> bpy.data.scenes[\"Scene\"]\nbpy.data.scenes['Scene']\n\n>>> bpy.data.materials.new(\"MyMaterial\")\nbpy.data.materials['MyMaterial']\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Operator in Blender Python API\nDESCRIPTION: Example of creating a custom operator in Blender by subclassing bpy.types.Operator. The operator displays a message and can be integrated into Blender's UI.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbl_info = {\n    \"name\": \"Simple Operator\",\n    \"description\": \"\",\n    \"author\": \"Your Name\",\n    \"version\": (1, 0),\n    \"blender\": (2, 80, 0),\n    \"location\": \"View3D > Object\",\n    \"warning\": \"\",\n    \"doc_url\": \"\",\n    \"category\": \"Object\",\n}\n\nimport bpy\n\n\nclass SimpleOperator(bpy.types.Operator):\n    \"\"\"Tooltip\"\"\"\n    bl_idname = \"object.simple_operator\"\n    bl_label = \"Simple Object Operator\"\n\n    @classmethod\n    def poll(cls, context):\n        return context.active_object is not None\n\n    def execute(self, context):\n        print(\"Hello World\", context.active_object)\n        return {'FINISHED'}\n\n\n# Registration\n\ndef register():\n    bpy.utils.register_class(SimpleOperator)\n\n\ndef unregister():\n    bpy.utils.unregister_class(SimpleOperator)\n\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Build Option Validation and Dependency Checks\nDESCRIPTION: Validates core build requirements and dependencies between different build options. Ensures at least one main build target is enabled and checks compatibility between various audio, Python, and rendering options.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_BLENDER AND NOT WITH_CYCLES_STANDALONE AND NOT WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  message(FATAL_ERROR\n    \"At least one of WITH_BLENDER or WITH_CYCLES_STANDALONE \"\n    \"or WITH_CYCLES_HYDRA_RENDER_DELEGATE \"\n    \"must be enabled, nothing to do!\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Top-to-Bottom Layout in Blender UI\nDESCRIPTION: Demonstrates the simplest form of UI layout in Blender, arranging properties vertically.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlayout.prop()\nlayout.prop()\n```\n\n----------------------------------------\n\nTITLE: Curve Point Addition with Array Re-allocation in Blender\nDESCRIPTION: This snippet demonstrates a common issue in Blender scripting where adding points to a curve can cause array re-allocation, leading to potential crashes when attempting to modify previously referenced point data. The solution involves re-assigning the point variable after adding the new point or adding all points at once to avoid frequent array re-allocations.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbpy.ops.curve.primitive_bezier_curve_add()\npoint = bpy.context.object.data.splines[0].bezier_points[0]\nbpy.context.object.data.splines[0].bezier_points.add()\n\n# This will crash!\npoint.co = 1.0, 2.0, 3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Short File Macro for Compiler\nDESCRIPTION: This snippet configures compiler flags to use shorter file paths in error messages by using the -fmacro-prefix-map flag when supported, improving readability of compiler output.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COMPILER_SHORT_FILE_MACRO)\n  # Use '-fmacro-prefix-map' for Clang and GCC (MSVC doesn't support this).\n  set(C_PREFIX_MAP_FLAGS \"\")\n  set(CXX_PREFIX_MAP_FLAGS \"\")\n  add_check_c_compiler_flags(\n    C_PREFIX_MAP_FLAGS\n    C_MACRO_PREFIX_MAP -fmacro-prefix-map=foo=bar\n  )\n  add_check_cxx_compiler_flags(\n    CXX_PREFIX_MAP_FLAGS\n    CXX_MACRO_PREFIX_MAP -fmacro-prefix-map=foo=bar\n  )\n  if(C_MACRO_PREFIX_MAP AND CXX_MACRO_PREFIX_MAP)\n    if(APPLE)\n      if(XCODE AND ${XCODE_VERSION} VERSION_LESS 12.0)\n        # Developers may have say LLVM Clang-10.0.1 toolchain (which supports the flag)\n        # with Xcode-11 (the Clang of which doesn't support the flag).\n        message(\n          WARNING\n          \"-fmacro-prefix-map flag is NOT supported by Clang shipped with Xcode-${XCODE_VERSION}.\"\n          \" Some Xcode functionality in Product menu may not work. \"\n          \"Disabling WITH_COMPILER_SHORT_FILE_MACRO.\"\n        )\n        set(WITH_COMPILER_SHORT_FILE_MACRO OFF)\n      endif()\n    endif()\n    if(WITH_COMPILER_SHORT_FILE_MACRO)\n      path_ensure_trailing_slash(_src_dir \"${CMAKE_SOURCE_DIR}\")\n      path_ensure_trailing_slash(_bin_dir \"${CMAKE_BINARY_DIR}\")\n      # Keep this variable so it can be stripped from build-info.\n      set(PLATFORM_CFLAGS_FMACRO_PREFIX_MAP\n        \"-fmacro-prefix-map=\\\"${_src_dir}\\\"=\\\"\\\" -fmacro-prefix-map=\\\"${_bin_dir}\\\"=\\\"\\\"\")\n      string(APPEND PLATFORM_CFLAGS \" ${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\")\n      unset(_src_dir)\n      unset(_bin_dir)\n    endif()\n  else()\n    message(\n      WARNING\n      \"-fmacro-prefix-map flag is NOT supported by C/C++ compiler.\"\n      \" Disabling WITH_COMPILER_SHORT_FILE_MACRO.\"\n    )\n    set(WITH_COMPILER_SHORT_FILE_MACRO OFF)\n  endif()\n  unset(C_PREFIX_MAP_FLAGS)\n  unset(CXX_PREFIX_MAP_FLAGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Manipulating Blender Data with Python\nDESCRIPTION: A simple example showing how to directly modify Blender's internal data by moving a vertex of a cube object using the bpy module.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nbpy.data.objects[\"Cube\"].data.vertices[0].co.x += 1.0\n```\n\n----------------------------------------\n\nTITLE: Iterating Collection Objects Safely in Blender\nDESCRIPTION: This snippet demonstrates a common pitfall when iterating over `Collection.all_objects` in Blender and modifying object properties that trigger collection cache rebuilds. Modifying `Object.hide_viewport`, `Object.hide_select`, or `Object.hide_render` during iteration can lead to crashes. The solution is to create an independent list of the objects before iterating and modifying their properties.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# `all_objects` is an iterator. Using it directly while performing operations on its members that will update\n# the memory accessed by the `all_objects` iterator will lead to invalid memory accesses and crashes.\nfor object in bpy.data.collections[\"Collection\"].all_objects:\n     object.hide_viewport = True\n```\n\nLANGUAGE: python\nCODE:\n```\n# `all_objects[:]` is an independent list generated from the iterator. As long as no objects are deleted,\n# its content will remain valid even if the data accessed by the `all_objects` iterator is modified.\nfor object in bpy.data.collections[\"Collection\"].all_objects[:]:\n     object.hide_viewport = True\n```\n\n----------------------------------------\n\nTITLE: Timing Script Execution in Python\nDESCRIPTION: This snippet demonstrates how to measure the execution time of a script in Python. It imports the 'time' module to retrieve the current time, performs an action, and then prints the duration that the action took to execute. This is helpful for debugging and optimizing performance.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nimport time\\ntime_start = time.time()\\n\\n# Do something...\\n\\nprint(\"My Script Finished: %.4f sec\" % (time.time() - time_start))\n```\n\n----------------------------------------\n\nTITLE: One-line Python Interpreter Insertion in Blender Script\nDESCRIPTION: This is a concise, one-line version of inserting an interactive Python interpreter in a Blender script, providing access to both global and local variables.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n__import__('code').interact(local=dict(globals(), **locals()))\n```\n\n----------------------------------------\n\nTITLE: Using Context in Blender Python API\nDESCRIPTION: Examples of accessing the current context to get the active object, selected objects, and other context-dependent data. Shows common use cases for bpy.context.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.context.object\n>>> bpy.context.selected_objects\n>>> bpy.context.visible_bones\n```\n\n----------------------------------------\n\nTITLE: Formatting a string with positional arguments using fmt\nDESCRIPTION: This example shows how to use positional arguments when formatting a string with the fmt library. It helps to clarify the order of arguments in the formatted output.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"I'd rather be {1} than {0}.\", \"right\", \"happy\");\n// s == \"I'd rather be happy than right.\"\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script from Command Line with Blender\nDESCRIPTION: Shows how to run a Python script file using Blender from the command line with the --python flag.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nblender --python /home/me/my_script.py\n```\n\n----------------------------------------\n\nTITLE: Animating Keyframes in Blender with Python\nDESCRIPTION: Describes two methods for inserting keyframes in Blender using Python. The simple method involves directly keyframing properties, while the low-level method involves manually creating curves and keyframe data.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nobj = bpy.context.object\nobj.location[2] = 0.0\nobj.keyframe_insert(data_path=\"location\", frame=10.0, index=2)\nobj.location[2] = 1.0\nobj.keyframe_insert(data_path=\"location\", frame=20.0, index=2)\n\n# Using low-level functions:\nobj = bpy.context.object\nobj.animation_data_create()\nobj.animation_data.action = bpy.data.actions.new(name=\"MyAction\")\nfcu_z = obj.animation_data.action.fcurves.new(data_path=\"location\", index=2)\nfcu_z.keyframe_points.add(2)\nfcu_z.keyframe_points[0].co = 10.0, 0.0\nfcu_z.keyframe_points[1].co = 20.0, 1.0\n\n```\n\n----------------------------------------\n\nTITLE: OpenGL Function - glLineWidth\nDESCRIPTION: Specifies the width of rasterized lines in OpenGL. Takes a float parameter to set the line width, with an initial value of 1.0.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\nglLineWidth(width)\n```\n\n----------------------------------------\n\nTITLE: Configuring Portable Installation\nDESCRIPTION: Handles portable installation configuration including CPU check, thumbnailer, and desktop integration files. Also manages Mesa library installation and cleanup of old OpenGL files.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(WITH_INSTALL_PORTABLE)\n    set(BLENDER_BIN \"blender\")\n    install(\n      TARGETS blender\n      DESTINATION \".\"\n    )\n\n    if(WITH_CPU_CHECK)\n      install(\n        TARGETS blender_cpu_check\n        DESTINATION \"./lib\"\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Handling Library Collisions in Blender Python\nDESCRIPTION: Examples of different ways to look up objects by name, including distinguishing between local and library data using a tuple format for precise selection.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Typical name lookup, could be local or library.\nobj = bpy.data.objects[\"my_obj\"]\n\n# Library object name lookup using a pair,\n# where the second argument is the library path matching bpy.types.Library.filepath.\nobj = bpy.data.objects[\"my_obj\", \"//my_lib.blend\"]\n\n# Local object name look up using a pair,\n# where the second argument excludes library data from being returned.\nobj = bpy.data.objects[\"my_obj\", None]\n\n# Both the examples above also works for `get`.\nobj = bpy.data.objects.get((\"my_obj\", None))\n```\n\n----------------------------------------\n\nTITLE: Using New BrushGpencilSettings Properties in Python\nDESCRIPTION: Demonstrates usage of some newly added properties for Grease Pencil brush settings in Blender 2.90, including random hue and pressure effects.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\n# Get the active Grease Pencil brush\nbrush = bpy.context.tool_settings.gpencil_paint.brush\n\n# Set new random hue properties\nbrush.gpencil_settings.use_random_press_hue = True\nbrush.gpencil_settings.random_hue_factor = 0.5\n\n# Enable random pressure effects\nbrush.gpencil_settings.use_random_press_strength = True\n```\n\n----------------------------------------\n\nTITLE: Accessing Edit Bones in Blender Python\nDESCRIPTION: Demonstrates how to access and modify edit bones in Blender's Edit-Mode using Python. This snippet shows setting the head position of a bone and accessing selected editable bones.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.context.object.data.edit_bones[\"Bone\"].head = Vector((1.0, 2.0, 3.0))\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> mybones = bpy.context.selected_editable_bones\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.context.active_bone\n```\n\n----------------------------------------\n\nTITLE: Accessing UV Coordinates in BMesh\nDESCRIPTION: Demonstrates how to access UV coordinates for each loop in a BMesh face. It iterates through faces and their loops, printing the UV coordinates and vertex positions.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/include__bmesh.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuv_lay = bm.loops.layers.uv.active\n\nfor face in bm.faces:\n    for loop in face.loops:\n        uv = loop[uv_lay].uv\n        print(\"Loop UV: %f, %f\" % uv[:])\n        vert = loop.vert\n        print(\"Loop Vert: (%f,%f,%f)\" % vert.co[:])\n```\n\n----------------------------------------\n\nTITLE: Efficient String Writing using Formatting\nDESCRIPTION: Demonstrates a more efficient method of joining strings for file writing using string formatting.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfile.write(\"%s %s %s\\n\" % (str1, str2, str3))\n```\n\n----------------------------------------\n\nTITLE: Generating GLSL Source List Header in CMake\nDESCRIPTION: Creates a header file containing references to all GLSL shader sources. It processes each shader file, generates a unique identifier based on filename, and adds a SHADER_SOURCE macro call for each shader.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_SOURCE_CONTENT \"\")\n\nforeach(GLSL_FILE ${GLSL_SRC})\n  get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n  string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n  string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\nendforeach()\n\nset(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_draw_source_list.h\")\nfile(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\nlist(APPEND SRC ${glsl_source_list_file})\nlist(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Referencing by Name in Blender Python\nDESCRIPTION: Example of a common mistake when referencing newly created data by name. This approach may fail if the assigned name is modified by Blender due to length limitations, existing names, or empty string constraints.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.data.meshes.new(name=meshid)\n\n# Normally some code, function calls, etc.\nbpy.data.meshes[meshid]\n```\n\n----------------------------------------\n\nTITLE: Comparing iostream and printf Precision Formatting in C++\nDESCRIPTION: Examples demonstrating the difference in verbosity between iostreams and printf when formatting floating-point numbers with specific precision.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nstd::cout << std::setprecision(2) << std::fixed << 1.23456 << \"\\n\";\n```\n\nLANGUAGE: cpp\nCODE:\n```\nprintf(\"%.2f\\n\", 1.23456);\n```\n\n----------------------------------------\n\nTITLE: Efficient Triangle Removal using List Comprehension\nDESCRIPTION: Demonstrates a more efficient way to remove triangular polygons from a mesh using list comprehension.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npolygons = [p for p in mesh.polygons if len(p.vertices) != 3]\n```\n\n----------------------------------------\n\nTITLE: Accessing Collections and Members in Blender Python API\nDESCRIPTION: Demonstrates how to access members of a collection using both index and string keys. Shows that unlike Python dictionaries, Blender collections support both methods of access.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> list(bpy.data.objects)\n[bpy.data.objects[\"Cube\"], bpy.data.objects[\"Plane\"]]\n\n>>> bpy.data.objects['Cube']\nbpy.data.objects[\"Cube\"]\n\n>>> bpy.data.objects[0]\nbpy.data.objects[\"Cube\"]\n```\n\n----------------------------------------\n\nTITLE: Executing External Python Scripts in Blender\nDESCRIPTION: This snippet demonstrates how to execute an external Python script from within Blender. It compiles and executes the script using the exec() function.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilename = \"/full/path/to/myscript.py\"\nexec(compile(open(filename).read(), filename, 'exec'))\n```\n\n----------------------------------------\n\nTITLE: Proper Constructor Implementation for Blender Classes\nDESCRIPTION: Demonstrates the correct way to implement a constructor (__init__) method for Blender class types, ensuring the parent class constructor is called first.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass AwesomeRaytracer(bpy.types.RenderEngine):\n   def __init__(self, *args, **kwargs):\n      super().__init__(*args, **kwargs)\n      self.my_var = 42\n      ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Texture Images - OpenGL - Python\nDESCRIPTION: The glGetTexImage function retrieves texture images from OpenGL, enabling developers to access and manipulate textures directly.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetTexImage(target, level, format, type, pixels):\n\n   Return a texture image\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetTexImage.xhtml>`__\n\n   :type target: Enumerated constant\n   :arg target: Specifies which texture is to be obtained.\n   :type level: int\n   :arg level: Specifies the level-of-detail number of the desired image.\n      Level 0 is the base image level. Level n is the nth mipmap reduction image.\n   :type format: Enumerated constant\n   :arg format: Specifies a pixel format for the returned data.\n   :type type: Enumerated constant\n   :arg type: Specifies a pixel type for the returned data.\n   :type pixels: :class:`bgl.Buffer` object.\n   :arg pixels: Returns the texture image. Should be a pointer to an array of the\n      type specified by type.\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Build Configuration\nDESCRIPTION: Defines Windows-specific build options including CRT bundling, manifest handling, and debug settings for Visual Studio.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  option(WITH_WINDOWS_FIND_MODULES \"Use find_package to locate libraries\" OFF)\n  mark_as_advanced(WITH_WINDOWS_FIND_MODULES)\n\n  option(WITH_WINDOWS_BUNDLE_CRT \"Bundle the C runtime for install free distribution.\" ON)\n  mark_as_advanced(WITH_WINDOWS_BUNDLE_CRT)\n\n  option(WITH_WINDOWS_EXTERNAL_MANIFEST \"Use external manifest files\" OFF)\n  mark_as_advanced(WITH_WINDOWS_EXTERNAL_MANIFEST)\n\n  option(WITH_WINDOWS_SCCACHE \"Use sccache to speed up builds (Ninja builder only)\" OFF)\n  mark_as_advanced(WITH_WINDOWS_SCCACHE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Working with Custom Properties in Blender Python API\nDESCRIPTION: Shows how to set, access, and remove custom properties on Blender data-blocks. Custom properties can store various Python data types and are saved with the blend-file.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object[\"MyOwnProperty\"] = 42\n\nif \"SomeProp\" in bpy.context.object:\n    print(\"Property found\")\n\n# Use the get function like a Python dictionary\n# which can have a fallback value.\nvalue = bpy.data.scenes[\"Scene\"].get(\"test_prop\", \"fallback value\")\n\n# Dictionaries can be assigned as long as they only use basic types.\ncollection = bpy.data.collections.new(\"MyTestCollection\")\ncollection[\"MySettings\"] = {\"foo\": 10, \"bar\": \"spam\", \"baz\": {}}\n\ndel collection[\"MySettings\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving GL Connection Description - OpenGL - Python\nDESCRIPTION: The glGetString function returns a string that describes the current OpenGL connection, useful for debugging and obtaining context information.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetString(name):\n\n   Return a string describing the current GL connection\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetString.xhtml>`__\n\n   :type name: Enumerated constant\n   :arg name: Specifies a symbolic constant.\n```\n\n----------------------------------------\n\nTITLE: Inserting IPython Interpreter in Blender Script\nDESCRIPTION: This snippet demonstrates how to insert an IPython interpreter within a Blender script, offering more advanced features than the standard Python interpreter.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\nIPython.embed()\n```\n\n----------------------------------------\n\nTITLE: Running Operators in Blender Python API\nDESCRIPTION: Demonstrates how to execute Blender operators (tools) from Python code. Shows examples of mesh and object operators with various parameters.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.ops.mesh.flip_normals()\n{'FINISHED'}\n>>> bpy.ops.mesh.hide(unselected=False)\n{'FINISHED'}\n>>> bpy.ops.object.transform_apply()\n{'FINISHED'}\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Language Extensions\nDESCRIPTION: This code configures the C++ standard to C++17, requires strict compliance with the standard, and disables compiler-specific language extensions to ensure code portability.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\n# Select C++17 as the standard for C++ projects.\nset(CMAKE_CXX_STANDARD 17)\n# If C++17 is not available, downgrading to an earlier standard is NOT OK.\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n# Do not enable compiler specific language extensions.\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Property Groups for Materials in Blender\nDESCRIPTION: This snippet shows how to create a nested structure of property groups, allowing multiple related properties to be organized under a single custom property for a material.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Create new property group with a sub property:\n# bpy.data.materials[0].my_custom_props.sub_group.my_float\nimport bpy\n\nclass MyMaterialSubProps(bpy.types.PropertyGroup):\n    my_float: bpy.props.FloatProperty()\n\nclass MyMaterialGroupProps(bpy.types.PropertyGroup):\n    sub_group: bpy.props.PointerProperty(type=MyMaterialSubProps)\n\ndef register():\n    bpy.utils.register_class(MyMaterialSubProps)\n    bpy.utils.register_class(MyMaterialGroupProps)\n    bpy.types.Material.my_custom_props: bpy.props.PointerProperty(type=MyMaterialGroupProps)\n\ndef unregister():\n    del bpy.types.Material.my_custom_props\n    bpy.utils.unregister_class(MyMaterialGroupProps)\n    bpy.utils.unregister_class(MyMaterialSubProps)\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Checking Compiler Version Requirements for Blender\nDESCRIPTION: Verifies that the compiler versions meet Blender's minimum requirements. Requires GCC 11.0.0+, Clang 8.0+, or MSVC 2019 (16.9.16)+ depending on the compiler being used.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  if(\"${CMAKE_C_COMPILER_VERSION}\" VERSION_LESS \"11.0.0\")\n    message(FATAL_ERROR \"\\\nThe minimum supported version of GCC is 11.0.0, found C compiler: ${CMAKE_C_COMPILER_VERSION}\"\n    )\n  endif()\n  if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_LESS \"11.0.0\")\n    message(FATAL_ERROR \"\\\nThe minimum supported version of GCC is 11.0.0, found C++ compiler${CMAKE_CXX_COMPILER_VERSION}\"\n    )\n  endif()\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  if(CMAKE_COMPILER_IS_GNUCC)\n    if(\"${CMAKE_C_COMPILER_VERSION}\" VERSION_LESS \"8.0\")\n      message(FATAL_ERROR \"\\\nThe minimum supported version of CLANG is 8.0, found C compiler ${CMAKE_C_COMPILER_VERSION}\"\n      )\n    endif()\n    if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_LESS \"8.0\")\n      message(FATAL_ERROR \"\\\nThe minimum supported version of CLANG is 8.0, found C++ compiler ${CMAKE_CXX_COMPILER_VERSION}\"\n      )\n    endif()\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  if(MSVC_VERSION VERSION_LESS \"1928\")\n    # MSVC_VERSION is an internal version number, it doesn't map to something\n    # the end user would recognize as a version. Because of this, for MSVC we do\n    # not show the found number. When using our make.bat the actual VS version\n    # will be displayed on the console before starting the build, anyway.\n    message(FATAL_ERROR \"The minimum supported version of MSVC is 2019 (16.9.16)\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling CUDA Kernels for Different Architectures in CMake\nDESCRIPTION: Iterates through specified CUDA architectures, setting appropriate CUDA versions and compiling kernels for each. It handles architecture-specific requirements and CUDA version constraints.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(prev_arch \"none\")\nforeach(arch ${CYCLES_CUDA_BINARIES_ARCH})\n  if(${arch} MATCHES \".*_2.\")\n    message(STATUS \"CUDA binaries for ${arch} are no longer supported, skipped.\")\n  elseif(${arch} MATCHES \".*_30\")\n    if(DEFINED CUDA10_NVCC_EXECUTABLE)\n      set(cuda_nvcc_executable ${CUDA10_NVCC_EXECUTABLE})\n      set(cuda_toolkit_root_dir ${CUDA10_TOOLKIT_ROOT_DIR})\n      set(cuda_version 100)\n    elseif(\"${CUDA_VERSION}\" LESS 110)\n      set(cuda_nvcc_executable ${CUDA_NVCC_EXECUTABLE})\n      set(cuda_toolkit_root_dir ${CUDA_TOOLKIT_ROOT_DIR})\n      set(cuda_version ${CUDA_VERSION})\n    else()\n      message(STATUS \"CUDA binaries for ${arch} require CUDA 10 or earlier, skipped.\")\n    endif()\n  # ... (additional architecture checks)\n  endif()\n  if(DEFINED cuda_nvcc_executable AND DEFINED cuda_toolkit_root_dir)\n    cycles_cuda_kernel_add(${arch} ${prev_arch} kernel \"\" \"${cuda_sources}\" FALSE)\n\n    if(WITH_CYCLES_CUDA_BUILD_SERIAL)\n      set(prev_arch ${arch})\n    endif()\n\n    unset(cuda_nvcc_executable)\n    unset(cuda_toolkit_root_dir)\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Initializing Blender Project with CMake\nDESCRIPTION: Initializes the Blender project with custom pre and post hooks, enabling testing support.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_project_hack_pre()\n\nproject(Blender)\n\nblender_project_hack_post()\n\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive String Start Checking\nDESCRIPTION: Illustrates how to perform case-insensitive string start checking in Python.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif line.lower().startswith(\"vert \"): ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Location in Python\nDESCRIPTION: Examples showing how to access an object's location property through both the active context and direct data access.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_api_reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.active_object.location\n\nbpy.data.objects[\"Cube\"].location\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Data Access After Mode Switch in Blender Python\nDESCRIPTION: This example shows how accessing mesh data becomes invalid after switching between object and edit modes. This code will crash and should be avoided.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.context.active_object.data\npolygons = mesh.polygons\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# This will crash!\nprint(polygons)\n```\n\n----------------------------------------\n\nTITLE: Creating Split Layout in Blender UI\nDESCRIPTION: Demonstrates how to create a split layout for more complex UI arrangements in Blender.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsplit = layout.split()\n\ncol = split.column()\ncol.prop()\ncol.prop()\n\ncol = split.column()\ncol.prop()\ncol.prop()\n```\n\n----------------------------------------\n\nTITLE: Safe Data Referencing in Blender Python\nDESCRIPTION: This code snippet shows a safe way to reference Blender data after modifying a collection. It re-acquires the reference after all modifications are complete.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TestItems(bpy.types.PropertyGroup):\n    name: bpy.props.StringProperty()\n\nbpy.utils.register_class(TestItems)\nbpy.types.Scene.test_items = bpy.props.CollectionProperty(type=TestItems)\n\nfirst_item = bpy.context.scene.test_items.add()\nfor i in range(100):\n    bpy.context.scene.test_items.add()\n\n# This is safe, we are getting again desired data *after*\n# all modifications to its container are done.\nfirst_item = bpy.context.scene.test_items[0]\nfirst_item.name = \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Adding FBX Importer Library to Blender Build\nDESCRIPTION: Adds the FBX importer as a library to the Blender build system using the previously defined source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/fbx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_fbx \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Continuous Sound Looping with Audaspace in Python\nDESCRIPTION: Sets the loop count of the `aud.Handle` to loop a sound effect indefinitely by assigning a negative loop count value.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nhandle = device.play(sound)\nhandle.loop_count = -1\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Button Function in C for Blender UI\nDESCRIPTION: This function creates a new block of UI elements for a pulldown menu in Blender. It defines various button types including labels, toggles, and sets up the block's properties such as position and text boundaries.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/interface_API.txt#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nstatic uiBlock *info_file_importmenu(void *arg_unused)\n{\n    uiBlock *block;\n    short yco = 0, xco = 20;\n\n    block = uiNewBlock(&curarea->uiblocks, \"importmenu\", UI_EMBOSSW, UI_HELV, G.curscreen->mainwin);\n    uiBlockSetXOfs(block, -40);  // offset to parent button\n\n    /* flags are defines */\n    uiDefBut(block, LABEL, 0, \"VRML 2.0 options\", xco, yco, 125, 19, NULL, 0.0, 0.0, 0, 0, \"\");\n    uiDefButS(block, TOG|BIT|0, 0, \"SepLayers\", xco, yco-=20, 75, 19, &U.vrmlflag, 0.0, 0.0, 0, 0, \"\");\n    uiDefButS(block, TOG|BIT|1, 0, \"Scale 1/100\", xco, yco-=20, 75, 19, &U.vrmlflag, 0.0, 0.0, 0, 0, \"\");\n    uiDefButS(block, TOG|BIT|2, 0, \"Two Sided\", xco, yco-=20, 75, 19, &U.vrmlflag, 0.0, 0.0, 0, 0, \"\");\n\n    uiBlockSetDirection(block, UI_RIGHT);\n    uiTextBoundsBlock(block, 50);  /* checks for fontsize */\n\n    return block;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Registered Blender Operator\nDESCRIPTION: Shows how to call a previously registered Blender operator through the bpy.ops interface.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nbpy.ops.object.simple_operator()\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenColorIO Support in CMake for Cycles\nDESCRIPTION: Adds compilation flag and include directories for OpenColorIO support when WITH_OPENCOLORIO is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\n  include_directories(\n    SYSTEM\n    ${OPENCOLORIO_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Rendering in Blender Using Python\nDESCRIPTION: This snippet shows how to initiate a rendering operation in Blender using the Python API. It retrieves the operator for rendering and runs it. This functionality requires Blender's Python API to be accessed in the context of a script.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_api_reference.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"Python: bpy.ops.render.render()\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Vulkan Buffer with Automatic Memory Allocation in C++\nDESCRIPTION: Demonstrates creating a Vulkan buffer and automatically allocating memory for multiple tasks using Vulkan Memory Allocator in C++. Requires VMA and Vulkan API with a global VmaAllocator object. Inputs include buffer and allocation configurations; outputs a VkBuffer and VmaAllocation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nVkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufferInfo.size = 65536;\nbufferInfo.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocInfo = {};\nallocInfo.usage = VMA_MEMORY_USAGE_AUTO;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Directory and Blender Application in CMake\nDESCRIPTION: This snippet adds the testing directory to the build and conditionally adds the Blender application source if it's being built. It also sets up a 'heavy' sub-modules pool for the Ninja builder.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_53\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Add Testing Directory\n\nadd_subdirectory(tests)\n\n\n# -----------------------------------------------------------------------------\n# Add Blender Application\n\nif(WITH_BLENDER)\n  add_subdirectory(source/creator)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Define 'heavy' sub-modules (for Ninja builder when using pools)\nsetup_heavy_lib_pool()\n\n\n# -----------------------------------------------------------------------------\n# CPack for generating packages\n\ninclude(build_files/cmake/packaging.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphics Backend Options in CMake\nDESCRIPTION: Sets up build options for different graphics backends including OpenGL, Vulkan, and Metal support across different platforms.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  option(WITH_OPENGL_BACKEND \"Enable OpenGL support as graphic backend\" ON)\n  mark_as_advanced(WITH_OPENGL_BACKEND)\nelse()\n  set(WITH_OPENGL_BACKEND OFF)\nendif()\n\noption(WITH_VULKAN_BACKEND \"Enable Vulkan as graphics backend (experimental)\" ON)\nmark_as_advanced(WITH_VULKAN_BACKEND)\nif(APPLE)\n  option(WITH_VULKAN_MOLTENVK \"Enable Vulkan over MoltenVK (development option)\" OFF)\n  mark_as_advanced(WITH_VULKAN_MOLTENVK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Polygon Orientation - OpenGL - Python\nDESCRIPTION: The glFrontFace function defines the orientation of polygons as front-facing or back-facing, which is important for determining how objects are rendered and which faces are visible.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glFrontFace(mode):\n\n   Define front- and back-facing polygons\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glFrontFace.xhtml>`__\n\n   :type mode: Enumerated constant\n   :arg mode: Specifies the orientation of front-facing polygons.\n```\n\n----------------------------------------\n\nTITLE: Fast Item Removal by Swapping\nDESCRIPTION: Demonstrates a fast method for removing items from a list by swapping with the last item.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npop_index = 5\n\n# Swap so the pop_index is last.\nmy_list[-1], my_list[pop_index] = my_list[pop_index], my_list[-1]\n\n# Remove last item (pop_index).\nmy_list.pop()\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Audaspace Audio Application in Python\nDESCRIPTION: This snippet shows how to import the necessary modules for a basic application using Audaspace. The `aud` module is essential for audio processing and `time` for managing playback durations.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python\nimport aud, time\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSubdiv Support in CMake for Cycles\nDESCRIPTION: Sets up compilation flag and include directories for OpenSubdiv when WITH_OPENSUBDIV is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\n  include_directories(\n    SYSTEM\n    ${OPENSUBDIV_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing External Scripts Relative to Blend File\nDESCRIPTION: This code shows how to execute an external Python script that is located relative to the current Blender file. It uses os.path to construct the full path.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nimport os\n\nfilename = os.path.join(os.path.dirname(bpy.data.filepath), \"myscript.py\")\nexec(compile(open(filename).read(), filename, 'exec'))\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU SIMD Instructions in CMake for Blender\nDESCRIPTION: Sets up CPU-specific SIMD instructions (NEON or SSE) based on architecture support. Adds compile flags and definitions for SSE/NEON optimizations and prints status messages about detected SIMD capabilities.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CPU_SIMD)\n  if(SUPPORT_NEON_BUILD)\n    # Neon\n    if(SSE2NEON_FOUND)\n      include_directories(SYSTEM \"${SSE2NEON_INCLUDE_DIRS}\")\n      add_definitions(-DWITH_SSE2NEON)\n    endif()\n  else()\n    # SSE\n    if(SUPPORT_SSE42_BUILD)\n      string(APPEND CMAKE_CXX_FLAGS \" ${COMPILER_SSE42_FLAG}\")\n      string(APPEND CMAKE_C_FLAGS \" ${COMPILER_SSE42_FLAG}\")\n      # MSVC doesn't define any of these and only does the AVX and higher flags.\n      # For consistency we define these flags for MSVC.\n      if(WIN32)\n        add_compile_definitions(\n          __MMX__\n          __SSE__\n          __SSE2__\n          __SSE3__\n          __SSE4_1__\n          __SSE4_2__\n        )\n      endif()\n    endif()\n  endif()\nendif()\n\n# Print instructions used on first run.\nif(FIRST_RUN)\n  if(WITH_CPU_SIMD)\n    if(SUPPORT_NEON_BUILD)\n      if(SSE2NEON_FOUND)\n        message(STATUS \"Neon SIMD instructions enabled\")\n      else()\n        message(STATUS \"Neon SIMD instructions detected but unused, requires sse2neon\")\n      endif()\n    elseif(SUPPORT_SSE42_BUILD)\n      message(STATUS \"SSE42 SIMD instructions enabled\")\n    else()\n      message(STATUS \"No SIMD instructions detected\")\n    endif()\n  else()\n    message(STATUS \"SIMD instructions disabled\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Usage in Blender Python\nDESCRIPTION: Shows the convention of using single quotes for enums and double quotes for strings in Blender's internal API.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = \"//render_out\"\n```\n\n----------------------------------------\n\nTITLE: Handling Unicode Encoding Errors in Blender Python\nDESCRIPTION: This snippet shows examples of Unicode encoding errors that can occur when working with file paths in Blender, and provides two methods to work around these issues.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_file_paths_and_encoding.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(bpy.data.filepath)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 10-21: ordinal not in range(128)\n\n>>> bpy.context.object.name = bpy.data.filepath\nTraceback (most recent call last):\n  File \"<blender_console>\", line 1, in <module>\nTypeError: bpy_struct: item.attr= val: Object.name expected a string type, not str\n\n>>> print(repr(bpy.data.filepath))\n\n>>> import os\n>>> filepath_bytes = os.fsencode(bpy.data.filepath)\n>>> filepath_utf8 = filepath_bytes.decode('utf-8', \"replace\")\n>>> bpy.context.object.name = filepath_utf8\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Properties in Blender\nDESCRIPTION: Examples demonstrating how to access various nested properties in Blender like render samples, brush size, and window state.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_api_reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Access the number of samples for the Cycles render engine.\nbpy.context.scene.cycles.samples\n\n# Access to the current weight paint brush size.\nbpy.context.tool_settings.weight_paint.brush.size\n\n# Check if the window is full-screen.\nbpy.context.window.screen.show_fullscreen\n```\n\n----------------------------------------\n\nTITLE: Locating and Setting Blender Executable Path in Python\nDESCRIPTION: This snippet demonstrates how to search for the Blender binary using shutil.which() and set the bpy.app.binary_path when found. It's useful for configuring the Blender environment when using it as a Python module.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_advanced_blender_as_bpy.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nimport shutil\n\nblender_bin = shutil.which(\"blender\")\nif blender_bin:\n   print(\"Found:\", blender_bin)\n   bpy.app.binary_path = blender_bin\nelse:\n   print(\"Unable to find blender!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for View3D Editor in CMake\nDESCRIPTION: Lists all source files that make up the View3D editor component, including core functionality, gizmos, navigation controls, and utility functions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  drawobject.cc\n  space_view3d.cc\n  view3d_buttons.cc\n  view3d_camera_control.cc\n  view3d_context.cc\n  view3d_cursor_snap.cc\n  view3d_draw.cc\n  view3d_dropboxes.cc\n  view3d_edit.cc\n  view3d_gizmo_armature.cc\n  view3d_gizmo_camera.cc\n  view3d_gizmo_empty.cc\n  view3d_gizmo_forcefield.cc\n  view3d_gizmo_geometry_nodes.cc\n  view3d_gizmo_light.cc\n  view3d_gizmo_navigate.cc\n  view3d_gizmo_navigate_type.cc\n  view3d_gizmo_preselect.cc\n  view3d_gizmo_preselect_type.cc\n  view3d_gizmo_ruler.cc\n  view3d_gizmo_tool_generic.cc\n  view3d_header.cc\n  view3d_iterators.cc\n  view3d_navigate.cc\n  view3d_navigate_fly.cc\n  view3d_navigate_smoothview.cc\n  view3d_navigate_view_all.cc\n  view3d_navigate_view_axis.cc\n  view3d_navigate_view_camera.cc\n  view3d_navigate_view_center_cursor.cc\n  view3d_navigate_view_center_pick.cc\n  view3d_navigate_view_dolly.cc\n  view3d_navigate_view_move.cc\n  view3d_navigate_view_ndof.cc\n  view3d_navigate_view_orbit.cc\n  view3d_navigate_view_pan.cc\n  view3d_navigate_view_roll.cc\n  view3d_navigate_view_rotate.cc\n  view3d_navigate_view_zoom.cc\n  view3d_navigate_walk.cc\n  view3d_navigate_zoom_border.cc\n  view3d_ops.cc\n  view3d_placement.cc\n  view3d_project.cc\n  view3d_select.cc\n  view3d_snap.cc\n  view3d_utils.cc\n  view3d_view.cc\n\n  view3d_intern.hh\n  view3d_navigate.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Using New Bevel Modifier Properties in Python\nDESCRIPTION: Demonstrates how to use the newly added 'affect' and 'profile_type' properties of the Bevel modifier in Blender 2.90.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\n# Add a Bevel modifier to the active object\nbevel_mod = bpy.context.active_object.modifiers.new(name=\"Bevel\", type='BEVEL')\n\n# Set new properties\nbevel_mod.affect = 'EDGES'\nbevel_mod.profile_type = 'SUPERELLIPSE'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Texture Coordinate Generation Parameters - OpenGL - Python\nDESCRIPTION: The glGetTexGen function retrieves values related to texture coordinate generation, essential for accurately mapping textures onto 3D models in OpenGL.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetTexGen (coord, pname, params):\n\n   B{glGetTexGendv, glGetTexGenfv, glGetTexGeniv}\n\n   Return texture coordinate generation parameters\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetTexGen.xhtml>`__\n\n   :type coord: Enumerated constant\n   :arg coord: Specifies a texture coordinate.\n   :type pname: Enumerated constant\n   :arg pname: Specifies the symbolic name of the value(s) to be returned.\n   :type params: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg params: Returns the requested data.\n```\n\n----------------------------------------\n\nTITLE: Completion of OpenGL Execution - OpenGL - Python\nDESCRIPTION: The glFinish function is a blocking operation that ensures all OpenGL commands are completed before proceeding. It is essential in scenarios requiring synchronization.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glFinish():\n\n   Block until all GL execution is complete\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glFinish.xhtml>`__\n```\n\n----------------------------------------\n\nTITLE: Copying Pixels to 2D Texture in OpenGL with Python\nDESCRIPTION: Copies pixels into a 2D texture image using the glCopyTexImage2D function. Takes various parameters to specify the texture properties and source region.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nglCopyTexImage2D(target, level, internalformat, x, y, width, height, border)\n```\n\n----------------------------------------\n\nTITLE: Safe Data Access After Mode Switch in Blender Python\nDESCRIPTION: This example demonstrates the correct way to access mesh data after switching between object and edit modes by re-acquiring the reference.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.context.active_object.data\npolygons = mesh.polygons\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Polygons have been re-allocated.\npolygons = mesh.polygons\nprint(polygons)\n```\n\n----------------------------------------\n\nTITLE: Applying Mathutils Types in Blender\nDESCRIPTION: Highlights how Blender's mathutils types can be used for operations involving vectors, matrices, and other mathematical computations. Provides an example of matrix and vector multiplication and describes how these types maintain references to Blender's internal data.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nbpy.context.object.matrix_world @ bpy.context.object.data.verts[0].co\n\n# Modifies the Z axis in place.\nbpy.context.object.location.z += 2.0\n\n# Location variable holds a reference to the object too.\nlocation = bpy.context.object.location\nlocation *= 2.0\n\n# Copying the value drops the reference so the value can be passed to\n# functions and modified without unwanted side effects.\nlocation = bpy.context.object.location.copy()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PulseAudio for Blender Audio\nDESCRIPTION: Sets up PulseAudio dependency, source files, and build settings. Includes dynamic loading option and fallback if the library is not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PULSEAUDIO)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(LibPulse ${PACKAGE_OPTION})\n\tendif()\n\n\tif(LIBPULSE_FOUND)\n\t\tset(PULSEAUDIO_SRC\n\t\t\tplugins/pulseaudio/PulseAudioDevice.cpp\n\t\t\tplugins/pulseaudio/PulseAudioLibrary.cpp\n\t\t)\n\t\tset(PULSEAUDIO_HDR\n\t\t\tplugins/pulseaudio/PulseAudioDevice.h\n\t\t\tplugins/pulseaudio/PulseAudioLibrary.h\n\t\t\tplugins/pulseaudio/PulseAudioSymbols.h\n\t\t)\n\n\t\tif(DYNLOAD_PULSEAUDIO)\n\t\t\tadd_definitions(-DDYNLOAD_PULSEAUDIO)\n\t\tendif()\n\n\t\tif(NOT PLUGIN_PULSEAUDIO)\n\t\t\tlist(APPEND INCLUDE ${LIBPULSE_INCLUDE_DIR})\n\t\t\tif(NOT DYNLOAD_PULSEAUDIO)\n\t\t\t\tlist(APPEND LIBRARIES ${LIBPULSE_LIBRARY})\n\t\t\tendif()\n\t\t\tlist(APPEND SRC ${PULSEAUDIO_SRC})\n\t\t\tlist(APPEND HDR ${PULSEAUDIO_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS PulseAudioDevice)\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_PULSEAUDIO FALSE CACHE BOOL \"Build With PulseAudio\" FORCE)\n\t\telse()\n\t\t\tset(WITH_PULSEAUDIO FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"PulseAudio not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Grease Pencil Draw Operation Example\nDESCRIPTION: Example showing a failed operator call with a more descriptive error message using poll_message_set functionality.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_operators.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbpy.ops.gpencil.draw()\n```\n\n----------------------------------------\n\nTITLE: Deleting Textures in OpenGL with Python\nDESCRIPTION: Deletes named textures using the glDeleteTextures function. Takes the number of textures to delete and a Buffer object of type GL_INT containing texture names.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nglDeleteTextures(n, textures)\n```\n\n----------------------------------------\n\nTITLE: Configuring Geometry Node Tests in CMake\nDESCRIPTION: Defines geometry node test configuration including tests for attributes, curves, mesh operations, points, and other geometry processing features. Includes conditional tests based on available dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(geo_node_tests\n  attributes\n  closure\n  curve_primitives\n  curves\n  curves/interpolate_curves\n  foreach_geometry_element_zone\n  geometry\n  grease_pencil\n  instance\n  repeat_zone\n  mesh_primitives\n  mesh\n  mesh/extrude\n  mesh/split_edges\n  mesh/triangulate\n  points\n  texture\n  utilities\n  vector\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Physics Library in CMake for Blender\nDESCRIPTION: Sets up the Bullet physics library, either using a system-installed version or the bundled version in Blender's extern directory. Sets include directories and libraries accordingly.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Configure Bullet\n\nif(WITH_BULLET)\n  if(WITH_SYSTEM_BULLET)\n    find_package(Bullet)\n    set_and_warn_library_found(\"Bullet\" BULLET_FOUND WITH_BULLET)\n  else()\n    set(BULLET_INCLUDE_DIRS \"${CMAKE_SOURCE_DIR}/extern/bullet2/src\")\n    set(BULLET_LIBRARIES \"extern_bullet\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenGL Capability in Python\nDESCRIPTION: Disables a server-side GL capability using the glDisable function. The cap parameter is an enumerated constant indicating the capability to disable.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nglDisable(cap)\n```\n\n----------------------------------------\n\nTITLE: Removing Mesh Data in Blender and Handling References\nDESCRIPTION: This snippet highlights the importance of not accessing or modifying data after it has been removed using the `remove()` API. Blender's API includes a precaution that invalidates the data they free to prevent common mistakes. However, the second example shows that it is possible to create references that will result in a crash when accessing the deleted data, requiring caution when managing references to Blender data.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.data.meshes.new(name=\"MyMesh\")\n# Normally the script would use the mesh here.\nbpy.data.meshes.remove(mesh)\nprint(mesh.name)  # <- Give an exception rather than crashing:\n\n# ReferenceError: StructRNA of type Mesh has been removed\n```\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.data.meshes.new(name=\"MyMesh\")\nvertices = mesh.vertices\nbpy.data.meshes.remove(mesh)\nprint(vertices)  # <- This may crash.\n```\n\n----------------------------------------\n\nTITLE: Adding Sound to Sequence with Audaspace in Python\nDESCRIPTION: Adds sound entries to a sequence using `aud.Sequence.add`, supporting complex audio compositions through sequential addition of sound effects.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nentry = sequence.add(note, position, position + length, 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Backend in CMake\nDESCRIPTION: This snippet sets up include directories, source files, and libraries for the OpenGL backend if it's enabled. It also adds a compiler definition for OpenGL support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    ${OPENGL_SRC}\n  )\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Efficient List Reversal using Slice Method\nDESCRIPTION: Demonstrates a more efficient way to reverse a list using Python's slice method.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsome_reversed_list = some_list[::-1]\n```\n\n----------------------------------------\n\nTITLE: Creating Blender Window Manager Library in CMake\nDESCRIPTION: Defines the window manager library target, sets up its dependencies, and optionally adds test suites if testing is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/windowmanager/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib_nolist(bf_windowmanager \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::windowmanager ALIAS bf_windowmanager)\n\n# RNA_prototypes.hh\nadd_dependencies(bf_windowmanager bf_rna)\n\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    intern/wm_dragdrop_test.cc\n  )\n  blender_add_test_suite_lib(windowmanager \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Modifier Properties\nDESCRIPTION: Example showing how to access and modify a Subdivision Surface modifier's levels property.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_api_reference.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.active_object.modifiers[\"Subdivision\"].levels\n\nbpy.context.active_object.modifiers[\"Subdivision\"].levels = 2\n```\n\n----------------------------------------\n\nTITLE: Including Testing Framework\nDESCRIPTION: This code includes Blender's testing framework by importing the testing.cmake file, which provides functions for setting up automated tests in the build system.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Testing Functions\n\ninclude(build_files/cmake/testing.cmake)\n```\n\n----------------------------------------\n\nTITLE: Controlling Feedback Mode - OpenGL - Python\nDESCRIPTION: The glFeedbackBuffer function sets up a buffer to store feedback data from OpenGL rendering operations. It requires an integer size, an enumerated type, and a buffer to hold the output.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glFeedbackBuffer (size, type, buffer):\n\n   Controls feedback mode\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glFeedbackBuffer.xhtml>`__\n\n   :type size: int\n   :arg size: Specifies the maximum number of values that can be written into buffer.\n   :type type: Enumerated constant\n   :arg type: Specifies a symbolic constant that describes the information that\n      will be returned for each vertex.\n   :type buffer: :class:`bgl.Buffer` object I{GL_FLOAT}\n   :arg buffer: Returns the feedback data.\n```\n\n----------------------------------------\n\nTITLE: UILayout.column Argument Change\nDESCRIPTION: This snippet shows the updated arguments for the `column` function within the `UILayout` class. The changes impact how columns are created and configured within Blender's user interface.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\":class:`bpy.types.UILayout.column` (align, heading, heading_ctxt, translate), *was (align)*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenJPEG, Eigen3, and OpenVDB Dependencies in CMake for Blender\nDESCRIPTION: Sets up include directories and compiler definitions for OpenJPEG, Eigen3, and OpenVDB libraries. Handles platform-specific configuration for Windows and adds necessary include paths and definitions.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENJPEG)\n  # Special handling of Windows platform where openjpeg is always static.\n  if(WIN32)\n    set(OPENJPEG_DEFINES \"-DOPJ_STATIC\")\n  else()\n    set(OPENJPEG_DEFINES \"\")\n  endif()\nendif()\n\nif(NOT WITH_SYSTEM_EIGEN3)\n  set(EIGEN3_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/Eigen3)\nendif()\n\nif(WITH_OPENVDB)\n  list(APPEND OPENVDB_DEFINITIONS -DWITH_OPENVDB)\n\n  if(WITH_OPENVDB_3_ABI_COMPATIBLE)\n    list(APPEND OPENVDB_DEFINITIONS -DOPENVDB_3_ABI_COMPATIBLE)\n  endif()\n\n  # OpenVDB headers use deprecated TBB headers, silence warning.\n  list(APPEND OPENVDB_DEFINITIONS -DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n\n  list(APPEND OPENVDB_INCLUDE_DIRS\n    ${BOOST_INCLUDE_DIR}\n    ${TBB_INCLUDE_DIRS}\n    ${OPENEXR_INCLUDE_DIRS}\n  )\n\n  if(WITH_OPENVDB_BLOSC)\n    list(APPEND OPENVDB_DEFINITIONS -DWITH_OPENVDB_BLOSC)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Audio Library Build Settings\nDESCRIPTION: Sets up library type (shared or static), configures file paths, and handles platform-specific settings for plugin management and HRTF loading.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(SHARED_LIBRARY)\n\tset(AUD_LIBRARY_TYPE AUD_SHARED_LIBRARY)\n\tset(LIBRARY_TYPE SHARED)\n\tadd_definitions(-DAUD_BUILD_SHARED_LIBRARY)\nelse()\n\tset(AUD_LIBRARY_TYPE AUD_STATIC_LIBRARY)\n\tset(LIBRARY_TYPE STATIC)\nendif()\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/config/Audaspace.h.in ${CMAKE_CURRENT_BINARY_DIR}/Audaspace.h ESCAPE_QUOTES @ONLY)\n\nlist(APPEND HDR ${CMAKE_CURRENT_BINARY_DIR}/Audaspace.h)\n\nset(STATIC_PLUGIN_CLASSES \"\")\nset(STATIC_PLUGIN_REGISTERS \"\")\n\nforeach(PLUGIN ${STATIC_PLUGINS})\n\tlist(APPEND STATIC_PLUGIN_CLASSES \"STATIC_PLUGIN_CLASS(\" ${PLUGIN} \")\\n\")\n\tlist(APPEND STATIC_PLUGIN_REGISTERS \"\\tSTATIC_PLUGIN_REGISTER(\" ${PLUGIN} \")\\n\")\nendforeach()\n\nstring(CONCAT STATIC_PLUGIN_CLASSES ${STATIC_PLUGIN_CLASSES})\nstring(CONCAT STATIC_PLUGIN_REGISTERS ${STATIC_PLUGIN_REGISTERS})\n\nif(WIN32)\n\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/PluginManagerWindows.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp ESCAPE_QUOTES @ONLY)\n\tif(WITH_FFTW)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderWindows.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)\n\tendif()\nelse()\n\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/PluginManagerUnix.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp ESCAPE_QUOTES @ONLY)\n\tif(WITH_FFTW)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderUnix.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)\n\tendif()\nendif()\n\nlist(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp)\nif(WITH_FFTW)\n\tlist(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal Backend in CMake for Blender\nDESCRIPTION: Enables Metal backend support by adding the appropriate compiler definition. No additional frameworks need to be added as they are already included in the platform-specific configuration for Apple platforms.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Configure Metal\n\nif(WITH_METAL_BACKEND)\n  add_definitions(-DWITH_METAL_BACKEND)\n\n  # No need to add frameworks here, all the ones we need for Metal and\n  # Metal-OpenGL Interop are already being added by\n  # build_files/cmake/platform/platform_apple.cmake\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building VulkanMemoryAllocator with CMake in Linux\nDESCRIPTION: Explains the process of using CMake to build and install Vulkan Memory Allocator on Linux. This requires CMake installed in the environment. The output is the built and installed library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build\n# Since VMA has no source files, you can skip to installation immediately\ncmake --install build --prefix build/install\n```\n\n----------------------------------------\n\nTITLE: Setting Clip Plane in OpenGL with Python\nDESCRIPTION: Specifies a plane against which all geometry is clipped using the glClipPlane function. Requires plane as an enumerated constant and equation as a Buffer object of type GL_FLOAT.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nglClipPlane(plane, equation)\n```\n\n----------------------------------------\n\nTITLE: Updating Sequence Position with Audaspace in Python\nDESCRIPTION: Illustrates manually updating the position for the audio sequence to control the timing of sound additions in custom compositions.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nposition += length\n```\n\n----------------------------------------\n\nTITLE: Multi-inheritance Constructor Implementation for Blender Classes\nDESCRIPTION: Shows how to properly implement a constructor with multiple inheritance by explicitly calling the Blender-defined parent class constructor first.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass FancyRaytracer(AwesomeRaytracer, bpy.types.RenderEngine):\n   def __init__(self, *args, **kwargs):\n      bpy.types.RenderEngine.__init__(self, *args, **kwargs)\n      AwesomeRaytracer.__init__(self, *args, **kwargs)\n      self.my_var = 42\n      ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Building Cycles Subdivision Library in CMake\nDESCRIPTION: Configures and builds the Cycles subdivision library by defining include paths, source files, header files, and creating the library target. The file handles all necessary build system configuration for this component of the Blender Cycles renderer.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/subd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  dice.cpp\n  interpolation.cpp\n  osd.cpp\n  patch.cpp\n  split.cpp\n)\n\nset(SRC_HEADERS\n  dice.h\n  interpolation.h\n  osd.h\n  patch.h\n  split.h\n  subpatch.h\n)\n\nset(LIB\n\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_subd \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Generating Texture Names - OpenGL - Python\nDESCRIPTION: The glGenTextures function generates texture names for use in OpenGL operations. It is critical for creating and managing textures in graphics applications.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGenTextures(n, textures):\n\n   Generate texture names\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGenTextures.xhtml>`__\n\n   :type n: int\n   :arg n: Specifies the number of textures name to be generated.\n   :type textures: :class:`bgl.Buffer` object I{type GL_INT}\n   :arg textures: Specifies an array in which the generated textures names are stored.\n```\n\n----------------------------------------\n\nTITLE: UILayout.row Argument Change\nDESCRIPTION: This snippet details the change in arguments for the `row` function within the `UILayout` class. The update affects how rows are created and configured in the Blender UI.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\":class:`bpy.types.UILayout.row` (align, heading, heading_ctxt, translate), *was (align)*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Object Editor\nDESCRIPTION: Specifies all required library dependencies for the object editor, including core Blender libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/object/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_mesh\n  bf_editor_metaball\n  bf_editor_grease_pencil\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Row Layout in Blender UI\nDESCRIPTION: Shows how to create a row layout for placing multiple properties on a single line in the Blender UI.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrow = layout.row()\nrow.prop()\nrow.prop()\n```\n\n----------------------------------------\n\nTITLE: Configuring Endianness Detection in CMake for Blender\nDESCRIPTION: Detects and sets endianness (big or little endian) based on the platform. Uses platform-specific approaches for MSVC and macOS, with a fallback to TestBigEndian for other platforms.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\n# set the endian define\nif(MSVC)\n  # For some reason this fails on MSVC.\n  add_definitions(-D__LITTLE_ENDIAN__)\n\n  # OSX-Note: as we do cross-compiling with specific set architecture,\n  # endianness-detection and auto-setting is counterproductive\n  # so we just set endianness according CMAKE_OSX_ARCHITECTURES\n\nelseif(CMAKE_OSX_ARCHITECTURES MATCHES i386 OR\n       CMAKE_OSX_ARCHITECTURES MATCHES x86_64 OR\n       CMAKE_OSX_ARCHITECTURES MATCHES arm64)\n  add_definitions(-D__LITTLE_ENDIAN__)\nelseif(CMAKE_OSX_ARCHITECTURES MATCHES ppc OR CMAKE_OSX_ARCHITECTURES MATCHES ppc64)\n  add_definitions(-D__BIG_ENDIAN__)\n\nelse()\n  include(TestBigEndian)\n  test_big_endian(_SYSTEM_BIG_ENDIAN)\n  if(_SYSTEM_BIG_ENDIAN)\n    add_definitions(-D__BIG_ENDIAN__)\n  else()\n    add_definitions(-D__LITTLE_ENDIAN__)\n  endif()\n  unset(_SYSTEM_BIG_ENDIAN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Color in OpenGL with Python\nDESCRIPTION: Specifies clear values for color buffers using the glClearColor function. Takes red, green, blue, and alpha as float values between 0 and 1.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nglClearColor(red, green, blue, alpha)\n```\n\n----------------------------------------\n\nTITLE: Printing to stdout using fmt\nDESCRIPTION: This snippet demonstrates how to use the fmt library to print a simple message to standard output. It requires the fmt library and is a basic example of its simple usage.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/core.h>\n\nint main() {\n  fmt::print(\"Hello, world!\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining from_chars Functions for Floats and Doubles in C++\nDESCRIPTION: This snippet defines two overloaded functions for parsing floating-point numbers from a character sequence, returning a structure that includes a pointer to the next character and an error code. These functions support both float and double types and follow a locale-independent format.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"from_chars_result from_chars(const char* first, const char* last, float& value, ...);\\nfrom_chars_result from_chars(const char* first, const char* last, double& value, ...);\"\n```\n\n----------------------------------------\n\nTITLE: Defining OSL Node Shader Source Files in CMake\nDESCRIPTION: Defines the set of Open Shading Language (OSL) node shader source files for Blender's Cycles renderer. This comprehensive list includes all shader nodes such as BSDFs, textures, math operations, and utility nodes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_OSL\n  node_add_closure.osl\n  node_ambient_occlusion.osl\n  node_attribute.osl\n  node_background.osl\n  node_bevel.osl\n  node_brick_texture.osl\n  node_brightness.osl\n  node_bump.osl\n  node_camera.osl\n  node_checker_texture.osl\n  node_clamp.osl\n  node_combine_color.osl\n  node_combine_rgb.osl\n  node_combine_hsv.osl\n  node_combine_xyz.osl\n  node_convert_from_color.osl\n  node_convert_from_float.osl\n  node_convert_from_int.osl\n  node_convert_from_normal.osl\n  node_convert_from_point.osl\n  node_convert_from_vector.osl\n  node_diffuse_bsdf.osl\n  node_displacement.osl\n  node_vector_displacement.osl\n  node_emission.osl\n  node_environment_texture.osl\n  node_float_curve.osl\n  node_fresnel.osl\n  node_gabor_texture.osl\n  node_gamma.osl\n  node_geometry.osl\n  node_glass_bsdf.osl\n  node_glossy_bsdf.osl\n  node_gradient_texture.osl\n  node_hair_info.osl\n  node_point_info.osl\n  node_scatter_volume.osl\n  node_absorption_volume.osl\n  node_principled_volume.osl\n  node_holdout.osl\n  node_hsv.osl\n  node_ies_light.osl\n  node_image_texture.osl\n  node_invert.osl\n  node_layer_weight.osl\n  node_light_falloff.osl\n  node_light_path.osl\n  node_magic_texture.osl\n  node_map_range.osl\n  node_mapping.osl\n  node_math.osl\n  node_metallic_bsdf.osl\n  node_mix.osl\n  node_mix_closure.osl\n  node_mix_color.osl\n  node_mix_float.osl\n  node_mix_vector.osl\n  node_mix_vector_non_uniform.osl\n  node_noise_texture.osl\n  node_normal.osl\n  node_normal_map.osl\n  node_object_info.osl\n  node_output_displacement.osl\n  node_output_surface.osl\n  node_output_volume.osl\n  node_particle_info.osl\n  node_ray_portal_bsdf.osl\n  node_refraction_bsdf.osl\n  node_rgb_curves.osl\n  node_rgb_ramp.osl\n  node_separate_color.osl\n  node_separate_rgb.osl\n  node_separate_hsv.osl\n  node_separate_xyz.osl\n  node_set_normal.osl\n  node_sheen_bsdf.osl\n  node_sky_texture.osl\n  node_subsurface_scattering.osl\n  node_tangent.osl\n  node_texture_coordinate.osl\n  node_toon_bsdf.osl\n  node_translucent_bsdf.osl\n  node_transparent_bsdf.osl\n  node_value.osl\n  node_vector_curves.osl\n  node_vector_math.osl\n  node_vector_map_range.osl\n  node_vector_rotate.osl\n  node_vector_transform.osl\n  node_vertex_color.osl\n  node_voronoi_texture.osl\n  node_voxel_texture.osl\n  node_voxel_texture_zero.osl\n  node_wavelength.osl\n  node_blackbody.osl\n  node_wave_texture.osl\n  node_white_noise_texture.osl\n  node_wireframe.osl\n  node_hair_bsdf.osl\n  node_principled_hair_bsdf.osl\n  node_uv_map.osl\n  node_principled_bsdf.osl\n  node_rgb_to_bw.osl\n)\n```\n\n----------------------------------------\n\nTITLE: Building DNA Libraries\nDESCRIPTION: Sets up the build configuration for the main DNA library (bf_dna) and DNA blenlib utility library with their respective source files and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesdna/intern/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_dna \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::dna ALIAS bf_dna)\n\nblender_add_lib(bf_dna_blenlib \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C Compiler Warning Suppressions in CMake\nDESCRIPTION: This snippet defines warning suppression flags for C compilation. It uses the add_check_c_compiler_flags function to add flags that disable specific warnings for C code compilation in the Blender project.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nadd_check_c_compiler_flags(\n  C_REMOVE_STRICT_FLAGS\n\n  C_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n  C_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n  C_WARN_NO_UNUSED_MACROS -Wno-unused-macros\n  C_WARN_NO_MISLEADING_INDENTATION -Wno-misleading-indentation\n\n  C_WARN_NO_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations\n  C_WARN_NO_INCOMPAT_PTR_DISCARD_QUAL -Wno-incompatible-pointer-types-discards-qualifiers\n  C_WARN_NO_UNUSED_FUNCTION -Wno-unused-function\n  C_WARN_NO_INT_TO_VOID_POINTER_CAST -Wno-int-to-void-pointer-cast\n  C_WARN_NO_MISSING_PROTOTYPES -Wno-missing-prototypes\n  C_WARN_NO_DUPLICATE_ENUM -Wno-duplicate-enum\n  C_WARN_NO_UNDEF -Wno-undef\n  C_WARN_NO_MISSING_NORETURN -Wno-missing-noreturn\n  C_WARN_NO_UNUSED_BUT_SET_VARIABLE -Wno-unused-but-set-variable\n)\n```\n\n----------------------------------------\n\nTITLE: SAT Flip Removal Configuration on Unix Systems\nDESCRIPTION: This configuration command allows SAT flip removal for watertight results in QuadriFlow using the -sat option. It requires minisat and timeout to be accessible in the system PATH. It is Unix specific, with additional setup required on Mac using homebrew. The dependencies include minisat and timeout.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -sat -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Inefficient Triangle Removal from Mesh Polygons\nDESCRIPTION: Shows an inefficient way to remove triangular polygons from a mesh, using list manipulation.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npolygons = mesh.polygons[:]  # Make a list copy of the meshes polygons.\np_idx = len(polygons)        # Loop backwards\nwhile p_idx:                 # While the value is not 0.\n    p_idx -= 1\n\n    if len(polygons[p_idx].vertices) == 3:\n        polygons.pop(p_idx)  # Remove the triangle.\n```\n\n----------------------------------------\n\nTITLE: Setting Color Mask in OpenGL with Python\nDESCRIPTION: Enables or disables writing of frame buffer color components using the glColorMask function. Takes boolean values for red, green, blue, and alpha channels.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nglColorMask(red, green, blue, alpha)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shape Key Data in BMesh\nDESCRIPTION: Shows how to access shape key data for each vertex in a BMesh. It retrieves the shape layer named 'Key.001' and prints the shape coordinates for each vertex.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/include__bmesh.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nshape_lay = bm.verts.layers.shape[\"Key.001\"]\n\nfor vert in bm.verts:\n    shape = vert[shape_lay]\n    print(\"Vert Shape: %f, %f, %f\" % (shape.x, shape.y, shape.z))\n```\n\n----------------------------------------\n\nTITLE: Implementing Threaded Operations in Blender Python\nDESCRIPTION: Demonstrates a safe way to use threading in Blender by ensuring threads complete before the script ends. This example creates multiple threads that modify a cube's position.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nimport time\n\ndef prod():\n    print(threading.current_thread().name, \"Starting\")\n\n    # Do something vaguely useful.\n    import bpy\n    from mathutils import Vector\n    from random import random\n\n    prod_vec = Vector((random() - 0.5, random() - 0.5, random() - 0.5))\n    print(\"Prodding\", prod_vec)\n    bpy.data.objects[\"Cube\"].location += prod_vec\n    time.sleep(random() + 1.0)\n    # Finish.\n\n    print(threading.current_thread().name, \"Exiting\")\n\nthreads = [threading.Thread(name=\"Prod %d\" % i, target=prod) for i in range(10)]\n\n\nprint(\"Starting threads...\")\n\nfor t in threads:\n    t.start()\n\nprint(\"Waiting for threads to finish...\")\n\nfor t in threads:\n    t.join()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Blender Editor Space API\nDESCRIPTION: Defines the build configuration for the Blender editor space API library. Sets include paths, source files, and links required library dependencies for the editor space components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../io\n  ../../makesrna\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  spacetypes.cc\n)\n\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  bf_editor_geometry\n  bf_editor_space_action\n  bf_editor_space_buttons\n  bf_editor_space_clip\n  bf_editor_space_console\n  bf_editor_space_file\n  bf_editor_space_graph\n  bf_editor_space_image\n  bf_editor_space_info\n  bf_editor_space_nla\n  bf_editor_space_node\n  bf_editor_space_outliner\n  bf_editor_space_script\n  bf_editor_space_sequencer\n  bf_editor_space_spreadsheet\n  bf_editor_space_statusbar\n  bf_editor_space_text\n  bf_editor_space_topbar\n  bf_editor_space_userpref\n  bf_editor_space_view3d\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n\nblender_add_lib(bf_editor_space_api \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Efficient String Start Checking\nDESCRIPTION: Shows a more efficient method of checking the start of a string using startswith().\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nif line.startswith(\"vert \"): ...\n```\n\n----------------------------------------\n\nTITLE: Setting Blend Function in OpenGL with Python\nDESCRIPTION: Specifies pixel arithmetic for blending using the glBlendFunc function. Takes sfactor and dfactor as enumerated constants for source and destination blending factors.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nglBlendFunc(sfactor, dfactor)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Blender Operator Classes\nDESCRIPTION: This snippet showcases how to use Python's type() function to dynamically create new operator classes within Blender, useful for generating multiple similar operators at runtime.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    idname = \"object.operator_{:d}\".format(i)\n\n    def func(self, context):\n        print(\"Hello World\", self.bl_idname)\n        return {'FINISHED'}\n\n    op_class = type(\n        \"DynOp{:d}\".format(i),\n        (bpy.types.Operator, ),\n        {\"bl_idname\": idname, \"bl_label\": \"Test\", \"execute\": func},\n    )\n    bpy.utils.register_class(op_class)\n```\n\n----------------------------------------\n\nTITLE: Resolving Relative File Paths in Blender Python\nDESCRIPTION: This snippet demonstrates how to convert Blender's relative file paths to absolute paths using bpy.path.abspath(). It also shows how to handle paths from linked libraries.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_file_paths_and_encoding.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.path.abspath(image.filepath)\n\n>>> bpy.path.abspath(image.filepath, library=image.library)\n```\n\n----------------------------------------\n\nTITLE: Problematic Name Assignment and Reference in Blender Python\nDESCRIPTION: Another example showing the risk of relying on name assignment and later reference, as Blender may modify names to maintain uniqueness or handle other constraints.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nobj.name = objname\n\n# Normally some code, function calls, etc.\nobj = bpy.data.meshes[objname]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycles Session Library Build in CMake\nDESCRIPTION: Defines the build configuration for the Cycles session library including source files, headers, include paths and library dependencies. Sets up include directories and uses a custom cycles_add_library command to create the library target.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/session/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  buffers.cpp\n  denoising.cpp\n  merge.cpp\n  session.cpp\n  tile.cpp\n)\n\nset(SRC_HEADERS\n  buffers.h\n  display_driver.h\n  denoising.h\n  merge.h\n  output_driver.h\n  session.h\n  tile.h\n)\n\nset(LIB\n  cycles_device\n  cycles_integrator\n  cycles_util\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_session \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support in Blender Geometry Module\nDESCRIPTION: Conditionally adds support for OpenVDB by including the necessary directories, libraries, and defining the appropriate preprocessor macros.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Ninja Build Job Pools in CMake\nDESCRIPTION: This snippet sets up job pools for compilation and linking in the Ninja build system. It calculates optimal job counts based on system memory and CPU cores, then configures CMake properties accordingly.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\" AND WITH_NINJA_POOL_JOBS)\n  if(NOT NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS AND\n     NOT NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS AND\n     NOT NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n    # Try to define good default values.\n    # Max mem of heavy cpp files compilation: about 2.5GB\n    # Max mem during linking: about 3.3GB\n    cmake_host_system_information(RESULT _NUM_CORES QUERY NUMBER_OF_LOGICAL_CORES)\n    # Note: this gives mem in MB.\n    cmake_host_system_information(RESULT _TOT_MEM QUERY TOTAL_PHYSICAL_MEMORY)\n\n    # Heuristics: Assume 8Gb of RAM is needed per heavy compile job.\n    math(EXPR _compile_heavy_jobs \"${_TOT_MEM} / 8000\")\n    math(EXPR _compile_heavy_jobs_max \"${_NUM_CORES} - 1\")\n    if(${_compile_heavy_jobs} GREATER ${_compile_heavy_jobs_max})\n      set(_compile_heavy_jobs ${_compile_heavy_jobs_max})\n    elseif(${_compile_heavy_jobs} LESS 1)\n      set(_compile_heavy_jobs 1)\n    endif()\n    set(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS \"${_compile_heavy_jobs}\" CACHE STRING \"\\\nDefine the maximum number of concurrent heavy compilation jobs, for ninja build system \\\n(used for some targets which cpp files can take several GB each during compilation).\"\n      FORCE\n    )\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS)\n    set(_compile_heavy_jobs)\n    set(_compile_heavy_jobs_max)\n\n    # Heuristics: Assume 2Gb of RAM is needed per heavy compile job.\n    math(EXPR _compile_jobs \"${_TOT_MEM} / 2000\")\n    if(${_NUM_CORES} GREATER 3)\n      math(EXPR _compile_jobs_max \"${_NUM_CORES} - 1\")\n    else()\n      set(_compile_jobs_max ${_NUM_CORES})\n    endif()\n    if(${_compile_jobs} GREATER ${_compile_jobs_max})\n      set(_compile_jobs ${_compile_jobs_max})\n    elseif(${_compile_jobs} LESS 1)\n      set(_compile_jobs 1)\n    endif()\n    set(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS \"${_compile_jobs}\" CACHE STRING\n        \"Define the maximum number of concurrent compilation jobs, for ninja build system.\" FORCE)\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS)\n    set(_compile_jobs)\n    set(_compile_jobs_max)\n\n    # In practice, even when there is RAM available,\n    # this proves to be quicker than running in parallel (due to slow disks accesses).\n    set(NINJA_MAX_NUM_PARALLEL_LINK_JOBS \"1\" CACHE STRING\n        \"Define the maximum number of concurrent link jobs, for ninja build system.\" FORCE)\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n\n    set(_NUM_CORES)\n    set(_TOT_MEM)\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS compile_job_pool=${NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS}\n    )\n    set(CMAKE_JOB_POOL_COMPILE compile_job_pool)\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS compile_heavy_job_pool=${NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS}\n    )\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS link_job_pool=${NINJA_MAX_NUM_PARALLEL_LINK_JOBS}\n    )\n    set(CMAKE_JOB_POOL_LINK link_job_pool)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering View Layer Test Cases in CMake\nDESCRIPTION: Implements multiple view layer test cases using the defined macro. Tests cover various aspects including collections, object operations, visibility, and scene management.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/view_layer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nview_layer_test(active_collection)\nview_layer_test(background_set)\nview_layer_test(collection_new_sync)\nview_layer_test(collection_rename_a)\nview_layer_test(collection_rename_b)\nview_layer_test(evaluation_visibility_a)\n# ... additional test cases\n```\n\n----------------------------------------\n\nTITLE: Cycles Render Engine Configuration\nDESCRIPTION: Defines build options for the Cycles render engine including support for various computing devices (CUDA, OptiX, HIP, Metal) and debugging features.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_CYCLES \"Enable Cycles Render Engine\" ON)\noption(WITH_CYCLES_OSL \"Build Cycles with OpenShadingLanguage support\" ON)\noption(WITH_CYCLES_PATH_GUIDING \"Build Cycles with path guiding support\" ON)\noption(WITH_CYCLES_EMBREE \"Build Cycles with Embree support\" ON)\noption(WITH_CYCLES_LOGGING \"Build Cycles with logging support\" ON)\noption(WITH_CYCLES_DEBUG \"Build Cycles with options useful for debugging (e.g., MIS)\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating Column Layout in Blender UI\nDESCRIPTION: Illustrates how to create a column layout for vertical arrangement of properties in the Blender UI.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncol = layout.column()\ncol.prop()\ncol.prop()\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Filenames for UI Icons\nDESCRIPTION: Conditional CMake configuration that sets up a list of SVG filenames for Blender's UI icons when building with the UI (non-headless). These SVG files will be processed into icon resources during the build process.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER)\n  # Blender only (not Cycles stand-alone).\n\n  if(NOT WITH_HEADLESS)\n    # Blender UI only.\n\n    set(SVG_FILENAMES_NOEXT\n      action\n      action_slot\n      action_tweak\n      add\n      aliased\n      align_bottom\n      align_center\n      align_flush\n      align_justify\n      align_left\n      align_middle\n      align_right\n      align_top\n      anchor_bottom\n      anchor_center\n      anchor_left\n      anchor_right\n      anchor_top\n      anim\n      anim_data\n      antialiased\n      append_blend\n      area_dock\n      area_join\n      area_join_down\n      area_join_left\n      area_join_up\n      area_swap\n      armature_data\n      arrow_leftright\n      asset_manager\n      auto\n      automerge_off\n      automerge_on\n      axis_front\n      axis_side\n      axis_top\n      back\n      blank1\n      blender\n      blender_logo_large\n      boids\n      bold\n      bone_data\n      bookmarks\n      bordermove\n      brushes_all\n      brush_data\n      camera_data\n      camera_stereo\n      cancel\n      cancel_large\n      center_only\n      char_notdef\n      char_replacement\n      checkbox_dehlt\n      checkbox_hlt\n      checkmark\n      clipuv_dehlt\n      clipuv_hlt\n      collapsemenu\n      collection_new\n      color\n      color_blue\n      color_green\n      color_red\n      community\n      cone\n      console\n      constraint\n      constraint_bone\n      con_action\n      con_armature\n      con_camerasolver\n      con_childof\n      con_clampto\n      con_distlimit\n      con_floor\n      con_followpath\n      con_followtrack\n      con_kinematic\n      con_locktrack\n      con_loclike\n      con_loclimit\n      con_objectsolver\n      con_pivot\n      con_rotlike\n      con_rotlimit\n      con_samevol\n      con_shrinkwrap\n      con_sizelike\n      con_sizelimit\n      con_splineik\n      con_stretchto\n      con_trackto\n      con_transform\n      con_transform_cache\n      con_translike\n      copydown\n      copy_id\n      cube\n      current_file\n      cursor\n      curves\n      curves_data\n      curve_bezcircle\n      curve_bezcurve\n      curve_data\n      curve_ncircle\n      curve_ncurve\n      curve_path\n      decorate\n      decorate_animate\n      decorate_driver\n      decorate_keyframe\n      decorate_library_override\n      decorate_linked\n      decorate_locked\n      decorate_override\n      decorate_unlocked\n      desktop\n      disc\n      disc_large\n      disclosure_tri_down\n      disclosure_tri_right\n      disk_drive\n      disk_drive_large\n      documents\n      dot\n      downarrow_hlt\n      driver\n      driver_distance\n      driver_rotational_difference\n      driver_transform\n      duplicate\n      edgesel\n      editmode_hlt\n      empty_arrows\n      empty_axis\n      empty_data\n      empty_single_arrow\n      error\n      experimental\n      export\n      external_drive\n      external_drive_large\n      eyedropper\n      facesel\n      face_corner\n      face_maps\n      fake_user_off\n      fake_user_on\n      fcurve\n      fcurve_snapshot\n      ff\n      file\n      file_large\n      filebrowser\n      file_3d\n      file_alias\n      file_archive\n      file_backup\n      file_blank\n      file_blend\n      file_cache\n      file_folder\n      file_folder_large\n      file_font\n      file_hidden\n      file_image\n      file_movie\n      file_new\n      file_parent\n      file_parent_large\n      file_refresh\n      file_script\n      file_sound\n      file_text\n      file_tick\n      file_volume\n      filter\n      fixed_size\n      folder_redirect\n      fontpreview\n      font_data\n      force_boid\n      force_charge\n      force_curve\n      force_drag\n      force_fluidflow\n      force_force\n      force_harmonic\n      force_lennardjones\n      force_magnetic\n      force_texture\n      force_turbulence\n      force_vortex\n      force_wind\n      forward\n      frame_next\n      frame_prev\n      freeze\n      fullscreen_enter\n      fullscreen_exit\n      fund\n      geometry_nodes\n      geometry_set\n      ghost_disabled\n      ghost_enabled\n      gizmo\n      gp_caps_flat\n      gp_caps_round\n      gp_multiframe_editing\n      gp_only_selected\n      gp_select_between_strokes\n      gp_select_points\n      gp_select_strokes\n      graph\n      greasepencil\n      greasepencil_layer_group\n      grid\n      grip\n      grip_v\n      group\n      group_bone\n      group_uvs\n      group_vcol\n      group_vertex\n      hand\n      handle_aligned\n      handle_auto\n      handle_autoclamped\n      handle_free\n      handle_vector\n      heart\n      help\n      hide_off\n      hide_on\n      holdout_off\n      holdout_on\n      home\n      hook\n      image\n      image_alpha\n      image_background\n      image_data\n      image_plane\n      image_reference\n      image_rgb\n      image_rgb_alpha\n      image_zdepth\n      imgdisplay\n      import\n      indirect_only_off\n      indirect_only_on\n      info\n      info_large\n      internet\n      internet_offline\n      inversesquarecurve\n      ipo_back\n      ipo_bezier\n      ipo_bounce\n      ipo_circ\n      ipo_constant\n      ipo_cubic\n      ipo_ease_in\n      ipo_ease_in_out\n      ipo_ease_out\n      ipo_elastic\n      ipo_expo\n      ipo_linear\n      ipo_quad\n      ipo_quart\n      ipo_quint\n      ipo_sine\n      italic\n      keyframe\n      keyframe_hlt\n      keyingset\n      key_backspace\n      key_backspace_filled\n      key_command\n      key_command_filled\n      key_control\n      key_control_filled\n      key_dehlt\n      key_empty1\n      key_empty1_filled\n      key_empty2\n      key_empty2_filled\n      key_empty3\n      key_empty3_filled\n      key_hlt\n      key_menu\n      key_menu_filled\n      key_option\n      key_option_filled\n      key_return\n      key_return_filled\n      key_ring\n      key_ring_filled\n      key_shift\n      key_shift_filled\n      key_tab\n      key_tab_filled\n      key_windows\n      key_windows_filled\n      lattice_data\n      layer_active\n      layer_used\n      library_data_broken\n      library_data_direct\n      library_data_override\n      light\n      lightprobe_plane\n      lightprobe_sphere\n      lightprobe_volume\n      light_area\n      light_data\n      light_hemi\n      light_point\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Curve Editor\nDESCRIPTION: Lists all source files that comprise the curve editor module, including curve operations, editing functions, and font handling.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curve/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  curve_ops.cc\n  editcurve.cc\n  editcurve_add.cc\n  editcurve_paint.cc\n  editcurve_pen.cc\n  editcurve_query.cc\n  editcurve_select.cc\n  editcurve_undo.cc\n  editfont.cc\n  editfont_undo.cc\n\n  curve_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Libmv Build in CMake\nDESCRIPTION: This CMake script configures the build system for Blender's Libmv library, defining include paths, source files, and library dependencies. It also sets up conditional compilation flags based on the build configuration, such as platform-specific definitions and optional TBB threading support.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libmv/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  libmv-capi.h\n)\n\nset(LIB\n\n)\n\nif(WITH_LIBMV)\n  if(WIN32)\n    add_definitions(-D_USE_MATH_DEFINES)\n  endif()\n  add_definitions(${GFLAGS_DEFINES})\n  add_definitions(${GLOG_DEFINES})\n  add_definitions(-DLIBMV_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})\n\n  if(WITH_TBB)\n    add_definitions(-DLIBMV_USE_TBB_THREADS)\n  endif()\n\n  list(APPEND INC\n    ${GFLAGS_INCLUDE_DIRS}\n    ${GLOG_INCLUDE_DIRS}\n    ../guardedalloc\n  )\n\n  list(APPEND INC_SYS\n    ${PNG_INCLUDE_DIRS}\n    ${ZLIB_INCLUDE_DIRS}\n    ../../extern/ceres/include\n    ../../extern/ceres/config\n  )\n\n  list(APPEND LIB\n    extern_ceres\n    PUBLIC bf::dependencies::optional::tbb\n\n    ${GLOG_LIBRARIES}\n    ${GFLAGS_LIBRARIES}\n    ${PNG_LIBRARIES}\n\n    PRIVATE bf::dependencies::eigen\n  )\n\n  add_definitions(\n    -DWITH_LIBMV_GUARDED_ALLOC\n    -DLIBMV_NO_FAST_DETECTOR=\n  )\n\n  list(APPEND SRC\n    intern/autotrack.cc\n    intern/camera_intrinsics.cc\n    intern/detector.cc\n    intern/frame_accessor.cc\n    intern/homography.cc\n    intern/image.cc\n    intern/logging.cc\n    intern/reconstruction.cc\n    intern/track_region.cc\n    intern/tracks.cc\n    intern/tracksN.cc\n    libmv/autotrack/autotrack.cc\n    libmv/autotrack/predict_tracks.cc\n    libmv/autotrack/tracks.cc\n    libmv/base/aligned_malloc.cc\n    libmv/image/array_nd.cc\n    libmv/image/convolve.cc\n    libmv/multiview/conditioning.cc\n    libmv/multiview/euclidean_resection.cc\n    libmv/multiview/fundamental.cc\n    libmv/multiview/homography.cc\n    libmv/multiview/panography.cc\n    libmv/multiview/panography_kernel.cc\n    libmv/multiview/projection.cc\n    libmv/multiview/triangulation.cc\n    libmv/numeric/numeric.cc\n    libmv/numeric/poly.cc\n    libmv/simple_pipeline/bundle.cc\n    libmv/simple_pipeline/camera_intrinsics.cc\n    libmv/simple_pipeline/detect.cc\n    libmv/simple_pipeline/distortion_models.cc\n    libmv/simple_pipeline/initialize_reconstruction.cc\n    libmv/simple_pipeline/intersect.cc\n    libmv/simple_pipeline/keyframe_selection.cc\n    libmv/simple_pipeline/modal_solver.cc\n    libmv/simple_pipeline/packed_intrinsics.cc\n    libmv/simple_pipeline/pipeline.cc\n    libmv/simple_pipeline/reconstruction.cc\n    libmv/simple_pipeline/reconstruction_scale.cc\n    libmv/simple_pipeline/resect.cc\n    libmv/simple_pipeline/tracks.cc\n    libmv/tracking/brute_region_tracker.cc\n    libmv/tracking/hybrid_region_tracker.cc\n    libmv/tracking/klt_region_tracker.cc\n    libmv/tracking/pyramid_region_tracker.cc\n    libmv/tracking/retrack_region_tracker.cc\n    libmv/tracking/track_region.cc\n    libmv/tracking/trklt_region_tracker.cc\n\n\n    intern/autotrack.h\n    intern/camera_intrinsics.h\n    intern/detector.h\n    intern/frame_accessor.h\n    intern/homography.h\n    intern/image.h\n    intern/logging.h\n    intern/reconstruction.h\n    intern/region.h\n    intern/track_region.h\n    intern/tracks.h\n    intern/tracksN.h\n    intern/utildefines.h\n    libmv/autotrack/autotrack.h\n    libmv/autotrack/callbacks.h\n    libmv/autotrack/frame_accessor.h\n    libmv/autotrack/marker.h\n    libmv/autotrack/model.h\n    libmv/autotrack/predict_tracks.h\n    libmv/autotrack/quad.h\n    libmv/autotrack/reconstruction.h\n    libmv/autotrack/region.h\n    libmv/autotrack/tracks.h\n    libmv/base/aligned_malloc.h\n    libmv/base/array.h\n    libmv/base/id_generator.h\n    libmv/base/map.h\n    libmv/base/scoped_ptr.h\n    libmv/base/vector.h\n    libmv/base/vector_utils.h\n    libmv/build/build_config.h\n    libmv/image/array_nd.h\n    libmv/image/convolve.h\n    libmv/image/correlation.h\n    libmv/image/image_converter.h\n    libmv/image/image_drawing.h\n    libmv/image/image.h\n    libmv/image/sample.h\n    libmv/image/tuple.h\n    libmv/logging/logging.h\n    libmv/multiview/conditioning.h\n    libmv/multiview/euclidean_resection.h\n    libmv/multiview/fundamental.h\n    libmv/multiview/homography_error.h\n    libmv/multiview/homography.h\n    libmv/multiview/homography_parameterization.h\n    libmv/multiview/nviewtriangulation.h\n    libmv/multiview/panography.h\n    libmv/multiview/panography_kernel.h\n    libmv/multiview/projection.h\n    libmv/multiview/resection.h\n    libmv/multiview/triangulation.h\n    libmv/multiview/two_view_kernel.h\n    libmv/numeric/dogleg.h\n    libmv/numeric/function_derivative.h\n    libmv/numeric/levenberg_marquardt.h\n    libmv/numeric/numeric.h\n    libmv/numeric/poly.h\n    libmv/simple_pipeline/bundle.h\n    libmv/simple_pipeline/callbacks.h\n    libmv/simple_pipeline/camera_intrinsics.h\n    libmv/simple_pipeline/camera_intrinsics_impl.h\n    libmv/simple_pipeline/detect.h\n    libmv/simple_pipeline/distortion_models.h\n    libmv/simple_pipeline/initialize_reconstruction.h\n    libmv/simple_pipeline/intersect.h\n    libmv/simple_pipeline/keyframe_selection.h\n    libmv/simple_pipeline/modal_solver.h\n    libmv/simple_pipeline/packed_intrinsics.h\n    libmv/simple_pipeline/pipeline.h\n    libmv/simple_pipeline/reconstruction.h\n    libmv/simple_pipeline/reconstruction_scale.h\n    libmv/simple_pipeline/resect.h\n    libmv/simple_pipeline/tracks.h\n    libmv/threading/threading.h\n    libmv/threading/parallel_for.h\n    libmv/tracking/brute_region_tracker.h\n    libmv/tracking/hybrid_region_tracker.h\n    libmv/tracking/kalman_filter.h\n    libmv/tracking/klt_region_tracker.h\n    libmv/tracking/pyramid_region_tracker.h\n    libmv/tracking/region_tracker.h\n    libmv/tracking/retrack_region_tracker.h\n    libmv/tracking/track_region.h\n    libmv/tracking/trklt_region_tracker.h\n\n    third_party/msinttypes/inttypes.h\n    third_party/msinttypes/stdint.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Asset Bundle Installation\nDESCRIPTION: Configures installation of bundled assets, studio lights, and geometry icons.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/studiolights\n  DESTINATION ${TARGETDIR_VER}/datafiles\n)\n```\n\n----------------------------------------\n\nTITLE: Preserving Sharp Edges with QuadriFlow\nDESCRIPTION: This command uses the -sharp option in QuadriFlow to enable the preservation of sharp edges during mesh processing. This is beneficial for maintaining model details that have sharp features. Dependencies include a compiled QuadriFlow binary.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -sharp -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: RenderEngine.bake Argument Change\nDESCRIPTION: This snippet documents the change in arguments for the `bake` function within the `RenderEngine` class. The function signature has been updated, affecting how baking operations are performed.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\":class:`bpy.types.RenderEngine.bake` (depsgraph, object, pass_type, pass_filter, width, height), *was (depsgraph, object, pass_type, pass_filter, object_id, pixel_array, num_pixels, depth, result)*\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating Mesh in OpenGL with Python\nDESCRIPTION: Computes a one- or two-dimensional grid of points or lines using glEvalMesh functions. Takes mode, i1, and i2 parameters to specify the evaluation details.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nglEvalMesh(mode, i1, i2)\n```\n\n----------------------------------------\n\nTITLE: Joining Sounds with Audaspace in Python\nDESCRIPTION: Connects two sound waves using the `aud.Sound.join` function to form a continuous audio effect. This method is important for sequencing multiple sound bites into one.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsound = high.join(low)\n```\n\n----------------------------------------\n\nTITLE: Importing and Reloading External Python Modules in Blender\nDESCRIPTION: This snippet demonstrates how to import an external Python module, reload it to ensure the latest version is used, and execute a function from it.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport myscript\nimport importlib\n\nimportlib.reload(myscript)\nmyscript.main()\n```\n\n----------------------------------------\n\nTITLE: Clearing Buffers in OpenGL with Python\nDESCRIPTION: Clears buffers to preset values using the glClear function. The mask parameter is a bitwise OR of enumerated constants indicating which buffers to clear.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nglClear(mask)\n```\n\n----------------------------------------\n\nTITLE: Configuring IMBuf Library Dependencies and Sources in CMake\nDESCRIPTION: This CMake code snippet sets up the include directories, system include paths, source files, and library dependencies for the Blender Image Buffer (IMBuf) library. It also handles conditional compilation for various image format supports.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(movie)\n\nset(INC\n  PUBLIC .\n  ./movie\n  ../makesrna\n  ../../../intern/memutil\n)\n\nset(INC_SYS\n  ${JPEG_INCLUDE_DIR}\n  ${ZLIB_INCLUDE_DIRS}\n  ${OPENIMAGEIO_INCLUDE_DIRS}\n)\n\nset(SRC\n  intern/allocimbuf.cc\n  intern/colormanagement.cc\n  intern/colormanagement_inline.h\n  intern/conversion.cc\n  intern/filetype.cc\n  intern/filter.cc\n  intern/format_bmp.cc\n  intern/format_dds.cc\n  intern/format_hdr.cc\n  intern/format_iris.cc\n  intern/format_jpeg.cc\n  intern/format_png.cc\n  intern/format_psd.cc\n  intern/format_svg.cc\n  intern/format_targa.cc\n  intern/format_tiff.cc\n  intern/imageprocess.cc\n  intern/interp.cc\n  intern/metadata.cc\n  intern/module.cc\n  intern/moviecache.cc\n  intern/readimage.cc\n  intern/rectop.cc\n  intern/rotate.cc\n  intern/scaling.cc\n  intern/stereoimbuf.cc\n  intern/thumbs.cc\n  intern/thumbs_blend.cc\n  intern/thumbs_font.cc\n  intern/transform.cc\n  intern/util.cc\n  intern/util_gpu.cc\n  intern/writeimage.cc\n\n  IMB_colormanagement.hh\n  IMB_imbuf.hh\n  IMB_imbuf_enums.h\n  IMB_imbuf_types.hh\n  IMB_interp.hh\n  IMB_metadata.hh\n  IMB_moviecache.hh\n  IMB_openexr.hh\n  IMB_thumbs.hh\n  intern/IMB_allocimbuf.hh\n  intern/IMB_colormanagement_intern.hh\n  intern/IMB_filetype.hh\n  intern/IMB_filter.hh\n  intern/imbuf.hh\n)\n\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  bf_imbuf_openimageio\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_memutil\n  bf_intern_opencolorio\n  PRIVATE bf::extern::nanosvg\n\n  ${JPEG_LIBRARIES}\n  PRIVATE bf::sequencer\n)\n```\n\n----------------------------------------\n\nTITLE: Most Efficient String Writing using Join\nDESCRIPTION: Shows the most efficient method of joining strings for file writing using string joining.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfile.write(\" \".join((str1, str2, str3, \"\\n\")))\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Blender Mesh Editor Features in CMake\nDESCRIPTION: Sets up conditional compilation flags for optional features like Freestyle, Bullet physics, and GMP library support in the Blender mesh editor.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mesh/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_BULLET)\n  add_definitions(-DWITH_BULLET)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional IO Format Support Configuration\nDESCRIPTION: Configures conditional compilation and library dependencies for various IO formats based on build options.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/io/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLLADA)\n  list(APPEND LIB\n    bf_io_collada\n  )\n  add_definitions(-DWITH_COLLADA)\nendif()\n\nif(WITH_IO_WAVEFRONT_OBJ)\n  list(APPEND LIB\n    bf_io_wavefront_obj\n  )\n  add_definitions(-DWITH_IO_WAVEFRONT_OBJ)\nendif()\n\nif(WITH_IO_PLY)\n  list(APPEND LIB\n    bf_io_ply\n  )\n  add_definitions(-DWITH_IO_PLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to Blender's CMake Build\nDESCRIPTION: Adds various subdirectories to the CMake build process, including core components of Blender such as the window manager, asset system, kernel, and rendering engines.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(datatoc)\nadd_subdirectory(gpu/glsl_preprocess)\nadd_subdirectory(editors)\nadd_subdirectory(windowmanager)\n# ... (truncated for brevity)\nadd_subdirectory(makesdna)\nadd_subdirectory(makesrna)\nadd_subdirectory(compositor)\n```\n\n----------------------------------------\n\nTITLE: Configuring Render Tests in CMake for Blender\nDESCRIPTION: This snippet sets up a list of render tests and configures them based on various build options. It includes tests for Cycles, Eevee Next, Workbench, Overlay, and Hydra Storm renderers with different backends like OpenGL, Metal, and Vulkan.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif((WITH_CYCLES OR WITH_GPU_RENDER_TESTS) AND TEST_SRC_DIR_EXISTS)\n  set(render_tests\n    attributes\n    camera\n    bsdf\n    hair\n    image_colorspace\n    image_data_types\n    image_mapping\n    image_texture_limit\n    integrator\n    light\n    light_group\n    light_linking\n    mesh\n    pointcloud\n    principled_bsdf\n    shader\n    shadow_catcher\n    sss\n    texture\n  )\n\n  if(WITH_OPENSUBDIV)\n    list(APPEND render_tests displacement)\n  endif()\n\n  if(WITH_FREESTYLE)\n    list(APPEND render_tests render_layer)\n  endif()\n\n  if(WITH_MOD_FLUID)\n    list(APPEND render_tests motion_blur reports volume)\n  endif()\n\n  if(WITH_OPENVDB)\n    list(APPEND render_tests openvdb)\n  endif()\n\n  if(WITH_OPENIMAGEDENOISE)\n    list(APPEND render_tests denoise)\n  endif()\n\n  if(WITH_GPU_RENDER_TESTS)\n    list(APPEND render_tests grease_pencil)\n  endif()\n\n  list(SORT render_tests)\n\n  # ... (additional configuration for Cycles, Eevee Next, Workbench, Overlay, and Hydra Storm)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx and Documentation Dependencies for Blender\nDESCRIPTION: This requirements file lists all the Python packages needed to build Blender's documentation. It includes Sphinx 7.4.7 as the main documentation generator, its critical dependencies with pinned versions, the Furo theme package to match the official documentation style, and utility packages like sphinx-copybutton for improved user experience.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nsphinx==7.4.7\n\n# Sphinx dependencies that are important\nJinja2==3.1.4\nPygments==2.18.0\ndocutils==0.21.2\nsnowballstemmer==2.2.0\nrequests==2.32.3\n\n# Only needed to match the theme used for the official documentation.\n# Without this theme, the default theme will be used.\nfuro==2024.8.6\nsphinx-basic-ng==1.0.0b2\n\n# Show a copy button (convenience only).\nsphinx-copybutton==0.5.2\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Python Extensions\nDESCRIPTION: Lists all source files (.cc and .hh) that comprise the Python extension library\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  bgl.cc\n  bl_math_py_api.cc\n  blf_py_api.cc\n  bpy_threads.cc\n  idprop_py_api.cc\n  idprop_py_ui_api.cc\n  imbuf_py_api.cc\n  py_capi_rna.cc\n  py_capi_utils.cc\n\n  bgl.hh\n  bl_math_py_api.hh\n  blf_py_api.hh\n  idprop_py_api.hh\n  idprop_py_ui_api.hh\n  imbuf_py_api.hh\n  py_capi_rna.hh\n  py_capi_utils.hh\n\n  # header-only\n  python_compat.hh\n  python_utildefines.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Input and Installation Configuration\nDESCRIPTION: Configures input device support (IME, NDOF) and installation options including portable installation and Python integration settings.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 OR APPLE OR ((UNIX AND (NOT HAIKU)) AND WITH_GHOST_WAYLAND))\n  option(WITH_INPUT_IME \"Enable Input Method Editor (IME) for complex Asian character input\" ON)\nelse()\n  set(WITH_INPUT_IME OFF)\nendif()\noption(WITH_INPUT_NDOF \"Enable NDOF input devices (SpaceNavigator and friends)\" ON)\nif(UNIX AND (NOT APPLE OR WITH_PYTHON_MODULE))\n  option(WITH_INSTALL_PORTABLE \"\\\nInstall redistributable runtime, otherwise install into CMAKE_INSTALL_PREFIX\"\n    ON\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extending Python Module Search Path in Blender\nDESCRIPTION: This code extends Python's module search path to include the directory of the current Blender file, then imports and executes a module from that directory.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\nimport bpy\n\nblend_dir = os.path.dirname(bpy.data.filepath)\nif blend_dir not in sys.path:\n   sys.path.append(blend_dir)\n\nimport myscript\nimport importlib\nimportlib.reload(myscript)\nmyscript.main()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Window Manager in CMake\nDESCRIPTION: Lists all the source files (.cc) and header files (.hh) that are part of the window manager component, including gizmo and message bus functionalities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/windowmanager/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/wm.cc\n  intern/wm_cursors.cc\n  # ... (truncated for brevity)\n  message_bus/intern/wm_message_bus_static.cc\n\n  WM_api.hh\n  WM_keymap.hh\n  # ... (truncated for brevity)\n  message_bus/wm_message_bus.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Sequencer in CMake\nDESCRIPTION: Lists all source files (both headers and implementation files) that are part of the Blender sequencer library, including various effects and utility functions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/sequencer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  SEQ_add.hh\n  SEQ_animation.hh\n  SEQ_channels.hh\n  SEQ_connect.hh\n  SEQ_edit.hh\n  SEQ_effects.hh\n  SEQ_iterator.hh\n  SEQ_modifier.hh\n  SEQ_offscreen.hh\n  SEQ_prefetch.hh\n  SEQ_proxy.hh\n  SEQ_relations.hh\n  SEQ_render.hh\n  SEQ_retiming.hh\n  SEQ_select.hh\n  SEQ_sequencer.hh\n  SEQ_sound.hh\n  SEQ_thumbnail_cache.hh\n  SEQ_time.hh\n  SEQ_transform.hh\n  SEQ_utils.hh\n\n  intern/animation.cc\n  intern/channels.cc\n  intern/disk_cache.cc\n  intern/disk_cache.hh\n  intern/effects/effects.cc\n  intern/effects/effects.hh\n  intern/effects/vse_effect_add_sub_mul.cc\n  intern/effects/vse_effect_adjustment.cc\n  intern/effects/vse_effect_blend.cc\n  intern/effects/vse_effect_cross.cc\n  intern/effects/vse_effect_gaussian_blur.cc\n  intern/effects/vse_effect_glow.cc\n  intern/effects/vse_effect_multi_camera.cc\n  intern/effects/vse_effect_solid_color.cc\n  intern/effects/vse_effect_speed.cc\n  intern/effects/vse_effect_text.cc\n  intern/effects/vse_effect_transform.cc\n  intern/effects/vse_effect_wipe.cc\n  intern/image_cache.cc\n  intern/image_cache.hh\n  intern/iterator.cc\n  intern/media_presence.cc\n  intern/modifier.cc\n  intern/multiview.cc\n  intern/multiview.hh\n  intern/prefetch.cc\n  intern/prefetch.hh\n  intern/proxy.cc\n  intern/proxy.hh\n  intern/proxy_job.cc\n  intern/render.cc\n  intern/render.hh\n  intern/sequencer.cc\n  intern/sequencer.hh\n  intern/sound.cc\n  intern/strip_add.cc\n  intern/strip_connect.cc\n  intern/strip_edit.cc\n  intern/strip_lookup.cc\n  intern/strip_relations.cc\n  intern/strip_retiming.cc\n  intern/strip_select.cc\n  intern/strip_time.cc\n  intern/strip_time.hh\n  intern/strip_transform.cc\n  intern/thumbnail_cache.cc\n  intern/utils.cc\n  intern/utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Blender Draw Library and Test Suite\nDESCRIPTION: Finalizes the Blender draw library configuration and sets up the test suite when GPU draw tests are enabled. Creates the main draw library and configures a test suite with appropriate include paths and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_draw \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::draw ALIAS bf_draw)\n\n\nif(WITH_GTESTS)\n  if(WITH_GPU_DRAW_TESTS)\n    set(TEST_SRC\n      tests/draw_pass_test.cc\n      tests/draw_testing.cc\n      tests/eevee_test.cc\n\n      tests/draw_testing.hh\n    )\n    set(TEST_INC\n      ../../../intern/ghost\n      ../gpu/tests\n    )\n    set(TEST_LIB\n      gpu_tests\n    )\n    blender_add_test_suite_lib(draw \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing TBB Runtime Libraries\nDESCRIPTION: Configures installation of Intel Threading Building Blocks (TBB) runtime libraries, including optional malloc proxy components for both debug and release builds.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${LIBDIR}/tbb/bin/tbb12.dll)\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbb12.dll\n    RELEASE\n  )\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbb12_debug.dll\n    DEBUG\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Variables in CMake\nDESCRIPTION: Sets up test directory paths and creates required test output directory. Defines the base Blender executable command with debug flags and system scripts path.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/view_layer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SRC_DIR ${CMAKE_SOURCE_DIR}/tests/data)\nset(TEST_OUT_DIR ${CMAKE_BINARY_DIR}/tests)\n\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${TEST_OUT_DIR})\n\nset(TEST_BLENDER_EXE\n  $<TARGET_FILE:blender>\n  --background\n  --factory-startup\n  --debug-memory\n  --debug-exit-on-error\n  --env-system-scripts ${CMAKE_SOURCE_DIR}/scripts\n)\n```\n\n----------------------------------------\n\nTITLE: Compile-time Evaluation with C++20 constexpr in fast_float\nDESCRIPTION: This snippet shows how to use C++20's constexpr features to evaluate the fast_float::from_chars function at compile-time. It includes an example function that parses a string and returns a double value directly.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n\"// consteval forces compile-time evaluation of the function in C++20.\\nconsteval double parse(std::string_view input) {\\n  double result;\\n  auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\\n  if(answer.ec != std::errc()) { return -1.0; }\\n  return result;\\n}\\n\\n// This function should compile to a function which\\n// merely returns 3.1415.\\nconstexpr double constexptest() {\\n  return parse(\\\"3.1415 input\\\");\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameter Values - OpenGL - Python\nDESCRIPTION: The glGet function retrieves the value or values of specified parameters in OpenGL, which can include various types of data depending on the parameter query.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGet (pname, param):\n\n   B{glGetBooleanv, glGetfloatv, glGetFloatv, glGetIntegerv}\n\n   Return the value or values of a selected parameter\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGet.xhtml>`__\n\n   :type pname: Enumerated constant\n   :arg pname: Specifies the parameter value to be returned.\n   :type param: Depends on function prototype.\n   :arg param: Returns the value or values of the specified parameter.\n```\n\n----------------------------------------\n\nTITLE: Building Blender Dependencies on Windows with Visual Studio 2019\nDESCRIPTION: Windows batch script that configures build environment variables and executes dependency building for Blender. Sets up Visual Studio 2019, ROCM/HIP paths, Perl environment, and runs the build_deps.cmd script.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/windows/vmbuild.cmd.txt#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n@echo off\nREM ###########################################################################\nREM #\nREM # This script assumes the machine has been prepared with the vmprep.cmd \nREM # script and will build the dependencies in the c:\\db folder \nREM # \nREM # If you find this script with a .txt extention, DO NOT RUN IT! vmprep will \nREM # Download this and give it the right extention. \nREM ###########################################################################\nset CMAKE_GENERATOR_INSTANCE=c:\\vs2019bt\\\nset CMAKE_GENERATOR=Visual Studio 16 2019\nset NODEBUG=\nset TMPDIR=c:\\t\\\nset ROCM_PATH=c:\\tools\\rocm\\5.7\nset HIP_PATH=c:\\tools\\rocm\\5.7\nset PERL=c:\\db\\build\\downloads\\perl\\perl\\bin\\perl.exe\nset path=%path%;c:\\db\\build\\downloads\\perl\\perl\\bin\\;\nif not exist c:\\db\\ (\n  mkdir c:\\db\n)\ncd /d c:\\db\ncall c:\\blendergit\\blender\\build_files\\build_environment\\windows\\build_deps.cmd 2019 x64 release\n```\n\n----------------------------------------\n\nTITLE: Configuring library dependencies for Audaspace in CMake\nDESCRIPTION: Establishes the library dependencies for Audaspace integration, with conditional logic for system vs. bundled Audaspace libraries. Handles both the C and Python interfaces depending on build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/audaspace/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n\nif(NOT WITH_SYSTEM_AUDASPACE)\n  list(APPEND LIB\n    audaspace\n  )\nelse()\n  list(APPEND LIB\n    ${AUDASPACE_C_LIBRARIES}\n  )\n  if(WITH_PYTHON AND WITH_PYTHON_NUMPY)\n    list(APPEND LIB\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deep Data Path Access in Blender Python API\nDESCRIPTION: Examples of accessing nested properties in Blender data structures. Shows how to reach properties like render settings and geometry data using dot notation.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.data.scenes[0].render.resolution_percentage\n100\n>>> bpy.data.scenes[0].objects[\"Torus\"].data.vertices[0].co.x\n1.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Light Source Parameter Values - OpenGL - Python\nDESCRIPTION: The glGetLight function retrieves parameter values from a light source in the OpenGL context, enabling detailed control and customization of lighting effects in the scene.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetLight (light, pname, params):\n\n   B{glGetLightfv and glGetLightiv}\n\n   Return light source parameter values\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetLight.xhtml>`__\n\n   :type light: Enumerated constant\n   :arg light: Specifies a light source. The number of possible lights depends on the\n      implementation, but at least eight lights are supported. They are identified by symbolic\n      names of the form GL_LIGHTi where 0 < i < GL_MAX_LIGHTS.\n   :type pname: Enumerated constant\n   :arg pname: Specifies a light source parameter for light.\n   :type params:  :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg params: Returns the requested data.\n```\n\n----------------------------------------\n\nTITLE: Forcing Updates After Property Changes in Blender Python\nDESCRIPTION: Example showing how to ensure property changes are evaluated immediately by calling view_layer.update(), which is necessary when access to the updated values is required within the same script execution.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object.location = 1, 2, 3\nbpy.context.view_layer.update()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support for Blender Modifiers\nDESCRIPTION: Adds OpenVDB support to the modifiers module if Blender is built with OpenVDB, including appropriate include directories and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing GLSL Shader Source Files in CMake\nDESCRIPTION: This snippet defines a list of GLSL shader source files used in Blender's rendering system. It includes various shader types such as vertex, fragment, and utility shaders for different rendering tasks.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_SRC\n  GPU_shader_shared.hh\n  shaders/opengl/glsl_shader_defines.glsl\n\n  shaders/gpu_shader_depth_only_frag.glsl\n  shaders/gpu_shader_uniform_color_frag.glsl\n  shaders/gpu_shader_checker_frag.glsl\n  shaders/gpu_shader_diag_stripes_frag.glsl\n  shaders/gpu_shader_simple_lighting_frag.glsl\n  shaders/gpu_shader_flat_color_frag.glsl\n  shaders/gpu_shader_2D_vert.glsl\n  shaders/gpu_shader_2D_area_borders_vert.glsl\n  shaders/gpu_shader_2D_area_borders_frag.glsl\n  shaders/gpu_shader_2D_widget_base_vert.glsl\n  shaders/gpu_shader_2D_widget_base_frag.glsl\n  shaders/gpu_shader_2D_widget_shadow_vert.glsl\n  shaders/gpu_shader_2D_widget_shadow_frag.glsl\n  shaders/gpu_shader_2D_node_socket_frag.glsl\n  shaders/gpu_shader_2D_node_socket_vert.glsl\n  shaders/gpu_shader_2D_nodelink_frag.glsl\n  shaders/gpu_shader_2D_nodelink_vert.glsl\n  shaders/gpu_shader_2D_line_dashed_frag.glsl\n  shaders/gpu_shader_2D_image_vert.glsl\n  shaders/gpu_shader_2D_image_rect_vert.glsl\n  shaders/gpu_shader_icon_multi_vert.glsl\n  shaders/gpu_shader_icon_frag.glsl\n  shaders/gpu_shader_icon_vert.glsl\n  shaders/gpu_shader_image_frag.glsl\n  shaders/gpu_shader_image_desaturate_frag.glsl\n  shaders/gpu_shader_image_overlays_merge_frag.glsl\n  shaders/gpu_shader_image_overlays_stereo_merge_frag.glsl\n  shaders/gpu_shader_image_shuffle_color_frag.glsl\n  shaders/gpu_shader_image_color_frag.glsl\n  shaders/gpu_shader_3D_image_vert.glsl\n  shaders/gpu_shader_3D_vert.glsl\n  shaders/gpu_shader_3D_normal_vert.glsl\n  shaders/gpu_shader_3D_flat_color_vert.glsl\n  shaders/gpu_shader_3D_line_dashed_uniform_color_vert.glsl\n  shaders/gpu_shader_3D_polyline_frag.glsl\n  shaders/gpu_shader_3D_polyline_vert.glsl\n  shaders/gpu_shader_3D_smooth_color_vert.glsl\n  shaders/gpu_shader_3D_smooth_color_frag.glsl\n  shaders/gpu_shader_3D_clipped_uniform_color_vert.glsl\n\n  shaders/gpu_shader_point_uniform_color_aa_frag.glsl\n  shaders/gpu_shader_point_uniform_color_outline_aa_frag.glsl\n  shaders/gpu_shader_point_varying_color_frag.glsl\n  shaders/gpu_shader_3D_point_varying_size_varying_color_vert.glsl\n  shaders/gpu_shader_3D_point_uniform_size_aa_vert.glsl\n  shaders/gpu_shader_2D_point_varying_size_varying_color_vert.glsl\n  shaders/gpu_shader_2D_point_uniform_size_aa_vert.glsl\n  shaders/gpu_shader_2D_point_uniform_size_outline_aa_vert.glsl\n\n  shaders/gpu_shader_text_vert.glsl\n  shaders/gpu_shader_text_frag.glsl\n  shaders/gpu_shader_keyframe_shape_vert.glsl\n  shaders/gpu_shader_keyframe_shape_frag.glsl\n\n  shaders/gpu_shader_sequencer_strips_vert.glsl\n  shaders/gpu_shader_sequencer_strips_frag.glsl\n  shaders/gpu_shader_sequencer_thumbs_vert.glsl\n  shaders/gpu_shader_sequencer_thumbs_frag.glsl\n\n  shaders/gpu_shader_codegen_lib.glsl\n\n  shaders/common/gpu_shader_attribute_load_lib.glsl\n  shaders/common/gpu_shader_bicubic_sampler_lib.glsl\n  shaders/common/gpu_shader_common_color_ramp.glsl\n  shaders/common/gpu_shader_common_color_utils.glsl\n  shaders/common/gpu_shader_common_curves.glsl\n  shaders/common/gpu_shader_common_hash.glsl\n  shaders/common/gpu_shader_common_math.glsl\n  shaders/common/gpu_shader_common_math_utils.glsl\n  shaders/common/gpu_shader_common_mix_rgb.glsl\n  shaders/common/gpu_shader_debug_gradients_lib.glsl\n  shaders/common/gpu_shader_fullscreen_vert.glsl\n  shaders/common/gpu_shader_index_load_lib.glsl\n  shaders/common/gpu_shader_math_base_lib.glsl\n  shaders/common/gpu_shader_math_fast_lib.glsl\n  shaders/common/gpu_shader_math_matrix_lib.glsl\n  shaders/common/gpu_shader_math_rotation_lib.glsl\n  shaders/common/gpu_shader_math_vector_lib.glsl\n  shaders/common/gpu_shader_print_lib.glsl\n  shaders/common/gpu_shader_sequencer_lib.glsl\n  shaders/common/gpu_shader_shared_exponent_lib.glsl\n  shaders/common/gpu_shader_smaa_lib.glsl\n  shaders/common/gpu_shader_test_lib.glsl\n  shaders/common/gpu_shader_utildefines_lib.glsl\n\n  shaders/material/gpu_shader_material_add_shader.glsl\n  shaders/material/gpu_shader_material_ambient_occlusion.glsl\n  shaders/material/gpu_shader_material_attribute.glsl\n  shaders/material/gpu_shader_material_background.glsl\n  shaders/material/gpu_shader_material_bevel.glsl\n  shaders/material/gpu_shader_material_wavelength.glsl\n  shaders/material/gpu_shader_material_blackbody.glsl\n  shaders/material/gpu_shader_material_bright_contrast.glsl\n  shaders/material/gpu_shader_material_bump.glsl\n  shaders/material/gpu_shader_material_camera.glsl\n  shaders/material/gpu_shader_material_clamp.glsl\n  shaders/material/gpu_shader_material_combine_color.glsl\n  shaders/material/gpu_shader_material_combine_hsv.glsl\n  shaders/material/gpu_shader_material_combine_rgb.glsl\n  shaders/material/gpu_shader_material_combine_xyz.glsl\n  shaders/material/gpu_shader_material_diffuse.glsl\n  shaders/material/gpu_shader_material_displacement.glsl\n  shaders/material/gpu_shader_material_eevee_specular.glsl\n  shaders/material/gpu_shader_material_emission.glsl\n  shaders/material/gpu_shader_material_fractal_noise.glsl\n  shaders/material/gpu_shader_material_fractal_voronoi.glsl\n  shaders/material/gpu_shader_material_fresnel.glsl\n  shaders/material/gpu_shader_material_gamma.glsl\n  shaders/material/gpu_shader_material_geometry.glsl\n  shaders/material/gpu_shader_material_glass.glsl\n  shaders/material/gpu_shader_material_glossy.glsl\n  shaders/material/gpu_shader_material_hair_info.glsl\n  shaders/material/gpu_shader_material_hair.glsl\n  shaders/material/gpu_shader_material_holdout.glsl\n  shaders/material/gpu_shader_material_hue_sat_val.glsl\n  shaders/material/gpu_shader_material_invert.glsl\n  shaders/material/gpu_shader_material_layer_weight.glsl\n  shaders/material/gpu_shader_material_light_falloff.glsl\n  shaders/material/gpu_shader_material_light_path.glsl\n  shaders/material/gpu_shader_material_mapping.glsl\n  shaders/material/gpu_shader_material_map_range.glsl\n  shaders/material/gpu_shader_material_metallic.glsl\n  shaders/material/gpu_shader_material_mix_color.glsl\n  shaders/material/gpu_shader_material_mix_shader.glsl\n  shaders/material/gpu_shader_material_noise.glsl\n  shaders/material/gpu_shader_material_normal.glsl\n  shaders/material/gpu_shader_material_normal_map.glsl\n  shaders/material/gpu_shader_material_object_info.glsl\n  shaders/material/gpu_shader_material_output_aov.glsl\n  shaders/material/gpu_shader_material_output_material.glsl\n  shaders/material/gpu_shader_material_output_world.glsl\n  shaders/material/gpu_shader_material_particle_info.glsl\n  shaders/material/gpu_shader_material_point_info.glsl\n  shaders/material/gpu_shader_material_principled.glsl\n  shaders/material/gpu_shader_material_ray_portal.glsl\n  shaders/material/gpu_shader_material_refraction.glsl\n  shaders/material/gpu_shader_material_rgb_to_bw.glsl\n  shaders/material/gpu_shader_material_separate_color.glsl\n  shaders/material/gpu_shader_material_separate_hsv.glsl\n  shaders/material/gpu_shader_material_separate_rgb.glsl\n  shaders/material/gpu_shader_material_separate_xyz.glsl\n  shaders/material/gpu_shader_material_set.glsl\n  shaders/material/gpu_shader_material_shader_to_rgba.glsl\n  shaders/material/gpu_shader_material_sheen.glsl\n  shaders/material/gpu_shader_material_squeeze.glsl\n  shaders/material/gpu_shader_material_subsurface_scattering.glsl\n  shaders/material/gpu_shader_material_tangent.glsl\n  shaders/material/gpu_shader_material_tex_brick.glsl\n  shaders/material/gpu_shader_material_tex_checker.glsl\n  shaders/material/gpu_shader_material_tex_environment.glsl\n  shaders/material/gpu_shader_material_tex_gabor.glsl\n  shaders/material/gpu_shader_material_tex_gradient.glsl\n  shaders/material/gpu_shader_material_tex_image.glsl\n  shaders/material/gpu_shader_material_tex_magic.glsl\n  shaders/material/gpu_shader_material_tex_noise.glsl\n  shaders/material/gpu_shader_material_tex_sky.glsl\n  shaders/material/gpu_shader_material_texture_coordinates.glsl\n  shaders/material/gpu_shader_material_tex_voronoi.glsl\n  shaders/material/gpu_shader_material_tex_wave.glsl\n  shaders/material/gpu_shader_material_tex_white_noise.glsl\n  shaders/material/gpu_shader_material_toon.glsl\n  shaders/material/gpu_shader_material_transform_utils.glsl\n  shaders/material/gpu_shader_material_translucent.glsl\n  shaders/material/gpu_shader_material_transparent.glsl\n  shaders/material/gpu_shader_material_uv_map.glsl\n  shaders/material/gpu_shader_material_vector_displacement.glsl\n  shaders/material/gpu_shader_material_vector_math.glsl\n  shaders/material/gpu_shader_material_vector_rotate.glsl\n  shaders/material/gpu_shader_material_vertex_color.glsl\n  shaders/material/gpu_shader_material_volume_absorption.glsl\n  shaders/material/gpu_shader_material_volume_principled.glsl\n  shaders/material/gpu_shader_material_volume_scatter.glsl\n  shaders/material/gpu_shader_material_voronoi.glsl\n  shaders/material/gpu_shader_material_wireframe.glsl\n  shaders/material/gpu_shader_material_world_normals.glsl\n\n  shaders/gpu_shader_gpencil_stroke_vert.glsl\n  shaders/gpu_shader_gpencil_stroke_frag.glsl\n\n  shaders/gpu_shader_display_fallback_vert.glsl\n  shaders/gpu_shader_display_fallback_frag.glsl\n\n  shaders/gpu_shader_cfg_world_clip_lib.glsl\n  shaders/gpu_shader_colorspace_lib.glsl\n\n  shaders/gpu_shader_index_2d_array_points.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Forcing Execution of GL Commands - OpenGL - Python\nDESCRIPTION: The glFlush function forces the execution of OpenGL commands in finite time, ensuring that all commands issued before glFlush are executed.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glFlush():\n\n   Force Execution of GL commands in finite time\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glFlush.xhtml>`__\n```\n\n----------------------------------------\n\nTITLE: Including Atomic Library in CMake for Cycles\nDESCRIPTION: Adds include directories for the atomic library based on whether it's a standalone repository or not.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(CYCLES_STANDALONE_REPOSITORY)\n  include_directories(../third_party/atomic)\nelse()\n  include_directories(../atomic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Target Destinations in CMake\nDESCRIPTION: Defines platform-specific target destinations for Blender, including version directories, libraries, and Python site-packages. Handles different scenarios for Unix, Windows, and macOS builds.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(WITH_PYTHON_MODULE)\n    if(WITH_INSTALL_PORTABLE)\n      set(TARGETDIR_BPY \"bpy\")\n      set(TARGETDIR_VER \"bpy/${BLENDER_VERSION}\")\n      set(TARGETDIR_LIB \"bpy/lib\")\n    else()\n      set(TARGETDIR_BPY ${PYTHON_SITE_PACKAGES}/bpy)\n      set(TARGETDIR_VER ${PYTHON_SITE_PACKAGES}/bpy/${BLENDER_VERSION})\n      set(TARGETDIR_LIB ${PYTHON_SITE_PACKAGES}/bpy/lib)\n    endif()\n  else()\n    if(WITH_INSTALL_PORTABLE)\n      set(TARGETDIR_VER \"${BLENDER_VERSION}\")\n      set(TARGETDIR_TEXT \".\")\n      set(TARGETDIR_LIB \"lib\")\n    else()\n      set(TARGETDIR_VER \"share/blender/${BLENDER_VERSION}\")\n      set(TARGETDIR_TEXT \"share/doc/blender\")\n    endif()\n  endif()\n  set(TARGETDIR_SITE_PACKAGES \"${TARGETDIR_VER}/python/lib/python${PYTHON_VERSION}/site-packages\")\nelseif(WIN32)\n  if(WITH_PYTHON_MODULE)\n    set(TARGETDIR_BPY ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy)\n    set(TARGETDIR_VER ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy/${BLENDER_VERSION})\n    set(TARGETDIR_LIB ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy)\n    set(TARGETDIR_EXE ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy)\n  else()\n    set(TARGETDIR_VER \"${BLENDER_VERSION}\")\n    set(TARGETDIR_TEXT \".\")\n    set(TARGETDIR_LIB \"blender.shared\")\n    set(TARGETDIR_EXE \".\")\n  endif()\n  set(TARGETDIR_SITE_PACKAGES \"${TARGETDIR_VER}/python/lib/site-packages\")\nelseif(APPLE)\n  if(WITH_PYTHON_MODULE)\n    if(WITH_INSTALL_PORTABLE)\n      set(TARGETDIR_BPY \"bpy\")\n      set(TARGETDIR_VER \"bpy/${BLENDER_VERSION}\")\n      set(TARGETDIR_LIB \"bpy/lib\")\n    else()\n      set(TARGETDIR_BPY ${PYTHON_SITE_PACKAGES}/bpy)\n      set(TARGETDIR_VER ${PYTHON_SITE_PACKAGES}/bpy/${BLENDER_VERSION})\n      set(TARGETDIR_LIB ${PYTHON_SITE_PACKAGES}/bpy/lib)\n    endif()\n  else()\n    set(TARGETDIR_VER \"Blender.app/Contents/Resources/${BLENDER_VERSION}\")\n    set(TARGETDIR_LIB \"Blender.app/Contents/Resources/lib\")\n    set(TARGETDIR_TEXT \"Blender.app/Contents/Resources/text\")\n  endif()\n  set(TARGETDIR_SITE_PACKAGES \"${TARGETDIR_VER}/python/lib/python${PYTHON_VERSION}/site-packages\")\n  set_target_properties(blender PROPERTIES BUILD_WITH_INSTALL_RPATH true)\n  if(WITH_BLENDER_THUMBNAILER)\n    set_target_properties(blender-thumbnailer PROPERTIES BUILD_WITH_INSTALL_RPATH true)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Settings in CMake\nDESCRIPTION: Defines options for test execution behavior including batched testing and single binary compilation.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_TESTS_BATCHED \"\\\nRun multiple tests in a single Blender invocation, for faster test execution\"\n  ON\n)\nmark_as_advanced(WITH_TESTS_BATCHED)\n\noption(WITH_TESTS_SINGLE_BINARY \"\\\nLink GTest tests into a single binary. \\\nFor faster overall build and less disk space, but slower individual test build\"\n  ON\n)\nmark_as_advanced(WITH_TESTS_SINGLE_BINARY)\n```\n\n----------------------------------------\n\nTITLE: Creating New UI Block\nDESCRIPTION: Creates a new UI block and links it to a Blender window area. The block is identified by a unique name and includes settings for drawing type and font.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/interface_API.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nuiBlock *block = uiNewBlock(&curarea->uiblocks, \"stuff\", UI_EMBOSSX, UI_HELV, curarea->win);\n```\n\n----------------------------------------\n\nTITLE: Defining Depsgraph Source Files\nDESCRIPTION: Comprehensive list of source files for the depsgraph library including builders, debug utilities, evaluation components, and node implementations\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/depsgraph/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/builder/deg_builder.cc\n  intern/builder/deg_builder_cache.cc\n  [... truncated for brevity ...]\n  intern/depsgraph_type.hh\n  intern/depsgraph_update.hh\n)\n```\n\n----------------------------------------\n\nTITLE: OpenGL Transform and Viewport Functions\nDESCRIPTION: Function declarations for transformation and viewport operations including translation and viewport setting.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\ndef glTranslate(x, y, z):\n    \"\"\"Multiply the current matrix by a translation matrix\"\"\"\n    pass\n\ndef glViewport(x, y, width, height):\n    \"\"\"Set the viewport\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for STL Module in Blender with CMake\nDESCRIPTION: Specifies the library dependencies for the STL module, including Blender's internal libraries like blenkernel, blenlib, bmesh, and external dependencies. These libraries provide necessary functionality for mesh manipulation and data handling.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/stl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Build Settings in CMake\nDESCRIPTION: Defines basic build configuration variables for OpenVDB integration, including include directories, source files, and library dependencies. Conditionally adds OpenVDB-specific settings when WITH_OPENVDB is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/openvdb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  openvdb_capi.h\n  openvdb_fwd.hh\n)\n\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n)\n\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n\n  list(APPEND SRC\n    openvdb_capi.cc\n  )\n\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n\nblender_add_lib(bf_intern_openvdb \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Windows-Specific App IDs for Blender\nDESCRIPTION: Defines Windows-specific application IDs and friendly names using the Blender version information for file registration and UI display.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  add_definitions(\n    # This is the app ID used for file registration, given it's used from several modules\n    # there really is no nice way to get this information consistent without a global define.\n    -DBLENDER_WIN_APPID=\"blender.${BLENDER_VERSION_MAJOR}.${BLENDER_VERSION_MINOR}\"\n    # This is the name that will be shown in the taskbar and OpenWith windows UI\n    -DBLENDER_WIN_APPID_FRIENDLY_NAME=\"Blender ${BLENDER_VERSION_MAJOR}.${BLENDER_VERSION_MINOR}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in CMake\nDESCRIPTION: Sets up initial test directory paths and creates required test output directories\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SRC_DIR ${CMAKE_SOURCE_DIR}/tests/data)\nset(TEST_PYTHON_DIR ${CMAKE_SOURCE_DIR}/tests/python)\nset(TEST_OUT_DIR ${CMAKE_BINARY_DIR}/tests)\n\nfile(MAKE_DIRECTORY ${TEST_OUT_DIR})\nfile(MAKE_DIRECTORY ${TEST_OUT_DIR}/io_tests)\nfile(MAKE_DIRECTORY ${TEST_OUT_DIR}/blendfile_io)\n```\n\n----------------------------------------\n\nTITLE: Including Standard Library Dependencies in CMake\nDESCRIPTION: Includes modules for building common library dependencies like SSL, compression libraries, and basic image/audio format libraries. These are foundational libraries used by many Blender features.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/ssl.cmake)\ninclude(cmake/zlib.cmake)\ninclude(cmake/zstd.cmake)\ninclude(cmake/openal.cmake)\ninclude(cmake/png.cmake)\ninclude(cmake/jpeg.cmake)\ninclude(cmake/blosc.cmake)\ninclude(cmake/pthreads.cmake)\ninclude(cmake/deflate.cmake)\ninclude(cmake/imath.cmake)\ninclude(cmake/openexr.cmake)\ninclude(cmake/brotli.cmake)\ninclude(cmake/freetype.cmake)\ninclude(cmake/epoxy.cmake)\n```\n\n----------------------------------------\n\nTITLE: Compiler Sanitizer Configuration\nDESCRIPTION: Sets up Address Sanitizer (ASAN) compiler and linker flags for debug builds. Handles platform-specific configurations for ASAN integration.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Release\")\n  if(WITH_COMPILER_ASAN)\n    if(NOT APPLE)\n      string(APPEND CMAKE_C_FLAGS_DEBUG \" ${COMPILER_ASAN_CFLAGS}\")\n      string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO \" ${COMPILER_ASAN_CFLAGS}\")\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${COMPILER_ASAN_CXXFLAGS}\")\n      string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" ${COMPILER_ASAN_CXXFLAGS}\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ITASC Library Build in CMake\nDESCRIPTION: CMake configuration that sets up the build for Blender's ITASC library. Defines source files including core ITASC components and KDL implementations, headers, and dependencies. Uses Eigen as a public dependency and adds the library to Blender's build system.\nSOURCE: https://github.com/blender/blender/blob/main/intern/itasc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nremove_strict_flags()\nset(INC\n\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  Armature.cpp\n  Cache.cpp\n  ConstraintSet.cpp\n  ControlledObject.cpp\n  CopyPose.cpp\n  Distance.cpp\n  FixedObject.cpp\n  MovingFrame.cpp\n  Scene.cpp\n  UncontrolledObject.cpp\n  WDLSSolver.cpp\n  WSDLSSolver.cpp\n  WorldObject.cpp\n  eigen_types.cpp\n\n  kdl/chain.cpp\n  kdl/chainfksolverpos_recursive.cpp\n  kdl/chainjnttojacsolver.cpp\n  kdl/frameacc.cpp\n  kdl/frames.cpp\n  kdl/frames_io.cpp\n  kdl/framevel.cpp\n  kdl/inertia.cpp\n  kdl/jacobian.cpp\n  kdl/jntarray.cpp\n  kdl/jntarrayacc.cpp\n  kdl/jntarrayvel.cpp\n  kdl/joint.cpp\n  kdl/kinfam_io.cpp\n  kdl/segment.cpp\n  kdl/tree.cpp\n  kdl/treefksolverpos_recursive.cpp\n  kdl/treejnttojacsolver.cpp\n  kdl/utilities/error_stack.cpp\n  kdl/utilities/utility.cpp\n  kdl/utilities/utility_io.cpp\n\n  Armature.hpp\n  Cache.hpp\n  ConstraintSet.hpp\n  ControlledObject.hpp\n  CopyPose.hpp\n  Distance.hpp\n  FixedObject.hpp\n  MovingFrame.hpp\n  Object.hpp\n  Scene.hpp\n  Solver.hpp\n  UncontrolledObject.hpp\n  WDLSSolver.hpp\n  WSDLSSolver.hpp\n  WorldObject.hpp\n  eigen_types.hpp\n  kdl/chain.hpp\n  kdl/chainfksolver.hpp\n  kdl/chainfksolverpos_recursive.hpp\n  kdl/chainjnttojacsolver.hpp\n  kdl/frameacc.hpp\n  kdl/frames.hpp\n  kdl/frames_io.hpp\n  kdl/framevel.hpp\n  kdl/inertia.hpp\n  kdl/jacobian.hpp\n  kdl/jntarray.hpp\n  kdl/jntarrayacc.hpp\n  kdl/jntarrayvel.hpp\n  kdl/joint.hpp\n  kdl/kinfam_io.hpp\n  kdl/segment.hpp\n  kdl/tree.hpp\n  kdl/treefksolver.hpp\n  kdl/treefksolverpos_recursive.hpp\n  kdl/treejnttojacsolver.hpp\n  kdl/utilities/error.h\n  kdl/utilities/error_stack.h\n  kdl/utilities/kdl-config.h\n  kdl/utilities/rall1d.h\n  kdl/utilities/rall2d.h\n  kdl/utilities/svd_eigen_HH.hpp\n  kdl/utilities/traits.h\n  kdl/utilities/utility.h\n  kdl/utilities/utility_io.h\n\n  kdl/frameacc.inl\n  kdl/frames.inl\n  kdl/framevel.inl\n)\n\nset(LIB\n  PUBLIC bf::dependencies::eigen\n)\n\nblender_add_lib(bf_intern_itasc \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Manipulating Bones in Object or Pose-Mode in Blender Python\nDESCRIPTION: Shows how to access and modify bone properties in Object or Pose-Mode. This includes setting the 'use_deform' property and accessing the tail position of a bone.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.context.active_bone\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.context.object.data.bones[\"Bone\"].use_deform = True\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> tail = myobj.data.bones[\"Bone\"].tail\n```\n\n----------------------------------------\n\nTITLE: Using Blender Native and Internal Types\nDESCRIPTION: Demonstrates working with Blender native types such as floa t, int, and their corresponding Python types. Shows how to set multiple snap targets and handle operator arguments. Internal types like bpy_struct are shown in context of accessing and manipulating Blender data-blocks and collections.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# Setting multiple snap targets.\nbpy.context.scene.tool_settings.snap_elements_base = {'VERTEX', 'EDGE'}\n\n# Passing as an operator argument for report types.\nself.report({'WARNING', 'INFO'}, \"Some message!\")\n\n>>> bpy.context.object\nbpy.data.objects['Cube']\n\n>>> C.scene.objects\nbpy.data.scenes['Scene'].objects\n\n```\n\n----------------------------------------\n\nTITLE: OpenGL Shader Program Functions\nDESCRIPTION: Function declarations for shader program management including program usage, validation, linking and shader compilation.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\ndef glUseProgram(program):\n    \"\"\"Installs a program object as part of current rendering state\"\"\"\n    pass\n\ndef glValidateProgram(program):\n    \"\"\"Validates a program object\"\"\"\n    pass\n\ndef glLinkProgram(program):\n    \"\"\"Links a program object\"\"\"\n    pass\n\ndef glCompileShader(shader):\n    \"\"\"Compiles a shader object\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring GMP Support in Blender Geometry Module\nDESCRIPTION: Conditionally adds support for GMP (GNU Multiple Precision Arithmetic Library) by including the necessary directories, libraries, and defining the appropriate preprocessor macro.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GMP Support for Blender Modifiers\nDESCRIPTION: Adds GNU Multiple Precision Arithmetic Library (GMP) support to the modifiers module if Blender is built with GMP.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenGL Function - glIsTexture\nDESCRIPTION: Determines if the given value corresponds to a valid texture name. Takes an unsigned integer parameter representing the potential texture name.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nglIsTexture(texture)\n```\n\n----------------------------------------\n\nTITLE: Enabling NanoVDB Support in CMake for Cycles\nDESCRIPTION: Adds compilation flag and include directory for NanoVDB support when WITH_NANOVDB is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_NANOVDB)\n  add_definitions(-DWITH_NANOVDB)\n  include_directories(\n    SYSTEM\n    ${NANOVDB_INCLUDE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Python DLLs and Dependencies\nDESCRIPTION: Configures installation of Python DLLs, executables and site-packages for both debug and release configurations. Includes handling of Python version-specific paths and exclusion of cache files.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  FILES\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}.dll\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3.dll\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python.exe\n  DESTINATION ${BLENDER_VERSION}/python/bin\n  CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n)\n```\n\n----------------------------------------\n\nTITLE: Adding XR Support to Blender Window Manager in CMake\nDESCRIPTION: Conditionally adds OpenXR support to the window manager, including additional source files and compilation definitions when XR support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/windowmanager/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\n\n  list(APPEND INC\n    xr\n  )\n\n  list(APPEND SRC\n    xr/intern/wm_xr.cc\n    # ... (truncated for brevity)\n    xr/intern/wm_xr_intern.hh\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Binary Support in CMake for Cycles\nDESCRIPTION: Sets up MSVC version limits for CUDA binary support based on the CUDA version.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_CUDA_BINARIES)\n  if(MSVC)\n    set(MAX_MSVC 1800)\n    if(${CUDA_VERSION} EQUAL \"8.0\")\n      set(MAX_MSVC 1900)\n    elseif(${CUDA_VERSION} EQUAL \"9.0\")\n      set(MAX_MSVC 1910)\n    elseif(${CUDA_VERSION} EQUAL \"9.1\")\n      set(MAX_MSVC 1911)\n    elseif(${CUDA_VERSION} VERSION_GREATER_EQUAL 10.0)\n      set(MAX_MSVC 1999)\n    endif()\n    unset(MAX_MSVC)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Blender Materials\nDESCRIPTION: This snippet illustrates how to define custom properties for Blender materials by creating a new PropertyGroup and registering it. It ensures that the properties are correctly linked to the Material type.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create new property:\n# bpy.data.materials[0].my_custom_props.my_float\nimport bpy\n\nclass MyMaterialProps(bpy.types.PropertyGroup):\n    my_float: bpy.props.FloatProperty()\n\ndef register():\n    bpy.utils.register_class(MyMaterialProps)\n    bpy.types.Material.my_custom_props: bpy.props.PointerProperty(type=MyMaterialProps)\n\ndef unregister():\n    del bpy.types.Material.my_custom_props\n    bpy.utils.unregister_class(MyMaterialProps)\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Generating Sine Sound with Audaspace in Python\nDESCRIPTION: This code generates a sine wave sound with a frequency of 440 Hz using the Audaspace library. The sound object is an audio signal description that can be played back.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsine = aud.Sound.sine(440)\n```\n\n----------------------------------------\n\nTITLE: Specifying Implementation-Specific Hints - OpenGL - Python\nDESCRIPTION: The glHint function provides a way to specify implementation-specific hints to OpenGL, which can influence the quality and speed of rendering tasks.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glHint(target, mode):\n\n   Specify implementation-specific hints\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glHint.xhtml>`__\n\n   :type target: Enumerated constant\n   :arg target: Specifies a symbolic constant indicating the behavior to be\n      controlled.\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Libraries for Cycles in CMake\nDESCRIPTION: Conditionally adds logging libraries (glog and gflags) to the build if the WITH_CYCLES_LOGGING option is enabled. This provides more extensive logging capabilities for the Cycles renderer.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_LOGGING)\n  list(APPEND LIB\n    ${GLOG_LIBRARIES}\n    ${GFLAGS_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Compositor\nDESCRIPTION: Specifies required library dependencies for the compositor module using Blender's internal library naming scheme.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blentranslation\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Python Module Test Function in CMake\nDESCRIPTION: Defines a CMake function that sets up tests for Blender's Python module integration. The function configures test execution using a specified Python interpreter and handles special cases for ASAN support on macOS. It requires TEST_PYTHON_EXE to be defined and accepts test name and script parameters.\nSOURCE: https://github.com/blender/blender/blob/main/tests/blender_as_python_module/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_blender_as_python_module_test testname testscript)\n  if(NOT TEST_PYTHON_EXE)\n    message(FATAL_ERROR \"No Python configured for running tests, set TEST_PYTHON_EXE.\")\n  endif()\n\n  add_test(\n    NAME ${testname}\n    COMMAND ${TEST_PYTHON_EXE} ${TEST_PYTHON_EXE_EXTRA_ARGS} ${testscript} ${ARGN}\n  )\n\n  # On macOS, asan library must be loaded early.\n  if(APPLE AND WITH_COMPILER_ASAN)\n    set_tests_properties(\n      ${testname}\n      PROPERTIES ENVIRONMENT DYLD_INSERT_LIBRARIES=${COMPILER_ASAN_LIBRARY}\n    )\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation and Rigging Tests in CMake for Blender\nDESCRIPTION: Defines various tests for Blender's animation and rigging systems, including armature animation, action baking, NLA strips, drivers, F-curves, and pose assets. Each test uses specific Python scripts and may include test directories.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n  bl_animation_armature\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_armature.py\n)\n\nadd_blender_test(\n  bl_animation_bake\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_bake.py\n)\n\nadd_blender_test(\n  bl_animation_nla_strip\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_nla_strip.py\n)\n\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_animation_drivers\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_drivers.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\n\n  add_blender_test(\n    bl_animation_fcurves\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_fcurves.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\n\n  add_blender_test(\n    bl_animation_action\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_action.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n    --output-dir \"${TEST_OUT_DIR}/bl_animation_action\"\n  )\n\n  add_blender_test(\n    bl_animation_keyframing\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_keyframing.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\n\n  add_blender_test(\n    bl_pose_assets\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_pose_assets.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\n\n  add_blender_test(\n    bl_rigging_symmetrize\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_rigging_symmetrize.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Core Build Infrastructure Modules in CMake\nDESCRIPTION: Includes CMake modules for compiler checking and dependency harvesting. These modules are critical for ensuring the build environment is properly configured and that built dependencies are correctly collected for Blender.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/check_compilers.cmake)\ninclude(cmake/harvest.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Paths for Blender\nDESCRIPTION: Configures CMake module paths to include Blender's custom modules and platform-specific configurations from the build_files directory.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/build_files/cmake/Modules\")\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/build_files/cmake/platform\")\n```\n\n----------------------------------------\n\nTITLE: Binding a Texture in OpenGL with Python\nDESCRIPTION: Binds a named texture to a texturing target using the glBindTexture function. Requires target as an enumerated constant and texture as an unsigned int.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nglBindTexture(target, texture)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remesh Support for Blender Modifiers\nDESCRIPTION: Adds remesh modifier support if Blender is built with the remesh feature, including dualcon library dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MOD_REMESH)\n  list(APPEND INC\n    ../../../intern/dualcon\n  )\n  list(APPEND LIB\n    bf_intern_dualcon\n  )\n  add_definitions(-DWITH_MOD_REMESH)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Best Practice for Name Mapping in Blender Python\nDESCRIPTION: Recommended approach using a dictionary to maintain a mapping between imported asset names and the newly created Blender data, avoiding the risks of relying on Blender's internal naming system.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Typically declared in the main body of the function.\nmesh_name_mapping = {}\n\nmesh = bpy.data.meshes.new(name=meshid)\nmesh_name_mapping[meshid] = mesh\n\n# Normally some code, or function calls, etc.\n\n# Use own dictionary rather than `bpy.data`.\nmesh = mesh_name_mapping[meshid]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of fast_float::from_chars with String Input in C++\nDESCRIPTION: This snippet demonstrates how to use the fast_float library to parse a floating-point number from a string input. It includes error handling to check for successful parsing and outputting the result.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"fast_float/fast_float.h\\\"\\n#include <iostream>\\n\\nint main() {\\n    const std::string input =  \\\"3.1416 xyz \\\";\\n    double result;\\n    auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\\n    if(answer.ec != std::errc()) { std::cerr << \\\"parsing failure\\n\\\"; return EXIT_FAILURE; }\\n    std::cout << \\\"parsed the number \\\" << result << std::endl;\\n    return EXIT_SUCCESS;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Interface Library in CMake\nDESCRIPTION: Lists all source files to be compiled for the Blender interface library, including various interface components, templates, and views.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/interface/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  eyedroppers/eyedropper_bone.cc\n  eyedroppers/eyedropper_color.cc\n  eyedroppers/eyedropper_colorband.cc\n  # ... (truncated for brevity)\n  views/tree_view.cc\n\n  eyedroppers/eyedropper_intern.hh\n  templates/interface_templates_intern.hh\n  interface_intern.hh\n  regions/interface_regions_intern.hh\n  view2d/view2d_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding NanoVDB Support to oneAPI Compilation in CMake\nDESCRIPTION: Adds the WITH_NANOVDB preprocessor definition to the compiler flags when NanoVDB support is enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_NANOVDB)\n    list(APPEND sycl_compiler_flags\n      -DWITH_NANOVDB)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: OpenGL Function - glLight\nDESCRIPTION: Sets light source parameters for OpenGL lighting. Available in multiple variants (glLightf, glLighti, glLightfv, glLightiv) for different parameter types.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nglLight(light, pname, param)\n```\n\n----------------------------------------\n\nTITLE: Configuring PugiXML Support in CMake for Cycles\nDESCRIPTION: Sets up compilation flags for PugiXML support based on various conditions.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PUGIXML OR OPENIMAGEIO_PUGIXML_FOUND)\n  add_definitions(-DWITH_PUGIXML)\n  if((NOT OPENIMAGEIO_PUGIXML_FOUND) OR WIN32)\n    add_definitions(-DWITH_SYSTEM_PUGIXML)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: GPU Drawing Test Configuration in CMake\nDESCRIPTION: Configures GPU drawing tests when testing is enabled. Sets up backend-specific options for OpenGL, Metal, and Vulkan, and handles platform-specific configurations for Vulkan on Apple systems using MoltenVK.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  if(WITH_GPU_DRAW_TESTS)\n    add_definitions(-DWITH_GPU_DRAW_TESTS)\n    if(WITH_OPENGL_BACKEND)\n      add_definitions(-DWITH_OPENGL_BACKEND)\n    endif()\n    if(WITH_METAL_BACKEND)\n      add_definitions(-DWITH_METAL_BACKEND)\n    endif()\n    if(WITH_VULKAN_BACKEND)\n      add_definitions(-DWITH_VULKAN_BACKEND)\n      list(APPEND INC_SYS\n        PUBLIC ${VULKAN_INCLUDE_DIRS}\n      )\n      if(APPLE)\n        list(APPEND INC_SYS\n          ${MOLTENVK_INCLUDE_DIRS}\n        )\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling USD Support in CMake for Cycles\nDESCRIPTION: Adds a compilation flag for USD support when WITH_USD is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_USD)\n  add_definitions(-DWITH_USD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Cycles Hydra Plugin Files\nDESCRIPTION: Sets up the installation of plugin files, including the root plugInfo.json file and the plugin library itself.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n  # Put the root `plugInfo.json` one level up.\n  delayed_install(\"${CMAKE_CURRENT_SOURCE_DIR}\" \"plugInfo.json\" ${CYCLES_HYDRA_INSTALL_PATH})\n  delayed_install(\"\" $<TARGET_FILE:${HdCyclesPluginName}> ${CYCLES_HYDRA_INSTALL_PATH})\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Private Dependencies\nDESCRIPTION: Defines private module dependencies required by Blender's core functionality, including font handling, kernel operations, mesh processing, and graphics processing units (GPU) operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nPRIVATE bf::blenfont\nPRIVATE bf::blenkernel\nPRIVATE bf::blenlib\nPRIVATE bf::blenloader\nPRIVATE bf::blentranslation\nPRIVATE bf::bmesh\nPRIVATE bf::depsgraph\nPRIVATE bf::dna\nPRIVATE bf::functions\nPRIVATE bf::gpu\nPRIVATE bf::imbuf\nPRIVATE bf::intern::clog\nPRIVATE bf::intern::guardedalloc\nbf_compositor\nPRIVATE bf::nodes\nPRIVATE bf::render\nPRIVATE bf::windowmanager\nPRIVATE bf::intern::atomic\nPRIVATE bf::extern::fmtlib\n```\n\n----------------------------------------\n\nTITLE: Adding OpenColorIO Integration Library in CMake\nDESCRIPTION: Registers the OpenColorIO integration library with Blender's build system using all the previously configured source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opencolorio/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_opencolorio \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Shader Library Configuration\nDESCRIPTION: Defines common shader library files used across multiple shaders for shared functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_LIB\n  overlay_common_lib.glsl\n  overlay_edit_mesh_common_lib.glsl\n  # overlay_edit_mesh_lib.glsl # TODO(fclem) Contains reference from the shader interface.\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Include Paths and Libraries\nDESCRIPTION: Defines the core include directories and library dependencies required for building Blender.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../blender/editors/include\n  ../blender/io/usd\n  ../blender/makesrna\n)\n\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Conditional Build Configuration\nDESCRIPTION: Sets up conditional compilation based on build options for features like Python support, Bullet physics, image format support, and various other optional components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\n  list(APPEND LIB\n    bf_python\n    bf_python_bmesh\n  )\n  add_definitions(-DWITH_PYTHON)\n\n  if(WITH_PYTHON_MODULE)\n    add_definitions(-DWITH_PYTHON_MODULE)\n  endif()\n\n  if(WITH_PYTHON_SAFETY)\n    add_definitions(-DWITH_PYTHON_SAFETY)\n  endif()\n\n  if(WITH_PYTHON_SECURITY)\n    add_definitions(-DWITH_PYTHON_SECURITY)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support in CMake for Cycles\nDESCRIPTION: Sets up compilation flags and include directories for OpenVDB when WITH_OPENVDB is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  include_directories(\n    SYSTEM\n    ${OPENVDB_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycles Render Tests in CMake\nDESCRIPTION: This snippet sets up Cycles render tests for different devices (CPU, CUDA, OptiX, etc.) and configures OSL tests if enabled. It uses the add_render_test function to create test targets for each combination of render test and device.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES)\n  set(_cycles_blocklist \"\")\n  set(_cycles_known_test_devices CPU CUDA OPTIX HIP HIP-RT METAL METAL-RT ONEAPI ONEAPI-RT)\n  if((NOT WITH_CYCLES_OSL) OR (WITH_CYCLES_TEST_OSL AND WITH_CYCLES_OSL))\n    set(_cycles_blocklist OSL)\n  endif()\n  foreach(_cycles_device ${CYCLES_TEST_DEVICES})\n    if(NOT ${_cycles_device} IN_LIST _cycles_known_test_devices)\n      message(FATAL_ERROR \"Unknown Cycles test device ${_cycles_device}.\"\n          \"Supported devices are: ${_cycles_known_test_devices}\")\n    endif()\n    string(TOLOWER \"${_cycles_device}\" _cycles_device_lower)\n    set(_cycles_render_tests bake;${render_tests};osl)\n\n    foreach(render_test ${_cycles_render_tests})\n      set(_cycles_test_name \"cycles_${render_test}_${_cycles_device_lower}\")\n      if(NOT(WITH_CYCLES_TEST_OSL AND WITH_CYCLES_OSL AND (\"${render_test}\" STREQUAL \"osl\")))\n        add_render_test(\n          ${_cycles_test_name}\n          ${CMAKE_CURRENT_LIST_DIR}/cycles_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/cycles\"\n          --device ${_cycles_device}\n          --blocklist ${_cycles_blocklist}\n        )\n        if(NOT (\"${_cycles_device_lower}\" STREQUAL \"cpu\"))\n          set_tests_properties(${_cycles_test_name} PROPERTIES RUN_SERIAL TRUE)\n        endif()\n      endif()\n\n      # ... (additional configuration for OSL tests)\n\n    endforeach()\n  endforeach()\n  unset(_cycles_blocklist)\n  unset(_cycles_known_test_devices)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Source Files for Armature Editor\nDESCRIPTION: Lists all source and header files required for the armature editor module, including files for armature manipulation, posing, and related utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/armature/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  armature_add.cc\n  armature_edit.cc\n  armature_naming.cc\n  armature_ops.cc\n  armature_relations.cc\n  armature_select.cc\n  armature_skinning.cc\n  armature_utils.cc\n  bone_collections.cc\n  editarmature_undo.cc\n  meshlaplacian.cc\n  pose_edit.cc\n  pose_lib_2.cc\n  pose_select.cc\n  pose_slide.cc\n  pose_transform.cc\n  pose_utils.cc\n\n  armature_intern.hh\n  meshlaplacian.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Installation\nDESCRIPTION: Sets up Python installation including the executable, libraries, and optional components like NumPy, USD, Zstandard, and Requests. Handles both pre-compiled and system libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON AND WITH_PYTHON_INSTALL)\n    install(\n      PROGRAMS ${PYTHON_EXECUTABLE}\n      DESTINATION ${TARGETDIR_VER}/python/bin\n    )\n\n    if(DEFINED LIBDIR)\n      install_dir(\n        ${PYTHON_LIBPATH}\n        ${TARGETDIR_VER}/python\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Render Tests in CMake for Blender\nDESCRIPTION: This snippet sets up GPU render tests for Eevee Next, Workbench, and Overlay renderers with different backends (OpenGL, Metal, Vulkan). It creates test targets for each combination of render test and backend using the add_render_test function.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GPU_RENDER_TESTS)\n  list(APPEND gpu_render_tests ${render_tests})\n  list(FILTER gpu_render_tests EXCLUDE REGEX light_group|shadow_catcher|denoise|guiding|reports)\n\n  set(_gpu_render_tests_arguments)\n\n  # Eevee Next\n  if(WITH_OPENGL_BACKEND)\n    foreach(render_test ${gpu_render_tests})\n      add_render_test(\n        eevee_next_opengl_${render_test}\n        ${CMAKE_CURRENT_LIST_DIR}/eevee_next_render_tests.py\n        --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n        --outdir \"${TEST_OUT_DIR}/eevee_next_opengl\"\n        --gpu-backend opengl\n        ${_gpu_render_tests_arguments}\n      )\n    endforeach()\n  endif()\n\n  # ... (similar configurations for Metal and Vulkan backends)\n\n  # Workbench\n  if(WITH_OPENGL_BACKEND)\n    foreach(render_test ${gpu_render_tests})\n      add_render_test(\n        workbench_opengl_${render_test}\n        ${CMAKE_CURRENT_LIST_DIR}/workbench_render_tests.py\n        --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n        --outdir \"${TEST_OUT_DIR}/workbench_opengl\"\n        --gpu-backend opengl\n        ${_gpu_render_tests_arguments}\n      )\n    endforeach()\n  endif()\n\n  # ... (similar configurations for Metal and Vulkan backends)\n\n  # Overlay\n  if(WITH_GPU_RENDER_TESTS_HEADED)\n    if(WITH_OPENGL_BACKEND)\n      add_render_test(\n        overlay_opengl\n        ${CMAKE_CURRENT_LIST_DIR}/overlay_render_tests.py\n        --testdir \"${TEST_SRC_DIR}/overlay\"\n        --outdir \"${TEST_OUT_DIR}/overlay\"\n        --gpu-backend opengl\n        ${_gpu_render_tests_arguments}\n      )\n    endif()\n\n    # ... (similar configurations for Metal and Vulkan backends)\n\n  endif()\n\n  # ... (additional configuration for Hydra Storm tests)\n\n  unset(_gpu_render_tests_arguments)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake SVG Icon Processing Loop\nDESCRIPTION: Processes SVG icons by converting them to C-compatible data and generating corresponding header and source file entries. Creates arrays of header declarations and switch-case statements for icon lookup.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(svg ${SVG_FILENAMES_NOEXT})\n  data_to_c_simple(../../../../release/datafiles/icons_svg/${svg}.svg SRC)\n  string(TOUPPER ${svg} svg_name_upper)\n  list(APPEND SVG_CONTENTS_H\n    \"extern const char datatoc_${svg}_svg[]\\;\\n\"\n  )\n  list(APPEND SVG_CONTENTS_C\n    \"case ICON_${svg_name_upper}: return datatoc_${svg}_svg\\;\\n\"\n  )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for BMesh Python API in CMake\nDESCRIPTION: Lists all source and header files required for building the BMesh Python API module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/bmesh/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  bmesh_py_api.cc\n  bmesh_py_geometry.cc\n  bmesh_py_ops.cc\n  bmesh_py_ops_call.cc\n  bmesh_py_types.cc\n  bmesh_py_types_customdata.cc\n  bmesh_py_types_meshdata.cc\n  bmesh_py_types_select.cc\n  bmesh_py_utils.cc\n\n  bmesh_py_api.hh\n  bmesh_py_geometry.hh\n  bmesh_py_ops.hh\n  bmesh_py_ops_call.hh\n  bmesh_py_types.hh\n  bmesh_py_types_customdata.hh\n  bmesh_py_types_meshdata.hh\n  bmesh_py_types_select.hh\n  bmesh_py_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL for Blender Audio\nDESCRIPTION: Sets up SDL dependency, handles both SDL and SDL2, configures source files and build settings. Includes fallback if the library is not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_SDL)\n\tif(AUDASPACE_STANDALONE)\n\t\tif(USE_SDL2)\n\t\t\tfind_package(SDL2)\n\t\t\tif(SDL2_FOUND)\n\t\t\t\tset(SDL_INCLUDE_DIR ${SDL2_INCLUDE_DIR})\n\t\t\t\tset(SDL_LIBRARY ${SDL2_LIBRARY})\n\t\t\t\tset(SDL_FOUND TRUE)\n\t\t\telse()\n\t\t\t\tfind_package(SDL ${PACKAGE_OPTION})\n\t\t\tendif()\n\t\telse()\n\t\t\tfind_package(SDL ${PACKAGE_OPTION})\n\t\tendif()\n\tendif()\n\n\tif(SDL_FOUND)\n\t\tset(SDL_SRC\n\t\t\tplugins/sdl/SDLDevice.cpp\n\t\t)\n\t\tset(SDL_HDR\n\t\t\tplugins/sdl/SDLDevice.h\n\t\t)\n\n\t\tif(NOT PLUGIN_SDL)\n\t\t\tlist(APPEND INCLUDE ${SDL_INCLUDE_DIR})\n\t\t\tlist(APPEND LIBRARIES ${SDL_LIBRARY})\n\t\t\tlist(APPEND SRC ${SDL_SRC})\n\t\t\tlist(APPEND HDR ${SDL_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS SDLDevice)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB SDL_DLLS ${LIBRARY_PATH}/sdl/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${SDL_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_SDL FALSE CACHE BOOL \"Build With SDL\" FORCE)\n\t\telse()\n\t\t\tset(WITH_SDL FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"SDL not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Draw Buffer in OpenGL with Python\nDESCRIPTION: Specifies which color buffers are to be drawn into using the glDrawBuffer function. The mode parameter is an enumerated constant.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nglDrawBuffer(mode)\n```\n\n----------------------------------------\n\nTITLE: Building the Blender Modifiers Library\nDESCRIPTION: Creates the modifiers library target with the configured source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_modifiers \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Render Module in CMake\nDESCRIPTION: Lists all the source files (.cc) and header files (.h, .hh) that are part of the Blender render module. This includes files for baking, compositing, engine, pipeline, textures, and more.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/bake.cc\n  intern/compositor.cc\n  intern/engine.cc\n  intern/initrender.cc\n  intern/multires_bake.cc\n  intern/pipeline.cc\n  intern/render_result.cc\n  intern/render_types.cc\n  intern/texture_image.cc\n  intern/texture_margin.cc\n  intern/texture_pointdensity.cc\n  intern/texture_procedural.cc\n  intern/tile_highlight.cc\n  intern/zbuf.cc\n\n  RE_bake.h\n  RE_compositor.hh\n  RE_engine.h\n  RE_multires_bake.h\n  RE_pipeline.h\n  RE_texture.h\n  RE_texture_margin.h\n\n  intern/pipeline.hh\n  intern/render_result.h\n  intern/render_types.h\n  intern/texture_common.h\n  intern/tile_highlight.h\n  intern/zbuf.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Editor Geometry Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the Blender editor geometry library, specifying source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/geometry/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_geometry \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining CUDA Kernel Compilation Macro in CMake\nDESCRIPTION: Defines a macro for compiling CUDA kernels with specific architectures, flags, and output formats. It handles PTX and cubin generation, and includes compression of output files.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(CYCLES_CUDA_KERNEL_ADD arch prev_arch name flags sources experimental)\n  if(${arch} MATCHES \"compute_.*\")\n    set(format \"ptx\")\n  else()\n    set(format \"cubin\")\n  endif()\n  set(cuda_file ${name}_${arch}.${format})\n  set(cuda_file_compressed ${cuda_file}.zst)\n\n  set(kernel_sources ${sources})\n  if(NOT ${prev_arch} STREQUAL \"none\")\n    if(${prev_arch} MATCHES \"compute_.*\")\n      set(kernel_sources ${kernel_sources} ${name}_${prev_arch}.ptx)\n    else()\n      set(kernel_sources ${kernel_sources} ${name}_${prev_arch}.cubin)\n    endif()\n  endif()\n\n  set(cuda_kernel_src \"/device/cuda/${name}.cu\")\n\n  set(cuda_flags ${flags}\n    -D CCL_NAMESPACE_BEGIN=\n    -D CCL_NAMESPACE_END=\n    -D NVCC\n    -m ${CUDA_BITS}\n    -I ${CMAKE_CURRENT_SOURCE_DIR}/..\n    -I ${CMAKE_CURRENT_SOURCE_DIR}/device/cuda\n    --use_fast_math\n    -o ${CMAKE_CURRENT_BINARY_DIR}/${cuda_file}\n    -Wno-deprecated-gpu-targets)\n\n  # ... (additional flag settings)\n\n  set(_cuda_nvcc_args\n    -arch=${arch}\n    ${CUDA_NVCC_FLAGS}\n    --${format}\n    ${CMAKE_CURRENT_SOURCE_DIR}${cuda_kernel_src}\n    ${cuda_flags}\n  )\n\n  # ... (compilation commands)\n\n  add_custom_command(\n    OUTPUT ${cuda_file_compressed}\n    COMMAND \"$<TARGET_FILE:zstd_compress>\" ${cuda_file} ${cuda_file_compressed}\n    DEPENDS ${cuda_file})\n\n  # ... (installation and cleanup)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Audaspace\nDESCRIPTION: Sets up the CMake project for Audaspace, including version requirements, policies, and project metadata.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\ninclude(CMakeDependentOption)\n\nif(POLICY CMP0054)\n\tcmake_policy(SET CMP0054 NEW)\nendif()\n\nproject(audaspace)\n\nset(AUDASPACE_VERSION 1.6)\nset(AUDASPACE_LONG_VERSION ${AUDASPACE_VERSION}.0)\n\nif(DEFINED AUDASPACE_CMAKE_CFG)\n\tinclude(${AUDASPACE_CMAKE_CFG})\nendif()\n\nif(NOT DEFINED AUDASPACE_STANDALONE)\n\tset(AUDASPACE_STANDALONE TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Library Dependencies Configuration\nDESCRIPTION: Defines the core library dependencies required by the blenkernel module including animation, asset system, font handling, and other core Blender functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::curve_fit_nd\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  bf_ikplugin\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  bf_intern_ghost\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_libmv\n  bf_intern_mikktspace\n  bf_intern_opensubdiv\n  bf_modifiers\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  bf_rna\n  PRIVATE bf::sequencer\n  bf_shader_fx\n  bf_simulation\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  PRIVATE bf::intern::atomic\n  ${FREETYPE_LIBRARIES} ${BROTLI_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Test Suite Configuration\nDESCRIPTION: Configures the test suite for the blenkernel module, including test source files, include paths and library dependencies for Google Test integration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    intern/action_test.cc\n    intern/armature_test.cc\n    intern/asset_metadata_test.cc\n    intern/bpath_test.cc\n    intern/cryptomatte_test.cc\n    intern/curves_geometry_test.cc\n    intern/fcurve_test.cc\n    intern/file_handler_test.cc\n    intern/grease_pencil_test.cc\n    intern/idprop_serialize_test.cc\n    intern/image_partial_update_test.cc\n    intern/image_test.cc\n    intern/lattice_deform_test.cc\n    intern/layer_test.cc\n    intern/lib_id_remapper_test.cc\n    intern/lib_id_test.cc\n    intern/lib_query_test.cc\n    intern/lib_remap_test.cc\n    intern/main_test.cc\n    intern/nla_test.cc\n    intern/subdiv_ccg_test.cc\n    intern/tracking_test.cc\n    intern/volume_test.cc\n  )\n  blender_add_test_suite_lib(blenkernel \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining EEVEE GLSL Shader Paths\nDESCRIPTION: Sets up paths to GLSL shader files used by the EEVEE rendering engine. These shaders implement various rendering features including ambient occlusion, materials, lighting, shadows, and post-processing effects.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SRC\n  engines/eevee/shaders/eevee_ambient_occlusion_lib.glsl\n  engines/eevee/shaders/eevee_ambient_occlusion_pass_comp.glsl\n  engines/eevee/shaders/eevee_attributes_curves_lib.glsl\n  [...]\n  engines/eevee/shaders/eevee_surf_world_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Testing Options in CMake\nDESCRIPTION: Defines CMake options for various types of unit testing including GPU render tests, UI tests, and test execution configuration.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_GTESTS \"Enable GTest unit testing\" OFF)\noption(WITH_GPU_RENDER_TESTS \"\\\nEnable GPU render related unit testing (EEVEE, Workbench and Grease Pencil)\"\n  OFF\n)\noption(WITH_GPU_RENDER_TESTS_VULKAN \"\\\nEnable GPU render related unit testing using Vulkan\"\n  OFF\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Render Delegate in CMake for Cycles\nDESCRIPTION: Sets up conditions and paths for the Hydra render delegate based on various build options.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE AND (NOT WITH_USD))\n  set_and_warn_library_found(\"USD\" WITH_USD WITH_CYCLES_HYDRA_RENDER_DELEGATE)\nendif()\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE AND (NOT WITH_BLENDER) AND (NOT WITH_CYCLES_STANDALONE))\n  set(CYCLES_INSTALL_PATH ${CYCLES_INSTALL_PATH}/hdCycles/resources)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Bullet Physics in Blender Physics Editor\nDESCRIPTION: Adds Bullet physics include directory and defines WITH_BULLET flag if Bullet physics is enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/physics/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC\n    ../../../../intern/rigidbody\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: GPU Shader CPP Compilation Configuration\nDESCRIPTION: Configures C++ compilation of GLSL shaders when WITH_GPU_SHADER_CPP_COMPILATION is enabled. Includes compilation setup for vertex and fragment shaders with commented options for compute and library shaders.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n\n  compile_sources_as_cpp(gpencil_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(gpencil_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  # compile_sources_as_cpp(gpencil_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(gpencil_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing New Sculpt Vertex Colors in Python\nDESCRIPTION: Shows how to access the new sculpt vertex colors property added to the Mesh class in Blender 2.90.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\n# Get the active mesh\nmesh = bpy.context.active_object.data\n\n# Access sculpt vertex colors\nsculpt_vcol = mesh.sculpt_vertex_colors.new()\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenGL Capability in Python\nDESCRIPTION: Enables a server-side GL capability using the glEnable function. The cap parameter is an enumerated constant indicating the capability to enable.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nglEnable(cap)\n```\n\n----------------------------------------\n\nTITLE: Playing Sound with Audaspace in Python\nDESCRIPTION: Plays an audio sound using the `play` method of the `aud.Device`. The method returns a handle for controlling playback actions on the sound object.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhandle = device.play(square)\n```\n\n----------------------------------------\n\nTITLE: OpenXR Integration Configuration\nDESCRIPTION: Sets up OpenXR support with platform-specific graphics bindings and dependencies. Includes configuration for different graphics backends (OpenGL, Vulkan, D3D) and platform-specific XR defines.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  list(APPEND SRC\n    intern/GHOST_Xr.cc\n    intern/GHOST_XrAction.cc\n    intern/GHOST_XrContext.cc\n    intern/GHOST_XrControllerModel.cc\n    intern/GHOST_XrEvent.cc\n    intern/GHOST_XrGraphicsBinding.cc\n    intern/GHOST_XrSession.cc\n    intern/GHOST_XrSwapchain.cc\n\n    GHOST_IXrContext.hh\n    intern/GHOST_IXrGraphicsBinding.hh\n    intern/GHOST_XrAction.hh\n    intern/GHOST_XrContext.hh\n    intern/GHOST_XrControllerModel.hh\n    intern/GHOST_XrException.hh\n    intern/GHOST_XrSession.hh\n    intern/GHOST_XrSwapchain.hh\n    intern/GHOST_Xr_intern.hh\n    intern/GHOST_Xr_openxr_includes.hh\n  )\n```\n\n----------------------------------------\n\nTITLE: Managing GPU Kernel Dependencies with Macro in CMake\nDESCRIPTION: Defines a macro to add dependencies between GPU kernel targets, ensuring they build in the correct order, and applies it to CUDA, OptiX, HIP, HIPRT, and OneAPI targets.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nset(_cycles_prev_gpu_kernel_target)\nmacro(cycles_add_gpu_kernel_dependencies GPU_KERNEL_TARGET)\n  if(TARGET ${GPU_KERNEL_TARGET})\n    add_dependencies(cycles_kernel ${GPU_KERNEL_TARGET})\n    if(_cycles_prev_gpu_kernel_target)\n      add_dependencies(${GPU_KERNEL_TARGET} ${_cycles_prev_gpu_kernel_target})\n    endif()\n    set(_cycles_prev_gpu_kernel_target ${GPU_KERNEL_TARGET})\n  endif()\nendmacro()\n\ncycles_add_gpu_kernel_dependencies(cycles_kernel_cuda)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_optix)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_hip)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_hiprt)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_oneapi)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Texture Nodes Library\nDESCRIPTION: Creates the texture nodes library using the defined sources, includes, and dependencies. Also adds RNA dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/texture/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_nodes_texture \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes_texture bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Mesh Editor Library in CMake\nDESCRIPTION: Adds the Blender mesh editor as a library target, specifying source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mesh/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_mesh \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_mesh bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Debug Stream Configuration in C\nDESCRIPTION: Function to set the error output stream for memory management debugging messages.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid MEM_set_error_stream(FILE*);\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and NumPy for Blender Audio\nDESCRIPTION: Sets up Python and NumPy dependencies, configures Python module build, and handles DLL inclusion for Windows. Includes fallback if libraries are not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(PythonLibs 3.2 ${PACKAGE_OPTION})\n\t\tfind_package(NumPy ${PACKAGE_OPTION})\n\tendif()\n\n\tif(PYTHONLIBS_FOUND AND NUMPY_FOUND)\n\t\tlist(APPEND INCLUDE ${PYTHON_INCLUDE_DIRS} ${NUMPY_INCLUDE_DIRS})\n\n\t\tif(WITH_PYTHON_MODULE)\n\t\t\tfind_package(PythonInterp 3.2 ${PACKAGE_OPTION})\n\n\t\t\tif(NOT PYTHONINTERP_FOUND)\n\t\t\t\tset(WITH_PYTHON_MODULE FALSE)\n\t\t\t\tmessage(WARNING \"Python interpreter not found, module will not be built.\")\n\t\t\tendif()\n\t\tendif()\n\n\t\tset(AUDASPACE_PY_LIBRARY -laudaspace-py)\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB PYTHON_DLLS ${LIBRARY_PATH}/Python/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${PYTHON_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_PYTHON FALSE CACHE BOOL \"Build With Python Library\" FORCE)\n\t\telse()\n\t\t\tset(WITH_PYTHON FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"Python & NumPy libraries not found, language binding will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Render Module in CMake\nDESCRIPTION: Specifies the library dependencies for the Blender render module. This includes various Blender components and external libraries, with some marked as PRIVATE dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  bf_compositor\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::nodes\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LCMS2 Project in CMake\nDESCRIPTION: This CMake script sets up the LCMS2 project, defines source files and headers, and configures the build and installation of the static library. It includes setting the project name, minimum CMake version, include directories, and defining the library target.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_lcms.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(lcms2)\n\ncmake_minimum_required(VERSION 2.8)\n\ninclude_directories(include)\n\nset(HEADERS\n\tinclude/lcms2.h\n\tinclude/lcms2_plugin.h\n)\nset(SOURCES\n    src/cmscam02.c\n    src/cmscgats.c\n    src/cmscnvrt.c\n    src/cmserr.c\n    src/cmsgamma.c\n    src/cmsgmt.c\n    src/cmsintrp.c\n    src/cmsio0.c\n    src/cmsio1.c\n    src/cmslut.c\n    src/cmsmd5.c\n    src/cmsmtrx.c\n    src/cmsnamed.c\n    src/cmsopt.c\n    src/cmspack.c\n    src/cmspcs.c\n    src/cmsplugin.c\n    src/cmsps2.c\n    src/cmssamp.c\n    src/cmssm.c\n    src/cmstypes.c\n    src/cmsvirt.c\n    src/cmswtpnt.c\n    src/cmsxform.c\n    src/lcms2_internal.h\n)\n\nadd_library(${PROJECT_NAME} STATIC ${HEADERS} ${SOURCES})\n\nset_target_properties(${PROJECT_NAME} PROPERTIES\n\tLIBRARY_OUTPUT_NAME \"${PROJECT_NAME}\"\n\tPUBLIC_HEADER \t\t\"${HEADERS}\"\n)\n\ninstall(TARGETS \t\t${PROJECT_NAME}\n\t\tRUNTIME         DESTINATION\t\tbin\n        LIBRARY         DESTINATION     lib\n        ARCHIVE         DESTINATION     lib\n        PUBLIC_HEADER\tDESTINATION     include\n)\n```\n\n----------------------------------------\n\nTITLE: Standalone Executable Configuration - CMake\nDESCRIPTION: Sets up the main Cycles standalone executable build configuration including source files and GUI components.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_STANDALONE)\n  set(SRC\n    cycles_standalone.cpp\n    cycles_xml.cpp\n    cycles_xml.h\n    oiio_output_driver.cpp\n    oiio_output_driver.h\n  )\n\n  if(WITH_CYCLES_STANDALONE_GUI)\n    list(APPEND SRC\n      opengl/display_driver.cpp\n      opengl/display_driver.h\n      opengl/shader.cpp\n      opengl/shader.h\n      opengl/window.cpp\n      opengl/window.h\n    )\n  endif()\n\n  add_executable(cycles ${SRC} ${INC} ${INC_SYS})\n  unset(SRC)\n\n  target_link_libraries(cycles PRIVATE ${LIB})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Map Information - OpenGL - Python\nDESCRIPTION: The glGetPixelMap function retrieves the contents of specified pixel maps, which are used for pixel data manipulation in rendering operations.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetPixelMap (map, values):\n\n   B{glGetPixelMapfv, glGetPixelMapuiv, glGetPixelMapusv}\n\n   Return the specified pixel map\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetPixelMap.xhtml>`__\n\n   :type map:  Enumerated constant\n   :arg map: Specifies the name of the pixel map to return.\n   :type values: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg values: Returns the pixel map contents.\n```\n\n----------------------------------------\n\nTITLE: Complex Audio Effects with Audaspace in Python\nDESCRIPTION: Defines complex audio effects for creating a siren sound using chained Audaspace functions for sound transformations. Functions like `limit`, `fadein`, and `fadeout` are used for effect modifications.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhigh = aud.Sound.sine(880).limit(0, length).fadein(0, fadelength).fadeout(length - fadelength, length)\nlow = aud.Sound.sine(700).limit(0, length).fadein(0, fadelength).fadeout(length - fadelength, length).volume(0.6)\n```\n\n----------------------------------------\n\nTITLE: Dependencies Table in Markdown\nDESCRIPTION: A markdown table listing third-party libraries, their versions, and copyright information used in the Blender project.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Library | Version | Copyright |\n| ------- | ------- | --------- |\n| [Audaspace](https://audaspace.github.io/) | 1.6.0 (cb49 | `Copyright © 2009-2025 Jörg Müller. All rights reserved.` |\n```\n\n----------------------------------------\n\nTITLE: Configuring oneAPI SYCL Options for Different Targets in CMake\nDESCRIPTION: Sets default options for SPIR64 and SPIR64_GEN targets, including optimization flags. It also handles the formatting of these options and ensures the zebin format is used for improved compatibility with Intel graphics hardware.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n  # Set defaults for spir64 and spir64_gen options\n  if(NOT DEFINED CYCLES_ONEAPI_SYCL_OPTIONS_spir64)\n    set(CYCLES_ONEAPI_SYCL_OPTIONS_spir64 \"-options '-cl-fast-relaxed-math -ze-intel-enable-auto-large-GRF-mode -ze-opt-regular-grf-kernel integrator_intersect -ze-opt-large-grf-kernel shade_surface -ze-opt-no-local-to-generic'\")\n  endif()\n  if(NOT DEFINED CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen)\n    set(CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen \"${CYCLES_ONEAPI_SYCL_OPTIONS_spir64}\" CACHE STRING \"Extra build options for spir64_gen target\")\n    mark_as_advanced(CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen)\n  endif()\n  # Enable `zebin`, a graphics binary format with improved compatibility.\n  string(PREPEND CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen \"--format zebin \")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite for Blender IO Common Library in CMake\nDESCRIPTION: Sets up test sources, includes, and libraries for the Blender IO common library when testing is enabled (WITH_GTESTS).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/common/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    intern/abstract_hierarchy_iterator_test.cc\n    intern/object_identifier_test.cc\n    intern/string_utils_tests.cc\n  )\n  set(TEST_INC\n    ../../blenloader\n  )\n  set(TEST_LIB\n    bf_blenloader_test_util\n    bf_io_common\n  )\n  blender_add_test_suite_lib(io_common \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Shader Sources for Compositor\nDESCRIPTION: Lists all GLSL shader files used by the compositor for various visual effects and operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SRC\n  shaders/compositor_alpha_crop.glsl\n  shaders/compositor_bilateral_blur.glsl\n  # ... [truncated for brevity]\n  shaders/compositor_z_combine_from_mask_depth.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation in CMake for Cycles\nDESCRIPTION: Sets up installation directories based on whether it's a standalone repository or not, and whether it's being built with Blender.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WITH_BLENDER)\n  if(CYCLES_STANDALONE_REPOSITORY)\n    delayed_do_install()\n  else()\n    delayed_do_install(${CMAKE_BINARY_DIR}/bin)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Compilation for Blender Window Manager in CMake\nDESCRIPTION: Sets up conditional compilation flags based on various features and dependencies, such as Audaspace, Cycles, OpenGL, Vulkan, and Python support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/windowmanager/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n\n# ... (similar blocks for other features)\n```\n\n----------------------------------------\n\nTITLE: Configuring Haru Support for PDF Export in CMake\nDESCRIPTION: Conditionally adds Haru support for PDF export functionality. It includes additional source files, include directories, and libraries when WITH_HARU is enabled. Also adds TIFF library dependency for Haru.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/grease_pencil/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HARU)\n  list(APPEND SRC\n    intern/grease_pencil_io_export_pdf.cc\n  )\n  list(APPEND INC_SYS\n    ${HARU_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${HARU_LIBRARIES}\n\n    # Haru needs `TIFFFaxBlackCodes` & `TIFFFaxWhiteCodes` symbols from TIFF.\n    # Can be removed with Haru 2.4.0. They should be shipping with their own\n    # Fax codes defined by default from that version onward.\n    ${TIFF_LIBRARY}\n  )\n  add_definitions(-DWITH_HARU)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Static Cycles Hydra Library\nDESCRIPTION: Sets up the include directories and creates the static library target for Cycles Hydra. It includes both the source files and headers defined previously.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\nadd_library(cycles_hydra STATIC\n  ${SRC_HD_CYCLES}\n  ${SRC_HD_CYCLES_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing audaspace in Python\nDESCRIPTION: This code snippet demonstrates how to import the audaspace library in Python. Importing the library gives access to its functionalities within Python scripts. It assumes that the audaspace library is installed and available in the Python environment.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"import aud\"\n```\n\n----------------------------------------\n\nTITLE: Compile-time format string check with fmt\nDESCRIPTION: This snippet demonstrates how to check the validity of a format string at compile time using the fmt library. If the format specifier is incorrect, it results in a compile-time error.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n// This will give a compile-time error in C++20 because \"d\" is an invalid format specifier for a string.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Comprehensive list of source files for Bullet Physics, organized by components including collision detection, dynamics, soft body physics, and linear math utilities.\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/BulletCollision/BroadphaseCollision/btAxisSweep3.cpp\n  src/BulletCollision/BroadphaseCollision/btBroadphaseProxy.cpp\n  # ... [truncated for brevity] ...\n  src/BulletCollision/CollisionDispatch/btBoxBoxDetector.h\n)\n```\n\n----------------------------------------\n\nTITLE: Scaling Raster Position in Blender's 3D View\nDESCRIPTION: Demonstrates how to scale the glRasterPos function to account for the zoom level of panels in Blender's 3D view. This workaround uses the view matrix scale to adjust pixel values.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nimport bgl\nxval, yval= 100, 40\n# Get the scale of the view matrix.\nview_matrix = bgl.Buffer(bgl.GL_FLOAT, 16)\nbgl.glGetFloatv(bgl.GL_MODELVIEW_MATRIX, view_matrix)\nf = 1.0 / view_matrix[0]\n\n# Instead of the usual `glRasterPos2i(xval, yval)`.\nbgl.glRasterPos2f(xval * f, yval * f)\n```\n\n----------------------------------------\n\nTITLE: Setting up Bullet Physics Integration in Blender\nDESCRIPTION: This CMake script configures the rigid body physics module in Blender, utilizing the Bullet Physics engine. It sets up double precision for Bullet, defines include directories, specifies source files, and links against Bullet libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/rigidbody/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DBT_USE_DOUBLE_PRECISION)\n\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${BULLET_INCLUDE_DIRS}\n)\n\nset(SRC\n  rb_bullet_api.cpp\n  rb_convex_hull_api.cpp\n\n  RBI_hull_api.h\n  RBI_api.h\n)\n\nset(LIB\n  ${BULLET_LIBRARIES}\n)\n\nblender_add_lib(bf_intern_rigidbody \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Cloning Blender Repository with Git\nDESCRIPTION: Creates a directory for Blender source code and clones the repository using Git, with explicit path to Git executable to ensure compatibility\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/windows/vmprep.cmd.txt#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\necho Cloning Blender repository\nmkdir c:\\blendergit\ncd c:\\blendergit\nREM Git won't be in the path yet, use full path \n\"C:\\Program Files\\Git\\cmd\\git.exe\" clone https://projects.blender.org/blender/blender.git\n```\n\n----------------------------------------\n\nTITLE: Setting Final Compiler Flags\nDESCRIPTION: This code combines warning flags with user-defined flags and platform-specific flags to create the final compiler command-line parameters for both C and C++ compilers.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\n# Include warnings first, so its possible to disable them with user defined flags\n# eg: -Wno-uninitialized\nset(CMAKE_C_FLAGS \"${C_WARNINGS} ${CMAKE_C_FLAGS} ${PLATFORM_CFLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CXX_WARNINGS} ${CMAKE_CXX_FLAGS} ${PLATFORM_CFLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Building Shader FX Library\nDESCRIPTION: Adds the shader effects library to the build system and sets up RNA dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/shader_fx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_shader_fx \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_shader_fx bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional IO Format Support Configuration\nDESCRIPTION: Adds conditional support for various file formats (CSV, STL, PLY, OBJ) based on build configuration flags.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_CSV)\n  list(APPEND LIB\n    PRIVATE bf_io_common\n    PRIVATE bf_io_csv\n  )\n  add_definitions(-DWITH_IO_CSV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Functions in C\nDESCRIPTION: Core memory allocation functions that provide malloc-like functionality with additional debugging features. These functions require a length parameter and a static string description of the memory block.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid *MEM_[mc]allocN(unsigned int len, char * str);\n```\n\n----------------------------------------\n\nTITLE: Configuring LibSndFile for Blender Audio\nDESCRIPTION: Checks for LibSndFile dependency, sets up source files, and configures build settings. Includes fallback options if the library is not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_LIBSNDFILE)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(LibSndFile ${PACKAGE_OPTION})\n\tendif()\n\n\tif(LIBSNDFILE_FOUND)\n\t\tset(LIBSNDFILE_SRC\n\t\t\tplugins/libsndfile/SndFile.cpp\n\t\t\tplugins/libsndfile/SndFileReader.cpp\n\t\t\tplugins/libsndfile/SndFileWriter.cpp\n\t\t)\n\t\tset(LIBSNDFILE_HDR\n\t\t\tplugins/libsndfile/SndFile.h\n\t\t\tplugins/libsndfile/SndFileReader.h\n\t\t\tplugins/libsndfile/SndFileWriter.h\n\t\t)\n\n\t\tif(NOT PLUGIN_LIBSNDFILE)\n\t\t\tlist(APPEND INCLUDE ${LIBSNDFILE_INCLUDE_DIRS})\n\t\t\tlist(APPEND LIBRARIES ${LIBSNDFILE_LIBRARIES})\n\t\t\tlist(APPEND SRC ${LIBSNDFILE_SRC})\n\t\t\tlist(APPEND HDR ${LIBSNDFILE_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS SndFile)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB LIBSNDFILE_DLLS ${LIBRARY_PATH}/libsndfile/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${LIBSNDFILE_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_LIBSNDFILE FALSE CACHE BOOL \"Build With LibSndFile\" FORCE)\n\t\telse()\n\t\t\tset(WITH_LIBSNDFILE FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"LibSndFile not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVDB Support Conditionally\nDESCRIPTION: Conditionally adds OpenVDB support when WITH_OPENVDB is enabled, including adding the necessary definitions, include directories, and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Documentation Generation in CMake\nDESCRIPTION: This snippet checks for Doxygen, configures the Doxyfile, and sets up a custom target for building C++ HTML documentation. If Doxygen is not found, it disables the documentation build and issues a warning.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_DOCS)\n\tfind_package(Doxygen ${PACKAGE_OPTION})\n\n\tif(DOXYGEN_FOUND AND DOXYGEN_DOT_FOUND)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)\n\n\t\tadd_custom_target(audaspace_doc ALL ${DOXYGEN_EXECUTABLE} Doxyfile COMMENT \"Building C++ HTML documentation with Doxygen.\")\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_DOCS FALSE CACHE BOOL \"Build C++ HTML Documentation with Doxygen\" FORCE)\n\t\telse()\n\t\t\tset(WITH_DOCS FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"Doxygen (and/or dot) not found, documentation will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running QuadriFlow with Input and Output Files\nDESCRIPTION: This command runs the QuadriFlow application to convert a manifold triangle mesh file into a quadrilateral mesh file. The resolution parameter is user-defined, determining the number of faces in the resulting quad mesh. Dependencies include a compiled QuadriFlow binary.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Cycles Device in CMake\nDESCRIPTION: Sets up lists of source files for different compute devices and common components. It includes files for CPU, CUDA, HIP, Metal, OptiX, and other device types.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/device/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_BASE\n  device.cpp\n  denoise.cpp\n  graphics_interop.cpp\n  kernel.cpp\n  memory.cpp\n  queue.cpp\n)\n\nset(SRC_CPU\n  cpu/device.cpp\n  cpu/device.h\n  cpu/device_impl.cpp\n  cpu/device_impl.h\n  cpu/kernel.cpp\n  cpu/kernel.h\n  cpu/kernel_function.h\n)\n\n# ... (similar blocks for CUDA, HIP, HIPRT, ONEAPI, DUMMY, MULTI, METAL, OPTIX)\n\nset(SRC_HEADERS\n  device.h\n  denoise.h\n  graphics_interop.h\n  memory.h\n  kernel.h\n  queue.h\n)\n\nset(SRC\n  ${SRC_BASE}\n  ${SRC_CPU}\n  ${SRC_CUDA}\n  ${SRC_HIP}\n  ${SRC_HIPRT}\n  ${SRC_DUMMY}\n  ${SRC_MULTI}\n  ${SRC_OPTIX}\n  ${SRC_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Sound from File with Audaspace in Python\nDESCRIPTION: Loads and plays sound from a file specified by command line arguments using `aud.Sound.file`. It emphasizes input handling for audio playback.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsound = aud.Sound.file(sys.argv[1])\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Library Dependencies\nDESCRIPTION: Sets up the core library dependencies required for the Cycles scene library, including BVH, device, integrator and utility libraries. Handles conditional inclusion of sky library based on repository type.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/scene/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_bvh\n  cycles_device\n  cycles_integrator\n  cycles_subd\n  cycles_util\n)\n\nif(CYCLES_STANDALONE_REPOSITORY)\n  list(APPEND LIB extern_sky)\nelse()\n  list(APPEND LIB bf_intern_sky)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Blender Gizmo Library\nDESCRIPTION: Lists all source files for the gizmo library, including utility functions, geometry implementations, and various gizmo type definitions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/gizmo_library/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  gizmo_draw_utils.cc\n  gizmo_geometry.h\n  gizmo_library_intern.hh\n  gizmo_library_presets.cc\n  gizmo_library_utils.cc\n  geometry/geom_arrow_gizmo.cc\n  geometry/geom_cube_gizmo.cc\n  geometry/geom_dial_gizmo.cc\n  gizmo_types/arrow3d_gizmo.cc\n  gizmo_types/blank3d_gizmo.cc\n  gizmo_types/button2d_gizmo.cc\n  gizmo_types/cage2d_gizmo.cc\n  gizmo_types/cage3d_gizmo.cc\n  gizmo_types/dial3d_gizmo.cc\n  gizmo_types/move3d_gizmo.cc\n  gizmo_types/primitive3d_gizmo.cc\n  gizmo_types/snap3d_gizmo.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenGL Backend Configuration for Blender GPU Python Module\nDESCRIPTION: Adds OpenGL-specific include directories and libraries if the OpenGL backend is enabled. This is controlled by the WITH_OPENGL_BACKEND option.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/gpu/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Addon Files for Cycles in CMake\nDESCRIPTION: Lists the Python files that make up the Cycles addon for Blender. These files implement the user interface, property definitions, operators, and other Python-based functionality for the Cycles renderer.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(ADDON_FILES\n  addon/__init__.py\n  addon/camera.py\n  addon/engine.py\n  addon/operators.py\n  addon/osl.py\n  addon/presets.py\n  addon/properties.py\n  addon/ui.py\n  addon/version_update.py\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Alembic Support in CMake for Cycles\nDESCRIPTION: Adds compilation flag and include directory for Alembic support when WITH_ALEMBIC is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  include_directories(\n    SYSTEM\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Support in View3D Editor CMake Configuration\nDESCRIPTION: Conditionally adds Python support to the View3D editor by including necessary headers and defining a preprocessor flag when Python is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC ../../python)\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Headless Blender Build in CMake\nDESCRIPTION: Adds a compilation definition for headless builds of Blender when the WITH_HEADLESS option is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/screen/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up CPU Kernel Compilation Flags in CMake\nDESCRIPTION: Configures compilation flags for the CPU kernels, including special handling for AVX2 instructions when available, and applying kernel-specific flags.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED CYCLES_KERNEL_FLAGS)\n  set_source_files_properties(device/cpu/kernel.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_KERNEL_FLAGS}\")\nendif()\n\nif(CXX_HAS_AVX2)\n  set_source_files_properties(device/cpu/kernel_avx2.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_AVX2_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining View Layer Test Macro in CMake\nDESCRIPTION: Creates a macro for adding view layer tests with consistent configuration. Sets up Python path and test execution parameters.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/view_layer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(view_layer_test test_name)\n  add_test(view_layer_${test_name} ${TEST_BLENDER_EXE}\n    --python-expr \"import sys; sys.path.append('${CMAKE_CURRENT_LIST_DIR}')\"\n    --python-exit-code 1\n    --python ${CMAKE_CURRENT_LIST_DIR}/test_${test_name}.py --\n    --testdir=\"${TEST_SRC_DIR}/layers\"\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Handling Playback Status with Audaspace in Python\nDESCRIPTION: Uses a loop to monitor the `status` property of the `aud.Handle` to determine if playback has finished, ensuring audio is fully played.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwhile handle.status:\n\ttime.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Build Options in CMake\nDESCRIPTION: Sets up build options for Blender, including Python module support, executable creation, and platform-specific configurations. Defines target properties and output directories based on build type.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\n\n  add_library(blender MODULE ${SRC})\n\n  get_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  if(GENERATOR_IS_MULTI_CONFIG)\n    set(BPY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/$<CONFIG>/bpy)\n  else()\n    set(BPY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/bpy)\n  endif()\n\n  set_target_properties(\n    blender\n    PROPERTIES\n      PREFIX \"\"\n      OUTPUT_NAME __init__\n      LIBRARY_OUTPUT_DIRECTORY ${BPY_OUTPUT_DIRECTORY}\n      RUNTIME_OUTPUT_DIRECTORY ${BPY_OUTPUT_DIRECTORY}\n  )\n  unset(BPY_OUTPUT_DIRECTORY)\n\n  if(APPLE)\n    set_target_properties(blender PROPERTIES MACOSX_BUNDLE TRUE)\n    if(WITH_BLENDER_THUMBNAILER)\n      set_target_properties(blender-thumbnailer PROPERTIES MACOSX_BUNDLE TRUE)\n    endif()\n  endif()\n\n  if(WIN32)\n    set_target_properties(\n      blender\n      PROPERTIES\n      SUFFIX \".pyd\"\n    )\n  endif()\n\nelse()\n  add_executable(blender ${EXETYPE} ${SRC})\n  if(WITH_CPU_CHECK)\n    target_link_libraries(blender PRIVATE blender_cpu_check)\n  endif()\n  if(WIN32)\n    add_executable(blender-launcher WIN32\n      blender_launcher_win32.c\n      ${CMAKE_SOURCE_DIR}/release/windows/icons/winblender.rc\n    )\n    if(NOT WITH_WINDOWS_EXTERNAL_MANIFEST)\n      target_sources(blender-launcher PRIVATE\n        ${CMAKE_BINARY_DIR}/blender.exe.manifest\n      )\n    endif()\n    target_compile_definitions(blender-launcher PRIVATE -D_UNICODE -DUNICODE)\n    target_link_libraries(blender-launcher Pathcch.lib)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Circular Sound Motion with Audaspace in Python\nDESCRIPTION: Updates sound position dynamically in a circle by modifying the `location` property of `aud.Handle` based on trigonometric calculations, achieving realistic 3D audio effects.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstart = time.time()\n\nwhile time.time() - start < 10:\n\tangle = time.time() - start\n\n\thandle.location = [math.sin(angle), 0, -math.cos(angle)]\n```\n\n----------------------------------------\n\nTITLE: Conditional Backend Configuration\nDESCRIPTION: Configures optional backend support including OpenGL and Vulkan. Adds necessary include directories and libraries based on enabled features.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n\nif(WITH_VULKAN_BACKEND)\n  if(WITH_VULKAN_MOLTENVK)\n    list(APPEND INC_SYS\n      PUBLIC ${MOLTENVK_INCLUDE_DIRS}\n    )\n    list(APPEND LIB\n      ${MOLTENVK_LIBRARIES}\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Alembic Support for Blender Modifiers\nDESCRIPTION: Adds Alembic support to the modifiers module if Blender is built with Alembic support, including appropriate include directories and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC\n    ../io/alembic\n  )\n  list(APPEND LIB\n    bf_io_alembic\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Custom Macros for Google Test Threading - C++\nDESCRIPTION: This excerpt provides information about threading macros in the Google Test framework. It covers the conditions under which certain macros should be enabled and the related declarations required.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/include/gtest/internal/custom/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Threading:\n//   `GTEST_HAS_NOTIFICATION_` - Enabled if Notification is already provided.\n//   `GTEST_HAS_MUTEX_AND_THREAD_LOCAL_` - Enabled if `Mutex` and `ThreadLocal` are already provided.\n//   Must also provide `GTEST_DECLARE_STATIC_MUTEX_(mutex)` and `GTEST_DEFINE_STATIC_MUTEX_(mutex)`\n//   `GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)`\n//   `GTEST_LOCK_EXCLUDED_(locks)`\n```\n\n----------------------------------------\n\nTITLE: Setting Up FFMPEG Test Suite\nDESCRIPTION: Configures test suites for FFMPEG functionality when both testing and FFMPEG codec support are enabled. Includes tests for codecs and CPU flags.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS AND WITH_CODEC_FFMPEG)\n  set(TEST_SRC\n    tests/ffmpeg_codecs.cc\n    tests/ffmpeg_cpu_flags.cc\n  )\n  set(TEST_INC\n    intern\n  )\n  set(TEST_INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n  )\n  set(TEST_LIB\n    ${FFMPEG_LIBRARIES}\n  )\n  if(WITH_IMAGE_OPENJPEG)\n    set(TEST_LIB ${TEST_LIB} ${OPENJPEG_LIBRARIES})\n  endif()\n  blender_add_test_suite_lib(ffmpeg_libs \"${TEST_SRC}\" \"${TEST_INC}\" \"${TEST_INC_SYS}\" \"${TEST_LIB}\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding MaterialX Support Conditionally\nDESCRIPTION: Conditionally adds MaterialX support when WITH_MATERIALX is enabled, including adding the necessary definition and linking against the MaterialXCore library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MATERIALX)\n  add_definitions(-DWITH_MATERIALX)\n  list(APPEND LIB MaterialXCore)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Assertion Behavior\nDESCRIPTION: This code configures debug assertion behavior for different build types, enabling or disabling NDEBUG (no debug) flags based on the WITH_ASSERT_RELEASE option and build configuration type.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\n# -------------------------------------------------------------------------------\n# Global Defines\n\nif(WITH_ASSERT_ABORT)\n  add_definitions(-DWITH_ASSERT_ABORT)\nendif()\n\n# NDEBUG is the standard C define to disable asserts.\nif(WITH_ASSERT_RELEASE)\n  # CMake seemingly be setting the NDEBUG flag on its own already on some configurations\n  # therefore we need to remove the flags if they happen to be set.\n  remove_cc_flag(\"-DNDEBUG\") # GCC/CLang\n  remove_cc_flag(\"/DNDEBUG\") # MSVC\nelse()\n  set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS\n    $<$<CONFIG:Release>:NDEBUG>\n    $<$<CONFIG:MinSizeRel>:NDEBUG>\n    $<$<CONFIG:RelWithDebInfo>:NDEBUG>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AVX2 Optimization for Transform Operations in CMake\nDESCRIPTION: Sets special compilation flags for the transform_avx2.cpp file when AVX2 support is available, enabling specialized SIMD optimizations.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/util/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CXX_HAS_AVX2)\n  set_source_files_properties(transform_avx2.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_AVX2_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Thresholding Sine to Square Wave with Audaspace in Python\nDESCRIPTION: Converts a sine wave into a square wave using the `threshold` function in Audaspace. This effect showcases sound transformation capabilities provided by the library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsquare = sine.threshold()\n```\n\n----------------------------------------\n\nTITLE: Creating the USD Integration Library\nDESCRIPTION: Calls the Blender-specific function to create the USD integration library (bf_io_usd) using the previously defined source files, include directories, and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_usd \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for BMesh Python API in CMake\nDESCRIPTION: Specifies the libraries required for linking the BMesh Python API, including Blender's internal libraries and Python libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/bmesh/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  bf_python_mathutils\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Window System Configuration\nDESCRIPTION: Sets up platform-specific window system implementations for X11, Wayland, SDL, and Cocoa (macOS). Includes relevant source files and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nelseif(WITH_GHOST_SDL)\n  list(APPEND SRC\n    intern/GHOST_ContextSDL.cc\n    intern/GHOST_DisplayManagerSDL.cc\n    intern/GHOST_SystemSDL.cc\n    intern/GHOST_WindowSDL.cc\n  )\n  add_definitions(-DWITH_GHOST_SDL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Object Editor\nDESCRIPTION: Lists all source files that comprise the object editor module, including operations for modifiers, baking, constraints, and transformations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/object/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  add_modifier_assets.cc\n  object_add.cc\n  object_bake.cc\n  object_bake_api.cc\n  object_bake_simulation.cc\n  object_collection.cc\n  object_constraint.cc\n  object_data_transfer.cc\n  object_data_transform.cc\n  object_edit.cc\n  object_hook.cc\n  object_light_linking_ops.cc\n  object_modes.cc\n  object_modifier.cc\n  object_multires_modifier.cc\n  object_ops.cc\n  object_random.cc\n  object_relations.cc\n  object_remesh.cc\n  object_select.cc\n  object_shader_fx.cc\n  object_shapekey.cc\n  object_transform.cc\n  object_utils.cc\n  object_vgroup.cc\n  object_visual_geometry_to_objects.cc\n  object_volume.cc\n  object_warp.cc\n\n  object_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Build Configuration-Specific Compiler Flags for oneAPI in CMake\nDESCRIPTION: Sets up different compiler flags for Release, Debug, and RelWithDebInfo build configurations. Release mode includes NDEBUG definition, Debug mode includes debug symbols and Microsoft Debug definitions on Windows, and RelWithDebInfo combines optimization with debug information.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n  # Create CONFIG specific compiler flags.\n  set(sycl_compiler_flags_Release ${sycl_compiler_flags})\n  set(sycl_compiler_flags_Debug ${sycl_compiler_flags})\n  set(sycl_compiler_flags_RelWithDebInfo ${sycl_compiler_flags})\n\n  list(APPEND sycl_compiler_flags_Release\n    -DNDEBUG\n  )\n  list(APPEND sycl_compiler_flags_RelWithDebInfo\n    -DNDEBUG\n    -g\n  )\n  list(APPEND sycl_compiler_flags_Debug\n    -g\n  )\n\n  if(WIN32)\n    list(APPEND sycl_compiler_flags_Debug\n      -D_DEBUG\n      -nostdlib\n      -Xclang --dependent-lib=msvcrtd\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Optional Features in CMake\nDESCRIPTION: Sets up conditional compilation flags and additional dependencies for optional features like OpenColorIO, OpenEXR, OpenImageDenoise, and FFTW3.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/composite/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  add_definitions(-DOIDN_STATIC_LIB)\n  list(APPEND INC_SYS\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n    ${TBB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n    ${TBB_LIBRARIES}\n  )\nendif()\n\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFTW3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features for Blender Modifiers\nDESCRIPTION: Adds support for experimental features in the modifiers module, specifically the simulation datablock feature.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Function Nodes\nDESCRIPTION: Defines include directories for the function nodes module build, including local and parent directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/function/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio Device with Audaspace in Python\nDESCRIPTION: The snippet demonstrates how to initialize an audio output device using the Audaspace library. An `aud.Device` object is allocated to start audio processing.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndevice = aud.Device()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Bindings in CMake\nDESCRIPTION: Sets up compilation and linking for Python bindings if WITH_PYTHON is enabled. Includes additional bindings for FFTW when available. Configures Python module installation if WITH_PYTHON_MODULE is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n\tset(PYTHON_SRC\n\t\tbindings/python/PyAPI.cpp\n\t\tbindings/python/PyDevice.cpp\n\t\t# ... (additional Python source files)\n\t)\n\tset(PYTHON_HDR\n\t\tbindings/python/PyAPI.h\n\t\tbindings/python/PyDevice.h\n\t\t# ... (additional Python header files)\n\t)\n\n\tif(WITH_FFTW)\n\t\tlist(APPEND PYTHON_SRC\n\t\t\tbindings/python/PyHRTF.cpp\n\t\t\tbindings/python/PyImpulseResponse.cpp\n\t\t\t)\n\t\tlist(APPEND PYTHON_HDR\n\t\t\tbindings/python/PyHRTF.h\n\t\t\tbindings/python/PyImpulseResponse.h\n\t\t\t)\n\tendif()\n\n\tadd_library(audaspace-py ${LIBRARY_TYPE} ${PYTHON_SRC} ${PYTHON_HDR})\n\ttarget_link_libraries(audaspace-py audaspace ${PYTHON_LIBRARIES})\n\tset_target_properties(audaspace-py PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\n\t# ... (additional installation and module setup)\n\n\tif(WITH_PYTHON_MODULE)\n\t\tset(PYTHON_SOURCE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bindings/python)\n\t\tconfigure_file(${PYTHON_SOURCE_DIRECTORY}/setup.py.in ${CMAKE_CURRENT_BINARY_DIR}/setup.py ESCAPE_QUOTES @ONLY)\n\n\t\t# ... (platform-specific build commands)\n\n\t\tadd_custom_target(pythonmodule ALL DEPENDS build SOURCES ${PYTHON_SOURCE_DIRECTORY}/setup.py.in ${PYTHON_SRC} ${PYTHON_HDR})\n\t\tadd_dependencies(pythonmodule audaspace)\n\n\t\tinstall(CODE \"EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} setup.py install --root=\\$ENV{DESTDIR} --prefix=${CMAKE_INSTALL_PREFIX})\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Address Sanitizer Configuration\nDESCRIPTION: Configures Address Sanitizer (ASAN) options for debugging and testing, including compiler flags and library detection for different platforms.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  if(WITH_COMPILER_ASAN)\n    set(_asan_defaults \"\\\n-fsanitize=address \\\n-fsanitize=bool \\\n-fsanitize=bounds \\\n-fsanitize=enum \\\n-fsanitize=float-cast-overflow \\\n-fsanitize=float-divide-by-zero \\\n-fsanitize=nonnull-attribute \\\n-fsanitize=returns-nonnull-attribute \\\n-fsanitize=signed-integer-overflow \\\n-fsanitize=undefined \\\n-fsanitize=vla-bound \\\n-fno-sanitize=alignment \\\n\")\n\n    set(COMPILER_ASAN_CFLAGS \"${_asan_defaults}\" CACHE STRING \"C flags for address sanitizer\")\n    mark_as_advanced(COMPILER_ASAN_CFLAGS)\n    set(COMPILER_ASAN_CXXFLAGS \"${_asan_defaults}\" CACHE STRING \"C++ flags for address sanitizer\")\n    mark_as_advanced(COMPILER_ASAN_CXXFLAGS)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Validation and Package Finding\nDESCRIPTION: This code validates Python includes and finds required Python packages like NumPy, requests, and zstandard based on build configuration settings.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\n# ensure python header is found since detection can fail, this could happen\n# with _any_ library but since we used a fixed python version this tends to\n# be most problematic.\nif(WITH_PYTHON)\n  if(NOT EXISTS \"${PYTHON_INCLUDE_DIR}/Python.h\")\n    message(\n      FATAL_ERROR\n      \"Missing: \\\"${PYTHON_INCLUDE_DIR}/Python.h\\\",\\n\"\n      \"Set the cache entry 'PYTHON_INCLUDE_DIR' to point \"\n      \"to a valid python include path. Containing \"\n      \"Python.h for python version \\\"${PYTHON_VERSION}\\\"\"\n    )\n  endif()\n\n  if(WIN32)\n    # Always use numpy bundled in precompiled libs.\n  elseif((WITH_PYTHON_INSTALL AND WITH_PYTHON_INSTALL_NUMPY) OR WITH_PYTHON_NUMPY)\n    if((\"${PYTHON_NUMPY_PATH}\" STREQUAL \"\") OR (${PYTHON_NUMPY_PATH} MATCHES NOTFOUND))\n      set(_numpy_include \"_core/include\")\n      if(PYTHON_VERSION VERSION_LESS \"3.13\")\n        set(_numpy_include \"core/include\")\n      endif()\n      find_python_package(numpy \"${_numpy_include}\")\n      unset(_numpy_include)\n    endif()\n  endif()\n\n  if(WIN32 OR APPLE)\n    # Always copy from precompiled libs.\n  elseif(WITH_PYTHON_INSTALL_REQUESTS)\n    find_python_package(requests \"\")\n  endif()\n\n  if(WIN32 OR APPLE)\n    # Always copy from precompiled libs.\n  elseif(WITH_PYTHON_INSTALL_ZSTANDARD)\n    find_python_package(zstandard \"\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Efficient Item Removal from List\nDESCRIPTION: Shows an efficient way to remove items from a list by iterating backwards and using pop().\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlist_index = len(my_list)\n\nwhile list_index:\n    list_index -= 1\n    if my_list[list_index].some_test_attribute == 1:\n        my_list.pop(list_index)\n```\n\n----------------------------------------\n\nTITLE: Windows VM Preparation Script for Blender Development\nDESCRIPTION: Batch script to automatically install build tools, dependencies, and clone Blender repository on a clean Windows installation. Installs Visual Studio 2019 Build Tools, Git, CMake, Meson, CUDA, and HIP SDK.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/windows/vmprep.cmd.txt#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n@echo off\nREM  ###########################################################################\nREM  #\nREM  # Note: This file has a .txt extention so it cannot be directly run from a \nREM  # blender source clone, it is meant to run on a clean windows install and\nREM  # nothing else. DO NOT REMOVE THE .TXT extention. See instructions below on\nREM  # how to execute this script. \nREM  #\nREM  ###########################################################################\n```\n\n----------------------------------------\n\nTITLE: OpenGL Function - glIsEnabled\nDESCRIPTION: Tests whether a specified OpenGL capability is enabled. Takes an enumerated constant parameter representing the capability to test.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nglIsEnabled(cap)\n```\n\n----------------------------------------\n\nTITLE: Building IMBuf Library and Test Suite in CMake\nDESCRIPTION: This CMake code snippet sets up the compilation of the IMBuf library, creates an alias target, and conditionally adds a test suite if WITH_GTESTS is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_imbuf \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::imbuf ALIAS bf_imbuf)\n\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/IMB_scaling_test.cc\n    tests/IMB_transform_test.cc\n  )\n  blender_add_test_suite_lib(imbuf \"${TEST_SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n  add_subdirectory(tests/performance)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for STL Module in Blender with CMake\nDESCRIPTION: Defines the include directories for the STL module, including local directories and external dependencies. This includes paths for the importer, exporter, and internal components, as well as common Blender directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/stl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  exporter\n  importer\n  intern\n  ../common\n  ../../editors/include\n  ../../makesrna\n)\n\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support for Cycles in CMake\nDESCRIPTION: Sets up OpenVDB volume support for Cycles if the WITH_OPENVDB option is enabled. This includes adding the necessary include directories, compilation definitions, and linking against OpenVDB libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC\n    ../../openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including 3D Related Library Dependencies in CMake\nDESCRIPTION: Includes modules for building libraries related to 3D geometry, subdivision surfaces, and scene file formats. These libraries are essential for Blender's core 3D functionality and asset handling.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/alembic.cmake)\ninclude(cmake/opensubdiv.cmake)\ninclude(cmake/sdl.cmake)\ninclude(cmake/opencollada.cmake)\n```\n\n----------------------------------------\n\nTITLE: CMake Data File Processing\nDESCRIPTION: Processes additional Blender data files including preview blends, splash images, and startup files into C source code.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ndata_to_c_simple(../../../../release/datafiles/preview.blend SRC)\ndata_to_c_simple(../../../../release/datafiles/preview_grease_pencil.blend SRC)\ndata_to_c_simple(../../../../release/datafiles/splash.png SRC)\ndata_to_c_simple(../../../../release/datafiles/startup.blend SRC)\n```\n\n----------------------------------------\n\nTITLE: Including TBB Headers in CMake for Cycles\nDESCRIPTION: Adds TBB (Threading Building Blocks) include directories to the project.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  SYSTEM\n  ${TBB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Windows-Specific Files and Shared Libraries in CMake\nDESCRIPTION: This large snippet handles the installation of various Windows-specific files and shared libraries, including manifests, DLLs for different libraries, and debug symbols.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_WINDOWS_EXTERNAL_MANIFEST)\n  install(\n    FILES ${CMAKE_BINARY_DIR}/blender.exe.manifest\n    DESTINATION \".\"\n  )\n  install(\n    FILES ${CMAKE_BINARY_DIR}/blender.exe.manifest\n    DESTINATION \".\"\n    RENAME blender-launcher.exe.manifest\n  )\nendif()\nwindows_install_shared_manifest(\n  FILES ${LIBDIR}/epoxy/bin/epoxy-0.dll\n  ALL\n)\n\nif(WITH_VULKAN_BACKEND)\n  windows_install_shared_manifest(\n    FILES ${LIBDIR}/vulkan/bin/vulkan-1.dll\n    ALL\n  )\nendif()\n\n# ... [truncated for brevity] ...\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Editor\nDESCRIPTION: Lists the source files required for building the editor space buttons component, including both implementation and header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_buttons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  buttons_context.cc\n  buttons_ops.cc\n  buttons_texture.cc\n  space_buttons.cc\n\n  buttons_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Module Support in CMake for Blender\nDESCRIPTION: Adds a definition for shared Python library if WITH_PYTHON_MODULE is enabled. This is crucial for building Blender with Python module support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DPy_ENABLE_SHARED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating BVH Library for Cycles in CMake\nDESCRIPTION: Builds the BVH library for Cycles using the defined sources, headers, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncycles_add_library(cycles_bvh \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Sequencer Editor\nDESCRIPTION: Specifies the internal Blender libraries that the Sequencer Editor module depends on.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_sequencer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_interface\n  bf_editor_util\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: TBB Configuration for Windows in CMake\nDESCRIPTION: Handles Windows-specific configuration for Intel Threading Building Blocks (TBB). Adds a NOMINMAX definition to prevent conflicts between Windows.h min/max macros and STL versions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Object Editor\nDESCRIPTION: Defines the include paths for the object editor module compilation, including internal Blender directories and generated RNA prototypes path.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/object/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../ikplugin\n  ../../makesrna\n  ../../modifiers\n  ../../nodes\n  ../../python\n  ../../shader_fx\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamic Libraries for OneAPI Runtime in CMake\nDESCRIPTION: Sets up delayed installation of the OneAPI kernel dynamic libraries to the appropriate runtime path, and creates a build target for the OneAPI kernel.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n# install dynamic libraries required at runtime\ndelayed_install(\"\" \"${cycles_kernel_oneapi_lib}\" ${cycles_kernel_runtime_lib_target_path})\n\nadd_custom_target(cycles_kernel_oneapi ALL DEPENDS ${cycles_kernel_oneapi_lib})\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies - CMake\nDESCRIPTION: Conditional configuration for optional features like Alembic, OSL, GUI support, and USD integration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC_SYS\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${ALEMBIC_LIBRARIES}\n  )\nendif()\n\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB cycles_kernel_osl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Blender Geometry Library in CMake\nDESCRIPTION: Adds the Blender geometry library target with all the configured sources, include directories, and libraries, and creates an alias for convenient linking.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_geometry \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::geometry ALIAS bf_geometry)\n```\n\n----------------------------------------\n\nTITLE: Including XR and GPU Computing Libraries in CMake\nDESCRIPTION: Conditionally includes XR (Extended Reality) and GPU computing libraries like OpenXR and HIP/DPCPP when not on Apple platforms and not on ARM architecture. These provide VR support and accelerated computing capabilities.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  include(cmake/xr_openxr.cmake)\n  if(NOT BLENDER_PLATFORM_ARM)\n    # HIP-RT requires special SDK which is not widely available yet.\n    if(NOT WIN32)\n      include(cmake/hiprt.cmake)\n    endif()\n    include(cmake/dpcpp.cmake)\n    include(cmake/dpcpp_deps.cmake)\n    if(NOT WIN32)\n      include(cmake/igc.cmake)\n      include(cmake/gmmlib.cmake)\n      include(cmake/ocloc.cmake)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Sequencer in CMake\nDESCRIPTION: Sets up include directories for the Blender sequencer library, including public and internal headers, as well as related components like animrig and makesrna.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/sequencer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n  ../animrig\n  ../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Cycles in CMake\nDESCRIPTION: Creates the Cycles library target, adds RNA dependency, and sets up the installation of Python addon files. This finalizes the build configuration for the Cycles rendering engine integration in Blender.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_cycles \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nadd_dependencies(bf_intern_cycles bf_rna)\n\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${ADDON_FILES}\" ${CYCLES_INSTALL_PATH})\n```\n\n----------------------------------------\n\nTITLE: Printing with colors and text styles using fmt\nDESCRIPTION: This snippet illustrates how to use the fmt library to print colored text and apply styles such as bold or underline in the terminal output.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/color.h>\n\nint main() {\n  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,\n             \"Hello, {}!\\n\", \"world\");\n  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |\n             fmt::emphasis::underline, \"Hello, {}!\\n\", \"мир\");\n  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,\n             \"Hello, {}!\\n\", \"世界\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Brush Texture Properties\nDESCRIPTION: Examples demonstrating how to access texture properties of the active sculpt brush through context and direct data access.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_api_reference.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.tool_settings.sculpt.brush.texture.contrast\n\nbpy.data.textures[\"Texture\"].contrast\n```\n\n----------------------------------------\n\nTITLE: Generating and Evaluating Points in a Mesh - OpenGL - Python\nDESCRIPTION: The glEvalPoint function generates and evaluates a single point in a mesh based on grid domain variables i and j. It has specific data type requirements for its parameters.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glEvalPoint (i, j):\n\n   B{glEvalPoint1 and glEvalPoint2}\n\n   Generate and evaluate a single point in a mesh\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glEvalPoint.xhtml>`__\n\n   :type i: int\n   :arg i: Specifies the integer value for grid domain variable i.\n   :type j: int (only with '2' prototypes)\n   :arg j: Specifies the integer value for grid domain variable j (glEvalPoint2 only).\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependencies to View3D Editor in CMake\nDESCRIPTION: Ensures that RNA (Runtime API) code generation completes before building the View3D editor component by adding an explicit dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_space_view3d bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Simulation Library\nDESCRIPTION: Lists all source and header files needed for the simulation library, including mass-spring system, hair volume, and implicit solvers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/simulation/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/SIM_mass_spring.cc\n  intern/hair_volume.cc\n  intern/implicit_blender.cc\n  intern/implicit_eigen.cc\n\n  intern/ConstrainedConjugateGradient.h\n  intern/eigen_utils.h\n  intern/implicit.h\n\n  SIM_mass_spring.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alembic Support for Cycles in CMake\nDESCRIPTION: Sets up Alembic support for Cycles if the WITH_ALEMBIC option is enabled. This allows the renderer to work with Alembic format geometry by adding the necessary include directories and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC_SYS\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${ALEMBIC_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: MaterialX Integration Configuration\nDESCRIPTION: Conditional compilation setup for MaterialX integration, including additional source files and dependencies when MaterialX support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/shader/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MATERIALX)\n  add_definitions(-DWITH_MATERIALX)\n  list(APPEND SRC\n    materialx/group_nodes.cc\n    materialx/material.cc\n    materialx/node_graph.cc\n    materialx/node_item.cc\n    materialx/node_parser.cc\n\n    materialx/group_nodes.h\n    materialx/material.h\n    materialx/node_graph.h\n    materialx/node_item.h\n    materialx/node_parser.h\n  )\n  list(APPEND LIB\n    MaterialXCore\n    MaterialXFormat\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Cycles Scene Library\nDESCRIPTION: Final configuration step that sets up include directories and creates the Cycles scene library target with all configured sources and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/scene/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_scene \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Building Makesdna Executable\nDESCRIPTION: Configures and builds the makesdna executable which generates DNA type information. Sets up source files, include directories, and links required libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesdna/intern/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(makesdna ${SRC} ${SRC_DNA_INC})\nsetup_platform_linker_flags(makesdna)\nsetup_platform_linker_libs(makesdna)\nblender_target_include_dirs(makesdna ${INC})\nblender_target_include_dirs_sys(makesdna ${INC_SYS})\ntarget_link_libraries(makesdna ${LIB})\n```\n\n----------------------------------------\n\nTITLE: Configuring Audaspace Support for Blender Sequencer Editor\nDESCRIPTION: Adds Audaspace library support if enabled, including necessary include directories and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_sequencer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Hydra Render Engine Library and Dependencies in CMake\nDESCRIPTION: Creates the Blender Hydra render engine library using the defined sources, includes, and dependencies. Also adds a dependency on the RNA generation step.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/hydra/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_render_hydra \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nadd_dependencies(bf_render_hydra bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for UV SLIM Feature in CMake\nDESCRIPTION: Adds the UV SLIM library and definition if the WITH_UV_SLIM option is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/uvedit/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_UV_SLIM)\n  list(APPEND LIB\n    bf_intern_slim\n  )\n  add_definitions(-DWITH_UV_SLIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Compilation Flags for Blender Interface Library in CMake\nDESCRIPTION: Sets up conditional compilation flags based on various build options like internationalization support, headless mode, Python support, and input method support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/interface/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nendif()\n\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n\nif(WITH_INPUT_IME)\n  add_definitions(-DWITH_INPUT_IME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Precompiled Headers for USD\nDESCRIPTION: Conditionally sets up precompiled headers for the USD module if the target_precompile_headers command is available, which can significantly improve build times.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(COMMAND target_precompile_headers)\n  target_precompile_headers(bf_io_usd PRIVATE intern/usd_precomp.hh)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Configuration\nDESCRIPTION: Sets up conditional compilation flags for optional features like build info, FFMPEG support, and Alembic integration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenloader/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WITH_ALEMBIC)\n  list(APPEND INC\n    ../io/alembic\n  )\n  add_definitions(-DWITH_ALEMBIC)\nendif()\n\nif(WIN32)\n  add_definitions(-DNOMINMAX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding bf_rna Library to Blender Build in CMake\nDESCRIPTION: Calls the blender_add_lib function to add the bf_rna library to the Blender build system, specifying the source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_rna \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Image Editor Space\nDESCRIPTION: Specifies the library dependencies for the image editor space, including various Blender-specific libraries and modules.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_image/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_uvedit\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific OSL and OpenColorIO Installation\nDESCRIPTION: Handles installation of OSL (Open Shading Language) and OpenColorIO DLLs and Python packages on Windows. Includes both debug and release configurations.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  if(EXISTS ${LIBDIR}/osl/lib/python${PYTHON_VERSION}/site-packages/oslquery) # 4.4+\n    install(\n      DIRECTORY ${LIBDIR}/osl/lib/python${PYTHON_VERSION}/site-packages/oslquery\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n      CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n    )\n    install(\n      DIRECTORY ${LIBDIR}/osl/lib/python${PYTHON_VERSION}_debug/site-packages/oslquery\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n      CONFIGURATIONS Debug\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Memory Deallocation Function in C\nDESCRIPTION: Function for freeing allocated memory blocks, returns status code indicating success or failure.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nshort MEM_freeN(void *vmemh);\n```\n\n----------------------------------------\n\nTITLE: Running PolyMender in Command Line\nDESCRIPTION: Demonstrates the usage syntax for running PolyMender from the command line. It shows the required arguments including input file, octree depth, scale, and output file.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/intern/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:   PolyMender <input_file> <octree_depth> <scale> <output_file>\\n\\nExample: PolyMender bunny.ply 6 0.9 closedbunny.ply\n```\n\n----------------------------------------\n\nTITLE: Including Core CMake Configuration Modules for Blender Dependencies\nDESCRIPTION: Includes essential CMake modules for configuring the build environment, checking software requirements, setting build options, and defining dependency versions. These modules establish the foundation for the dependency build process.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/check_software.cmake)\ninclude(cmake/options.cmake)\n# `versions.cmake` needs to be included after `options.cmake`\n# due to the `BLENDER_PLATFORM_ARM` variable being needed.\ninclude(cmake/versions.cmake)\ninclude(cmake/download.cmake)\ninclude(cmake/macros.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenImageDenoise Support for Cycles in CMake\nDESCRIPTION: Sets up Intel OpenImageDenoise support for Cycles if the WITH_OPENIMAGEDENOISE option is enabled. This adds AI-accelerated denoising capabilities to the renderer by including the necessary headers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  list(APPEND INC_SYS\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Blender Draw Module in CMake\nDESCRIPTION: Lists all the header files (.hh and .h) that are part of the Blender draw module. This includes declarations for core drawing functionality, engine-specific headers, and various utility headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  # ... [previous source files]\n\n  DRW_engine.hh\n  DRW_pbvh.hh\n  DRW_select_buffer.hh\n  intern/DRW_gpu_wrapper.hh\n  intern/DRW_render.hh\n  # ... [truncated for brevity]\n  engines/workbench/workbench_shader_shared.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSL Support for Cycles in CMake\nDESCRIPTION: Sets up Open Shading Language (OSL) support for Cycles if the WITH_CYCLES_OSL option is enabled. This adds the ability to use OSL shaders in the renderer by linking against the OSL libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB\n    ${OSL_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows GHOST System Source Configuration\nDESCRIPTION: Configures source files for Windows-specific GHOST implementation including D3D context, window management, and input handling.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND SRC\n  intern/GHOST_ContextD3D.cc\n  intern/GHOST_DisplayManagerWin32.cc\n  intern/GHOST_DropTargetWin32.cc\n  intern/GHOST_SystemWin32.cc\n  intern/GHOST_TrackpadWin32.cc\n  intern/GHOST_WindowWin32.cc\n  intern/GHOST_Wintab.cc\n\n  intern/GHOST_ContextD3D.hh\n  intern/GHOST_DisplayManagerWin32.hh\n  intern/GHOST_DropTargetWin32.hh\n  intern/GHOST_SystemWin32.hh\n  intern/GHOST_TaskbarWin32.hh\n  intern/GHOST_TrackpadWin32.hh\n  intern/GHOST_WindowWin32.hh\n  intern/GHOST_Wintab.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Info Paths\nDESCRIPTION: Sets up paths for plugin information files, configuring relative paths differently depending on whether the plugin is built as part of Blender or standalone.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n  set(PLUG_INFO_ROOT \"..\")\n\n  if(WITH_CYCLES_BLENDER)\n    # Full path not yet know at this point and RELATIVE_PATH requires\n    # absolute path as input. So just set manually.\n    set(PLUG_INFO_LIBRARY_PATH \"../${HdCyclesPluginName}${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n    set(PLUG_INFO_RESOURCE_PATH \"../..\")\n  else()\n    file(RELATIVE_PATH\n      PLUG_INFO_LIBRARY_PATH\n      \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}\"\n      \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n    file(RELATIVE_PATH PLUG_INFO_RESOURCE_PATH\n      \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}\"\n      \"${CYCLES_INSTALL_PATH}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Fog Parameters - OpenGL - Python\nDESCRIPTION: The glFog function specifies fog parameters for rendering, allowing for different types of parameters depending on the function prototype used. It is crucial for creating atmospheric effects.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glFog (pname, param):\n\n   B{glFogf, glFogi, glFogfv, glFogiv}\n\n   Specify fog parameters\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glFog.xhtml>`__\n\n   :type pname: Enumerated constant\n   :arg pname: Specifies a single-valued fog parameter. If the function prototype\n      ends in 'v' specifies a fog parameter.\n   :type param: Depends on function prototype.\n   :arg param: Specifies the value or values to be assigned to pname. GL_FOG_COLOR\n      requires an array of four values. All other parameters accept an array containing\n      only a single value.\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for Blender Scene Editor in CMake\nDESCRIPTION: Specifies the library dependencies required for building the Blender scene editor module. Each dependency is marked as PRIVATE.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/scene/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Building Armature Editor Library\nDESCRIPTION: Creates the armature editor library target and sets up RNA dependency. Combines all previously defined components into the final library build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/armature/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_armature \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_armature bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Advanced Parsing with Custom Decimal Separator in C++\nDESCRIPTION: This snippet illustrates the use of an advanced parsing function that allows users to specify a custom decimal separator through a parse_options instance. An example is provided for parsing a number with a comma as the decimal separator.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"fast_float/fast_float.h\\\"\\n#include <iostream>\\n\\nint main() {\\n    const std::string input =  \\\"3,1416 xyz \\\";\\n    double result;\\n    fast_float::parse_options options{fast_float::chars_format::general, ','};\\n    auto answer = fast_float::from_chars_advanced(input.data(), input.data()+input.size(), result, options);\\n    if((answer.ec != std::errc()) || ((result != 3.1416))) { std::cerr << \\\"parsing failure\\n\\\"; return EXIT_FAILURE; }\\n    std::cout << \\\"parsed the number \\\" << result << std::endl;\\n    return EXIT_SUCCESS;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: CPU Shader Compilation Configuration\nDESCRIPTION: Configures optional CPU-based shader compilation with appropriate compiler flags and source compilation rules.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(overlay_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(overlay_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  # compile_sources_as_cpp(overlay_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(overlay_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenImageDenoise Configuration\nDESCRIPTION: Configures build settings for OpenImageDenoise integration including definitions and library linkage.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  add_definitions(-DOIDN_STATIC_LIB)\n  list(APPEND INC_SYS\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n    ${TBB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n    ${TBB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines required library dependencies for the depsgraph component using Blender's internal libraries\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/depsgraph/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::functions\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Editor Utility Library\nDESCRIPTION: Specifies the library dependencies for the Blender editor utility library. This includes various Blender subsystems such as animation, asset system, font handling, and more.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/util/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Windows-Specific Compiler Definitions for USD\nDESCRIPTION: Adds Windows-specific compiler definitions including NOMINMAX to prevent min/max macro conflicts, WIN32_LEAN_AND_MEAN to reduce Windows header size, and BOOST_DEBUG_PYTHON for Python debugging.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -DBOOST_DEBUG_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional TBB Library Configuration\nDESCRIPTION: Special handling for Threading Building Blocks (TBB) library integration, ensuring proper initialization order with MKL.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  # Force TBB libraries to be in front of MKL (part of `OpenImageDenoise`), so\n  # that it is initialized before MKL and static library initialization order issues are avoided.\n  #\n  # This isn't fully robust but seems to work.\n  list(INSERT LIB 0 ${TBB_LIBRARIES})\n  list(INSERT LIB 0 bf_blenkernel)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Grease Pencil Editor Library in CMake\nDESCRIPTION: Adds the Grease Pencil editor as a library to the Blender build system, specifying source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/grease_pencil/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_grease_pencil \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_dependencies(bf_editor_curves bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Enabling Min-cost Flow Solver in QuadriFlow\nDESCRIPTION: This command enables the adaptive network simplex minimum-cost flow solver by using the -mcf option within QuadriFlow. It is intended to optimize the flow calculation compared to the default flow solver. Dependencies include a compiled QuadriFlow binary with Boost library support.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -mcf -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Using fast_float with Non-ASCII UTF-16 Input in C++\nDESCRIPTION: This snippet demonstrates parsing a floating-point number from a UTF-16 encoded string using the fast_float library. It includes error handling and output similar to the standard ASCII example.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"fast_float/fast_float.h\\\"\\n#include <iostream>\\n\\nint main() {\\n    const std::u16string input =  u\\\"3.1416 xyz \\\";\\n    double result;\\n    auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\\n    if(answer.ec != std::errc()) { std::cerr << \\\"parsing failure\\n\\\"; return EXIT_FAILURE; }\\n    std::cout << \\\"parsed the number \\\" << result << std::endl;\\n    return EXIT_SUCCESS;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAL for Blender Audio\nDESCRIPTION: Sets up OpenAL dependency, source files, and build settings. Includes fallback options if the library is not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENAL)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(OpenAL ${PACKAGE_OPTION})\n\tendif()\n\n\tif(OPENAL_FOUND)\n\t\tset(OPENAL_SRC\n\t\t\tplugins/openal/OpenALDevice.cpp\n\t\t\tplugins/openal/OpenALReader.cpp\n\t\t)\n\t\tset(OPENAL_HDR\n\t\t\tplugins/openal/OpenALDevice.h\n\t\t\tplugins/openal/OpenALReader.h\n\t\t)\n\n\t\tif(NOT PLUGIN_OPENAL)\n\t\t\tlist(APPEND INCLUDE ${OPENAL_INCLUDE_DIR})\n\t\t\tlist(APPEND LIBRARIES ${OPENAL_LIBRARY})\n\t\t\tlist(APPEND SRC ${OPENAL_SRC})\n\t\t\tlist(APPEND HDR ${OPENAL_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS OpenALDevice)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB OPENAL_DLLS ${LIBRARY_PATH}/OpenAL/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${OPENAL_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_OPENAL FALSE CACHE BOOL \"Build With OpenAL\" FORCE)\n\t\telse()\n\t\t\tset(WITH_OPENAL FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"OpenAL not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Target Configuration\nDESCRIPTION: Sets up custom targets for code coverage reporting and reset functionality when compiler code coverage is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COMPILER_CODE_COVERAGE)\n  set(COVERAGE_SCRIPT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/coverage/coverage.py)\n\n  add_custom_target(coverage-report\n    ${PYTHON_EXECUTABLE} ${COVERAGE_SCRIPT_PATH} report --build-directory ${CMAKE_BINARY_DIR}\n    USES_TERMINAL\n  )\n\n  add_custom_target(coverage-reset\n    ${PYTHON_EXECUTABLE} ${COVERAGE_SCRIPT_PATH} reset --build-directory ${CMAKE_BINARY_DIR}\n    USES_TERMINAL\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Inefficient List Reversal in Python\nDESCRIPTION: Shows a suboptimal way of reversing a list by inserting items at the beginning.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreverse_list = []\nfor list_item in some_list:\n    reverse_list.insert(0, list_item)\n```\n\n----------------------------------------\n\nTITLE: OpenGL Function - glLightModel\nDESCRIPTION: Sets the lighting model parameters for OpenGL. Available in multiple variants (glLightModelf, glLightModeli, glLightModelfv, glLightModeliv) for different parameter types.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nglLightModel(pname, param)\n```\n\n----------------------------------------\n\nTITLE: Adding External Library Dependencies for USD Integration\nDESCRIPTION: Adds external library dependencies required by the USD module, including Boost Python, Python libraries, USD libraries, and TBB libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND LIB\n  ${BOOST_PYTHON_LIBRARIES}\n  ${PYTHON_LIBRARIES}\n  ${USD_LIBRARIES}\n  ${TBB_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Kernel Source for Runtime Compilation in CMake\nDESCRIPTION: Sets up delayed installation of kernel source files to enable runtime compilation, organizing them into appropriate directory structures for different kernel components and device backends.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\n# Install kernel source for runtime compilation\n\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_BAKE_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/bake)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_BVH_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/bvh)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_CAMERA_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/camera)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_CLOSURE_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/closure)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_CUDA}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/cuda)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_CUDA_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/cuda)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_GPU_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/gpu)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIP}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hip)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIP_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hip)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIPRT}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIPRT_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt)\nif(WITH_CYCLES_DEVICE_HIPRT)\n  delayed_install(${HIPRT_INCLUDE_DIR}      \"${SRC_KERNEL_DEVICE_HIPRT_SDK_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt/hiprt)\n  delayed_install(${HIPRT_INCLUDE_DIR}      \"${SRC_KERNEL_DEVICE_HIPRT_SDK}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt/hiprt/impl)\nendif()\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_OPTIX}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/optix)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_OPTIX_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/optix)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_METAL}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/metal)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_METAL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/metal)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_FILM_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/film)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_GEOM_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/geom)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_INTEGRATOR_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/integrator)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_LIGHT_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/light)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_OSL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/osl)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_SAMPLE_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/sample)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_SVM_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/svm)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_TYPES_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_UTIL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/util)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_UTIL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/util)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Action Editor in CMake\nDESCRIPTION: Ensures that the RNA headers are generated before building the Action Editor space.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_action/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_action bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequence for Music Notes in Python\nDESCRIPTION: This snippet shows initializing variables for note sequencing using `aud.Sequence`. It prepares the playback sequence for adding sounds.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nposition = 0\nsequence = aud.Sequence()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Draw Module in CMake\nDESCRIPTION: Sets up the include directories for the Blender draw module, including both public and internal paths. It covers various Blender subsystems like editors, GPU, RNA, render, and compositor.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n\n  ../editors/include\n  ../editors/space_view3d\n  ../gpu/intern\n  ../makesrna\n  ../render/intern\n  ../compositor\n  ../compositor/algorithms\n  ../compositor/cached_resources\n  ../compositor/derived_resources\n\n  ../../../intern/opensubdiv\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Compiler Flags for oneAPI in CMake\nDESCRIPTION: Adds Windows or Linux specific compiler flags to the SYCL compilation. For Windows, it includes Microsoft-specific flags and library paths. For Linux, it adds position-independent code flags and RPATH settings for library loading.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n  get_filename_component(sycl_compiler_root ${SYCL_COMPILER} DIRECTORY)\n\n  if(WIN32) # Add Windows specific compiler flags.\n    list(APPEND sycl_compiler_flags\n      -fms-extensions\n      -fms-compatibility\n      -D_WINDLL\n      -D_MBCS\n      -DWIN32\n      -D_WINDOWS\n      -D_CRT_NONSTDC_NO_DEPRECATE\n      -D_CRT_SECURE_NO_DEPRECATE\n      -DONEAPI_EXPORT\n    )\n\n    string(REPLACE /Redist/ /Tools/ MSVC_TOOLS_DIR ${MSVC_REDIST_DIR})\n    # Version Folder between Redist and Tools can mismatch sometimes\n    if(NOT EXISTS ${MSVC_TOOLS_DIR})\n      get_filename_component(cmake_ar_dir ${CMAKE_AR} DIRECTORY)\n      get_filename_component(MSVC_TOOLS_DIR \"${cmake_ar_dir}/../../../\" ABSOLUTE)\n    endif()\n    if(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)\n      set(WINDOWS_KIT_DIR ${WINDOWS_KITS_DIR}/Lib/${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION})\n    else() # case for Ninja on Windows\n      get_filename_component(cmake_mt_dir ${CMAKE_MT} DIRECTORY)\n      string(REPLACE /bin/ /Lib/ WINDOWS_KIT_DIR ${cmake_mt_dir})\n      get_filename_component(WINDOWS_KIT_DIR \"${WINDOWS_KIT_DIR}/../\" ABSOLUTE)\n    endif()\n    list(APPEND sycl_compiler_flags\n      -L\"${MSVC_TOOLS_DIR}/lib/x64\"\n      -L\"${WINDOWS_KIT_DIR}/um/x64\"\n      -L\"${WINDOWS_KIT_DIR}/ucrt/x64\"\n    )\n  else() # Add Linux specific compiler flags.\n    list(APPEND sycl_compiler_flags -fPIC)\n    list(APPEND sycl_compiler_flags -fvisibility=hidden)\n\n    # Add $ORIGIN to `cycles_kernel_oneapi.so` RPATH so `libsycl.so` and\n    # `libpi_level_zero.so` can be placed next to it and get found.\n    list(APPEND sycl_compiler_flags -Wl,-rpath,'$$ORIGIN')\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Vertex Shader Source Files\nDESCRIPTION: Defines the list of GLSL vertex shader source files for Grease Pencil functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_VERT\n  gpencil_antialiasing_vert.glsl\n  gpencil_depth_merge_vert.glsl\n  gpencil_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support for Mantaflow\nDESCRIPTION: Conditionally sets up OpenVDB support if enabled, adding necessary definitions, include directories, and libraries for OpenVDB integration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Animation Editor in CMake\nDESCRIPTION: Lists all the source files that comprise the animation editor module, including various animation-related operations and utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/animation/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  anim_asset_ops.cc\n  anim_channels_defines.cc\n  anim_channels_edit.cc\n  anim_deps.cc\n  anim_draw.cc\n  anim_filter.cc\n  anim_ipo_utils.cc\n  anim_markers.cc\n  anim_motion_paths.cc\n  anim_ops.cc\n  drivers.cc\n  fmodifier_ui.cc\n  keyframes_draw.cc\n  keyframes_edit.cc\n  keyframes_general.cc\n  keyframes_keylist.cc\n  keyframing.cc\n  keyingsets.cc\n  time_scrub_ui.cc\n\n  anim_intern.hh\n  keyframes_general_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Libraries for Cycles Device in CMake\nDESCRIPTION: Configures the list of libraries to link against for the Cycles device component. It includes conditional additions based on enabled device types and features.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/device/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  cycles_kernel\n  cycles_util\n)\n\nif(WITH_CYCLES_DEVICE_OPTIX OR WITH_CYCLES_DEVICE_CUDA)\n  if(WITH_CUDA_DYNLOAD)\n    list(APPEND LIB\n      extern_cuew\n    )\n  else()\n    list(APPEND LIB\n      ${CUDA_CUDA_LIBRARY}\n    )\n  endif()\nendif()\n\n# ... (similar blocks for HIP, Metal, oneAPI, OpenImageDenoise, OSL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal Backend Shader Sources\nDESCRIPTION: Defines GLSL shader sources specific to the Metal backend implementation\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(MTL_BACKEND_GLSL_SRC\n  metal/kernels/depth_2d_update_float_frag.glsl\n  metal/kernels/depth_2d_update_int24_frag.glsl\n  metal/kernels/depth_2d_update_int32_frag.glsl\n  metal/kernels/depth_2d_update_vert.glsl\n  metal/kernels/gpu_shader_fullscreen_blit_vert.glsl\n  metal/kernels/gpu_shader_fullscreen_blit_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration\nDESCRIPTION: Sets up test suite configuration for the sculpt paint module when testing is enabled, including test sources and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/sculpt_paint/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    mesh_brush_common_tests.cc\n    paint_test.cc\n    sculpt_detail_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    ${LIB}\n    bf_rna  # RNA_prototypes.hh\n  )\n  blender_add_test_suite_lib(editor_sculpt_paint \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling GNU STL Extensions for Clang Compatibility on Linux\nDESCRIPTION: Adds compatibility definitions for using Clang with pre-compiled Linux libraries that were made with GCC. This works around ABI incompatibility issues when using Clang.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    if(DEFINED LIBDIR)\n      add_definitions(-DARCH_HAS_GNU_STL_EXTENSIONS)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Animation Editor in CMake\nDESCRIPTION: Specifies the library dependencies required for building the animation editor module, including various Blender internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/animation/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal Backend in CMake\nDESCRIPTION: This snippet adds Metal-specific source files to the build if the Metal backend is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_METAL_BACKEND)\n  list(APPEND SRC ${METAL_SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Files for USD Integration\nDESCRIPTION: Conditionally sets up test files and test suite for the USD integration when WITH_GTESTS is enabled, including test source files, include directories, and test-specific libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/usd_export_test.cc\n    tests/usd_stage_creation_test.cc\n    tests/usd_usdz_export_test.cc\n    intern/usd_writer_material.hh\n  )\n\n  include_directories(intern)\n\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf_blenloader_test_util\n  )\n  blender_add_test_suite_lib(io_usd \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Point Cloud Editor Library in CMake\nDESCRIPTION: Adds the point cloud editor as a library to the Blender build system, specifying source files, include directories, and library dependencies. Also adds a dependency on the RNA generation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/pointcloud/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_pointcloud \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_dependencies(bf_editor_pointcloud bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Loading User Preferences and Startup File in Blender Python Module\nDESCRIPTION: This code snippet shows how to load user preferences and the startup file when using Blender as a Python module. It uses bpy.ops.wm.read_userpref() to load preferences and bpy.ops.wm.read_homefile() to load the startup file.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_advanced_blender_as_bpy.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\nbpy.ops.wm.read_userpref()\nbpy.ops.wm.read_homefile()\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Stencil in OpenGL with Python\nDESCRIPTION: Specifies the clear value for the stencil buffer using the glClearStencil function. The s parameter is an integer representing the stencil index.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nglClearStencil(s)\n```\n\n----------------------------------------\n\nTITLE: Installation Path Configuration\nDESCRIPTION: Sets up default installation paths based on the target platform and build configuration, with special handling for multi-config generators.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  if(WIN32)\n    set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH}/\\${BUILD_TYPE} CACHE PATH \"default install path\" FORCE)\n  elseif(APPLE)\n    set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH}/\\${BUILD_TYPE} CACHE PATH \"default install path\" FORCE)\n  else()\n    if(WITH_INSTALL_PORTABLE)\n      set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH} CACHE PATH \"default install path\" FORCE)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shader Node Source Files\nDESCRIPTION: Comprehensive list of shader node source files including various BSDF, texture, and utility nodes implemented in C++.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/shader/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_shader_add_shader.cc\n  nodes/node_shader_ambient_occlusion.cc\n  # ... [truncated for brevity]\n  node_shader_register.hh\n  node_shader_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Printing chrono durations with fmt\nDESCRIPTION: This code snippet demonstrates how to print durations using the fmt library by formatting standard duration types and showcasing time formatting options.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/chrono.h>\n\nint main() {\n  using namespace std::literals::chrono_literals;\n  fmt::print(\"Default format: {} {}\\n\", 42s, 100ms);\n  fmt::print(\"strftime-like format: {:%H:%M:%S}\\n\", 3h + 15min + 30s);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Blender Python Library\nDESCRIPTION: Adds the Blender Python library target with all the configured sources, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/intern/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_python \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_python bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Muting Sequence Entries with Audaspace in Python\nDESCRIPTION: Demonstrates muting of a sequence entry using `aud.SequenceEntry.muted`, allowing for dynamic audio track configurations during playback.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif char == 'p':\n\tentry.muted = True\n```\n\n----------------------------------------\n\nTITLE: Returning Error Information - OpenGL - Python\nDESCRIPTION: The glGetError function provides error information related to OpenGL operations, enabling developers to capture and handle any issues that arise during rendering.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetError():\n\n   Return error information\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetError.xhtml>`__\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Draw Module in CMake\nDESCRIPTION: Lists all the source files (.cc) that are part of the Blender draw module. This includes core drawing functionality, cache implementations, engine-specific code (e.g., EEVEE, Workbench), and various utility functions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/attribute_convert.cc\n  intern/draw_cache.cc\n  intern/draw_cache_extract_mesh.cc\n  intern/draw_cache_extract_mesh_render_data.cc\n  intern/mesh_extractors/extract_mesh.cc\n  # ... [truncated for brevity]\n  engines/overlay/overlay_shape.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Hydra Render Engine in CMake\nDESCRIPTION: Sets up library dependencies for the Blender Hydra render engine, including external libraries like Python, USD, and TBB, as well as internal Blender libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/hydra/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  ${Epoxy_LIBRARIES}\n  ${PYTHON_LIBRARIES}\n  ${USD_LIBRARIES}\n  ${TBB_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::depsgraph\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  bf_io_usd\n  PRIVATE bf::nodes\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Mantaflow Dependencies\nDESCRIPTION: Sets configuration options for Mantaflow dependencies like NUMPY support and external libraries with conditional compilation flags\nSOURCE: https://github.com/blender/blender/blob/main/extern/mantaflow/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(WITH_MANTA_DEPENDENCIES 0)\nset(WITH_MANTA_NUMPY 0)\n\nif(NOT WITH_MANTA_DEPENDENCIES)\n  add_definitions(-DNO_CNPY=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags (GCC/Clang)\nDESCRIPTION: This snippet checks if the compiler is GCC or Clang and adds or removes specific compiler flags. It disables the `-Wunused-result` warning and removes the `-Wmissing-declarations` warning.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \\\"Clang\\\")\n  add_c_flag(\n    \\\"-Wno-unused-result\\\"\n  )\n  remove_cc_flag(\n    \\\"-Wmissing-declarations\\\"\n  )\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Defining EEVEE Compute Shader Sources in CMake\nDESCRIPTION: Sets up a list of EEVEE compute shader source files for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_COMP\n  eevee_ambient_occlusion_pass_comp.glsl\n  eevee_depth_of_field_bokeh_lut_comp.glsl\n  eevee_depth_of_field_downsample_comp.glsl\n  eevee_depth_of_field_filter_comp.glsl\n  eevee_depth_of_field_gather_comp.glsl\n  eevee_depth_of_field_hole_fill_comp.glsl\n  eevee_depth_of_field_reduce_comp.glsl\n  eevee_depth_of_field_resolve_comp.glsl\n  eevee_depth_of_field_setup_comp.glsl\n  eevee_depth_of_field_stabilize_comp.glsl\n  eevee_depth_of_field_tiles_dilate_comp.glsl\n  eevee_depth_of_field_tiles_flatten_comp.glsl\n  eevee_film_comp.glsl\n  eevee_film_cryptomatte_post_comp.glsl\n  eevee_film_pass_convert_comp.glsl\n  eevee_hiz_update_comp.glsl\n  eevee_horizon_denoise_comp.glsl\n  eevee_horizon_resolve_comp.glsl\n  eevee_horizon_scan_comp.glsl\n  eevee_horizon_setup_comp.glsl\n  eevee_light_culling_select_comp.glsl\n  eevee_light_culling_sort_comp.glsl\n  eevee_light_culling_tile_comp.glsl\n  eevee_light_culling_zbin_comp.glsl\n  eevee_light_shadow_setup_comp.glsl\n  eevee_lightprobe_sphere_convolve_comp.glsl\n  eevee_lightprobe_sphere_irradiance_comp.glsl\n  eevee_lightprobe_sphere_remap_comp.glsl\n  eevee_lightprobe_sphere_select_comp.glsl\n  eevee_lightprobe_sphere_sunlight_comp.glsl\n  eevee_lightprobe_volume_bounds_comp.glsl\n  eevee_lightprobe_volume_load_comp.glsl\n  eevee_lightprobe_volume_offset_comp.glsl\n  eevee_lightprobe_volume_ray_comp.glsl\n  eevee_lightprobe_volume_world_comp.glsl\n  eevee_lut_comp.glsl\n  eevee_motion_blur_dilate_comp.glsl\n  eevee_motion_blur_flatten_comp.glsl\n  eevee_motion_blur_gather_comp.glsl\n  eevee_ray_denoise_bilateral_comp.glsl\n  eevee_ray_denoise_spatial_comp.glsl\n  eevee_ray_denoise_temporal_comp.glsl\n  eevee_ray_generate_comp.glsl\n  eevee_ray_tile_classify_comp.glsl\n  eevee_ray_tile_compact_comp.glsl\n  eevee_ray_trace_fallback_comp.glsl\n  eevee_ray_trace_planar_comp.glsl\n  eevee_ray_trace_screen_comp.glsl\n  eevee_shadow_clipmap_clear_comp.glsl\n  eevee_shadow_page_allocate_comp.glsl\n  eevee_shadow_page_clear_comp.glsl\n  eevee_shadow_page_defrag_comp.glsl\n  eevee_shadow_page_free_comp.glsl\n  eevee_shadow_page_mask_comp.glsl\n  eevee_shadow_tag_update_comp.glsl\n  eevee_shadow_tag_usage_comp.glsl\n  eevee_shadow_tag_usage_surfels_comp.glsl\n  eevee_shadow_tag_usage_volume_comp.glsl\n  eevee_shadow_tilemap_amend_comp.glsl\n  eevee_shadow_tilemap_bounds_comp.glsl\n  eevee_shadow_tilemap_finalize_comp.glsl\n  eevee_shadow_tilemap_init_comp.glsl\n  eevee_shadow_tilemap_rendermap_comp.glsl\n  eevee_shadow_visibility_comp.glsl\n  eevee_subsurface_convolve_comp.glsl\n  eevee_subsurface_setup_comp.glsl\n  eevee_surfel_cluster_build_comp.glsl\n  eevee_surfel_light_comp.glsl\n  eevee_surfel_list_build_comp.glsl\n  eevee_surfel_list_sort_comp.glsl\n  eevee_surfel_ray_comp.glsl\n  eevee_vertex_copy_comp.glsl\n  eevee_volume_integration_comp.glsl\n  eevee_volume_scatter_comp.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Options Configuration\nDESCRIPTION: Configures optional build features including build info, RenderDoc integration, and shader assertions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n\nif(WITH_RENDERDOC)\n  list(APPEND INC\n    ../../../extern/renderdoc/include\n    ../../../intern/renderdoc_dynload/include\n  )\n  add_definitions(-DWITH_RENDERDOC)\nendif()\n\nif(WITH_GPU_SHADER_ASSERT)\n  add_definitions(-DWITH_GPU_SHADER_ASSERT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Alembic I/O Library in Blender\nDESCRIPTION: Creates the Alembic I/O library target using Blender's custom CMake function, linking all required source files, includes, and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/alembic/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_alembic \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: OptiX PTX Kernel Compilation Macro\nDESCRIPTION: Macro for compiling NVIDIA OptiX PTX kernels with CUDA compiler. Includes configuration for OSL support and debug options.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(cycles_optix_kernel_add name input flags)\n  set(output \"${CMAKE_CURRENT_BINARY_DIR}/${name}.ptx\")\n  set(output_compressed \"${output}.zst\")\n\n  set(cuda_flags ${flags}\n    -I \"${OPTIX_INCLUDE_DIR}\"\n    -I \"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n    -I \"${CMAKE_CURRENT_SOURCE_DIR}/device/cuda\"\n    --use_fast_math\n    -Wno-deprecated-gpu-targets\n    -o ${output})\n\n  if(CUDA_HOST_COMPILER)\n    set(cuda_flags ${cuda_flags}\n      -ccbin=\"${CUDA_HOST_COMPILER}\")\n  endif()\n\n  if(WITH_NANOVDB)\n    set(cuda_flags ${cuda_flags}\n      -D WITH_NANOVDB)\n  endif()\n\n  if(WITH_CYCLES_OSL)\n    set(cuda_flags ${cuda_flags}\n      -D OSL_LIBRARY_VERSION_CODE=${OSL_LIBRARY_VERSION_CODE})\n  endif()\n\n  if(WITH_CYCLES_DEBUG)\n    set(cuda_flags ${cuda_flags} -D WITH_CYCLES_DEBUG)\n  endif()\n\n  add_custom_command(\n    OUTPUT\n      ${output}\n    DEPENDS\n      ${input}\n      ${SRC_KERNEL_HEADERS}\n      ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n      ${SRC_KERNEL_DEVICE_CUDA_HEADERS}\n      ${SRC_KERNEL_DEVICE_OPTIX_HEADERS}\n      ${SRC_UTIL_HEADERS}\n    COMMAND\n      ${CUDA_NVCC_EXECUTABLE}\n      --ptx\n      -arch=sm_50\n      ${cuda_flags}\n      ${input}\n    WORKING_DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}\"\n  )\n\n  add_custom_command(\n    OUTPUT ${output_compressed}\n    COMMAND \"$<TARGET_FILE:zstd_compress>\" ${output} ${output_compressed}\n    DEPENDS ${output})\n\n  list(APPEND optix_ptx ${output_compressed})\n\n  delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}\" \"${output_compressed}\" ${CYCLES_INSTALL_PATH}/lib)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Adding Action Editor Library in CMake\nDESCRIPTION: Creates the Action Editor library using the defined sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_action/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_action \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Interface Library in CMake\nDESCRIPTION: Specifies the libraries that the Blender interface library depends on, including various Blender components and external libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/interface/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  # ... (truncated for brevity)\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Device Support Configuration\nDESCRIPTION: Configures support for various compute devices including CUDA, OptiX, HIP, Metal, and OneAPI. Sets up include paths and definitions for enabled devices.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_CUDA OR WITH_CYCLES_DEVICE_OPTIX)\n  add_definitions(-DWITH_CUDA)\n  if(WITH_CUDA_DYNLOAD)\n    include_directories(\n      ../../extern/cuew/include\n    )\n    add_definitions(-DWITH_CUDA_DYNLOAD)\n  else()\n    include_directories(\n      SYSTEM\n      ${CUDA_TOOLKIT_INCLUDE}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Build Options for Audaspace Project\nDESCRIPTION: This snippet is part of a CMake configuration file for setting up various build options for the Audaspace project. It includes setup for different plugins like CoreAudio, FFMPEG, JACK, etc., across different platforms (Windows, Apple, etc.). Key dependencies include various audio libraries which can be configured optionally using CMake options. Parameters like WITH_FFMPEG and WITH_JACK toggle respective plugin builds, while MSVC-specific compiler options are defined appropriately. It handles configuration based on conditions and platform checks, uses CMake commands to find and setup library paths, and configures compiler flags for different systems.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(AUDASPACE_STANDALONE)\n\tset(PACKAGE_OPTION QUIET)\n\tlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake/\")\n\n\toption(BUILD_DEMOS \"Build and install demos\" TRUE)\n\toption(SHARED_LIBRARY \"Build Shared Library\" TRUE)\n\toption(WITH_C \"Build C Module\" TRUE)\n\toption(WITH_DOCS \"Build C++ HTML Documentation with Doxygen\" TRUE)\n\toption(WITH_FFMPEG \"Build With FFMPEG\" TRUE)\n\toption(WITH_FFTW \"Build With FFTW\" TRUE)\n\toption(WITH_JACK \"Build With Plugin\" TRUE)\n\toption(WITH_LIBSNDFILE \"Build With LibSndFile\" TRUE)\n\toption(WITH_OPENAL \"Build With OpenAL\" TRUE)\n\toption(WITH_PYTHON \"Build With Python Library\" TRUE)\n\toption(WITH_SDL \"Build With SDL\" TRUE)\n\toption(WITH_STRICT_DEPENDENCIES \"Error and abort instead of warning if a library is not found.\" FALSE)\n\tif(APPLE)\n\t\toption(WITH_COREAUDIO \"Build With CoreAudio\" TRUE)\n\tendif()\n\tif(NOT WIN32 AND NOT APPLE)\n\t\toption(WITH_PULSEAUDIO \"Build With PulseAudio\" TRUE)\n\t\toption(WITH_PIPEWIRE \"Build With PipeWire\" TRUE)\n\tendif()\n\tif(WIN32)\n\t\toption(WITH_WASAPI \"Build With WASAPI\" TRUE)\n\tendif()\n\n\tif(WITH_STRICT_DEPENDENCIES)\n\t\tset(PACKAGE_OPTION REQUIRED)\n\tendif()\n\n\tif(WIN32 OR APPLE)\n\t\tset(DEFAULT_PLUGIN_PATH \".\" CACHE STRING \"Default plugin installation and loading path.\")\n\t\tset(DOCUMENTATION_INSTALL_PATH \"doc\" CACHE PATH \"Path where the documentation is installed.\")\n\telse()\n\t\tset(DEFAULT_PLUGIN_PATH \"${CMAKE_INSTALL_PREFIX}/share/audaspace/plugins\" CACHE STRING \"Default plugin installation and loading path.\")\n\t\tset(DOCUMENTATION_INSTALL_PATH \"share/doc/audaspace\" CACHE PATH \"Path where the documentation is installed.\")\n\tendif()\n\n\tcmake_dependent_option(SEPARATE_C \"Build C Binding as separate library\" TRUE \"WITH_C\" FALSE)\n\tcmake_dependent_option(PLUGIN_COREAUDIO \"Build CoreAudio Plugin\" TRUE \"WITH_COREAUDIO;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_FFMPEG \"Build FFMPEG Plugin\" TRUE \"WITH_FFMPEG;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_JACK \"Build JACK Plugin\" TRUE \"WITH_JACK;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_LIBSNDFILE \"Build LibSndFile Plugin\" TRUE \"WITH_LIBSNDFILE;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_OPENAL \"Build OpenAL Plugin\" TRUE \"WITH_OPENAL;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_PULSEAUDIO \"Build PulseAudio Plugin\" TRUE \"WITH_PULSEAUDIO;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_PIPEWIRE \"Build PipeWire Plugin\" TRUE \"WITH_PIPEWIRE;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_SDL \"Build SDL Plugin\" TRUE \"WITH_SDL;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_WASAPI \"Build WASAPI Plugin\" TRUE \"WITH_WASAPI;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(WITH_PYTHON_MODULE \"Build Python Module\" TRUE \"WITH_PYTHON\" FALSE)\n\tcmake_dependent_option(USE_SDL2 \"Use SDL2 instead of 1 if available\" TRUE \"WITH_SDL\" FALSE)\n\tcmake_dependent_option(DYNLOAD_JACK \"Dynamically load JACK\" FALSE \"WITH_JACK\" FALSE)\n\tcmake_dependent_option(DYNLOAD_PULSEAUDIO \"Dynamically load PulseAudio\" FALSE \"WITH_PULSEAUDIO\" FALSE)\n\tcmake_dependent_option(DYNLOAD_PIPEWIRE \"Dynamically load PipeWire\" FALSE \"WITH_PIPEWIRE\" FALSE)\n\tcmake_dependent_option(WITH_BINDING_DOCS \"Build C/Python HTML Documentation with Sphinx\" TRUE \"WITH_PYTHON_MODULE\" FALSE)\n\tcmake_dependent_option(WITH_VERSIONED_PLUGINS \"Build Plugins With Sonumber\" TRUE \"SHARED_LIBRARY\" FALSE)\n\n\t# compiler options\n\tset(CMAKE_CXX_STANDARD 17)\n\tset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n\tif(CMAKE_COMPILER_IS_GNUCXX OR \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n\t\tlist(APPEND CMAKE_C_COMPILER_FLAGS \"-fvisibility=hidden\")\n\t\tlist(APPEND CMAKE_CXX_COMPILER_FLAGS \"-fvisibility=hidden\")\n\tendif()\n\n\tif(MSVC)\n\t\tlist(APPEND CMAKE_C_FLAGS_DEBUG \"/Zi /Od\")\n\t\tlist(APPEND CMAKE_CXX_FLAGS_DEBUG \"/Zi /Od\")\n\t\tlist(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG \"/DEBUG\")\n\t\tlist(APPEND CMAKE_STATIC_LINKER_FLAGS_DEBUG \"/DEBUG\")\n\t\tlist(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG \"/DEBUG\")\n\n\t\tif(SHARED_LIBRARY)\n\t\t\tinclude(GenerateExportHeader)\n\t\tendif()\n\tendif()\n\n\tif(APPLE AND NOT CMAKE_OSX_DEPLOYMENT_TARGET)\n\t\tset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.9\" CACHE STRING \"\" FORCE)\n\tendif()\nendif()\n\nif(MSVC)\n\tadd_definitions(\n\t\t/D_USE_MATH_DEFINES\n\t\t/EHsc\n\t\t/DNOMINMAX\n\t\t/D_STDINT_H\n\t)\nendif()\n\n# platform specific options\n\nif(MSYS OR MINGW)\n\tadd_definitions(-D_USE_MATH_DEFINES)\nendif()\n\n# C\nif(WITH_C)\n\tset(C_SRC\n\t\tbindings/C/AUD_ThreadPool.cpp\n\t\tbindings/C/AUD_Source.cpp\n\t\tbindings/C/AUD_Device.cpp\n\t\tbindings/C/AUD_DynamicMusic.cpp\n\t\tbindings/C/AUD_Handle.cpp\n\t\tbindings/C/AUD_PlaybackManager.cpp\n\t\tbindings/C/AUD_Sequence.cpp\n\t\tbindings/C/AUD_Sound.cpp\n\t\tbindings/C/AUD_Special.cpp\n\t)\n\tset(C_HDR\n\t\tbindings/C/AUD_ThreadPool.h\n\t\tbindings/C/AUD_Source.h\n\t\tbindings/C/AUD_Device.h\n\t\tbindings/C/AUD_DynamicMusic.h\n\t\tbindings/C/AUD_Handle.h\n\t\tbindings/C/AUD_PlaybackManager.h\n\t\tbindings/C/AUD_Sequence.h\n\t\tbindings/C/AUD_Sound.h\n\t\tbindings/C/AUD_Special.h\n\t\tbindings/C/AUD_Types.h\n\t)\n\n\tif(WITH_FFTW)\n\t\tlist(APPEND C_SRC\n\t\t\tbindings/C/AUD_HRTF.cpp\n\t\t\tbindings/C/AUD_ImpulseResponse.cpp\n\t\t)\n\n\t\tlist(APPEND C_HDR\n\t\t\tbindings/C/AUD_HRTF.h\n\t\t\tbindings/C/AUD_ImpulseResponse.h\n\t\t)\n\tendif()\n\n\tif(NOT SEPARATE_C)\n\t\tlist(APPEND SRC ${C_SRC})\n\t\tlist(APPEND HDR ${C_HDR})\n\telse()\n\t\tset(AUDASPACE_C_LIBRARY -laudaspace-c)\n\tendif()\nendif()\n\n# CoreAudio\nif(WITH_COREAUDIO)\n\tfind_library(COREAUDIO_LIBRARY CoreAudio)\n\tfind_library(AUDIOUNIT_LIBRARY AudioUnit)\n\tfind_library(AUDIOTOOLBOX_LIBRARY AudioToolbox)\n\tfind_path(AUDIOUNIT_INCLUDE_DIR AudioUnit/AudioUnit.h)\n\tfind_path(AUDIOTOOLBOX_INCLUDE_DIR AudioToolbox/CoreAudioClock.h)\n\n\tif(COREAUDIO_LIBRARY AND AUDIOUNIT_LIBRARY AND AUDIOUNIT_INCLUDE_DIR)\n\t\tset(COREAUDIO_LIBRARIES ${COREAUDIO_LIBRARY} ${AUDIOUNIT_LIBRARY} ${AUDIOTOOLBOX_LIBRARY})\n\t\tset(COREAUDIO_INCLUDE_DIRS ${AUDIOUNIT_INCLUDE_DIR} ${AUDIOTOOLBOX_INCLUDE_DIR})\n\n\t\tset(COREAUDIO_SRC\n\t\t\tplugins/coreaudio/CoreAudioDevice.cpp\n\t\t)\n\t\tset(COREAUDIO_HDR\n\t\t\tplugins/coreaudio/CoreAudioDevice.h\n\t\t)\n\n\t\tif(NOT PLUGIN_COREAUDIO)\n\t\t\tlist(APPEND INCLUDE ${COREAUDIO_INCLUDE_DIRS})\n\t\t\tlist(APPEND LIBRARIES ${COREAUDIO_LIBRARIES})\n\t\t\tlist(APPEND SRC ${COREAUDIO_SRC})\n\t\t\tlist(APPEND HDR ${COREAUDIO_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS CoreAudioDevice)\n\t\tendif()\n\telse()\n\t\tif(WITH_STRICT_DEPENDENCIES)\n\t\t\tmessage(FATAL_ERROR \"CoreAudio not found!\")\n\t\telse()\n\t\t\tif(AUDASPACE_STANDALONE)\n\t\t\t\tset(WITH_COREAUDIO FALSE CACHE BOOL \"Build With CoreAudio\" FORCE)\n\t\t\telse()\n\t\t\t\tset(WITH_COREAUDIO FALSE)\n\t\t\tendif()\n\t\t\tmessage(WARNING \"CoreAudio not found, plugin will not be built.\")\n\t\tendif()\n\tendif()\nendif()\n\n# FFMPEG\nif(WITH_FFMPEG)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(FFMPEG ${PACKAGE_OPTION})\n\tendif()\n\n\tif(FFMPEG_FOUND)\n\t\tset(FFMPEG_SRC\n\t\t\tplugins/ffmpeg/FFMPEG.cpp\n\t\t\tplugins/ffmpeg/FFMPEGReader.cpp\n\t\t\tplugins/ffmpeg/FFMPEGWriter.cpp\n\t\t)\n\t\tset(FFMPEG_HDR\n\t\t\tplugins/ffmpeg/FFMPEG.h\n\t\t\tplugins/ffmpeg/FFMPEGReader.h\n\t\t\tplugins/ffmpeg/FFMPEGWriter.h\n\t\t)\n\n\t\tif(NOT PLUGIN_FFMPEG)\n\t\t\tlist(APPEND INCLUDE ${FFMPEG_INCLUDE_DIRS})\n\t\t\tlist(APPEND LIBRARIES ${FFMPEG_LIBRARIES})\n\t\t\tlist(APPEND SRC ${FFMPEG_SRC})\n\t\t\tlist(APPEND HDR ${FFMPEG_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS FFMPEG)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB FFMPEG_DLLS ${LIBRARY_PATH}/ffmpeg/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${FFMPEG_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_FFMPEG FALSE CACHE BOOL \"Build With FFMPEG\" FORCE)\n\t\telse()\n\t\t\tset(WITH_FFMPEG FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"FFMPEG not found, plugin will not be built.\")\n\tendif()\nendif()\n\n# FFTW\nif(WITH_FFTW)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(FFTW ${PACKAGE_OPTION})\n\tendif()\n\n\tif(FFTW_FOUND)\n\t\tset(FFTW_SRC\n\t\t\tsrc/fx/BinauralSound.cpp\n\t\t\tsrc/fx/BinauralReader.cpp\n\t\t\tsrc/fx/Convolver.cpp\n\t\t\tsrc/fx/ConvolverReader.cpp\n\t\t\tsrc/fx/ConvolverSound.cpp\n\t\t\tsrc/fx/Equalizer.cpp\n\t\t\tsrc/fx/FFTConvolver.cpp\n\t\t\tsrc/fx/HRTF.cpp\n\t\t\tsrc/fx/ImpulseResponse.cpp\n\t\t\tsrc/util/FFTPlan.cpp\n\t)\n\tset(FFTW_HDR\n\t\t\tinclude/fx/BinauralSound.h\n\t\t\tinclude/fx/BinauralReader.h\n\t\t\tinclude/fx/Convolver.h\n\t\t\tinclude/fx/ConvolverReader.h\n\t\t\tinclude/fx/ConvolverSound.h\n\t\t\tinclude/fx/Equalizer.h\n\t\t\tinclude/fx/FFTConvolver.h\n\t\t\tinclude/fx/HRTF.h\n\t\t\tinclude/fx/HRTFLoader.h\n\t\t\tinclude/fx/ImpulseResponse.h\n\t\t\tinclude/util/FFTPlan.h\n\t\t)\n\n\t\tadd_definitions(-DWITH_CONVOLUTION)\n\n\t\tlist(APPEND INCLUDE ${FFTW_INCLUDE_DIR})\n\t\tlist(APPEND LIBRARIES ${FFTW_LIBRARY})\n\n\t\tlist(APPEND SRC ${FFTW_SRC})\n\t\tlist(APPEND HDR ${FFTW_HDR})\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB FFTW_DLLS ${LIBRARY_PATH}/fftw/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${FFTW_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_FFTW FALSE CACHE BOOL \"Build With FFTW\" FORCE)\n\t\telse()\n\t\t\tset(WITH_FFTW FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"FFTW not found, convolution functionality will not be built.\")\n\tendif()\nendif()\n\n# JACK\nif(WITH_JACK)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(Jack ${PACKAGE_OPTION})\n\tendif()\n\n\tif(JACK_FOUND)\n\t\tset(JACK_SRC\n\t\t\tplugins/jack/JackDevice.cpp\n\t\t\tplugins/jack/JackLibrary.cpp\n\t\t)\n\t\tset(JACK_HDR\n\t\t\tplugins/jack/JackDevice.h\n\t\t\tplugins/jack/JackLibrary.h\n\t\t\tplugins/jack/JackSymbols.h\n\t\t)\n\n\t\tif(DYNLOAD_JACK)\n\t\t\tadd_definitions(-DDYNLOAD_JACK)\n\t\tendif()\n\n\t\tif(NOT PLUGIN_JACK)\n\t\t\tlist(APPEND INCLUDE ${JACK_INCLUDE_DIRS})\n\t\t\tif(NOT DYNLOAD_JACK)\n\t\t\t\tlist(APPEND LIBRARIES ${JACK_LIBRARIES})\n\t\t\tendif()\n\t\t\tlist(APPEND SRC ${JACK_SRC})\n\t\t\tlist(APPEND HDR ${JACK_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS JackDevice)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB JACK_DLLS ${LIBRARY_PATH}/jack/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${JACK_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_JACK FALSE CACHE BOOL \"Build With JACK\" FORCE)\n\t\telse()\n\t\t\tset(WITH_JACK FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"JACK not found, plugin will not be built.\")\n\tendif()\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Texture Environment Parameters - OpenGL - Python\nDESCRIPTION: The glGetTexEnv function retrieves parameters related to the texture environment, which affects how textures are applied during rendering.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetTexEnv (target, pname, params):\n\n   B{glGetTexEnvfv, glGetTexEnviv}\n\n   Return texture environment parameters\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetTexEnv.xhtml>`__\n\n   :type target: Enumerated constant\n   :arg target: Specifies a texture environment. Must be GL_TEXTURE_ENV.\n   :type pname: Enumerated constant\n   :arg pname: Specifies the symbolic name of a texture environment parameter.\n   :type params: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg params: Returns the requested data.\n```\n\n----------------------------------------\n\nTITLE: Vectorization Support Configuration\nDESCRIPTION: Configures CPU vectorization support including SSE4.2 and AVX2 features. Sets appropriate compiler flags based on platform and compiler type.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_NATIVE_ONLY)\n  set(CXX_HAS_SSE42 FALSE)\n  set(CXX_HAS_AVX2 FALSE)\n  add_definitions(\n    -DWITH_KERNEL_NATIVE\n  )\n\n  if(NOT MSVC)\n    add_check_cxx_compiler_flags(\n      CMAKE_CXX_FLAGS\n      _has_march_native \"-march=native\"\n    )\n    if(_has_march_native)\n      string(APPEND CMAKE_CXX_FLAGS \" -march=native\")\n    else()\n      string(APPEND CMAKE_CXX_FLAGS \"\")\n    endif()\n    unset(_has_march_native)\n  else()\n    string(APPEND CMAKE_CXX_FLAGS \" ${MSVC_NATIVE_ARCH_FLAGS}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Tests for Alembic I/O Module\nDESCRIPTION: Sets up Google Tests for the Alembic module when testing is enabled, including test source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/alembic/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/abc_export_test.cc\n    tests/abc_matrix_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf_io_alembic\n  )\n  blender_add_test_suite_lib(io_alembic \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories in CMake\nDESCRIPTION: This snippet sets up the include directories needed for the GTest library, specifying both local and system include paths.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  include\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Render Editor Library in CMake\nDESCRIPTION: Creates the Blender render editor library using the specified source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_render \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Interface Library and Test Suite in CMake\nDESCRIPTION: Adds the Blender interface library to the project and sets up a test suite if testing is enabled. It also adds a dependency on RNA prototypes generation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/interface/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_interface \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_interface bf_rna)\n\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    interface_ops_test.cc\n  )\n\n  set(TEST_LIB\n    PRIVATE bf::intern::clog\n  )\n\n  blender_add_test_suite_lib(interface \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Freestyle and GMP in CMake\nDESCRIPTION: Adds compilation definitions for optional features Freestyle and GMP if they are enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/bmesh/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finalizing Cycles Util Library Build Configuration in CMake\nDESCRIPTION: Sets up include directories and creates the Cycles Util library target with all specified source files, headers, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/util/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_util \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: HIP Kernel Compilation Macro\nDESCRIPTION: Macro for compiling HIP kernels with specific architecture targets and compiler flags. Handles both Windows and Linux platforms with different compiler configurations.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(CYCLES_HIP_KERNEL_ADD arch name flags sources experimental)\n  set(format \"fatbin\")\n  set(hip_file ${name}_${arch}.${format})\n  set(hip_file_compressed ${hip_file}.zst)\n  set(kernel_sources ${sources})\n\n  set(hip_kernel_src \"/device/hip/${name}.cpp\")\n\n  if(WIN32)\n    set(hip_command ${CMAKE_COMMAND})\n    set(hip_flags\n      -E env \"HIP_PATH=${HIP_ROOT_DIR}\"\n      ${HIP_HIPCC_EXECUTABLE})\n  else()\n    set(hip_command ${HIP_HIPCC_EXECUTABLE})\n    set(hip_flags)\n  endif()\n\n  # Set optimization flags based on architecture and compiler version\n  if(WIN32 AND ((${arch} MATCHES \"gfx90[a-z0-9]+\") OR (${HIP_VERSION} STREQUAL \"6.1.40252\")))\n    set(hip_opt_flags \"-O1\")\n  else()\n    set(hip_opt_flags)\n  endif()\n\n  get_hip_math_flag(${arch} math_flag)\n\n  set(hip_flags\n    ${hip_flags}\n    --offload-arch=${arch}\n    ${HIP_HIPCC_FLAGS}\n    --genco\n    ${CMAKE_CURRENT_SOURCE_DIR}${hip_kernel_src}\n    ${flags}\n    -D CCL_NAMESPACE_BEGIN=\n    -D CCL_NAMESPACE_END=\n    -D HIPCC\n    -I ${CMAKE_CURRENT_SOURCE_DIR}/..\n    -I ${CMAKE_CURRENT_SOURCE_DIR}/device/hip\n    -Wno-parentheses-equality\n    -Wno-unused-value\n    -ffast-math\n    ${math_flag}\n    ${hip_opt_flags}\n    -o ${CMAKE_CURRENT_BINARY_DIR}/${hip_file})\n\n  if(WITH_NANOVDB)\n    set(hip_flags ${hip_flags}\n      -D WITH_NANOVDB)\n  endif()\n\n  if(WITH_CYCLES_DEBUG)\n    set(hip_flags ${hip_flags} -D WITH_CYCLES_DEBUG)\n  endif()\n\n  add_custom_command(\n    OUTPUT ${hip_file}\n    COMMAND ${hip_command} ${hip_flags}\n    DEPENDS ${kernel_sources})\n  add_custom_command(\n    OUTPUT ${hip_file_compressed}\n    COMMAND \"$<TARGET_FILE:zstd_compress>\" ${hip_file} ${hip_file_compressed}\n    DEPENDS ${hip_file})\n  delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}\" \"${hip_file_compressed}\" ${CYCLES_INSTALL_PATH}/lib)\n  list(APPEND hip_fatbins ${hip_file_compressed})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Sequencer Editor Library\nDESCRIPTION: Creates the Sequencer Editor library target with all specified sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_sequencer/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_sequencer \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Cycles Kernel Library with Source Groups in CMake\nDESCRIPTION: Creates the main Cycles kernel library target and organizes source files into logical groups for better IDE organization, including sources for various device backends (CPU, CUDA, HIP, OptiX, Metal, etc).\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\ncycles_add_library(cycles_kernel \"${LIB}\"\n  ${SRC_KERNEL_DEVICE_CPU}\n  ${SRC_KERNEL_DEVICE_CUDA}\n  ${SRC_KERNEL_DEVICE_HIP}\n  ${SRC_KERNEL_DEVICE_HIPRT}\n  ${SRC_KERNEL_DEVICE_OPTIX}\n  ${SRC_KERNEL_DEVICE_METAL}\n  ${SRC_KERNEL_HEADERS}\n  ${SRC_KERNEL_DEVICE_CPU_HEADERS}\n  ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n  ${SRC_KERNEL_DEVICE_CUDA_HEADERS}\n  ${SRC_KERNEL_DEVICE_HIP_HEADERS}\n  ${SRC_KERNEL_DEVICE_HIPRT_HEADERS}\n  ${SRC_KERNEL_DEVICE_OPTIX_HEADERS}\n  ${SRC_KERNEL_DEVICE_METAL_HEADERS}\n  ${SRC_KERNEL_DEVICE_ONEAPI_HEADERS}\n)\n\nsource_group(\"bake\" FILES ${SRC_KERNEL_BAKE_HEADERS})\nsource_group(\"bvh\" FILES ${SRC_KERNEL_BVH_HEADERS})\nsource_group(\"camera\" FILES ${SRC_KERNEL_CAMERA_HEADERS})\nsource_group(\"closure\" FILES ${SRC_KERNEL_CLOSURE_HEADERS})\nsource_group(\"device\\\\cpu\" FILES ${SRC_KERNEL_DEVICE_CPU} ${SRC_KERNEL_DEVICE_CPU_HEADERS})\nsource_group(\"device\\\\cuda\" FILES ${SRC_KERNEL_DEVICE_CUDA} ${SRC_KERNEL_DEVICE_CUDA_HEADERS})\nsource_group(\"device\\\\gpu\" FILES ${SRC_KERNEL_DEVICE_GPU_HEADERS})\nsource_group(\"device\\\\hip\" FILES ${SRC_KERNEL_DEVICE_HIP} ${SRC_KERNEL_DEVICE_HIP_HEADERS})\nsource_group(\"device\\\\hiprt\" FILES ${SRC_KERNEL_DEVICE_HIPRT} ${SRC_KERNEL_DEVICE_HIPRT_HEADERS})\nsource_group(\"device\\\\optix\" FILES ${SRC_KERNEL_DEVICE_OPTIX} ${SRC_KERNEL_DEVICE_OPTIX_HEADERS})\nsource_group(\"device\\\\metal\" FILES ${SRC_KERNEL_DEVICE_METAL} ${SRC_KERNEL_DEVICE_METAL_HEADERS})\nsource_group(\"device\\\\oneapi\" FILES ${SRC_KERNEL_DEVICE_ONEAPI} ${SRC_KERNEL_DEVICE_ONEAPI_HEADERS})\nsource_group(\"film\" FILES ${SRC_KERNEL_FILM_HEADERS})\nsource_group(\"geom\" FILES ${SRC_KERNEL_GEOM_HEADERS})\nsource_group(\"integrator\" FILES ${SRC_KERNEL_INTEGRATOR_HEADERS})\nsource_group(\"kernel\" FILES ${SRC_KERNEL_TYPES_HEADERS})\nsource_group(\"light\" FILES ${SRC_KERNEL_LIGHT_HEADERS})\nsource_group(\"osl\" FILES ${SRC_KERNEL_OSL_HEADERS})\nsource_group(\"sample\" FILES ${SRC_KERNEL_SAMPLE_HEADERS})\nsource_group(\"svm\" FILES ${SRC_KERNEL_SVM_HEADERS})\nsource_group(\"util\" FILES ${SRC_KERNEL_UTIL_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenEXR Support in Blender Render Module\nDESCRIPTION: Adds OpenEXR support to the Blender render module if WITH_IMAGE_OPENEXR is defined. It adds the necessary library and defines a preprocessor macro.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND LIB\n    bf_imbuf_openexr\n  )\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building QuadriFlow\nDESCRIPTION: This snippet provides the commands to clone the QuadriFlow repository from GitHub and build it using CMake. The steps include creating a build directory, setting up a release build, and compiling with multiple threads. Dependencies include Git and CMake, and the output is a compiled QuadriFlow binary ready for execution.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/hjwdzh/quadriflow\ncd quadriflow\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=release\nmake -j\n```\n\n----------------------------------------\n\nTITLE: Memory List Debug Function in C\nDESCRIPTION: Debug function that prints a list of all currently allocated memory blocks with their details.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid MEM_printmemlist(void);\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Build Settings in CMake\nDESCRIPTION: Sets up compilation flags, include directories, and source files for Blender's utility library. Handles conditional compilation for various features like Python support, Valgrind memory debugging, GMP math library, and FFTW3 support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_EXECINFO_H)\n  add_definitions(-DHAVE_EXECINFO_H)\nendif()\n\nset(INC\n  PUBLIC .\n  ../../../intern/eigen\n)\n\nset(INC_SYS\n  ../../../extern/wcwidth\n  ../../../extern/json/include\n\n  ${ZLIB_INCLUDE_DIRS}\n  ${ZSTD_INCLUDE_DIRS}\n)\n\nset(SRC\n  intern/BLI_assert.cc\n  # ... [truncated source file list]\n)\n\nset(LIB\n  PUBLIC bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  bf_intern_eigen\n  PRIVATE bf::intern::guardedalloc\n  extern_wcwidth\n  PRIVATE bf::intern::atomic\n  PRIVATE extern_fmtlib\n  PUBLIC bf::dependencies::optional::tbb\n  PRIVATE bf::dependencies::eigen\n  ${ZLIB_LIBRARIES}\n  ${ZSTD_LIBRARIES}\n)\n\nif(NOT WITH_PYTHON_MODULE)\n  list(APPEND SRC\n    intern/BLI_args.cc\n    BLI_args.h\n  )\nendif()\n\nif(WITH_MEM_VALGRIND)\n  add_definitions(-DWITH_MEM_VALGRIND)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFTW3)\nendif()\n\nif(WIN32)\n  if(WITH_BLENDER_THUMBNAILER)\n    add_definitions(-DWITH_BLENDER_THUMBNAILER)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Feature Conditional Compilation Setup\nDESCRIPTION: Sets up conditional compilation flags and includes based on enabled features like internationalization, Python support, and IME input.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n\nif(WITH_INPUT_IME)\n  add_definitions(-DWITH_INPUT_IME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Cycles Hydra\nDESCRIPTION: Defines compiler preprocessor definitions for the Cycles Hydra library, including configuration for GLOG, OSL debugging, and TBB debug settings based on build type.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(cycles_hydra\n  PRIVATE\n  GLOG_NO_ABBREVIATED_SEVERITIES=1\n  OSL_DEBUG=$<CONFIG:DEBUG>\n  TBB_USE_DEBUG=$<CONFIG:DEBUG>\n  $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX=1>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Threading Library\nDESCRIPTION: This snippet determines the default threading library to use based on the CMAKE_USE_PTHREADS_INIT and CMAKE_USE_WIN32_THREADS_INIT variables. If neither is set, it defaults to None.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LEMON_THREADING)\n  IF(CMAKE_USE_PTHREADS_INIT)\n    SET(LEMON_THREADING \"Pthread\")\n  ELSEIF(CMAKE_USE_WIN32_THREADS_INIT)\n    SET(LEMON_THREADING \"Win32\")\n  ELSE()\n    SET(LEMON_THREADING \"None\")\n  ENDIF()\nENDIF()\n\nSET( LEMON_THREADING \"${LEMON_THREADING}\" CACHE STRING\n  \"Choose the threading library, options are: Pthread Win32 None.\"\n  FORCE )\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader Source Files Configuration\nDESCRIPTION: Lists fragment shader source files used for rendering various overlay effects like antialiasing, armature display, mesh editing, and UI elements.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  overlay_antialiasing_frag.glsl\n  overlay_armature_dof_solid_frag.glsl\n  [... truncated for brevity ...]\n  overlay_xray_fade_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: OpenGL Backend Source Configuration\nDESCRIPTION: Lists source files specific to the OpenGL backend implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(OPENGL_SRC\n  opengl/gl_backend.cc\n  opengl/gl_batch.cc\n  # ... [truncated for brevity]\n  opengl/gl_vertex_array.hh\n  opengl/gl_vertex_buffer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tests for Blender Geometry Module in CMake\nDESCRIPTION: Conditionally sets up test compilation for the geometry module when Google Tests are enabled, specifying test sources, includes, and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    tests/GEO_merge_curves_test.cc\n  )\n  set(TEST_LIB\n  )\n  blender_add_test_suite_lib(bf_geometry_tests \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Headless Mode in Blender Render Editor CMake\nDESCRIPTION: Adds a definition for headless mode and conditionally includes an additional library if not in headless mode.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nelse()\n  list(APPEND LIB\n    bf_editor_datafiles\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Detecting CUDA Version in CMake\nDESCRIPTION: Executes the NVCC compiler to determine the CUDA version and sets version variables. It also includes a warning for untested CUDA versions.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(COMMAND ${CUDA_NVCC_EXECUTABLE} \"--version\" OUTPUT_VARIABLE NVCC_OUT)\nstring(REGEX REPLACE \".*release ([0-9]+)\\.([0-9]+).*\" \"\\\\1\" CUDA_VERSION_MAJOR \"${NVCC_OUT}\")\nstring(REGEX REPLACE \".*release ([0-9]+)\\.([0-9]+).*\" \"\\\\2\" CUDA_VERSION_MINOR \"${NVCC_OUT}\")\nset(CUDA_VERSION \"${CUDA_VERSION_MAJOR}${CUDA_VERSION_MINOR}\")\n\nif((CUDA_VERSION STREQUAL \"101\") OR\n   (CUDA_VERSION STREQUAL \"102\") OR\n   (CUDA_VERSION_MAJOR STREQUAL \"11\") OR\n   (CUDA_VERSION_MAJOR STREQUAL \"12\"))\nelse()\n  message(WARNING\n    \"CUDA version ${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} detected, \"\n    \"build may succeed but only CUDA 12, 11, 10.2 and 10.1 have been tested\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Embree Ray Tracing Support to oneAPI in CMake\nDESCRIPTION: Configures support for Embree ray tracing with SYCL/oneAPI. It adds the necessary preprocessor definitions, include paths, and links against the Embree and TBB libraries when Embree support is enabled and SYCL support in Embree is available.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_CYCLES_EMBREE AND EMBREE_SYCL_SUPPORT)\n    list(APPEND sycl_compiler_flags\n      -DWITH_EMBREE\n      -DWITH_EMBREE_GPU\n      -DEMBREE_MAJOR_VERSION=${EMBREE_MAJOR_VERSION}\n      -I\"${EMBREE_INCLUDE_DIRS}\")\n\n    if(WIN32)\n      list(APPEND sycl_compiler_flags\n        -ladvapi32.lib\n      )\n    endif()\n\n    set(next_library_mode \"\")\n    foreach(library ${EMBREE_LIBRARIES})\n      string(TOLOWER \"${library}\" library_lower)\n      if((\"${library_lower}\" STREQUAL \"optimized\") OR\n         (\"${library_lower}\" STREQUAL \"debug\"))\n        set(next_library_mode \"${library_lower}\")\n      else()\n        if(next_library_mode STREQUAL \"\")\n          list(APPEND EMBREE_TBB_LIBRARIES_optimized ${library})\n          list(APPEND EMBREE_TBB_LIBRARIES_debug ${library})\n        else()\n          list(APPEND EMBREE_TBB_LIBRARIES_${next_library_mode} ${library})\n        endif()\n        set(next_library_mode \"\")\n      endif()\n    endforeach()\n\n    foreach(library ${TBB_LIBRARIES})\n      string(TOLOWER \"${library}\" library_lower)\n      if((\"${library_lower}\" STREQUAL \"optimized\") OR\n         (\"${library_lower}\" STREQUAL \"debug\"))\n        set(next_library_mode \"${library_lower}\")\n      else()\n        if(next_library_mode STREQUAL \"\")\n          list(APPEND EMBREE_TBB_LIBRARIES_optimized ${library})\n          list(APPEND EMBREE_TBB_LIBRARIES_debug ${library})\n        else()\n          list(APPEND EMBREE_TBB_LIBRARIES_${next_library_mode} ${library})\n        endif()\n        set(next_library_mode \"\")\n      endif()\n    endforeach()\n    list(APPEND sycl_compiler_flags\n      \"$<$<CONFIG:Release>:${EMBREE_TBB_LIBRARIES_optimized}>\"\n      \"$<$<CONFIG:RelWithDebInfo>:${EMBREE_TBB_LIBRARIES_optimized}>\"\n      \"$<$<CONFIG:MinSizeRel>:${EMBREE_TBB_LIBRARIES_optimized}>\"\n      \"$<$<CONFIG:Debug>:${EMBREE_TBB_LIBRARIES_debug}>\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Depth Range in OpenGL with Python\nDESCRIPTION: Specifies mapping of depth values from normalized device coordinates to window coordinates using the glDepthRange function. Takes zNear and zFar as integer parameters.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nglDepthRange(zNear, zFar)\n```\n\n----------------------------------------\n\nTITLE: Adding macOS-Specific Compiler Flags for Cycles OSL Kernel in CMake\nDESCRIPTION: Adds a macOS-specific compiler flag to disable alignment warnings that occur due to OSLRenderServices containing a 64-byte aligned member that's not supported by the SDK but safely handled in the implementation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  # Disable allocation warning on macOS prior to 10.14: the OSLRenderServices\n  # contains member which is 64 bytes aligned (cache inside of OIIO's\n  # unordered_map_concurrent). This is not something what the SDK supports, but\n  # since we take care of allocations ourselves is OK to ignore the\n  # diagnostic message.\n  string(APPEND CMAKE_CXX_FLAGS \" -faligned-allocation\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Modifier and Physics Tests in CMake for Blender\nDESCRIPTION: Sets up tests for various Blender modifiers and physics simulations, including array modifiers, cloth physics, softbody physics, and particle systems. Each test uses specific blend files and Python scripts.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    object_modifier_array\n    ${TEST_SRC_DIR}/modifier_stack/array_test.blend\n    --python-text run_tests.py\n  )\n\n  add_blender_test(\n    modifiers\n    ${TEST_SRC_DIR}/modeling/modifiers.blend\n    --python ${TEST_PYTHON_DIR}/modifiers.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    physics_cloth\n    ${TEST_SRC_DIR}/physics/cloth_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_cloth.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    physics_softbody\n    ${TEST_SRC_DIR}/physics/softbody_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_softbody.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    physics_dynamic_paint\n    ${TEST_SRC_DIR}/physics/dynamic_paint_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_dynamic_paint.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    deform_modifiers\n    ${TEST_SRC_DIR}/modeling/deform_modifiers.blend\n    --python ${TEST_PYTHON_DIR}/deform_modifiers.py\n    --\n    --run-all-tests\n  )\n\n  if(WITH_MOD_OCEANSIM)\n    add_blender_test(\n      physics_ocean\n      ${TEST_SRC_DIR}/physics/ocean_test.blend\n      --python ${TEST_PYTHON_DIR}/physics_ocean.py\n      --\n      --run-all-tests\n    )\n  endif()\n\n  add_blender_test(\n    physics_particle_system\n    ${TEST_SRC_DIR}/physics/physics_particle_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_particle_system.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    physics_particle_instance\n    ${TEST_SRC_DIR}/physics/physics_particle_instance.blend\n    --python ${TEST_PYTHON_DIR}/physics_particle_instance.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    constraints\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_constraints.py\n    --\n    --testdir \"${TEST_SRC_DIR}/constraints\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Node Editor Library and Dependencies in CMake\nDESCRIPTION: Adds the Blender node editor space as a library and sets up its dependencies, including the RNA generation step.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_node/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_node \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_node bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Screen Editor Library in CMake\nDESCRIPTION: Adds the Blender screen editor as a library target using the blender_add_lib function, specifying source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/screen/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_screen \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Library Dependencies for bf_rna in CMake\nDESCRIPTION: Lists the library dependencies for bf_rna, including various Blender editor modules, animation, physics, and rendering components. It also includes external dependencies like TBB and FMT.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::dna\n  PRIVATE bf::dependencies::optional::tbb\n  PRIVATE extern_fmtlib\n  bf_editor_space_api\n\n  bf_editor_animation\n  bf_editor_armature\n  bf_editor_asset\n  bf_editor_curve\n  bf_editor_curves\n  bf_editor_gizmo_library\n  bf_editor_gpencil_legacy\n  bf_editor_io\n  bf_editor_mesh\n  bf_editor_object\n  bf_editor_physics\n  bf_editor_pointcloud\n  bf_editor_render\n  bf_editor_scene\n  bf_editor_sculpt_paint\n  bf_editor_sound\n  bf_editor_transform\n  bf_editor_undo\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite\nDESCRIPTION: Sets up the BMesh test suite when WITH_GTESTS is enabled, including test sources and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/bmesh/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/bmesh_core_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf_bmesh\n  )\n  blender_add_test_suite_lib(bmesh \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependencies\nDESCRIPTION: Adds a dependency on the RNA generation to ensure that RNA_prototypes.hh is generated before compiling the USD module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_io_usd bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for COLLADA Module in CMake\nDESCRIPTION: Defines the library dependencies required by the COLLADA module, including OpenCOLLADA libraries, XML2 libraries, and various Blender internal libraries using Blender's namespaced targets.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/collada/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  ${OPENCOLLADA_LIBRARIES}\n  ${XML2_LIBRARIES}\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Node Discovery Function Definition in CMake\nDESCRIPTION: Defines a CMake function 'add_node_discovery' that creates a library exposing node registration functions. It processes source files to generate node registration code using a Python script.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_node_discovery\n  lib_name\n  sources\n  output_file\n  output_function\n  )\n\n  set(extra_args \"\")\n\n  # See `add_definitions(-DUSE_MAKEFILE_WORKAROUND)` comment for `makesrna`.\n  if(CMAKE_GENERATOR MATCHES \".*Unix Makefiles\")\n    set(extra_args \"--use-makefile-workaround\")\n  endif()\n\n  add_custom_command(\n    OUTPUT\n      ${output_file}\n    COMMAND\n      ${PYTHON_EXECUTABLE}\n        ${DISCOVER_NODES_PATH}\n        ${CMAKE_CURRENT_SOURCE_DIR}\n        ${output_file}\n        ${output_function}\n        ${sources}\n        ${extra_args}\n    DEPENDS\n      ${SRC}\n      ${DISCOVER_NODES_PATH}\n  )\n  set_source_files_properties(${output_file} PROPERTIES GENERATED TRUE)\n  add_library(${lib_name} ${output_file})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: macOS Bundle Configuration\nDESCRIPTION: Sets up macOS app bundle properties including version info, date stamping, and bundle structure.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(blender PROPERTIES\n  MACOSX_BUNDLE_INFO_PLIST ${OSX_APP_SOURCEDIR}/Contents/Info.plist\n  MACOSX_BUNDLE_SHORT_VERSION_STRING \"${BLENDER_VERSION}.${BLENDER_VERSION_PATCH}\"\n  MACOSX_BUNDLE_LONG_VERSION_STRING \"${BLENDER_VERSION}.${BLENDER_VERSION_PATCH} ${BLENDER_DATE}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Blender Render Library in CMake\nDESCRIPTION: Creates the Blender render library using the previously defined source files, include directories, and library dependencies. It also creates an alias for the library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib_nolist(bf_render \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::render ALIAS bf_render)\n```\n\n----------------------------------------\n\nTITLE: Memory Duplication Function in C\nDESCRIPTION: Function for creating a copy of an existing memory block, combining malloc and memcpy functionality.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid *MEM_dupallocN(void *vmemh);\n```\n\n----------------------------------------\n\nTITLE: Setting Mantaflow Version and Fluid Support\nDESCRIPTION: Defines the Mantaflow library version and enables fluid simulation support through CMake definitions\nSOURCE: https://github.com/blender/blender/blob/main/extern/mantaflow/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MANTAVERSION \"0.13\")\n\nadd_definitions(-DWITH_FLUID=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blender Test Functions in CMake\nDESCRIPTION: Defines core functions for running Blender tests with different parameters and environments\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_blender_test_impl testname envvars_list exe)\n  add_test(\n    NAME ${testname}\n    COMMAND ${exe} ${ARGN}\n  )\n  blender_test_set_envvars(\"${testname}\" \"${envvars_list}\")\nendfunction()\n\nfunction(add_blender_test testname)\n  add_blender_test_impl(\n    \"${testname}\"\n    \"\"\n    \"${TEST_BLENDER_EXE}\"\n    ${TEST_BLENDER_EXE_PARAMS}\n    ${ARGN}\n  )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Build Commands for oneAPI on Windows in CMake\nDESCRIPTION: Sets up a custom build command for compiling the oneAPI kernel on Windows. It sets the necessary environment variables for the compiler to find libraries and includes the appropriate compiler flags based on the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n    add_custom_command(\n      OUTPUT ${cycles_kernel_oneapi_lib} ${cycles_kernel_oneapi_linker_lib}\n      COMMAND ${CMAKE_COMMAND} -E env\n        # Set `LIB` for the compiler to find `sycl.lib` and in case of `icpx`, `libircmt.lib`.\n        \"LIB=${sycl_compiler_root}/../lib\\;${sycl_compiler_root}/../compiler/lib/intel64_win\"\n        \"PATH=${OCLOC_INSTALL_DIR}\\;${sycl_compiler_root}\"\n        ${SYCL_COMPILER}\n        \"$<$<CONFIG:Release>:${sycl_compiler_flags_Release}>\"\n        \"$<$<CONFIG:RelWithDebInfo>:${sycl_compiler_flags_RelWithDebInfo}>\"\n        \"$<$<CONFIG:Debug>:${sycl_compiler_flags_Debug}>\"\n        \"$<$<CONFIG:MinSizeRel>:${sycl_compiler_flags_Release}>\"\n      COMMAND_EXPAND_LISTS\n      DEPENDS ${cycles_oneapi_kernel_sources} ${SYCL_COMPILER})\n```\n\n----------------------------------------\n\nTITLE: OpenColorIO Configuration\nDESCRIPTION: Sets up OpenColorIO support with necessary definitions and library linkage.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(\n    -DWITH_OCIO\n  )\n\n  list(APPEND INC_SYS\n    ${OPENCOLORIO_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${OPENCOLORIO_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Quadriflow Source Files\nDESCRIPTION: This snippet defines the list of source files for the Quadriflow library, including both .cpp and .hpp files. These files contain the implementation of the Quadriflow algorithm.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(SRC\n  patches/boykov_kolmogorov_max_flow.hpp\n  src/adjacent-matrix.cpp\n  src/adjacent-matrix.hpp\n  src/compare-key.hpp\n  src/config.hpp\n  src/dedge.cpp\n  src/dedge.hpp\n  src/disajoint-tree.hpp\n  src/dset.hpp\n  src/field-math.hpp\n  src/flow.hpp\n  src/hierarchy.cpp\n  src/hierarchy.hpp\n  src/loader.cpp\n  src/loader.hpp\n  src/localsat.cpp\n  src/localsat.hpp\n  src/merge-vertex.cpp\n  src/merge-vertex.hpp\n  src/optimizer.cpp\n  src/optimizer.hpp\n  src/parametrizer.cpp\n  src/parametrizer-flip.cpp\n  src/parametrizer-int.cpp\n  src/parametrizer-mesh.cpp\n  src/parametrizer-scale.cpp\n  src/parametrizer-sing.cpp\n  src/parametrizer.hpp\n  src/post-solver.hpp\n  src/serialize.hpp\n  src/subdivide.cpp\n  src/subdivide.hpp\n  ${LEMON_SOURCES}\n)\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding OpenGL Backend Support for Wayland in CMake\nDESCRIPTION: Adds additional include directories, source files, and compilation definitions when OpenGL backend support is enabled for Wayland.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${wayland-egl_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/wayland_dynload_egl.c\n\n    extern/wayland_dynload_egl.h\n  )\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding and Defining OSL Header Files in CMake\nDESCRIPTION: Collects header files required for OSL shader compilation. It combines distributed OSL headers with custom utility headers for shading operations like color processing, noise generation, and Voronoi calculations.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# The headers that OSL ships differs per release so we can not\n# hard-code this.\nfile(GLOB SRC_OSL_HEADER_DIST ${OSL_SHADER_DIR}/*.h)\n\nset(SRC_OSL_HEADERS\n  node_color.h\n  node_color_blend.h\n  node_fractal_voronoi.h\n  node_fresnel.h\n  node_hash.h\n  node_math.h\n  node_noise.h\n  node_ramp_util.h\n  node_voronoi.h\n  stdcycles.h\n  ${SRC_OSL_HEADER_DIST}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform and Feature-Specific Settings\nDESCRIPTION: Adds conditional compilation flags and dependencies based on platform (Windows) and enabled features (headless mode, image formats).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_file/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-DNOMINMAX)\n  list(APPEND LIB\n    PRIVATE bf::intern::utfconv\n  )\nendif()\n\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nelse()\n  list(APPEND LIB\n    bf_editor_datafiles\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring oneAPI Settings for Cycles Device in CMake\nDESCRIPTION: Sets up oneAPI-specific configurations, including definitions for host task execution, binary type, and library paths. It also adds necessary include directories and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/device/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_ONEAPI)\n  if(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n    add_definitions(-DWITH_ONEAPI_SYCL_HOST_TASK)\n  endif()\n  if(WITH_CYCLES_ONEAPI_BINARIES)\n    set(cycles_kernel_oneapi_lib_suffix \"_aot\")\n  else()\n    set(cycles_kernel_oneapi_lib_suffix \"_jit\")\n  endif()\n  if(WIN32)\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/../kernel/cycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.lib)\n  else()\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/../kernel/libcycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.so)\n  endif()\n  list(APPEND LIB\n    ${cycles_kernel_oneapi_lib}\n    ${SYCL_LIBRARIES}\n  )\n  list(APPEND SRC\n    ${SRC_ONEAPI}\n  )\n  list(APPEND INC_SYS\n    ${SYCL_INCLUDE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Files and Headers for Cycles Scene Library\nDESCRIPTION: Defines the source files, headers and include directories for building the Cycles scene library component. Lists all the core scene-related source files and their corresponding headers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/scene/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n  ../../sky/include\n  ../../mikktspace\n)\n\nset(SRC\n  alembic.cpp\n  alembic_read.cpp\n  attribute.cpp\n  background.cpp\n  bake.cpp\n  camera.cpp\n  colorspace.cpp\n  constant_fold.cpp\n  devicescene.cpp\n  film.cpp\n  geometry.cpp\n  geometry_attributes.cpp\n  geometry_bvh.cpp\n  geometry_mesh.cpp\n  hair.cpp\n  image.cpp\n  image_oiio.cpp\n  image_sky.cpp\n  image_vdb.cpp\n  integrator.cpp\n  light.cpp\n  light_tree.cpp\n  light_tree_debug.cpp\n  mesh.cpp\n  mesh_displace.cpp\n  mesh_subdivision.cpp\n  procedural.cpp\n  pointcloud.cpp\n  object.cpp\n  osl.cpp\n  particles.cpp\n  pass.cpp\n  curves.cpp\n  scene.cpp\n  shader.cpp\n  shader_graph.cpp\n  shader_nodes.cpp\n  stats.cpp\n  svm.cpp\n  tables.cpp\n  tabulated_sobol.cpp\n  volume.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Blender Render Editor in CMake\nDESCRIPTION: Ensures that the RNA prototypes are generated before compiling the render editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_render bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding NLA Editor Library in CMake\nDESCRIPTION: Creates the NLA editor library using the defined source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_nla/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_nla \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Compiling GLSL Shaders for OpenSubdiv in CMake\nDESCRIPTION: Sets up the compilation of GLSL shaders into C files for use in the OpenSubdiv integration. It uses a custom CMake function 'glsl_to_c' to convert GLSL files to C.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n  set(GLSL_SRC\n    internal/evaluator/shaders/osd_eval_stencils_comp.glsl\n    internal/evaluator/shaders/osd_eval_patches_comp.glsl\n  )\n\n  set(GLSL_C)\n  foreach(GLSL_FILE ${GLSL_SRC})\n    glsl_to_c(${GLSL_FILE} GLSL_C)\n  endforeach()\n\n  blender_add_lib(bf_osd_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n\n  list(APPEND LIB\n    bf_osd_shaders\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Generation in CMake\nDESCRIPTION: This snippet checks for Sphinx, configures the conf.py file, and sets up a custom target for building C/Python HTML documentation. If Sphinx is not found, it disables the documentation build and issues a warning.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BINDING_DOCS)\n\tfind_package(Sphinx ${PACKAGE_OPTION})\n\n\tif(SPHINX_FOUND)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/bindings/doc/conf.py.in ${CMAKE_CURRENT_BINARY_DIR}/conf.py @ONLY)\n\n\t\tadd_custom_target(bindings_doc ALL COMMAND ${PYTHON_EXECUTABLE} setup.py --build-docs ${SPHINX_EXECUTABLE} -q -b html -c \"${CMAKE_CURRENT_BINARY_DIR}\" -d \"${CMAKE_CURRENT_BINARY_DIR}/_doctrees\" \"${CMAKE_CURRENT_SOURCE_DIR}/bindings/doc\" \"${CMAKE_CURRENT_BINARY_DIR}/doc/bindings\" DEPENDS pythonmodule COMMENT \"Building C/Python HTML documentation with Sphinx.\")\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_BINDING_DOCS FALSE CACHE BOOL \"Build C/Python HTML Documentation with Sphinx\" FORCE)\n\t\telse()\n\t\t\tset(WITH_BINDING_DOCS FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"Sphinx not found, binding documentation will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Python Mathutils Library\nDESCRIPTION: Uses the blender_add_lib function to add the Blender Python Mathutils library to the build, specifying the library name, source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/mathutils/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_python_mathutils \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Printers in Google Test - C++\nDESCRIPTION: This section refers to how to define custom printers within the Google Test framework, providing a link to the related documentation for detailed guidance.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/include/gtest/internal/custom/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// See documentation at `gtest/gtest-printers.h` for details on how to define a\n// custom printer.\n```\n\n----------------------------------------\n\nTITLE: Converting GLSL Shaders to C Files in CMake\nDESCRIPTION: Iterates through a list of GLSL shader files and converts them to C files using the glsl_to_c function, then adds them to a library called bf_draw_shaders.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(GLSL_FILE ${GLSL_SRC})\n  glsl_to_c(${GLSL_FILE} GLSL_C)\nendforeach()\n\nblender_add_lib(bf_draw_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring Blender Asset Editor Library\nDESCRIPTION: Creates the asset editor library using the defined sources, includes, and dependencies, with additional RNA prototype dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/asset/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_asset \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_asset bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Building Script Editor Library\nDESCRIPTION: Adds the script editor library to the build using collected sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_script/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_script \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Curves Editor\nDESCRIPTION: Lists all source files that comprise the curves editor functionality, including operations, editing, drawing, and data management implementations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curves/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/curves_add.cc\n  intern/curves_attribute_set.cc\n  intern/curves_data.cc\n  intern/curves_draw.cc\n  intern/curves_edit.cc\n  intern/curves_extrude.cc\n  intern/curves_masks.cc\n  intern/curves_ops.cc\n  intern/curves_selection.cc\n  intern/curves_undo.cc\n  intern/join.cc\n  intern/select_linked_pick.cc\n  intern/separate.cc\n)\n```\n\n----------------------------------------\n\nTITLE: GNU Compiler Warning Configuration\nDESCRIPTION: Adds warning flag for implicit function declarations when using GNU C compiler to catch errors early.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  string(APPEND CMAKE_C_FLAGS \" -Werror=implicit-function-declaration\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating gMock Library with CMake\nDESCRIPTION: This snippet adds include directories and creates the 'extern_gmock' library using the specified source and header files. It uses the include_directories command to add both the project's and gtest's include paths. The add_library command compiles the specified source and header files into a library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\nadd_library(extern_gmock ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Flag in OpenGL with Python\nDESCRIPTION: Flags edges as either boundary or non-boundary using the glEdgeFlag function. The flag parameter specifies the current edge flag value.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nglEdgeFlag(flag)\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Import Library to Blender Build (CMake)\nDESCRIPTION: Adds the CSV import module as a library to the Blender build system, using the previously defined sources, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/csv/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_csv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Demo Applications in CMake\nDESCRIPTION: Sets up compilation and linking for various demo applications if BUILD_DEMOS is enabled. Includes additional demos for FFTW and OpenAL when those libraries are available.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_DEMOS)\n\tinclude_directories(${INCLUDE})\n\n\tset(DEMOS audainfo audaplay audaconvert audaremap signalgen randsounds dynamicmusic playbackmanager)\n\n\tadd_executable(audainfo demos/audainfo.cpp)\n\ttarget_link_libraries(audainfo audaspace)\n\n\tadd_executable(audaplay demos/audaplay.cpp)\n\ttarget_link_libraries(audaplay audaspace)\n\n\t# ... (additional demo setups)\n\n\tif(WITH_FFTW)\n\t\tlist(APPEND DEMOS convolution binaural)\n\n\t\tadd_executable(convolution demos/convolution.cpp)\n\t\ttarget_link_libraries(convolution audaspace)\n\n\t\tadd_executable(binaural demos/binaural.cpp)\n\t\ttarget_link_libraries(binaural audaspace)\n\tendif()\n\n\tif(WITH_OPENAL)\n\t\tlist(APPEND DEMOS openaldevices)\n\n\t\tadd_executable(openaldevices demos/openaldevices.cpp)\n\t\tif(PLUGIN_OPENAL)\n\t\t\ttarget_link_libraries(openaldevices audaspace audopenal)\n\t\telse()\n\t\t\ttarget_link_libraries(openaldevices audaspace)\n\t\tendif()\n\tendif()\n\n\tinstall(TARGETS ${DEMOS}\n\t\tRUNTIME DESTINATION ${BIN_DESTINATION}\n\t\tLIBRARY DESTINATION ${LIB_DESTINATION}\n\t\tARCHIVE DESTINATION ${LIB_DESTINATION}\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless UI Tests in CMake\nDESCRIPTION: Configures UI simulation tests for various Blender operations including text editing, 3D view operations, and texture painting. Tests are only added when UI testing is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_UI_TESTS)\n  set(_undo_tests\n    test_undo.text_editor_edit_mode_mix\n    test_undo.text_editor_simple\n    test_undo.view3d_edit_mode_multi_window\n    test_undo.view3d_font_edit_mode_simple\n    test_undo.view3d_mesh_edit_separate\n    test_undo.view3d_mesh_particle_edit_mode_simple\n    test_undo.view3d_multi_mode_multi_window\n    test_undo.view3d_multi_mode_select\n    test_undo.view3d_sculpt_dyntopo_and_edit\n    test_undo.view3d_sculpt_dyntopo_simple\n    test_undo.view3d_sculpt_with_memfile_step\n    test_undo.view3d_simple\n    test_undo.view3d_texture_paint_complex\n    test_undo.view3d_texture_paint_simple\n  )\n  foreach(ui_test ${_undo_tests})\n    add_blender_test_ui(\n      \"ui_${ui_test}\"\n      --enable-event-simulate\n      --python \"${CMAKE_CURRENT_LIST_DIR}/ui_simulate/run_blender_setup.py\"\n      --\n      --tests \"${ui_test}\"\n    )\n  endforeach()\n  unset(_undo_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Compiler Warning Flags\nDESCRIPTION: This snippet configures warning flags for Microsoft Visual C++ compiler, enabling important warnings, disabling common false positives, and treating some warnings as errors for more strict code quality.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  # Most MSVC warnings are C & C++.\n  set(_WARNINGS\n    # warning level:\n    \"/W3\"\n    \"/w34062\"  # switch statement contains 'default' but no 'case' labels\n    \"/w34100\"  # 'identifier' : unreferenced formal parameter\n    \"/w34115\"  # 'type' : named type definition in parentheses\n    \"/w34189\"  # local variable is initialized but not referenced\n    # see https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/c5038?view=vs-2017\n    \"/w35038\"  # order of initialization in c++ constructors\n    # disable:\n    \"/wd4018\"  # signed/unsigned mismatch\n    \"/wd4146\"  # unary minus operator applied to unsigned type, result still unsigned\n    \"/wd4065\"  # switch statement contains 'default' but no 'case' labels\n    \"/wd4127\"  # conditional expression is constant\n    \"/wd4181\"  # qualifier applied to reference type; ignored\n    \"/wd4200\"  # zero-sized array in struct/union\n    \"/wd4244\"  # conversion from 'type1' to 'type2', possible loss of data\n    \"/wd4267\"  # conversion from 'size_t' to 'type', possible loss of data\n    \"/wd4305\"  # truncation from 'type1' to 'type2'\n    \"/wd4800\"  # forcing value to bool 'true' or 'false'\n    \"/wd4828\"  # The file contains a character that is illegal\n    \"/wd4996\"  # identifier was declared deprecated\n    \"/wd4661\"  # no suitable definition provided for explicit template instantiation request\n    \"/wd4848\"  # 'no_unique_address' is a vendor extension in C++17\n    # errors:\n    \"/we4013\"  # 'function' undefined; assuming extern returning int\n    \"/we4133\"  # incompatible pointer types\n    \"/we4431\"  # missing type specifier - int assumed\n    \"/we4033\"  # 'function' must return a value\n  )\n\n  string(REPLACE \";\" \" \" _WARNINGS \"${_WARNINGS}\")\n  set(C_WARNINGS \"${_WARNINGS}\")\n  set(CXX_WARNINGS \"${_WARNINGS}\")\n  unset(_WARNINGS)\n```\n\n----------------------------------------\n\nTITLE: Processing UI Blocks\nDESCRIPTION: Handles events for all UI blocks in the current active area. This function is called from the area-window event queue handler.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/interface_API.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nuiDoBlocks(&curarea->uiblocks, event);\n```\n\n----------------------------------------\n\nTITLE: Platform and Library Conditional Compilation\nDESCRIPTION: Adds platform-specific and library-dependent compilation definitions for TBB, OpenVDB, Windows, and NumPy\nSOURCE: https://github.com/blender/blender/blob/main/extern/mantaflow/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  add_definitions(-DTBB=1)\nendif()\n\nif(WITH_OPENVDB)\n  add_definitions(-DOPENVDB=1)\n  add_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\nendif()\n\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n\nif(WITH_MANTA_NUMPY AND WITH_PYTHON_NUMPY)\n  add_definitions(-DNUMPY=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Guiding in CMake for Cycles\nDESCRIPTION: Sets up compilation flags and include directories for path guiding when WITH_CYCLES_PATH_GUIDING is enabled. It also defines the guiding integration level.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_PATH_GUIDING)\n  add_definitions(-DWITH_PATH_GUIDING)\n\n  # The level of the guiding integration.\n  # Different levels can be selected to measure the overhead of different stages.\n  # 1 = recording the path segments\n  # 2 = 1 + generating (not storing) sample data from the segments\n  # 3 = 2 + storing the generates sample data\n  # 4 = 3 + training the guiding fields\n  # 5 = 4 + querying the trained guiding for sampling (full path guiding)\n  add_definitions(-DPATH_GUIDING_LEVEL=5)\n\n  include_directories(\n    SYSTEM\n    ${OPENPGL_INCLUDE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DNA Header Generation\nDESCRIPTION: Generates header files containing DNA includes and file lists by iterating through source DNA include files and creating compilation output.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesdna/intern/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(dna_header_include_file \"${CMAKE_CURRENT_BINARY_DIR}/dna_includes_all.h\")\nset(dna_header_string_file \"${CMAKE_CURRENT_BINARY_DIR}/dna_includes_as_strings.h\")\n\nset(DNA_INCLUDE_TEXT \"/* Do not edit manually, changes will be overwritten. */\\n\")\nset(DNA_FILE_LIST \"/* Do not edit manually, changes will be overwritten. */\\n\")\nforeach(header ${SRC_DNA_INC})\n  get_filename_component(dna_header_file ${header} NAME)\n  string(APPEND DNA_INCLUDE_TEXT \"#include \\\"${header}\\\"\\n\")\n  string(APPEND DNA_FILE_LIST \"\\t\\\"${dna_header_file}\\\",\\n\")\nendforeach()\n\nfile(GENERATE OUTPUT ${dna_header_include_file} CONTENT \"${DNA_INCLUDE_TEXT}\")\nfile(GENERATE OUTPUT ${dna_header_string_file} CONTENT \"${DNA_FILE_LIST}\")\n```\n\n----------------------------------------\n\nTITLE: GLSL Shader Compilation Loop\nDESCRIPTION: Converts GLSL shader files to C code using glsl_to_c function and adds them to a library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_C)\nforeach(GLSL_FILE ${GLSL_SRC})\n  glsl_to_c(${GLSL_FILE} GLSL_C)\nendforeach()\n\nblender_add_lib(bf_compositor_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Action Editor in CMake\nDESCRIPTION: Specifies the library dependencies required for building the Action Editor space.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_action/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Generating GLSL Source List Header\nDESCRIPTION: Creates a header file containing a list of GLSL shader sources with file paths\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SOURCE_CONTENT \"\")\nforeach(GLSL_FILE ${GLSL_SRC})\n  get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n  string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n  string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for OpenImageIO Integration\nDESCRIPTION: Specifies the source files (.cpp, .cc) and header files (.h, .hh) that make up the OpenImageIO integration library for Blender.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  openimageio_api.h\n  openimageio_support.hh\n\n  openimageio_api.cpp\n  openimageio_support.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Settings for Blender Features\nDESCRIPTION: Adds conditional compilation definitions for Python support and experimental features like simulation datablocks and point clouds.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/object/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\n  add_definitions(-DWITH_POINTCLOUD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Geometry Nodes Registration and Library Setup\nDESCRIPTION: Sets up node discovery, library generation, and dependencies for geometry nodes functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_node_discovery(\n  bf_nodes_geometry_generated\n  \"${SRC}\"\n  ${CMAKE_CURRENT_BINARY_DIR}/register_geometry_nodes.cc\n  register_geometry_nodes\n)\n\nlist(APPEND LIB\n  bf_nodes_geometry_generated\n)\n\nblender_add_lib(bf_nodes_geometry \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\ntarget_link_libraries(bf_nodes_geometry_generated bf_nodes_geometry)\n\nblender_set_target_unity_build(bf_nodes_geometry 10)\n\nadd_dependencies(bf_nodes_geometry bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Spreadsheet Space\nDESCRIPTION: Defines the include directories needed for building the spreadsheet space component, including paths to core Blender includes and RNA generation output.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_spreadsheet/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Precompiled Headers Configuration in CMake\nDESCRIPTION: Sets up precompiled headers configuration with compatibility checks for Clang-Tidy. Includes logic to disable precompiled headers when incompatible with current compiler setup.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(COMMAND target_precompile_headers)\n  option(WITH_COMPILER_PRECOMPILED_HEADERS \"\\\nUse pre-compiled headers to speed up compilation.\"\n    ON\n  )\n  mark_as_advanced(WITH_COMPILER_PRECOMPILED_HEADERS)\n\n  if(WITH_CLANG_TIDY AND (CMAKE_COMPILER_IS_GNUCC OR APPLE))\n    if(WITH_COMPILER_PRECOMPILED_HEADERS)\n      message(STATUS\n        \"Clang-Tidy and the current compiler's precompiled headers are incompatible, \"\n        \"disabling precompiled headers.\"\n      )\n      set(WITH_COMPILER_PRECOMPILED_HEADERS OFF)\n    endif()\n  endif()\n\n  if(NOT WITH_COMPILER_PRECOMPILED_HEADERS)\n    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths for Blender Geometry Module in CMake\nDESCRIPTION: Defines the include directories for the Blender geometry module, including both internal and public paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../makesrna\n  ../../../intern/eigen\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Blender Components\nDESCRIPTION: Adds subdirectories to the CMake build process based on compilation flags, enabling or disabling certain features like the thumbnailer, image format support, Python scripting, and Freestyle.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BLENDER_THUMBNAILER)\n  add_subdirectory(blendthumb)\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  add_subdirectory(imbuf/intern/openexr)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_subdirectory(imbuf/intern/cineon)\nendif()\n\nif(WITH_PYTHON)\n  add_subdirectory(python)\nendif()\n\nif(WITH_FREESTYLE)\n  add_subdirectory(freestyle)\nendif()\n\nif(WITH_CPU_CHECK)\n  add_subdirectory(cpucheck)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Blender Editor Geometry Module in CMake\nDESCRIPTION: Adds a dependency on the RNA generation step to ensure necessary header files are available before compiling the geometry module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/geometry/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(bf_editor_geometry bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Clip Editor Library in CMake\nDESCRIPTION: Adds the clip editor as a library to the Blender build system, specifying source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_clip/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_clip \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Physics Editor Library in CMake\nDESCRIPTION: Creates the Blender physics editor library using the defined source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/physics/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_physics \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_physics bf_rna)\n```\n\n----------------------------------------\n\nTITLE: CMake Library Target Definition\nDESCRIPTION: Defines the final library target for the processed datafiles and creates an alias target.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_datafiles \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::editor::datafiles ALIAS bf_editor_datafiles)\n```\n\n----------------------------------------\n\nTITLE: Defining Geometry Node Source Files\nDESCRIPTION: Lists all the source files that comprise the geometry nodes system, including individual node implementations and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_geo_accumulate_field.cc\n  nodes/node_geo_attribute_capture.cc\n  # ... [truncated for brevity]\n  node_geometry_tree.cc\n  node_geometry_util.cc\n\n  node_geometry_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Building Freestyle Library Target\nDESCRIPTION: Creates and configures the Freestyle library build target with precompiled headers and RNA dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/freestyle/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_freestyle \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nif(COMMAND target_precompile_headers)\n  target_precompile_headers(bf_freestyle PRIVATE FRS_precomp.h)\nendif()\n\n# RNA_prototypes.hh\nadd_dependencies(bf_freestyle bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Automatic CMake Dependency Fetching for Fast Float\nDESCRIPTION: Demonstrates how to automatically fetch and integrate the fast_float library using CMake's FetchContent mechanism. Requires CMake 3.11 or newer.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nFetchContent_Declare(\n  fast_float\n  GIT_REPOSITORY https://github.com/lemire/fast_float.git\n  GIT_TAG tags/v1.1.2\n  GIT_SHALLOW TRUE)\n\nFetchContent_MakeAvailable(fast_float)\ntarget_link_libraries(myprogram PUBLIC fast_float)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang-CL Warning Suppressions for C++ in CMake\nDESCRIPTION: This snippet defines a large set of warning suppression flags for the Clang-CL compiler when compiling C++ code. It disables numerous warnings to accommodate Blender's codebase and build requirements.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nCXX_WARN_CLANG_CL_C++98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-local-type-template-args # 6906\nCXX_WARN_CLANG_CL_RESERVED_IDENTIFIER -Wno-reserved-identifier # 5886\nCXX_WARN_CLANG_CL_CAST_ALIGN -Wno-cast-align # 5513\n# ... [additional flags omitted for brevity]\nCXX_WARN_CLANG_CL_PRE_C11_COMPAT -Wno-pre-c11-compat\n```\n\n----------------------------------------\n\nTITLE: Python Module Installation\nDESCRIPTION: Handles installation of Python modules and dependencies for non-Windows platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_MODULE AND LIBDIR AND NOT WIN32)\n  install(\n    DIRECTORY ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/MaterialX\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Simulation Library Target\nDESCRIPTION: Creates the simulation library target using the defined sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/simulation/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_simulation \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Texture Level Parameter Values - OpenGL - Python\nDESCRIPTION: The glGetTexLevelParameter function retrieves texture parameter values specifically for a given level of detail, allowing for precise control over texture mipmapping.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetTexLevelParameter (target, level, pname, params):\n\n   B{glGetTexLevelParameterfv, glGetTexLevelParameteriv}\n\n   return texture parameter values for a specific level of detail\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetTexLevelParameter.xhtml>`__\n\n   :type target: Enumerated constant\n   :arg target: Specifies the symbolic name of the target texture.\n   :type level: int\n   :arg level: Specifies the level-of-detail number of the desired image.\n      Level 0 is the base image level. Level n is the nth mipmap reduction image.\n   :type pname: Enumerated constant\n   :arg pname: Specifies the symbolic name of a texture parameter.\n   :type params: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg params: Returns the requested data.\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories for Blender Build in CMake\nDESCRIPTION: This snippet adds subdirectories to the build based on whether Blender, standalone Cycles, or Cycles Hydra render delegate is being built. It includes core Blender components and optional dependencies like CUDA and HIP.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_52\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BLENDER)\n  add_subdirectory(intern)\n  add_subdirectory(extern)\n\n  # source after intern and extern to gather all\n  # internal and external library information first, for test linking\n  add_subdirectory(source)\nelseif(WITH_CYCLES_STANDALONE OR WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  add_subdirectory(intern/atomic)\n  add_subdirectory(intern/guardedalloc)\n  add_subdirectory(intern/libc_compat)\n  add_subdirectory(intern/sky)\n\n  add_subdirectory(intern/cycles)\n  if(WITH_CYCLES_LOGGING)\n    if(NOT WITH_SYSTEM_GFLAGS)\n      add_subdirectory(extern/gflags)\n    endif()\n    add_subdirectory(extern/glog)\n  endif()\n  if(WITH_CUDA_DYNLOAD)\n    add_subdirectory(extern/cuew)\n  endif()\n  if(WITH_HIP_DYNLOAD)\n    add_subdirectory(extern/hipew)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Support for Blender Modifiers\nDESCRIPTION: Adds USD (Universal Scene Description) support to the modifiers module if Blender is built with USD support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_USD)\n  add_definitions(-DWITH_USD)\n  list(APPEND INC\n    ../io/usd\n  )\n  list(APPEND LIB\n    bf_io_usd\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for FBX Importer\nDESCRIPTION: Specifies all library dependencies required by the FBX importer module. Includes Blender internal libraries for animation, kernel functionality, mesh manipulation, and external dependencies like ufbx.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/fbx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::nodes\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::ufbx\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Configuration for Blender Draw Module\nDESCRIPTION: Sets up conditional compilation options and includes based on enabled features like OpenSubdiv, OpenVDB, Fluid simulation, Freestyle, and XR support. Each feature adds necessary include paths, definitions, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_DRAW_DEBUG)\n  list(APPEND SRC\n    engines/select/select_debug_engine.cc\n  )\n  add_definitions(-DWITH_DRAW_DEBUG)\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\n  list(APPEND INC_SYS\n    ${OPENSUBDIV_INCLUDE_DIRS}\n  )\nendif()\n\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n\nif(WITH_MOD_FLUID)\n  list(APPEND INC\n    ../../../intern/mantaflow/extern\n  )\n  add_definitions(-DWITH_FLUID)\nendif()\n\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generated Source Compilation Flags\nDESCRIPTION: Sets up special compiler flags for generated source files, including warning suppressions for GCC/Clang and MSVC.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(GENSRC_FLAGS)\nset(GENSRC_CFLAGS)\nset(GENSRC_CXXFLAGS)\nif(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_C_COMPILER_ID MATCHES \"Clang\"))\n  set(GENSRC_CFLAGS \"-Wno-missing-prototypes\")\n  set(GENSRC_CXXFLAGS \"-Wno-missing-declarations\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Culling Mode in OpenGL with Python\nDESCRIPTION: Specifies whether front- or back-facing facets can be culled using the glCullFace function. The mode parameter is an enumerated constant.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nglCullFace(mode)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Editor Space Info in CMake\nDESCRIPTION: Specifies the library dependencies for the Blender editor space info module, including various Blender-specific libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_info/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Core GPU Source Files Configuration\nDESCRIPTION: Defines the main GPU source files including implementation files and headers for core functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/gpu_batch.cc\n  intern/gpu_batch_presets.cc\n  # ... [truncated for brevity]\n  intern/gpu_vertex_format_private.hh\n  dummy/dummy_backend.hh\n  dummy/dummy_batch.hh\n  dummy/dummy_context.hh\n  dummy/dummy_framebuffer.hh\n  dummy/dummy_vertex_buffer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Editor Utility Library\nDESCRIPTION: Lists all the source files and header files to be included in the Blender editor utility library. This includes various utility functions, gizmo utils, and numerous header files for different Blender subsystems.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/util/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  ed_draw.cc\n  ed_transverts.cc\n  ed_util.cc\n  ed_util_imbuf.cc\n  ed_util_ops.cc\n  ed_viewer_path.cc\n  gizmo_utils.cc\n  numinput.cc\n  select_utils.cc\n\n  # general includes\n  ../include/BIF_glutil.hh\n  ../include/ED_anim_api.hh\n  # ... (truncated for brevity)\n  ../include/UI_view2d.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Object Editor Library\nDESCRIPTION: Creates the object editor library target and sets up RNA dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/object/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_object \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_object bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional International Support Source Addition\nDESCRIPTION: Adds additional source files when international support is enabled, including special handling for Apple platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  list(APPEND SRC\n    intern/messages.cc\n    intern/messages.hh\n  )\n\n  if(APPLE)\n    list(APPEND SRC\n      intern/messages_apple.mm\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for STL Module in Blender with CMake\nDESCRIPTION: Lists all source and header files that make up the STL import/export module. This includes the main interface files, importer components for ASCII and binary STL formats, exporter components, and internal data structures.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/stl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  IO_stl.cc\n  importer/stl_import.cc\n  importer/stl_import_ascii_reader.cc\n  importer/stl_import_binary_reader.cc\n  importer/stl_import_mesh.cc\n  exporter/stl_export.cc\n  exporter/stl_export_writer.cc\n\n  intern/stl_data.hh\n\n  IO_stl.hh\n  importer/stl_import.hh\n  importer/stl_import_ascii_reader.hh\n  importer/stl_import_binary_reader.hh\n  importer/stl_import_mesh.hh\n  exporter/stl_export.hh\n  exporter/stl_export_writer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Freestyle in Blender Render Editor CMake\nDESCRIPTION: Adds include directory and definition for Freestyle support if enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  list(APPEND INC\n    ../../freestyle\n  )\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Library Dependencies for Grease Pencil Editor in CMake\nDESCRIPTION: Defines the library dependencies for the Grease Pencil editor module, including various Blender internal libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/grease_pencil/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::clog\n  PRIVATE bf::windowmanager\n  extern_curve_fit_nd\n  extern_fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Fluid Simulation in Blender Physics Editor\nDESCRIPTION: Adds Mantaflow library and defines WITH_FLUID flag if fluid simulation is enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/physics/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  list(APPEND LIB\n    bf_intern_mantaflow\n  )\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Integration of Fast Float Library\nDESCRIPTION: Shows how to include and link the fast_float library in a CMake project using add_subdirectory. This approach requires the library to be present in your project directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(fast_float)\ntarget_link_libraries(myprogram PUBLIC fast_float)\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Compiler Flags for Bullet Physics\nDESCRIPTION: Suppresses warnings in MSVC by removing /W3 flag and adding /W0 flag due to numerous warnings in Bullet Physics code\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  # bullet is responsible for quite a few silly warnings\n  # suppress all of them. Not great, but they really needed\n  # to sort that out themselves.\n  remove_cc_flag(\"/W3\")\n  add_c_flag(\"/W0\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Device Support Compilation for Cycles in CMake\nDESCRIPTION: Adds compiler definitions for optional device support in Cycles, including HIP (AMD GPU) and Metal (Apple GPU) backends. These definitions control which GPU acceleration backends are available during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_HIP)\n  add_definitions(-DWITH_HIP)\nendif()\n\nif(WITH_CYCLES_DEVICE_METAL)\n  add_definitions(-DWITH_METAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Compute Shader Sources in CMake\nDESCRIPTION: Lists the GLSL compute shader source files for the Workbench rendering engine.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_COMP\n  workbench_shadow_visibility_comp.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Blender Editor Space Info in CMake\nDESCRIPTION: Adds a dependency on the RNA generation target to ensure necessary header files are generated before compiling the editor space info module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_info/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_info bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Specifying Library Dependencies for Blender Mesh Editor in CMake\nDESCRIPTION: Defines the library dependencies for the Blender mesh editor module, including various Blender-specific libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mesh/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Clip Editor in CMake\nDESCRIPTION: Specifies the library dependencies for the clip editor module, including various Blender internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_clip/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Spreadsheet Space\nDESCRIPTION: Lists all source and header files that comprise the spreadsheet space implementation, including UI, data handling, and drawing components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_spreadsheet/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  space_spreadsheet.cc\n  spreadsheet_cache.cc\n  spreadsheet_column.cc\n  spreadsheet_data_source.cc\n  spreadsheet_data_source_geometry.cc\n  spreadsheet_dataset_draw.cc\n  spreadsheet_draw.cc\n  spreadsheet_layout.cc\n  spreadsheet_ops.cc\n  spreadsheet_panels.cc\n  spreadsheet_row_filter.cc\n  spreadsheet_row_filter_ui.cc\n\n  spreadsheet_cache.hh\n  spreadsheet_column.hh\n  spreadsheet_column_values.hh\n  spreadsheet_data_source.hh\n  spreadsheet_data_source_geometry.hh\n  spreadsheet_dataset_draw.hh\n  spreadsheet_draw.hh\n  spreadsheet_intern.hh\n  spreadsheet_layout.hh\n  spreadsheet_row_filter.hh\n  spreadsheet_row_filter_ui.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for TBB in Blender Render Editor CMake\nDESCRIPTION: Adds a definition to prevent macro conflicts when using TBB on Windows.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Cycles in CMake\nDESCRIPTION: Lists all source files (.cpp) and header files (.h) that are part of the Cycles rendering engine integration in Blender. These files implement various aspects of the renderer including camera, geometry, lighting, and materials.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  camera.cpp\n  device.cpp\n  display_driver.cpp\n  image.cpp\n  geometry.cpp\n  light.cpp\n  light_linking.cpp\n  mesh.cpp\n  object.cpp\n  object_cull.cpp\n  output_driver.cpp\n  particles.cpp\n  pointcloud.cpp\n  curves.cpp\n  logging.cpp\n  python.cpp\n  session.cpp\n  shader.cpp\n  sync.cpp\n  texture.cpp\n  viewport.cpp\n  volume.cpp\n\n  attribute_convert.h\n  CCL_api.h\n  device.h\n  display_driver.h\n  id_map.h\n  image.h\n  light_linking.h\n  object_cull.h\n  output_driver.h\n  sync.h\n  session.h\n  texture.h\n  util.h\n  viewport.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for COLLADA Module in CMake\nDESCRIPTION: Lists all the source files (.cpp) and header files (.h) that compose the COLLADA import/export module. These files handle various aspects of the COLLADA format such as animations, armatures, cameras, and materials.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/collada/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  AnimationClipExporter.cpp\n  AnimationExporter.cpp\n  AnimationImporter.cpp\n  ArmatureExporter.cpp\n  ArmatureImporter.cpp\n  BCAnimationCurve.cpp\n  BCAnimationSampler.cpp\n  BCMath.cpp\n  BCSampleData.cpp\n  BlenderContext.cpp\n  CameraExporter.cpp\n  ControllerExporter.cpp\n  DocumentExporter.cpp\n  DocumentImporter.cpp\n  EffectExporter.cpp\n  ErrorHandler.cpp\n  ExportSettings.cpp\n  ExtraHandler.cpp\n  ExtraTags.cpp\n  GeometryExporter.cpp\n  ImageExporter.cpp\n  ImportSettings.cpp\n  InstanceWriter.cpp\n  LightExporter.cpp\n  MaterialExporter.cpp\n  Materials.cpp\n  MeshImporter.cpp\n  SceneExporter.cpp\n  SkinInfo.cpp\n  TransformReader.cpp\n  TransformWriter.cpp\n  collada.cpp\n  collada_internal.cpp\n  collada_utils.cpp\n\n  AnimationClipExporter.h\n  AnimationExporter.h\n  AnimationImporter.h\n  ArmatureExporter.h\n  ArmatureImporter.h\n  BCAnimationCurve.h\n  BCAnimationSampler.h\n  BCMath.h\n  BCSampleData.h\n  BlenderContext.h\n  BlenderTypes.h\n  CameraExporter.h\n  ControllerExporter.h\n  DocumentExporter.h\n  DocumentImporter.h\n  EffectExporter.h\n  ErrorHandler.h\n  ExportSettings.h\n  ExtraHandler.h\n  ExtraTags.h\n  GeometryExporter.h\n  ImageExporter.h\n  ImportSettings.h\n  InstanceWriter.h\n  LightExporter.h\n  MaterialExporter.h\n  Materials.h\n  MeshImporter.h\n  SceneExporter.h\n  SkinInfo.h\n  TransformReader.h\n  TransformWriter.h\n  collada.h\n  collada_internal.h\n  collada_utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C Compiler Warning Flags for Intel Compiler\nDESCRIPTION: This code snippet adds warning flags to the C compiler when using Intel's compiler. It enables all warnings, adds pointer arithmetic warnings, and disables unknown pragmas warnings.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nadd_check_c_compiler_flags(\n  C_WARNINGS\n\n  C_WARN_ALL -Wall\n  C_WARN_POINTER_ARITH -Wpointer-arith\n  C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Evaluator Parameters - OpenGL - Python\nDESCRIPTION: The glGetMap function retrieves evaluator parameters based on parameters specified for the grid mesh, playing a crucial role in fine-tuning how meshes are evaluated in OpenGL.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetMap (target, query, v):\n\n   B{glGetMapdv, glGetMapfv, glGetMapiv}\n\n   Return evaluator parameters\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetMap.xhtml>`__\n\n   :type target: Enumerated constant\n   :arg target: Specifies the symbolic name of a map.\n   :type query: Enumerated constant\n   :arg query: Specifies which parameter to return.\n   :type v: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg v: Returns the requested data.\n```\n\n----------------------------------------\n\nTITLE: CUDA Dynamic Loading Configuration\nDESCRIPTION: Configures CUDA dynamic loading when CUDA toolkit is not found. Automatically enables dynamic runtime loading of CUDA libraries if the toolkit is unavailable.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES AND WITH_CYCLES_DEVICE_CUDA AND NOT WITH_CUDA_DYNLOAD)\n  find_package(CUDA)\n  if(NOT CUDA_FOUND)\n    message(\n      STATUS\n      \"CUDA toolkit not found, \"\n      \"using dynamic runtime loading of libraries (WITH_CUDA_DYNLOAD) instead\"\n    )\n    set(WITH_CUDA_DYNLOAD ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Libraries for Ghost Test Applications\nDESCRIPTION: Sets up various library dependencies including Ghost, string library, BlendFont, and BLI library. Each library is configured with its own CMakeLists.txt file and source/include paths are properly adjusted.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  set(WITH_GHOST_X11 ON)\nendif()\n\n# BLF needs this to ignore GPU library\nadd_definitions(-DBLF_STANDALONE)\n\n# ghost\ninclude(${CMAKE_SOURCE_DIR}/../CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../\")\ninclude_directories(${INC_NEW})\nadd_library(ghost_lib ${SRC_NEW})\n\n# string\ninclude(${CMAKE_SOURCE_DIR}/../../string/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../string/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../string/\")\ninclude_directories(${INC_NEW})\nadd_library(string_lib ${SRC_NEW})\n\n# `numaapi` (for 'bli_lib').\ninclude(${CMAKE_SOURCE_DIR}/../../numaapi/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../numaapi/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../numaapi/\")\ninclude_directories(${INC_NEW})\nadd_library(numaapi_lib ${SRC_NEW})\n\n# guardedalloc\ninclude(${CMAKE_SOURCE_DIR}/../../guardedalloc/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../guardedalloc/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../guardedalloc/\")\ninclude_directories(${INC_NEW})\nadd_library(guardedalloc_lib ${SRC_NEW})\n\n# `gpu` (used by `blenfont`).\nadd_definitions(-DGPU_STANDALONE)\nset(CMAKE_CURRENT_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../source/blender/gpu\")\ninclude(${CMAKE_SOURCE_DIR}/../../../source/blender/gpu/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../../source/blender/gpu/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../../source/blender/gpu/\")\ninclude_directories(${INC_NEW})\nadd_library(gpu_lib ${SRC_NEW})\nset(CMAKE_CURRENT_SOURCE_DIR \"${_CMAKE_CURRENT_SOURCE_DIR_INIT}\")\n\n# `blenfont`.\ninclude(${CMAKE_SOURCE_DIR}/../../../source/blender/blenfont/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../../source/blender/blenfont/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../../source/blender/blenfont/\")\ninclude_directories(${INC_NEW})\nadd_library(blenfont_lib ${SRC_NEW})\n\n# `wcwidth`.\ninclude(${CMAKE_SOURCE_DIR}/../../../extern/wcwidth/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../../extern/wcwidth/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../../extern/wcwidth/\")\ninclude_directories(${INC_NEW})\nadd_library(wcwidth_lib ${SRC_NEW})\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Library Source Files in CMake\nDESCRIPTION: Lists the GLSL library source files used across multiple shaders in Blender's GPU rendering system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/shaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_LIB\n  common/gpu_shader_print_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Compiler Warning Flags for Intel Compiler\nDESCRIPTION: This code adds warning flags for the C++ compiler when using Intel's compiler. It enables all warnings and disables specific warnings related to invalid offsetof and sign comparisons.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nadd_check_cxx_compiler_flags(\n  CXX_WARNINGS\n\n  CXX_WARN_ALL -Wall\n  CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n  CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Node Editor in CMake\nDESCRIPTION: Lists all the source files that are part of the Blender node editor space implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_node/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  add_menu_assets.cc\n  clipboard.cc\n  drawnode.cc\n  link_drag_search.cc\n  node_add.cc\n  node_context_path.cc\n  node_draw.cc\n  node_edit.cc\n  node_geometry_attribute_search.cc\n  node_geometry_layer_search.cc\n  node_gizmo.cc\n  node_group.cc\n  node_ops.cc\n  node_relationships.cc\n  node_select.cc\n  node_shader_preview.cc\n  node_templates.cc\n  node_view.cc\n  space_node.cc\n\n  node_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: RNA Source Files Configuration\nDESCRIPTION: Defines the list of RNA definition source files (DEFSRC) and API source files (APISRC) that make up the RNA system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(DEFSRC\n  rna_ID.cc\n  rna_action.cc\n  # ... additional files\n)\n\nset(APISRC\n  rna_action_api.cc\n  rna_animation_api.cc\n  # ... additional files\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Mask Editor\nDESCRIPTION: Lists all source files that comprise the mask editor component, including both implementation and header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mask/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  mask_add.cc\n  mask_draw.cc\n  mask_edit.cc\n  mask_editaction.cc\n  mask_ops.cc\n  mask_query.cc\n  mask_relationships.cc\n  mask_select.cc\n  mask_shapekey.cc\n\n  mask_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Potrace Integration Configuration\nDESCRIPTION: Conditional configuration for Potrace library integration, adding include directories and libraries when Potrace support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/sculpt_paint/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_POTRACE)\n  list(APPEND INC\n    ${POTRACE_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${POTRACE_LIBRARIES}\n  )\n  add_definitions(-DWITH_POTRACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Cycles Integrator in CMake\nDESCRIPTION: Lists all the source files (.cpp) that are part of the Cycles integrator component. This includes various rendering, denoising, and path tracing implementations.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/integrator/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  adaptive_sampling.cpp\n  denoiser.cpp\n  denoiser_gpu.cpp\n  denoiser_oidn.cpp\n  denoiser_oidn_gpu.cpp\n  denoiser_optix.cpp\n  path_trace.cpp\n  tile.cpp\n  pass_accessor.cpp\n  pass_accessor_cpu.cpp\n  pass_accessor_gpu.cpp\n  path_trace_display.cpp\n  path_trace_tile.cpp\n  path_trace_work.cpp\n  path_trace_work_cpu.cpp\n  path_trace_work_gpu.cpp\n  render_scheduler.cpp\n  shader_eval.cpp\n  work_balancer.cpp\n  work_tile_scheduler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing System Include Directories in CMake for Blender\nDESCRIPTION: Prepares a variable for system include directories, currently left empty for potential future use.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Compilation Settings\nDESCRIPTION: Adds conditional compilation definitions for Freestyle and experimental features like simulation datablock and pointcloud support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_buttons/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\n  add_definitions(-DWITH_POINTCLOUD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Symbol Visibility for the Plugin\nDESCRIPTION: Sets platform-specific linker flags for controlling symbol visibility in the Cycles Hydra plugin. It uses different approaches for Apple (macOS) and other Unix platforms.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n  if(APPLE)\n    set_property(\n      TARGET\n      ${HdCyclesPluginName}\n      APPEND_STRING PROPERTY LINK_FLAGS\n      \" -Wl,-exported_symbols_list,'${CMAKE_CURRENT_SOURCE_DIR}/resources/apple_symbols.map'\"\n    )\n  elseif(UNIX)\n    set_property(\n      TARGET\n      ${HdCyclesPluginName}\n      APPEND_STRING PROPERTY LINK_FLAGS\n      \" -Wl,--version-script='${CMAKE_CURRENT_SOURCE_DIR}/resources/linux_symbols.map'\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Function Nodes\nDESCRIPTION: Specifies the required library dependencies for building the function nodes module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/function/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Loader\nDESCRIPTION: Lists all source and header files required for building the blenloader module, including versioning, read/write, and undo functionality implementations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenloader/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ${CMAKE_SOURCE_DIR}/release/datafiles/userdef/userdef_default_theme.c\n  intern/blend_validate.cc\n  intern/readblenentry.cc\n  intern/readfile.cc\n  intern/readfile_tempload.cc\n  intern/undofile.cc\n  intern/versioning_250.cc\n  intern/versioning_260.cc\n  intern/versioning_270.cc\n  intern/versioning_280.cc\n  intern/versioning_290.cc\n  intern/versioning_300.cc\n  intern/versioning_400.cc\n  intern/versioning_common.cc\n  intern/versioning_defaults.cc\n  intern/versioning_dna.cc\n  intern/versioning_legacy.cc\n  intern/versioning_userdef.cc\n  intern/writefile.cc\n\n  BLO_blend_defs.hh\n  BLO_blend_validate.hh\n  BLO_read_write.hh\n  BLO_readfile.hh\n  BLO_undofile.hh\n  BLO_userdef_default.h\n  BLO_writefile.hh\n  intern/readfile.hh\n  intern/versioning_common.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining EEVEE Vertex Shader Sources in CMake\nDESCRIPTION: Sets up a list of EEVEE vertex shader source files for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_VERT\n  eevee_debug_irradiance_grid_vert.glsl\n  eevee_debug_surfels_vert.glsl\n  eevee_depth_of_field_scatter_vert.glsl\n  eevee_display_lightprobe_planar_vert.glsl\n  eevee_display_lightprobe_sphere_vert.glsl\n  eevee_display_lightprobe_volume_vert.glsl\n  eevee_geom_curves_vert.glsl\n  # eevee_geom_gpencil_vert.glsl # Not yet supported\n  eevee_geom_mesh_vert.glsl\n  eevee_geom_pointcloud_vert.glsl\n  eevee_geom_volume_vert.glsl\n  eevee_geom_world_vert.glsl\n  eevee_lookdev_display_vert.glsl\n  eevee_shadow_page_tile_vert.glsl\n  eevee_shadow_tag_usage_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Dependencies\nDESCRIPTION: Specifies all required library dependencies for the mask editor, including internal Blender libraries with PRIVATE visibility.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mask/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for File Editor Space\nDESCRIPTION: Specifies all required library dependencies for building the file editor space component.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_file/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Mesh Editor in CMake\nDESCRIPTION: Lists all the source files that comprise the Blender mesh editor module, including various editing operations and utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mesh/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  editface.cc\n  editmesh_add.cc\n  editmesh_add_gizmo.cc\n  editmesh_attribute.cc\n  editmesh_automerge.cc\n  editmesh_bevel.cc\n  editmesh_bisect.cc\n  editmesh_extrude.cc\n  editmesh_extrude_screw.cc\n  editmesh_extrude_spin.cc\n  editmesh_extrude_spin_gizmo.cc\n  editmesh_inset.cc\n  editmesh_intersect.cc\n  editmesh_knife.cc\n  editmesh_knife_project.cc\n  editmesh_loopcut.cc\n  editmesh_mask_extract.cc\n  editmesh_path.cc\n  editmesh_polybuild.cc\n  editmesh_preselect_edgering.cc\n  editmesh_preselect_elem.cc\n  editmesh_rip.cc\n  editmesh_rip_edge.cc\n  editmesh_select.cc\n  editmesh_select_similar.cc\n  editmesh_set_sharpness_by_angle.cc\n  editmesh_tools.cc\n  editmesh_undo.cc\n  editmesh_utils.cc\n  mesh_data.cc\n  mesh_mirror.cc\n  mesh_ops.cc\n  meshtools.cc\n\n  mesh_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Render Editor in CMake\nDESCRIPTION: Lists the source files to be compiled for the Blender render editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  render_internal.cc\n  render_opengl.cc\n  render_ops.cc\n  render_preview.cc\n  render_shading.cc\n  render_update.cc\n  render_view.cc\n\n  render_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Sequencer Editor\nDESCRIPTION: Defines the include directories for the Sequencer Editor module, including local and generated directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_sequencer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Linking the Cycles Hydra Plugin\nDESCRIPTION: Links the Cycles Hydra static library to the plugin, providing all the render delegate functionality to the shared library plugin.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n  target_link_libraries(${HdCyclesPluginName}\n    cycles_hydra\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies required libraries for the armature editor, including animation, asset system, kernel, and various internal Blender frameworks.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/armature/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding LP Test Executable with CMake\nDESCRIPTION: This snippet conditionally adds the 'lp_test' executable based on the `CMAKE_BUILD_TYPE`. If the build type is 'Maintainer', the executable is added normally; otherwise, it's excluded from the default build.  It then sets up the libraries required for the 'lp_test' executable based on the availability of GLPK, CPLEX, CLP, and SOPLEX.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(LEMON_HAVE_LP)\n  IF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n    ADD_EXECUTABLE(lp_test lp_test.cc)\n  ELSE()\n    ADD_EXECUTABLE(lp_test EXCLUDE_FROM_ALL lp_test.cc)\n  ENDIF()\n\n  SET(LP_TEST_LIBS lemon)\n\n  IF(LEMON_HAVE_GLPK)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${GLPK_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CPLEX)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${ILOG_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CLP)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${COIN_CLP_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_SOPLEX)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${SOPLEX_LIBRARIES})\n  ENDIF()\n\n  TARGET_LINK_LIBRARIES(lp_test ${LP_TEST_LIBS})\n  ADD_TEST(lp_test lp_test)\n  ADD_DEPENDENCIES(check lp_test)\n\n  IF(WIN32 AND LEMON_HAVE_GLPK)\n    GET_TARGET_PROPERTY(TARGET_LOC lp_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET lp_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/glpk.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/libltdl3.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/zlib1.dll ${TARGET_PATH}\n    )\n  ENDIF()\n\n  IF(WIN32 AND LEMON_HAVE_CPLEX)\n    GET_TARGET_PROPERTY(TARGET_LOC lp_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET lp_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${ILOG_CPLEX_DLL} ${TARGET_PATH}\n    )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Editor Geometry Module in CMake\nDESCRIPTION: Specifies the source files to be compiled for the Blender editor geometry module, including various geometry operations and node group functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/geometry/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  geometry_attributes.cc\n  geometry_ops.cc\n  geometry_randomization.cc\n  node_group_operator.cc\n\n  geometry_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution with Time Sleep in Python\nDESCRIPTION: Keeps the Python application running for a specified duration using `time.sleep`, allowing sounds to be fully heard before the application quits.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/tutorials.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Installation Path Configuration\nDESCRIPTION: Sets up installation paths for Cycles depending on whether it's built standalone or with Blender. Handles special case for Windows Python debug builds.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_BLENDER)\n  set(CYCLES_INSTALL_PATH ${CMAKE_INSTALL_PREFIX})\nelse()\n  set(WITH_CYCLES_BLENDER ON)\n  if(NOT WINDOWS_PYTHON_DEBUG)\n    set(CYCLES_INSTALL_PATH \"scripts/addons_core/cycles\")\n  else()\n    set(CYCLES_INSTALL_PATH\n      \"$ENV{appdata}/blender foundation/blender/${BLENDER_VERSION}/scripts/addons_core/cycles\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for Cycles Hydra\nDESCRIPTION: Sets up library dependencies needed for the Cycles Hydra render delegate, including core Cycles libraries, Epoxy, and Boost Python libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  cycles_scene\n  cycles_session\n  cycles_graph\n  ${Epoxy_LIBRARIES}\n  ${BOOST_PYTHON_LIBRARIES}\n)\ncycles_external_libraries_append(LIB)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies and Platform-Specific Configuration\nDESCRIPTION: Finds and configures required dependencies like OpenGL, FreeType, and ZLIB. Handles platform-specific settings and compiler flags for different systems.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(PLATFORM_CGLAGS)\n\nfind_package(OpenGL REQUIRED)\n\nfind_package(Freetype REQUIRED)\n\nfind_package(ZLIB REQUIRED)\n\ninclude_directories(${CMAKE_SOURCE_DIR}/../)\ninclude_directories(${OPENGL_INCLUDE_DIR})\ninclude_directories(${FREETYPE_INCLUDE_DIRS})\ninclude_directories(${CMAKE_SOURCE_DIR}/../../../source/blender/blenfont)\n\nif(CMAKE_COMPILER_IS_GNUCC)\n  set(PLATFORM_CFLAGS \"-funsigned-char\")\nendif()\n\nif(UNIX AND NOT APPLE)\n  find_package(X11 REQUIRED)\n\n  set(PLATFORM_LINKLIBS\n    ${X11_X11_LIB}\n    ${X11_Xinput_LIB}\n    -lpthread\n  )\nendif()\n\nstring(APPEND CMAKE_C_FLAGS \" ${PLATFORM_CFLAGS}\")\nstring(APPEND CMAKE_CXX_FLAGS \" ${PLATFORM_CFLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: MSVC-Clang Special Warning Configuration\nDESCRIPTION: Special warning configuration for MSVC-Clang compiler to handle its unique warning behavior and suppress excessive warnings in the build process.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC_CLANG)\n    remove_cc_flag(\"/W3\")\n    add_check_c_compiler_flags(\n      C_WARNINGS\n      C_WARN_CLANG_CL_W3 /W3\n      C_WARN_CLANG_CL_C++98_COMPAT -Wno-c++98-compat # 352692\n      # ... additional flags ...\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Physics Editor in CMake\nDESCRIPTION: Lists the source files to be compiled for the Blender physics editor module, including various particle and physics-related files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/physics/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  dynamicpaint_ops.cc\n  particle_boids.cc\n  particle_edit.cc\n  particle_edit_undo.cc\n  particle_object.cc\n  physics_fluid.cc\n  physics_ops.cc\n  physics_pointcache.cc\n  rigidbody_constraint.cc\n  rigidbody_object.cc\n  rigidbody_world.cc\n\n  particle_edit_utildefines.h\n  physics_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies all required library dependencies for the blenloader module, including core Blender components and utility libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenloader/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::memutil\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Text Editor Module\nDESCRIPTION: Lists all source files required for building the text editor module, including functionality for text display, editing, formatting, autocompletion, and undo operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_text/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  space_text.cc\n  text_autocomplete.cc\n  text_draw.cc\n  text_format.cc\n  text_format_glsl.cc\n  text_format_osl.cc\n  text_format_pov.cc\n  text_format_pov_ini.cc\n  text_format_py.cc\n  text_header.cc\n  text_ops.cc\n  text_undo.cc\n\n  text_format.hh\n  text_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Clip Editor in CMake\nDESCRIPTION: Lists all the source files that are part of the clip editor module, including various operations and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_clip/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  clip_buttons.cc\n  clip_dopesheet_draw.cc\n  clip_dopesheet_ops.cc\n  clip_draw.cc\n  clip_editor.cc\n  clip_graph_draw.cc\n  clip_graph_ops.cc\n  clip_ops.cc\n  clip_utils.cc\n  space_clip.cc\n  tracking_ops.cc\n  tracking_ops_detect.cc\n  tracking_ops_orient.cc\n  tracking_ops_plane.cc\n  tracking_ops_solve.cc\n  tracking_ops_stabilize.cc\n  tracking_ops_track.cc\n  tracking_ops_utils.cc\n  tracking_select.cc\n\n  clip_intern.hh\n  tracking_ops_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Support for Cycles in CMake\nDESCRIPTION: Adds compiler definitions for optional features like fluid simulation and Intel TBB threading support. These definitions enable specific functionality in the Cycles renderer based on build options.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n\nif(WITH_TBB)\n  add_definitions(-DWITH_TBB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows Blender Installation Configuration\nDESCRIPTION: Configures installation paths and files for Windows platform, including debug scripts, system info, and thumbnailer.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  FILES\n    ${CMAKE_BINARY_DIR}/release/windows/batch/blender_system_info_$<CONFIG>.cmd\n    DESTINATION ${TARGETDIR_EXE}\n    RENAME blender_system_info.cmd\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Boost Auto-Linking\nDESCRIPTION: Adds the BOOST_ALL_NO_LIB definition to disable Boost's automatic library linking behavior, giving more control over which libraries are linked.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DBOOST_ALL_NO_LIB)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node Discovery and Library Build Configuration\nDESCRIPTION: Configures node discovery generation and sets up the final library build settings including unity build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/function/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_node_discovery(\n  bf_nodes_functions_generated\n  \"${SRC}\"\n  ${CMAKE_CURRENT_BINARY_DIR}/register_function_nodes.cc\n  register_function_nodes\n)\n\nlist(APPEND LIB\n  bf_nodes_functions_generated\n)\n\nblender_add_lib(bf_nodes_function \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\ntarget_link_libraries(bf_nodes_functions_generated bf_nodes_function)\n\nblender_set_target_unity_build(bf_nodes_function 10)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for PLY IO Library\nDESCRIPTION: Lists all source and header files required for the PLY IO library implementation, including exporters, importers, and core functionality\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/ply/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  exporter/ply_export.cc\n  exporter/ply_export_data.cc\n  exporter/ply_export_header.cc\n  exporter/ply_export_load_plydata.cc\n  exporter/ply_file_buffer.cc\n  exporter/ply_file_buffer_ascii.cc\n  exporter/ply_file_buffer_binary.cc\n  importer/ply_import.cc\n  importer/ply_import_buffer.cc\n  importer/ply_import_data.cc\n  importer/ply_import_mesh.cc\n  IO_ply.cc\n\n  exporter/ply_export.hh\n  exporter/ply_export_data.hh\n  exporter/ply_export_header.hh\n  exporter/ply_export_load_plydata.hh\n  exporter/ply_file_buffer.hh\n  exporter/ply_file_buffer_ascii.hh\n  exporter/ply_file_buffer_binary.hh\n  importer/ply_import.hh\n  importer/ply_import_buffer.hh\n  importer/ply_import_data.hh\n  importer/ply_import_mesh.hh\n  IO_ply.hh\n\n  intern/ply_data.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Animation Library in CMake\nDESCRIPTION: Defines the library dependencies required for building the animation and rigging library, including both public and private dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/animrig/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::clog\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries for OpenSubdiv Integration in CMake\nDESCRIPTION: Specifies the libraries required for the OpenSubdiv integration, including Blender's internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::gpu\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C Compiler Warning Flags for Clang-CL\nDESCRIPTION: This snippet defines a list of C compiler warning flags to be disabled when using Clang-CL. Each flag is accompanied by a comment indicating the number of occurrences or related issue.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nC_WARN_CLANG_CL_C++98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-local-type-template-args # 6906\nC_WARN_CLANG_CL_RESERVED_IDENTIFIER -Wno-reserved-identifier # 5886\nC_WARN_CLANG_CL_CAST_ALIGN -Wno-cast-align # 5513\nC_WARN_CLANG_CL_DOCUMENTATION -Wno-documentation # 5107\nC_WARN_CLANG_CL_DISABLED_MACRO_EXPANSION -Wno-disabled-macro-expansion # 4449\n# ... (truncated for brevity)\nC_WARN_CLANG_CL_SWITCH_DEFAULT -Wno-switch-default\nC_WARN_CLANG_CL_NAN_INFINITY_DISABLED -Wno-nan-infinity-disabled\nC_WARN_CLANG_CL_PRE_C11_COMPAT -Wno-pre-c11-compat\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite for Guarded Allocation in CMake\nDESCRIPTION: Sets up test suite for guarded allocation if testing is enabled, including test sources, includes, and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/guardedalloc/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/guardedalloc_alignment_test.cc\n    tests/guardedalloc_overflow_test.cc\n    tests/guardedalloc_test_base.h\n  )\n  set(TEST_INC\n    ../../source/blender/blenlib\n  )\n  set(TEST_LIB\n    bf_intern_guardedalloc\n    bf_blenlib\n  )\n  blender_add_test_suite_executable(guardedalloc \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Mask Editor Library Target\nDESCRIPTION: Creates the mask editor library target using Blender's custom CMake function, combining all previously defined components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mask/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_mask \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Building File Editor Space Library\nDESCRIPTION: Creates the file editor space library and sets up RNA dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_file/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_file \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_file bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Screen Editor in CMake\nDESCRIPTION: Lists the source files that comprise the Blender screen editor module, including various screen-related operations and workspace management.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/screen/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  area.cc\n  area_query.cc\n  area_utils.cc\n  glutil.cc\n  screen_context.cc\n  screen_draw.cc\n  screen_edit.cc\n  screen_geometry.cc\n  screen_ops.cc\n  screen_user_menu.cc\n  screendump.cc\n  workspace_edit.cc\n  workspace_layout_edit.cc\n  workspace_listen.cc\n\n  screen_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for OpenImageIO\nDESCRIPTION: Sets up the list of libraries that the OpenImageIO integration depends on, including OpenImageIO itself and several Blender internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  ${OPENIMAGEIO_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Intern Subdirectory to Blender CMake Build\nDESCRIPTION: Includes the 'intern' subdirectory in the build process. This likely contains internal or core components of the Blender project.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesdna/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(intern)\n```\n\n----------------------------------------\n\nTITLE: Structure Definition for from_chars_result in C++\nDESCRIPTION: This snippet defines the structure used to return the result of the from_chars function, including a pointer to the character after the parsed number and an error code indicating the success or type of failure that occurred.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fast_float/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n\"struct from_chars_result {\\n    const char* ptr;\\n    std::errc ec;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite for Animation Editor in CMake\nDESCRIPTION: Sets up test files and dependencies for the animation editor if testing is enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/animation/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    anim_filter_test.cc\n    keyframes_general_test.cc\n    keyframes_keylist_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n  )\n  blender_add_test_suite_lib(editor_animation \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding COLLADA Library to Blender Build in CMake\nDESCRIPTION: Calls the blender_add_lib function to add the COLLADA module as a library to the Blender build, providing the source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/collada/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_collada \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Shaders as C++ in CMake\nDESCRIPTION: Sets up conditional compilation of GLSL shaders as C++ code if the WITH_GPU_SHADER_CPP_COMPILATION option is enabled. This allows for integration of shaders into the C++ codebase.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/shaders/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n\n  compile_sources_as_cpp(gpu_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(gpu_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(gpu_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Printing Final Blender Configuration in CMake\nDESCRIPTION: This snippet defines functions to format and print the final Blender configuration, including build options, compiler options, and various feature toggles. It provides a summary of the build setup for the user.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_54\n\nLANGUAGE: CMake\nCODE:\n```\nif(FIRST_RUN)\n\n  set(_config_msg \"\\nBlender Configuration\\n=====================\")\n\n  function(info_cfg_option\n    _setting\n    )\n\n    set(_msg \"  - ${_setting}\")\n    string(LENGTH \"${_msg}\" _len)\n    while(\"36\" GREATER \"${_len}\")\n      string(APPEND _msg \" \")\n      math(EXPR _len \"${_len} + 1\")\n    endwhile()\n\n    set(_config_msg \"${_config_msg}\\n${_msg}${${_setting}}\" PARENT_SCOPE)\n  endfunction()\n\n  function(info_cfg_text\n    _text\n    )\n\n    set(_config_msg \"${_config_msg}\\n\\n  ${_text}\" PARENT_SCOPE)\n  endfunction()\n\n  message(STATUS \"C Compiler:   \\\"${CMAKE_C_COMPILER_ID}\\\"\")\n  message(STATUS \"C++ Compiler: \\\"${CMAKE_CXX_COMPILER_ID}\\\"\")\n\n  info_cfg_text(\"Build Options:\")\n  info_cfg_option(WITH_ALEMBIC)\n  info_cfg_option(WITH_BULLET)\n  info_cfg_option(WITH_CLANG)\n  info_cfg_option(WITH_CYCLES)\n  # ... (more options)\n\n  info_cfg_text(\"\")\n\n  message(STATUS \"${_config_msg}\")\nendif()\n\nif(0)\n  print_all_vars()\nendif()\n\n# Should be the last step of configuration.\nif(POSTCONFIGURE_SCRIPT)\n  include(${POSTCONFIGURE_SCRIPT})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSubdiv Support for Blender Modifiers\nDESCRIPTION: Adds OpenSubdiv support for subdivision surface modifiers if enabled in the build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Python Module\nDESCRIPTION: Defines include directories for the Blender Python module build, including internal Blender directories and external dependencies like Python.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/intern/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n  ../../editors/include\n  ../../imbuf/intern/oiio\n  ../../makesrna\n  ../../../../intern/mantaflow/extern\n  ../../../../intern/opencolorio\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compositor Tests in CMake\nDESCRIPTION: Sets up compositor testing configuration for CPU and GPU backends (OpenGL, Metal, Vulkan) including test cases for color, converter, filter, input/output, and vector operations.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(compositor_tests\n  color\n  converter\n  filter\n  input\n  output\n  vector\n\n  pixel_nodes\n  multiple_node_setups\n)\n\nif(WITH_LIBMV)\n  list(APPEND compositor_tests distort matte anisotropic_filtering)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Library Precompilation Options for Unix\nDESCRIPTION: Defines build options for handling precompiled libraries on Unix systems. Includes options for detecting precompiled libraries and using static linking.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  option(WITH_LIBS_PRECOMPILED \"\\\nDetect and link against pre-compiled libraries (typically found under \\\"../lib/\\\"). \\\nDisabling this option will use the system libraries although cached paths \\\nthat point to pre-compiled libraries will be left as-is.\"\n    ON\n  )\n  mark_as_advanced(WITH_LIBS_PRECOMPILED)\n\n  option(WITH_STATIC_LIBS \"\\\nTry to link with static libraries, as much as possible, \\\nto make blender more portable across distributions\"\n    OFF\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Msgfmt\nDESCRIPTION: Defines library dependencies for the msgfmt executable, including Blender's internal libraries and platform-specific linkages.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/msgfmt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n  ${ZLIB_LIBRARIES}\n  ${PLATFORM_LINKLIBS})\n\nadd_cc_flags_custom_test(msgfmt)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Sequencer in CMake\nDESCRIPTION: Defines the library dependencies for the Blender sequencer, including various Blender components like blenfont, blenkernel, and imbuf.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/sequencer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library Target\nDESCRIPTION: Creates the library target for the ID management module with all configured sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/id_management/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_id_management \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for NLA Editor in CMake\nDESCRIPTION: Lists the source files required for building the NLA editor module, including C++ files and a header file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_nla/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  nla_buttons.cc\n  nla_draw.cc\n  nla_edit.cc\n  nla_ops.cc\n  nla_select.cc\n  nla_tracks.cc\n  space_nla.cc\n\n  nla_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Screen Editor in CMake\nDESCRIPTION: Specifies the library dependencies for the Blender screen editor module, including various Blender subsystems and external libraries like fmtlib.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/screen/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_datafiles\n  bf_editor_space_sequencer\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Composite Nodes in CMake\nDESCRIPTION: Specifies the required libraries for building the composite nodes module, including internal Blender libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/composite/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  bf_compositor\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating View3D Editor Library in Blender CMake\nDESCRIPTION: Builds the View3D editor component as a library using Blender's custom CMake function, incorporating all previously defined sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_view3d \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Building QuadriFlow with GUROBI Support\nDESCRIPTION: This command builds the QuadriFlow software with GUROBI support for solving integer offset problems using integer programming. It is intended for benchmarking purposes and overrides other solvers. Dependencies include CMake and the GUROBI library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncmake .. -DCMAKE_BUILD_TYPE=release -DBUILD_GUROBI=ON -DBUILD_LOG=ON\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Blender Transform Module\nDESCRIPTION: Adds a dependency on the RNA code generation target to ensure RNA_prototypes.hh is generated before building the transform module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/transform/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_transform bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Disabling Xcode Specific Warnings\nDESCRIPTION: This snippet disables the 64-to-32-bit conversion warning in Xcode to match command line build behavior and other platforms more closely.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\n# Xcode enables additional warning flags by default. Disable some to match\n# command line build and other platforms more closely.\nif(XCODE)\n  set(CMAKE_XCODE_ATTRIBUTE_GCC_WARN_64_TO_32_BIT_CONVERSION NO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the internal Blender libraries that this module depends on, including blenkernel, blenlib, DNA, and memory allocation utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/openexr/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies all required library dependencies for the curves editor, including core Blender libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curves/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::curve_fit_nd\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Sculpt Paint Module\nDESCRIPTION: Defines include paths for the sculpt paint module compilation, including internal Blender directories and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/sculpt_paint/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../..\n\n  ../asset\n  ../include\n  ../uvedit\n  ../../blenlib\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Animation Library in CMake\nDESCRIPTION: Lists all source files (.cc) and header files (.hh) that are part of the animation and rigging library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/animrig/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/action.cc\n  intern/action_iterators.cc\n  intern/action_legacy.cc\n  intern/action_runtime.cc\n  intern/action_selection.cc\n  intern/anim_rna.cc\n  intern/animdata.cc\n  intern/bone_collections.cc\n  intern/bonecolor.cc\n  intern/driver.cc\n  intern/evaluation.cc\n  intern/fcurve.cc\n  intern/keyframing.cc\n  intern/keyframing_auto.cc\n  intern/keyingsets.cc\n  intern/nla.cc\n  intern/pose.cc\n  intern/versioning.cc\n  intern/visualkey.cc\n\n  ANIM_action.hh\n  ANIM_action_iterators.hh\n  ANIM_action_legacy.hh\n  ANIM_animdata.hh\n  ANIM_armature_iter.hh\n  ANIM_bone_collections.hh\n  ANIM_bonecolor.hh\n  ANIM_driver.hh\n  ANIM_evaluation.hh\n  ANIM_fcurve.hh\n  ANIM_keyframing.hh\n  ANIM_keyingsets.hh\n  ANIM_nla.hh\n  ANIM_pose.hh\n  ANIM_rna.hh\n  ANIM_versioning.hh\n  ANIM_visualkey.hh\n  intern/action_runtime.hh\n  intern/bone_collections_internal.hh\n  intern/evaluation_internal.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies the required library dependencies for the graph editor, using Blender's internal library naming scheme.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_graph/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sky Model Library Build in CMake\nDESCRIPTION: Sets up the build configuration for Blender's sky model library. Defines include directories, source files including implementation and header files, and library dependencies. Uses blender_add_lib to create the 'bf_intern_sky' library target.\nSOURCE: https://github.com/blender/blender/blob/main/intern/sky/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  include\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  source/sky_model.cpp\n  source/sky_nishita.cpp\n\n  include/sky_model.h\n  source/sky_float3.h\n  source/sky_model_data.h\n)\n\nset(LIB\n)\n\nblender_add_lib(bf_intern_sky \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories for the Plugin\nDESCRIPTION: Sets the runtime and library output directories for the Cycles Hydra plugin to the current binary directory for easy access during development.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n  set_target_properties(${HdCyclesPluginName}\n    PROPERTIES\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Support for Blender Editor Utility Library\nDESCRIPTION: Adds Python support to the Blender editor utility library if the WITH_PYTHON flag is set. This includes adding a compilation definition and an additional include directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/util/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Support for Text Editor Module\nDESCRIPTION: Adds Python support to the text editor module if WITH_PYTHON is enabled. Appends Python include directories and adds a definition to enable Python features.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_text/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC\n    ../../python\n  )\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Composite Nodes in CMake\nDESCRIPTION: Lists all the source files for the composite nodes module, including individual node implementations and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/composite/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  nodes/node_composite_alpha_over.cc\n  nodes/node_composite_antialiasing.cc\n  # ... (truncated for brevity)\n  nodes/node_composite_zcombine.cc\n\n  node_composite_register.cc\n  node_composite_tree.cc\n  node_composite_util.cc\n\n  node_composite_register.hh\n  node_composite_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Binaries for SAT Flip Removal\nDESCRIPTION: These commands check whether the minisat and timeout binaries are correctly installed and accessible in the system PATH. It ensures the prerequisites for SAT flip removal in QuadriFlow are in place.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwhich minisat\nwhich timeout\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Support\nDESCRIPTION: Conditional configuration for Python support in the depsgraph library\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/depsgraph/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGL Dependencies for Blender Python Extensions\nDESCRIPTION: Conditionally adds OpenGL-related dependencies and includes based on build configuration\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/generic/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND INC_SYS\n  ${Epoxy_INCLUDE_DIRS}\n)\n\nif(WITH_OPENGL_BACKEND)\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\nendif()\n\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Editor Geometry Module in CMake\nDESCRIPTION: Defines the library dependencies for the Blender editor geometry module, including various Blender subsystems and external libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/geometry/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_object\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Unity Build Configuration in CMake\nDESCRIPTION: Configures unity build option for Blender modules to improve compile times. Includes version check and warning about potential header dependency issues.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.16\" AND NOT ${CMAKE_VERSION} VERSION_EQUAL \"3.28.2\")\n  option(WITH_UNITY_BUILD \"\\\nEnable unity build for modules that support it to improve compile times.\\n\\\nWARNING: this option allows files to be built without all necessary headers!\\n\nThis option should be disabled before manipulating or removing headers.\"\n    ON\n  )\n  mark_as_advanced(WITH_UNITY_BUILD)\nelse()\n  set(WITH_UNITY_BUILD OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the HIPEW library. It defines both local include directories (INC) and system include directories (INC_SYS).\nSOURCE: https://github.com/blender/blender/blob/main/extern/hipew/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  include\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Node Editor in CMake\nDESCRIPTION: Defines the include directories for the Blender node editor space, including various internal Blender directories and the generated RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_node/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../io\n  ../../compositor\n  ../../compositor/algorithms\n  ../../compositor/cached_resources\n  ../../compositor/derived_resources\n  ../../compositor/utilities\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Sets up the required library dependencies for the ID management module, including core Blender components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/id_management/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::windowmanager\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Scene Editor in CMake\nDESCRIPTION: Defines the include directories for the Blender scene editor module. It specifies both internal and system include paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/scene/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender GPU Python Module\nDESCRIPTION: Lists all the source and header files that are part of the GPU Python module. This includes various GPU-related Python bindings and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/gpu/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  gpu_py.cc\n  gpu_py_api.cc\n  gpu_py_batch.cc\n  gpu_py_buffer.cc\n  gpu_py_capabilities.cc\n  gpu_py_compute.cc\n  gpu_py_element.cc\n  gpu_py_framebuffer.cc\n  gpu_py_matrix.cc\n  gpu_py_offscreen.cc\n  gpu_py_platform.cc\n  gpu_py_select.cc\n  gpu_py_shader.cc\n  gpu_py_shader_create_info.cc\n  gpu_py_state.cc\n  gpu_py_texture.cc\n  gpu_py_types.cc\n  gpu_py_uniformbuffer.cc\n  gpu_py_vertex_buffer.cc\n  gpu_py_vertex_format.cc\n\n  gpu_py.hh\n  gpu_py_api.hh\n  gpu_py_batch.hh\n  gpu_py_buffer.hh\n  gpu_py_capabilities.hh\n  gpu_py_compute.hh\n  gpu_py_element.hh\n  gpu_py_framebuffer.hh\n  gpu_py_matrix.hh\n  gpu_py_offscreen.hh\n  gpu_py_platform.hh\n  gpu_py_select.hh\n  gpu_py_shader.hh\n  gpu_py_state.hh\n  gpu_py_texture.hh\n  gpu_py_types.hh\n  gpu_py_uniformbuffer.hh\n  gpu_py_vertex_buffer.hh\n  gpu_py_vertex_format.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Depth Mask in OpenGL with Python\nDESCRIPTION: Enables or disables writing into the depth buffer using the glDepthMask function. The flag parameter is a boolean value.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nglDepthMask(flag)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Python Import Test\nDESCRIPTION: Adds a specific test case for importing the Blender Python module (bpy) using the previously defined function. The test uses a script named import_bpy.py from the current directory.\nSOURCE: https://github.com/blender/blender/blob/main/tests/blender_as_python_module/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_blender_as_python_module_test(import_bpy ${CMAKE_CURRENT_LIST_DIR}/import_bpy.py ${CMAKE_INSTALL_PREFIX_WITH_CONFIG})\n```\n\n----------------------------------------\n\nTITLE: Configuring Ocean Simulation Support for Blender Modifiers\nDESCRIPTION: Adds ocean simulation support to the modifiers module if enabled in the build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MOD_OCEANSIM)\n  add_definitions(-DWITH_OCEANSIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Blender Properties\nDESCRIPTION: Sets Windows-specific properties for Blender, including PDB settings and vcpkg configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  set_target_properties(blender PROPERTIES VS_GLOBAL_VcpkgEnabled \"false\")\n  set_target_properties(blender PROPERTIES\n    PDB_NAME \"blender_private\"\n    PDB_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fluid Simulation Preprocessor Directives in CMake\nDESCRIPTION: Defines preprocessor directives for fluid simulation and conditionally enables OpenVDB support. Also adds a Windows-specific math definition.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DWITH_FLUID=1)\n\nif(WITH_OPENVDB)\n  add_definitions(-DOPENVDB=1)\nelse()\n  add_definitions(-DOPENVDB=0)\nendif()\n\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Build Definitions for TBB\nDESCRIPTION: Adds NOMINMAX definition to prevent Windows.h macro conflicts with STL when using TBB.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DNOMINMAX)\n```\n\n----------------------------------------\n\nTITLE: Setting up Device-Specific Binary Compilation in oneAPI for CMake\nDESCRIPTION: Configures target-specific binary compilation for Intel devices. It checks which devices are supported by the Intel Graphics Compiler using the ocloc tool, joins the device names into a comma-separated list, and adds appropriate compiler flags for the targeted devices.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n  # Host execution won't use GPU binaries, no need to compile them.\n  if(WITH_CYCLES_ONEAPI_BINARIES AND NOT WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n    # Add the list of Intel devices to build binaries for.\n    foreach(device ${CYCLES_ONEAPI_INTEL_BINARIES_ARCH})\n      # Run `ocloc` ids to test if the device is supported.\n      if(WIN32)\n        execute_process(\n          COMMAND ${OCLOC_INSTALL_DIR}/ocloc.exe ids ${device}\n          RESULT_VARIABLE oclocids_ret\n          OUTPUT_QUIET\n          ERROR_QUIET\n        )\n      else()\n        execute_process(\n          COMMAND ${CMAKE_COMMAND}\n          -E env \"LD_LIBRARY_PATH=${OCLOC_INSTALL_DIR}/lib:${IGC_INSTALL_DIR}/lib\"\n          ${OCLOC_INSTALL_DIR}/bin/ocloc ids ${device}\n\n          RESULT_VARIABLE oclocids_ret\n          OUTPUT_QUIET\n          ERROR_QUIET\n        )\n      endif()\n      if(NOT oclocids_ret EQUAL 0)\n        list(REMOVE_ITEM CYCLES_ONEAPI_INTEL_BINARIES_ARCH ${device})\n        message(STATUS\n          \"Cycles oneAPI: \"\n          \"binaries for ${device} not supported by Intel Graphics Compiler/ocloc, skipped.\"\n        )\n      endif()\n    endforeach()\n    list(JOIN CYCLES_ONEAPI_INTEL_BINARIES_ARCH \",\" gen_devices_string)\n    if(\"${gen_devices_string}\" STREQUAL \"\")\n      # Don't compile spir64_gen if no device is targeted\n      message(STATUS \"Cycles oneAPI: skipping spir64_gen compilation as no devices are targeted.\")\n      list(REMOVE_ITEM CYCLES_ONEAPI_SYCL_TARGETS spir64_gen)\n    else()\n      string(PREPEND CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen \"-device ${gen_devices_string} \")\n    endif()\n  else()\n      list(REMOVE_ITEM CYCLES_ONEAPI_SYCL_TARGETS spir64_gen)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Interface Library in CMake\nDESCRIPTION: Sets up include directories for the Blender interface library compilation. It includes local directories and generated RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/interface/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../asset\n  ../include\n  ../../makesrna\n  ../../python\n  ../../../../intern/ghost\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Shader Sources in CMake\nDESCRIPTION: Lists the GLSL vertex shader source files for the Workbench rendering engine.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_VERT\n  workbench_effect_smaa_vert.glsl\n  workbench_prepass_hair_vert.glsl\n  workbench_prepass_pointcloud_vert.glsl\n  workbench_prepass_vert.glsl\n  workbench_shadow_caps_vert.glsl\n  workbench_shadow_vert.glsl\n  workbench_volume_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Composite Nodes Library Target in CMake\nDESCRIPTION: Creates the library target for composite nodes, sets up unity build, and adds a dependency on RNA generation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/composite/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_nodes_composite \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nblender_set_target_unity_build(bf_nodes_composite 10)\n\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes_composite bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender's Undo System\nDESCRIPTION: Sets up the include directories for the undo system. It specifies relative paths to the necessary header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/undo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite for Blender Animation Library in CMake\nDESCRIPTION: Sets up test files and dependencies for the animation library when testing is enabled (WITH_GTESTS).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/animrig/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    intern/action_iterators_test.cc\n    intern/action_legacy_test.cc\n    intern/action_test.cc\n    intern/bone_collections_test.cc\n    intern/evaluation_test.cc\n    intern/keyframing_test.cc\n    intern/nla_test.cc\n    intern/pose_test.cc\n    intern/versioning_test.cc\n  )\n  set(TEST_LIB\n    PRIVATE bf::animrig\n  )\n  blender_add_test_suite_lib(animrig \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for UV Editor in CMake\nDESCRIPTION: Specifies the libraries that the UV editor module depends on, using the PRIVATE visibility specifier.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/uvedit/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Depth Function in OpenGL with Python\nDESCRIPTION: Specifies the value used for depth buffer comparisons using the glDepthFunc function. The func parameter is an enumerated constant.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nglDepthFunc(func)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Source Files in CMake\nDESCRIPTION: Defines the source files needed for building the test runner, including conditional inclusion of build info objects.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  blender_test.cc\n)\n\nif(WITH_BUILDINFO)\n  list(APPEND SRC\n    \"$<TARGET_OBJECTS:buildinfoobj>\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc Support in CMake\nDESCRIPTION: Adds a compilation definition for Jemalloc configuration if using version 5.0.0 or later.\nSOURCE: https://github.com/blender/blender/blob/main/intern/guardedalloc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MEM_JEMALLOC)\n  if(NOT (\"${JEMALLOC_VERSION}\" VERSION_LESS \"5.0.0\"))\n    add_definitions(-DWITH_JEMALLOC_CONF)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up IGC Directory for Linux in oneAPI CMake Configuration\nDESCRIPTION: Sets up the Intel Graphics Compiler (IGC) installation directory for Linux builds if it's not already defined. This path is used when building oneAPI kernels for Intel graphics hardware.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n  else()\n    if(NOT IGC_INSTALL_DIR)\n      get_filename_component(IGC_INSTALL_DIR \"${sycl_compiler_root}/../lib/igc\" ABSOLUTE)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for USD Integration\nDESCRIPTION: Lists all source files (.cc and .hh) that make up the USD integration module, organized by categories including utilities, writers, and readers for various asset types.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/usd_armature_utils.cc\n  intern/usd_asset_utils.cc\n  intern/usd_attribute_utils.cc\n  intern/usd_blend_shape_utils.cc\n  intern/usd_capi_export.cc\n  intern/usd_capi_import.cc\n  intern/usd_hierarchy_iterator.cc\n  intern/usd_hook.cc\n  intern/usd_instancing_utils.cc\n  intern/usd_light_convert.cc\n  intern/usd_mesh_utils.cc\n  intern/usd_utils.cc\n\n  intern/usd_writer_abstract.cc\n  intern/usd_writer_armature.cc\n  intern/usd_writer_camera.cc\n  intern/usd_writer_curves.cc\n  intern/usd_writer_hair.cc\n  intern/usd_writer_light.cc\n  intern/usd_writer_material.cc\n  intern/usd_writer_mesh.cc\n  intern/usd_writer_metaball.cc\n  intern/usd_writer_points.cc\n  intern/usd_writer_transform.cc\n  intern/usd_writer_volume.cc\n\n  intern/usd_reader_camera.cc\n  intern/usd_reader_curve.cc\n  intern/usd_reader_geom.cc\n  intern/usd_reader_instance.cc\n  intern/usd_reader_light.cc\n  intern/usd_reader_material.cc\n  intern/usd_reader_mesh.cc\n  intern/usd_reader_nurbs.cc\n  intern/usd_reader_pointinstancer.cc\n  intern/usd_reader_points.cc\n  intern/usd_reader_prim.cc\n  intern/usd_reader_shape.cc\n  intern/usd_reader_skeleton.cc\n  intern/usd_reader_stage.cc\n  intern/usd_reader_utils.cc\n  intern/usd_reader_volume.cc\n  intern/usd_reader_xform.cc\n  intern/usd_skel_convert.cc\n  intern/usd_skel_root_utils.cc\n\n  usd.hh\n  usd_private.hh\n\n  intern/usd_armature_utils.hh\n  intern/usd_asset_utils.hh\n  intern/usd_attribute_utils.hh\n  intern/usd_blend_shape_utils.hh\n  intern/usd_exporter_context.hh\n  intern/usd_hash_types.hh\n  intern/usd_hierarchy_iterator.hh\n  intern/usd_hook.hh\n  intern/usd_instancing_utils.hh\n  intern/usd_light_convert.hh\n  intern/usd_mesh_utils.hh\n  intern/usd_utils.hh\n\n  intern/usd_writer_abstract.hh\n  intern/usd_writer_armature.hh\n  intern/usd_writer_camera.hh\n  intern/usd_writer_curves.hh\n  intern/usd_writer_hair.hh\n  intern/usd_writer_light.hh\n  intern/usd_writer_material.hh\n  intern/usd_writer_mesh.hh\n  intern/usd_writer_metaball.hh\n  intern/usd_writer_points.hh\n  intern/usd_writer_transform.hh\n  intern/usd_writer_volume.hh\n\n  intern/usd_reader_camera.hh\n  intern/usd_reader_curve.hh\n  intern/usd_reader_geom.hh\n  intern/usd_reader_instance.hh\n  intern/usd_reader_light.hh\n  intern/usd_reader_material.hh\n  intern/usd_reader_mesh.hh\n  intern/usd_reader_nurbs.hh\n  intern/usd_reader_pointinstancer.hh\n  intern/usd_reader_points.hh\n  intern/usd_reader_prim.hh\n  intern/usd_reader_shape.hh\n  intern/usd_reader_skeleton.hh\n  intern/usd_reader_stage.hh\n  intern/usd_reader_utils.hh\n  intern/usd_reader_volume.hh\n  intern/usd_reader_xform.hh\n  intern/usd_skel_convert.hh\n  intern/usd_skel_root_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Shader Compilation in CMake\nDESCRIPTION: Sets up compilation of GLSL shaders as C++ code if WITH_GPU_SHADER_CPP_COMPILATION is enabled. It compiles vertex, fragment, and compute shaders separately.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/intern/shaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(draw_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(draw_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  compile_sources_as_cpp(draw_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Blender Dependencies Build System in CMake\nDESCRIPTION: Sets up the CMake project for building Blender dependencies, including minimum CMake version, project name, and policy settings. This is the foundational configuration for the build system.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(\"BlenderDependencies\")\nif(POLICY CMP0135)\n  cmake_policy(SET CMP0135 NEW) # CMake 3.24+ Set the date/time for extracted files to time of extraction\nendif()\ninclude(ExternalProject)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/../cmake/Modules\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Linker Options for Unix Systems\nDESCRIPTION: Sets up linker options for Unix systems (excluding macOS), allowing selection between gold, lld, and mold linkers for improved build performance.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(CMAKE_COMPILER_IS_GNUCC)\n    option(WITH_LINKER_GOLD \"Use ld.gold linker which is usually faster than ld.bfd\" ON)\n    mark_as_advanced(WITH_LINKER_GOLD)\n  endif()\n  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    option(WITH_LINKER_LLD \"Use ld.lld linker which is usually faster than ld.gold\" OFF)\n    mark_as_advanced(WITH_LINKER_LLD)\n    option(WITH_LINKER_MOLD \"Use ld.mold linker which is usually faster than ld.gold & ld.lld\" OFF)\n    mark_as_advanced(WITH_LINKER_MOLD)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up I/O Tests in CMake\nDESCRIPTION: Configures input/output tests for various file formats including Alembic, USD, FBX, OBJ, PLY, STL, and media formats. Includes dependency checks and test directory setup.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC AND TEST_SRC_DIR_EXISTS)\n  find_package_wrapper(Alembic)\n  if(NOT ALEMBIC_FOUND)\n    message(FATAL_ERROR \"Alembic is enabled but cannot be found\")\n  endif()\n  get_filename_component(real_include_dir ${ALEMBIC_INCLUDE_DIR} REALPATH)\n  get_filename_component(ALEMBIC_ROOT_DIR ${real_include_dir} DIRECTORY)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Support and System Include Directories\nDESCRIPTION: Adds Python support definition and configures system include directories for Mantaflow helper utilities, preprocessed files, and external dependencies like Python and zlib.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Python is always required\nadd_definitions(-DWITH_PYTHON)\n\nset(INC_SYS\n  ../../extern/mantaflow/helper/util\n  ../../extern/mantaflow/helper/pwrapper\n  ../../extern/mantaflow/preprocessed\n  ${PYTHON_INCLUDE_DIRS}\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectories for Blender modules - CMake\nDESCRIPTION: This snippet adds various subdirectories to the Blender CMake build based on configuration options. Each `add_subdirectory` command includes a particular module, such as 'atomic', 'clog', or 'ghost', which are part of the Blender source structure. The inclusion of each module can be conditional based on specific flags such as 'WITH_AUDASPACE', 'WITH_IK_SOLVER', etc.\nSOURCE: https://github.com/blender/blender/blob/main/intern/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# add_subdirectory(atomic)  # header only\nadd_subdirectory(atomic)\nadd_subdirectory(clog)\nadd_subdirectory(ghost)\nadd_subdirectory(guardedalloc)\nadd_subdirectory(libmv)\nadd_subdirectory(memutil)\nadd_subdirectory(opencolorio)\nadd_subdirectory(opensubdiv)\nadd_subdirectory(mikktspace)\nadd_subdirectory(eigen)\nadd_subdirectory(sky)\n\nif(WITH_AUDASPACE)\n  add_subdirectory(audaspace)\nendif()\n\nif(WITH_MOD_REMESH)\n  add_subdirectory(dualcon)\nendif()\n\nif(WITH_IK_SOLVER)\n  add_subdirectory(iksolver)\nendif()\n\nif(WITH_IK_ITASC)\n  add_subdirectory(itasc)\nendif()\n\nif(WITH_CYCLES)\n  add_subdirectory(cycles)\nendif()\n\nif(WITH_BULLET)\n  add_subdirectory(rigidbody)\nendif()\n\n\nif(WIN32)\n  # Only windows needs utf16 converter.\n  add_subdirectory(utfconv)\n\n  # Only used for Windows for now.\n  add_subdirectory(uriconvert)\nendif()\n\nif(WITH_MOD_FLUID)\n  add_subdirectory(mantaflow)\nendif()\n\nif(WITH_UV_SLIM)\n  add_subdirectory(slim)\nendif()\n\nif(WITH_OPENVDB)\n  add_subdirectory(openvdb)\nendif()\n\nif(WITH_QUADRIFLOW)\n  add_subdirectory(quadriflow)\nendif()\n\nif(UNIX AND NOT APPLE)\n  add_subdirectory(libc_compat)\nendif()\n\nif(WITH_RENDERDOC)\n  add_subdirectory(renderdoc_dynload)\nendif()\n\nif(UNIX AND NOT APPLE)\n  # Important this comes after \"ghost\" as it uses includes defined by GHOST's CMake.\n  if(WITH_GHOST_WAYLAND AND WITH_GHOST_WAYLAND_DYNLOAD)\n    add_subdirectory(wayland_dynload)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Text in Markdown\nDESCRIPTION: The complete text of the Apache License 2.0, formatted in markdown, detailing terms and conditions for software use, reproduction, and distribution.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions to Disable UFBX Features\nDESCRIPTION: This snippet adds compiler definitions to disable specific features of the ufbx library that are not utilized by Blender, ensuring a lighter compilation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ufbx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\n  # Turn off ufbx features that Blender does not use\n  -DUFBX_NO_SUBDIVISION\n  -DUFBX_NO_TESSELLATION\n  -DUFBX_NO_GEOMETRY_CACHE\n  -DUFBX_NO_SCENE_EVALUATION\n  -DUFBX_NO_SKINNING_EVALUATION\n  -DUFBX_NO_ANIMATION_BAKING\n  -DUFBX_NO_TRIANGULATION\n  -DUFBX_NO_INDEX_GENERATION\n  -DUFBX_NO_FORMAT_OBJ\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Cycles Device in CMake\nDESCRIPTION: Defines include directories for the Cycles device component. It sets up system and project-specific include paths.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/device/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS )\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Font Library\nDESCRIPTION: Defines all required library dependencies including internal Blender libraries and external dependencies like FreeType and Brotli.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenfont/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  ${FREETYPE_LIBRARIES} ${BROTLI_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluid Simulation Support for Blender Modifiers\nDESCRIPTION: Adds fluid simulation support to the modifiers module if enabled in the build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Cycles Hydra\nDESCRIPTION: Lists all the header files used in the Cycles Hydra render delegate implementation, which provide interfaces for various components like cameras, materials, mesh handling, and rendering processes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HD_CYCLES_HEADERS\n  attribute.h\n  camera.h\n  config.h\n  curves.h\n  field.h\n  file_reader.h\n  geometry.h\n  geometry.inl\n  instancer.h\n  light.h\n  material.h\n  mesh.h\n  node_util.h\n  output_driver.h\n  pointcloud.h\n  render_buffer.h\n  render_delegate.h\n  render_pass.h\n  session.h\n  volume.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Sequencer Library in CMake\nDESCRIPTION: Creates the Blender sequencer library target and sets up an alias for it. Also adds a dependency on the RNA prototypes generation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/sequencer/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_sequencer \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::sequencer ALIAS bf_sequencer)\n\n# RNA_prototypes.hh\nadd_dependencies(bf_sequencer bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Python Executable Configuration for Tests\nDESCRIPTION: Sets up the Python executable path for testing, with support for custom Python paths and validation of the executable existence.\nSOURCE: https://github.com/blender/blender/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT TEST_PYTHON_EXE)\n  set(TEST_PYTHON_EXE ${PYTHON_EXECUTABLE})\n  if(FIRST_RUN)\n    message(STATUS \"Tests: Using Python executable: ${TEST_PYTHON_EXE}\")\n  endif()\nelseif(NOT EXISTS ${TEST_PYTHON_EXE})\n  message(FATAL_ERROR \"Tests: TEST_PYTHON_EXE ${TEST_PYTHON_EXE} does not exist\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for QuadriFlow\nDESCRIPTION: Configures the required library dependencies including guardedalloc, eigen, and the quadriflow external library.\nSOURCE: https://github.com/blender/blender/blob/main/intern/quadriflow/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::dependencies::eigen\n  extern_quadriflow\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Header Properties\nDESCRIPTION: Configures inline header files to be treated as header-only, preventing object file compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  intern/math_base_inline.cc\n  intern/math_base_safe_inline.cc\n  intern/math_bits_inline.cc\n  intern/math_color_blend_inline.cc\n  intern/math_color_inline.cc\n  intern/math_geom_inline.cc\n  intern/math_vector_inline.cc\n  PROPERTIES HEADER_FILE_ONLY TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLog and GFlags Libraries in CMake for Blender\nDESCRIPTION: Sets up Google's logging (GLog) and flags (GFlags) libraries for Libmv, GTests, or Cycles logging. Handles both system installed versions and bundled versions, configuring include paths, libraries, and compiler definitions.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Configure `GLog/GFlags`\n\nif(WITH_LIBMV OR WITH_GTESTS OR (WITH_CYCLES AND WITH_CYCLES_LOGGING))\n  if(WITH_SYSTEM_GFLAGS)\n    find_package(Gflags)\n    if(NOT GFLAGS_FOUND)\n      message(FATAL_ERROR \"System wide Gflags is requested but was not found\")\n    endif()\n    # `FindGflags` does not define this, and we are not even sure what to use here.\n    set(GFLAGS_DEFINES)\n  else()\n    set(GFLAGS_DEFINES\n      -DGFLAGS_DLL_DEFINE_FLAG=\n      -DGFLAGS_DLL_DECLARE_FLAG=\n      -DGFLAGS_DLL_DECL=\n    )\n    set(GFLAGS_NAMESPACE \"gflags\")\n    set(GFLAGS_LIBRARIES extern_gflags)\n    set(GFLAGS_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/extern/gflags/src\")\n  endif()\n\n  if(WITH_SYSTEM_GLOG)\n    find_package(Glog)\n    if(NOT GLOG_FOUND)\n      message(FATAL_ERROR \"System wide Glog is requested but was not found\")\n    endif()\n    # `FindGlog` does not define this, and we are not even sure what to use here.\n    set(GLOG_DEFINES)\n  else()\n    set(GLOG_DEFINES\n      -DGOOGLE_GLOG_DLL_DECL=\n    )\n    set(GLOG_LIBRARIES extern_glog)\n    if(WIN32)\n      set(GLOG_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/glog/src/windows)\n    else()\n      set(GLOG_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/glog/include)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Armature Editor\nDESCRIPTION: Defines include paths for the armature editor compilation, including local headers and Eigen library integration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/armature/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for UV Editor in CMake\nDESCRIPTION: Lists all the source files that are part of the UV editor module, including both .cc and .hh files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/uvedit/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  uvedit_buttons.cc\n  uvedit_clipboard.cc\n  uvedit_clipboard_graph_iso.cc\n  uvedit_draw.cc\n  uvedit_islands.cc\n  uvedit_ops.cc\n  uvedit_path.cc\n  uvedit_rip.cc\n  uvedit_select.cc\n  uvedit_smart_stitch.cc\n  uvedit_unwrap_ops.cc\n\n  uvedit_clipboard_graph_iso.hh\n  uvedit_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Makesrna Executable Configuration\nDESCRIPTION: Configures the makesrna executable build target with source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(makesrna ${SRC} ${SRC_RNA_INC} ${SRC_DNA_INC})\nsetup_platform_linker_flags(makesrna)\nsetup_platform_linker_libs(makesrna)\nblender_target_include_dirs(makesrna ${INC})\nblender_target_include_dirs_sys(makesrna ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Grease Pencil Editor in CMake\nDESCRIPTION: Defines the include directories for the Grease Pencil editor module, including internal Blender directories and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/grease_pencil/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../extern/curve_fit_nd\n  ../sculpt_paint\n  ../../modifiers/intern/lineart\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Animation Editor in CMake\nDESCRIPTION: Defines include directories for the animation editor module, including asset system, RNA, and external libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/animation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../asset_system\n  ../../makesrna\n  ../../../../extern/fmtlib/include\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines required library dependencies for shader nodes including core Blender components and internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/shader/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_sky\n  bf_nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright Header for Blender Project\nDESCRIPTION: This snippet defines the copyright header for the Blender project files. It uses the SPDX (Software Package Data Exchange) standard for license information.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# SPDX-FileCopyrightText: 2016 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macros for Blender Build\nDESCRIPTION: Defines utility macros used in the build process, including a stub for blender_add_lib and a suffix_relpaths macro that handles relative paths in external CMake files.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# stub macro, does nothing\nmacro(blender_add_lib\n  name\n  sources\n  includes\n  includes_sys\n  library_deps # ignored.\n  )\n\nendmacro()\n\n# suffix relative paths so we can use external cmake files\nmacro(suffix_relpaths\n  new_files files prefix)\n\n  set(${new_files})\n  foreach(_file ${files})\n    if(IS_ABSOLUTE \"${_file}\")\n      list(APPEND ${new_files} ${_file})\n    else()\n      set(_file_to \"${prefix}${_file}\")\n      list(APPEND ${new_files} ${_file_to})\n      get_source_file_property(_is_generated ${_file} GENERATED)\n      set_source_files_properties(${_file_to} PROPERTIES GENERATED ${_is_generated})\n      unset(_file_to)\n      unset(_is_generated)\n    endif()\n  endforeach()\n  unset(_file)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for PLY IO\nDESCRIPTION: Specifies required library dependencies for the PLY IO implementation, including internal Blender libraries and external dependencies\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/ply/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::geometry\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Wavefront OBJ Library in CMake\nDESCRIPTION: Specifies all source and header files required for the Wavefront OBJ importer and exporter functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/wavefront_obj/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  IO_wavefront_obj.cc\n  exporter/obj_export_file_writer.cc\n  exporter/obj_export_mesh.cc\n  exporter/obj_export_mtl.cc\n  exporter/obj_export_nurbs.cc\n  exporter/obj_exporter.cc\n  importer/importer_mesh_utils.cc\n  importer/obj_import_file_reader.cc\n  importer/obj_import_mesh.cc\n  importer/obj_import_mtl.cc\n  importer/obj_import_nurbs.cc\n  importer/obj_importer.cc\n\n  IO_wavefront_obj.hh\n  exporter/obj_export_file_writer.hh\n  exporter/obj_export_io.hh\n  exporter/obj_export_mesh.hh\n  exporter/obj_export_mtl.hh\n  exporter/obj_export_nurbs.hh\n  exporter/obj_exporter.hh\n  importer/importer_mesh_utils.hh\n  importer/obj_import_file_reader.hh\n  importer/obj_import_mesh.hh\n  importer/obj_import_mtl.hh\n  importer/obj_import_nurbs.hh\n  importer/obj_import_objects.hh\n  importer/obj_importer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for GPU Shader Assertions in CMake\nDESCRIPTION: Adds compiler definitions for GPU shader assertions when the WITH_GPU_SHADER_ASSERT option is enabled, allowing for conditional compilation of debug features.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/glsl_preprocess/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_ASSERT)\n  add_definitions(-DWITH_GPU_SHADER_ASSERT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Hydra Render Engine in CMake\nDESCRIPTION: Lists the source files (.cc and .hh) that comprise the Blender Hydra render engine implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/hydra/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  camera.cc\n  engine.cc\n  final_engine.cc\n  light_tasks_delegate.cc\n  preview_engine.cc\n  python.cc\n  render_task_delegate.cc\n  viewport_engine.cc\n\n  camera.hh\n  engine.hh\n  final_engine.hh\n  light_tasks_delegate.hh\n  preview_engine.hh\n  render_task_delegate.hh\n  settings.hh\n  viewport_engine.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for the Cycles Hydra Plugin\nDESCRIPTION: Sets compiler preprocessor definitions for the Cycles Hydra plugin, including package naming, GLOG configuration, and debug settings for OSL and TBB based on build type.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n  target_compile_definitions(${HdCyclesPluginName}\n    PRIVATE\n    MFB_PACKAGE_NAME=${HdCyclesPluginName}\n    MFB_ALT_PACKAGE_NAME=${HdCyclesPluginName}\n    GLOG_NO_ABBREVIATED_SEVERITIES=1\n    OSL_DEBUG=$<CONFIG:DEBUG>\n    TBB_USE_DEBUG=$<CONFIG:DEBUG>\n    $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX=1>\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing MaterialX Libraries in CMake\nDESCRIPTION: Handles installation of MaterialX library files when MaterialX support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nif((DEFINED LIBDIR) AND TARGETDIR_LIB AND WITH_MATERIALX)\n  install(\n    DIRECTORY ${LIBDIR}/materialx/libraries\n    DESTINATION \"${TARGETDIR_LIB}/materialx\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Wavefront OBJ Library in CMake\nDESCRIPTION: Defines all internal and external library dependencies required by the Wavefront OBJ library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/wavefront_obj/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Grease Pencil Editor in CMake\nDESCRIPTION: Lists all the source files that comprise the Grease Pencil editor module, including various functionalities like editing, frames, geometry, and rendering.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/grease_pencil/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/grease_pencil_add.cc\n  intern/grease_pencil_bake_animation.cc\n  intern/grease_pencil_edit.cc\n  intern/grease_pencil_frames.cc\n  intern/grease_pencil_geom.cc\n  intern/grease_pencil_image_render.cc\n  intern/grease_pencil_join_selection.cc\n  intern/grease_pencil_layers.cc\n  intern/grease_pencil_lineart.cc\n  intern/grease_pencil_material.cc\n  intern/grease_pencil_merge.cc\n  intern/grease_pencil_modes.cc\n  intern/grease_pencil_ops.cc\n  intern/grease_pencil_primitive.cc\n  intern/grease_pencil_randomize.cc\n  intern/grease_pencil_select.cc\n  intern/grease_pencil_trim.cc\n  intern/grease_pencil_undo.cc\n  intern/grease_pencil_utils.cc\n  intern/grease_pencil_vertex_paint.cc\n  intern/grease_pencil_weight_paint.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Vulkan Backend Source Configuration\nDESCRIPTION: Defines source files for the Vulkan graphics backend implementation including render graph components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(VULKAN_SRC\n  vulkan/vk_backend.cc\n  vulkan/vk_batch.cc\n  # ... [truncated for brevity]\n  vulkan/vk_vertex_attribute_object.hh\n  vulkan/vk_vertex_buffer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Directory Installation Macro\nDESCRIPTION: Defines a macro for installing directories while excluding unnecessary files like Git metadata, Python cache files, and unused Python modules.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(install_dir from to)\n  install(\n    DIRECTORY ${from}\n    DESTINATION ${to}\n    PATTERN \".git\" EXCLUDE\n    PATTERN \".gitignore\" EXCLUDE\n    PATTERN \".gitea\" EXCLUDE\n    PATTERN \".github\" EXCLUDE\n    PATTERN \"*.pyc\" EXCLUDE\n    PATTERN \"*.pyo\" EXCLUDE\n    PATTERN \"*.orig\" EXCLUDE\n    PATTERN \"*.rej\" EXCLUDE\n    PATTERN \"__pycache__\" EXCLUDE\n    PATTERN \"__MACOSX\" EXCLUDE\n    PATTERN \".DS_Store\" EXCLUDE\n    PATTERN \"config-${PYTHON_VERSION}/*.a\" EXCLUDE\n    PATTERN \"lib2to3\" EXCLUDE\n    PATTERN \"tkinter\" EXCLUDE\n    PATTERN \"lib-dynload/_tkinter.*\" EXCLUDE\n    PATTERN \"idlelib\" EXCLUDE\n    PATTERN \"test\" EXCLUDE\n    PATTERN \"turtledemo\" EXCLUDE\n    PATTERN \"turtle.py\" EXCLUDE\n    PATTERN \"wininst*.exe\" EXCLUDE\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Interactive Program GPL Notice Example\nDESCRIPTION: An example of how to display a short GPL notice when an interactive program starts. It includes placeholders for the program name, version, copyright year, and author name.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/GPL-2.0-or-later.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines the source files that will be compiled into the fmtlib library. These include header files (`.h`) and a C++ source file (`.cc`).\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  include/fmt/core.h\n  include/fmt/format-inl.h\n  include/fmt/format.h\n  src/format.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Blender Audaspace library target in CMake\nDESCRIPTION: Finalizes the configuration by creating the Blender Audaspace library target with all the previously defined sources, include directories, and dependent libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/audaspace/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_audaspace \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Point Cloud Editor in CMake\nDESCRIPTION: Defines the library dependencies for the point cloud editor module, including various Blender internal libraries such as blenkernel, blenlib, and geometry.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/pointcloud/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::geometry\n  PRIVATE bf::functions\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Compositor\nDESCRIPTION: Defines include paths for the compositor module compilation, including local directories and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  algorithms\n  cached_resources\n  derived_resources\n  utilities\n  ../gpu/intern\n  ../makesrna\n  ../render/intern\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Python Mathutils\nDESCRIPTION: Defines include directories for the Blender Python Mathutils library build. It sets up local and system include paths, including Python include directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/mathutils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender GPU Python Module\nDESCRIPTION: Defines the include directories for the GPU Python module, including local and system paths. It also includes Python headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/gpu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../../editors/include\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Credentials\nDESCRIPTION: Configuration for ~/.pypirc file to set up PyPI and bpy repository credentials. Requires a secret PyPI token for authentication.\nSOURCE: https://github.com/blender/blender/blob/main/release/pypi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[distutils]\n  index-servers =\n    pypi\n    bpy\n[pypi]\n  username = __token__\n  password = <SECRET_PYPI_TOKEN>\n[bpy]\n  repository = https://upload.pypi.org/legacy/\n  username = __token__\n  password = <SECRET_PYPI_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Building BMesh Library\nDESCRIPTION: Creates the BMesh library target with all configured sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/bmesh/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_bmesh \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::bmesh ALIAS bf_bmesh)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Paths and Building Cycles OSL Kernel Library in CMake\nDESCRIPTION: Configures the include directories and calls the custom cycles_add_library function to build the OSL kernel module with the specified source files, headers, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_kernel_osl \"${LIB}\" ${SRC} ${HEADER_SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Atomic Operations Library in CMake\nDESCRIPTION: Defines include directories for the atomic operations library. Creates empty variables for system includes and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/atomic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ceres Library Dependencies\nDESCRIPTION: Sets up required library dependencies including GLOG, GFLAGS and Eigen for the Ceres solver library\nSOURCE: https://github.com/blender/blender/blob/main/extern/ceres/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${GLOG_LIBRARIES}\n  ${GFLAGS_LIBRARIES}\n\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing In-Source Builds in CMake for Blender\nDESCRIPTION: Checks if the source and binary directories are the same, and prevents in-source builds unless explicitly allowed with WITH_IN_SOURCE_BUILD option. Provides instructions for proper out-of-source builds.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n  if(NOT DEFINED WITH_IN_SOURCE_BUILD)\n    message(FATAL_ERROR\n      \"CMake generation for blender is not allowed within the source directory!\"\n      \"\\n Remove \\\"${CMAKE_SOURCE_DIR}/CMakeCache.txt\\\"\"\n      \"\\n then try again from another directory, e.g.:\"\n      \"\\n \"\n      \"\\n rm -rf CMakeCache.txt CMakeFiles\"\n      \"\\n cd ..\"\n      \"\\n mkdir cmake-make\"\n      \"\\n cd cmake-make\"\n      \"\\n cmake ../blender\"\n      \"\\n \"\n      \"\\n Alternately define WITH_IN_SOURCE_BUILD to force this option (not recommended!)\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for UV Editor in CMake\nDESCRIPTION: Defines the include directories for the UV editor module, including local and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/uvedit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Theora Library with CMake\nDESCRIPTION: Complete CMake configuration for building the Theora library. It finds the required OGG dependency, organizes source files into common, encoding, and decoding components, and sets up appropriate compilation targets and installation rules.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_theora.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(theora LANGUAGES C)\n\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}\")\nFIND_PACKAGE(OGG REQUIRED)\n\nfile(GLOB HEADERS\n  \"include/theora/codec.h\"\n  \"include/theora/theora.h\"\n  \"include/theora/theoradec.h\"\n  \"include/theora/theoraenc.h\"\n)\n\ninclude_directories(\"include\")\ninclude_directories(${OGG_INCLUDE_DIR})\n\nset(LIBTHEORA_COMMON\n  \"lib/apiwrapper.c\"\n  \"lib/bitpack.c\"\n  \"lib/dequant.c\"\n  \"lib/fragment.c\"\n  \"lib/idct.c\"\n  \"lib/info.c\"\n  \"lib/internal.c\"\n  \"lib/state.c\"\n  \"lib/quant.c\"\n\n  \"lib/x86_vc/mmxfrag.c\"\n  \"lib/x86_vc/mmxidct.c\"\n  \"lib/x86_vc/mmxstate.c\"\n  \"lib/x86_vc/x86state.c\"\n)\n\nset(LIBTHEORA_ENC\n  \"lib/analyze.c\"\n  \"lib/encapiwrapper.c\"\n  \"lib/encfrag.c\"\n  \"lib/encinfo.c\"\n  \"lib/encode.c\"\n  \"lib/enquant.c\"\n  \"lib/fdct.c\"\n  \"lib/huffenc.c\"\n  \"lib/mathops.c\"\n  \"lib/mcenc.c\"\n  \"lib/rate.c\"\n  \"lib/tokenize.c\"\n\n  \"lib/x86_vc/mmxencfrag.c\"\n  \"lib/x86_vc/mmxfdct.c\"\n  \"lib/x86_vc/x86enc.c\"\n)\n\nset(LIBTHEORA_DEC\n  \"lib/decapiwrapper.c\"\n  \"lib/decinfo.c\"\n  \"lib/decode.c\"\n  \"lib/huffdec.c\"\n)\n\nadd_definitions(-D_CRT_SECURE_NO_DEPRECATE)\nadd_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n\nadd_library(theora-common OBJECT ${LIBTHEORA_COMMON} ${HEADERS})\nadd_library(theora-enc OBJECT ${LIBTHEORA_ENC} ${HEADERS})\nadd_library(theora-dec OBJECT ${LIBTHEORA_DEC} ${HEADERS})\n\nadd_library(theora $<TARGET_OBJECTS:theora-common> $<TARGET_OBJECTS:theora-enc> $<TARGET_OBJECTS:theora-dec> \"libtheora.def\")\ntarget_link_libraries(theora ${OGG_LIBRARY})\n\nadd_library(theoraenc $<TARGET_OBJECTS:theora-common> $<TARGET_OBJECTS:theora-enc> \"win32/xmingw32/libtheoraenc-all.def\")\ntarget_link_libraries(theoraenc ${OGG_LIBRARY})\n\nadd_library(theoradec $<TARGET_OBJECTS:theora-common> $<TARGET_OBJECTS:theora-dec> \"win32/xmingw32/libtheoradec-all.def\")\ntarget_link_libraries(theoradec ${OGG_LIBRARY})\n\n# pkgconfig vars\nset(prefix ${LIBDIR}/theora)\nset(exec_prefix ${LIBDIR}/theora/bin)\nset(libdir ${LIBDIR}/theora/lib)\nset(includedir ${LIBDIR}/theora/include)\n\nconfigure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/theora.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/theora.pc\n    @ONLY\n)\n\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/theora.pc\n    DESTINATION lib/pkgconfig\n)\n\ninstall(FILES ${HEADERS} DESTINATION include/theora)\n\ninstall(TARGETS theora theoraenc theoradec\n  RUNTIME DESTINATION bin\n  LIBRARY DESTINATION bin\n  ARCHIVE DESTINATION lib\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycles Support for Adaptive Subdivision in Blender Modifiers\nDESCRIPTION: Adds support for Cycles-related features in modifiers, specifically for adaptive subdivision in the subsurf UI.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# To disable adaptive subdivision test in subsurf UI without cycles\nif(WITH_CYCLES)\n  add_definitions(-DWITH_CYCLES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Texture Nodes\nDESCRIPTION: Defines include paths for the texture node system compilation, including local and binary directory paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/texture/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Mesh Editor in CMake\nDESCRIPTION: Defines the include directories for the Blender mesh editor module, including local and generated directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mesh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../uvedit\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Texture Nodes\nDESCRIPTION: Specifies required library dependencies for the texture node system, including core Blender libraries and utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/texture/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Applying GPL License Notice to Source Files\nDESCRIPTION: This snippet demonstrates how to add a GPL license notice to the start of each source file in a program. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/GPL-3.0-or-later.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Adding fmtlib Library in CMake\nDESCRIPTION: This snippet creates the `extern_fmtlib` library using the defined source files and include directories. It uses a Blender-specific function `blender_add_lib` which wraps standard CMake functions.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_fmtlib \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Blender's Undo System\nDESCRIPTION: Lists all the source files required for the undo system implementation, including both C++ source files and header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/undo/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ed_undo.cc\n  memfile_undo.cc\n  undo_system_types.cc\n\n  undo_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Cycles Integrator Library in CMake\nDESCRIPTION: Sets up include directories and creates the Cycles integrator library using the defined source files, headers, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/integrator/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_integrator \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Configuring DataToc Executable Build in CMake\nDESCRIPTION: Defines source files and creates an executable target for the 'datatoc' utility. Uses a source file variable and CMake's add_executable command to generate the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/datatoc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  datatoc.cc\n)\n\n# `SRC_DNA_INC` is defined in the parent directory.\nadd_executable(datatoc ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Source Files for OpenSubdiv in CMake\nDESCRIPTION: Defines include directories and source files for the OpenSubdiv integration. It sets up both internal and system include paths, and lists the main source files for the project.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../../source/blender/gpu/intern\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  opensubdiv_capi.hh\n  opensubdiv_capi_type.hh\n  opensubdiv_converter_capi.hh\n  opensubdiv_evaluator_capi.hh\n  opensubdiv_evaluator.hh\n  opensubdiv_topology_refiner.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Release Sanity Checks in CMake\nDESCRIPTION: Sets up sanity checks for Linux official releases, including additional configuration for ASAN (Address Sanitizer) builds when enabled.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LINUX_OFFICIAL_RELEASE_TESTS)\n  get_filename_component(release_root_folder ${TEST_BLENDER_EXE} DIRECTORY)\n  set(extra_args \"\")\n  if(WITH_COMPILER_ASAN)\n    set(extra_args\n      ${extra_args}\n      --sanitizer-build\n    )\n  endif()\n  add_python_test(\n    linux_release_sanity_checks\n    ${CMAKE_SOURCE_DIR}/tools/check_blender_release/check_release.py\n    -- --directory \"${release_root_folder}\" ${extra_args}\n  )\n  unset(extra_args)\n  unset(release_root_folder)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding OpenCOLLADA Animation Clip Header in CMake\nDESCRIPTION: Searches for the OpenCOLLADA animation clip header file and adds a definition if found. The function then clears the found file from the cache to avoid polluting it.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/collada/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nremove_strict_flags()\nfind_file(OPENCOLLADA_ANIMATION_CLIP\n  NAMES\n    COLLADAFWAnimationClip.h\n  PATHS\n    ${OPENCOLLADA_INCLUDE_DIRS}\n  NO_DEFAULT_PATH\n)\n\nif(OPENCOLLADA_ANIMATION_CLIP)\n  add_definitions(-DWITH_OPENCOLLADA_ANIMATION_CLIP)\nendif()\n\n# In CMAKE version 3.21 and up, we can instead use the NO_CACHE option for\n# find_file so we don't need to clear it from the cache here.\nunset(OPENCOLLADA_ANIMATION_CLIP CACHE)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Alembic I/O Library\nDESCRIPTION: Lists all C++ source and header files required for the Alembic I/O library, including readers, writers, exporters, and utility components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/alembic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/abc_axis_conversion.cc\n  intern/abc_customdata.cc\n  intern/abc_reader_archive.cc\n  intern/abc_reader_camera.cc\n  intern/abc_reader_curves.cc\n  intern/abc_reader_mesh.cc\n  intern/abc_reader_nurbs.cc\n  intern/abc_reader_object.cc\n  intern/abc_reader_points.cc\n  intern/abc_reader_transform.cc\n  intern/abc_util.cc\n  intern/alembic_capi.cc\n\n  exporter/abc_archive.cc\n  exporter/abc_custom_props.cc\n  exporter/abc_export_capi.cc\n  exporter/abc_hierarchy_iterator.cc\n  exporter/abc_writer_abstract.cc\n  exporter/abc_writer_camera.cc\n  exporter/abc_writer_curves.cc\n  exporter/abc_writer_hair.cc\n  exporter/abc_writer_instance.cc\n  exporter/abc_writer_mball.cc\n  exporter/abc_writer_mesh.cc\n  exporter/abc_writer_nurbs.cc\n  exporter/abc_writer_points.cc\n  exporter/abc_writer_transform.cc\n\n  ABC_alembic.h\n  intern/abc_axis_conversion.h\n  intern/abc_customdata.h\n  intern/abc_reader_archive.h\n  intern/abc_reader_camera.h\n  intern/abc_reader_curves.h\n  intern/abc_reader_mesh.h\n  intern/abc_reader_nurbs.h\n  intern/abc_reader_object.h\n  intern/abc_reader_points.h\n  intern/abc_reader_transform.h\n  intern/abc_util.h\n\n  exporter/abc_archive.h\n  exporter/abc_custom_props.h\n  exporter/abc_hierarchy_iterator.h\n  exporter/abc_writer_abstract.h\n  exporter/abc_writer_camera.h\n  exporter/abc_writer_curves.h\n  exporter/abc_writer_hair.h\n  exporter/abc_writer_instance.h\n  exporter/abc_writer_mball.h\n  exporter/abc_writer_mesh.h\n  exporter/abc_writer_nurbs.h\n  exporter/abc_writer_points.h\n  exporter/abc_writer_transform.h\n)\n```\n\n----------------------------------------\n\nTITLE: Post-Build Installation Helper Message\nDESCRIPTION: Adds a post-build command to display helpful installation instructions based on the CMake generator being used.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(_install_cmd \"\")\nif(\"${CMAKE_GENERATOR}\" MATCHES \".*Makefiles.*\")\n  set(_install_cmd \"make install\")\nelseif(\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\")\n  set(_install_cmd \"ninja install\")\nendif()\nif(NOT (\"${_install_cmd}\" STREQUAL \"\"))\n  get_filename_component(_install_dst ${TARGETDIR_VER} ABSOLUTE BASE_DIR ${CMAKE_INSTALL_PREFIX})\n  add_custom_command(\n    TARGET blender POST_BUILD\n    COMMAND\n      ${CMAKE_COMMAND} -E echo\n      \"Run: \\\"${_install_cmd}\\\" to copy runtime files and scripts to: ${_install_dst}\"\n  )\n  unset(_install_dst)\nendif()\nunset(_install_cmd)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included in project files to apply the Apache License 2.0. The template includes placeholders for copyright year and owner name that should be replaced with project-specific information.\nSOURCE: https://github.com/blender/blender/blob/main/doc/license/Apache2-license.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GLSL Shaders in CMake\nDESCRIPTION: Defines the include directories for GLSL shaders used in Blender's GPU rendering system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n  ../intern\n\n  common\n  infos\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shader Include Paths in CMake\nDESCRIPTION: Defines the include directories needed for shader compilation, including paths to core Blender components and shader-specific directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n\n  ../../gpencil\n  ../../gpencil/shaders/infos\n\n  ../../select\n  ../../select/shaders\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Movie Module\nDESCRIPTION: Specifies the libraries that the movie module depends on. Includes Blender's internal libraries like blenkernel, blenlib, and imbuf with appropriate visibility modifiers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PUBLIC  bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Texture Nodes\nDESCRIPTION: Lists all source files needed for the texture node system, including node type implementations and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/texture/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_texture_at.cc\n  nodes/node_texture_bricks.cc\n  nodes/node_texture_checker.cc\n  nodes/node_texture_combine_color.cc\n  nodes/node_texture_common.cc\n  nodes/node_texture_compose.cc\n  nodes/node_texture_coord.cc\n  nodes/node_texture_curves.cc\n  nodes/node_texture_decompose.cc\n  nodes/node_texture_distance.cc\n  nodes/node_texture_hueSatVal.cc\n  nodes/node_texture_image.cc\n  nodes/node_texture_invert.cc\n  nodes/node_texture_math.cc\n  nodes/node_texture_mixRgb.cc\n  nodes/node_texture_output.cc\n  nodes/node_texture_proc.cc\n  nodes/node_texture_rotate.cc\n  nodes/node_texture_scale.cc\n  nodes/node_texture_separate_color.cc\n  nodes/node_texture_texture.cc\n  nodes/node_texture_translate.cc\n  nodes/node_texture_valToNor.cc\n  nodes/node_texture_valToRgb.cc\n  nodes/node_texture_viewer.cc\n\n  node_texture_register.cc\n  node_texture_tree.cc\n  node_texture_util.cc\n\n  node_texture_register.hh\n  node_texture_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender\nDESCRIPTION: Defines public include directories for the Blender build, including internal modules and external dependencies like Eigen, Ghost, and OpenSubdiv.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../ikplugin\n  ../makesrna\n  ../modifiers\n  ../nodes/geometry/include\n  ../shader_fx\n  ../simulation\n  ../windowmanager\n  ../../../intern/eigen\n  ../../../intern/ghost\n  ../../../intern/iksolver/extern\n  ../../../intern/libmv\n  ../../../intern/mantaflow/extern\n  ../../../intern/memutil\n  ../../../intern/mikktspace\n  ../../../intern/opensubdiv\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Animation Library Target in CMake\nDESCRIPTION: Creates the 'bf_animrig' library target and sets up an alias for it.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/animrig/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_animrig \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::animrig ALIAS bf_animrig)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Font Library and Test Suite\nDESCRIPTION: Creates the font library target and configures optional test suite compilation with Google Test integration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenfont/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blenfont \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blenfont ALIAS bf_blenfont)\n\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/BLF_tests.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf::blenfont\n  )\n  blender_add_test_suite_lib(blenfont \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the fmtlib library. The `PUBLIC` keyword means that the include directory is also visible to other libraries that link against this library. `include` is the path to include.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths for Cycles Hydra\nDESCRIPTION: Determines the installation path for the Cycles Hydra plugin based on whether it's being built as part of Blender or as a standalone component.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n  if(WITH_CYCLES_BLENDER)\n    # Install inside add-on\n    set(CYCLES_HYDRA_INSTALL_PATH ${CYCLES_INSTALL_PATH}/hydra)\n  else()\n    # Install next to cycles executable\n    set(CYCLES_HYDRA_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/hydra)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition for Specific File Formats in CMake\nDESCRIPTION: This snippet contains multiple conditional statements to add subdirectories for specific file format support based on build options. It includes checks for OBJ, PLY, STL, Grease Pencil, FBX, Alembic, Collada, USD, and CSV formats.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ)\n  add_subdirectory(wavefront_obj)\nendif()\n\nif(WITH_IO_PLY)\n  add_subdirectory(ply)\nendif()\n\nif(WITH_IO_STL)\n  add_subdirectory(stl)\nendif()\n\nif(WITH_IO_GREASE_PENCIL)\n  add_subdirectory(grease_pencil)\nendif()\n\nif(WITH_IO_FBX)\n  add_subdirectory(fbx)\nendif()\n\nif(WITH_ALEMBIC)\n  add_subdirectory(alembic)\nendif()\n\nif(WITH_OPENCOLLADA)\n  add_subdirectory(collada)\nendif()\n\nif(WITH_USD)\n  add_subdirectory(usd)\nendif()\n\nif(WITH_IO_CSV)\n  add_subdirectory(csv)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths for Script Editor\nDESCRIPTION: Sets up include directories for the script editor component build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_script/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for QuadriFlow\nDESCRIPTION: Specifies the source files needed for the QuadriFlow C API implementation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/quadriflow/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  quadriflow_capi.cpp\n  quadriflow_capi.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Hydra Support Source Files Conditionally\nDESCRIPTION: Conditionally adds Hydra-related source files when WITH_HYDRA is enabled. Hydra is USD's rendering framework that provides abstraction for rendering delegates.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HYDRA)\n  list(APPEND SRC\n    hydra/curves.cc\n    hydra/hydra_scene_delegate.cc\n    hydra/id.cc\n    hydra/image.cc\n    hydra/instancer.cc\n    hydra/light.cc\n    hydra/material.cc\n    hydra/mesh.cc\n    hydra/object.cc\n    hydra/usd_scene_delegate.cc\n    hydra/volume.cc\n    hydra/volume_modifier.cc\n    hydra/world.cc\n\n    hydra/curves.hh\n    hydra/hydra_scene_delegate.hh\n    hydra/id.hh\n    hydra/image.hh\n    hydra/instancer.hh\n    hydra/light.hh\n    hydra/material.hh\n    hydra/mesh.hh\n    hydra/object.hh\n    hydra/usd_scene_delegate.hh\n    hydra/volume.hh\n    hydra/volume_modifier.hh\n    hydra/world.hh\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Target Configuration\nDESCRIPTION: Final build target setup including unity build configuration and RNA dependency declaration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/shader/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_nodes_shader \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nblender_set_target_unity_build(bf_nodes_shader 10)\n\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes_shader bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependencies for NLA Editor in CMake\nDESCRIPTION: Specifies that the NLA editor library depends on the RNA build step, ensuring proper build order.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_nla/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_nla bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake for Blender\nDESCRIPTION: Sets up include directories for the Blender project, including the current binary directory and a relative include path.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC ${CMAKE_CURRENT_BINARY_DIR}\n  ../include\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories for SLIM Library\nDESCRIPTION: Creates an empty list for system include directories that might be needed for the SLIM library.\nSOURCE: https://github.com/blender/blender/blob/main/intern/slim/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Draco Library to Blender Project in C++\nDESCRIPTION: This snippet demonstrates how to add the Draco compression library to the Blender project using CMake. It specifies the source files, include directories, and any additional libraries required for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/draco/draco/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n\nblender_add_lib(draco \"${SRC}\" \"${INC}\" \"\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding OpenEXR Support\nDESCRIPTION: Adds OpenEXR include directories and libraries to the build configuration if WITH_IMAGE_OPENEXR is defined, enabling OpenEXR image format support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND INC_SYS\n    ${OPENEXR_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENEXR_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Mantaflow Integration\nDESCRIPTION: Configures include directories for the Mantaflow module, focusing on internal and external directories needed for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  extern\n  intern/strings\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Cycles Integrator in CMake\nDESCRIPTION: Defines the library dependencies for the Cycles integrator. It includes core Cycles libraries and conditionally adds OpenImageDenoise and OpenPGL libraries based on build options.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/integrator/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  cycles_device\n\n  # NOTE: Is required for RenderBuffers access. Might consider moving files around a bit to\n  # avoid such cyclic dependency.\n  cycles_session\n\n  cycles_util\n)\n\nif(WITH_OPENIMAGEDENOISE)\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n  )\nendif()\n\nif(WITH_CYCLES_PATH_GUIDING)\n  list(APPEND LIB\n    ${OPENPGL_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Math Optimization Configuration\nDESCRIPTION: Sets up compiler-specific math optimization flags for improved performance. Includes fast-math options and floating-point behavior configuration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  string(APPEND CMAKE_CXX_FLAGS \" /fp:fast -D_CRT_SECURE_NO_WARNINGS /GS-\")\n  string(APPEND CMAKE_CXX_FLAGS_RELEASE \" /Ox\")\n  string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" /Ox\")\n  string(APPEND CMAKE_CXX_FLAGS_MINSIZEREL \" /Ox\")\nelseif(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  list(APPEND CYCLES_MATH_FLAGS \"-fno-trapping-math\")\n  list(APPEND CYCLES_MATH_FLAGS \"-fno-math-errno\")\n  list(APPEND CYCLES_MATH_FLAGS \"-fno-signed-zeros\")\n  list(APPEND CYCLES_MATH_FLAGS \"-ffp-contract=fast\")\n  list(APPEND CYCLES_MATH_FLAGS \"-freciprocal-math\")\n  list(JOIN CYCLES_MATH_FLAGS \" \" CYCLES_MATH_FLAGS)\n  string(APPEND CMAKE_CXX_FLAGS \" ${CYCLES_MATH_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Adding OpenXR Support in View3D Editor CMake Configuration\nDESCRIPTION: Conditionally adds OpenXR support to the View3D editor by defining a preprocessor flag when OpenXR is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External UFBX Library to Blender Project\nDESCRIPTION: This snippet creates an external ufbx library within the Blender project using the specified source and include directories, encapsulated properly for CMake.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ufbx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_ufbx \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Updating GFlags Include Path in C++\nDESCRIPTION: Shows the migration from old to new include path for GFlags header files. The new path uses /usr/include/gflags instead of /usr/include/google while maintaining backwards compatibility.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gflags/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gflags/gflags.h>\n```\n\nLANGUAGE: cpp\nCODE:\n```\n#include <google/gflags.h>\n```\n\n----------------------------------------\n\nTITLE: Building Cycles Device Library in CMake\nDESCRIPTION: Configures the build process for the Cycles device library. It sets up include directories, adds the library target, and configures source groups for organization in IDEs.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/device/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_device \"${LIB}\" ${SRC})\n\nif(WITH_CYCLES_DEVICE_ONEAPI)\n  # Need to have proper rebuilding in case of changes\n  # in cycles_kernel_oneapi due external project behavior.\n  add_dependencies(cycles_device cycles_kernel_oneapi)\nendif()\n\nsource_group(\"cpu\" FILES ${SRC_CPU})\nsource_group(\"cuda\" FILES ${SRC_CUDA})\nsource_group(\"dummy\" FILES ${SRC_DUMMY})\nsource_group(\"hip\" FILES ${SRC_HIP})\nsource_group(\"hiprt\" FILES ${SRC_HIPRT})\nsource_group(\"multi\" FILES ${SRC_MULTI})\nsource_group(\"metal\" FILES ${SRC_METAL})\nsource_group(\"optix\" FILES ${SRC_OPTIX})\nsource_group(\"oneapi\" FILES ${SRC_ONEAPI})\nsource_group(\"common\" FILES ${SRC_BASE} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Creating Wavefront OBJ Library Target in CMake\nDESCRIPTION: Adds the Wavefront OBJ library target with all the configured sources, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/wavefront_obj/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_wavefront_obj \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring FFMPEG Plugin in CMake\nDESCRIPTION: Sets up compilation and linking for the FFMPEG plugin if enabled. Includes necessary directories, defines symbols, and configures installation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FFMPEG AND PLUGIN_FFMPEG)\n\tadd_definitions(-DFFMPEG_PLUGIN)\n\tinclude_directories(${INCLUDE} ${FFMPEG_INCLUDE_DIRS})\n\tadd_library(audffmpeg SHARED ${FFMPEG_SRC} ${FFMPEG_HDR} ${HDR})\n\ttarget_link_libraries(audffmpeg audaspace ${FFMPEG_LIBRARIES})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audffmpeg PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\tinstall(TARGETS audffmpeg DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional HIPRT Integration\nDESCRIPTION: This snippet conditionally integrates HIPRT into the HIPEW library. If HIPRT_INCLUDE_DIR is defined, it appends HIPRT include directory and source files to the relevant variables.\nSOURCE: https://github.com/blender/blender/blob/main/extern/hipew/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIPRT_INCLUDE_DIR)\n  list(APPEND INC_SYS\n    ${HIPRT_INCLUDE_DIR}\n  )\n\n  list(APPEND SRC\n    src/hiprtew.cc\n\n    include/hiprtew.h\n    src/util.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Build Info in CMake\nDESCRIPTION: Adds a preprocessor definition for WITH_BUILDINFO if the WITH_BUILDINFO option is enabled in the CMake configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/collada/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Asset System Library Dependencies\nDESCRIPTION: Defines private library dependencies required for building the asset system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/asset_system/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: OpenVDB Integration Configuration\nDESCRIPTION: Configures include paths and definitions for OpenVDB integration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Transform Module\nDESCRIPTION: Defines the library dependencies for the transform module, including various Blender components like animation, kernel, mesh handling, and window management.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/transform/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenfont\n  PRIVATE bf::blentranslation\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_mask\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Asset System Source Files\nDESCRIPTION: Defines the list of source files (.cc) and header files (.hh) that comprise the asset system library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/asset_system/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/asset_catalog.cc\n  intern/asset_catalog_collection.cc\n  intern/asset_catalog_definition_file.cc\n  intern/asset_catalog_path.cc\n  intern/asset_catalog_tree.cc\n  intern/asset_library.cc\n  intern/asset_library_service.cc\n  intern/asset_representation.cc\n  intern/library_types/all_library.cc\n  intern/library_types/essentials_library.cc\n  intern/library_types/on_disk_library.cc\n  intern/library_types/preferences_on_disk_library.cc\n  intern/library_types/runtime_library.cc\n  intern/utils.cc\n\n  AS_asset_catalog.hh\n  AS_asset_catalog_path.hh\n  AS_asset_catalog_tree.hh\n  AS_asset_library.hh\n  AS_asset_representation.hh\n  AS_essentials_library.hh\n  intern/asset_catalog_collection.hh\n  intern/asset_catalog_definition_file.hh\n  intern/asset_library_service.hh\n  intern/library_types/all_library.hh\n  intern/library_types/essentials_library.hh\n  intern/library_types/on_disk_library.hh\n  intern/library_types/preferences_on_disk_library.hh\n  intern/library_types/runtime_library.hh\n  intern/utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting LEMON Default Solvers with Cache\nDESCRIPTION: This snippet sets the LEMON_DEFAULT_LP and LEMON_DEFAULT_MIP cache variables based on the found solvers and the DEFAULT_* variables. It also handles the cases when the user specified a solver that is not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LEMON_DEFAULT_LP OR\n    (NOT ILOG_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"CPLEX\")) OR\n    (NOT COIN_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"CLP\")) OR\n    (NOT GLPK_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"GLPK\")) OR\n    (NOT SOPLEX_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"SOPLEX\")))\n  SET(LEMON_DEFAULT_LP ${DEFAULT_LP} CACHE STRING\n    \"Default LP solver backend (GLPK, CPLEX, CLP or SOPLEX)\" FORCE)\nELSE()\n  SET(LEMON_DEFAULT_LP ${DEFAULT_LP} CACHE STRING\n    \"Default LP solver backend (GLPK, CPLEX, CLP or SOPLEX)\")\nENDIF()\nIF(NOT LEMON_DEFAULT_MIP OR\n    (NOT ILOG_FOUND AND (LEMON_DEFAULT_MIP STREQUAL \"CPLEX\")) OR\n    (NOT COIN_FOUND AND (LEMON_DEFAULT_MIP STREQUAL \"CBC\")) OR\n    (NOT GLPK_FOUND AND (LEMON_DEFAULT_MIP STREQUAL \"GLPK\")))\n  SET(LEMON_DEFAULT_MIP ${DEFAULT_MIP} CACHE STRING\n    \"Default MIP solver backend (GLPK, CPLEX or CBC)\" FORCE)\nELSE()\n  SET(LEMON_DEFAULT_MIP ${DEFAULT_MIP} CACHE STRING\n    \"Default MIP solver backend (GLPK, CPLEX or CBC)\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for FBX Importer\nDESCRIPTION: Lists all source and header files that make up the FBX importer module. Includes the main IO file and specialized importers for different aspects like animation, armature, materials, and meshes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/fbx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  IO_fbx.cc\n  importer/fbx_import.cc\n  importer/fbx_import_anim.cc\n  importer/fbx_import_armature.cc\n  importer/fbx_import_material.cc\n  importer/fbx_import_mesh.cc\n  importer/fbx_import_util.cc\n\n  IO_fbx.hh\n  importer/fbx_import.hh\n  importer/fbx_import_anim.hh\n  importer/fbx_import_armature.hh\n  importer/fbx_import_material.hh\n  importer/fbx_import_mesh.hh\n  importer/fbx_import_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for User Preferences Editor in CMake\nDESCRIPTION: Defines a build dependency on the RNA generation module, ensuring that RNA_prototypes.hh is created before compiling the user preferences editor. This is necessary because the editor code depends on generated RNA prototypes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_userpref/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_space_userpref bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (CUEW)\nDESCRIPTION: This snippet sets the library dependencies for CUEW, which are empty in this case since CUEW is intended as a standalone wrapper.\nSOURCE: https://github.com/blender/blender/blob/main/extern/cuew/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Include Directories for OpenImageIO\nDESCRIPTION: Defines the system include directories required for OpenImageIO integration, using the previously discovered OpenImageIO include directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${OPENIMAGEIO_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Quadriflow Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the `extern_quadriflow` library. It specifies the source files, include directories, system include directories, and library dependencies for the library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"blender_add_lib(extern_quadriflow \\\"${SRC}\\\" \\\"${INC}\\\" \\\"${INC_SYS}\\\" \\\"${LIB}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for OpenEXR Integration\nDESCRIPTION: Defines the include directories needed for building the OpenEXR integration module. Includes local directories as well as the UTF conversion utility.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/openexr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n  ../../../../../intern/utfconv\n)\n```\n\n----------------------------------------\n\nTITLE: FFTW3 Configuration\nDESCRIPTION: Configures FFTW3 library support with include directories and library linkage.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFTW3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring IK Plugin Build Settings in CMake for Blender\nDESCRIPTION: Sets up the build configuration for Blender's IK plugin, including source files, include directories, and library dependencies. It also handles conditional compilation for IK_SOLVER and IK_ITASC modules.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/ikplugin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nremove_extra_strict_flags()\n\nset(INC\n  .\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  intern/ikplugin_api.cc\n\n  BIK_api.h\n  intern/ikplugin_api.h\n)\n\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n\nif(WITH_IK_SOLVER)\n  list(APPEND LIB\n    bf_intern_iksolver\n  )\n  list(APPEND INC\n    ../../../intern/iksolver/extern\n  )\n  list(APPEND SRC\n    intern/iksolver_plugin.cc\n    intern/iksolver_plugin.h\n  )\n  add_definitions(-DWITH_IK_SOLVER)\nendif()\n\nif(WITH_IK_ITASC)\n  list(APPEND LIB\n    bf_intern_itasc\n  )\n  list(APPEND INC\n    ../../../intern/itasc\n  )\n  list(APPEND INC_SYS\n  )\n  list(APPEND SRC\n    intern/itasc_plugin.cc\n    intern/itasc_plugin.h\n  )\n  add_definitions(-DWITH_IK_ITASC)\nendif()\n\nblender_add_lib(bf_ikplugin \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Library Shader Sources in CMake\nDESCRIPTION: Lists the GLSL library shader source files for the Workbench rendering engine, including various utility and effect libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_LIB\n  workbench_effect_dof_lib.glsl\n  workbench_cavity_lib.glsl\n  workbench_common_lib.glsl\n  workbench_curvature_lib.glsl\n  workbench_image_lib.glsl\n  workbench_matcap_lib.glsl\n  workbench_material_lib.glsl\n  workbench_shadow_lib.glsl\n  workbench_world_light_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for USD Integration\nDESCRIPTION: Lists the internal Blender libraries that the USD module depends on, using the bf namespace for Blender Foundation libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::animrig\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Editor Space Info in CMake\nDESCRIPTION: Defines the include directories for the Blender editor space info module, including local and generated directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycles Unit Tests in CMake\nDESCRIPTION: This CMake script configures the compilation of Cycles unit tests. It sets up include directories, libraries, and source files for the test suite. It also handles conditional compilation for AVX2 tests and platform-specific adjustments.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS AND WITH_CYCLES_LOGGING)\n  # Otherwise we get warnings here that we can't fix in external projects\n  remove_strict_flags()\nendif()\n\nset(INC\n  ..\n)\n\nset(LIB\n  cycles_kernel\n  cycles_integrator\n  cycles_scene\n  cycles_session\n  cycles_bvh\n  cycles_graph\n  cycles_subd\n  cycles_device\n  cycles_util\n)\ncycles_external_libraries_append(LIB)\n\ninclude_directories(${INC})\n\nset(SRC\n  integrator_adaptive_sampling_test.cpp\n  integrator_render_scheduler_test.cpp\n  integrator_tile_test.cpp\n  kernel_camera_projection_test.cpp\n  render_graph_finalize_test.cpp\n  util_aligned_malloc_test.cpp\n  util_boundbox_test.cpp\n  util_ies_test.cpp\n  util_math_test.cpp\n  util_math_fast_test.cpp\n  util_math_float3_test.cpp\n  util_math_float4_test.cpp\n  util_md5_test.cpp\n  util_path_test.cpp\n  util_string_test.cpp\n  util_task_test.cpp\n  util_time_test.cpp\n  util_transform_test.cpp\n)\n\n# Disable AVX tests on macOS. Rosetta has problems running them, and other\n# platforms should be enough to verify AVX operations are implemented correctly.\nif(NOT APPLE)\n  if(CXX_HAS_AVX2)\n    list(APPEND SRC\n      util_float8_avx2_test.cpp\n    )\n    set_source_files_properties(util_float8_avx2_test.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_AVX2_FLAGS}\")\n  endif()\nendif()\n\nif(WITH_GTESTS AND WITH_CYCLES_LOGGING)\n  set(INC_SYS )\n  blender_add_test_suite_executable(cycles \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Physics Support for Blender Modifiers\nDESCRIPTION: Adds Bullet physics library support to the modifiers module if Blender is built with Bullet.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND LIB\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Python Mathutils\nDESCRIPTION: Lists all source and header files that are part of the Blender Python Mathutils library. This includes various mathematical utility classes and functions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/mathutils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  mathutils.cc\n  mathutils_Color.cc\n  mathutils_Euler.cc\n  mathutils_Matrix.cc\n  mathutils_Quaternion.cc\n  mathutils_Vector.cc\n  mathutils_bvhtree.cc\n  mathutils_geometry.cc\n  mathutils_interpolate.cc\n  mathutils_kdtree.cc\n  mathutils_noise.cc\n\n  mathutils.hh\n  mathutils_Color.hh\n  mathutils_Euler.hh\n  mathutils_Matrix.hh\n  mathutils_Quaternion.hh\n  mathutils_Vector.hh\n  mathutils_bvhtree.hh\n  mathutils_geometry.hh\n  mathutils_interpolate.hh\n  mathutils_kdtree.hh\n  mathutils_noise.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting LEMON Use Thread Flags\nDESCRIPTION: This snippet sets LEMON specific variables to indicate if pthreads or Win32 threads should be used. This is based on the value of the LEMON_THREADING variable.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_THREADING STREQUAL \"Pthread\")\n  SET(LEMON_USE_PTHREAD TRUE)\nELSEIF(LEMON_THREADING STREQUAL \"Win32\")\n  SET(LEMON_USE_WIN32_THREADS TRUE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CUEW)\nDESCRIPTION: This snippet defines the source files required to build the CUEW library. It specifies 'src/cuew.c' as the C source file and 'include/cuew.h' as the header file.\nSOURCE: https://github.com/blender/blender/blob/main/extern/cuew/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/cuew.c\n\n  include/cuew.h\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Font File to C Data\nDESCRIPTION: Uses the data_to_c_simple function to convert the bfont.pfb font file into C source code that can be compiled into Blender. This embeds the font data directly into the application.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ndata_to_c_simple(../../../../release/datafiles/bfont.pfb SRC)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for BVH Module in CMake\nDESCRIPTION: Lists the C++ source files that compose the BVH module. It includes files for various BVH-related functionalities.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  bvh.cpp\n  bvh2.cpp\n  binning.cpp\n  build.cpp\n  embree.cpp\n  hiprt.cpp\n  multi.cpp\n  node.cpp\n  optix.cpp\n  sort.cpp\n  split.cpp\n  unaligned.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycles Graph Library Build in CMake\nDESCRIPTION: Defines include directories, source files, header files and library dependencies for building the Cycles graph component. Sets up the build configuration using CMake macros and variables to compile the graph-related functionality.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/graph/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  node.cpp\n  node_type.cpp\n  node_xml.cpp\n)\n\nset(SRC_HEADERS\n  node.h\n  node_enum.h\n  node_type.h\n  node_xml.h\n)\n\nset(LIB\n  cycles_util\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n\ncycles_add_library(cycles_graph \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Components for Blender on Windows in CMake\nDESCRIPTION: This snippet handles the installation of Python components for Blender on Windows. It includes Python DLLs, libraries, and excludes debug libraries and cache files.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  string(REPLACE \".\" \"\" _PYTHON_VERSION_NO_DOTS ${PYTHON_VERSION})\n\n  if(NOT WITH_PYTHON_MODULE)\n    if(NOT CMAKE_COMPILER_IS_GNUCC)\n      install(\n        FILES\n          ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}.dll\n          ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3.dll\n        DESTINATION ${TARGETDIR_EXE}\n        CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n      )\n\n      install(\n        FILES\n          ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}_d.dll\n          ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3_d.dll\n        DESTINATION ${TARGETDIR_EXE}\n        CONFIGURATIONS Debug\n      )\n    endif()\n  endif()\n\n  # ... [truncated for brevity] ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Aliasing Library Target\nDESCRIPTION: This snippet creates the xxhash library using the blender_add_lib macro, including the source files, include directories, and linked libraries. It also creates an alias for the library, 'bf::extern::xxhash'.\nSOURCE: https://github.com/blender/blender/blob/main/extern/xxhash/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_xxhash \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::extern::xxhash ALIAS extern_xxhash)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Python Module\nDESCRIPTION: Lists all source and header files that are part of the Blender Python module, including core functionality and various application-specific components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/intern/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  bpy.cc\n  bpy_app.cc\n  bpy_app_alembic.cc\n  # ... (truncated for brevity)\n  bpy_utils_units.hh\n  ../BPY_extern.hh\n  ../BPY_extern_clog.hh\n  ../BPY_extern_python.hh\n  ../BPY_extern_run.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite\nDESCRIPTION: Sets up the test suite configuration with extensive unit tests for various Blender library components when testing is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/BLI_any_test.cc\n    tests/BLI_array_state_test.cc\n    # ... [truncated for brevity]\n  )\n  set(TEST_INC\n    ../imbuf\n  )\n  set(TEST_LIB\n    bf_blenlib\n  )\n  blender_add_test_suite_executable(BLI \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\n\n  add_subdirectory(tests/performance)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Display Driver Support\nDESCRIPTION: Conditionally adds support for the Hydra display driver if the required HgiGL component is available in the USD installation. It adds the display driver source files and header to the build.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Blender libraries do not include hgiGL, so build without display driver then.\nif(EXISTS ${USD_INCLUDE_DIR}/pxr/imaging/hgiGL)\n  add_definitions(-DWITH_HYDRA_DISPLAY_DRIVER)\n  list(APPEND SRC_HD_CYCLES display_driver.cpp)\n  list(APPEND SRC_HD_CYCLES_HEADERS display_driver.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing LEMON Headers\nDESCRIPTION: This command installs the LEMON header files from the specified directories (root, bits, concepts) to the `include/lemon` directory, as part of the 'headers' component, matching the pattern \"*.h\".\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n\"INSTALL(\n  DIRECTORY . bits concepts\n  DESTINATION include/lemon\n  COMPONENT headers\n  FILES_MATCHING PATTERN \\\"*.h\\\"\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Floating-Point Warning Flags in CMake\nDESCRIPTION: Adds compiler warning flags to prevent unintended use of double-precision floating-point operations in the kernel, specifically targeting GCC and Clang compilers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\n# Warnings to avoid using doubles in the kernel.\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_check_cxx_compiler_flags(\n    CMAKE_CXX_FLAGS\n    _has_cxxflag_float_conversion \"-Werror=float-conversion\"\n    _has_cxxflag_double_promotion \"-Werror=double-promotion\"\n  )\n  unset(_has_cxxflag_float_conversion)\n  unset(_has_cxxflag_double_promotion)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Modeling Tests in CMake for Blender\nDESCRIPTION: Defines various modeling tests for Blender, including tests for bmesh operations, curve to mesh conversion, and object API. Each test uses specific blend files and Python scripts.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bmesh_bevel\n    ${TEST_SRC_DIR}/modeling/bevel_regression.blend\n    --python ${TEST_PYTHON_DIR}/bevel_operator.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    bmesh_boolean\n    ${TEST_SRC_DIR}/modeling/bool_regression.blend\n    --python ${TEST_PYTHON_DIR}/boolean_operator.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    bmesh_split_faces\n    ${TEST_SRC_DIR}/modeling/split_faces_test.blend\n    --python-text run_tests\n  )\n\n  add_blender_test(\n    curve_to_mesh\n    ${TEST_SRC_DIR}/modeling/curve_to_mesh.blend\n    --python ${TEST_PYTHON_DIR}/curve_to_mesh.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    curves_extrude\n    ${TEST_SRC_DIR}/modeling/curves_extrude.blend\n    --python ${TEST_PYTHON_DIR}/curves_extrude.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    object_conversion\n    ${TEST_SRC_DIR}/modeling/object_conversion.blend\n    --python ${TEST_PYTHON_DIR}/object_conversion.py\n    --\n    --run-all-tests\n  )\n\n  add_blender_test(\n    object_api\n    --python ${TEST_PYTHON_DIR}/bl_object.py\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Embree Support for BVH in CMake\nDESCRIPTION: Conditionally adds Embree libraries and SYCL support if Embree is enabled for the Cycles renderer.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_EMBREE)\n  list(APPEND LIB\n    ${EMBREE_LIBRARIES}\n  )\n  if(EMBREE_SYCL_SUPPORT)\n    list(APPEND LIB\n      ${SYCL_LIBRARIES}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring UV SLIM Support in Blender Geometry Module\nDESCRIPTION: Conditionally adds support for UV SLIM by including the necessary directories and defining the appropriate preprocessor macro.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_UV_SLIM)\n  list(APPEND INC\n    ../../../intern/slim\n  )\n  add_definitions(-DWITH_UV_SLIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Blender Components in CMake\nDESCRIPTION: Includes various subdirectories for different components of Blender, such as internal modules, generic utilities, GPU-related code, mathematical utilities, and BMesh library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(intern)\nadd_subdirectory(generic)\nadd_subdirectory(gpu)\nadd_subdirectory(mathutils)\nadd_subdirectory(bmesh)\n```\n\n----------------------------------------\n\nTITLE: Configuring Freestyle Build Options and Definitions\nDESCRIPTION: Sets compile definitions and conditional build options for the Freestyle library based on build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/freestyle/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DWITH_FREESTYLE)\n\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DPy_ENABLE_SHARED)\nendif()\n\nif(WITH_PYTHON_SAFETY)\n  # For bpy_rna.hh access.\n  add_definitions(-DWITH_PYTHON_SAFETY)\nendif()\n\nif(WIN32)\n  list(APPEND INC_SYS\n    ${PTHREADS_INC}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing FFMPEG Libraries\nDESCRIPTION: Handles installation of FFMPEG DLLs with version-specific file naming (supports both v5.0 and v6.0), including codecs, formats, devices and utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS \"${LIBDIR}/ffmpeg/lib/avcodec-60.dll\")\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/ffmpeg/lib/avcodec-60.dll\n      ${LIBDIR}/ffmpeg/lib/avformat-60.dll\n      ${LIBDIR}/ffmpeg/lib/avdevice-60.dll\n      ${LIBDIR}/ffmpeg/lib/avutil-58.dll\n      ${LIBDIR}/ffmpeg/lib/swscale-7.dll\n      ${LIBDIR}/ffmpeg/lib/swresample-4.dll\n    ALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring RenderDoc API Library with CMake for Blender\nDESCRIPTION: This CMake script sets up the include directories, source files, and builds a library for RenderDoc API integration in Blender. It specifies the necessary include paths, source files including the RenderDoc app header, and creates a library named bf_intern_renderdoc_dynload.\nSOURCE: https://github.com/blender/blender/blob/main/intern/renderdoc_dynload/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  include\n  ../../extern/renderdoc/include\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  intern/renderdoc_api.cc\n\n  include/renderdoc_api.hh\n\n  # Without these files listed, they aren't known to CMake.\n  ../../extern/renderdoc/include/renderdoc_app.h\n)\n\nblender_add_lib(bf_intern_renderdoc_dynload \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake\nDESCRIPTION: This CMake snippet defines the source files needed for the build, categorized under the variable 'SRC'. It includes paths to header files and source files within the project's directory structure, ensuring all necessary components are compiled. Files are organized logically, helping maintain project modularity and easier modification.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ceres/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  include/ceres/autodiff_cost_function.h\n  include/ceres/autodiff_first_order_function.h\n  include/ceres/autodiff_manifold.h\n  include/ceres/c_api.h\n  include/ceres/ceres.h\n  include/ceres/conditioned_cost_function.h\n  include/ceres/constants.h\n  include/ceres/context.h\n  include/ceres/cost_function.h\n  include/ceres/cost_function_to_functor.h\n  include/ceres/covariance.h\n  include/ceres/crs_matrix.h\n  include/ceres/cubic_interpolation.h\n  include/ceres/dynamic_autodiff_cost_function.h\n  include/ceres/dynamic_cost_function.h\n  include/ceres/dynamic_cost_function_to_functor.h\n  include/ceres/dynamic_numeric_diff_cost_function.h\n  include/ceres/evaluation_callback.h\n  include/ceres/first_order_function.h\n  include/ceres/gradient_checker.h\n  include/ceres/gradient_problem.h\n  include/ceres/gradient_problem_solver.h\n  include/ceres/iteration_callback.h\n  include/ceres/jet.h\n  include/ceres/jet_fwd.h\n  include/ceres/line_manifold.h\n  include/ceres/loss_function.h\n  include/ceres/manifold.h\n  include/ceres/manifold_test_utils.h\n  include/ceres/normal_prior.h\n  include/ceres/numeric_diff_cost_function.h\n  include/ceres/numeric_diff_first_order_function.h\n  include/ceres/numeric_diff_options.h\n  include/ceres/ordered_groups.h\n  include/ceres/problem.h\n  include/ceres/product_manifold.h\n  include/ceres/rotation.h\n  include/ceres/sized_cost_function.h\n  include/ceres/solver.h\n  include/ceres/sphere_manifold.h\n  include/ceres/tiny_solver.h\n  include/ceres/tiny_solver_autodiff_function.h\n  include/ceres/tiny_solver_cost_function_adapter.h\n  include/ceres/types.h\n  include/ceres/version.h\n\n  include/ceres/internal/array_selector.h\n  include/ceres/internal/autodiff.h\n  include/ceres/internal/disable_warnings.h\n  include/ceres/internal/eigen.h\n  include/ceres/internal/euler_angles.h\n  include/ceres/internal/fixed_array.h\n  include/ceres/internal/householder_vector.h\n  include/ceres/internal/integer_sequence_algorithm.h\n  include/ceres/internal/jet_traits.h\n  include/ceres/internal/line_parameterization.h\n  include/ceres/internal/memory.h\n  include/ceres/internal/numeric_diff.h\n  include/ceres/internal/parameter_dims.h\n  include/ceres/internal/port.h\n  include/ceres/internal/reenable_warnings.h\n  include/ceres/internal/sphere_manifold_functions.h\n  include/ceres/internal/variadic_evaluate.h\n\n  internal/ceres/accelerate_sparse.cc\n  internal/ceres/accelerate_sparse.h\n  internal/ceres/array_utils.cc\n  internal/ceres/array_utils.h\n  internal/ceres/block_evaluate_preparer.cc\n  internal/ceres/block_evaluate_preparer.h\n  internal/ceres/block_jacobi_preconditioner.cc\n  internal/ceres/block_jacobi_preconditioner.h\n  internal/ceres/block_jacobian_writer.cc\n  internal/ceres/block_jacobian_writer.h\n  internal/ceres/block_random_access_dense_matrix.cc\n  internal/ceres/block_random_access_dense_matrix.h\n  internal/ceres/block_random_access_diagonal_matrix.cc\n  internal/ceres/block_random_access_diagonal_matrix.h\n  internal/ceres/block_random_access_matrix.cc\n  internal/ceres/block_random_access_matrix.h\n  internal/ceres/block_random_access_sparse_matrix.cc\n  internal/ceres/block_random_access_sparse_matrix.h\n  internal/ceres/block_sparse_matrix.cc\n  internal/ceres/block_sparse_matrix.h\n  internal/ceres/block_structure.cc\n  internal/ceres/block_structure.h\n  internal/ceres/c_api.cc\n  internal/ceres/callbacks.cc\n  internal/ceres/callbacks.h\n  internal/ceres/canonical_views_clustering.cc\n  internal/ceres/canonical_views_clustering.h\n  internal/ceres/casts.h\n  internal/ceres/cgnr_solver.cc\n  internal/ceres/cgnr_solver.h\n  internal/ceres/compressed_col_sparse_matrix_utils.cc\n  internal/ceres/compressed_col_sparse_matrix_utils.h\n  internal/ceres/compressed_row_jacobian_writer.cc\n  internal/ceres/compressed_row_jacobian_writer.h\n  internal/ceres/compressed_row_sparse_matrix.cc\n  internal/ceres/compressed_row_sparse_matrix.h\n  internal/ceres/concurrent_queue.h\n  internal/ceres/conditioned_cost_function.cc\n  internal/ceres/conjugate_gradients_solver.h\n  internal/ceres/context.cc\n  internal/ceres/context_impl.cc\n  internal/ceres/context_impl.h\n  internal/ceres/coordinate_descent_minimizer.cc\n  internal/ceres/coordinate_descent_minimizer.h\n  internal/ceres/corrector.cc\n  internal/ceres/corrector.h\n  internal/ceres/cost_function.cc\n  internal/ceres/covariance.cc\n  internal/ceres/covariance_impl.cc\n  internal/ceres/covariance_impl.h\n  internal/ceres/cuda_block_sparse_crs_view.cc\n  internal/ceres/cuda_block_sparse_crs_view.h\n  internal/ceres/cuda_block_structure.cc\n  internal/ceres/cuda_block_structure.h\n  internal/ceres/cuda_buffer.h\n  # internal/ceres/cuda_kernels_bsm_to_crs.cu.cc\n  # internal/ceres/cuda_kernels_bsm_to_crs.h\n  internal/ceres/cuda_kernels_utils.h\n  # internal/ceres/cuda_kernels_vector_ops.cu.cc\n  internal/ceres/cuda_kernels_vector_ops.h\n  internal/ceres/cuda_partitioned_block_sparse_crs_view.cc\n  internal/ceres/cuda_partitioned_block_sparse_crs_view.h\n  internal/ceres/cuda_sparse_matrix.cc\n  internal/ceres/cuda_sparse_matrix.h\n  internal/ceres/cuda_streamed_buffer.h\n  internal/ceres/cuda_vector.cc\n  internal/ceres/cuda_vector.h\n  internal/ceres/dense_cholesky.cc\n  internal/ceres/dense_cholesky.h\n  internal/ceres/dense_jacobian_writer.h\n  internal/ceres/dense_normal_cholesky_solver.cc\n  internal/ceres/dense_normal_cholesky_solver.h\n  internal/ceres/dense_qr.cc\n  internal/ceres/dense_qr.h\n  internal/ceres/dense_qr_solver.cc\n  internal/ceres/dense_qr_solver.h\n  internal/ceres/dense_sparse_matrix.cc\n  internal/ceres/dense_sparse_matrix.h\n  internal/ceres/detect_structure.cc\n  internal/ceres/detect_structure.h\n  internal/ceres/dogleg_strategy.cc\n  internal/ceres/dogleg_strategy.h\n  internal/ceres/dynamic_compressed_row_finalizer.h\n  internal/ceres/dynamic_compressed_row_jacobian_writer.cc\n  internal/ceres/dynamic_compressed_row_jacobian_writer.h\n  internal/ceres/dynamic_compressed_row_sparse_matrix.cc\n  internal/ceres/dynamic_compressed_row_sparse_matrix.h\n  internal/ceres/dynamic_sparse_normal_cholesky_solver.cc\n  internal/ceres/dynamic_sparse_normal_cholesky_solver.h\n  internal/ceres/eigen_vector_ops.h\n  internal/ceres/eigensparse.cc\n  internal/ceres/eigensparse.h\n  internal/ceres/evaluation_callback.cc\n  internal/ceres/evaluator.cc\n  internal/ceres/evaluator.h\n  internal/ceres/execution_summary.h\n  internal/ceres/fake_bundle_adjustment_jacobian.cc\n  internal/ceres/fake_bundle_adjustment_jacobian.h\n  internal/ceres/file.cc\n  internal/ceres/file.h\n  internal/ceres/first_order_function.cc\n  internal/ceres/float_suitesparse.cc\n  internal/ceres/float_suitesparse.h\n  internal/ceres/function_sample.cc\n  internal/ceres/function_sample.h\n  internal/ceres/generate_bundle_adjustment_tests.py\n  internal/ceres/generate_template_specializations.py\n  internal/ceres/generated\n  internal/ceres/gradient_checker.cc\n  internal/ceres/gradient_checking_cost_function.cc\n  internal/ceres/gradient_checking_cost_function.h\n  internal/ceres/gradient_problem.cc\n  internal/ceres/gradient_problem_evaluator.h\n  internal/ceres/gradient_problem_solver.cc\n  internal/ceres/graph.h\n  internal/ceres/graph_algorithms.h\n  internal/ceres/implicit_schur_complement.cc\n  internal/ceres/implicit_schur_complement.h\n  internal/ceres/inner_product_computer.cc\n  internal/ceres/inner_product_computer.h\n  internal/ceres/invert_psd_matrix.h\n  internal/ceres/is_close.cc\n  internal/ceres/is_close.h\n  internal/ceres/iteration_callback.cc\n  internal/ceres/iterative_refiner.cc\n  internal/ceres/iterative_refiner.h\n  internal/ceres/iterative_schur_complement_solver.cc\n  internal/ceres/iterative_schur_complement_solver.h\n  internal/ceres/levenberg_marquardt_strategy.cc\n  internal/ceres/levenberg_marquardt_strategy.h\n  internal/ceres/line_search.cc\n  internal/ceres/line_search.h\n  internal/ceres/line_search_direction.cc\n  internal/ceres/line_search_direction.h\n  internal/ceres/line_search_minimizer.cc\n  internal/ceres/line_search_minimizer.h\n  internal/ceres/line_search_preprocessor.cc\n  internal/ceres/line_search_preprocessor.h\n  internal/ceres/linear_least_squares_problems.cc\n  internal/ceres/linear_least_squares_problems.h\n  internal/ceres/linear_operator.cc\n  internal/ceres/linear_operator.h\n  internal/ceres/linear_solver.cc\n  internal/ceres/linear_solver.h\n  internal/ceres/loss_function.cc\n  internal/ceres/low_rank_inverse_hessian.cc\n  internal/ceres/low_rank_inverse_hessian.h\n  internal/ceres/manifold.cc\n  internal/ceres/map_util.h\n  internal/ceres/minimizer.cc\n  internal/ceres/minimizer.h\n  internal/ceres/normal_prior.cc\n  internal/ceres/pair_hash.h\n  internal/ceres/parallel_for.h\n  internal/ceres/parallel_invoke.cc\n  internal/ceres/parallel_invoke.h\n  internal/ceres/parallel_utils.cc\n  internal/ceres/parallel_utils.h\n  internal/ceres/parallel_vector_ops.cc\n  internal/ceres/parallel_vector_ops.h\n  internal/ceres/parameter_block.h\n  internal/ceres/parameter_block_ordering.cc\n  internal/ceres/parameter_block_ordering.h\n  internal/ceres/partition_range_for_parallel_for.h\n  internal/ceres/partitioned_matrix_view.cc\n  internal/ceres/partitioned_matrix_view.h\n  internal/ceres/partitioned_matrix_view_impl.h\n  internal/ceres/partitioned_matrix_view_template.py\n  internal/ceres/polynomial.cc\n  internal/ceres/polynomial.h\n  internal/ceres/power_series_expansion_preconditioner.cc\n  internal/ceres/power_series_expansion_preconditioner.h\n  internal/ceres/preconditioner.cc\n  internal/ceres/preconditioner.h\n  internal/ceres/preprocessor.cc\n  internal/ceres/preprocessor.h\n  internal/ceres/problem.cc\n  internal/ceres/problem_impl.cc\n  internal/ceres/problem_impl.h\n  internal/ceres/program.cc\n  internal/ceres/program.h\n  internal/ceres/program_evaluator.h\n  internal/ceres/reorder_program.cc\n  internal/ceres/reorder_program.h\n  internal/ceres/residual_block.cc\n  internal/ceres/residual_block.h\n  internal/ceres/residual_block_utils.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Blender System Info Script in CMake\nDESCRIPTION: This snippet configures and installs the blender-system-info.sh script. It's only included if the installation is portable and Python is installed with Blender.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INSTALL_PORTABLE)\n  get_filename_component(PYTHON_EXECUTABLE_NAME_ONLY ${PYTHON_EXECUTABLE} NAME)\n  configure_file(\n    ${CMAKE_SOURCE_DIR}/release/freedesktop/scripts/blender-system-info.sh.in\n    ${CMAKE_BINARY_DIR}/release/freedesktop/scripts/blender-system-info.sh\n    @ONLY\n  )\n  unset(PYTHON_EXECUTABLE_NAME_ONLY)\n  install(\n    PROGRAMS ${CMAKE_BINARY_DIR}/release/freedesktop/scripts/blender-system-info.sh\n    DESTINATION \".\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths for Blender Logging Library\nDESCRIPTION: Sets up public include directories for the logging library build.\nSOURCE: https://github.com/blender/blender/blob/main/intern/clog/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for EEVEE Shaders in CMake\nDESCRIPTION: Defines the include directories for EEVEE shaders, including paths for Blender core libraries, GPU shaders, and Grease Pencil.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n\n  # For grease pencil.\n  ../../gpencil\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Cycles Util Library in CMake\nDESCRIPTION: Lists the source (.cpp) files that make up the Cycles Util library implementation, including various utility functions for math, debugging, threading, and system operations.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/util/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  aligned_malloc.cpp\n  debug.cpp\n  ies.cpp\n  log.cpp\n  math_cdf.cpp\n  md5.cpp\n  murmurhash.cpp\n  path.cpp\n  profiling.cpp\n  string.cpp\n  system.cpp\n  task.cpp\n  thread.cpp\n  time.cpp\n  transform.cpp\n  transform_avx2.cpp\n  windows.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader Sources in CMake\nDESCRIPTION: Lists the GLSL fragment shader source files for the Workbench rendering engine, including various effects and processing stages.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  workbench_composite_frag.glsl\n  workbench_effect_dof_prepare_frag.glsl\n  workbench_effect_dof_downsample_frag.glsl\n  workbench_effect_dof_blur1_frag.glsl\n  workbench_effect_dof_blur2_frag.glsl\n  workbench_effect_dof_resolve_frag.glsl\n  workbench_effect_outline_frag.glsl\n  workbench_effect_smaa_frag.glsl\n  workbench_effect_taa_frag.glsl\n  workbench_extract_stencil.glsl\n  workbench_merge_depth_frag.glsl\n  workbench_overlay_depth_frag.glsl\n  workbench_prepass_frag.glsl\n  workbench_shadow_debug_frag.glsl\n  workbench_transparent_accum_frag.glsl\n  workbench_transparent_resolve_frag.glsl\n  workbench_volume_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths for Depsgraph\nDESCRIPTION: Sets up public and system include directories for the depsgraph build\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/depsgraph/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../animrig\n  ../makesrna\n  ../modifiers\n  ../nodes\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Topbar Space\nDESCRIPTION: Defines the include directories needed for building the topbar space module. This includes paths to local header files and generated RNA prototypes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_topbar/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Check Target\nDESCRIPTION: This snippet adds a custom target named check that runs CTest. If the build type is Maintainer, it is added to the ALL target, meaning it will run every time the project is built. Otherwise it is a normal custom target that needs to be run manually.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nIF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n  ADD_CUSTOM_TARGET(check ALL COMMAND ${CMAKE_CTEST_COMMAND})\nELSE()\n  ADD_CUSTOM_TARGET(check COMMAND ${CMAKE_CTEST_COMMAND})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Nanosvg in CMake\nDESCRIPTION: This snippet specifies the source files for the Nanosvg library that will be compiled. It sets the variable SRC, which includes the header and C source files.\nSOURCE: https://github.com/blender/blender/blob/main/extern/nanosvg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  nanosvg.h\n  nanosvgrast.h\n  blender_nanosvg.c\n  blender_raster.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy OpenGL Support in CMake for Blender\nDESCRIPTION: This snippet checks if legacy OpenGL support is enabled and adds the corresponding definition if true. It allows for conditional compilation of legacy OpenGL code in the Blender project.\nSOURCE: https://github.com/blender/blender/blob/main/source/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_LEGACY_OPENGL)\n  add_definitions(-DWITH_LEGACY_OPENGL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Window Manager in CMake\nDESCRIPTION: Specifies the internal Blender libraries that the window manager component depends on, using the bf:: namespace for most dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/windowmanager/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  # ... (truncated for brevity)\n  bf_intern_ghost\n  bf_compositor\n)\n```\n\n----------------------------------------\n\nTITLE: GCC Warning Flags Configuration\nDESCRIPTION: Configures warning flags for GCC compiler, including general warnings, error conversions, and specific warning suppressions for both C and C++ compilation.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  add_check_c_compiler_flags(\n    C_WARNINGS\n    C_WARN_ALL -Wall\n    C_WARN_ERROR_IMPLICIT_FUNCTION_DECLARATION -Werror=implicit-function-declaration\n    C_WARN_STRICT_PROTOTYPES -Wstrict-prototypes\n    # ... additional flags ...\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Render Module in CMake\nDESCRIPTION: Defines the include directories for the Blender render module, including both public and internal paths. It sets up paths for various Blender components and external libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n  ../compositor\n  ../compositor/cached_resources\n  ../compositor/derived_resources\n  ../draw/intern\n  ../gpu/intern\n  ../makesrna\n  ../simulation\n  ../../../intern/mikktspace\n  ../../../intern/mantaflow/extern\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies for Blender Build\nDESCRIPTION: Configures essential CMake policies for the Blender build system, including library linking behavior, string quoting, error handling, and input directory requirements.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# see \"cmake --help-policy CMP0003\"\n# So library linking is more sane\ncmake_policy(SET CMP0003 NEW)\n\n# So BUILDINFO and BLENDERPATH strings are automatically quoted\ncmake_policy(SET CMP0005 NEW)\n\n# So syntax problems are errors\ncmake_policy(SET CMP0010 NEW)\n\n# Input directories must have `CMakeLists.txt`.\ncmake_policy(SET CMP0014 NEW)\n\ncmake_minimum_required(VERSION 3.5)\n\nproject(GhostMultiTest)\n```\n\n----------------------------------------\n\nTITLE: Creating OSL Shader Compilation Target in CMake\nDESCRIPTION: Defines a custom target that triggers compilation of all OSL shaders when building Blender. This ensures all shader objects are available for the Cycles renderer.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/shaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(cycles_osl_shaders ALL DEPENDS ${SRC_OSO} ${SRC_OSL_HEADERS} ${OSL_COMPILER} SOURCES ${SRC_OSL})\ncycles_set_solution_folder(cycles_osl_shaders)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Cycles in CMake\nDESCRIPTION: Specifies the required libraries for building the Cycles rendering engine. This includes internal Blender libraries (prefixed with 'bf::') and Cycles-specific libraries, as well as external dependencies like Epoxy and Python.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  cycles_bvh\n  cycles_device\n  cycles_graph\n  cycles_kernel\n  cycles_scene\n  cycles_session\n  cycles_subd\n  cycles_util\n\n  ${Epoxy_LIBRARIES}\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Brush, Node Group, and SVG Tests in CMake for Blender\nDESCRIPTION: Sets up tests for Blender's brush system, node group functionality, and SVG import/export. Includes tests for field type inference, group compatibility, and interface. SVG tests are set up for rendering complex paths.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n  bl_brush\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_brush_test.py\n)\n\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_node_field_type_inference\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_node_field_type_inference.py\n    --\n    --testdir \"${TEST_SRC_DIR}/node_group\"\n  )\n\n  add_blender_test(\n    bl_node_group_compat\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_node_group_compat.py\n    --\n    --testdir \"${TEST_SRC_DIR}/node_group\"\n  )\n\n  add_blender_test(\n    bl_node_group_interface\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_node_group_interface.py\n    --\n    --testdir \"${TEST_SRC_DIR}/node_group\"\n  )\nendif()\n\nif(TEST_SRC_DIR_EXISTS)\n  set(_svg_render_tests complex path)\n\n  foreach(render_test ${_svg_render_tests})\n    add_render_test(\n      io_curve_svg_${render_test}\n      ${CMAKE_CURRENT_LIST_DIR}/bl_io_curve_svg_test.py\n      --testdir \"${TEST_SRC_DIR}/io_tests/svg/${render_test}\"\n      --outdir \"${TEST_OUT_DIR}/io_curve_svg\"\n    )\n  endforeach()\n\n  unset(_svg_render_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging with GLog in CMake for Cycles\nDESCRIPTION: Sets up compilation flags and include directories for GLog logging when WITH_CYCLES_LOGGING is enabled. It adds necessary definitions and includes GLog and GFlags headers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_LOGGING)\n  add_definitions(-DWITH_CYCLES_LOGGING)\n  add_definitions(${GLOG_DEFINES})\n  add_definitions(-DCYCLES_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})\n  include_directories(\n    SYSTEM\n    ${GLOG_INCLUDE_DIRS}\n    ${GFLAGS_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding LEMON Library\nDESCRIPTION: This command adds the LEMON library, using the defined source files.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_LIBRARY(lemon ${LEMON_SOURCES})\"\n```\n\n----------------------------------------\n\nTITLE: Suppressing TBB Deprecated Messages\nDESCRIPTION: Adds a compiler definition to suppress warnings about deprecated TBB headers used by USD. This ensures a cleaner build output without deprecation warnings.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Blendfile Versioning Tests in CMake\nDESCRIPTION: Sets up multiple blendfile versioning tests using a range of indices. Each test runs a Python script with specific arguments to test different aspects of blendfile versioning.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(BLENDFILE_VERSIONING_SPLIT_RANGE 32)\n  math(EXPR BLENDFILE_VERSIONING_SPLIT_RANGE_CMAKE \"${BLENDFILE_VERSIONING_SPLIT_RANGE} - 1\")\n  foreach(idx RANGE ${BLENDFILE_VERSIONING_SPLIT_RANGE_CMAKE})\n    add_blender_test(\n      \"blendfile_versioning_${idx}_over_${BLENDFILE_VERSIONING_SPLIT_RANGE}\"\n      --log \"*blendfile*\"\n      --debug-memory\n      --debug\n      --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_versioning.py --\n      --src-test-dir ${TEST_SRC_DIR}/\n      --slice-range ${BLENDFILE_VERSIONING_SPLIT_RANGE}\n      --slice-index ${idx}\n    )\n  endforeach()\n\n  add_blender_test(\n    blendfile_liblink\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_liblink.py --\n    --src-test-dir ${TEST_SRC_DIR}/\n    --output-dir ${TEST_OUT_DIR}/blendfile_io/\n  )\n\n  add_blender_test(\n    blendfile_relationships\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_relationships.py --\n    --src-test-dir ${TEST_SRC_DIR}/\n    --output-dir ${TEST_OUT_DIR}/blendfile_io/\n  )\n\n  add_blender_test(\n    blendfile_library_overrides\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_library_overrides.py --\n    --output-dir ${TEST_OUT_DIR}/blendfile_io/\n    --test-dir \"${TEST_SRC_DIR}/libraries_and_linking\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Support for Cycles in oneAPI CMake Configuration\nDESCRIPTION: Adds the WITH_CYCLES_DEBUG preprocessor definition to the compiler flags when Cycles debug mode is enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_CYCLES_DEBUG)\n    list(APPEND sycl_compiler_flags -DWITH_CYCLES_DEBUG)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender IO Common Library in CMake\nDESCRIPTION: Specifies the libraries that the Blender IO common library depends on, using the PRIVATE visibility specifier.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/common/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Font Library\nDESCRIPTION: Lists all source and header files that comprise the font library implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenfont/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/blf.cc\n  intern/blf_default.cc\n  intern/blf_dir.cc\n  intern/blf_font.cc\n  intern/blf_font_default.cc\n  intern/blf_glyph.cc\n  intern/blf_thumbs.cc\n  BLF_api.hh\n  intern/blf_internal.hh\n  intern/blf_internal_types.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Memory Consistency Check Function in C\nDESCRIPTION: Debug function that verifies the integrity of internal memory management structures.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nbool MEM_consistency_check(void);\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories in CMake\nDESCRIPTION: Sets up system include directories for the console space. In this case, it's empty, indicating no additional system includes are required.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_console/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Thumbnail Extraction Build Settings\nDESCRIPTION: Sets up common include directories and source files for the thumbnail extraction functionality across all platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blendthumb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n  ../blenlib\n  ../makesdna\n  ../../../intern/guardedalloc\n)\n\ninclude_directories(\n  SYSTEM\n  ${ZLIB_INCLUDE_DIRS}\n)\n\nset(SRC\n  src/blendthumb.hh\n  src/blendthumb_extract.cc\n  src/blendthumb_png.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Scene Editor Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the Blender scene editor as a library, using the previously defined sources, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/scene/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_scene \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for IK Solver in CMake\nDESCRIPTION: Defines the include directories needed for building the IK solver. It includes local internal directories and the memutil directory.\nSOURCE: https://github.com/blender/blender/blob/main/intern/iksolver/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  intern\n  ../memutil\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Outliner\nDESCRIPTION: Defines include paths for the outliner space editor compilation, including internal Blender paths and external dependencies like fmtlib.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_outliner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../blenfont\n  ../../makesrna\n\n  ../../../../extern/fmtlib/include\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Python Module\nDESCRIPTION: Specifies the libraries that the Blender Python module depends on, including internal Blender libraries and external dependencies like Python.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/intern/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_animation\n  bf_editor_interface\n  bf_editor_space_api\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  bf_python_gpu\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Grease Pencil I/O in CMake\nDESCRIPTION: Defines the include directories for the Grease Pencil I/O library compilation. It includes both internal Blender directories and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/grease_pencil/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../common\n  ../../editors/include\n  ../../makesdna\n  ../../makesrna\n  ../../../../intern/guardedalloc\n  ../../../../intern/utfconv\n  ../../../../extern/fmtlib/include\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GLSL Shaders in CMake\nDESCRIPTION: Defines a list of include directories for GLSL shaders, including GPU and grease pencil related paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/intern/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  ../../../gpu\n  ../../../gpu/intern\n  ../../../gpu/shaders\n  ../../../gpu/shaders/common\n\n  # For grease pencil.\n  ../../engines/gpencil\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal Support for BVH in CMake\nDESCRIPTION: Conditionally adds Metal-specific source files and defines a preprocessor macro if Metal support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_METAL\n  metal.mm\n)\n\nif(WITH_CYCLES_DEVICE_METAL)\n  list(APPEND SRC\n    ${SRC_METAL}\n  )\n  add_definitions(-DWITH_METAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Fragment Shader Source Files in CMake\nDESCRIPTION: Sets a list of GLSL fragment shader source files to be compiled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/intern/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  draw_debug_draw_display_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Lattice Editor\nDESCRIPTION: Lists the source and header files required for the lattice editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/lattice/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  editlattice_select.cc\n  editlattice_tools.cc\n  editlattice_undo.cc\n  lattice_ops.cc\n\n  lattice_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for File Editor Space\nDESCRIPTION: Defines include directories for the file editor space component build, including asset, core includes, and RNA generation paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_file/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Base CMake Configuration for GHOST System\nDESCRIPTION: Sets up basic include directories and source files for the GHOST system. Defines core source files and libraries required for building.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../guardedalloc\n)\n\nset(INC_SYS\n)\n\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Test Functions in CMake\nDESCRIPTION: Defines functions for running UI-specific tests with optional headless mode support\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_blender_test_ui testname)\n  set(EXE_PARAMS ${TEST_BLENDER_EXE_PARAMS})\n  list(REMOVE_ITEM EXE_PARAMS --background)\n\n  add_blender_test_impl(\n    \"${testname}\"\n    \"\"\n    \"${TEST_BLENDER_EXE}\"\n    --factory-startup\n    -p 0 0 800 600\n    ${EXE_PARAMS}\n    ${ARGN}\n  )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Placeholder for system include directories, currently empty but available for future use.\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Cycles Integrator in CMake\nDESCRIPTION: Lists all the header files (.h) that are part of the Cycles integrator component. These headers correspond to the source files and define the interfaces for the integrator's functionality.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/integrator/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  adaptive_sampling.h\n  denoiser.h\n  denoiser_gpu.h\n  denoiser_oidn.h\n  denoiser_oidn_gpu.h\n  denoiser_optix.h\n  guiding.h\n  path_trace.h\n  tile.h\n  pass_accessor.h\n  pass_accessor_cpu.h\n  pass_accessor_gpu.h\n  path_trace_display.h\n  path_trace_tile.h\n  path_trace_work.h\n  path_trace_work_cpu.h\n  path_trace_work_gpu.h\n  render_scheduler.h\n  shader_eval.h\n  work_balancer.h\n  work_tile_scheduler.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Geometry Nodes\nDESCRIPTION: Defines the include paths needed for building the geometry nodes system, including internal Blender paths and the RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  include\n  ../intern\n  ../../editors/include\n  ../../makesrna\n  ../../modifiers\n  ../../io/common\n  ../../io/csv\n  ../../io/ply\n  ../../io/stl\n  ../../io/wavefront_obj\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Clang Warning Flags Configuration\nDESCRIPTION: Sets up warning flags specifically for Clang compiler, including both standard Clang and AppleClang variants, with special handling for MSVC-Clang compilation.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_check_c_compiler_flags(\n    C_WARNINGS\n    C_WARN_ALL -Wall\n    C_WARN_ERROR_IMPLICIT_FUNCTION_DECLARATION -Werror=implicit-function-declaration\n    # ... additional flags ...\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Boost Components on Windows\nDESCRIPTION: Configures installation of Boost library components on Windows, including atomic, chrono, filesystem and other required libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND DEFINED BOOST_LIBPATH)\n  if(EXISTS ${BOOST_LIBPATH})\n    set(BOOST_COMPONENTS atomic chrono date_time filesystem\n      iostreams locale program_options regex\n      serialization system thread wave wserialization\n      python${_PYTHON_VERSION_NO_DOTS} numpy${_PYTHON_VERSION_NO_DOTS}\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Bullet Physics Library to Blender\nDESCRIPTION: Adds Bullet Physics as an external library to Blender's build system using custom function blender_add_lib\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_bullet \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Including Ray Tracing and Path Tracing Libraries in CMake\nDESCRIPTION: Includes ISPC compiler and path tracing libraries with special handling for Windows ARM platform. These libraries enable efficient ray tracing and are critical for Blender's modern rendering engines.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/ispc.cmake)\nif(BLENDER_PLATFORM_WINDOWS_ARM)\n  include(cmake/openpgl_windows_arm.cmake)\nelse()\n  include(cmake/openpgl.cmake)\nendif()\n# EMBREE needs to be included after `dpcpp` as it uses it for compiling with GPU support\nif(BLENDER_PLATFORM_WINDOWS_ARM)\n  # WoA needs EMBREE to be built with the VS Generator + LLVM,\n  # put it in its own file to avoid clutter.\n  include(cmake/embree_windows_arm.cmake)\nelse()\n  include(cmake/embree.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Modifiers\nDESCRIPTION: Lists all the source files (.cc) and header files (.hh) that make up the modifiers module, including the core modifiers, grease pencil modifiers, and line art functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/MOD_armature.cc\n  intern/MOD_array.cc\n  intern/MOD_bevel.cc\n  intern/MOD_boolean.cc\n  intern/MOD_build.cc\n  intern/MOD_cast.cc\n  intern/MOD_cloth.cc\n  intern/MOD_collision.cc\n  intern/MOD_correctivesmooth.cc\n  intern/MOD_curve.cc\n  intern/MOD_datatransfer.cc\n  intern/MOD_decimate.cc\n  intern/MOD_displace.cc\n  intern/MOD_dynamicpaint.cc\n  intern/MOD_edgesplit.cc\n  intern/MOD_explode.cc\n  intern/MOD_fluid.cc\n  intern/MOD_grease_pencil_armature.cc\n  intern/MOD_grease_pencil_array.cc\n  intern/MOD_grease_pencil_build.cc\n  intern/MOD_grease_pencil_color.cc\n  intern/MOD_grease_pencil_dash.cc\n  intern/MOD_grease_pencil_envelope.cc\n  intern/MOD_grease_pencil_hook.cc\n  intern/MOD_grease_pencil_lattice.cc\n  intern/MOD_grease_pencil_length.cc\n  intern/MOD_grease_pencil_mirror.cc\n  intern/MOD_grease_pencil_multiply.cc\n  intern/MOD_grease_pencil_noise.cc\n  intern/MOD_grease_pencil_offset.cc\n  intern/MOD_grease_pencil_opacity.cc\n  intern/MOD_grease_pencil_outline.cc\n  intern/MOD_grease_pencil_shrinkwrap.cc\n  intern/MOD_grease_pencil_simplify.cc\n  intern/MOD_grease_pencil_smooth.cc\n  intern/MOD_grease_pencil_subdiv.cc\n  intern/MOD_grease_pencil_texture.cc\n  intern/MOD_grease_pencil_thickness.cc\n  intern/MOD_grease_pencil_time.cc\n  intern/MOD_grease_pencil_tint.cc\n  intern/MOD_grease_pencil_util.cc\n  intern/MOD_grease_pencil_weight_angle.cc\n  intern/MOD_grease_pencil_weight_proximity.cc\n  intern/MOD_hook.cc\n  intern/MOD_laplaciandeform.cc\n  intern/MOD_laplaciansmooth.cc\n  intern/MOD_lattice.cc\n  intern/MOD_lineart.cc\n  intern/MOD_mask.cc\n  intern/MOD_mesh_to_volume.cc\n  intern/MOD_meshcache.cc\n  intern/MOD_meshcache_mdd.cc\n  intern/MOD_meshcache_pc2.cc\n  intern/MOD_meshcache_util.cc\n  intern/MOD_meshdeform.cc\n  intern/MOD_meshsequencecache.cc\n  intern/MOD_mirror.cc\n  intern/MOD_multires.cc\n  intern/MOD_nodes.cc\n  intern/MOD_none.cc\n  intern/MOD_normal_edit.cc\n  intern/MOD_ocean.cc\n  intern/MOD_particleinstance.cc\n  intern/MOD_particlesystem.cc\n  intern/MOD_remesh.cc\n  intern/MOD_screw.cc\n  intern/MOD_shapekey.cc\n  intern/MOD_shrinkwrap.cc\n  intern/MOD_simpledeform.cc\n  intern/MOD_skin.cc\n  intern/MOD_smooth.cc\n  intern/MOD_softbody.cc\n  intern/MOD_solidify.cc\n  intern/MOD_solidify_extrude.cc\n  intern/MOD_solidify_nonmanifold.cc\n  intern/MOD_subsurf.cc\n  intern/MOD_surface.cc\n  intern/MOD_surfacedeform.cc\n  intern/MOD_triangulate.cc\n  intern/MOD_ui_common.cc\n  intern/MOD_util.cc\n  intern/MOD_uvproject.cc\n  intern/MOD_uvwarp.cc\n  intern/MOD_volume_displace.cc\n  intern/MOD_volume_to_mesh.cc\n  intern/MOD_warp.cc\n  intern/MOD_wave.cc\n  intern/MOD_weighted_normal.cc\n  intern/MOD_weightvg_util.cc\n  intern/MOD_weightvgedit.cc\n  intern/MOD_weightvgmix.cc\n  intern/MOD_weightvgproximity.cc\n  intern/MOD_weld.cc\n  intern/MOD_wireframe.cc\n  intern/lineart/lineart_chain.cc\n  intern/lineart/lineart_cpu.cc\n  intern/lineart/lineart_shadow.cc\n  intern/lineart/lineart_util.cc\n\n  MOD_modifiertypes.hh\n  MOD_nodes.hh\n  intern/MOD_grease_pencil_util.hh\n  intern/MOD_meshcache_util.hh\n  intern/MOD_solidify_util.hh\n  intern/MOD_ui_common.hh\n  intern/MOD_util.hh\n  intern/MOD_weightvg_util.hh\n  intern/lineart/MOD_lineart.hh\n  intern/lineart/lineart_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring version.cmake\nDESCRIPTION: This snippet configures the version.cmake file using the CONFIGURE_FILE command. It populates the version information from version.cmake.in to version.cmake.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(\n  ${PROJECT_SOURCE_DIR}/cmake/version.cmake.in\n  ${PROJECT_BINARY_DIR}/cmake/version.cmake\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definition for POSIX Threads Support\nDESCRIPTION: Enables POSIX threads support for the logging library, except for makesdna and makesrna builds.\nSOURCE: https://github.com/blender/blender/blob/main/intern/clog/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DWITH_CLOG_PTHREADS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Test Functions in CMake\nDESCRIPTION: Defines functions for running Python tests both inside and outside of Blender\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_python_test testname testscript)\n  if(NOT TEST_PYTHON_EXE)\n    message(FATAL_ERROR \"No Python configured for running tests, set TEST_PYTHON_EXE.\")\n  endif()\n\n  add_test(\n    NAME ${testname}\n    COMMAND ${TEST_PYTHON_EXE} ${TEST_PYTHON_EXE_EXTRA_ARGS} ${testscript} ${ARGN}\n    WORKING_DIRECTORY $<TARGET_FILE_DIR:blender>\n  )\n  blender_test_set_envvars(\"${testname}\" \"\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Cycles Hydra\nDESCRIPTION: Sets up include directories for the Cycles Hydra render delegate. It includes both internal paths (..) and system paths like USD, Epoxy, and Python includes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\nset(INC_SYS\n  ${USD_INCLUDE_DIRS}\n  ${Epoxy_INCLUDE_DIRS}\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for CSV Import in Blender (CMake)\nDESCRIPTION: Defines the library dependencies for the CSV import module, including Blender's core libraries and external dependencies like fmtlib.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/csv/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  bf_blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Transform Module\nDESCRIPTION: Defines the include directories needed for the transform module, including both internal paths and generated RNA header paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/transform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../ikplugin\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Blender Scripts and Resources in CMake\nDESCRIPTION: Defines installation rules for Blender scripts, fonts, and localization files. Handles conditional installation based on build options and creates custom targets for compiling localization files.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  if(NOT WITH_FREESTYLE)\n    set(FREESTYLE_EXCLUDE_CONDITIONAL \"freestyle/*\")\n  else()\n    set(FREESTYLE_EXCLUDE_CONDITIONAL \"_freestyle/*\")\n  endif()\n\n  install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/scripts\n    DESTINATION ${TARGETDIR_VER}\n    PATTERN \".git\" EXCLUDE\n    PATTERN \".gitignore\" EXCLUDE\n    PATTERN \".gitea\" EXCLUDE\n    PATTERN \".github\" EXCLUDE\n    PATTERN \".arcconfig\" EXCLUDE\n    PATTERN \"__pycache__\" EXCLUDE\n    PATTERN \"site\" EXCLUDE\n    PATTERN \"${FREESTYLE_EXCLUDE_CONDITIONAL}\" EXCLUDE\n    PATTERN \"addons_core/bl_pkg/Makefile\" EXCLUDE\n    PATTERN \"addons_core/bl_pkg/tests\" EXCLUDE\n    PATTERN \"addons_core/bl_pkg/example_extension\" EXCLUDE\n  )\n\n  if(WITH_PYTHON_MODULE)\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/scripts/site/sitecustomize.py\n      DESTINATION ${TARGETDIR_VER}/scripts/startup\n      RENAME bpy_site_customize.py\n    )\n  elseif(WITH_PYTHON_INSTALL)\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/scripts/site/sitecustomize.py\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n  endif()\n  unset(FREESTYLE_EXCLUDE_CONDITIONAL)\n\n  if(WITH_DRACO)\n    install(\n      PROGRAMS $<TARGET_FILE:extern_draco>\n      DESTINATION ${TARGETDIR_VER}/scripts/addons_core/io_scene_gltf2\n    )\n  endif()\nendif()\n\ninstall(\n  DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/fonts\n  DESTINATION ${TARGETDIR_VER}/datafiles\n)\n\nif(WITH_INTERNATIONAL)\n  set(_locale_dir \"${CMAKE_SOURCE_DIR}/locale\")\n  set(_locale_target_dir ${TARGETDIR_VER}/datafiles/locale)\n\n  file(GLOB _po_files \"${_locale_dir}/po/*.po\")\n  foreach(_po_file ${_po_files})\n    msgfmt_simple(${_po_file} _all_mo_files)\n  endforeach()\n\n  add_custom_target(\n    locales\n    DEPENDS ${_all_mo_files}\n  )\n  add_dependencies(blender locales)\n\n  install(\n    FILES ${_locale_dir}/languages\n    DESTINATION ${_locale_target_dir}\n  )\n\n  foreach(_mo_file ${_all_mo_files})\n    get_filename_component(_locale_name ${_mo_file} NAME_WE)\n    install(\n      FILES ${_mo_file}\n      DESTINATION ${_locale_target_dir}/${_locale_name}/LC_MESSAGES\n      RENAME blender.mo\n    )\n    unset(_locale_name)\n  endforeach()\n\n  unset(_all_mo_files)\n  unset(_po_files)\n  unset(_po_file)\n  unset(_mo_file)\n  unset(_locale_target_dir)\n\n  unset(_locale_dir)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Final Library Build Configuration\nDESCRIPTION: Creates the final IO editor library using collected sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/io/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_io \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: Markdown header and description for MikkTSpace documentation, including reference to the official website.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mikktspace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MikkTSpace\nA common standard for tangent space used in baking tools to produce normal maps.\n\nMore information can be found at http://www.mikktspace.com/.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Editor Space Info in CMake\nDESCRIPTION: Lists the source files that make up the Blender editor space info module, including both .cc and .hh files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  info_draw.cc\n  info_ops.cc\n  info_report.cc\n  info_stats.cc\n  space_info.cc\n  textview.cc\n\n  info_intern.hh\n  textview.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies for Blender\nDESCRIPTION: Configures various CMake policies to ensure consistent behavior across different CMake versions and compiler environments.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# see \"cmake --help-policy CMP0003\"\n# So library linking is more sane\ncmake_policy(SET CMP0003 NEW)\n\n# So BUILDINFO and BLENDERPATH strings are automatically quoted\ncmake_policy(SET CMP0005 NEW)\n\n# So syntax problems are errors\ncmake_policy(SET CMP0010 NEW)\n\n# Input directories must have CMakeLists.txt\ncmake_policy(SET CMP0014 NEW)\n\n# Silence draco warning on macOS, new policy works fine.\nif(POLICY CMP0068)\n  cmake_policy(SET CMP0068 NEW)\nendif()\n\n# find_package() uses <PackageName>_ROOT variables.\nif(POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW)\nendif()\n\n# find_package() uses uppercase <PackageName>_ROOT variables.\nif(POLICY CMP0144)\n  cmake_policy(SET CMP0144 NEW)\nendif()\n\n# Install CODE|SCRIPT allow the use of generator expressions.\nif(POLICY CMP0087)\n  cmake_policy(SET CMP0087 NEW)\nendif()\n\n# Allow to specify language per file.\nif(POLICY CMP0119)\n  cmake_policy(SET CMP0119 NEW)\nendif()\n\n# Install DESTINATION paths are normalized.\nif(POLICY CMP0177)\n  cmake_policy(SET CMP0177 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Memory Utility Library in CMake\nDESCRIPTION: Sets up the include directories for the Blender memory utility library. It defines public include paths for the current directory and its parent.\nSOURCE: https://github.com/blender/blender/blob/main/intern/memutil/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ..\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for IK Solver Library\nDESCRIPTION: Lists all the source files (.cpp) and header files (.h) that comprise the IK solver library, including both the implementation files in the intern directory and the external interface header.\nSOURCE: https://github.com/blender/blender/blob/main/intern/iksolver/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/IK_QJacobian.cpp\n  intern/IK_QJacobianSolver.cpp\n  intern/IK_QSegment.cpp\n  intern/IK_QTask.cpp\n  intern/IK_Solver.cpp\n\n  extern/IK_solver.h\n  intern/IK_Math.h\n  intern/IK_QJacobian.h\n  intern/IK_QJacobianSolver.h\n  intern/IK_QSegment.h\n  intern/IK_QTask.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Dualcon Library\nDESCRIPTION: Lists all source and header files that comprise the Dualcon library implementation, including core functionality like manifold tables, marching cubes, octree implementation, and projections.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/manifold_table.cpp\n  intern/marching_cubes_table.cpp\n  intern/octree.cpp\n  intern/Projections.cpp\n\n  intern/cubes.h\n  intern/GeoCommon.h\n  intern/manifold_table.h\n  intern/marching_cubes_table.h\n  intern/MemoryAllocator.h\n  intern/ModelReader.h\n  intern/octree.h\n  intern/Projections.h\n  intern/Queue.h\n\n  intern/dualcon_c_api.cpp\n  dualcon.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Asset System\nDESCRIPTION: Sets up public and internal include directories for the asset system library build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/asset_system/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n  intern/library_types\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories in CMake for Blender\nDESCRIPTION: Configures system-level include directories for external dependencies including zlib and FreeType libraries used by vfontdata_freetype.cc.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${ZLIB_INCLUDE_DIRS}\n\n  # For `vfontdata_freetype.cc`.\n  ${FREETYPE_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Render Editor in CMake\nDESCRIPTION: Defines the include directories for the Blender render editor module, including local and generated directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining String Flag in Google Mock\nDESCRIPTION: This macro `GMOCK_DECLARE_string_(name)` enables the declaration of a string flag identified by a name. It can be set using `GMOCK_DEFINE_string_(name, default_val, doc)` where a default value and documentation can be provided.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/include/gmock/internal/custom/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DECLARE_string_(name)\n```\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DEFINE_string_(name, default_val, doc)\n```\n\n----------------------------------------\n\nTITLE: Unsafe Data Referencing in Blender Python\nDESCRIPTION: This code snippet demonstrates an unsafe way of referencing Blender data that can lead to crashes. It modifies a collection and then attempts to access an item that may have been reallocated.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_crashes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TestItems(bpy.types.PropertyGroup):\n    name: bpy.props.StringProperty()\n\nbpy.utils.register_class(TestItems)\nbpy.types.Scene.test_items = bpy.props.CollectionProperty(type=TestItems)\n\nfirst_item = bpy.context.scene.test_items.add()\nfor i in range(100):\n    bpy.context.scene.test_items.add()\n\n# This is likely to crash, as internal code may re-allocate\n# the whole container (the collection) memory at some point.\nfirst_item.name = \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Building the Blender Transform Module Library\nDESCRIPTION: Creates the transform module library using the defined source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/transform/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_transform \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Demos in CMake\nDESCRIPTION: This snippet defines a list of demo projects and iterates through them to create executable targets for each one, linking them with the 'lemon' library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/demo/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(DEMOS\n  arg_parser_demo\n  graph_to_eps_demo\n  lgf_demo\n)\n\nFOREACH(DEMO_NAME ${DEMOS})\n  ADD_EXECUTABLE(${DEMO_NAME} ${DEMO_NAME}.cc)\n  TARGET_LINK_LIBRARIES(${DEMO_NAME} lemon)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Include Directories in CMake\nDESCRIPTION: Sets up include directories for the GPU module, including paths for shaders, engines, and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  dummy\n  intern\n  metal\n  opengl\n  vulkan\n  ../makesrna\n  ../editors/include\n  ../compositor/shaders/infos\n  ../draw/engines/eevee\n  ../draw/engines/eevee/shaders/infos\n  ../draw/engines/gpencil\n  ../draw/engines/gpencil/shaders/infos\n  ../draw/engines/image/shaders/infos\n  ../draw/engines/overlay/shaders/infos\n  ../draw/engines/select\n  ../draw/engines/select/shaders/infos\n  ../draw/engines/workbench\n  ../draw/engines/workbench/shaders/infos\n  ../draw/intern\n  ../draw/intern/shaders\n  metal/kernels\n  shaders/infos\n  shaders/common\n  shaders\n  ../../../intern/ghost\n  ../../../intern/mantaflow/extern\n  ../../../intern/opensubdiv\n)\n```\n\n----------------------------------------\n\nTITLE: Source Files Configuration\nDESCRIPTION: Defines the core source files for the Blender executable and handles platform-specific additions.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  creator.cc\n  creator_args.cc\n  creator_signals.cc\n\n  creator_intern.h\n)\n\nif(CMAKE_GENERATOR MATCHES \"^Visual Studio.+\")\n  # This helps visual studio find the debugger visualizers\n  list(APPEND SRC ${CMAKE_SOURCE_DIR}/tools/utils_ide/natvis/Blender.natvis)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Editor Utility Library\nDESCRIPTION: Defines the include directories for the Blender editor utility library compilation. It includes various internal Blender directories and the RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/util/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../space_sequencer\n  ../../makesrna\n  ../../nodes\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Building the BinReloc Library\nDESCRIPTION: This snippet calls the CMake function to create the BinReloc library target in the Blender build. It provides the source files, include directories, and libraries needed for linking, facilitating the integration of the library within the project.\nSOURCE: https://github.com/blender/blender/blob/main/extern/binreloc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_binreloc \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GTest Suite for STL Module in Blender with CMake\nDESCRIPTION: Sets up a test suite for the STL module when testing is enabled. This includes test source files, additional include directories, and dependencies. The test suite focuses on verifying the functionality of the STL exporter.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/stl/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/stl_exporter_tests.cc\n  )\n\n  set(TEST_INC\n    ${INC}\n\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n\n  set(TEST_LIB\n    ${LIB}\n\n    bf_blenloader_test_util\n    bf_io_stl\n  )\n\n  blender_add_test_suite_lib(io_stl \"${TEST_SRC}\" \"${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenGL Texture Function Declarations\nDESCRIPTION: Function declarations for texture coordinate generation and environment settings including glTexEnv, glTexGen, glTexImage1D, glTexImage2D and glTexParameter.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\ndef glTexEnv(target, pname, param):\n    \"\"\"Set texture environment parameters\"\"\"\n    pass\n\ndef glTexGen(coord, pname, param):\n    \"\"\"Control the generation of texture coordinates\"\"\"\n    pass\n\ndef glTexImage1D(target, level, internalformat, width, border, format, type, pixels):\n    \"\"\"Specify a one-dimensional texture image\"\"\"\n    pass\n\ndef glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels):\n    \"\"\"Specify a two-dimensional texture image\"\"\"\n    pass\n\ndef glTexParameter(target, pname, param):\n    \"\"\"Set texture parameters\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Libmv Test Executables in CMake\nDESCRIPTION: This snippet demonstrates the addition of multiple test executables for Libmv components using the blender_add_test_executable function. It includes tests for resection, brute force region tracking, KLT region tracking, pyramid region tracking, and parallel processing.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libmv/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_test_executable(\"libmv_resect\" \"./libmv/simple_pipeline/resect_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\nblender_add_test_executable(\"libmv_brute_region_tracker\" \"./libmv/tracking/brute_region_tracker_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\nblender_add_test_executable(\"libmv_klt_region_tracker\" \"./libmv/tracking/klt_region_tracker_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\nblender_add_test_executable(\"libmv_pyramid_region_tracker\" \"./libmv/tracking/pyramid_region_tracker_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\nblender_add_test_executable(\"libmv_parallel_for\" \"./libmv/threading/parallel_for_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: HIP SDK Version Handling\nDESCRIPTION: This snippet finds the HIP package and conditionally defines a compilation definition based on the HIP version. If the major version is 5, it defines WITH_HIP_SDK_5.\nSOURCE: https://github.com/blender/blender/blob/main/extern/hipew/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(HIP 5.5.0)\nif(HIP_VERSION_MAJOR EQUAL 5)\n  target_compile_definitions(extern_hipew PUBLIC WITH_HIP_SDK_5)\nendif()\n```\n\n----------------------------------------\n\nTITLE: macOS-Specific Test Library Configuration in CMake\nDESCRIPTION: Sets up macOS-specific force-load linking options for test libraries.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/runner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(APPLE)\n  foreach(_lib ${_test_libs})\n    target_link_libraries(blender_test PRIVATE \"-Wl,-force_load\" ${_lib})\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequencer Render Tests in CMake\nDESCRIPTION: Sets up sequencer render tests for effects, filters, transformations, blend modes, and FFMPEG integration.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(render_tests\n    effects\n    filter\n    transform\n    blend_modes_byte\n    blend_modes_float\n    ffmpeg\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Compiler Flags for USD\nDESCRIPTION: Handles Windows-specific compiler flag issues, including removing the unreferenced formal parameter warning and special handling for ARM64 architecture by disabling the new preprocessor and SSE2NEON.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  # Some USD library headers trigger the \"unreferenced formal parameter\"\n  # warning alert.\n  # Silence them by restore warn C4100 back to w4\n  remove_cc_flag(\"/w34100\")\n  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n    # USD currently does not support the new preprocessor,\n    # so we remove it here and disable sse2neon\n    remove_cc_flag(\"/Zc:preprocessor\")\n    add_definitions(-DDISABLE_SSE2NEON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for WebP Support in CMake\nDESCRIPTION: This CMake code snippet adds WebP support to the IMBuf library if the WITH_IMAGE_WEBP option is enabled, including necessary source files, include directories, libraries, and definitions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_WEBP)\n  list(APPEND SRC\n    intern/format_webp.cc\n  )\n  list(APPEND INC_SYS\n    ${WEBP_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${WEBP_LIBRARIES}\n  )\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Python Extensions\nDESCRIPTION: Sets up library dependencies including Python libraries and internal Blender libraries\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for View3D Editor in CMake\nDESCRIPTION: Specifies internal and external library dependencies required by the View3D editor component, using the PRIVATE and PUBLIC visibility modifiers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_curves\n  bf_editor_lattice\n  bf_editor_mesh\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Translation\nDESCRIPTION: Defines public include directories for the translation module build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Blender Map Performance Test\nDESCRIPTION: Sets up CMake variables for include directories, system includes, library dependencies, and source files needed to build the BLI_map performance test executable. Dependencies include core Blender libraries like blenlib, DNA, guarded allocation, and atomic operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/tests/performance/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n)\n\nset(INC_SYS\n)\n\nset(LIB\n  PRIVATE bf_blenlib\n  PRIVATE bf::dna\n  PRIVATE PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::atomic\n)\n\nset(SRC\n  BLI_map_performance_test.cc\n)\n\nblender_add_test_performance_executable(BLI_map_performance \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Address Sanitizer Settings for Cycles in CMake\nDESCRIPTION: Sets up compiler-specific flags for Address Sanitizer (ASAN) when enabled, handling different cases for GCC and Clang compilers, particularly addressing issues with RTTI and sanitizer options.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_COMPILER_ASAN)\n  if(CMAKE_COMPILER_IS_GNUCC AND (NOT WITH_CYCLES_KERNEL_ASAN))\n    # GCC hangs compiling the big kernel files with ASAN and release, so disable by default.\n    string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -fno-sanitize=all\")\n    string(APPEND CMAKE_CXX_FLAGS_DEBUG \" -fno-sanitize=vptr\")\n  elseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    # With OSL, Cycles disables RTTI in some modules, which then breaks at linking\n    # when trying to use `vptr` sanitizer (included into 'undefined' general option).\n    string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -fno-sanitize=vptr\")\n    string(APPEND CMAKE_CXX_FLAGS_DEBUG \" -fno-sanitize=vptr\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender IO Editor\nDESCRIPTION: Lists all source files (.cc) and header files (.hh) that comprise the IO editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/io/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  io_alembic.cc\n  io_cache.cc\n  io_collada.cc\n  io_drop_import_file.cc\n  io_fbx_ops.cc\n  io_grease_pencil.cc\n  io_obj.cc\n  io_ops.cc\n  io_ply_ops.cc\n  io_stl_ops.cc\n  io_usd.cc\n  io_utils.cc\n\n  io_alembic.hh\n  io_cache.hh\n  io_collada.hh\n  io_drop_import_file.hh\n  io_fbx_ops.hh\n  io_grease_pencil.hh\n  io_obj.hh\n  io_ops.hh\n  io_ply_ops.hh\n  io_stl_ops.hh\n  io_usd.hh\n  io_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Feature Definitions\nDESCRIPTION: Sets up conditional compilation flags for various optional features including OpenEXR, OpenSubdiv, GMP, and OpenVDB support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Warning Flags\nDESCRIPTION: This snippet sets the C++ warning flags based on the compiler being used. It uses environment variables to set compiler flags. For GCC it enables numerous warnings, and for MSVC it disables some specific warnings.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nIF(DEFINED ENV{LEMON_CXX_WARNING})\n  SET(CXX_WARNING $ENV{LEMON_CXX_WARNING})\nELSE()\n  IF(CMAKE_COMPILER_IS_GNUCXX)\n    SET(CXX_WARNING \"-Wall -W -Wunused -Wformat=2 -Wctor-dtor-privacy -Wnon-virtual-dtor -Wno-char-subscripts -Wwrite-strings -Wno-char-subscripts -Wreturn-type -Wcast-qual -Wcast-align -Wsign-promo -Woverloaded-virtual -fno-strict-aliasing -Wold-style-cast -Wno-unknown-pragmas\")\n    SET(CMAKE_CXX_FLAGS_DEBUG CACHE STRING \"-ggdb\")\n    SET(CMAKE_C_FLAGS_DEBUG CACHE STRING \"-ggdb\")\n  ELSEIF(MSVC)\n    # This part is unnecessary 'casue the same is set by the lemon/core.h.\n    # Still keep it as an example.\n    SET(CXX_WARNING \"/wd4250 /wd4355 /wd4503 /wd4800 /wd4996\")\n    # Suppressed warnings:\n    # C4250: 'class1' : inherits 'class2::member' via dominance\n    # C4355: 'this' : used in base member initializer list\n    # C4503: 'function' : decorated name length exceeded, name was truncated\n    # C4800: 'type' : forcing value to bool 'true' or 'false'\n    #        (performance warning)\n    # C4996: 'function': was declared deprecated\n  ELSE()\n    SET(CXX_WARNING \"-Wall\")\n  ENDIF()\nENDIF()\nSET(LEMON_CXX_WARNING_FLAGS ${CXX_WARNING} CACHE STRING \"LEMON warning flags.\")\n```\n\n----------------------------------------\n\nTITLE: Adding STL Module Library to Blender Build with CMake\nDESCRIPTION: Creates the STL module library using Blender's custom CMake function. This adds the library to the build system with all the previously defined source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/stl/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_stl \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: Specifies private library dependencies for guarded allocation and atomic operations.\nSOURCE: https://github.com/blender/blender/blob/main/intern/clog/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::atomic\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenEXR Configuration\nDESCRIPTION: Adds OpenEXR-specific configuration when WITH_IMAGE_OPENEXR is enabled. This includes adding OpenEXR include directories, libraries, and defining appropriate compiler flags, with special handling for Windows builds.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/openexr/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND INC_SYS\n    ${OPENEXR_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENEXR_LIBRARIES}\n  )\n  add_definitions(-DWITH_IMAGE_OPENEXR)\n  if(WIN32)\n    if(EXISTS ${LIBDIR}/imath/bin/imath.dll)\n      add_definitions(-DIMATH_DLL)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include and Source Directories in CMake\nDESCRIPTION: This script configures the include directories and source files for the Draco compression library in a CMake build system environment. It sets up paths to all the required headers and source files, categorized under animation, attributes, compression, and other related modules necessary for building the project. The script requires a CMake environment and assumes the presence of listed files in the specified directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/draco/draco/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nremove_strict_flags()\n\nset(INC\n  src\n)\n\nset(SRC\n\n  src/draco/animation/keyframe_animation.cc\n  src/draco/animation/keyframe_animation.h\n  src/draco/animation/keyframe_animation_decoder.cc\n  src/draco/animation/keyframe_animation_decoder.h\n  src/draco/animation/keyframe_animation_encoder.cc\n  src/draco/animation/keyframe_animation_encoder.h\n  src/draco/attributes/attribute_octahedron_transform.cc\n  src/draco/attributes/attribute_octahedron_transform.h\n  src/draco/attributes/attribute_quantization_transform.cc\n  src/draco/attributes/attribute_quantization_transform.h\n  src/draco/attributes/attribute_transform.cc\n  src/draco/attributes/attribute_transform.h\n  src/draco/attributes/attribute_transform_data.h\n  src/draco/attributes/attribute_transform_type.h\n  src/draco/attributes/geometry_attribute.cc\n  src/draco/attributes/geometry_attribute.h\n  src/draco/attributes/geometry_indices.h\n  src/draco/attributes/point_attribute.cc\n  src/draco/attributes/point_attribute.h\n  src/draco/compression/attributes/attributes_decoder.cc\n  src/draco/compression/attributes/attributes_decoder.h\n  src/draco/compression/attributes/attributes_decoder_interface.h\n  src/draco/compression/attributes/attributes_encoder.cc\n  src/draco/compression/attributes/attributes_encoder.h\n  src/draco/compression/attributes/kd_tree_attributes_decoder.cc\n  src/draco/compression/attributes/kd_tree_attributes_decoder.h\n  src/draco/compression/attributes/kd_tree_attributes_encoder.cc\n  src/draco/compression/attributes/kd_tree_attributes_encoder.h\n  src/draco/compression/attributes/kd_tree_attributes_shared.h\n  src/draco/compression/attributes/linear_sequencer.h\n  src/draco/compression/attributes/mesh_attribute_indices_encoding_data.h\n  src/draco/compression/attributes/normal_compression_utils.h\n  src/draco/compression/attributes/point_d_vector.h\n  src/draco/compression/attributes/points_sequencer.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_shared.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_data.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_area.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_base.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_multi_parallelogram_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_multi_parallelogram_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_shared.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_predictor.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoder_factory.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoder_interface.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_delta_decoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_delta_encoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder_factory.cc\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder_factory.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder_interface.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_factory.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_interface.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_transform_base.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_transform_base.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_wrap_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_wrap_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_wrap_transform_base.h\n  src/draco/compression/attributes/sequential_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_attribute_decoder.h\n  src/draco/compression/attributes/sequential_attribute_decoders_controller.cc\n  src/draco/compression/attributes/sequential_attribute_decoders_controller.h\n  src/draco/compression/attributes/sequential_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_attribute_encoder.h\n  src/draco/compression/attributes/sequential_attribute_encoders_controller.cc\n  src/draco/compression/attributes/sequential_attribute_encoders_controller.h\n  src/draco/compression/attributes/sequential_integer_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_integer_attribute_decoder.h\n  src/draco/compression/attributes/sequential_integer_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_integer_attribute_encoder.h\n  src/draco/compression/attributes/sequential_normal_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_normal_attribute_decoder.h\n  src/draco/compression/attributes/sequential_normal_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_normal_attribute_encoder.h\n  src/draco/compression/attributes/sequential_quantization_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_quantization_attribute_decoder.h\n  src/draco/compression/attributes/sequential_quantization_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_quantization_attribute_encoder.h\n  src/draco/compression/bit_coders/adaptive_rans_bit_coding_shared.h\n  src/draco/compression/bit_coders/adaptive_rans_bit_decoder.cc\n  src/draco/compression/bit_coders/adaptive_rans_bit_decoder.h\n  src/draco/compression/bit_coders/adaptive_rans_bit_encoder.cc\n  src/draco/compression/bit_coders/adaptive_rans_bit_encoder.h\n  src/draco/compression/bit_coders/direct_bit_decoder.cc\n  src/draco/compression/bit_coders/direct_bit_decoder.h\n  src/draco/compression/bit_coders/direct_bit_encoder.cc\n  src/draco/compression/bit_coders/direct_bit_encoder.h\n  src/draco/compression/bit_coders/folded_integer_bit_decoder.h\n  src/draco/compression/bit_coders/folded_integer_bit_encoder.h\n  src/draco/compression/bit_coders/rans_bit_decoder.cc\n  src/draco/compression/bit_coders/rans_bit_decoder.h\n  src/draco/compression/bit_coders/rans_bit_encoder.cc\n  src/draco/compression/bit_coders/rans_bit_encoder.h\n  src/draco/compression/bit_coders/symbol_bit_decoder.cc\n  src/draco/compression/bit_coders/symbol_bit_decoder.h\n  src/draco/compression/bit_coders/symbol_bit_encoder.cc\n  src/draco/compression/bit_coders/symbol_bit_encoder.h\n  src/draco/compression/config/compression_shared.h\n  src/draco/compression/config/decoder_options.h\n  src/draco/compression/config/draco_options.h\n  src/draco/compression/config/encoder_options.h\n  src/draco/compression/config/encoding_features.h\n  src/draco/compression/decode.cc\n  src/draco/compression/decode.h\n  src/draco/compression/encode.cc\n  src/draco/compression/encode.h\n  src/draco/compression/encode_base.h\n  src/draco/compression/entropy/ans.h\n  src/draco/compression/entropy/rans_symbol_coding.h\n  src/draco/compression/entropy/rans_symbol_decoder.h\n  src/draco/compression/entropy/rans_symbol_encoder.h\n  src/draco/compression/entropy/shannon_entropy.cc\n  src/draco/compression/entropy/shannon_entropy.h\n  src/draco/compression/entropy/symbol_decoding.cc\n  src/draco/compression/entropy/symbol_decoding.h\n  src/draco/compression/entropy/symbol_encoding.cc\n  src/draco/compression/entropy/symbol_encoding.h\n  src/draco/compression/expert_encode.cc\n  src/draco/compression/expert_encode.h\n  src/draco/compression/mesh/mesh_decoder.cc\n  src/draco/compression/mesh/mesh_decoder.h\n  src/draco/compression/mesh/mesh_edgebreaker_decoder.cc\n  src/draco/compression/mesh/mesh_edgebreaker_decoder.h\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Hydra Render Engine in CMake\nDESCRIPTION: Defines include directories for the Blender Hydra render engine, including both internal Blender directories and system includes for external dependencies like Python, USD, and Boost.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/hydra/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../../../../intern/guardedalloc\n  ../../blenlib\n  ../../makesdna\n  ../../makesrna\n  ../../io/usd\n  ../../gpu/intern\n  ../../python/intern\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n  ..\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n  ${Epoxy_INCLUDE_DIRS}\n  ${USD_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n  ${TBB_INCLUDE_DIR}\n  ${GFLAGS_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Compiler Definitions for USD and Boost in CMake\nDESCRIPTION: Sets up compiler definitions for Unix, Windows, and Clang environments to handle USD and Boost libraries. It addresses specific issues like deprecated headers and ABI compatibility.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/hydra/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  add_definitions(-D_GLIBCXX_PERMIT_BACKWARD_HASH)\nendif()\nif(WIN32)\n  add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -DBOOST_DEBUG_PYTHON)\nendif()\nadd_definitions(-DBOOST_ALL_NO_LIB)\n\nif(UNIX AND NOT APPLE)\n  if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    if(DEFINED LIBDIR)\n      add_definitions(-DARCH_HAS_GNU_STL_EXTENSIONS)\n    endif()\n  endif()\nendif()\n\nadd_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n\nif(WIN32)\n  remove_cc_flag(\"/w34100\")\n  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n    remove_cc_flag(\"/Zc:preprocessor\")\n    add_definitions(-DDISABLE_SSE2NEON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies all required library dependencies for the curve editor module, including core Blender libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curve/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::curve_fit_nd\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender IO Common Library in CMake\nDESCRIPTION: Lists all source and header files to be included in the Blender IO common library compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/abstract_hierarchy_iterator.cc\n  intern/dupli_parent_finder.cc\n  intern/dupli_persistent_id.cc\n  intern/object_identifier.cc\n  intern/orientation.cc\n  intern/path_util.cc\n  intern/string_utils.cc\n  intern/subdiv_disabler.cc\n\n  IO_abstract_hierarchy_iterator.h\n  IO_dupli_persistent_id.hh\n  IO_orientation.hh\n  IO_path_util.hh\n  IO_path_util_types.hh\n  IO_string_utils.hh\n  IO_subdiv_disabler.hh\n  IO_types.hh\n  intern/dupli_parent_finder.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Outliner Library\nDESCRIPTION: Commands to build the outliner space editor library and establish RNA dependencies using CMake functions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_outliner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_outliner \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_outliner bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Installing USD Libraries and Plugins in CMake\nDESCRIPTION: Configures installation of USD libraries and plugins based on platform conditions and build configuration. Handles different paths for Windows shared libraries vs other platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif((DEFINED LIBDIR) AND TARGETDIR_LIB)\n  if(WITH_USD)\n    if(WIN32 AND\n        (\n          EXISTS ${LIBDIR}/usd/lib/usd_usd_ms.dll OR  # USD 22.03\n          EXISTS ${LIBDIR}/usd/lib/usd_ms.dll         # USD 22.11\n        )\n      )\n      install(DIRECTORY\n        ${USD_LIBRARY_DIR}/usd\n        DESTINATION ${TARGETDIR_LIB}\n      )\n```\n\n----------------------------------------\n\nTITLE: Setting Build Variables for Library\nDESCRIPTION: This snippet initializes variables for compiler settings, source files, and include directories to prepare for building the BinReloc library within the Blender project. It sets the include directories for header files and lists the source files required for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/binreloc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  include\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  binreloc.c\n\n  include/binreloc.h\n)\n\nset(LIB\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Sculpt Paint Module\nDESCRIPTION: Lists all source files (.cc) and header files (.hh) that comprise the sculpt paint module, including brushes, grease pencil, and general paint operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/sculpt_paint/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  brush_asset_ops.cc\n  curves_sculpt_add.cc\n  # ... [truncated for brevity]\n  brushes/brushes.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Including OpenColorIO and Dependencies in CMake\nDESCRIPTION: Includes OpenColorIO and its dependencies for color management. These libraries enable Blender to work with different color spaces and provide accurate color representation across different displays and workflows.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# OpenColorIO and dependencies.\ninclude(cmake/expat.cmake)\ninclude(cmake/pystring.cmake)\ninclude(cmake/yamlcpp.cmake)\ninclude(cmake/minizipng.cmake)\ninclude(cmake/opencolorio.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Linux-Specific Graphics and Wayland Libraries in CMake\nDESCRIPTION: Conditionally includes Linux-specific graphics libraries and Wayland display server protocol support. These libraries enable Blender to work with the Linux graphics stack and modern display servers.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  include(cmake/libglu.cmake)\n  include(cmake/mesa.cmake)\n  include(cmake/wayland_protocols.cmake)\n  # Can be removed when the build-bot upgrades to v1.20.x or newer.\n  include(cmake/wayland.cmake)\n  include(cmake/wayland_libdecor.cmake)\n  include(cmake/wayland_weston.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for bf_rna in CMake\nDESCRIPTION: Defines the list of source files to be compiled for the bf_rna library. It includes core RNA access files, generated sources, and internal header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  rna_access.cc\n  rna_access_compare_override.cc\n  rna_path.cc\n  ${GENSRC}\n\n  ${SRC_RNA_INC}\n  rna_access_internal.hh\n  rna_curves_utils.hh\n  rna_internal.hh\n  rna_internal_types.hh\n  rna_mesh_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Files\nDESCRIPTION: This snippet sets the library files (LIB) for the HIPEW library, currently empty.\nSOURCE: https://github.com/blender/blender/blob/main/extern/hipew/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Imath Include Directories for Matrix Operations\nDESCRIPTION: Adds Imath include directories when available, which are needed for matrix operations in OpenImageIO when SSE support is not available.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# OpenImageIO headers include `Imath` headers when there is no SSE support for\n# matrix operations. This depends on the specific architecture and compiler\n# flags, most reliable is to always include the `Imath` headers if we have them.\nif(DEFINED IMATH_INCLUDE_DIRS)\n  list(APPEND INC_SYS\n    ${IMATH_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring JACK Plugin in CMake\nDESCRIPTION: Sets up compilation and linking for the JACK plugin if enabled. Includes necessary directories, defines symbols, and configures installation. Supports dynamic loading of JACK libraries.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_JACK AND PLUGIN_JACK)\n\tadd_definitions(-DJACK_PLUGIN)\n\tinclude_directories(${INCLUDE} ${JACK_INCLUDE_DIRS})\n\tadd_library(audjack SHARED ${JACK_SRC} ${JACK_HDR} ${HDR})\n\tif(DYNLOAD_JACK)\n\t\ttarget_link_libraries(audjack audaspace)\n\telse()\n\t\ttarget_link_libraries(audjack audaspace ${JACK_LIBRARIES})\n\tendif()\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audjack PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\tinstall(TARGETS audjack DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TBB Support for Blender Functions Library in CMake\nDESCRIPTION: Adds a compiler definition for Windows when building with TBB to prevent macro conflicts.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/functions/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Cineon/DPX Image Library in CMake\nDESCRIPTION: Defines the include directory paths for the Cineon/DPX image format library. It includes the current directory and parent directories for access to related headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/cineon/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Support for Animation Editor in CMake\nDESCRIPTION: Adds a compiler definition for Python support if it's enabled in the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/animation/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python support for Audaspace in CMake\nDESCRIPTION: Adds Python-specific include directories, source files, and libraries when Python and NumPy support are enabled. Includes adding the WITH_PYTHON definition for conditional compilation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/audaspace/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON AND WITH_PYTHON_NUMPY)\n  list(APPEND INC_SYS\n    ${PYTHON_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/AUD_PyInit.cpp\n    intern/AUD_PyInit.h\n  )\n  list(APPEND LIB\n    ${PYTHON_LINKFLAGS}\n    ${PYTHON_LIBRARIES}\n  )\n  if(NOT WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      audaspace-py\n    )\n  endif()\n\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Cycles Hydra\nDESCRIPTION: Sets compiler-specific options for the Cycles Hydra library. It disables specific warnings for MSVC and GCC compilers to address issues with USD and Cycles code integration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(cycles_hydra\n  PRIVATE\n  $<$<CXX_COMPILER_ID:MSVC>:/wd4003 /wd4244 /wd4506>\n  $<$<CXX_COMPILER_ID:GNU>:-Wno-float-conversion -Wno-double-promotion -Wno-deprecated>\n)\n```\n\n----------------------------------------\n\nTITLE: Compressing HDRI Images with OIIO Tools in Bash\nDESCRIPTION: This command uses oiiotool to process HDRI images. It extracts RGB channels, sets the data type to float, applies DWAB compression with a quality setting of 300, clamps values between 0 and 32000, and saves the output as an EXR file.\nSOURCE: https://github.com/blender/blender/blob/main/release/datafiles/studiolights/world/license.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\noiiotool input.exr --ch R,G,B -d float --compression dwab:300 --clamp:min=0.0:max=32000.0 -o output.exr\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Conversion Library Build in CMake\nDESCRIPTION: Sets up the build configuration for Blender's URI conversion library, including include paths, source files, and dependencies. The configuration uses Blender's custom CMake function to add the library to the build system.\nSOURCE: https://github.com/blender/blender/blob/main/intern/uriconvert/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  uri_convert.cc\n\n  uri_convert.hh\n)\n\nset(LIB\n)\n\nblender_add_lib(bf_intern_uriconvert \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies the required libraries for building the geometry nodes system, with both private and public dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  bf_nodes\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Handling CPLEX Dependency\nDESCRIPTION: This block handles the CPLEX dependency. It adds `cplex.cc` to the source files and includes the CPLEX include directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LEMON_HAVE_CPLEX)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} cplex.cc)\n  INCLUDE_DIRECTORIES(${ILOG_INCLUDE_DIRS})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for gMock Library\nDESCRIPTION: This snippet defines a variable SRC_HEADERS containing the header files associated with the gMock library. These headers provide the interface for using the gMock functionalities.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  include/gmock/gmock.h\n  include/gmock/gmock-actions.h\n  include/gmock/gmock-cardinalities.h\n  include/gmock/gmock-function-mocker.h\n  include/gmock/gmock-matchers.h\n  include/gmock/gmock-more-actions.h\n  include/gmock/gmock-more-matchers.h\n  include/gmock/gmock-nice-strict.h\n  include/gmock/gmock-spec-builders.h\n  include/gmock/internal/custom/gmock-generated-actions.h\n  include/gmock/internal/custom/gmock-matchers.h\n  include/gmock/internal/custom/gmock-port.h\n  include/gmock/internal/gmock-internal-utils.h\n  include/gmock/internal/gmock-port.h\n  include/gmock/internal/gmock-pp.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Aliasing the Logging Library\nDESCRIPTION: Adds the logging library to the build system and creates an alias target for modern CMake usage.\nSOURCE: https://github.com/blender/blender/blob/main/intern/clog/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_clog \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::clog ALIAS bf_intern_clog)\n```\n\n----------------------------------------\n\nTITLE: Building OpenImageIO Integration Library for Blender\nDESCRIPTION: Calls the Blender-specific CMake function to build the OpenImageIO integration library with all the configured sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_imbuf_openimageio \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CUEW)\nDESCRIPTION: This snippet sets the include directories required for compiling the CUEW library. It includes the current directory (.) and the 'include' subdirectory, where the CUEW header files are located.\nSOURCE: https://github.com/blender/blender/blob/main/extern/cuew/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  include\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies private library dependencies required for the lattice editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/lattice/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Building PLY IO Library and Test Suite\nDESCRIPTION: Creates the PLY IO library target and configures optional test suite compilation with Google Test framework integration\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/ply/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_ply \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/io_ply_exporter_test.cc\n    tests/io_ply_importer_test.cc\n  )\n  set(TEST_INC\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n  set(TEST_LIB\n    bf_io_ply\n    bf_blenloader_test_util\n  )\n  blender_add_test_suite_lib(io_ply \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting External Library Dependencies for Cycles Util in CMake\nDESCRIPTION: Specifies the external libraries required by the Cycles Util library, including Intel TBB for parallelism and ZSTD for compression.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/util/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  ${TBB_LIBRARIES}\n  ${ZSTD_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths for QuadriFlow Build\nDESCRIPTION: Defines include directories for the QuadriFlow build, including local and external dependency paths.\nSOURCE: https://github.com/blender/blender/blob/main/intern/quadriflow/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ../../extern/quadriflow/src\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Clip Editor in CMake\nDESCRIPTION: Ensures that the RNA prototypes are generated before compiling the clip editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_clip/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_space_clip bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Blender Launcher Installation\nDESCRIPTION: Configures installation targets for Blender executable and launcher on Windows platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND NOT WITH_PYTHON_MODULE)\n  set(BLENDER_BIN \"blender.exe\")\n  install(\n    TARGETS blender blender-launcher\n    COMPONENT Blender\n    DESTINATION \".\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding the Undo System Library to Blender Build\nDESCRIPTION: Calls a custom CMake function to add the undo system as a library to the Blender build system, using the previously defined source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/undo/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_undo \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding External LZMA Library in CMake\nDESCRIPTION: This snippet invokes the 'blender_add_lib' command to create an external library target named 'extern_lzma'. It utilizes predefined source files and headers, linking them with the specified include directories and system libraries for integration into the Blender project.\nSOURCE: https://github.com/blender/blender/blob/main/extern/lzma/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_lzma \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA and OptiX Settings in CMake\nDESCRIPTION: Sets up CUDA and OptiX-related definitions when these devices are enabled. It defines paths for NVCC executable and OptiX root directory.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/device/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_OPTIX OR WITH_CYCLES_DEVICE_CUDA)\n  if(NOT WITH_CUDA_DYNLOAD)\n    add_definitions(-DCYCLES_CUDA_NVCC_EXECUTABLE=\"${CUDA_NVCC_EXECUTABLE}\")\n  endif()\n\n  add_definitions(-DCYCLES_RUNTIME_OPTIX_ROOT_DIR=\"${CYCLES_RUNTIME_OPTIX_ROOT_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining SYCL Compiler Flags for oneAPI in CMake\nDESCRIPTION: Sets up the base compiler flags for SYCL compilation, including paths, optimization levels, and various SYCL-specific options like device code splitting and offload compression. These flags are used to compile the oneAPI kernels.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n  # SYCL_CPP_FLAGS is a variable that the user can set to pass extra compiler options\n  set(sycl_compiler_flags\n    ${CMAKE_CURRENT_SOURCE_DIR}/${SRC_KERNEL_DEVICE_ONEAPI}\n    -fsycl\n    -fsycl-unnamed-lambda\n    -fdelayed-template-parsing\n    -fsycl-device-code-split=per_kernel\n    -fsycl-max-parallel-link-jobs=${SYCL_OFFLINE_COMPILER_PARALLEL_JOBS}\n    --offload-compress\n    --offload-compression-level=19\n    -shared\n    -DWITH_ONEAPI\n    -O2\n    -ffast-math\n    -D__KERNEL_LOCAL_ATOMIC_SORT__\n    -o\"${cycles_kernel_oneapi_lib}\"\n    -I\"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n    ${SYCL_CPP_FLAGS}\n  )\n\n  if(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n    list(APPEND sycl_compiler_flags -DWITH_ONEAPI_SYCL_HOST_TASK)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Including HTML Documentation and Security Check Tools in CMake\nDESCRIPTION: Includes modules for generating HTML dependency documentation and checking for CVE (Common Vulnerabilities and Exposures) security issues. These are kept last in the build process to generate reports after all dependencies are processed.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# Keep these last\ninclude(cmake/deps_html.cmake)\ninclude(cmake/cve_check.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender IO Editor\nDESCRIPTION: Defines include paths for various IO modules including Alembic, Collada, FBX, and other formats.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/io/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../io/alembic\n  ../../io/collada\n  ../../io/common\n  ../../io/fbx\n  ../../io/grease_pencil\n  ../../io/ply\n  ../../io/stl\n  ../../io/usd\n  ../../io/wavefront_obj\n  ../../makesrna\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Optional Features in Blender Node Editor\nDESCRIPTION: Sets up conditional compilation flags and includes additional dependencies for optional features like OpenImageDenoise, OpenSubdiv, and OpenVDB.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_node/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes `Windows.h` which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions\nDESCRIPTION: Adds preprocessor definition to indicate the presence of sys/time.h header during compilation\nSOURCE: https://github.com/blender/blender/blob/main/extern/xdnd/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\n  -DHAVE_SYS_TIME_H\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Maintainer Configuration\nDESCRIPTION: This snippet appends the Maintainer configuration type to the CMAKE_CONFIGURATION_TYPES variable if it exists. It then removes duplicates and sets the variable with the FORCE option to ensure it is always set.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nIF(CMAKE_CONFIGURATION_TYPES)\n  LIST(APPEND CMAKE_CONFIGURATION_TYPES Maintainer)\n  LIST(REMOVE_DUPLICATES CMAKE_CONFIGURATION_TYPES)\n  SET(CMAKE_CONFIGURATION_TYPES \"${CMAKE_CONFIGURATION_TYPES}\" CACHE STRING\n      \"Add the configurations that we need\"\n      FORCE)\n endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Freestyle Support in Blender Render Module\nDESCRIPTION: Adds Freestyle support to the Blender render module if WITH_FREESTYLE is defined. It adds the necessary include directory, library, and defines a preprocessor macro.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  list(APPEND INC\n    ../freestyle\n  )\n  list(APPEND LIB\n    bf_freestyle\n  )\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Intel Compiler Warnings\nDESCRIPTION: This code disables numerous specific warnings for both C and C++ in the Intel compiler by appending warning disable flags that are known to produce false positives.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n# Disable numbered, false positives.\nstring(APPEND C_WARNINGS \" -wd188,186,144,913,556,858,597,177,1292,167,279,592,94,2722,3199\")\nstring(APPEND CXX_WARNINGS \" -wd188,186,144,913,556,858,597,177,1292,167,279,592,94,2722,3199\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the required library dependencies for the translation module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Aliasing the SLIM Library Target\nDESCRIPTION: Adds the SLIM library to Blender's build system with all defined sources, includes, and dependencies, then creates an alias for it using the bf::intern::slim namespace.\nSOURCE: https://github.com/blender/blender/blob/main/intern/slim/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_slim \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::slim ALIAS bf_intern_slim)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for USD Dependencies\nDESCRIPTION: Defines system include directories for external dependencies required by the USD integration, including USD itself, Boost, TBB, and Python.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${USD_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n  ${TBB_INCLUDE_DIR}\n  ${PYTHON_INCLUDE_DIR}\n\n)\n```\n\n----------------------------------------\n\nTITLE: Generating GLSL Source List Header in CMake\nDESCRIPTION: Creates a header file containing a list of GLSL shader sources. This is used to include the shader sources in the C++ code.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n  set(GLSL_SOURCE_CONTENT \"\")\n  foreach(GLSL_FILE ${GLSL_SRC})\n    get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n    string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n    string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\n  endforeach()\n\n  set(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_osd_source_list.h\")\n  file(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\n  list(APPEND SRC ${glsl_source_list_file})\n  list(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Console Space in CMake\nDESCRIPTION: Lists the source files required for building the console space component, including C++ files and a header file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_console/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  console_draw.cc\n  console_ops.cc\n  space_console.cc\n\n  console_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Physics Double Precision\nDESCRIPTION: Enables double precision calculations for Bullet Physics to improve simulation stability with small objects.\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DBT_USE_DOUBLE_PRECISION)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Grease Pencil I/O in CMake\nDESCRIPTION: Specifies the source files to be compiled for the Grease Pencil I/O library. It includes both .cc implementation files and .hh header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/grease_pencil/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/grease_pencil_io.cc\n  intern/grease_pencil_io_import_svg.cc\n\n  grease_pencil_io.hh\n  intern/grease_pencil_io_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PugiXML Support for SVG Export in CMake\nDESCRIPTION: Conditionally adds PugiXML support for SVG export functionality. It includes additional source files, include directories, and libraries when WITH_PUGIXML is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/grease_pencil/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PUGIXML)\n  list(APPEND SRC\n    intern/grease_pencil_io_export_svg.cc\n  )\n  list(APPEND INC_SYS\n    ${PUGIXML_INCLUDE_DIR}\n  )\n  list(APPEND LIB\n    ${PUGIXML_LIBRARIES}\n  )\n  add_definitions(-DWITH_PUGIXML)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling CLP Dependency\nDESCRIPTION: This block handles the CLP dependency. It adds `clp.cc` to the source files and includes the COIN include directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LEMON_HAVE_CLP)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} clp.cc)\n  INCLUDE_DIRECTORIES(${COIN_INCLUDE_DIRS})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Including Media Libraries for Non-Windows or MSYS2 Platforms in CMake\nDESCRIPTION: Conditionally includes various media and mathematical libraries for non-Windows platforms or when using MSYS2. These libraries provide audio/video encoding/decoding capabilities and mathematical functions.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32 OR ENABLE_MSYS2)\n  include(cmake/gmp.cmake)\n  include(cmake/openjpeg.cmake)\n  if(NOT WIN32 OR BUILD_MODE STREQUAL Release)\n    include(cmake/openimagedenoise.cmake)\n    include(cmake/lame.cmake)\n    include(cmake/ogg.cmake)\n    include(cmake/vorbis.cmake)\n    include(cmake/theora.cmake)\n    include(cmake/opus.cmake)\n    include(cmake/vpx.cmake)\n    include(cmake/x264.cmake)\n    include(cmake/x265.cmake)\n    include(cmake/aom.cmake)\n    include(cmake/ffmpeg.cmake)\n    include(cmake/fftw.cmake)\n    include(cmake/flac.cmake)\n    include(cmake/sndfile.cmake)\n    if(UNIX)\n      if(NOT APPLE)\n        include(cmake/spnav.cmake)\n        include(cmake/jemalloc.cmake)\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library for Atomic Operations in CMake\nDESCRIPTION: Creates an interface library for atomic operations and sets its include directories. Also creates an alias with namespaced target name.\nSOURCE: https://github.com/blender/blender/blob/main/intern/atomic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf_intern_atomic INTERFACE)\n\ntarget_include_directories(bf_intern_atomic INTERFACE .)\nadd_library(bf::intern::atomic ALIAS bf_intern_atomic)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Alembic I/O in Blender\nDESCRIPTION: Defines the library dependencies required by the Alembic I/O module, including internal Blender components and external libraries like Alembic and OpenEXR.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/alembic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n\n  ${ALEMBIC_LIBRARIES}\n  ${OPENEXR_LIBRARIES}\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HIPEW Library\nDESCRIPTION: This snippet adds the HIPEW library using the `blender_add_lib` function, specifying the source files, include directories, and system include directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/hipew/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_hipew \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Animation Library in CMake\nDESCRIPTION: Sets up public and private include directories for the animation library, including external dependencies and generated files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/animrig/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n\n  ../editors/include\n  ../makesrna\n  ../../../extern/fmtlib/include\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSL Module for Cycles in CMake\nDESCRIPTION: Conditionally includes the Open Shading Language (OSL) module in the build process when WITH_CYCLES_OSL is enabled, adding the required libraries and subdirectories.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n# OSL module\n\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB\n    cycles_kernel_osl\n  )\n  add_subdirectory(osl)\n  add_subdirectory(osl/shaders)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Cycles OSL Kernel in CMake\nDESCRIPTION: Sets up the library dependencies for the Cycles OSL kernel, including the Cycles scene library and external dependencies like OSL, OpenImageIO, and PugiXML.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_scene\n\n  ${OSL_LIBRARIES}\n  ${OPENIMAGEIO_LIBRARIES}\n  ${PUGIXML_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Shader Include Paths\nDESCRIPTION: Defines include directories for GLSL shader compilation, including paths to core Blender GPU and shader directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Topbar Space Library to Blender Build\nDESCRIPTION: Creates the library target for the topbar space module using Blender's custom CMake function. This function combines the previously defined source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_topbar/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_topbar \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Definitions for USD on Unix/Linux Systems\nDESCRIPTION: Adds compiler definitions to suppress deprecated header warnings on Unix/Linux systems. This is specifically to address issues with the USD library including deprecated headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  add_definitions(-D_GLIBCXX_PERMIT_BACKWARD_HASH)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Compiler Warning Flags in CMake for GCC/Clang\nDESCRIPTION: This CMake snippet removes the '-Wall' compiler warning flag to avoid noisy warnings when using GCC or Clang. It requires CMake and a compatible version of GCC or Clang as a prerequisite.\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# avoid noisy warnings\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  remove_cc_flag(\n    \"-Wall\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreAudio Plugin in CMake\nDESCRIPTION: Sets up compilation and linking for the CoreAudio plugin if enabled. Includes necessary directories, defines symbols, and configures installation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COREAUDIO AND PLUGIN_COREAUDIO)\n\tadd_definitions(-DCOREAUDIO_PLUGIN)\n\tinclude_directories(${INCLUDE} ${COREAUDIO_INCLUDE_DIRS})\n\tadd_library(audcoreaudio SHARED ${COREAUDIO_SRC} ${COREAUDIO_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audcoreaudio PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\ttarget_link_libraries(audcoreaudio audaspace ${COREAUDIO_LIBRARIES})\n\tinstall(TARGETS audcoreaudio DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring COLLADA Tests in CMake\nDESCRIPTION: Defines a function for setting up COLLADA format tests and includes commented-out test examples. Tests are currently disabled as they only work on Windows.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  function(collada_test module test_name blend_file)\n    add_blender_test(\n      bf_io_collada_${module}_${test_name}\n      ${TEST_SRC_DIR}/collada/${module}/${blend_file}\n      --python ${CMAKE_CURRENT_LIST_DIR}/${module}/test_${module}_${test_name}.py --\n      --testdir ${TEST_SRC_DIR}/collada/${module}\n    )\n  endfunction()\n\n  # Tests are disabled because they only work on Windows\n  # Tests will be redone completely to work reliable\n  #\n  # collada_test(mesh simple mesh_simple.blend)\n  # collada_test(animation simple suzannes_parent_inverse.blend)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Asset Editor\nDESCRIPTION: Lists all source files (.cc) and header files (.hh) that comprise the asset editor module implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/asset/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/asset_catalog.cc\n  intern/asset_filter.cc\n  intern/asset_handle.cc\n  intern/asset_import.cc\n  intern/asset_indexer.cc\n  intern/asset_library_reference_enum.cc\n  intern/asset_library_utils.cc\n  intern/asset_list.cc\n  intern/asset_mark_clear.cc\n  intern/asset_menu_utils.cc\n  intern/asset_ops.cc\n  intern/asset_shelf.cc\n  intern/asset_shelf_asset_view.cc\n  intern/asset_shelf_catalog_selector.cc\n  intern/asset_shelf_popover.cc\n  intern/asset_shelf_regiondata.cc\n  intern/asset_shelf_settings.cc\n  intern/asset_temp_id_consumer.cc\n  intern/asset_type.cc\n  intern/asset_ui_utils.cc\n\n  ED_asset_catalog.hh\n  ED_asset_filter.hh\n  ED_asset_handle.hh\n  ED_asset_import.hh\n  ED_asset_indexer.hh\n  ED_asset_library.hh\n  ED_asset_list.hh\n  ED_asset_mark_clear.hh\n  ED_asset_shelf.hh\n  ED_asset_temp_id_consumer.hh\n  ED_asset_type.hh\n  intern/asset_library_reference.hh\n  intern/asset_shelf.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags for Blender Python Module\nDESCRIPTION: Sets various preprocessor definitions based on build options, enabling or disabling features like portable installation, Python safety, and various codecs and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/intern/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DBUILD_DATE)\nendif()\n\nif(WITH_INSTALL_PORTABLE)\n  add_definitions(-DWITH_INSTALL_PORTABLE)\nendif()\n\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\nendif()\n\n# ... (many more conditional definitions)\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Paths\nDESCRIPTION: Empty declaration of system include paths for the build configuration.\nSOURCE: https://github.com/blender/blender/blob/main/intern/clog/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Installing config.h Header\nDESCRIPTION: This command installs the configured `config.h` header file to the `include/lemon` directory, as part of the 'headers' component.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n\"INSTALL(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/config.h\n  DESTINATION include/lemon\n  COMPONENT headers\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Thumbnail Extension Build\nDESCRIPTION: Sets up the build configuration for the macOS thumbnail provider app extension, including necessary frameworks and code signing.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blendthumb/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(APPLE)\n  set(SRC_APPEX\n    src/thumbnail_provider.h\n    src/thumbnail_provider.mm\n  )\n\n  add_executable(blender-thumbnailer MACOSX_BUNDLE ${SRC} ${SRC_APPEX})\n  setup_platform_linker_flags(blender-thumbnailer)\n  setup_platform_linker_libs(blender-thumbnailer)\n  target_link_libraries(blender-thumbnailer\n    bf_blenlib\n    \"-e _NSExtensionMain\"\n    \"-framework QuickLookThumbnailing\"\n  )\n  set_target_properties(blender-thumbnailer PROPERTIES\n    INSTALL_RPATH \"@loader_path/../../../../Resources/lib\"\n    XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"\"\n  )\n  add_custom_command(\n    TARGET blender-thumbnailer POST_BUILD\n    COMMAND codesign --deep --force --sign -\n      --entitlements \"${CMAKE_SOURCE_DIR}/release/darwin/thumbnailer_entitlements.plist\"\n      --timestamp=none $<TARGET_BUNDLE_DIR:blender-thumbnailer>\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Endian Definitions Based on Platform\nDESCRIPTION: Detects the system endianness and sets the appropriate definition (__BIG_ENDIAN__ or __LITTLE_ENDIAN__), with a special case for MSVC which assumes little endian.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# set the endian define\nif(MSVC)\n  # For some reason this fails on MSVC.\n  add_definitions(-D__LITTLE_ENDIAN__)\nelse()\n  include(TestBigEndian)\n  test_big_endian(_SYSTEM_BIG_ENDIAN)\n  if(_SYSTEM_BIG_ENDIAN)\n    add_definitions(-D__BIG_ENDIAN__)\n  else()\n    add_definitions(-D__LITTLE_ENDIAN__)\n  endif()\n  unset(_SYSTEM_BIG_ENDIAN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Blender Python Extension Library\nDESCRIPTION: Final command to build the Python extension library with all configured sources and dependencies\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/generic/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_python_ext \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Wavefront OBJ Library in CMake\nDESCRIPTION: Sets up internal and system include directories needed for building the Wavefront OBJ library in Blender.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/wavefront_obj/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  exporter\n  importer\n  ../common\n  ../../bmesh/intern\n  ../../editors/include\n  ../../makesrna\n)\n\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Wayland Protocol Bindings Generation\nDESCRIPTION: Generates protocol bindings for Wayland tablet and primary selection features. Conditionally includes IME support based on WITH_INPUT_IME flag.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_protocol_bindings(\"${WAYLAND_PROTOCOLS_DIR}/stable/tablet/tablet-v2.xml\")\ngenerate_protocol_bindings(\"${WAYLAND_PROTOCOLS_DIR}/unstable/primary-selection/primary-selection-unstable-v1.xml\")\nif(WITH_INPUT_IME)\n  generate_protocol_bindings(\"${WAYLAND_PROTOCOLS_DIR}/unstable/text-input/text-input-unstable-v3.xml\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for BVH Module in CMake\nDESCRIPTION: Defines include directories for the BVH module compilation. It sets up both regular and system include paths.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Source Files for Cineon/DPX Image Library\nDESCRIPTION: Enumerates all source files (headers and implementation files) needed to build the Cineon and DPX image format support library. This includes both file format handlers and supporting utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/cineon/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  cineonlib.h\n  dpxlib.h\n  logImageCore.h\n  logmemfile.h\n\n  cineon_dpx.cc\n  cineonlib.cc\n  dpxlib.cc\n  logImageCore.cc\n  logmemfile.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Vulkan Memory Allocator Library\nDESCRIPTION: This snippet defines a CMake function to add the Vulkan Memory Allocator as a library to the Blender project build. It uses provided source, include, and library variables. The snippet is dependent on prior configuration of include directories and source files.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_vulkan_memory_allocator \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias for fmtlib in CMake\nDESCRIPTION: This snippet creates an alias for the `extern_fmtlib` library target. This allows other parts of the Blender project to refer to the library using the `bf::extern::fmtlib` alias.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf::extern::fmtlib ALIAS extern_fmtlib)\n```\n\n----------------------------------------\n\nTITLE: Configuring WASAPI for Blender Audio on Windows\nDESCRIPTION: Sets up WASAPI (Windows Audio Session API) source files and build settings for Windows platforms.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_WASAPI)\n\tset(WASAPI_SRC\n\t\tplugins/wasapi/WASAPIDevice.cpp\n\t)\n\tset(WASAPI_HDR\n\t\tplugins/wasapi/WASAPIDevice.h\n\t)\n\n\tif(NOT PLUGIN_WASAPI)\n\t\tlist(APPEND LIBRARIES ksuser)\n\t\tlist(APPEND SRC ${WASAPI_SRC})\n\t\tlist(APPEND HDR ${WASAPI_HDR})\n\t\tlist(APPEND STATIC_PLUGINS WASAPIDevice)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test for Atomic Operations in CMake\nDESCRIPTION: Sets up test configuration when Google Tests are enabled. Defines test source files, includes, and library dependencies for the atomic operations test executable.\nSOURCE: https://github.com/blender/blender/blob/main/intern/atomic/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/atomic_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    PRIVATE bf_intern_atomic\n  )\n  blender_add_test_executable(atomic \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dualcon Library to Blender Build\nDESCRIPTION: Calls the blender_add_lib function to add the Dualcon library to the Blender build system with the specified source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_dualcon \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags and Sources with CMake\nDESCRIPTION: This snippet configures compiler flags and source files for the Blender project using CMake. It conditionally adds a compiler flag to suppress cast-function-type warnings for the GNU C Compiler. It specifies include directories and source files, covering additional source files specifically for Windows. The function 'blender_add_lib' is invoked to define a library target with the specified settings.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gflags/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Too noisy for code we don\\'t maintain.\nif(CMAKE_COMPILER_IS_GNUCC)\n  add_cxx_flag(\"-Wno-cast-function-type\")\nendif()\n\nset(INC\n  src\n  src/gflags\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  src/gflags.cc\n  src/gflags_completions.cc\n  src/gflags_reporting.cc\n\n  src/gflags/config.h\n  src/gflags/gflags_completions.h\n  src/gflags/gflags_declare.h\n  src/gflags/gflags_gflags.h\n  src/gflags/gflags.h\n  src/mutex.h\n  src/util.h\n)\n\nset(LIB\n)\n\nif(WIN32)\n  list(APPEND SRC\n    src/windows_port.cc\n    src/windows_port.h\n  )\nendif()\n\nadd_definitions(${GFLAGS_DEFINES})\n\nblender_add_lib(extern_gflags \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Building Draco Library in CMake\nDESCRIPTION: This snippet sets up the inclusion of the Draco library and specifies source files for compiling a bridging module in Blender. It defines the include directories and links the necessary libraries for building the external Draco shared library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/draco/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Build Draco library.\nadd_subdirectory(draco)\n\nset(INC\n  draco/src\n)\n\n# Build Draco-Blender bridging module.\nset(SRC\n  src/common.cpp\n  src/decoder.cpp\n  src/encoder.cpp\n\n  src/common.h\n  src/decoder.h\n  src/encoder.h\n)\n\nset(LIB\n  draco\n)\n\nadd_library(extern_draco SHARED \"${SRC}\")\ntarget_include_directories(extern_draco PUBLIC \"${INC}\")\ntarget_link_libraries(extern_draco PUBLIC \"${LIB}\")\n\nblender_source_group(extern_draco \"${SRC}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GLSL Shaders in CMake\nDESCRIPTION: Defines a list of include directories for GLSL shaders, including paths for Blender's internal libraries and GPU-related headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n\n  # For grease pencil.\n  ../../gpencil\n)\n```\n\n----------------------------------------\n\nTITLE: Building Graph Editor Library\nDESCRIPTION: Creates the graph editor library target and sets up RNA generation dependency.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_graph/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_graph \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_graph bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Generating a Visual Studio Project using CMake in Shell\nDESCRIPTION: Illustrates how to use CMake from the command line to set up a Visual Studio project for Vulkan Memory Allocator on Windows. CMake must be installed. No direct inputs or outputs beyond the creation of the build system.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# By default CMake picks the newest version of Visual Studio it can use\ncmake -S .  -B build -D VMA_BUILD_SAMPLES=ON\ncmake --open build\n```\n\n----------------------------------------\n\nTITLE: Adding CUEW Library\nDESCRIPTION: This snippet uses the 'blender_add_lib' function to create a library named 'extern_cuew'. It specifies the source files, include directories, system include directories, and library dependencies that the library requires.\nSOURCE: https://github.com/blender/blender/blob/main/extern/cuew/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_cuew \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Creating XDND External Library\nDESCRIPTION: Compiles the XDND library with specified sources, include paths, and system includes\nSOURCE: https://github.com/blender/blender/blob/main/extern/xdnd/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_xdnd \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Cycles OSL Kernel in CMake\nDESCRIPTION: Lists the header files required for the Cycles OSL kernel implementation, including various closures, compatibility, and service definitions.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADER_SRC\n  closures_setup.h\n  closures_template.h\n  compat.h\n  globals.h\n  osl.h\n  services.h\n  services_shared.h\n  types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Compute Shader Source Files in CMake\nDESCRIPTION: Sets a list of GLSL compute shader source files to be compiled, including various subdiv and draw operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/intern/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_COMP\n  draw_hair_refine_comp.glsl\n  draw_command_generate_comp.glsl\n  # Failed because of mixed definition of ObjectInfos\n  # draw_resource_finalize_comp.glsl\n  draw_view_finalize_comp.glsl\n  draw_visibility_comp.glsl\n\n  subdiv_ibo_lines_comp.glsl\n  subdiv_ibo_tris_comp.glsl\n  subdiv_vbo_edge_fac_comp.glsl\n  subdiv_custom_data_interp_comp.glsl\n  subdiv_vbo_sculpt_data_comp.glsl\n  subdiv_vbo_edituv_strech_angle_comp.glsl\n  subdiv_vbo_edituv_strech_area_comp.glsl\n  subdiv_vbo_lnor_comp.glsl\n  subdiv_normals_accumulate_comp.glsl\n  subdiv_normals_finalize_comp.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Window Manager in CMake\nDESCRIPTION: Defines public and system include directories for the window manager component. It includes various internal Blender directories and the RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/windowmanager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  gizmo\n  gizmo/intern\n  ../compositor\n  ../editors/include\n  ../makesrna\n  ../../../intern/memutil\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Functions Library in CMake\nDESCRIPTION: Creates the Blender functions library target and sets up an alias for it.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/functions/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_functions \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::functions ALIAS bf_functions)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for BVH Module in CMake\nDESCRIPTION: Lists the header files associated with the BVH module, including files for various BVH-related functionalities.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  bvh.h\n  bvh2.h\n  binning.h\n  build.h\n  embree.h\n  hiprt.h\n  multi.h\n  node.h\n  optix.h\n  params.h\n  sort.h\n  split.h\n  unaligned.h\n  metal.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Requests Library in CMake\nDESCRIPTION: This snippet installs Python dependencies for the Requests library. It iterates through a list of dependencies and installs them if they exist in the specified path.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(_requests_deps \"certifi\" \"chardet\" \"charset_normalizer\" \"idna\" \"urllib3\")\nforeach(_requests_dep ${_requests_deps})\n  if(EXISTS ${PYTHON_REQUESTS_PATH}/${_requests_dep})\n    install(\n      DIRECTORY ${PYTHON_REQUESTS_PATH}/${_requests_dep}\n      DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n      PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n      PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n      PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n    )\n  endif()\nendforeach()\nif(EXISTS ${PYTHON_REQUESTS_PATH}/six.py)\n  install(\n    FILES ${PYTHON_REQUESTS_PATH}/six.py\n    DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Windows-Specific Source Files for UTF Conversion\nDESCRIPTION: Adds Windows-specific source files to the build when compiling on Windows platforms. The comment notes that although this is currently Windows-specific, it might be used on other platforms in the future.\nSOURCE: https://github.com/blender/blender/blob/main/intern/utfconv/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  list(APPEND SRC\n    utf_winfunc.cc\n    utf_winfunc.hh\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenEXR Support in CMake\nDESCRIPTION: This CMake code snippet adds OpenEXR support to the IMBuf library if the WITH_IMAGE_OPENEXR option is enabled. Otherwise, it includes a stub implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND LIB\n    bf_imbuf_openexr\n  )\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nelse()\n  list(APPEND SRC\n    intern/openexr/openexr_stub.cpp\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include and System Include Directories in CMake\nDESCRIPTION: This CMake snippet sets local and system include directories for the project. 'INC' includes project-specific directories, while 'INC_SYS' uses environment variables to include system-specific paths. This separation helps manage project dependencies effectively.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ceres/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  include\n  internal\n  config\n)\n\nset(INC_SYS\n  ${GFLAGS_INCLUDE_DIRS}\n  ${GLOG_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Blender Eigen Library\nDESCRIPTION: Defines the build configuration for Blender's Eigen mathematical library integration. Sets up include directories, source files, and links against the Eigen dependency. Creates a library target named bf_intern_eigen.\nSOURCE: https://github.com/blender/blender/blob/main/intern/eigen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  eigen_capi.h\n\n  intern/eigenvalues.cc\n  intern/linear_solver.cc\n  intern/matrix.cc\n  intern/svd.cc\n\n  intern/eigenvalues.h\n  intern/linear_solver.h\n  intern/matrix.h\n  intern/svd.h\n)\n\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n\nblender_add_lib(bf_intern_eigen \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Makefile Generator Workaround Definition\nDESCRIPTION: Adds a special definition for Unix Makefile generator to handle dependency issues in makesrna.cc, forcing file regeneration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/intern/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_GENERATOR MATCHES \".*Unix Makefiles\")\n  add_definitions(-DUSE_MAKEFILE_WORKAROUND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Mantaflow\nDESCRIPTION: Sets up all library dependencies for the Mantaflow module, including Blender internal libraries, third-party dependencies, and external libraries like Python and zlib.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::dependencies::optional::tbb\n  extern_mantaflow\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  ${ZLIB_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: SPDX Copyright Declaration for Blender\nDESCRIPTION: A standard SPDX copyright text header that specifies Blender Authors as the copyright holders from 2006. This header is likely included at the top of source files in the Blender project to maintain consistent copyright attribution.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Paths\nDESCRIPTION: Declares system-level include directories (empty in this case).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/lattice/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Blender Scene Editor in CMake\nDESCRIPTION: Lists the source files to be compiled for the Blender scene editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/scene/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  scene_edit.cc\n  scene_fps.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Editor Library in CMake\nDESCRIPTION: Creates the animation editor library target with the specified source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/animation/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_animation \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support in Cycles Hydra\nDESCRIPTION: Conditionally adds OpenVDB support to the Cycles Hydra render delegate when WITH_OPENVDB is enabled. It sets the necessary definitions and includes the OpenVDB directories.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Movie Module\nDESCRIPTION: Lists all the source files that make up the movie module. Includes header files for the public API and implementation files in the intern directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  MOV_enums.hh\n  MOV_read.hh\n  MOV_util.hh\n  MOV_write.hh\n\n  intern/ffmpeg_compat.h\n  intern/movie_proxy_indexer.cc\n  intern/movie_proxy_indexer.hh\n  intern/movie_read.cc\n  intern/movie_read.hh\n  intern/movie_util.cc\n  intern/movie_util.hh\n  intern/movie_write.cc\n  intern/movie_write.hh\n  intern/movie_write_audio.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining source files for Audaspace integration in CMake\nDESCRIPTION: Specifies the source files required for the Blender Audaspace integration, which includes AUD_Set.cpp and its header file.\nSOURCE: https://github.com/blender/blender/blob/main/intern/audaspace/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/AUD_Set.cpp\n  intern/AUD_Set.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding libdecor Support for Wayland in CMake\nDESCRIPTION: Adds libdecor-related include directories and source files when Wayland libdecor support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GHOST_WAYLAND_LIBDECOR)\n  list(APPEND INC_SYS\n    ${libdecor_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/wayland_dynload_libdecor.c\n\n    extern/wayland_dynload_libdecor.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Macro Definitions\nDESCRIPTION: Adds platform-specific macro definitions for Windows and general library configuration\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_potrace.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  add_definitions(/D_USE_MATH_DEFINES)\nendif()\n\nadd_definitions(/DPOTRACE=\"POTrace\")\nadd_definitions(/DVERSION=\"Blender\")\nadd_definitions(/DHAVE_INTTYPES_H)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Source Files for CMake\nDESCRIPTION: This snippet initializes and configures the include directories and source files necessary for compiling the Vulkan Memory Allocator. It checks for Apple-specific directories and conditionally appends them. No external libraries are set initially. Dependencies include Vulkan and MoltenVK for Apple systems.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${VULKAN_INCLUDE_DIRS}\n)\n\nif(APPLE)\n  list(APPEND INC_SYS\n    ${MOLTENVK_INCLUDE_DIRS}\n  )\nendif()\n\nset(SRC\n  vk_mem_alloc_impl.cc\n\n  vk_mem_alloc.h\n)\n\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Cineon/DPX Library Target with Blender Helper Function\nDESCRIPTION: Uses Blender's custom CMake function to create the library target with all specified source files, include directories, and dependencies. This builds the Cineon/DPX support as a library that will be linked into Blender.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/cineon/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_imbuf_cineon \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Check Module Build in CMake\nDESCRIPTION: Sets up the build configuration for the CPU check shared library, removing SSE4.2 flags if present and configuring proper output directories. The module is built without advanced CPU instructions to ensure wide compatibility.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/cpucheck/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  cpu_check.cc\n)\n\nif(COMPILER_SSE42_FLAG)\n  remove_cc_flag(\"${COMPILER_SSE42_FLAG}\")\nendif()\nadd_library(blender_cpu_check SHARED ${SRC})\n\ntarget_link_libraries(blender_cpu_check PRIVATE ${PLATFORM_LINKLIBS})\ntarget_compile_definitions(blender_cpu_check PUBLIC WITH_CPU_CHECK)\n\nif(NOT WIN32)\n  set(_LIB_SUB_FOLDER \"lib/\")\nendif()\n\nset_target_properties(blender_cpu_check\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin/${_LIB_SUB_FOLDER}\"\n  LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin/${_LIB_SUB_FOLDER}\"\n)\n\nunset(_LIB_SUB_FOLDER)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Asset Editor\nDESCRIPTION: Defines the include paths needed for building the asset editor module, including local and generated directories for DNA type offsets and RNA prototypes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/asset/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../include\n  ../../makesrna\n  # dna_type_offsets.h\n  ${CMAKE_CURRENT_BINARY_DIR}/../../makesdna/intern\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Metaball Editor in CMake\nDESCRIPTION: Specifies the source files to be compiled for the Blender metaball editor module. It includes C++ files for undo functionality, editing operations, and general operations, as well as a header file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/metaball/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  editmball_undo.cc\n  mball_edit.cc\n  mball_ops.cc\n\n  mball_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Cycles Hydra\nDESCRIPTION: Lists all the source files for the Cycles Hydra render delegate implementation, which provide functionality for various rendering components like cameras, materials, mesh handling, and the core render delegate.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HD_CYCLES\n  attribute.cpp\n  curves.cpp\n  camera.cpp\n  field.cpp\n  file_reader.cpp\n  geometry.cpp\n  instancer.cpp\n  light.cpp\n  material.cpp\n  mesh.cpp\n  node_util.cpp\n  output_driver.cpp\n  pointcloud.cpp\n  render_buffer.cpp\n  render_delegate.cpp\n  render_pass.cpp\n  session.cpp\n  volume.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Copyright Notice Template\nDESCRIPTION: Template for the short copyright and warranty notice that should be displayed when an interactive program starts\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Transform Module\nDESCRIPTION: Lists all source files (.cc) and header files (.hh) that make up the transform module, including implementations for different transformation modes and object types.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/transform/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  transform.cc\n  transform_constraints.cc\n  transform_convert.cc\n  transform_convert_action.cc\n  transform_convert_armature.cc\n  transform_convert_cursor.cc\n  transform_convert_curve.cc\n  transform_convert_curves.cc\n  transform_convert_graph.cc\n  transform_convert_grease_pencil.cc\n  transform_convert_lattice.cc\n  transform_convert_mask.cc\n  transform_convert_mball.cc\n  transform_convert_mesh.cc\n  transform_convert_mesh_edge.cc\n  transform_convert_mesh_skin.cc\n  transform_convert_mesh_uv.cc\n  transform_convert_mesh_vert_cdata.cc\n  transform_convert_nla.cc\n  transform_convert_node.cc\n  transform_convert_object.cc\n  transform_convert_object_texspace.cc\n  transform_convert_paintcurve.cc\n  transform_convert_particle.cc\n  transform_convert_pointcloud.cc\n  transform_convert_sculpt.cc\n  transform_convert_sequencer.cc\n  transform_convert_sequencer_image.cc\n  transform_convert_sequencer_retiming.cc\n  transform_convert_tracking.cc\n  transform_convert_tracking_curves.cc\n  transform_draw_cursors.cc\n  transform_generics.cc\n  transform_gizmo_2d.cc\n  transform_gizmo_3d.cc\n  transform_gizmo_3d_cage.cc\n  transform_gizmo_3d_shear.cc\n  transform_gizmo_extrude_3d.cc\n  transform_input.cc\n  transform_mode.cc\n  transform_mode_align.cc\n  transform_mode_baketime.cc\n  transform_mode_bbone_resize.cc\n  transform_mode_bend.cc\n  transform_mode_boneenvelope.cc\n  transform_mode_boneroll.cc\n  transform_mode_curveshrinkfatten.cc\n  transform_mode_customdata.cc\n  transform_mode_edge_rotate_normal.cc\n  transform_mode_edge_seq_slide.cc\n  transform_mode_edge_slide.cc\n  transform_mode_gpopacity.cc\n  transform_mode_maskshrinkfatten.cc\n  transform_mode_mirror.cc\n  transform_mode_push_pull.cc\n  transform_mode_resize.cc\n  transform_mode_rotate.cc\n  transform_mode_shear.cc\n  transform_mode_shrink_fatten.cc\n  transform_mode_skin_resize.cc\n  transform_mode_snapsource.cc\n  transform_mode_tilt.cc\n  transform_mode_timescale.cc\n  transform_mode_timeslide.cc\n  transform_mode_timetranslate.cc\n  transform_mode_tosphere.cc\n  transform_mode_trackball.cc\n  transform_mode_translate.cc\n  transform_mode_vert_slide.cc\n  transform_ops.cc\n  transform_orientations.cc\n  transform_snap.cc\n  transform_snap_animation.cc\n  transform_snap_object.cc\n  transform_snap_object_armature.cc\n  transform_snap_object_camera.cc\n  transform_snap_object_curve.cc\n  transform_snap_object_editmesh.cc\n  transform_snap_object_mesh.cc\n  transform_snap_sequencer.cc\n\n  transform.hh\n  transform_constraints.hh\n  transform_convert.hh\n  transform_draw_cursors.hh\n  transform_gizmo.hh\n  transform_mode.hh\n  transform_orientations.hh\n  transform_snap.hh\n  transform_snap_object.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition for Common File Format Support in CMake\nDESCRIPTION: This snippet checks if any of the file format support options are enabled and adds the 'common' subdirectory if so. It includes checks for OBJ, PLY, STL, Grease Pencil, Alembic, USD, CSV, and FBX formats.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ OR\n   WITH_IO_PLY OR\n   WITH_IO_STL OR\n   WITH_IO_GREASE_PENCIL OR\n   WITH_ALEMBIC OR\n   WITH_USD OR\n   WITH_IO_CSV OR\n   WITH_IO_FBX)\n  add_subdirectory(common)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Curve Editor Library and Dependencies\nDESCRIPTION: Creates the curve editor library target and sets up RNA dependency generation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curve/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_curve \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_curve bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Defining EEVEE Fragment Shader Sources in CMake\nDESCRIPTION: Sets up a list of EEVEE fragment shader source files for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  eevee_debug_gbuffer_frag.glsl\n  eevee_debug_irradiance_grid_frag.glsl\n  eevee_debug_surfels_frag.glsl\n  eevee_deferred_capture_frag.glsl\n  eevee_deferred_combine_frag.glsl\n  eevee_deferred_light_frag.glsl\n  eevee_deferred_planar_frag.glsl\n  eevee_deferred_thickness_amend_frag.glsl\n  eevee_deferred_tile_classify_frag.glsl\n  eevee_depth_of_field_scatter_frag.glsl\n  eevee_display_lightprobe_planar_frag.glsl\n  eevee_display_lightprobe_sphere_frag.glsl\n  eevee_display_lightprobe_volume_frag.glsl\n  eevee_film_copy_frag.glsl\n  eevee_film_frag.glsl\n  eevee_hiz_debug_frag.glsl\n  eevee_light_culling_debug_frag.glsl\n  eevee_lookdev_display_frag.glsl\n  eevee_occupancy_convert_frag.glsl\n  eevee_renderpass_clear_frag.glsl\n  eevee_shadow_debug_frag.glsl\n  eevee_shadow_page_tile_frag.glsl\n  eevee_shadow_tag_usage_frag.glsl\n  eevee_surf_capture_frag.glsl\n  eevee_surf_deferred_frag.glsl\n  eevee_surf_depth_frag.glsl\n  eevee_surf_forward_frag.glsl\n  eevee_surf_hybrid_frag.glsl\n  eevee_surf_occupancy_frag.glsl\n  eevee_surf_shadow_frag.glsl\n  eevee_surf_volume_frag.glsl\n  eevee_surf_world_frag.glsl\n  eevee_volume_resolve_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for CSV Import in Blender (CMake)\nDESCRIPTION: Sets up include directories for the CSV import module, including local directories and external dependencies like fast_float.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/csv/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  importer\n  ../common\n  ../../blenkernel\n)\n\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Intern Subdirectory in CMake Build\nDESCRIPTION: Simple CMake directive to include the 'intern' subdirectory in the build process. Contains license header indicating GPL-2.0-or-later license and copyright information.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesrna/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nadd_subdirectory(intern)\n```\n\n----------------------------------------\n\nTITLE: Building Curves Editor Library and Tests\nDESCRIPTION: Configures the main curves editor library build and optional test suite compilation with Google Test framework.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curves/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_curves \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_dependencies(bf_editor_curves bf_rna)\n\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/curves_edit_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n  )\n  blender_add_test_suite_lib(editor_curves \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This command sets the include directories for the project. It includes the project source directory and the project binary directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Library Dependencies for SLIM\nDESCRIPTION: Specifies that the SLIM library depends on Eigen, which is marked as a private dependency.\nSOURCE: https://github.com/blender/blender/blob/main/intern/slim/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Editor\nDESCRIPTION: Specifies the required library dependencies for the editor space buttons component, with private visibility modifiers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_buttons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific GLOG Configuration\nDESCRIPTION: Adds Windows-specific source files and include directories. Suppresses specific MSVC warnings related to Google logging implementation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/glog/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  list(APPEND SRC\n    src/windows/port.cc\n    src/windows/glog/raw_logging.h\n    ...\n  )\n\n  list(APPEND INC\n    src/windows\n  )\n  if(MSVC)\n    add_definitions(\"/wd4722\")\n  endif()\nelse()\n  list(APPEND INC\n    include\n  )\n  list(APPEND SRC\n    include/glog/logging.h\n    ...\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for Blender Modifiers\nDESCRIPTION: Defines system include directories for external dependencies like zlib.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Script Editor\nDESCRIPTION: Specifies the source files needed to build the script editor component.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_script/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  script_edit.cc\n  script_ops.cc\n  space_script.cc\n\n  script_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MIP Test Executable with CMake\nDESCRIPTION: This snippet conditionally adds the 'mip_test' executable based on the `CMAKE_BUILD_TYPE`. If the build type is 'Maintainer', the executable is added normally; otherwise, it's excluded from the default build.  It then sets up the libraries required for the 'mip_test' executable based on the availability of GLPK, CPLEX, and CBC.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF(LEMON_HAVE_MIP)\n  IF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n    ADD_EXECUTABLE(mip_test mip_test.cc)\n  ELSE()\n    ADD_EXECUTABLE(mip_test EXCLUDE_FROM_ALL mip_test.cc)\n  ENDIF()\n\n  SET(MIP_TEST_LIBS lemon)\n\n  IF(LEMON_HAVE_GLPK)\n    SET(MIP_TEST_LIBS ${MIP_TEST_LIBS} ${GLPK_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CPLEX)\n    SET(MIP_TEST_LIBS ${MIP_TEST_LIBS} ${ILOG_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CBC)\n    SET(MIP_TEST_LIBS ${MIP_TEST_LIBS} ${COIN_CBC_LIBRARIES})\n  ENDIF()\n\n  TARGET_LINK_LIBRARIES(mip_test ${MIP_TEST_LIBS})\n  ADD_TEST(mip_test mip_test)\n  ADD_DEPENDENCIES(check mip_test)\n\n  IF(WIN32 AND LEMON_HAVE_GLPK)\n    GET_TARGET_PROPERTY(TARGET_LOC mip_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET mip_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/glpk.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/libltdl3.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/zlib1.dll ${TARGET_PATH}\n    )\n  ENDIF()\n\n  IF(WIN32 AND LEMON_HAVE_CPLEX)\n    GET_TARGET_PROPERTY(TARGET_LOC mip_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET mip_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${ILOG_CPLEX_DLL} ${TARGET_PATH}\n    )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Support\nDESCRIPTION: Conditional configuration block for OpenVDB support, adding necessary include paths, libraries, and compiler definitions when OpenVDB is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_spreadsheet/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Geometry Names in CMake\nDESCRIPTION: Sets a global property ICON_GEOM_NAMES containing all the icon geometry names used in Blender. These names are referenced by the build system and can be updated using the script mentioned in the comment.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY ICON_GEOM_NAMES\n  # BEGIN ICON_GEOM_NAMES\n  brush.generic\n  brush.gpencil_draw.erase\n  brush.gpencil_draw.fill\n  brush.paint_texture.clone\n  brush.paint_texture.soften\n  brush.paint_texture.smear\n  brush.paint_texture.fill\n  brush.paint_texture.mask\n  brush.paint_vertex.average\n  brush.paint_vertex.blur\n  brush.paint_vertex.replace\n  brush.paint_vertex.smear\n  brush.paint_weight.average\n  brush.paint_weight.blur\n  brush.paint_weight.smear\n  brush.particle.add\n  brush.particle.comb\n  brush.particle.cut\n  brush.particle.length\n  brush.particle.puff\n  brush.particle.smooth\n  brush.particle.weight\n  brush.sculpt.displacement_eraser\n  brush.sculpt.displacement_smear\n  brush.sculpt.draw_face_sets\n  brush.sculpt.mask\n  brush.sculpt.paint\n  brush.sculpt.simplify\n  brush.uv_sculpt.grab\n  brush.uv_sculpt.pinch\n  brush.uv_sculpt.relax\n  none\n  ops.armature.bone.roll\n  ops.armature.extrude_cursor\n  ops.armature.extrude_move\n  ops.curve.draw\n  ops.curve.extrude_cursor\n  ops.curve.extrude_move\n  ops.curve.pen\n  ops.curve.radius\n  ops.curve.vertex_random\n  ops.curves.sculpt_add\n  ops.curves.sculpt_delete\n  ops.curves.sculpt_density\n  ops.generic.cursor\n  ops.generic.select\n  ops.generic.select_box\n  ops.generic.select_circle\n  ops.generic.select_lasso\n  ops.generic.select_paint\n  ops.gpencil.draw\n  ops.gpencil.draw.eraser\n  ops.gpencil.draw.line\n  ops.gpencil.draw.poly\n  ops.gpencil.edit_bend\n  ops.gpencil.edit_mirror\n  ops.gpencil.edit_shear\n  ops.gpencil.edit_to_sphere\n  ops.gpencil.extrude_move\n  ops.gpencil.primitive_arc\n  ops.gpencil.primitive_box\n  ops.gpencil.primitive_circle\n  ops.gpencil.primitive_curve\n  ops.gpencil.primitive_line\n  ops.gpencil.primitive_polyline\n  ops.gpencil.radius\n  ops.gpencil.sculpt_average\n  ops.gpencil.sculpt_blur\n  ops.gpencil.sculpt_clone\n  ops.gpencil.sculpt_smear\n  ops.gpencil.stroke_trim\n  ops.gpencil.transform_fill\n  ops.mesh.bevel\n  ops.mesh.bisect\n  ops.mesh.dupli_extrude_cursor\n  ops.mesh.extrude_faces_move\n  ops.mesh.extrude_manifold\n  ops.mesh.extrude_region_move\n  ops.mesh.extrude_region_shrink_fatten\n  ops.mesh.inset\n  ops.mesh.knife_tool\n  ops.mesh.loopcut_slide\n  ops.mesh.offset_edge_loops_slide\n  ops.mesh.polybuild_hover\n  ops.mesh.primitive_cone_add_gizmo\n  ops.mesh.primitive_cube_add_gizmo\n  ops.mesh.primitive_cylinder_add_gizmo\n  ops.mesh.primitive_grid_add_gizmo\n  ops.mesh.primitive_sphere_add_gizmo\n  ops.mesh.primitive_torus_add_gizmo\n  ops.mesh.rip\n  ops.mesh.rip_edge\n  ops.mesh.spin\n  ops.mesh.vertices_smooth\n  ops.node.links_cut\n  ops.paint.eyedropper_add\n  ops.paint.vertex_color_fill\n  ops.paint.weight_fill\n  ops.paint.weight_gradient\n  ops.paint.weight_sample\n  ops.paint.weight_sample_group\n  ops.pose.breakdowner\n  ops.pose.push\n  ops.pose.relax\n  ops.sculpt.border_face_set\n  ops.sculpt.border_hide\n  ops.sculpt.border_mask\n  ops.sculpt.box_trim\n  ops.sculpt.cloth_filter\n  ops.sculpt.color_filter\n  ops.sculpt.face_set_edit\n  ops.sculpt.lasso_face_set\n  ops.sculpt.lasso_hide\n  ops.sculpt.lasso_mask\n  ops.sculpt.lasso_trim\n  ops.sculpt.line_face_set\n  ops.sculpt.line_hide\n  ops.sculpt.line_mask\n  ops.sculpt.line_project\n  ops.sculpt.line_trim\n  ops.sculpt.mask_by_color\n  ops.sculpt.mesh_filter\n  ops.sculpt.polyline_face_set\n  ops.sculpt.polyline_hide\n  ops.sculpt.polyline_mask\n  ops.sculpt.polyline_trim\n  ops.sequencer.blade\n  ops.sequencer.retime\n  ops.transform.bone_envelope\n  ops.transform.bone_size\n  ops.transform.edge_slide\n  ops.transform.push_pull\n  ops.transform.resize.cage\n  ops.transform.resize\n  ops.transform.rotate\n  ops.transform.shear\n  ops.transform.shrink_fatten\n  ops.transform.tilt\n  ops.transform.tosphere\n  ops.transform.transform\n  ops.transform.translate\n  ops.transform.vert_slide\n  ops.transform.vertex_random\n  ops.view3d.ruler\n  # END ICON_GEOM_NAMES\n)\n```\n\n----------------------------------------\n\nTITLE: Setting LibC Compatibility Build Variables in CMake\nDESCRIPTION: Defines build configuration variables including include directories, source files, and library dependencies for the LibC compatibility module. Adds fast-math optimization flag and creates the library target.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libc_compat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  libc_compat.c\n)\n\nset(LIB\n)\n\nadd_c_flag(-ffast-math)\n\nblender_add_lib(bf_intern_libc_compat \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Wayland Protocol Generation Configuration\nDESCRIPTION: Configures Wayland protocol bindings generation using wayland-scanner. Sets up custom commands for generating protocol headers and implementation files.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(generate_protocol_bindings PROT_DEF)\n  get_filename_component(_name ${PROT_DEF} NAME_WLE)\n  add_custom_command(\n    OUTPUT ${INC_DST}/${_name}-client-protocol.h\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${INC_DST}\n    COMMAND ${WAYLAND_SCANNER} client-header ${PROT_DEF} ${INC_DST}/${_name}-client-protocol.h\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Setting up oneAPI Kernel Sources in CMake\nDESCRIPTION: Defines the set of source files needed for the oneAPI kernel, including kernel device sources, headers, GPU headers, oneAPI-specific headers, and utility headers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n  set(cycles_oneapi_kernel_sources\n    ${SRC_KERNEL_DEVICE_ONEAPI}\n    ${SRC_KERNEL_HEADERS}\n    ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n    ${SRC_KERNEL_DEVICE_ONEAPI_HEADERS}\n    ${SRC_UTIL_HEADERS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the xxhash library. It sets both public include directories (INC) and system include directories (INC_SYS).\nSOURCE: https://github.com/blender/blender/blob/main/extern/xxhash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for Blender Modifiers\nDESCRIPTION: Specifies the Blender libraries that the modifiers module depends on, including blenkernel, blenlib, bmesh, depsgraph, etc.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PUBLIC bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Function Nodes\nDESCRIPTION: Lists all source files for the function nodes module, including various node implementations and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/function/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_fn_align_euler_to_vector.cc\n  nodes/node_fn_align_rotation_to_vector.cc\n  nodes/node_fn_axes_to_rotation.cc\n  nodes/node_fn_axis_angle_to_rotation.cc\n  nodes/node_fn_boolean_math.cc\n  nodes/node_fn_combine_color.cc\n  nodes/node_fn_combine_matrix.cc\n  nodes/node_fn_combine_transform.cc\n  nodes/node_fn_compare.cc\n  nodes/node_fn_euler_to_rotation.cc\n  nodes/node_fn_find_in_string.cc\n  nodes/node_fn_float_to_int.cc\n  nodes/node_fn_hash_value.cc\n  nodes/node_fn_input_bool.cc\n  nodes/node_fn_input_color.cc\n  nodes/node_fn_input_int.cc\n  nodes/node_fn_input_rotation.cc\n  nodes/node_fn_input_special_characters.cc\n  nodes/node_fn_input_string.cc\n  nodes/node_fn_input_vector.cc\n  nodes/node_fn_integer_math.cc\n  nodes/node_fn_invert_matrix.cc\n  nodes/node_fn_invert_rotation.cc\n  nodes/node_fn_match_string.cc\n  nodes/node_fn_matrix_determinant.cc\n  nodes/node_fn_matrix_multiply.cc\n  nodes/node_fn_project_point.cc\n  nodes/node_fn_quaternion_to_rotation.cc\n  nodes/node_fn_random_value.cc\n  nodes/node_fn_replace_string.cc\n  nodes/node_fn_rotate_euler.cc\n  nodes/node_fn_rotate_rotation.cc\n  nodes/node_fn_rotate_vector.cc\n  nodes/node_fn_rotation_to_axis_angle.cc\n  nodes/node_fn_rotation_to_euler.cc\n  nodes/node_fn_rotation_to_quaternion.cc\n  nodes/node_fn_separate_color.cc\n  nodes/node_fn_separate_matrix.cc\n  nodes/node_fn_separate_transform.cc\n  nodes/node_fn_slice_string.cc\n  nodes/node_fn_string_length.cc\n  nodes/node_fn_transform_direction.cc\n  nodes/node_fn_transform_point.cc\n  nodes/node_fn_transpose_matrix.cc\n  nodes/node_fn_value_to_string.cc\n\n  node_function_util.cc\n\n  node_function_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Action Clean Operator in Blender Python\nDESCRIPTION: Example demonstrating a failed operator call due to incorrect context, showing typical error message when operator's poll function fails.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_operators.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.ops.action.clean(threshold=0.001)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Metaball Editor in CMake\nDESCRIPTION: Sets up include directories for the Blender metaball editor module. It includes the local include directory and the makesrna directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/metaball/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Mantaflow Integration\nDESCRIPTION: Lists all source files required for the Mantaflow integration, including C++ implementation files and header files for both the API and internal functionality.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/manta_python_API.cpp\n  intern/manta_fluid_API.cpp\n  intern/MANTA_main.cpp\n\n  extern/manta_python_API.h\n  extern/manta_fluid_API.h\n  intern/MANTA_main.h\n  intern/strings/fluid_script.h\n  intern/strings/smoke_script.h\n  intern/strings/liquid_script.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Support Conditionally\nDESCRIPTION: Adds Python-specific include paths and definitions when Python support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_script/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC\n    ../../python\n  )\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Point Cloud Editor in CMake\nDESCRIPTION: Specifies the source files to be compiled for the point cloud editor module, including various functionality like attribute sets, duplication, editing, and undo operations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/pointcloud/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/attribute_set.cc\n  intern/duplicate.cc\n  intern/edit.cc\n  intern/join.cc\n  intern/operators.cc\n  intern/selection.cc\n  intern/separate.cc\n  intern/undo.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Compositor\nDESCRIPTION: Lists all source files (.hh and .cc) that comprise the compositor module, organized by subdirectories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  COM_compile_state.hh\n  COM_compositor.hh\n  # ... [truncated for brevity]\n  utilities/COM_utilities_oidn.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Blender Release to PyPI\nDESCRIPTION: Command to upload a Blender release to PyPI. Requires specifying the version number and Git hash.\nSOURCE: https://github.com/blender/blender/blob/main/release/pypi/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./upload-release.py --version X.X.X --git-hash abcd1234\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Cycles Util Library in CMake\nDESCRIPTION: Lists all header (.h) files that are part of the Cycles Util library, including various mathematical utilities, data structures, and system abstractions.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/util/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  algorithm.h\n  aligned_malloc.h\n  args.h\n  array.h\n  atomic.h\n  boundbox.h\n  color.h\n  concurrent_set.h\n  concurrent_vector.h\n  debug.h\n  defines.h\n  deque.h\n  disjoint_set.h\n  guarded_allocator.cpp\n  guarded_allocator.h\n  guiding.h\n  half.h\n  hash.h\n  ies.h\n  image.h\n  image_impl.h\n  list.h\n  log.h\n  map.h\n  math.h\n  math_base.h\n  math_cdf.h\n  math_fast.h\n  math_intersect.h\n  math_float2.h\n  math_float3.h\n  math_float4.h\n  math_float8.h\n  math_int2.h\n  math_int3.h\n  math_int4.h\n  math_int8.h\n  md5.h\n  murmurhash.h\n  openimagedenoise.h\n  openvdb.h\n  optimization.h\n  param.h\n  path.h\n  profiling.h\n  progress.h\n  projection.h\n  projection_inverse.h\n  queue.h\n  rect.h\n  set.h\n  simd.h\n  semaphore.h\n  stack_allocator.h\n  static_assert.h\n  stats.h\n  string.h\n  system.h\n  task.h\n  tbb.h\n  texture.h\n  thread.h\n  time.h\n  transform.h\n  types.h\n  types_base.h\n  types_float2.h\n  types_float3.h\n  types_float4.h\n  types_float8.h\n  types_int2.h\n  types_int3.h\n  types_int4.h\n  types_int8.h\n  types_spectrum.h\n  types_uchar2.h\n  types_uchar3.h\n  types_uchar4.h\n  types_uint2.h\n  types_uint3.h\n  types_uint4.h\n  types_ushort4.h\n  unique_ptr.h\n  unique_ptr_vector.h\n  vector.h\n  version.h\n  windows.h\n  xml.h\n)\n```\n\n----------------------------------------\n\nTITLE: macOS Framework Configuration - CMake\nDESCRIPTION: Configures additional framework dependencies for macOS builds with GUI support.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  if(WITH_CYCLES_STANDALONE_GUI)\n    string(CONCAT _cycles_sdl_frameworks\n      \" -framework AudioToolbox\"\n      \" -framework AudioUnit\"\n      \" -framework Cocoa\"\n      \" -framework CoreAudio\"\n      \" -framework CoreHaptics\"\n      \" -framework CoreVideo\"\n      \" -framework ForceFeedback\"\n      \" -framework GameController\"\n    )\n    set_property(\n      TARGET cycles\n      APPEND PROPERTY LINK_FLAGS\n      \"${_cycles_sdl_frameworks}\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Text Editor Module\nDESCRIPTION: Sets up include paths for the text editor module compilation. Includes the module's own header files and makesrna directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_text/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies (Empty)\nDESCRIPTION: This snippet defines an empty list for library dependencies. In this case, no additional libraries are directly linked.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(LIB\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies all required library dependencies for the sculpt paint module, including various Blender internal libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/sculpt_paint/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  # ... [truncated for brevity]\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Blender Python Extensions\nDESCRIPTION: Defines include directories for the Python extension build, including local paths and Python include directories\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../makesrna\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemon Library Paths\nDESCRIPTION: This snippet defines the paths to the Lemon library's source code and include directories, including the generated config.h file. It sets the LEMON_3RD_PATH, PROJECT_VERSION, LEMON_SOURCE_ROOT_DIR, LEMON_SRC, LEMON_INCLUDE_DIRS, and LEMON_GEN_DIR variables.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(LEMON_3RD_PATH 3rd/lemon-1.3.1)\n# Needed for the configure script.\nset(PROJECT_VERSION \\\"1.3.1\\\")\n\nset(LEMON_SOURCE_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${LEMON_3RD_PATH})\n\nset(LEMON_SRC ${LEMON_SOURCE_ROOT_DIR}/lemon)\nset(LEMON_INCLUDE_DIRS ${LEMON_SOURCE_ROOT_DIR})\n\nset(LEMON_GEN_DIR ${CMAKE_BINARY_DIR}/extern/quadriflow/${LEMON_3RD_PATH})\nconfigure_file(\n  ${LEMON_SRC}/config.h.in\n  ${LEMON_GEN_DIR}/lemon/config.h\n)\nunset(PROJECT_VERSION)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Image Editor Space Library\nDESCRIPTION: Adds the image editor space as a library to the Blender build system and sets up dependencies for RNA-related files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_image/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_image \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_image bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Custom Macros for Google Test Logging - C++\nDESCRIPTION: This section outlines the macros related to logging in the Google Test framework. It details the necessary functions that should also be provided to support logging functionalities effectively.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/include/gtest/internal/custom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Logging:\n//   `GTEST_LOG_(severity)`\n//   `GTEST_CHECK_(condition)`\n//   Functions `LogToStderr()` and `FlushInfoLog()` have to be provided too.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source and Include Paths in CMake\nDESCRIPTION: This CMake script is used to define the include directories and source files for the Range Tree component of the Blender project. It specifies paths for headers and source code within the 'intern' directory. The 'blender_add_lib' function is invoked to register these paths in the build process. There are no specific library dependencies indicated in this snippet, as the 'LIB' variable is empty.\nSOURCE: https://github.com/blender/blender/blob/main/extern/rangetree/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(SRC\n  range_tree.h\n  intern/generic_alloc_impl.h\n\n  intern/range_tree.c\n)\n\nset(LIB\n)\n\nblender_add_lib(extern_rangetree \\\"${SRC}\\\" \\\"${INC}\\\" \\\"\\\" \\\"${LIB}\\\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Translation Module\nDESCRIPTION: Lists the core source files required for the translation functionality.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/blt_lang.cc\n  intern/blt_translation.cc\n\n  BLT_lang.hh\n  BLT_translation.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Editor Build Dependencies in CMake\nDESCRIPTION: Sets up include paths, source files, and library dependencies for the Blender sound editor module. Includes conditional compilation support for Audaspace, FFMPEG, and SNDFILE audio backends.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/sound/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  sound_ops.cc\n\n  sound_intern.hh\n)\n\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n\nif(WITH_AUDASPACE)\n  list(APPEND LIB\n    bf_intern_audaspace\n  )\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WITH_CODEC_SNDFILE)\n  add_definitions(-DWITH_SNDFILE)\nendif()\n\nblender_add_lib(bf_editor_sound \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_sound bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring GTests Build in Blender using CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for Google Tests in the Blender project. It removes strict flags, optionally builds a common test executable, and adds a utility library for tests. The configuration is only applied if WITH_GTESTS is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  # Otherwise we get warnings here that we can't fix in external projects\n  remove_strict_flags()\n\n  # Build common test executable used by most tests\n  if(WITH_TESTS_SINGLE_BINARY)\n    add_subdirectory(runner)\n  endif()\n\n  # Build utility library used by test executables\n  add_subdirectory(testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Configuration for CMake 3.19+ in Atomic Library\nDESCRIPTION: For CMake 3.19 and newer, adds source files to the interface library for IDE visibility. Lists header files and adds them to the target.\nSOURCE: https://github.com/blender/blender/blob/main/intern/atomic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.19\")\n  set(SRC\n    atomic_ops.h\n    intern/atomic_ops_ext.h\n    intern/atomic_ops_msvc.h\n    intern/atomic_ops_unix.h\n    intern/atomic_ops_utils.h\n  )\n  target_sources(bf_intern_atomic PRIVATE ${SRC})\n  blender_source_group(bf_intern_atomic ${SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake File Configuration\nDESCRIPTION: Configures and generates header and source files for SVG icons using template files. Joins the collected content and handles proper escaping of quotes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(JOIN SVG_CONTENTS_C \"\" SVG_CONTENTS_C)\nlist(JOIN SVG_CONTENTS_H \"\" SVG_CONTENTS_H)\n\nconfigure_file(\n  \"svg_icons.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/svg_icons.h\"\n  ESCAPE_QUOTES\n  @ONLY\n)\nconfigure_file(\n  \"svg_icons.cc.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/svg_icons.cc\"\n  ESCAPE_QUOTES\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding GTest Library to Blender\nDESCRIPTION: This snippet invokes the `blender_add_lib` function to create a library target for the external GTest sources, incorporating the specified source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_gtest \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files\nDESCRIPTION: Sets include directories and source file lists for Mantaflow library, with conditional inclusion of dependencies based on configuration options\nSOURCE: https://github.com/blender/blender/blob/main/extern/mantaflow/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ${MANTA_PP}\n  ${MANTA_PP}/fileio\n  ${MANTA_PP}/python\n  ${MANTA_PP}/plugin\n  ${MANTA_HLP}/pwrapper\n  ${MANTA_HLP}/util\n)\n\nif(WITH_MANTA_DEPENDENCIES)\n  list(APPEND INC\n    ${MANTA_DEP}/cnpy\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up compiler flags for Audaspace library in CMake\nDESCRIPTION: Removes strict compilation flags and specifically disables the -Wunused-macros warning for GNU compilers. This ensures compatibility during compilation of the Audaspace audio library.\nSOURCE: https://github.com/blender/blender/blob/main/intern/audaspace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nremove_strict_flags()\n\nif(CMAKE_COMPILER_IS_GNUCC)\n  remove_cc_flag(\"-Wunused-macros\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 Include Paths in CMake\nDESCRIPTION: Sets local and system include paths for X11-related headers and source files for XDND library compilation\nSOURCE: https://github.com/blender/blender/blob/main/extern/xdnd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${X11_X11_INCLUDE_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Hydra Support in Blender Render Module\nDESCRIPTION: Adds a subdirectory for Hydra if WITH_HYDRA is defined, potentially including additional Hydra-related files and configurations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HYDRA)\n  add_subdirectory(hydra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Unix-Specific Library Dependencies in CMake\nDESCRIPTION: Conditionally includes Unix-specific libraries for compression, FFI (Foreign Function Interface), and database functionality. These libraries provide platform-specific capabilities on Unix-based systems.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n  include(cmake/bzip2.cmake)\n  include(cmake/ffi.cmake)\n  include(cmake/lzma.cmake)\n  include(cmake/sqlite.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up GMP Support\nDESCRIPTION: Configures GNU Multiple Precision Arithmetic Library (GMP) support when WITH_GMP is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/bmesh/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Dependencies - CMake\nDESCRIPTION: Defines base include directories and library dependencies for Cycles standalone build.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\nset(INC_SYS\n)\n\nset(LIB\n  cycles_device\n  cycles_kernel\n  cycles_scene\n  cycles_session\n  cycles_bvh\n  cycles_subd\n  cycles_graph\n  cycles_util\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Image Formats in Blender\nDESCRIPTION: Sets up conditional compilation flags for various image formats like OpenJPEG, OpenEXR, Cineon, and WebP based on build options.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_image/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENJPEG)\n  add_definitions(-DWITH_IMAGE_OPENJPEG)\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n\nif(WITH_IMAGE_WEBP)\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding SYCL Target-Specific Options in CMake\nDESCRIPTION: Joins all SYCL targets into a comma-separated list and appends them to the compiler flags. For each target, it also checks if there are specific options defined and adds them to the compiler flags with the appropriate format.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n  # Iterate over all targets and their options.\n  list(JOIN CYCLES_ONEAPI_SYCL_TARGETS \",\" targets_string)\n  list(APPEND sycl_compiler_flags -fsycl-targets=${targets_string})\n  foreach(target ${CYCLES_ONEAPI_SYCL_TARGETS})\n    if(DEFINED CYCLES_ONEAPI_SYCL_OPTIONS_${target})\n      list(APPEND sycl_compiler_flags\n        \"-Xsycl-target-backend=${target} \\\"${CYCLES_ONEAPI_SYCL_OPTIONS_${target}}\\\"\"\n      )\n    endif()\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Physics Editor in CMake\nDESCRIPTION: Defines the library dependencies for the Blender physics editor module, including various Blender-specific libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/physics/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Imath Include Directories in CMake\nDESCRIPTION: This CMake code snippet adds Imath include directories to the system includes if they are defined, which is necessary for certain OpenImageIO configurations.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED IMATH_INCLUDE_DIRS)\n  list(APPEND INC_SYS\n    ${IMATH_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Python Support in Blender Render Module\nDESCRIPTION: Adds Python support to the Blender render module if WITH_PYTHON is defined. It adds the necessary include directory and defines a preprocessor macro.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/render/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Freestyle Feature in Blender CMake Build\nDESCRIPTION: Adds a definition for the Freestyle feature if it's enabled in the build configuration. This allows conditional compilation of Freestyle-related code throughout the project.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/makesdna/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Core Rendering Dependencies in CMake\nDESCRIPTION: Includes modules for building essential rendering-related libraries like TBB (for parallelism), LLVM (for shader compilation), and OSL (for shading). These are critical for Blender's rendering capabilities.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/tbb.cmake)\ninclude(cmake/python.cmake)\ninclude(cmake/llvm.cmake)\ninclude(cmake/osl.cmake)\ninclude(cmake/numpy.cmake)\ninclude(cmake/python_site_packages.cmake)\ninclude(cmake/package_python.cmake)\ninclude(cmake/openimageio.cmake)\ninclude(cmake/usd.cmake)\ninclude(cmake/materialx.cmake)\ninclude(cmake/openvdb.cmake)\ninclude(cmake/potrace.cmake)\ninclude(cmake/haru.cmake)\ninclude(cmake/pugixml.cmake)\ninclude(cmake/fribidi.cmake)\ninclude(cmake/harfbuzz.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using BGL Buffer in Python\nDESCRIPTION: This snippet demonstrates how to create and use a Buffer object from the bgl module. It shows creation of a byte buffer, using it with an OpenGL function, accessing its dimensions and contents, and slicing the buffer.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\nimport bgl\n\nmyByteBuffer = bgl.Buffer(bgl.GL_BYTE, [32, 32])\nbgl.glGetPolygonStipple(myByteBuffer)\n\nprint(myByteBuffer.dimensions)\nprint(myByteBuffer.to_list())\n\nsliceBuffer = myByteBuffer[0:16]\nprint(sliceBuffer)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths in CMake for Blender Editor\nDESCRIPTION: Defines include paths for the editor space buttons component build, including local and binary-generated paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_buttons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Console Space in CMake\nDESCRIPTION: Defines the include directories for the console space component. It includes the local include directory and the makesrna directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_console/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n)\n```\n\n----------------------------------------\n\nTITLE: Compiler Options for Vulkan Memory Allocator\nDESCRIPTION: This snippet sets compiler-specific options for the Vulkan Memory Allocator when using GCC or Clang. It disables nullability completeness warnings. Prerequisites include the presence of a compatible GCC or Clang compiler.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  target_compile_options(extern_vulkan_memory_allocator\n    PRIVATE \"-Wno-nullability-completeness\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding UV Editor Library and Dependencies in CMake\nDESCRIPTION: Creates the UV editor library and adds a dependency on the RNA generation step.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/uvedit/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_uvedit \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_uvedit bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Installing LEMON Library\nDESCRIPTION: This command installs the LEMON library to the specified destinations for archives and libraries, as part of the 'library' component.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"INSTALL(\n  TARGETS lemon\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib\n  COMPONENT library\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Libmv Unit Tests in CMake\nDESCRIPTION: This section of the CMake script adds test executables for the Libmv library when the WITH_GTESTS option is enabled. It defines a test dataset library and multiple test executables for different components of Libmv, including prediction, tracking, image processing, and multiview geometry.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libmv/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n  if(WITH_GTESTS)\n    blender_add_lib(libmv_test_dataset \"./libmv/multiview/test_data_sets.cc\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n    blender_add_test_executable(\"libmv_predict_tracks\" \"./libmv/autotrack/predict_tracks_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_tracks\" \"./libmv/autotrack/tracks_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_scoped_ptr\" \"./libmv/base/scoped_ptr_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_vector\" \"./libmv/base/vector_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_array_nd\" \"./libmv/image/array_nd_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_convolve\" \"./libmv/image/convolve_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_image\" \"./libmv/image/image_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_sample\" \"./libmv/image/sample_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_tuple\" \"./libmv/image/tuple_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_euclidean_resection\" \"./libmv/multiview/euclidean_resection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_fundamental\" \"./libmv/multiview/fundamental_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_homography\" \"./libmv/multiview/homography_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_nviewtriangulation\" \"./libmv/multiview/nviewtriangulation_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_panography\" \"./libmv/multiview/panography_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_projection\" \"./libmv/multiview/projection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_resection\" \"./libmv/multiview/resection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_triangulation\" \"./libmv/multiview/triangulation_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_dogleg\" \"./libmv/numeric/dogleg_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_function_derivative\" \"./libmv/numeric/function_derivative_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_levenberg_marquardt\" \"./libmv/numeric/levenberg_marquardt_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_numeric\" \"./libmv/numeric/numeric_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_poly\" \"./libmv/numeric/poly_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_camera_intrinsics\" \"./libmv/simple_pipeline/camera_intrinsics_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_detect\" \"./libmv/simple_pipeline/detect_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_intersect\" \"./libmv/simple_pipeline/intersect_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_keyframe_selection\" \"./libmv/simple_pipeline/keyframe_selection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_modal_solver\" \"./libmv/simple_pipeline/modal_solver_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines include directories for the build system, including the current directory and src folder.\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  src\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base OpenColorIO Integration Files in CMake\nDESCRIPTION: Sets up the basic include directories, source files, and library dependencies for Blender's OpenColorIO integration regardless of whether the full OpenColorIO support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opencolorio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../source/blender/gpu/intern\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  ocio_capi.cc\n  fallback_impl.cc\n\n  ocio_capi.h\n  ocio_impl.h\n  ocio_shader_shared.hh\n)\n\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for FBX Importer\nDESCRIPTION: Defines system include directories for the FBX importer. Currently empty but reserved for potential future external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/fbx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Including GPU and Binding Libraries in CMake\nDESCRIPTION: Includes libraries for GPU shader compilation (Shaderc), Vulkan API, and Python binding libraries (PyBind11, NanoBind). These enable Blender to work with modern GPU APIs and provide Python integration.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/shaderc_deps.cmake)\ninclude(cmake/shaderc.cmake)\ninclude(cmake/vulkan.cmake)\ninclude(cmake/pybind11.cmake)\ninclude(cmake/nanobind.cmake)\ninclude(cmake/manifold.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Lemon Tools\nDESCRIPTION: This CMake configuration sets up the build environment for generating executables related to the Lemon graph utilities. It specifies include and link directories, adds multiple executables, and links them to the Lemon library. It also installs the executables and optionally a shell script for version updating if not on Windows. The build requires the Lemon library and CMake environment. The main outputs are the compiled executables and potentially the installed shell script.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n\nADD_EXECUTABLE(lgf-gen lgf-gen.cc)\nTARGET_LINK_LIBRARIES(lgf-gen lemon)\n\nADD_EXECUTABLE(dimacs-to-lgf dimacs-to-lgf.cc)\nTARGET_LINK_LIBRARIES(dimacs-to-lgf lemon)\n\nADD_EXECUTABLE(dimacs-solver dimacs-solver.cc)\nTARGET_LINK_LIBRARIES(dimacs-solver lemon)\n\nINSTALL(\n  TARGETS lgf-gen dimacs-to-lgf dimacs-solver\n  RUNTIME DESTINATION bin\n  COMPONENT bin\n)\n\nIF(NOT WIN32)\n  INSTALL(\n    PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/lemon-0.x-to-1.x.sh\n    DESTINATION bin\n    COMPONENT bin\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Avoiding Noisy Warnings in CMake\nDESCRIPTION: This snippet checks if the GCC compiler is being used and removes the warning flag for missing declarations to avoid unnecessary warnings during the build process.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  remove_cc_flag(\n    \"-Wmissing-declarations\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows External Manifest Handling\nDESCRIPTION: Adds post-build step for copying external manifest file when building on Windows with external manifest option enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/msgfmt/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_WINDOWS_EXTERNAL_MANIFEST)\n  add_custom_command(TARGET msgfmt POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/tests.exe.manifest  $<TARGET_FILE_DIR:msgfmt>/$<TARGET_FILE_NAME:msgfmt>.manifest\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Utility and Format Libraries in CMake\nDESCRIPTION: Includes various utility libraries for formatting, data structures, and XML parsing. These libraries provide fundamental functionality used throughout Blender's codebase.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/fmt.cmake)\ninclude(cmake/robinmap.cmake)\ninclude(cmake/xml2.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Composite Nodes in CMake\nDESCRIPTION: Defines the include directories for the composite nodes module, including both internal Blender directories and generated RNA files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/composite/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../compositor\n  ../../makesrna\n  ../../compositor/algorithms\n  ../../compositor/cached_resources\n  ../../compositor/derived_resources\n  ../../compositor/utilities\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Physics Integration\nDESCRIPTION: Conditionally adds Bullet physics engine support by including necessary headers and libraries when WITH_BULLET is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/bmesh/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n    ../../../intern/rigidbody\n  )\n  list(APPEND LIB\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite for Blender Functions Library in CMake\nDESCRIPTION: Sets up test files and dependencies for the Blender functions library when WITH_GTESTS is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/functions/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    tests/FN_field_test.cc\n    tests/FN_lazy_function_test.cc\n    tests/FN_multi_function_procedure_test.cc\n    tests/FN_multi_function_test.cc\n\n    tests/FN_multi_function_test_common.hh\n  )\n  set(TEST_LIB\n    bf_functions\n  )\n  blender_add_test_suite_lib(function \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies\nDESCRIPTION: Handles conditional compilation and linking of optional dependencies like OpenColorIO, OpenVDB, Alembic and NanoVDB. Sets up required compiler definitions, include paths and library linkage.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/scene/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\n  list(APPEND INC_SYS\n    ${OPENCOLORIO_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENCOLORIO_LIBRARIES}\n  )\n  if(WIN32 AND NOT USD_OVERRIDE_OPENCOLORIO)\n    add_definitions(-DOpenColorIO_SKIP_IMPORTS)\n  endif()\nendif()\n\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\n\n  if(MSVC_CLANG)\n    set_source_files_properties(image_vdb.cpp PROPERTIES COMPILE_FLAGS -fno-delayed-template-parsing)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra and USD in CMake for Cycles\nDESCRIPTION: Adds the hydra subdirectory when certain conditions are met regarding Hydra render delegate and USD support.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE OR (WITH_CYCLES_STANDALONE AND WITH_USD))\n  add_subdirectory(hydra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for CSV Import in Blender (CMake)\nDESCRIPTION: Specifies the source files required for the CSV import functionality, including the CSV reader and header file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/csv/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  importer/csv_reader.cc\n\n  IO_csv.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender GPU Python Module\nDESCRIPTION: Specifies the libraries that the GPU Python module depends on, including Python libraries and various Blender internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/gpu/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Blender Modifiers\nDESCRIPTION: Establishes a dependency on the RNA module to ensure RNA_prototypes.hh is generated before compiling the modifiers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_modifiers bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring MSYS2 Environment for Windows Builds in CMake\nDESCRIPTION: Sets up MSYS2 when enabled, which is needed for tools like Perl that are required by some build processes (e.g., HIP compiler detection). This conditional inclusion only applies when MSYS2 is explicitly enabled.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# `setup_msys2.cmake` to install `perl`,\n# which HIP needs to function for the compiler detection to work properly,\n# hence needs to be included before `check_compilers.cmake`.\nif(ENABLE_MSYS2)\n  include(cmake/setup_msys2.cmake)\nelse()\n  set(mingw_LIBDIR ${LIBDIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Image Editor Space\nDESCRIPTION: Defines the include directories for the image editor space, including asset, include, and makesrna directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SPDX Copyright Header for Blender Project\nDESCRIPTION: This snippet defines the SPDX-FileCopyrightText header for the Blender project. It specifies the copyright year as 2006 and attributes the copyright to Blender Authors. This header is typically used to provide clear copyright information in open-source projects.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Retrieving Texture Parameter Values - OpenGL - Python\nDESCRIPTION: The glGetTexParameter function retrieves parameter values associated with textures, aiding developers in managing texture properties during rendering.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetTexParameter (target, pname, params):\n\n   B{glGetTexParameterfv, glGetTexParameteriv}\n\n   Return texture parameter values\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetTexParameter.xhtml>`__\n\n   :type target: Enumerated constant\n   :arg target: Specifies the symbolic name of the target texture.\n   :type pname: Enumerated constant\n   :arg pname: Specifies the symbolic name the target texture.\n   :type params: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg params: Returns the texture parameters.\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifold Support in Blender Geometry Module\nDESCRIPTION: Conditionally enables Manifold support by defining the appropriate preprocessor macro when the WITH_MANIFOLD option is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MANIFOLD)\n  add_definitions(-DWITH_MANIFOLD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules\nDESCRIPTION: This snippet includes the FindPythonInterp and FindWget CMake modules. These modules are used to find Python interpreter and Wget if they are needed by the project or its dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(FindPythonInterp)\nINCLUDE(FindWget)\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Audio Library Installation\nDESCRIPTION: Sets up installation paths, configures the main audaspace library target, and handles installation of headers and pkg-config files.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\tset(BIN_DESTINATION \".\")\nelse()\n\tset(BIN_DESTINATION \"bin\")\nendif()\n\nset(LIB_DESTINATION \"lib${LIB_SUFFIX}\")\n\nadd_library(audaspace ${LIBRARY_TYPE} ${SRC} ${HDR})\ntarget_link_libraries(audaspace ${LIBRARIES})\nset_target_properties(audaspace PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\nif(AUDASPACE_STANDALONE)\n\tinstall(TARGETS audaspace\n\t\tRUNTIME DESTINATION ${BIN_DESTINATION}\n\t\tLIBRARY DESTINATION ${LIB_DESTINATION}\n\t\tARCHIVE DESTINATION ${LIB_DESTINATION}\n\t)\n\n\tinstall(DIRECTORY ${CMAKE_SOURCE_DIR}/include/ DESTINATION include/audaspace)\n\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/Audaspace.h DESTINATION include/audaspace)\n\n\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/packages/pkgconfig/audaspace.pc.in ${CMAKE_CURRENT_BINARY_DIR}/audaspace.pc @ONLY)\n\n\tif(NOT WIN32 AND NOT APPLE)\n\t\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/audaspace.pc DESTINATION \"lib${LIB_SUFFIX}/pkgconfig\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Blender Screen Editor in CMake\nDESCRIPTION: Adds a dependency on the RNA (Runtime Node API) generation target to ensure proper build order for the screen editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/screen/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_screen bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring SYCL Offline Compiler Settings in CMake\nDESCRIPTION: Sets up the parallel jobs parameter for the SYCL offline compiler and displays a status message about the number of compiler instances that will be used, which affects memory usage during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n  set(SYCL_OFFLINE_COMPILER_PARALLEL_JOBS 1 CACHE STRING \"Number of parallel compiler instances to use for device binaries compilation (expect ~8GB peak memory usage per instance).\")\n  mark_as_advanced(SYCL_OFFLINE_COMPILER_PARALLEL_JOBS)\n\n  if(WITH_CYCLES_ONEAPI_BINARIES)\n    message(STATUS \"${SYCL_OFFLINE_COMPILER_PARALLEL_JOBS} instance(s) of oneAPI offline compiler will be used.\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Linking Directories in CMake\nDESCRIPTION: This snippet defines the directories that should be used by the linker to find libraries for the project. It allows for the inclusion of the lemon library located in the binary directory, which is crucial for linking against external libraries that the executable depends on.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nLINK_DIRECTORIES(\\\n  ${PROJECT_BINARY_DIR}/lemon\\\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing New CyclesPreferences Property in Python\nDESCRIPTION: Shows how to access the newly added 'peer_memory' property of the CyclesPreferences class in Blender 2.90.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\n# Access the new peer_memory property\npeer_mem = bpy.context.preferences.addons['cycles'].preferences.peer_memory\n```\n\n----------------------------------------\n\nTITLE: Handling SOPLEX Dependency\nDESCRIPTION: This block handles the SOPLEX dependency. It adds `soplex.cc` to the source files and includes the SOPLEX include directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LEMON_HAVE_SOPLEX)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} soplex.cc)\n  INCLUDE_DIRECTORIES(${SOPLEX_INCLUDE_DIRS})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Metal Backend\nDESCRIPTION: CMake configuration block that specifies private library dependencies for the Metal graphics implementation. Includes core Blender libraries like blenkernel, blenlib, draw system, and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring System Include Directories\nDESCRIPTION: Declares system include directories (empty in this case but reserved for potential future use).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/id_management/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Library Version Table in Markdown\nDESCRIPTION: A markdown table listing the library name and version number for Mp11 library used in the project.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Library | Version |\n| ------- | ------- |\n| [Mp11](https://github.com/boostorg/mp11) | 863d8b8d2b2 |\n```\n\n----------------------------------------\n\nTITLE: Enabling Solver Backends\nDESCRIPTION: This snippet sets options to enable different solver backends for LEMON such as GLPK, ILOG (CPLEX), COIN, and SoPlex. The user can enable or disable these backends by setting the corresponding CMake variables.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LEMON_ENABLE_GLPK YES CACHE STRING \"Enable GLPK solver backend.\")\nSET(LEMON_ENABLE_ILOG YES CACHE STRING \"Enable ILOG (CPLEX) solver backend.\")\nSET(LEMON_ENABLE_COIN YES CACHE STRING \"Enable COIN solver backend.\")\nSET(LEMON_ENABLE_SOPLEX YES CACHE STRING \"Enable SoPlex solver backend.\")\n```\n\n----------------------------------------\n\nTITLE: Marking Advanced Cache Variables\nDESCRIPTION: This snippet marks several cache variables as advanced. This means that they will not be displayed in the CMake GUI by default, which helps to keep the interface cleaner for most users.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nMARK_AS_ADVANCED(\n    CMAKE_CXX_FLAGS_MAINTAINER\n    CMAKE_C_FLAGS_MAINTAINER\n    CMAKE_EXE_LINKER_FLAGS_MAINTAINER\n    CMAKE_SHARED_LINKER_FLAGS_MAINTAINER )\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake\nDESCRIPTION: This snippet configures the include directories for the project, ensuring that both the source and binary directories are accessible to the compiler. It takes the project source and binary directory variables as input parameters, which are essential for locating the necessary headers during the compilation process.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\\\n  ${PROJECT_SOURCE_DIR}\\\n  ${PROJECT_BINARY_DIR}\\\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader Source Files in CMake\nDESCRIPTION: Lists the GLSL fragment shader source files used in Blender's GPU rendering system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  gpu_shader_2D_area_borders_frag.glsl\n  gpu_shader_2D_line_dashed_frag.glsl\n  gpu_shader_2D_node_socket_frag.glsl\n  gpu_shader_2D_nodelink_frag.glsl\n  gpu_shader_2D_widget_base_frag.glsl\n  gpu_shader_2D_widget_shadow_frag.glsl\n  gpu_shader_3D_polyline_frag.glsl\n  gpu_shader_3D_smooth_color_frag.glsl\n  gpu_shader_checker_frag.glsl\n  gpu_shader_depth_only_frag.glsl\n  gpu_shader_diag_stripes_frag.glsl\n  gpu_shader_display_fallback_frag.glsl\n  gpu_shader_flat_color_frag.glsl\n  gpu_shader_gpencil_stroke_frag.glsl\n  gpu_shader_icon_frag.glsl\n  gpu_shader_image_color_frag.glsl\n  gpu_shader_image_desaturate_frag.glsl\n  gpu_shader_image_frag.glsl\n  gpu_shader_image_overlays_merge_frag.glsl\n  gpu_shader_image_overlays_stereo_merge_frag.glsl\n  gpu_shader_image_shuffle_color_frag.glsl\n  gpu_shader_keyframe_shape_frag.glsl\n  gpu_shader_point_uniform_color_aa_frag.glsl\n  gpu_shader_point_uniform_color_outline_aa_frag.glsl\n  gpu_shader_point_varying_color_frag.glsl\n  gpu_shader_sequencer_strips_frag.glsl\n  gpu_shader_sequencer_thumbs_frag.glsl\n  gpu_shader_simple_lighting_frag.glsl\n  gpu_shader_text_frag.glsl\n  gpu_shader_uniform_color_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for PLY IO Library\nDESCRIPTION: Defines include paths for the PLY IO library compilation, including internal directories and external dependencies\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/ply/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  exporter\n  importer\n  intern\n  ../common\n  ../../makesrna\n)\n\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Graph Editor\nDESCRIPTION: Defines include paths for the graph editor component, including local headers and RNA generation output directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_graph/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Movie Module\nDESCRIPTION: Configures the include directories for the movie module. Sets up public includes and system includes that will be used during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Curve Editor\nDESCRIPTION: Defines include paths for the curve editor compilation, including local headers and RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curve/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: BSD 3-Clause License Terms\nDESCRIPTION: The complete text of the BSD 3-Clause 'New' or 'Revised' License that applies to several libraries including Alembic, Blosc, Ceres Solver, and others.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nThe 3-Clause BSD License\n------------------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its contributors may be\n  used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Building Asset System Library\nDESCRIPTION: Adds the asset system library target and creates an alias for it.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/asset_system/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_asset_system \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::asset_system ALIAS bf_asset_system)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Outliner\nDESCRIPTION: Comprehensive list of source files (.cc) and header files (.hh) that make up the outliner space editor implementation, including tree structure elements and display components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_outliner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  outliner_collections.cc\n  outliner_context.cc\n  outliner_dragdrop.cc\n  outliner_draw.cc\n  outliner_edit.cc\n  outliner_ops.cc\n  outliner_query.cc\n  outliner_select.cc\n  outliner_sync.cc\n  outliner_tools.cc\n  outliner_tree.cc\n  outliner_utils.cc\n  space_outliner.cc\n  tree/common.cc\n  [... full file list ...]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Full OpenColorIO Support in CMake\nDESCRIPTION: Conditionally adds additional source files, definitions, and dependencies when OpenColorIO support is enabled. This includes GLSL shader files for color transformation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opencolorio/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(\n    -DWITH_OCIO\n  )\n\n  add_definitions(${OPENCOLORIO_DEFINITIONS})\n\n  list(APPEND INC_SYS\n    ${OPENCOLORIO_INCLUDE_DIRS}\n    ${Epoxy_INCLUDE_DIRS}\n  )\n\n  list(APPEND SRC\n    ocio_impl.cc\n    ocio_impl_glsl.cc\n  )\n\n  list(APPEND LIB\n    ${OPENCOLORIO_LIBRARIES}\n  )\n\n  set(GLSL_SRC\n    gpu_shader_display_transform_vert.glsl\n    gpu_shader_display_transform_frag.glsl\n\n    ocio_shader_shared.hh\n  )\n\n  set(GLSL_C)\n  foreach(GLSL_FILE ${GLSL_SRC})\n    glsl_to_c(${GLSL_FILE} GLSL_C)\n  endforeach()\n\n  blender_add_lib(bf_ocio_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n\n  list(APPEND LIB\n    bf_ocio_shaders\n  )\n\n  set(GLSL_SOURCE_CONTENT \"\")\n  foreach(GLSL_FILE ${GLSL_SRC})\n    get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n    string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n    string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\n  endforeach()\n\n  set(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_ocio_source_list.h\")\n  file(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\n  list(APPEND SRC ${glsl_source_list_file})\n  list(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n\n  target_include_directories(bf_ocio_shaders PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including WebP and Level-Zero Libraries in CMake\nDESCRIPTION: Includes WebP image format library and conditionally includes Level-Zero for non-Apple platforms. WebP provides efficient image compression, while Level-Zero offers low-level GPU acceleration interfaces.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/webp.cmake)\nif(NOT APPLE)\n  include(cmake/level-zero.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for UFBX Library\nDESCRIPTION: This snippet specifies the source files for the ufbx library, listing the implementation and header files required for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ufbx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  ufbx.c\n  ufbx.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Metaball Editor in CMake\nDESCRIPTION: Defines the library dependencies for the Blender metaball editor module. It includes various Blender-specific libraries such as blenkernel, blenlib, and depsgraph, among others.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/metaball/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Including Platform-Specific Assembly Tools in CMake\nDESCRIPTION: Conditionally includes the NASM assembly compiler for Unix platforms. NASM is required by some libraries like x264 and other multimedia codecs that use assembly optimizations.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n  include(cmake/nasm.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Cycles OSL Kernel in CMake\nDESCRIPTION: Sets up the include directories for the Cycles OSL kernel module, defining relative includes and system includes separately.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../..\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag in Google Mock\nDESCRIPTION: This macro `GMOCK_DECLARE_int32_(name)` allows for the declaration of a 32-bit integer flag with a specified name. Similar to the boolean flag, it can be defined with `GMOCK_DEFINE_int32_(name, default_val, doc)` which includes a default value and documentation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/include/gmock/internal/custom/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DECLARE_int32_(name)\n```\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DEFINE_int32_(name, default_val, doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Material Parameters - OpenGL - Python\nDESCRIPTION: The glGetMaterial function retrieves parameters associated with materials in OpenGL, which are vital for controlling how surfaces reflect light and appear in the rendered scene.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n.. function:: glGetMaterial (face, pname, params):\n\n   B{glGetMaterialfv, glGetMaterialiv}\n\n   Return material parameters\n\n   .. seealso:: `OpenGL Docs <https://khronos.org/registry/OpenGL-Refpages/gl4/html/glGetMaterial.xhtml>`__\n\n   :type face: Enumerated constant\n   :arg face: Specifies which of the two materials is being queried.\n      representing the front and back materials, respectively.\n   :type pname: Enumerated constant\n   :arg pname: Specifies the material parameter to return.\n   :type params: :class:`bgl.Buffer` object. Depends on function prototype.\n   :arg params: Returns the requested data.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Simulation\nDESCRIPTION: Defines include directories for the simulation library build, including local and makesrna paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/simulation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  intern\n  ../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining External Nanosvg Library in CMake\nDESCRIPTION: This snippet creates an external library target named extern_nanosvg using the previously defined source and include directories. It also creates an alias for easy reference within the project.\nSOURCE: https://github.com/blender/blender/blob/main/extern/nanosvg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_nanosvg \"${SRC}\" \"${INC}\" \"\" \"${LIB}\")\nadd_library(bf::extern::nanosvg ALIAS extern_nanosvg)\n```\n\n----------------------------------------\n\nTITLE: Linking Directories in CMake\nDESCRIPTION: This snippet specifies where to find libraries to link against. Here, it links to the 'lemon' library located in the binary directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/demo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n```\n\n----------------------------------------\n\nTITLE: Building Translation Library\nDESCRIPTION: Creates the translation library target and sets up its alias.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blentranslation \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blentranslation ALIAS bf_blentranslation)\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Archive\nDESCRIPTION: This snippet creates a distribution archive of the project. It defines a custom target named dist that performs several actions, including creating tar and zip archives with and without documentation. It removes intermediate directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nSET(ARCHIVE_BASE_NAME ${CMAKE_PROJECT_NAME})\nSTRING(TOLOWER ${ARCHIVE_BASE_NAME} ARCHIVE_BASE_NAME)\nSET(ARCHIVE_NAME ${ARCHIVE_BASE_NAME}-${PROJECT_VERSION})\nADD_CUSTOM_TARGET(dist\n  COMMAND cmake -E remove_directory ${ARCHIVE_NAME}\n  COMMAND hg archive ${ARCHIVE_NAME}\n  COMMAND cmake -E copy cmake/version.cmake ${ARCHIVE_NAME}/cmake/version.cmake\n  COMMAND tar -czf ${ARCHIVE_BASE_NAME}-nodoc-${PROJECT_VERSION}.tar.gz ${ARCHIVE_NAME}\n  COMMAND zip -r ${ARCHIVE_BASE_NAME}-nodoc-${PROJECT_VERSION}.zip ${ARCHIVE_NAME}\n  COMMAND cmake -E copy_directory doc/html ${ARCHIVE_NAME}/doc/html\n  COMMAND tar -czf ${ARCHIVE_NAME}.tar.gz ${ARCHIVE_NAME}\n  COMMAND zip -r ${ARCHIVE_NAME}.zip ${ARCHIVE_NAME}\n  COMMAND cmake -E copy_directory doc/html ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  COMMAND tar -czf ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}.tar.gz ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  COMMAND zip -r ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}.zip ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  COMMAND cmake -E remove_directory ${ARCHIVE_NAME}\n  COMMAND cmake -E remove_directory ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  DEPENDS html\n  WORKING_DIRECTORY ${PROJECT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Module Compatibility in CMake for Blender\nDESCRIPTION: Ensures that Python module and Google Test features are not enabled simultaneously due to incompatible Python link flags.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Configure Python\n\n# Not currently supported due to different required Python link flags.\nset_and_warn_incompatible(WITH_PYTHON_MODULE WITH_GTESTS OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version being used is at least 3.1, which is necessary for the CMake features used in the script.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.1)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executables with CMake Loop\nDESCRIPTION: This snippet iterates through the list of tests defined in the `TESTS` variable. For each test, it adds an executable with the test name and links it against the 'lemon' library.  It then conditionally adds the test using either Valgrind or a direct execution, and adds a dependency to the 'check' target.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(TEST_NAME ${TESTS})\n  IF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n    ADD_EXECUTABLE(${TEST_NAME} ${TEST_NAME}.cc)\n  ELSE()\n    ADD_EXECUTABLE(${TEST_NAME} EXCLUDE_FROM_ALL ${TEST_NAME}.cc)\n  ENDIF()\n  TARGET_LINK_LIBRARIES(${TEST_NAME} lemon)\n    IF(TEST_WITH_VALGRIND)\n      ADD_TEST(${TEST_NAME}\n        valgrind --error-exitcode=1 ${VALGRIND_FLAGS}\n        ${CMAKE_CURRENT_BINARY_DIR}/${TEST_NAME} )\n    ELSE()\n      ADD_TEST(${TEST_NAME} ${TEST_NAME})\n    ENDIF()\n  ADD_DEPENDENCIES(check ${TEST_NAME})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Testing in CMake\nDESCRIPTION: Defines the library dependencies for the Blender testing framework. In this case, it includes a private dependency on Blender's guarded allocation library.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/testing/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting a string with fmt\nDESCRIPTION: This snippet illustrates how to format a string using the fmt library, replacing placeholders with actual values. It requires the fmt library and shows how to create formatted strings easily.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"The answer is {}.\", 42);\n// s == \"The answer is 42.\"\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Paths\nDESCRIPTION: Defines system-level include paths (empty in this case).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_script/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pystring Library Build with CMake\nDESCRIPTION: This CMake script configures the build process for the Pystring library. It sets up the project, defines source files, creates a static library, and specifies installation targets. The script also adds platform-specific compile flags for Unix systems.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_pystring.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright Contributors to the OpenColorIO Project.\n\nproject(pystring)\n\ncmake_minimum_required(VERSION 3.10)\n\nset(HEADERS\n\tpystring.h\n)\n\nset(SOURCES\n\tpystring.cpp\n)\n\nadd_library(${PROJECT_NAME} STATIC ${HEADERS} ${SOURCES})\n\nif(UNIX)\n\tset(pystring_CXX_FLAGS \"${pystring_CXX_FLAGS} -fPIC\")\nendif()\n\nset_target_properties(${PROJECT_NAME} PROPERTIES \n\tCOMPILE_FLAGS \"${PLATFORM_COMPILE_FLAGS} ${pystring_CXX_FLAGS}\"\n    PUBLIC_HEADER \"${HEADERS}\"\n)\n\ninstall(TARGETS ${PROJECT_NAME}\n\tRUNTIME DESTINATION bin\n\tLIBRARY DESTINATION lib\n\tARCHIVE DESTINATION lib\n\tPUBLIC_HEADER DESTINATION include\n)\n```\n\n----------------------------------------\n\nTITLE: Build Information Generation Setup\nDESCRIPTION: Configures the generation of build information headers containing compile-time details about the build environment.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\n  set(BUILD_PLATFORM \"${CMAKE_SYSTEM_NAME}\")\n  set(BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n  set(BUILD_CFLAGS \"${CMAKE_C_FLAGS}\")\n  set(BUILD_CXXFLAGS \"${CMAKE_CXX_FLAGS}\")\n  set(BUILD_LINKFLAGS \"${PLATFORM_LINKFLAGS}\")\n  set(BUILD_SYSTEM \"CMake\")\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Shader Source Files in CMake\nDESCRIPTION: Lists the GLSL vertex shader source files used in Blender's GPU rendering system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_VERT\n  gpu_shader_2D_area_borders_vert.glsl\n  gpu_shader_2D_image_rect_vert.glsl\n  gpu_shader_2D_image_vert.glsl\n  gpu_shader_2D_node_socket_vert.glsl\n  gpu_shader_2D_nodelink_vert.glsl\n  gpu_shader_2D_point_uniform_size_aa_vert.glsl\n  gpu_shader_2D_point_uniform_size_outline_aa_vert.glsl\n  gpu_shader_2D_point_varying_size_varying_color_vert.glsl\n  gpu_shader_2D_vert.glsl\n  gpu_shader_2D_widget_base_vert.glsl\n  gpu_shader_2D_widget_shadow_vert.glsl\n  gpu_shader_3D_clipped_uniform_color_vert.glsl\n  gpu_shader_3D_flat_color_vert.glsl\n  gpu_shader_3D_image_vert.glsl\n  gpu_shader_3D_line_dashed_uniform_color_vert.glsl\n  gpu_shader_3D_normal_vert.glsl\n  gpu_shader_3D_point_uniform_size_aa_vert.glsl\n  gpu_shader_3D_point_varying_size_varying_color_vert.glsl\n  gpu_shader_3D_smooth_color_vert.glsl\n  gpu_shader_display_fallback_vert.glsl\n  gpu_shader_gpencil_stroke_vert.glsl\n  gpu_shader_icon_multi_vert.glsl\n  gpu_shader_icon_vert.glsl\n  gpu_shader_keyframe_shape_vert.glsl\n  gpu_shader_sequencer_strips_vert.glsl\n  gpu_shader_sequencer_thumbs_vert.glsl\n  gpu_shader_text_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Status Bar Component\nDESCRIPTION: Sets up include paths for the status bar component, including the local include directory, the makesrna directory, and the generated RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_statusbar/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Console Space Library to Blender Build in CMake\nDESCRIPTION: Uses a custom Blender function to add the console space library to the build, specifying source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_console/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_console \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for BMesh Python API in CMake\nDESCRIPTION: Defines include directories for the BMesh Python API build, including system includes for Python headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/bmesh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Graph Editor\nDESCRIPTION: Lists all source files that comprise the graph editor component, including both implementation files and headers.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_graph/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  graph_buttons.cc\n  graph_draw.cc\n  graph_edit.cc\n  graph_ops.cc\n  graph_select.cc\n  graph_slider_ops.cc\n  graph_utils.cc\n  graph_view.cc\n  graph_query.cc\n  space_graph.cc\n\n  graph_intern.hh\n  ED_space_graph.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings in CMake for Cycles\nDESCRIPTION: Sets up compiler flags to handle warnings for GCC and Clang compilers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_check_cxx_compiler_flags(\n    CMAKE_CXX_FLAGS\n    _has_no_error_unused_macros \"-Wno-error=unused-macros\"\n  )\n  unset(_has_no_error_unused_macros)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CPACK Settings for LEMON Library in CMake\nDESCRIPTION: This CMake script configures CPACK settings for packaging the LEMON library. It sets package metadata, defines components and their properties, specifies installation types, and configures NSIS-specific settings for Windows installer generation. The script is conditionally executed only when it's the top-level CMakeLists.txt file.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nIF(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})\n  SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})\n  SET(CPACK_PACKAGE_VENDOR \"EGRES\")\n  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n    \"LEMON - Library for Efficient Modeling and Optimization in Networks\")\n  SET(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n\n  SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})\n\n  SET(CPACK_PACKAGE_INSTALL_DIRECTORY\n    \"${PROJECT_NAME} ${PROJECT_VERSION}\")\n  SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY\n    \"${PROJECT_NAME} ${PROJECT_VERSION}\")\n\n  SET(CPACK_COMPONENTS_ALL headers library html_documentation bin)\n\n  SET(CPACK_COMPONENT_HEADERS_DISPLAY_NAME \"C++ headers\")\n  SET(CPACK_COMPONENT_LIBRARY_DISPLAY_NAME \"Dynamic-link library\")\n  SET(CPACK_COMPONENT_BIN_DISPLAY_NAME \"Command line utilities\")\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_DISPLAY_NAME \"HTML documentation\")\n\n  SET(CPACK_COMPONENT_HEADERS_DESCRIPTION\n    \"C++ header files\")\n  SET(CPACK_COMPONENT_LIBRARY_DESCRIPTION\n    \"DLL and import library\")\n  SET(CPACK_COMPONENT_BIN_DESCRIPTION\n    \"Command line utilities\")\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_DESCRIPTION\n    \"Doxygen generated documentation\")\n\n  SET(CPACK_COMPONENT_HEADERS_DEPENDS library)\n\n  SET(CPACK_COMPONENT_HEADERS_GROUP \"Development\")\n  SET(CPACK_COMPONENT_LIBRARY_GROUP \"Development\")\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_GROUP \"Documentation\")\n\n  SET(CPACK_COMPONENT_GROUP_DEVELOPMENT_DESCRIPTION\n    \"Components needed to develop software using LEMON\")\n  SET(CPACK_COMPONENT_GROUP_DOCUMENTATION_DESCRIPTION\n    \"Documentation of LEMON\")\n\n  SET(CPACK_ALL_INSTALL_TYPES Full Developer)\n\n  SET(CPACK_COMPONENT_HEADERS_INSTALL_TYPES Developer Full)\n  SET(CPACK_COMPONENT_LIBRARY_INSTALL_TYPES Developer Full)\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_INSTALL_TYPES Full)\n\n  SET(CPACK_GENERATOR \"NSIS\")\n  SET(CPACK_NSIS_MUI_ICON \"${PROJECT_SOURCE_DIR}/cmake/nsis/lemon.ico\")\n  SET(CPACK_NSIS_MUI_UNIICON \"${PROJECT_SOURCE_DIR}/cmake/nsis/uninstall.ico\")\n  #SET(CPACK_PACKAGE_ICON \"${PROJECT_SOURCE_DIR}/cmake/nsis\\\\installer.bmp\")\n  SET(CPACK_NSIS_INSTALLED_ICON_NAME \"bin\\\\lemon.ico\")\n  SET(CPACK_NSIS_DISPLAY_NAME \"${CPACK_PACKAGE_INSTALL_DIRECTORY} ${PROJECT_NAME}\")\n  SET(CPACK_NSIS_HELP_LINK \"http:\\\\\\\\lemon.cs.elte.hu\")\n  SET(CPACK_NSIS_URL_INFO_ABOUT \"http:\\\\\\\\lemon.cs.elte.hu\")\n  SET(CPACK_NSIS_CONTACT \"lemon-user@lemon.cs.elte.hu\")\n  SET(CPACK_NSIS_CREATE_ICONS_EXTRA \"\n    CreateShortCut \\\"$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\Documentation.lnk\\\" \\\"$INSTDIR\\\\share\\\\doc\\\\index.html\\\"\n    \")\n  SET(CPACK_NSIS_DELETE_ICONS_EXTRA \"\n    !insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP\n    Delete \\\"$SMPROGRAMS\\\\$MUI_TEMP\\\\Documentation.lnk\\\"\n    \")\n\n  INCLUDE(CPack)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Screen Editor in CMake\nDESCRIPTION: Defines the include directories for the Blender screen editor module, including internal Blender directories and external dependencies like fmtlib.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/screen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../makesrna\n  ../../nodes\n  ../../../../extern/fmtlib/include\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Grease Pencil I/O in CMake\nDESCRIPTION: Defines the libraries to be linked with the Grease Pencil I/O library. It includes various Blender internal libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/grease_pencil/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::nanosvg\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n  PRIVATE extern_fmtlib\n  bf_io_common\n)\n```\n\n----------------------------------------\n\nTITLE: MSVC Clang TBB Configuration\nDESCRIPTION: Adds special compiler flag for MSVC clang compilation with TBB to prevent compilation errors.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB AND MSVC_CLANG)\n  string(APPEND CMAKE_CXX_FLAGS \" /D_LIBCPP_VERSION\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GCC Compiler Flags for Bullet Physics\nDESCRIPTION: Adds the -fpermissive flag for GCC 4.6+ to handle certain compiler warnings in Bullet Physics code\nSOURCE: https://github.com/blender/blender/blob/main/extern/bullet2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX)\n  # Needed for GCC 4.6+.\n  string(APPEND CMAKE_CXX_FLAGS \" -fpermissive\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic GPL Copyright Notice Template\nDESCRIPTION: Template for the basic copyright and license notice that should be included at the start of source files\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Evaluating Coordinates in OpenGL with Python\nDESCRIPTION: Evaluates enabled one- and two-dimensional maps using various glEvalCoord functions. Takes u and v parameters depending on the specific function variant.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nglEvalCoord(u, v)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Modifiers\nDESCRIPTION: Configures the include directories for the modifiers module, including internal directories and dependencies like Eigen.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  intern\n  intern/lineart\n  ../editors/include\n  ../makesrna\n  ../../../intern/eigen\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies in CMake for Blender\nDESCRIPTION: Specifies library dependencies for the Blender project, currently including a private dependency on 'bf::blenlib'.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Flags in Google Mock\nDESCRIPTION: The macro `GMOCK_FLAG_GET(flag_name)` retrieves the value of a specified flag, while `GMOCK_FLAG_SET(flag_name, value)` is used to set a flag to a new value. These macros help in dynamically managing flag states within the code.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/include/gmock/internal/custom/README.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_FLAG_GET(flag_name)\n```\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_FLAG_SET(flag_name, value)\n```\n\n----------------------------------------\n\nTITLE: Defining EEVEE Library Shader Sources in CMake\nDESCRIPTION: Sets up a list of EEVEE library shader source files for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_LIB\n  eevee_ambient_occlusion_lib.glsl\n  eevee_attributes_curves_lib.glsl\n  eevee_attributes_gpencil_lib.glsl\n  eevee_attributes_mesh_lib.glsl\n  eevee_attributes_pointcloud_lib.glsl\n  eevee_attributes_volume_lib.glsl\n  eevee_attributes_world_lib.glsl\n  eevee_bxdf_diffuse_lib.glsl\n  eevee_bxdf_lib.glsl\n  eevee_bxdf_microfacet_lib.glsl\n  eevee_camera_lib.glsl\n  eevee_closure_lib.glsl\n  eevee_colorspace_lib.glsl\n  eevee_cryptomatte_lib.glsl\n  eevee_depth_of_field_accumulator_lib.glsl\n  eevee_depth_of_field_lib.glsl\n  eevee_film_lib.glsl\n  eevee_filter_lib.glsl\n  # eevee_forward_lib.glsl\n  eevee_gbuffer_lib.glsl\n  eevee_horizon_scan_eval_lib.glsl\n  eevee_horizon_scan_lib.glsl\n  eevee_light_eval_lib.glsl\n  eevee_light_iter_lib.glsl\n  eevee_light_lib.glsl\n  eevee_lightprobe_eval_lib.glsl\n  eevee_lightprobe_lib.glsl\n  eevee_lightprobe_sphere_eval_lib.glsl\n  eevee_lightprobe_sphere_lib.glsl\n  eevee_lightprobe_sphere_mapping_lib.glsl\n  eevee_lightprobe_volume_eval_lib.glsl\n  eevee_ltc_lib.glsl\n  eevee_motion_blur_lib.glsl\n  # eevee_nodetree_lib.glsl # Has dependency on draw_model_lib that is hard to resolve\n  eevee_occupancy_lib.glsl\n  eevee_octahedron_lib.glsl\n  eevee_ray_generate_lib.glsl\n  eevee_ray_trace_screen_lib.glsl\n  eevee_ray_types_lib.glsl\n  eevee_renderpass_lib.glsl\n  eevee_sampling_lib.glsl\n  eevee_shadow_lib.glsl\n  eevee_shadow_page_ops_lib.glsl\n  eevee_shadow_tag_usage_lib.glsl\n  eevee_shadow_tilemap_lib.glsl\n  eevee_shadow_tracing_lib.glsl\n  eevee_spherical_harmonics_lib.glsl\n  eevee_subsurface_lib.glsl\n  eevee_surf_lib.glsl\n  eevee_surfel_list_lib.glsl\n  eevee_thickness_lib.glsl\n  # eevee_transparency_lib.glsl # Require Fragment shader include\n  # eevee_velocity_lib.glsl # Has dependency on draw_model_lib that is hard to resolve\n  eevee_volume_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Action Editor in CMake\nDESCRIPTION: Lists the source files that comprise the Action Editor space implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_action/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  action_buttons.cc\n  action_data.cc\n  action_draw.cc\n  action_edit.cc\n  action_ops.cc\n  action_select.cc\n  space_action.cc\n\n  action_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Test Library Configuration in CMake\nDESCRIPTION: Configures Windows-specific test library linking using whole archive options and sets up debug environment variables.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  foreach(_lib ${_test_libs})\n    target_link_libraries(blender_test PRIVATE ${_lib})\n    target_link_options(blender_test PRIVATE /wholearchive:$<TARGET_FILE:${_lib}>)\n  endforeach()\n  set_target_properties(blender_test PROPERTIES VS_DEBUGGER_ENVIRONMENT \"${PLATFORM_ENV_INSTALL};$<TARGET_FILE_DIR:blender>\")\n```\n\n----------------------------------------\n\nTITLE: Executing Blender Path Tests using Python\nDESCRIPTION: Command to run the paths_test.py test suite from the utils directory to verify path handling functionality\nSOURCE: https://github.com/blender/blender/blob/main/scripts/addons_core/node_wrangler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n./utils/paths_test.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Scaling Performance Test in CMake\nDESCRIPTION: Defines include paths, library dependencies, and source files for building the IMB_performance test executable. Links additional build info when WITH_BUILDINFO is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/tests/performance/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../..\n)\n\nset(INC_SYS\n)\n\nset(LIB\n  PRIVATE bf_blenlib\n  PRIVATE bf_imbuf\n)\n\nset(SRC\n  IMB_scaling_performance_test.cc\n)\n\nblender_add_test_performance_executable(IMB_performance \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nif(WITH_BUILDINFO)\n  target_link_libraries(IMB_performance_test PRIVATE buildinfoobj)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding BMesh Python API Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the BMesh Python API as a library to the Blender build system, using the previously defined variables.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/bmesh/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_python_bmesh \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting the Project Version\nDESCRIPTION: This snippet sets the project version to the value of the LEMON_VERSION variable. The PROJECT_VERSION variable is then used for versioning purposes throughout the project.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSET(PROJECT_VERSION ${LEMON_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Text for Audaspace\nDESCRIPTION: The full text of the Apache 2.0 license under which Audaspace is distributed. It outlines the permissions, conditions, and limitations for using the software.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n> Copyright © 2009-2025 Jörg Müller. All rights reserved.\n>\n> Licensed under the Apache License, Version 2.0 (the \"License\");\n> you may not use this file except in compliance with the License.\n> You may obtain a copy of the License at\n>\n>   http://www.apache.org/licenses/LICENSE-2.0\n>\n> Unless required by applicable law or agreed to in writing, software\n> distributed under the License is distributed on an \"AS IS\" BASIS,\n> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> See the License for the specific language governing permissions and\n> limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating GLSL Preprocessor Executable Target in CMake\nDESCRIPTION: Defines the 'glsl_preprocess' executable target using the previously defined source files. The comment notes that SRC_DNA_INC is defined in the parent directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/glsl_preprocess/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# `SRC_DNA_INC` is defined in the parent directory.\nadd_executable(glsl_preprocess ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction Notice for GPL-Licensed Programs\nDESCRIPTION: This snippet shows a short notice to be displayed when a GPL-licensed program starts in interactive mode. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/GPL-3.0-or-later.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Blender Test Parameters Configuration\nDESCRIPTION: Defines standard command-line parameters for Blender test execution, including debug settings and Python exit code handling.\nSOURCE: https://github.com/blender/blender/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_BLENDER_EXE_PARAMS\n  --background --factory-startup --debug-memory --debug-exit-on-error --python-exit-code 1\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Vertex Shader Source Files in CMake\nDESCRIPTION: Sets a list of GLSL vertex shader source files to be compiled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/intern/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_VERT\n  draw_debug_draw_display_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring BLI Library with Required Source Files\nDESCRIPTION: Configures the BLI (Blender Library) by directly listing the necessary source files from the Blender codebase. Sets MATH_STANDALONE to avoid Eigen dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Unfortunately `blenfont` needs `blenlib`.\ninclude_directories(\n  \"../../../source/blender/blenlib\"\n)\n\n# Needed for math_matrix_c.cc to avoid eigen_capi.h dependency.\nadd_definitions(-DMATH_STANDALONE)\n\nadd_library(bli_lib\n  \"../../../source/blender/blenlib/intern/fileops.c\"\n  \"../../../source/blender/blenlib/intern/gsqueue.c\"\n  \"../../../source/blender/blenlib/intern/rct.c\"\n  \"../../../source/blender/blenlib/intern/string.c\"\n  \"../../../source/blender/blenlib/intern/string_utf8.c\"\n  \"../../../source/blender/blenlib/intern/listbase.cc\"\n  \"../../../source/blender/blenlib/intern/math_color.cc\"\n  \"../../../source/blender/blenlib/intern/math_geom.c\"\n  \"../../../source/blender/blenlib/intern/math_matrix_c.cc\"\n  \"../../../source/blender/blenlib/intern/math_rotation.c\"\n  \"../../../source/blender/blenlib/intern/math_vector.c\"\n  \"../../../source/blender/blenlib/intern/storage.c\"\n  \"../../../source/blender/blenlib/intern/task.c\"\n  \"../../../source/blender/blenlib/intern/threads.c\"\n  \"../../../source/blender/blenlib/intern/time.c\"\n  \"../../../source/blender/blenlib/intern/path_utils.cc\"\n  \"../../../source/blender/blenlib/intern/BLI_dynstr.c\"\n  \"../../../source/blender/blenlib/intern/BLI_ghash.c\"\n  \"../../../source/blender/blenlib/intern/BLI_ghash_utils.cc\"\n  \"../../../source/blender/blenlib/intern/BLI_linklist.c\"\n  \"../../../source/blender/blenlib/intern/BLI_memarena.c\"\n  \"../../../source/blender/blenlib/intern/BLI_mempool.c\"\n  \"../../../source/blender/blenlib/intern/hash_mm2a.cc\"\n  \"../../../source/blender/blenlib/intern/string_utils.c\"\n  \"../../../source/blender/blenlib/intern/system.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Malloc Hook Workaround Configuration\nDESCRIPTION: Adds conditional compilation definition for LibC malloc hook workaround if the WITH_LIBC_MALLOC_HOOK_WORKAROUND option is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libc_compat/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBC_MALLOC_HOOK_WORKAROUND)\n  target_compile_definitions(bf_intern_libc_compat\n    PRIVATE WITH_LIBC_MALLOC_HOOK_WORKAROUND\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for View3D Editor in CMake\nDESCRIPTION: Defines include directories for the View3D editor component, specifying both internal Blender paths and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../makesrna\n  ../../modifiers\n  ../../../../intern/mantaflow/extern\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Library Dependencies for Wayland in CMake\nDESCRIPTION: Sets up an empty list for library dependencies that can be filled in as needed.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable Targets for Gears and MultiTest\nDESCRIPTION: Creates executable targets for the test applications, including gears_c (C implementation), gears_cpp (C++ implementation), and multitest_c. Links each target with its required libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Gears (C)\nadd_executable(gears_c\n  ${CMAKE_SOURCE_DIR}/gears/GHOST_C-Test.c\n)\n\ntarget_link_libraries(gears_c\n  ghost_lib\n  string_lib\n  ${OPENGL_gl_LIBRARY}\n  ${CMAKE_DL_LIBS}\n  ${PLATFORM_LINKLIBS}\n)\n\n\n# Gears (C++)\nadd_executable(gears_cpp\n  ${CMAKE_SOURCE_DIR}/gears/GHOST_Test.cpp\n)\n\ntarget_link_libraries(gears_cpp\n  ghost_lib\n  string_lib\n  ${OPENGL_gl_LIBRARY}\n  ${CMAKE_DL_LIBS}\n  ${PLATFORM_LINKLIBS}\n)\n\n\n# MultiTest (C)\nadd_executable(multitest_c\n  ${CMAKE_SOURCE_DIR}/multitest/Basic.c\n  ${CMAKE_SOURCE_DIR}/multitest/EventToBuf.c\n  ${CMAKE_SOURCE_DIR}/multitest/MultiTest.c\n  ${CMAKE_SOURCE_DIR}/multitest/ScrollBar.c\n  ${CMAKE_SOURCE_DIR}/multitest/Util.c\n  ${CMAKE_SOURCE_DIR}/multitest/WindowData.c\n  ${CMAKE_SOURCE_DIR}/multitest/stubs.c\n)\n\n\ntarget_link_libraries(multitest_c\n  blenfont_lib\n  bli_lib\n  gpu_lib\n  # imbuf_lib\n  ghost_lib\n  bli_lib  # again...\n  string_lib\n  numaapi_lib\n  guardedalloc_lib\n  wcwidth_lib\n  ${OPENGL_gl_LIBRARY}\n  ${FREETYPE_LIBRARIES} ${BROTLI_LIBRARIES}\n  ${ZLIB_LIBRARIES}\n  ${CMAKE_DL_LIBS}\n  ${PLATFORM_LINKLIBS}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Cineon Support in CMake\nDESCRIPTION: This CMake code snippet adds Cineon support to the IMBuf library if the WITH_IMAGE_CINEON option is enabled, including necessary source files, libraries, and definitions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_CINEON)\n  list(APPEND SRC\n    intern/format_dpx.cc\n  )\n  list(APPEND LIB\n    bf_imbuf_cineon\n  )\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Packages\nDESCRIPTION: This snippet uses the FIND_PACKAGE command to locate external dependencies such as Doxygen and Ghostscript. This allows the project to use these dependencies if they are installed on the system.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_PACKAGE(Doxygen)\nFIND_PACKAGE(Ghostscript)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Text Editor Module\nDESCRIPTION: Defines the library dependencies required by the text editor module, including font handling, kernel functionality, loading/saving, and GUI components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_text/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Depth in OpenGL with Python\nDESCRIPTION: Specifies the clear value for the depth buffer using the glClearDepth function. The depth parameter is an integer representing the depth value.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/bgl.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nglClearDepth(depth)\n```\n\n----------------------------------------\n\nTITLE: Including TIFF Library and Parser Generator Tools in CMake\nDESCRIPTION: Includes the TIFF image library module and platform-specific parser generator tools (flex/bison). These tools are used in various parts of Blender, including the OpenShadingLanguage compiler.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/tiff.cmake)\nif(WIN32)\n  include(cmake/flexbison.cmake)\nelseif(UNIX AND NOT APPLE)\n  include(cmake/flex.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories for the Nanosvg library required for building it with Blender. It sets the variable INC with public paths to header files necessary for the build process.\nSOURCE: https://github.com/blender/blender/blob/main/extern/nanosvg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../../source/blender/blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Printing a container with fmt\nDESCRIPTION: This snippet showcases how to print the contents of a standard vector using the fmt library. It demonstrates the library's ability to handle collections and container types.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#include <vector>\n#include <fmt/ranges.h>\n\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  fmt::print(\"{}\\n\", v);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Safety in CMake for Blender\nDESCRIPTION: This snippet provides instructions on how to enable the Python safety feature in Blender by using a specific CMake build option. Enabling this feature allows Blender to raise Python exceptions when trying to access freed data, enhancing the stability of Python scripting by adding data tracking. Note that this feature significantly slows down data access, and is typically not included in release builds.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n``WITH_PYTHON_SAFETY``\n```\n\n----------------------------------------\n\nTITLE: SPDX Copyright Header for Blender\nDESCRIPTION: Standard SPDX license identifier and copyright notice for Blender source files, indicating copyright ownership by Blender Authors from 2006.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files for the xxhash library. It sets the SRC variable to include xxhash.c and xxhash.h.\nSOURCE: https://github.com/blender/blender/blob/main/extern/xxhash/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  xxhash.c\n  xxhash.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Definitions for Blender Testing in CMake\nDESCRIPTION: Sets compiler definitions for GFLAGS and GLOG libraries, and defines the GFLAGS namespace for Blender. These definitions are crucial for integrating external libraries into the Blender testing framework.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(${GFLAGS_DEFINES})\nadd_definitions(${GLOG_DEFINES})\nadd_definitions(-DBLENDER_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Alembic Library in CMake\nDESCRIPTION: Sets up include directories for the Alembic module, including local directories and external dependencies like Alembic and OpenEXR.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/alembic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../common\n  ../../editors/include\n  ../../makesrna\n  ../../../../intern/utfconv\n)\n\nset(INC_SYS\n  ${ALEMBIC_INCLUDE_DIRS}\n  ${OPENEXR_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Test Runner Target in CMake\nDESCRIPTION: Creates the main test runner target and sets up platform-specific linker libraries.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nblender_src_gtest_ex(\n  NAME blender\n  SRC \"${SRC}\"\n  EXTRA_LIBS \"${TEST_LIBS}\"\n)\nsetup_platform_linker_libs(blender_test)\n```\n\n----------------------------------------\n\nTITLE: GLSL Source List Generation\nDESCRIPTION: Generates a header file containing shader source definitions by processing each GLSL file and creating SHADER_SOURCE entries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SOURCE_CONTENT \"\")\nforeach(GLSL_FILE ${GLSL_SRC})\n  get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n  string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n  string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\nendforeach()\n\nset(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_compositor_source_list.h\")\nfile(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Source Files for Guarded Allocation in CMake\nDESCRIPTION: Defines include directories and source files for the guarded allocation library, including both public and system includes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/guardedalloc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  ./intern/leak_detector.cc\n  ./intern/mallocn.cc\n  ./intern/mallocn_guarded_impl.cc\n  ./intern/mallocn_lockfree_impl.cc\n  ./intern/memory_usage.cc\n\n  MEM_guardedalloc.h\n  ./intern/mallocn_inline.hh\n  ./intern/mallocn_intern.hh\n  ./intern/mallocn_intern_function_pointers.hh\n\n  # only so the header is known by cmake\n  ../atomic/atomic_ops.h\n  ../atomic/intern/atomic_ops_ext.h\n  ../atomic/intern/atomic_ops_msvc.h\n  ../atomic/intern/atomic_ops_unix.h\n  ../atomic/intern/atomic_ops_utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Shader Sources\nDESCRIPTION: Defines a list of GLSL shader test files used for GPU backend testing\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SRC_TEST\n  tests/shaders/gpu_math_test.glsl\n  tests/shaders/gpu_buffer_texture_test.glsl\n  tests/shaders/gpu_compute_1d_test.glsl\n  tests/shaders/gpu_compute_2d_test.glsl\n  tests/shaders/gpu_compute_ibo_test.glsl\n  tests/shaders/gpu_compute_ssbo_test.glsl\n  tests/shaders/gpu_compute_vbo_test.glsl\n  tests/shaders/gpu_compute_dummy_test.glsl\n  tests/shaders/gpu_specialization_test.glsl\n  tests/shaders/gpu_framebuffer_layer_viewport_test.glsl\n  tests/shaders/gpu_framebuffer_subpass_input_test.glsl\n  tests/shaders/gpu_push_constants_test.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Threads\nDESCRIPTION: This snippet includes the FindThreads module, which is used to find the appropriate threading library for the system.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(FindThreads)\n```\n\n----------------------------------------\n\nTITLE: Checking Operator Poll Conditions in Blender Python API\nDESCRIPTION: Shows how to check if an operator can run in the current context by using its poll() method, which avoids raising exceptions when the context is incorrect.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_quickstart.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif bpy.ops.view3d.render_border.poll():\n    bpy.ops.view3d.render_border()\n```\n\n----------------------------------------\n\nTITLE: Running Bloat Test for Format Library\nDESCRIPTION: Command to execute the bloat test for the {fmt} library after setting up the benchmark repository.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ make bloat-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests in CMake for Cycles\nDESCRIPTION: Adds the test subdirectory when WITH_GTESTS is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Vertex Shader Source Files Configuration\nDESCRIPTION: Defines the list of vertex shader source files for various overlay functionalities including armature, mesh editing, particle systems, and more.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_VERT\n  overlay_armature_dof_vert.glsl\n  overlay_armature_envelope_outline_vert.glsl\n  [... truncated for brevity ...]\n  overlay_wireframe_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Minilzo Library with CMake\nDESCRIPTION: This command adds the minilzo library to the Blender project using CMake. It utilizes previously set variables for sources, include paths, and libraries. The command integrates the specified source files into the build system, facilitating modular development.\nSOURCE: https://github.com/blender/blender/blob/main/extern/lzo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_minilzo \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Specifies the source files to be compiled for the ID management module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/id_management/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ed_id_management.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Files Variable in CMake for Blender\nDESCRIPTION: Initializes a variable for source files that will be part of the Blender binary. The comment suggests that additional sources for data-files may be appended later.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/datafiles/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Malloc Stats and Valgrind Support in CMake\nDESCRIPTION: Sets compilation definitions based on the availability of malloc_stats.h and Valgrind memory debugging option.\nSOURCE: https://github.com/blender/blender/blob/main/intern/guardedalloc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_MALLOC_STATS_H)\n  add_definitions(-DHAVE_MALLOC_STATS_H)\nendif()\n\nif(WITH_MEM_VALGRIND)\n  add_definitions(-DWITH_MEM_VALGRIND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Sources\nDESCRIPTION: Adds platform-specific source files and libraries based on the target operating system (Windows, Apple, Unix).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  list(APPEND SRC\n    intern/fileops_apple.mm\n    intern/storage_apple.mm\n  )\nendif()\n\nif(UNIX AND NOT APPLE)\n  list(APPEND LIB\n    bf_intern_libc_compat\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Shader FX\nDESCRIPTION: Lists all source files that comprise the shader effects library, including various shader implementations and utility files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/shader_fx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/FX_shader_util.h\n  intern/FX_ui_common.cc\n\n  intern/FX_shader_blur.cc\n  intern/FX_shader_colorize.cc\n  intern/FX_shader_flip.cc\n  intern/FX_shader_glow.cc\n  intern/FX_shader_pixel.cc\n  intern/FX_shader_rim.cc\n  intern/FX_shader_shadow.cc\n  intern/FX_shader_swirl.cc\n  intern/FX_shader_util.cc\n  intern/FX_shader_wave.cc\n\n  intern/FX_ui_common.h\n  FX_shader_types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting the CMake Module Path\nDESCRIPTION: This snippet sets the CMake module path to the cmake directory within the project source directory. This allows CMake to find custom modules located in that directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n```\n\n----------------------------------------\n\nTITLE: Conditional Schur Specialization Sources\nDESCRIPTION: Conditionally adds specialized matrix view and eliminator source files when libmv Schur specializations are enabled. Otherwise defines a restriction flag.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ceres/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBMV_SCHUR_SPECIALIZATIONS)\n  list(APPEND SRC\n    internal/ceres/generated/partitioned_matrix_view_2_2_2.cc\n    internal/ceres/generated/partitioned_matrix_view_2_2_3.cc\n    internal/ceres/generated/partitioned_matrix_view_2_2_4.cc\n    [...]\n  )\nelse()\n  add_definitions(-DCERES_RESTRICT_SCHUR_SPECIALIZATION)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for BVH Compilation in CMake\nDESCRIPTION: Sets up the include directories for compiling the BVH module, using previously defined INC and INC_SYS variables.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: TBB Windows Compatibility Configuration\nDESCRIPTION: Adds NOMINMAX definition for Windows builds with TBB to prevent macro conflicts between Windows.h and STL.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curves/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding License Directory in CMake Build\nDESCRIPTION: CMake command to include the 'license' subdirectory in the build process. Includes SPDX copyright and license headers.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/doc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SPDX-FileCopyrightText: 2011-2022 Blender Foundation\n#\n# SPDX-License-Identifier: Apache-2.0\n\nadd_subdirectory(license)\n```\n\n----------------------------------------\n\nTITLE: Defining DNA Header Files in CMake for Blender\nDESCRIPTION: Sets a CMake variable SRC_DNA_INC with a list of DNA header files used in Blender. These files define the core data structures and types used throughout the Blender codebase.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_DNA_INC\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_ID.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_ID_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_action_types.h\n  # ... (truncated for brevity)\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_world_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_xr_types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Inefficient String Writing to File\nDESCRIPTION: Shows the slowest method of joining strings for file writing using string concatenation.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_best_practice.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfile.write(str1 + \" \" + str2 + \" \" + str3 + \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Console Space in CMake\nDESCRIPTION: Defines the library dependencies for the console space component, including various Blender-specific libraries marked as PRIVATE.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_console/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snap Tracks and Channels Structure for Blender Project\nDESCRIPTION: This code block defines the structure and purpose of different snap tracks and channels used in the Blender project's build pipeline. It outlines the stable, candidate, beta, and edge channels, explaining their intended use and update frequency.\nSOURCE: https://github.com/blender/blender/blob/main/release/freedesktop/snap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    <track>/stable            \n        - Latest stable release for the specified track\n    <track>/candidate         \n        - Test builds for the upcoming stable release - *not used for now*\n    <track>/beta              \n        - Nightly automated builds provided by a release branch\n    <track>/edge/<branch>\n        - Nightly or on demand builds - will also make use of branch\n```\n\n----------------------------------------\n\nTITLE: Including ARM-Specific Optimizations in CMake\nDESCRIPTION: Conditionally includes SSE2NEON library for ARM platforms to provide SSE instruction emulation. This allows code optimized for x86 using SSE instructions to run efficiently on ARM processors.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(BLENDER_PLATFORM_ARM)\n  include(cmake/sse2neon.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender GPU Python Module Library\nDESCRIPTION: Calls the blender_add_lib function to create the GPU Python module library using the previously defined sources, include directories, and libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/gpu/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_python_gpu \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sculpt Operator Tests in CMake\nDESCRIPTION: Sets up testing for Blender's sculpt operators and GPU mesh paint functionality when test source directory exists.\nSOURCE: https://github.com/blender/blender/blob/main/tests/python/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_sculpt_operators\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_sculpt.py\n    --\n    --testdir \"${TEST_SRC_DIR}/sculpting\"\n  )\nendif()\n\nif(WITH_GPU_MESH_PAINT_TESTS AND TEST_SRC_DIR_EXISTS)\n  set(render_tests\n    brushes\n  )\n\n  foreach(render_test ${render_tests})\n    add_render_test(\n      sculpt_render_${render_test}\n      ${CMAKE_CURRENT_LIST_DIR}/sculpt_brush_render_tests.py\n      --testdir \"${TEST_SRC_DIR}/sculpting/${render_test}\"\n      --outdir \"${TEST_OUT_DIR}/sculpting\"\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Color Management Files in CMake\nDESCRIPTION: Installs OpenColorIO color management files to the target directory if WITH_OPENCOLORIO is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/creator/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/colormanagement\n    DESTINATION ${TARGETDIR_VER}/datafiles\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths for Blender Lattice Editor\nDESCRIPTION: Sets up include directories for the lattice editor module compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/lattice/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader Source Files\nDESCRIPTION: Defines the list of GLSL fragment shader source files for Grease Pencil functionality including antialiasing, depth merge, and visual effects.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  gpencil_antialiasing_accumulation_frag.glsl\n  gpencil_antialiasing_frag.glsl\n  gpencil_depth_merge_frag.glsl\n  gpencil_frag.glsl\n  gpencil_layer_blend_frag.glsl\n  gpencil_mask_invert_frag.glsl\n  gpencil_vfx_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Writing a file in a single thread using fmt\nDESCRIPTION: This code snippet shows how to write formatted output to a file using the fmt library. The fmt library's output_file function is used to handle file output efficiently.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/os.h>\n\nint main() {\n  auto out = fmt::output_file(\"guide.txt\");\n  out.print(\"Don't {}, \"Panic\");\n}\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example for GPL-Licensed Software\nDESCRIPTION: A sample copyright disclaimer for a GPL-licensed program, typically used when an employer or institution needs to disclaim copyright interest in software written by an employee or student.\nSOURCE: https://github.com/blender/blender/blob/main/doc/license/GPL-license.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Running Pre-upload Checks for Blender Release\nDESCRIPTION: Command to run checks before uploading a Blender release to PyPI. Requires specifying the version number and Git hash.\nSOURCE: https://github.com/blender/blender/blob/main/release/pypi/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./upload-release.py --version X.X.X --git-hash abcd1234 --check\n```\n\n----------------------------------------\n\nTITLE: Defining and Installing License Files with CMake for Blender Cycles\nDESCRIPTION: This CMake script defines a list of license files that need to be included with the Blender Cycles render engine and uses the delayed_install function to copy them to the installation directory. The licenses include Apache 2.0, BSD, MIT, Zlib, and other standard open source licenses.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/doc/license/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LICENSES\n  Apache2-license.txt\n  BSD-3-Clause-license.txt\n  MIT-license.txt\n  readme.txt\n  SPDX-license-identifiers.txt\n  Zlib-license.txt\n)\n\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${LICENSES}\" ${CYCLES_INSTALL_PATH}/license)\n```\n\n----------------------------------------\n\nTITLE: Enabling NaN Debugging in CMake for Cycles\nDESCRIPTION: Adds a compilation flag for NaN debugging when WITH_CYCLES_DEBUG_NAN is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_DEBUG_NAN)\n  add_definitions(-DWITH_CYCLES_DEBUG_NAN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Wayland Dynamic Loading Library with Blender's CMake Function\nDESCRIPTION: Adds the Wayland dynamic loading library to the Blender build system using the blender_add_lib custom CMake function, including all source files, include paths, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_wayland_dynload \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Library using CMake in Blender\nDESCRIPTION: This snippet sets up a library in the Blender project using CMake. It defines the source files, includes directories, and calls a utility function to add the library to the build. The 'blender_add_lib' function integrates the wcwidth library with specified parameters.\nSOURCE: https://github.com/blender/blender/blob/main/extern/wcwidth/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  wcwidth.c\n\n  wcwidth.h\n)\n\nset(LIB\n)\n\nblender_add_lib(extern_wcwidth \\\"${SRC}\\\" \\\"${INC}\\\" \\\"${INC_SYS}\\\" \\\"${LIB}\\\")\n```\n\n----------------------------------------\n\nTITLE: Building Main Library Target\nDESCRIPTION: Creates the main Blender library target and its alias using collected sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenlib/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blenlib \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blenlib ALIAS bf_blenlib)\n```\n\n----------------------------------------\n\nTITLE: Setting the LEMON Version\nDESCRIPTION: This code block attempts to determine the LEMON version from either a cmake file, an environment variable, or the Mercurial repository. It sets the `LEMON_VERSION` variable which is later used for versioning the project.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(EXISTS ${PROJECT_SOURCE_DIR}/cmake/version.cmake)\n  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/version.cmake)\nELSEIF(DEFINED ENV{LEMON_VERSION})\n  SET(LEMON_VERSION $ENV{LEMON_VERSION} CACHE STRING \"LEMON version string.\")\nELSE()\n  EXECUTE_PROCESS(\n    COMMAND\n    hg log -r. --template \"{latesttag}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    OUTPUT_VARIABLE HG_REVISION_TAG\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  EXECUTE_PROCESS(\n    COMMAND\n    hg log -r. --template \"{latesttagdistance}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    OUTPUT_VARIABLE HG_REVISION_DIST\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  EXECUTE_PROCESS(\n    COMMAND\n    hg log -r. --template \"{node|short}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    OUTPUT_VARIABLE HG_REVISION_ID\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n\n  IF(HG_REVISION_TAG STREQUAL \"\")\n    SET(HG_REVISION_ID \"hg-tip\")\n  ELSE()\n    IF(HG_REVISION_TAG STREQUAL \"null\")\n      SET(HG_REVISION_TAG \"trunk\")\n    ELSEIF(HG_REVISION_TAG MATCHES \"^r\")\n      STRING(SUBSTRING ${HG_REVISION_TAG} 1 -1 HG_REVISION_TAG)\n    ENDIF()\n    IF(HG_REVISION_DIST STREQUAL \"0\")\n      SET(HG_REVISION ${HG_REVISION_TAG})\n    ELSE()\n      SET(HG_REVISION\n\t\"${HG_REVISION_TAG}+${HG_REVISION_DIST}-${HG_REVISION_ID}\")\n    ENDIF()\n  ENDIF()\n\n  SET(LEMON_VERSION ${HG_REVISION} CACHE STRING \"LEMON version string.\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Cycles in CMake\nDESCRIPTION: Defines the include directories for building the Cycles rendering engine. This includes both regular include paths and system include paths needed for compilation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/blender/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n  ../../../source/blender/makesrna\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna/intern\n)\n\nset(INC_SYS\n  ${Epoxy_INCLUDE_DIRS}\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the Quadriflow library, including source directories, third-party libraries like pcg32 and pss, the Lemon include directories, and the generated Lemon directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(INC\n  src\n  3rd/pcg32\n  3rd/pss\n  ${LEMON_INCLUDE_DIRS}\n  ${LEMON_GEN_DIR}\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths for Freestyle Library\nDESCRIPTION: Specifies include directories for building the Freestyle library, including both internal and system paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/freestyle/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../makesrna\n  ../python\n  ../python/intern\n  ../render/intern\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Build Directories with CMake\nDESCRIPTION: CMake configuration script that defines the build structure for Blender. It includes conditional compilation for NDOF input support and organizes the compilation of multiple subsystems including UI spaces, core functionality, and utility modules.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER)\n  if(WITH_INPUT_NDOF)\n    add_definitions(-DWITH_INPUT_NDOF)\n  endif()\n\n  add_subdirectory(animation)\n  add_subdirectory(armature)\n  add_subdirectory(asset)\n  add_subdirectory(curve)\n  add_subdirectory(curves)\n  add_subdirectory(geometry)\n  add_subdirectory(gizmo_library)\n  add_subdirectory(gpencil_legacy)\n  add_subdirectory(grease_pencil)\n  add_subdirectory(id_management)\n  add_subdirectory(interface)\n  add_subdirectory(io)\n  add_subdirectory(lattice)\n  add_subdirectory(mask)\n  add_subdirectory(mesh)\n  add_subdirectory(metaball)\n  add_subdirectory(object)\n  add_subdirectory(physics)\n  add_subdirectory(pointcloud)\n  add_subdirectory(render)\n  add_subdirectory(scene)\n  add_subdirectory(sculpt_paint)\n  add_subdirectory(sound)\n  add_subdirectory(space_action)\n  add_subdirectory(space_api)\n  add_subdirectory(space_buttons)\n  add_subdirectory(space_clip)\n  add_subdirectory(space_console)\n  add_subdirectory(space_file)\n  add_subdirectory(space_graph)\n  add_subdirectory(space_image)\n  add_subdirectory(space_info)\n  add_subdirectory(space_nla)\n  add_subdirectory(space_node)\n  add_subdirectory(space_outliner)\n  add_subdirectory(space_script)\n  add_subdirectory(space_sequencer)\n  add_subdirectory(space_spreadsheet)\n  add_subdirectory(space_statusbar)\n  add_subdirectory(space_text)\n  add_subdirectory(space_topbar)\n  add_subdirectory(space_userpref)\n  add_subdirectory(space_view3d)\n  add_subdirectory(transform)\n  add_subdirectory(undo)\n  add_subdirectory(util)\n  add_subdirectory(uvedit)\n  add_subdirectory(screen)\nendif()\n\nadd_subdirectory(datafiles)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the required library dependencies for the shader effects module, including various Blender internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/shader_fx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Blender Screenshot in Markdown\nDESCRIPTION: This code snippet demonstrates how to embed an image in Markdown format, specifically showing a Blender screenshot with alt text and title.\nSOURCE: https://github.com/blender/blender/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Blender screenshot](https://code.blender.org/wp-content/uploads/2018/12/springrg.jpg \"Blender screenshot\")\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Audaspace\nDESCRIPTION: Specifies the private and public header files for the Audaspace project, including both internal and API headers.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PRIVATE_HDR\n\tsrc/sequence/SequenceHandle.h\n)\n\nset(PUBLIC_HDR\n\tinclude/devices/DeviceManager.h\n\tinclude/devices/I3DDevice.h\n\t# ... (truncated for brevity)\n\tinclude/util/StreamBuffer.h\n\tinclude/util/ThreadPool.h\n)\n\nset(HDR ${PRIVATE_HDR} ${PUBLIC_HDR})\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for Blender Gizmo Library\nDESCRIPTION: Specifies required library dependencies for the gizmo library, including core Blender components and internal utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/gizmo_library/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Memory Utility Library Target in CMake\nDESCRIPTION: Creates the library target for the Blender memory utility library using the blender_add_lib function. It also creates an alias target for easier referencing.\nSOURCE: https://github.com/blender/blender/blob/main/intern/memutil/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_memutil \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::memutil ALIAS bf_intern_memutil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for GLOG\nDESCRIPTION: Sets local and system include directories for the GLOG library implementation. Defines source files for compilation and platform-specific configurations.\nSOURCE: https://github.com/blender/blender/blob/main/extern/glog/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  src\n  ../gflags/src\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  src/demangle.cc\n  src/logging.cc\n  src/raw_logging.cc\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Blender API Gotchas\nDESCRIPTION: This snippet defines a table of contents in reStructuredText format, listing the various subsections of the Blender API Gotchas documentation. It uses the 'toctree' directive to create a hierarchical structure of the document.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotcha.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   info_gotchas_crashes.rst\n   info_gotchas_internal_data_and_python_objects.rst\n   info_gotchas_operators.rst\n   info_gotchas_meshes.rst\n   info_gotchas_armatures_and_bones.rst\n   info_gotchas_file_paths_and_encoding.rst\n```\n\n----------------------------------------\n\nTITLE: Setting Link Directories with CMake\nDESCRIPTION: This snippet sets the link directory for the project. It adds the directory containing the 'lemon' library to the link path, so the linker can find the library during the linking stage.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Math Constants for Windows\nDESCRIPTION: This snippet adds a preprocessor definition for `_USE_MATH_DEFINES` on Windows systems. This ensures that math constants like PI are available.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: SOF File Structure Description\nDESCRIPTION: Explains the binary structure of a Signed Octree Format (SOF) file, including the header and node representations for intermediate, empty, and leaf nodes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/intern/readme.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<header>\\n\\n<node>\\n\\n<header> is a 4-bytes integer that equals 2 ^ octree_depth. The first byte of a <node> is either 0 (denoting an intermediate node) or 1 (denoting an empty node) or 2 (denoting a leaf node). After the first byte, an intermediate node <node> contains (after the first byte) eight <node> structures for its eight children; an empty node <node> contains one byte of value 0 or 1 denoting if it is inside or outside; and a leaf node contains one byte whose eight bits correspond to the signs at its eight corners (0 for inside and 1 for outside).\n```\n\n----------------------------------------\n\nTITLE: Configuring Freestyle Library Dependencies in CMake\nDESCRIPTION: Defines library dependencies for the Freestyle component, including internal Blender libraries and Python dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/freestyle/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_python_mathutils\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::render\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Cache Variables\nDESCRIPTION: This snippet sets CMake cache variables.  It defines a variable to control whether tests are run with Valgrind, and another to specify the Valgrind flags to use if Valgrind is enabled. These variables are exposed to the user and can be modified via the CMake GUI or command line.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TEST_WITH_VALGRIND \"NO\" CACHE STRING\n  \"Run the test with valgrind (YES/NO).\")\nSET(VALGRIND_FLAGS \"\" CACHE STRING \"Valgrind flags used by the tests.\")\n```\n\n----------------------------------------\n\nTITLE: Defining include directories for Audaspace in CMake\nDESCRIPTION: Sets up the include paths for the Audaspace library, including both internal paths and system-level dependencies through the Audaspace C and Python interfaces.\nSOURCE: https://github.com/blender/blender/blob/main/intern/audaspace/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${AUDASPACE_C_INCLUDE_DIRS}\n  ${AUDASPACE_PY_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Linking Blender Editor Library\nDESCRIPTION: Creates the editor space buttons library and sets up dependencies for RNA prototypes generation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_buttons/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_buttons \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_buttons bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Build Configuration\nDESCRIPTION: Configures Windows-specific linker flags and additional library dependencies for debug builds.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/msgfmt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG \" /nodefaultlib:MSVCRT.lib\")\n  list(APPEND LIB bf_intern_utfconv)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories\nDESCRIPTION: Initializes empty system include directories list for external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/simulation/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for Topbar Space\nDESCRIPTION: Specifies the libraries that the topbar space module depends on. These include core Blender components like kernel, loader, translation, DNA, GPU, and window manager.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_topbar/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template for Employers\nDESCRIPTION: A sample copyright disclaimer template for employers or organizations to disclaim copyright interest in a program written by an employee or member.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/GPL-2.0-or-later.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Adding Python Support Configuration\nDESCRIPTION: Configures Python support by adding necessary definitions and include directories when Python support is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenfont/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Cycles Integrator in CMake\nDESCRIPTION: Defines include directories for the Cycles integrator build. It sets up both regular and system include paths.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/integrator/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths for Blender Gizmo Library\nDESCRIPTION: Defines include directories for the gizmo library compilation, including core Blender headers and Eigen library integration.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/gizmo_library/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../interface\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (CUEW)\nDESCRIPTION: This snippet sets the system include directories, which are typically empty for CUEW, as system headers are not directly included here.\nSOURCE: https://github.com/blender/blender/blob/main/extern/cuew/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Testing Library in CMake\nDESCRIPTION: Adds the Blender testing library to the build system using the previously defined source files, include directories, and library dependencies. This function call is responsible for creating the actual library target.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/testing/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_testing_main \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: This snippet sets the default build type to Release if it is not already defined.  The CMAKE_BUILD_TYPE is also set as a cache variable so the user can change it.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT CMAKE_BUILD_TYPE)\n  SET(CMAKE_BUILD_TYPE \"Release\")\nENDIF()\n\nSET( CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING\n    \"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel Maintainer.\"\n    FORCE )\n```\n\n----------------------------------------\n\nTITLE: Setting Maintainer Flags\nDESCRIPTION: This code snippet configures compiler and linker flags specifically for 'Maintainer' builds, enabling stricter warnings and debugging options. The flags are set differently depending on whether the compiler is MSVC or GCC.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC)\n  SET( CMAKE_CXX_FLAGS_MAINTAINER \"/WX ${CMAKE_CXX_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the C++ compiler during maintainer builds.\"\n    )\n  SET( CMAKE_C_FLAGS_MAINTAINER \"/WX ${CMAKE_CXX_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the C compiler during maintainer builds.\"\n    )\n  SET( CMAKE_EXE_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used for linking binaries during maintainer builds.\"\n    )\n  SET( CMAKE_SHARED_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the shared libraries linker during maintainer builds.\"\n    )\nELSE()\n  SET( CMAKE_CXX_FLAGS_MAINTAINER \"-Werror -ggdb -O0\" CACHE STRING\n    \"Flags used by the C++ compiler during maintainer builds.\"\n    )\n  SET( CMAKE_C_FLAGS_MAINTAINER \"-Werror -O0\" CACHE STRING\n    \"Flags used by the C compiler during maintainer builds.\"\n    )\n  SET( CMAKE_EXE_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used for linking binaries during maintainer builds.\"\n    )\n  SET( CMAKE_SHARED_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the shared libraries linker during maintainer builds.\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring the Cycles Hydra Plugin\nDESCRIPTION: Conditionally builds the Cycles Hydra plugin when WITH_CYCLES_HYDRA_RENDER_DELEGATE is enabled. It sets the source files for the plugin and creates a shared library target with appropriate naming conventions.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  set(SRC_HD_CYCLES_PLUGIN\n    plugin.h\n    plugin.cpp\n  )\n  set(HdCyclesPluginName hdCycles)\n  add_library(${HdCyclesPluginName} SHARED ${SRC_HD_CYCLES_PLUGIN})\n\n  set_target_properties(${HdCyclesPluginName}\n    PROPERTIES PREFIX \"\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Memory Length Query Function in C\nDESCRIPTION: Function to retrieve the length of an allocated memory block.\nSOURCE: https://github.com/blender/blender/blob/main/doc/guides/blender-guardedalloc.txt#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nint MEM_allocN_len(void *vmemh);\n```\n\n----------------------------------------\n\nTITLE: Standard Copyright Notice Template\nDESCRIPTION: Template text for the standard copyright and license notice that should be included at the start of each source file.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Configuring LEMONConfig.cmake\nDESCRIPTION: This snippet configures the LEMONConfig.cmake file using the CONFIGURE_FILE command.  The input file is cmake/LEMONConfig.cmake.in and the output file is cmake/LEMONConfig.cmake.  The @ONLY option means that only variables prefixed with @ will be substituted.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(\n  ${PROJECT_SOURCE_DIR}/cmake/LEMONConfig.cmake.in\n  ${PROJECT_BINARY_DIR}/cmake/LEMONConfig.cmake\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Text Editor Module Library\nDESCRIPTION: Calls the Blender library build function to create the text editor module library using the previously defined sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_text/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_text \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for COLLADA Module in CMake\nDESCRIPTION: Defines the include directories for the COLLADA module, including internal Blender directories and system include directories for OpenCOLLADA.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/collada/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../../editors/include\n  ../../ikplugin\n  ../../makesrna\n  ../../../../intern/iksolver/extern\n)\n\nset(INC_SYS\n  ${OPENCOLLADA_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking LEMON Libraries\nDESCRIPTION: This command links the LEMON library with the required external libraries (GLPK, COIN, CPLEX, SOPLEX).\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"TARGET_LINK_LIBRARIES(lemon\n  ${GLPK_LIBRARIES} ${COIN_LIBRARIES} ${ILOG_LIBRARIES} ${SOPLEX_LIBRARIES}\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Module Path and Dependencies\nDESCRIPTION: Configures the CMake module path to include Blender's custom modules and enables the guarded allocation system.\nSOURCE: https://github.com/blender/blender/blob/main/intern/ghost/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/../../../build_files/cmake/Modules\")\n\nset(WITH_GUARDEDALLOC ON)\n\nadd_executable(datatoc\n  \"${CMAKE_SOURCE_DIR}/../../../source/blender/datatoc/datatoc.c\")\n\n# Fake the current source directory for includes.\nset(_CMAKE_CURRENT_SOURCE_DIR_INIT \"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths for Blender Loader\nDESCRIPTION: Defines public and system include paths for the blenloader module build, including RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenloader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../editors/include\n  ../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${ZSTD_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Libraries and Platform-Specific Settings in CMake\nDESCRIPTION: Sets up library dependencies and handles platform-specific configurations, particularly for Windows systems using pthreads.\nSOURCE: https://github.com/blender/blender/blob/main/intern/guardedalloc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::atomic\n)\n\nif(WIN32 AND NOT UNIX)\n  list(APPEND INC_SYS\n    ${PTHREADS_INC}\n  )\n  if(DEFINED PTHREADS_LIBRARIES)\n    list(APPEND LIB\n      ${PTHREADS_LIBRARIES}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Long Long Type Size\nDESCRIPTION: This snippet includes the CheckTypeSize module and uses it to check the size of the long long type. It then sets the LEMON_HAVE_LONG_LONG variable based on whether the type is supported.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(CheckTypeSize)\nCHECK_TYPE_SIZE(\"long long\" LONG_LONG)\nSET(LEMON_HAVE_LONG_LONG ${HAVE_LONG_LONG})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vulkan Backend in CMake\nDESCRIPTION: This snippet sets up include directories, source files, and libraries for the Vulkan backend. It includes special handling for Apple platforms and adds necessary dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_VULKAN_BACKEND)\n  if(APPLE)\n    list(APPEND INC_SYS\n      ${MOLTENVK_INCLUDE_DIRS}\n    )\n\n    list(APPEND LIB\n      ${MOLTENVK_LIBRARIES}\n    )\n  endif()\n\n  list(APPEND INC\n    ../../../extern/vulkan_memory_allocator\n  )\n  list(APPEND INC_SYS\n    ${VULKAN_INCLUDE_DIRS}\n  )\n\n  list(APPEND INC_SYS\n    ${SHADERC_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    ${VULKAN_SRC}\n  )\n\n  list(APPEND LIB\n    ${VULKAN_LIBRARIES}\n    ${SHADERC_LIBRARIES}\n    extern_vulkan_memory_allocator\n    PRIVATE bf::extern::xxhash\n  )\n\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty OSO Sources List in CMake\nDESCRIPTION: Creates an initially empty list for compiled OSL shader objects (.oso files) that will be filled during the compilation process.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/shaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_OSO\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for UTF Conversion Library\nDESCRIPTION: Specifies the core source and header files for the UTF conversion library. These files provide the main functionality for UTF character conversion.\nSOURCE: https://github.com/blender/blender/blob/main/intern/utfconv/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  utfconv.cc\n\n  utfconv.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Shader Nodes\nDESCRIPTION: Defines include paths for shader node compilation, including local directories and binary output paths for RNA prototypes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/shader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../makesrna\n  ../../../../intern/sky/include\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender IO Common Library in CMake\nDESCRIPTION: Defines include directories for the Blender IO common library, including local and system includes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../../makesrna\n)\n\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: GNU GPL License Notice for Blender\nDESCRIPTION: Standard GNU GPL license notice text that establishes Blender as free software and outlines the terms of redistribution and modification. Includes copyright information and warranty disclaimer.\nSOURCE: https://github.com/blender/blender/blob/main/release/text/copyright.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBlender, the free and open source 3D creation suite\nCopyright (C) 2023  Blender Foundation\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Finding Solver Packages\nDESCRIPTION: This snippet uses FIND_PACKAGE to detect if GLPK, ILOG, COIN, and SOPLEX libraries are available. The availability of these libraries affects later code that configure the build depending on whether these solvers are present.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_ENABLE_GLPK)\n  FIND_PACKAGE(GLPK 4.33)\nENDIF(LEMON_ENABLE_GLPK)\nIF(LEMON_ENABLE_ILOG)\n  FIND_PACKAGE(ILOG)\nENDIF(LEMON_ENABLE_ILOG)\nIF(LEMON_ENABLE_COIN)\n  FIND_PACKAGE(COIN)\nENDIF(LEMON_ENABLE_COIN)\nIF(LEMON_ENABLE_SOPLEX)\n  FIND_PACKAGE(SOPLEX)\nENDIF(LEMON_ENABLE_SOPLEX)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Lattice Editor Library\nDESCRIPTION: Creates the lattice editor library using the defined sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/lattice/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_lattice \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Building Mantaflow Library for Blender\nDESCRIPTION: Adds the Mantaflow module as a library to the Blender build system with all configured sources, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_mantaflow \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Handling GLPK Dependency\nDESCRIPTION: This block handles the GLPK dependency. It adds `glpk.cc` to the source files, includes the GLPK include directories, and installs the GLPK DLLs on Windows.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LEMON_HAVE_GLPK)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} glpk.cc)\n  INCLUDE_DIRECTORIES(${GLPK_INCLUDE_DIRS})\n  IF(WIN32)\n    INSTALL(FILES ${GLPK_BIN_DIR}/glpk.dll DESTINATION bin)\n    INSTALL(FILES ${GLPK_BIN_DIR}/libltdl3.dll DESTINATION bin)\n    INSTALL(FILES ${GLPK_BIN_DIR}/zlib1.dll DESTINATION bin)\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for User Preferences Editor in CMake\nDESCRIPTION: Specifies the required library dependencies for building the user preferences editor module. These include Blender's core components like asset system, kernel, loading, translation, and other utility libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_userpref/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Msgfmt Executable Build Configuration\nDESCRIPTION: Creates and configures the msgfmt executable target with include directories and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/msgfmt/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(msgfmt ${SRC})\nsetup_platform_linker_flags(msgfmt)\nblender_target_include_dirs(msgfmt ${INC})\ntarget_link_libraries(msgfmt ${LIB})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Shared Library - C++\nDESCRIPTION: This snippet configures the CMake project for the libgmpxx shared library. It includes necessary directories, sets compilation definitions, and specifies which source files to compile into the library. It links against the GMP library and installs the built library to a specified destination.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_gmpxx.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1)\nproject(libgmpxx)\n\ninclude_directories(. cxx ${GMP_INCLUDE_DIR})\nadd_definitions(-D__GMP_WITHIN_GMPXX)\nadd_library(libgmpxx SHARED\n  cxx/dummy.cc\n  cxx/isfuns.cc\n  cxx/ismpf.cc\n  cxx/ismpq.cc\n  cxx/ismpz.cc\n  cxx/ismpznw.cc\n  cxx/limits.cc\n  cxx/osdoprnti.cc\n  cxx/osfuns.cc\n  cxx/osmpf.cc\n  cxx/osmpq.cc\n  cxx/osmpz.cc\n)\ntarget_link_libraries(libgmpxx ${GMP_LIBRARY})\ninstall(TARGETS libgmpxx DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Programs\nDESCRIPTION: This code snippet demonstrates how to display a short notice in interactive programs when they start. It includes the program's name, copyright information, warranty disclaimer, and information on redistribution, providing commands to show the appropriate parts of the General Public License.\nSOURCE: https://github.com/blender/blender/blob/main/doc/license/GPL3-license.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\t<program>  Copyright (C) <year>  <name of author>\n\tThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n\tThis is free software, and you are welcome to redistribute it\n\tunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Defining Freestyle Source Files in CMake\nDESCRIPTION: This CMake snippet defines the source files for the Freestyle module in Blender. It includes various C++ and header files organized into different categories like application, geometry, image processing, and Python bindings.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/freestyle/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  FRS_freestyle.h\n  intern/application/AppCanvas.cpp\n  intern/application/AppCanvas.h\n  intern/application/AppConfig.cpp\n  intern/application/AppConfig.h\n  intern/application/AppView.cpp\n  intern/application/AppView.h\n  intern/application/Controller.cpp\n  intern/application/Controller.h\n  intern/blender_interface/BlenderFileLoader.cpp\n  intern/blender_interface/BlenderFileLoader.h\n  intern/blender_interface/BlenderStrokeRenderer.cpp\n  intern/blender_interface/BlenderStrokeRenderer.h\n  intern/blender_interface/BlenderStyleModule.h\n  intern/blender_interface/FRS_freestyle.cpp\n  intern/geometry/BBox.h\n  intern/geometry/Bezier.cpp\n  intern/geometry/Bezier.h\n  intern/geometry/FastGrid.cpp\n  intern/geometry/FastGrid.h\n  intern/geometry/FitCurve.cpp\n  intern/geometry/FitCurve.h\n  intern/geometry/Geom.h\n  intern/geometry/GeomCleaner.cpp\n  intern/geometry/GeomCleaner.h\n  intern/geometry/GeomUtils.cpp\n  intern/geometry/GeomUtils.h\n  intern/geometry/Grid.cpp\n  intern/geometry/Grid.h\n  intern/geometry/GridHelpers.cpp\n  intern/geometry/GridHelpers.h\n  intern/geometry/HashGrid.cpp\n  intern/geometry/HashGrid.h\n  intern/geometry/Noise.cpp\n  intern/geometry/Noise.h\n  intern/geometry/Polygon.h\n  intern/geometry/SweepLine.h\n  intern/geometry/VecMat.h\n  intern/geometry/matrix_util.cpp\n  intern/geometry/matrix_util.h\n  intern/geometry/normal_cycle.cpp\n  intern/geometry/normal_cycle.h\n  intern/image/GaussianFilter.cpp\n  intern/image/GaussianFilter.h\n  intern/image/Image.h\n  intern/image/ImagePyramid.cpp\n  intern/image/ImagePyramid.h\n  intern/python/BPy_BBox.cpp\n  intern/python/BPy_BBox.h\n  intern/python/BPy_BinaryPredicate0D.cpp\n  intern/python/BPy_BinaryPredicate0D.h\n  intern/python/BPy_BinaryPredicate1D.cpp\n  intern/python/BPy_BinaryPredicate1D.h\n  intern/python/BPy_ContextFunctions.cpp\n  intern/python/BPy_ContextFunctions.h\n  intern/python/BPy_Convert.cpp\n  intern/python/BPy_Convert.h\n  intern/python/BPy_Freestyle.cpp\n  intern/python/BPy_Freestyle.h\n  intern/python/BPy_FrsMaterial.cpp\n  intern/python/BPy_FrsMaterial.h\n  intern/python/BPy_FrsNoise.cpp\n  intern/python/BPy_FrsNoise.h\n  intern/python/BPy_Id.cpp\n  intern/python/BPy_Id.h\n  intern/python/BPy_IntegrationType.cpp\n  intern/python/BPy_IntegrationType.h\n  intern/python/BPy_Interface0D.cpp\n  intern/python/BPy_Interface0D.h\n  intern/python/BPy_Interface1D.cpp\n  intern/python/BPy_Interface1D.h\n  intern/python/BPy_Iterator.cpp\n  intern/python/BPy_Iterator.h\n  intern/python/BPy_MediumType.cpp\n  intern/python/BPy_MediumType.h\n  intern/python/BPy_Nature.cpp\n  intern/python/BPy_Nature.h\n  intern/python/BPy_Operators.cpp\n  intern/python/BPy_Operators.h\n  intern/python/BPy_SShape.cpp\n  intern/python/BPy_SShape.h\n  intern/python/BPy_StrokeAttribute.cpp\n  intern/python/BPy_StrokeAttribute.h\n  intern/python/BPy_StrokeShader.cpp\n  intern/python/BPy_StrokeShader.h\n  intern/python/BPy_UnaryFunction0D.cpp\n  intern/python/BPy_UnaryFunction0D.h\n  intern/python/BPy_UnaryFunction1D.cpp\n  intern/python/BPy_UnaryFunction1D.h\n  intern/python/BPy_UnaryPredicate0D.cpp\n  intern/python/BPy_UnaryPredicate0D.h\n  intern/python/BPy_UnaryPredicate1D.cpp\n  intern/python/BPy_UnaryPredicate1D.h\n  intern/python/BPy_ViewMap.cpp\n  intern/python/BPy_ViewMap.h\n  intern/python/BPy_ViewShape.cpp\n  intern/python/BPy_ViewShape.h\n  intern/python/BinaryPredicate1D/BPy_FalseBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_FalseBP1D.h\n  intern/python/BinaryPredicate1D/BPy_Length2DBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_Length2DBP1D.h\n  intern/python/BinaryPredicate1D/BPy_SameShapeIdBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_SameShapeIdBP1D.h\n  intern/python/BinaryPredicate1D/BPy_TrueBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_TrueBP1D.h\n  intern/python/BinaryPredicate1D/BPy_ViewMapGradientNormBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_ViewMapGradientNormBP1D.h\n  intern/python/Director.cpp\n  intern/python/Director.h\n  intern/python/Interface0D/BPy_CurvePoint.cpp\n  intern/python/Interface0D/BPy_CurvePoint.h\n  intern/python/Interface0D/BPy_SVertex.cpp\n  intern/python/Interface0D/BPy_SVertex.h\n  intern/python/Interface0D/BPy_ViewVertex.cpp\n  intern/python/Interface0D/BPy_ViewVertex.h\n  intern/python/Interface0D/CurvePoint/BPy_StrokeVertex.cpp\n  intern/python/Interface0D/CurvePoint/BPy_StrokeVertex.h\n  intern/python/Interface0D/ViewVertex/BPy_NonTVertex.cpp\n  intern/python/Interface0D/ViewVertex/BPy_NonTVertex.h\n  intern/python/Interface0D/ViewVertex/BPy_TVertex.cpp\n  intern/python/Interface0D/ViewVertex/BPy_TVertex.h\n  intern/python/Interface1D/BPy_FEdge.cpp\n  intern/python/Interface1D/BPy_FEdge.h\n  intern/python/Interface1D/BPy_FrsCurve.cpp\n  intern/python/Interface1D/BPy_FrsCurve.h\n  intern/python/Interface1D/BPy_Stroke.cpp\n  intern/python/Interface1D/BPy_Stroke.h\n  intern/python/Interface1D/BPy_ViewEdge.cpp\n  intern/python/Interface1D/BPy_ViewEdge.h\n  intern/python/Interface1D/Curve/BPy_Chain.cpp\n  intern/python/Interface1D/Curve/BPy_Chain.h\n  intern/python/Interface1D/FEdge/BPy_FEdgeSharp.cpp\n  intern/python/Interface1D/FEdge/BPy_FEdgeSharp.h\n  intern/python/Interface1D/FEdge/BPy_FEdgeSmooth.cpp\n  intern/python/Interface1D/FEdge/BPy_FEdgeSmooth.h\n  intern/python/Iterator/BPy_AdjacencyIterator.cpp\n  intern/python/Iterator/BPy_AdjacencyIterator.h\n  intern/python/Iterator/BPy_ChainPredicateIterator.cpp\n  intern/python/Iterator/BPy_ChainPredicateIterator.h\n  intern/python/Iterator/BPy_ChainSilhouetteIterator.cpp\n  intern/python/Iterator/BPy_ChainSilhouetteIterator.h\n  intern/python/Iterator/BPy_ChainingIterator.cpp\n  intern/python/Iterator/BPy_ChainingIterator.h\n  intern/python/Iterator/BPy_CurvePointIterator.cpp\n  intern/python/Iterator/BPy_CurvePointIterator.h\n  intern/python/Iterator/BPy_Interface0DIterator.cpp\n  intern/python/Iterator/BPy_Interface0DIterator.h\n  intern/python/Iterator/BPy_SVertexIterator.cpp\n  intern/python/Iterator/BPy_SVertexIterator.h\n  intern/python/Iterator/BPy_StrokeVertexIterator.cpp\n  intern/python/Iterator/BPy_StrokeVertexIterator.h\n  intern/python/Iterator/BPy_ViewEdgeIterator.cpp\n  intern/python/Iterator/BPy_ViewEdgeIterator.h\n  intern/python/Iterator/BPy_orientedViewEdgeIterator.cpp\n  intern/python/Iterator/BPy_orientedViewEdgeIterator.h\n  intern/python/StrokeShader/BPy_BackboneStretcherShader.cpp\n  intern/python/StrokeShader/BPy_BackboneStretcherShader.h\n  intern/python/StrokeShader/BPy_BezierCurveShader.cpp\n  intern/python/StrokeShader/BPy_BezierCurveShader.h\n  intern/python/StrokeShader/BPy_BlenderTextureShader.cpp\n  intern/python/StrokeShader/BPy_BlenderTextureShader.h\n  intern/python/StrokeShader/BPy_CalligraphicShader.cpp\n  intern/python/StrokeShader/BPy_CalligraphicShader.h\n  intern/python/StrokeShader/BPy_ColorNoiseShader.cpp\n  intern/python/StrokeShader/BPy_ColorNoiseShader.h\n  intern/python/StrokeShader/BPy_ConstantColorShader.cpp\n  intern/python/StrokeShader/BPy_ConstantColorShader.h\n  intern/python/StrokeShader/BPy_ConstantThicknessShader.cpp\n  intern/python/StrokeShader/BPy_ConstantThicknessShader.h\n  intern/python/StrokeShader/BPy_ConstrainedIncreasingThicknessShader.cpp\n  intern/python/StrokeShader/BPy_ConstrainedIncreasingThicknessShader.h\n  intern/python/StrokeShader/BPy_GuidingLinesShader.cpp\n  intern/python/StrokeShader/BPy_GuidingLinesShader.h\n  intern/python/StrokeShader/BPy_IncreasingColorShader.cpp\n  intern/python/StrokeShader/BPy_IncreasingColorShader.h\n  intern/python/StrokeShader/BPy_IncreasingThicknessShader.cpp\n  intern/python/StrokeShader/BPy_IncreasingThicknessShader.h\n  intern/python/StrokeShader/BPy_PolygonalizationShader.cpp\n  intern/python/StrokeShader/BPy_PolygonalizationShader.h\n  intern/python/StrokeShader/BPy_SamplingShader.cpp\n  intern/python/StrokeShader/BPy_SamplingShader.h\n  intern/python/StrokeShader/BPy_SmoothingShader.cpp\n  intern/python/StrokeShader/BPy_SmoothingShader.h\n  intern/python/StrokeShader/BPy_SpatialNoiseShader.cpp\n  intern/python/StrokeShader/BPy_SpatialNoiseShader.h\n  intern/python/StrokeShader/BPy_StrokeTextureStepShader.cpp\n  intern/python/StrokeShader/BPy_StrokeTextureStepShader.h\n  intern/python/StrokeShader/BPy_ThicknessNoiseShader.cpp\n  intern/python/StrokeShader/BPy_ThicknessNoiseShader.h\n  intern/python/StrokeShader/BPy_TipRemoverShader.cpp\n  intern/python/StrokeShader/BPy_TipRemoverShader.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DDouble.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DDouble.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DEdgeNature.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DEdgeNature.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DFloat.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DFloat.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DId.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DId.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DMaterial.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DMaterial.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DUnsigned.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DUnsigned.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec2f.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec2f.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec3f.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec3f.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVectorViewShape.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVectorViewShape.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DViewShape.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DViewShape.h\n  intern/python/UnaryFunction0D/UnaryFunction0D_Id/BPy_ShapeIdF0D.cpp\n  intern/python/UnaryFunction0D/UnaryFunction0D_Id/BPy_ShapeIdF0D.h\n  intern/python/UnaryFunction0D/UnaryFunction0D_Material/BPy_MaterialF0D.cpp\n  intern/python/UnaryFunction0D/UnaryFunction0D_Material/BPy_MaterialF0D.h\n  intern/python/UnaryFunction0D/UnaryFunction0D_Nature_EdgeNature/BPy_CurveNatureF0D.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Audaspace\nDESCRIPTION: Lists all the source files that are part of the Audaspace project, organized by functionality and module.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n\tsrc/devices/DeviceManager.cpp\n\tsrc/devices/MixingThreadDevice.cpp\n\tsrc/devices/NULLDevice.cpp\n\t# ... (truncated for brevity)\n\tsrc/util/StreamBuffer.cpp\n\tsrc/util/ThreadPool.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TBB Windows Support\nDESCRIPTION: Adds NOMINMAX definition for Windows builds with Threading Building Blocks (TBB) to prevent macro conflicts.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/bmesh/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows TBB Configuration\nDESCRIPTION: Adds NOMINMAX definition for Windows builds with TBB to prevent macro conflicts with STL.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Forcing Redraw During Script Execution in Blender Python\nDESCRIPTION: A discouraged hack to force Blender to redraw during script execution. This approach is not recommended and not supported officially, as modal operators are the preferred solution for long-running operations.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration\nDESCRIPTION: Configures test infrastructure including utility functions and actual test cases when testing is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenloader/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_UTIL_SRC\n    tests/blendfile_loading_base_test.cc\n    tests/blendfile_loading_base_test.h\n  )\n  set(TEST_UTIL_INC\n    ${INC}\n    ../../../tests/gtests\n    ../../../intern/ghost\n  )\n  set(TEST_UTIL_INC_SYS\n    ${INC_SYS}\n    ${GFLAGS_INCLUDE_DIRS}\n    ${GLOG_INCLUDE_DIRS}\n    ${CMAKE_SOURCE_DIR}/extern/gtest/include\n  )\n  set(TEST_UTIL_LIB\n    ${LIB}\n    PRIVATE bf::blenfont\n    bf_blenloader\n  )\n  blender_add_lib(bf_blenloader_test_util \"${TEST_UTIL_SRC}\" \"${TEST_UTIL_INC}\" \"${TEST_UTIL_INC_SYS}\" \"${TEST_UTIL_LIB}\")\n\n  set(TEST_SRC\n    tests/blendfile_load_test.cc\n  )\n  set(TEST_LIB\n    ${LIB}\n    bf_blenloader\n    bf_blenloader_test_util\n  )\n  blender_add_test_suite_lib(blenloader \"${TEST_SRC}\" \"${INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding User Preferences Editor Library in CMake Build\nDESCRIPTION: Creates the Blender user preferences editor library target using the previously defined source files, include directories, and library dependencies. The custom Blender-specific function 'blender_add_lib' is used for this purpose.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_userpref/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_userpref \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for License Documentation Generation Instructions\nDESCRIPTION: This HTML comment provides instructions for updating the auto-generated license documentation in the Blender project. It specifies which files need to be edited to update different sections of the license documentation.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n\nThis document is auto-generated with `make license`.\nTo update it, edit (paths relative to Blender projects root):\n\n * Introduction and formatting: ./tools/utils_maintenance/make_license.py\n * External libraries: ./build_files/build_environment/cmake/versions.cmake\n * Internal libraries: ./extern/*/Blender.README\n * Fonts: ./tools/utils_maintenance/make_license.py\n * New licenses: ./release/license/licenses.json\n\nThen run `make license` and commit `license.md`.\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Flag in Google Mock\nDESCRIPTION: This macro `GMOCK_DECLARE_bool_(name)` allows for the declaration of a boolean flag with a specified name. This flag can then be used throughout the project to manage boolean settings. It requires the flag name as a parameter and can be defined with `GMOCK_DEFINE_bool_(name, default_val, doc)` to specify a default value and documentation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/include/gmock/internal/custom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DECLARE_bool_(name)\n```\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DEFINE_bool_(name, default_val, doc)\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Module Library\nDESCRIPTION: Creates the movie module library using Blender's custom CMake function and sets up an alias for it.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_imbuf_movie \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::imbuf::movie ALIAS bf_imbuf_movie)\n```\n\n----------------------------------------\n\nTITLE: Defining Handle Class Documentation Structure in reStructuredText\nDESCRIPTION: Sets up the documentation structure for the 'Handle' class in the 'aud' module. It uses Sphinx directives to specify the current module and automate class documentation generation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/handle.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nHandle\n======\n\n.. currentmodule:: aud\n.. autoclass:: Handle\n   :members:\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Mask Editor\nDESCRIPTION: Defines the include directories needed for building the mask editor component.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mask/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Cycles Util Library in CMake\nDESCRIPTION: Defines the include directories for the Cycles Util library, including internal paths and system dependencies like ZSTD.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n  ${ZSTD_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Compiler-Specific Warning Flags\nDESCRIPTION: Conditionally removes specific compiler warning flags for GNU GCC and Clang compilers to reduce noise in external library builds\nSOURCE: https://github.com/blender/blender/blob/main/extern/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  remove_cc_flag(\n    \"-Wmisleading-indentation\"\n  )\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  remove_cc_flag(\n    \"-Weverything\"\n    \"-Wextra\"\n    \"-Wnull-pointer-subtraction\"\n    \"-Wcast-function-type-mismatch\"\n    \"-Wignored-qualifiers\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Geometry Module in CMake\nDESCRIPTION: Lists all the source files (.cc) and header files (.hh) that are part of the Blender geometry module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/add_curves_on_mesh.cc\n  intern/curve_constraints.cc\n  intern/curves_remove_and_split.cc\n  intern/extend_curves.cc\n  intern/extract_elements.cc\n  intern/fillet_curves.cc\n  intern/interpolate_curves.cc\n  intern/join_geometries.cc\n  intern/merge_curves.cc\n  intern/merge_layers.cc\n  intern/mesh_boolean.cc\n  intern/mesh_boolean_manifold.cc\n  intern/mesh_copy_selection.cc\n  intern/mesh_merge_by_distance.cc\n  intern/mesh_primitive_cuboid.cc\n  intern/mesh_primitive_cylinder_cone.cc\n  intern/mesh_primitive_grid.cc\n  intern/mesh_primitive_line.cc\n  intern/mesh_primitive_uv_sphere.cc\n  intern/mesh_selection.cc\n  intern/mesh_split_edges.cc\n  intern/mesh_to_curve_convert.cc\n  intern/mesh_to_volume.cc\n  intern/mesh_triangulate.cc\n  intern/mix_geometries.cc\n  intern/point_merge_by_distance.cc\n  intern/points_to_volume.cc\n  intern/randomize.cc\n  intern/realize_instances.cc\n  intern/reorder.cc\n  intern/resample_curves.cc\n  intern/reverse_uv_sampler.cc\n  intern/separate_geometry.cc\n  intern/set_curve_type.cc\n  intern/simplify_curves.cc\n  intern/smooth_curves.cc\n  intern/subdivide_curves.cc\n  intern/transform.cc\n  intern/trim_curves.cc\n  intern/uv_pack.cc\n  intern/uv_parametrizer.cc\n  intern/volume_grid_resample.cc\n\n  GEO_add_curves_on_mesh.hh\n  GEO_curve_constraints.hh\n  GEO_curves_remove_and_split.hh\n  GEO_extend_curves.hh\n  GEO_extract_elements.hh\n  GEO_fillet_curves.hh\n  GEO_interpolate_curves.hh\n  GEO_join_geometries.hh\n  GEO_merge_curves.hh\n  GEO_merge_layers.hh\n  GEO_mesh_boolean.hh\n  GEO_mesh_copy_selection.hh\n  GEO_mesh_merge_by_distance.hh\n  GEO_mesh_primitive_cuboid.hh\n  GEO_mesh_primitive_cylinder_cone.hh\n  GEO_mesh_primitive_grid.hh\n  GEO_mesh_primitive_line.hh\n  GEO_mesh_primitive_uv_sphere.hh\n  GEO_mesh_selection.hh\n  GEO_mesh_split_edges.hh\n  GEO_mesh_to_curve.hh\n  GEO_mesh_to_volume.hh\n  GEO_mesh_triangulate.hh\n  GEO_mix_geometries.hh\n  GEO_point_merge_by_distance.hh\n  GEO_points_to_volume.hh\n  GEO_randomize.hh\n  GEO_realize_instances.hh\n  GEO_reorder.hh\n  GEO_resample_curves.hh\n  GEO_reverse_uv_sampler.hh\n  GEO_separate_geometry.hh\n  GEO_set_curve_type.hh\n  GEO_simplify_curves.hh\n  GEO_smooth_curves.hh\n  GEO_subdivide_curves.hh\n  GEO_transform.hh\n  GEO_trim_curves.hh\n  GEO_uv_pack.hh\n  GEO_uv_parametrizer.hh\n  GEO_volume_grid_resample.hh\n  intern/mesh_boolean_manifold.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Running Blender Release Notes Generator Script\nDESCRIPTION: Example command showing how to execute the release notes generator script with version and format parameters.\nSOURCE: https://github.com/blender/blender/blob/main/release/lts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./create_release_notes.py --version 3.3.2 --format=html\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for gMock\nDESCRIPTION: This snippet defines variables for include directories used by gMock. INC specifies the project's include directory, while INC_SYS specifies the system include directory for gtest.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  include\n)\n\nset(INC_SYS\n  ../gtest/include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Executable Path Configuration in CMake\nDESCRIPTION: Configures the path to the Blender executable based on the platform (Windows, macOS, or Linux) and installation type (portable or standard).\nSOURCE: https://github.com/blender/blender/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/blender.exe)\nelseif(APPLE)\n  set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/Blender.app/Contents/MacOS/Blender)\nelse()\n  if(WITH_INSTALL_PORTABLE)\n    set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/blender)\n  else()\n    set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/bin/blender)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for GTest Library\nDESCRIPTION: This snippet declares the source files necessary for compiling the GTest library, including both implementation and header files.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gtest/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  # src/gtest-all.cc\n  # src/gtest_main.cc\n\n  src/gtest.cc\n  src/gtest-assertion-result.cc\n  src/gtest-death-test.cc\n  src/gtest-filepath.cc\n  src/gtest-matchers.cc\n  src/gtest-port.cc\n  src/gtest-printers.cc\n  src/gtest-test-part.cc\n  src/gtest-typed-test.cc\n\n  src/gtest-internal-inl.h\n\n  include/gtest/gtest.h\n  include/gtest/gtest_pred_impl.h\n  include/gtest/gtest_prod.h\n  include/gtest/gtest-assertion-result.h\n  include/gtest/gtest-death-test.h\n  include/gtest/gtest-matchers.h\n  include/gtest/gtest-message.h\n  include/gtest/gtest-param-test.h\n  include/gtest/gtest-printers.h\n  include/gtest/gtest-spi.h\n  include/gtest/gtest-test-part.h\n  include/gtest/gtest-typed-test.h\n  include/gtest/internal/custom/gtest.h\n  include/gtest/internal/custom/gtest-port.h\n  include/gtest/internal/custom/gtest-printers.h\n  include/gtest/internal/gtest-death-test-internal.h\n  include/gtest/internal/gtest-filepath.h\n  include/gtest/internal/gtest-internal.h\n  include/gtest/internal/gtest-param-util.h\n  include/gtest/internal/gtest-port.h\n  include/gtest/internal/gtest-port-arch.h\n  include/gtest/internal/gtest-string.h\n  include/gtest/internal/gtest-type-util.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding QuadriFlow Library to Blender Build\nDESCRIPTION: Adds the QuadriFlow library to the Blender build system with all configured sources, includes, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/quadriflow/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_quadriflow \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags in CMake\nDESCRIPTION: This snippet checks if the GCC or Clang compiler is used and adds a flag to suppress self-assignment warnings. It ensures cleaner build logs by avoiding unnecessary warnings during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/lzma/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_c_flag(\n    \"-Wno-self-assign\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Cycles OSL Kernel in CMake\nDESCRIPTION: Lists the C++ source files that comprise the Cycles OSL kernel implementation, including closures, globals, and services components.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  closures.cpp\n  globals.cpp\n  services.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSL Shader Installation in CMake\nDESCRIPTION: Sets up installation rules for compiled OSL shader objects (.oso) and header files. The files will be installed in the Cycles shader directory when Blender is installed.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/shaders/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# CMAKE_CURRENT_SOURCE_DIR is already included in OSO paths\ndelayed_install(\"\" \"${SRC_OSO}\" ${CYCLES_INSTALL_PATH}/shader)\ndelayed_install(\"${CMAKE_CURRENT_SOURCE_DIR}\" \"${SRC_OSL_HEADERS}\" ${CYCLES_INSTALL_PATH}/shader)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Wayland Dynamic Loading Library in CMake\nDESCRIPTION: Defines the include directories for the Wayland dynamic loading library, including both internal and external includes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  extern\n\n  # For internal includes.\n  intern\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Metaball Editor Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the Blender metaball editor as a library. It uses the previously defined source files, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/metaball/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_metaball \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Geometry Module in CMake\nDESCRIPTION: Specifies the libraries the Blender geometry module depends on, including internal Blender libraries and optional external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/geometry/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::dependencies::optional::manifold\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for GLSL Preprocessor in CMake\nDESCRIPTION: Defines the list of source files needed to compile the 'glsl_preprocess' executable, including both implementation and header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/glsl_preprocess/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  glsl_preprocess.cc\n\n  glsl_preprocess.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories in CMake\nDESCRIPTION: Creates an empty list for system include directories that might be needed for the user preferences editor module. While currently empty, this variable is used as a parameter in the library definition.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_userpref/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Other DNA-related Headers in CMake for Blender\nDESCRIPTION: Sets a CMake variable SRC_DNA_OTHER_INC with a list of utility and other DNA-related header files used in Blender.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_DNA_OTHER_INC\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_array_utils.hh\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_print.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Physics Editor in CMake\nDESCRIPTION: Sets up include directories for the Blender physics editor module, including paths for RNA prototypes and external libraries like Mantaflow.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/physics/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../intern/mantaflow/extern\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Status Bar Component as Blender Library\nDESCRIPTION: Uses Blender's custom build function to add the status bar component as a library, incorporating the previously defined include directories, source files, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_statusbar/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_statusbar \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer\nDESCRIPTION: Example template for a copyright disclaimer to be signed by an employer or institution.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Paths for Blender Build\nDESCRIPTION: Sets the output directories for executables, libraries, and test files in the Blender build system.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL \"\" FORCE)\nset(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL \"\" FORCE)\n\nget_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(GENERATOR_IS_MULTI_CONFIG)\n  set(TESTS_OUTPUT_DIR ${EXECUTABLE_OUTPUT_PATH}/tests/$<CONFIG>/ CACHE INTERNAL \"\" FORCE)\nelse()\n  set(TESTS_OUTPUT_DIR ${EXECUTABLE_OUTPUT_PATH}/tests/ CACHE INTERNAL \"\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Curves Editor\nDESCRIPTION: Defines include paths for the curves editor module build, including local includes and generated RNA prototypes path.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/curves/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Processing SYCL Compiler Flags for OneAPI in CMake\nDESCRIPTION: Prepares SYCL compiler flags for different build configurations (Release, RelWithDebInfo, Debug) by joining list elements into strings and then converting spaces to semicolons for proper command expansion.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nlist(JOIN sycl_compiler_flags_Release \" \" sycl_compiler_flags_Release_str)\nstring(REPLACE \" \" \";\" sycl_compiler_flags_Release_str ${sycl_compiler_flags_Release_str})\nlist(JOIN sycl_compiler_flags_RelWithDebInfo \" \" sycl_compiler_flags_RelWithDebInfo_str)\nstring(REPLACE \" \" \";\" sycl_compiler_flags_RelWithDebInfo_str ${sycl_compiler_flags_RelWithDebInfo_str})\nlist(JOIN sycl_compiler_flags_Debug \" \" sycl_compiler_flags_Debug_str)\nstring(REPLACE \" \" \";\" sycl_compiler_flags_Debug_str ${sycl_compiler_flags_Debug_str})\n```\n\n----------------------------------------\n\nTITLE: Creating Mikktspace Interface Library in CMake\nDESCRIPTION: Creates an interface library for Mikktspace, sets include directories and dependencies. For CMake 3.19 and newer, it also adds source files to make them visible in IDEs.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mikktspace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf_intern_mikktspace INTERFACE)\ntarget_include_directories(bf_intern_mikktspace INTERFACE .)\n\ntarget_link_libraries(bf_intern_mikktspace INTERFACE bf::dependencies::optional::tbb)\n\n# CMake 3.19+ allows one to populate the interface library with\n# source files to show in the IDE.\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.19\")\n  set(SRC\n    mikk_atomic_hash_set.hh\n    mikk_float3.hh\n    mikk_util.hh\n    mikktspace.hh\n  )\n  target_sources(bf_intern_mikktspace PRIVATE ${SRC})\n  blender_source_group(bf_intern_mikktspace ${SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Shader FX\nDESCRIPTION: Defines the include paths needed for building the shader effects library, including internal paths and dependencies like eigen.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/shader_fx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  intern\n  ../editors/include\n  ../makesrna\n  ../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation in CMake\nDESCRIPTION: This snippet sets up the installation of generated documentation if either C++ or Python documentation is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_DOCS OR WITH_BINDING_DOCS)\n\tinstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/ DESTINATION ${DOCUMENTATION_INSTALL_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx documentation for the Device class in Blender's audio module\nDESCRIPTION: This snippet uses Sphinx directives to document the 'Device' class from Blender's audio module. It sets the current module context to 'aud' and uses autoclass to automatically generate documentation for the Device class and its members.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/bindings/doc/device.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: aud\n.. autoclass:: Device\n   :members:\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Font Compatibility\nDESCRIPTION: Adds Windows-specific font compatibility source file when building on Windows platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenfont/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  list(APPEND SRC\n    intern/blf_font_win32_compat.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for View3D Editor in CMake\nDESCRIPTION: Defines system include directories for the View3D editor component, currently left empty.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Clip Editor in CMake\nDESCRIPTION: Defines the include directories for the clip editor module, including local and generated directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_clip/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring oneAPI Library Paths and Suffixes in CMake\nDESCRIPTION: Sets up the oneAPI library file paths and suffixes based on compilation mode (AOT or JIT) and operating system. Different file extensions are used for Windows (.dll, .lib) versus other platforms (.so).\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_ONEAPI)\n  if(WITH_CYCLES_ONEAPI_BINARIES)\n    set(cycles_kernel_oneapi_lib_suffix \"_aot\")\n  else()\n    set(cycles_kernel_oneapi_lib_suffix \"_jit\")\n  endif()\n\n  if(WIN32)\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/cycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.dll)\n    set(cycles_kernel_oneapi_linker_lib ${CMAKE_CURRENT_BINARY_DIR}/cycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.lib)\n  else()\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/libcycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.so)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipewire for Blender Audio\nDESCRIPTION: Sets up Pipewire dependency, source files, and build settings. Includes dynamic loading option and fallback if the library is not found.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PIPEWIRE)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(PkgConfig)\n\t\tpkg_check_modules(PIPEWIRE ${PACKAGE_OPTION} libpipewire-0.3>=1.1.0)\n\tendif()\n\n\tif(PIPEWIRE_FOUND)\n\t\tset(PIPEWIRE_SRC\n\t\t\tplugins/pipewire/PipeWireDevice.cpp\n\t\t\tplugins/pipewire/PipeWireLibrary.cpp\n\t\t)\n\t\tset(PIPEWIRE_HDR\n\t\t\tplugins/pipewire/PipeWireDevice.h\n\t\t\tplugins/pipewire/PipeWireLibrary.h\n\t\t\tplugins/pipewire/PipeWireSymbols.h\n\t\t)\n\n\t\tif(DYNLOAD_PIPEWIRE)\n\t\t\tadd_definitions(-DDYNLOAD_PIPEWIRE)\n\t\tendif()\n\n\t\tif(NOT PLUGIN_PIPEWIRE)\n\t\t\tlist(APPEND INCLUDE ${PIPEWIRE_INCLUDE_DIRS})\n\t\t\tif(NOT DYNLOAD_PIPEWIRE)\n\t\t\t\tlist(APPEND LIBRARIES ${PIPEWIRE_LIBRARIES})\n\t\t\tendif()\n\t\t\tlist(APPEND SRC ${PIPEWIRE_SRC})\n\t\t\tlist(APPEND HDR ${PIPEWIRE_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS PipeWireDevice)\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_PIPEWIRE FALSE CACHE BOOL \"Build With PipeWire\" FORCE)\n\t\telse()\n\t\t\tset(WITH_PIPEWIRE FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"PipeWire not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dependencies for IK Solver Library\nDESCRIPTION: Defines the external libraries required by the IK solver, specifically setting the Eigen library as a private dependency using Blender's custom namespace convention.\nSOURCE: https://github.com/blender/blender/blob/main/intern/iksolver/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Dualcon\nDESCRIPTION: Specifies that the Dualcon library has a private dependency on Eigen, a C++ template library for linear algebra.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Image Editor Space\nDESCRIPTION: Lists the source files that compose the image editor space, including various image-related operations and the space_image file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_image/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  image_buttons.cc\n  image_draw.cc\n  image_edit.cc\n  image_ops.cc\n  image_sequence.cc\n  image_undo.cc\n  space_image.cc\n\n  image_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Python Mathutils\nDESCRIPTION: Specifies the library dependencies for the Blender Python Mathutils library. This includes various Blender libraries and Python-related libraries and flags.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/python/mathutils/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_python_ext\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories for Status Bar Component\nDESCRIPTION: Creates an empty list for system include directories that may be used by the status bar component.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_statusbar/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source and Header Files in CMake\nDESCRIPTION: This snippet sets lists of source and header files that are used for building the LZMA library within the Blender project. It includes C source files and their corresponding headers to be compiled and linked.\nSOURCE: https://github.com/blender/blender/blob/main/extern/lzma/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  Alloc.c\n  CpuArch.c\n  LzFind.c\n  LzFindMt.c\n  LzFindOpt.c\n  LzmaDec.c\n  LzmaEnc.c\n  LzmaLib.c\n  Threads.c\n\n  7zTypes.h\n  7zWindows.h\n  Alloc.h\n  Compiler.h\n  CpuArch.h\n  LzFind.h\n  LzFindMt.h\n  LzHash.h\n  LzmaDec.h\n  LzmaEnc.h\n  LzmaLib.h\n  Precomp.h\n  Threads.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake CXX Flags\nDESCRIPTION: This snippet appends the LEMON warning flags to the CMAKE_CXX_FLAGS variable. This ensures that the specified warning flags are used during the compilation process.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${LEMON_CXX_WARNING_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for gMock Library\nDESCRIPTION: This snippet defines a variable SRC containing the source files for the gMock library. These source files will be compiled into the library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gmock/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  # src/gmock-all.cc\n  # src/gmock_main.cc\n\n  src/gmock.cc\n  src/gmock-cardinalities.cc\n  src/gmock-internal-utils.cc\n  src/gmock-matchers.cc\n  src/gmock-spec-builders.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for FBX Importer in CMake\nDESCRIPTION: Defines the include directories needed for the FBX importer module. These directories contain header files required for building the module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/fbx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  importer\n  ../common\n  ../../editors/include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OneAPI Kernel Build Command in CMake\nDESCRIPTION: Sets up a custom command to build the OneAPI version of the Cycles kernel, configuring environment variables for the SYCL compiler and passing appropriate build configuration-specific flags.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${cycles_kernel_oneapi_lib}\n  COMMAND\n    ${CMAKE_COMMAND} -E env\n    \"LD_LIBRARY_PATH=${sycl_compiler_root}/../lib:${OCLOC_INSTALL_DIR}/lib:${IGC_INSTALL_DIR}/lib\"\n    # `$ENV{PATH}` is for compiler to find `ld`.\n    \"PATH=${OCLOC_INSTALL_DIR}/bin:${sycl_compiler_root}:$ENV{PATH}\"\n    ${SYCL_COMPILER}\n    \"$<$<CONFIG:Release>:${sycl_compiler_flags_Release_str}>\"\n    \"$<$<CONFIG:RelWithDebInfo>:${sycl_compiler_flags_RelWithDebInfo_str}>\"\n    \"$<$<CONFIG:Debug>:${sycl_compiler_flags_Debug_str}>\"\n    \"$<$<CONFIG:MinSizeRel>:${sycl_compiler_flags_Release_str}>\"\n  COMMAND_EXPAND_LISTS\n  DEPENDS ${cycles_oneapi_kernel_sources} ${SYCL_COMPILER})\n```\n\n----------------------------------------\n\nTITLE: Defining Tests with CMake\nDESCRIPTION: This snippet defines a list of test executables.  The `TESTS` variable lists the names of the test executables to be built and added as tests.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESTS\n  adaptors_test\n  arc_look_up_test\n  bellman_ford_test\n  bfs_test\n  bpgraph_test\n  circulation_test\n  connectivity_test\n  counter_test\n  dfs_test\n  digraph_test\n  dijkstra_test\n  dim_test\n  edge_set_test\n  error_test\n  euler_test\n  fractional_matching_test\n  gomory_hu_test\n  graph_copy_test\n  graph_test\n  graph_utils_test\n  hao_orlin_test\n  heap_test\n  kruskal_test\n  lgf_reader_writer_test\n  lgf_test\n  maps_test\n  matching_test\n  max_cardinality_search_test\n  max_clique_test\n  max_flow_test\n  min_cost_arborescence_test\n  min_cost_flow_test\n  min_mean_cycle_test\n  nagamochi_ibaraki_test\n  path_test\n  planarity_test\n  radix_sort_test\n  random_test\n  suurballe_test\n  time_measure_test\n  tsp_test\n  unionfind_test\n)\n```\n\n----------------------------------------\n\nTITLE: Running Speed Test for Format Library\nDESCRIPTION: Command to execute the speed test for the {fmt} library after setting up the benchmark repository.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ make speed-test\n```\n\n----------------------------------------\n\nTITLE: Blender SPDX Copyright Declaration\nDESCRIPTION: Standard SPDX license header used in Blender project files to specify copyright information. Declares copyright year and attribution to Blender Authors.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenJPEG Support in CMake\nDESCRIPTION: This CMake code snippet adds OpenJPEG support to the IMBuf library if the WITH_IMAGE_OPENJPEG option is enabled, including necessary source files, libraries, and definitions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENJPEG)\n  list(APPEND INC_SYS\n    ${OPENJPEG_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/format_jp2.cc\n  )\n  list(APPEND LIB\n    ${OPENJPEG_LIBRARIES}\n  )\n\n  add_definitions(-DWITH_IMAGE_OPENJPEG ${OPENJPEG_DEFINES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test Library Linking in CMake\nDESCRIPTION: Configures platform-specific linking options for test libraries, handling whole-archive linking differently for Unix, Windows, and macOS systems.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(_test_libs GLOBAL PROPERTY BLENDER_TEST_LIBS)\nif(WIN32 OR APPLE)\n  # Windows and macOS set target_link_options after target creation.\nelseif(UNIX)\n  list(APPEND TEST_LIBS \"-Wl,--whole-archive\" ${_test_libs} \"-Wl,--no-whole-archive\")\nelse()\n  message(FATAL_ERROR \"Unknown how to link whole-archive with your compiler ${CMAKE_CXX_COMPILER_ID}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Compiler Warning Flags for Clang-CL\nDESCRIPTION: This snippet sets up C++ specific compiler warning flags to be disabled when using Clang-CL. It uses the add_check_cxx_compiler_flags function to apply these flags, with comments indicating the frequency of each warning.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nadd_check_cxx_compiler_flags(\n  CXX_WARNINGS\n  CXX_WARN_CLANG_CL_W3 /W3\n  CXX_WARN_CLANG_CL_C++98_COMPAT -Wno-c++98-compat # 352692\n  CXX_WARN_CLANG_CL_OLD_STYLE_CAST -Wno-old-style-cast # 178608\n  CXX_WARN_CLANG_CL_UNSAFE_BUFFER_USAGE -Wno-unsafe-buffer-usage # 89032\n  CXX_WARN_CLANG_CL_MISSING_PROTOTYPES -Wno-missing-prototypes # 25587\n  CXX_WARN_CLANG_CL_SIGN_CONVERSION -Wno-sign-conversion # 20109\n  CXX_WARN_CLANG_CL_MISSING_FIELD_INITIALIZERS -Wno-missing-field-initializers # 20060\n  CXX_WARN_CLANG_CL_EXTRA_SEMI -Wno-extra-semi # 12513\n  CXX_WARN_CLANG_CL_LANGUAGE_EXTENSION_TOKEN -Wno-language-extension-token # 11032\n  CXX_WARN_CLANG_CL_IMPLICIT_FLOAT_CONVERSION -Wno-implicit-float-conversion # 11003\n  CXX_WARN_CLANG_CL_C++98_COMPAT_PEDANTIC -Wno-c++98-compat-pedantic # 10336\n  CXX_WARN_CLANG_CL_IMPLICIT_INT_FLOAT_CONVERSION -Wno-implicit-int-float-conversion # 7354\n  CXX_WARN_CLANG_CL_DOUBLE_PROMOTION -Wno-double-promotion # 7350\n  CXX_WARN_CLANG_CL_PRE_C++17_COMPAT -Wno-pre-c++17-compat # 7303\n  CXX_WARN_CLANG_CL_SHORTEN_64_TO_32 -Wno-shorten-64-to-32 # 7085\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for NLA Editor in CMake\nDESCRIPTION: Defines the include directories for the NLA editor module, including local and generated paths.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_nla/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Dependency Configuration\nDESCRIPTION: Manages external library dependencies, specifically handling gflags library inclusion based on system configuration.\nSOURCE: https://github.com/blender/blender/blob/main/extern/glog/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WITH_SYSTEM_GFLAGS)\n  list(APPEND LIB\n    extern_gflags\n  )\nendif()\n\nadd_definitions(${GFLAGS_DEFINES})\nadd_definitions(${GLOG_DEFINES})\n\nblender_add_lib(extern_glog \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake for Blender\nDESCRIPTION: Lists all source files required for building Blender, including core functionality files, data structures, modifiers, and utility modules.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenkernel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ${CMAKE_SOURCE_DIR}/release/datafiles/userdef/userdef_default.c\n  intern/CCGSubSurf.cc\n  intern/CCGSubSurf_legacy.cc\n  # ... [truncated for brevity] ...\n  BKE_gpencil_legacy.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Audaspace Audio Support\nDESCRIPTION: Conditional configuration for audio support through Audaspace library, including system or bundled library options.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_graph/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND LIB\n    bf_intern_audaspace\n  )\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for UTF Conversion Library in CMake\nDESCRIPTION: Defines the public include directories for the UTF conversion library. This ensures the headers can be found during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/utfconv/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SPDX License Header for Blender Project\nDESCRIPTION: This snippet defines the SPDX license identifier for the Blender project, specifying the copyright holder as Blender Authors and the year as 2023.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/nodes/geometry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: SPDX\nCODE:\n```\n# SPDX-FileCopyrightText: 2023 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: SPDX Copyright Header\nDESCRIPTION: Standard copyright header used in Blender source files to specify copyright ownership and dates.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/compositor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SPDX-FileCopyrightText: 2011-2024 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Configuring Blender Integration in CMake for Cycles\nDESCRIPTION: Sets up compilation flags and subdirectory for Blender integration when WITH_CYCLES_BLENDER is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_BLENDER)\n  # Not needed to make cycles automated tests pass with -march=native.\n  # However Blender itself needs this flag.\n  # Note: the clang-cl style removal must go first, to avoid a dangling \"/clang:\"\n  remove_cc_flag(\"/clang:-ffp-contract=off\")\n  remove_cc_flag(\"-ffp-contract=off\")\n  add_definitions(-DWITH_BLENDER_GUARDEDALLOC)\n  add_subdirectory(blender)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Git and CMake\nDESCRIPTION: Instructions for cloning the format-benchmark repository and generating Makefiles using CMake to run performance and bloat tests for the {fmt} library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n$ cd format-benchmark\n$ cmake .\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Memory Utility Library in CMake\nDESCRIPTION: Defines the library dependencies for the Blender memory utility library. It includes private dependencies on blenlib and guardedalloc.\nSOURCE: https://github.com/blender/blender/blob/main/intern/memutil/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet sets the system include directories, specifically including the Eigen3 library's include directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(INC_SYS\n  ${EIGEN3_INCLUDE_DIRS}\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Testing in CMake\nDESCRIPTION: Specifies the source files to be included in the Blender testing framework. This includes the main testing file and a header file for testing utilities.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  testing_main.cc\n\n  testing.h\n)\n```\n\n----------------------------------------\n\nTITLE: BSD 2-Clause License Terms\nDESCRIPTION: The complete text of the BSD 2-Clause 'Simplified' License that applies to several libraries including Aom, jemalloc, OpenJPEG, Pybind11, and xxHash.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nThe 2-Clause BSD License\n------------------------\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Memory Utility Library in CMake\nDESCRIPTION: Specifies the source files to be compiled for the Blender memory utility library. It includes both C++ source files and header files.\nSOURCE: https://github.com/blender/blender/blob/main/intern/memutil/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/MEM_CacheLimiterC-Api.cpp\n  intern/MEM_RefCountedC-Api.cpp\n  intern/MEM_alloc_string_storage.cc\n\n  MEM_Allocator.h\n  MEM_CacheLimiter.h\n  MEM_CacheLimiterC-Api.h\n  MEM_RefCounted.h\n  MEM_RefCountedC-Api.h\n  MEM_alloc_string_storage.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Address Sanitizer for External Dependencies\nDESCRIPTION: Conditionally disables Address Sanitizer (ASAN) for external dependencies to prevent linking issues, with special handling for MSVC\nSOURCE: https://github.com/blender/blender/blob/main/extern/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_COMPILER_ASAN AND NOT WITH_COMPILER_ASAN_EXTERN)\n  if(NOT MSVC)\n    string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -fno-sanitize=all\")\n    string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO \" -fno-sanitize=all\")\n    string(APPEND CMAKE_CXX_FLAGS_DEBUG \" -fno-sanitize=all\")\n    string(APPEND CMAKE_C_FLAGS_DEBUG \" -fno-sanitize=all\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for USD Integration\nDESCRIPTION: Defines include directories for the USD integration module, including Blender internal directories and the generated RNA headers directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/usd/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../common\n  ../../editors/include\n  ../../makesrna\n  ../../python/intern\n  ../../../../intern/utfconv\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Library Dependencies for UTF Conversion Library\nDESCRIPTION: Creates an empty list for library dependencies. This indicates that the UTF conversion library has no external library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/utfconv/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default LP and MIP Solvers\nDESCRIPTION: This snippet defines the default LP and MIP solvers based on the available solvers. If ILOG is found, CPLEX is set as default, otherwise COIN's CLP and CBC are used, followed by GLPK if available, and finally SOPLEX.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nIF(ILOG_FOUND)\n  SET(DEFAULT_LP \"CPLEX\")\n  SET(DEFAULT_MIP \"CPLEX\")\nELSEIF(COIN_FOUND)\n  SET(DEFAULT_LP \"CLP\")\n  SET(DEFAULT_MIP \"CBC\")\nELSEIF(GLPK_FOUND)\n  SET(DEFAULT_LP \"GLPK\")\n  SET(DEFAULT_MIP \"GLPK\")\nELSEIF(SOPLEX_FOUND)\n  SET(DEFAULT_LP \"SOPLEX\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Cycles Hydra\nDESCRIPTION: Links the necessary libraries to the Cycles Hydra target, including USD libraries as public dependencies and previously defined Cycles libraries as private dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(cycles_hydra\n  PUBLIC\n  ${USD_LIBRARIES}\n  PRIVATE\n  ${LIB}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Common Dependency Targets in CMake for Blender\nDESCRIPTION: Includes a separate CMake file for common dependency targets and adds a comment about Ninja job limiting functionality.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Common dependency targets\n\ninclude(dependency_targets)\n\n# -----------------------------------------------------------------------------\n# Ninja Job Limiting\n\n# Extra limits to number of jobs running in parallel for some kind os tasks.\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific Math Definitions for IK Solver\nDESCRIPTION: Adds the _USE_MATH_DEFINES preprocessor definition when building on Windows, ensuring that math constants like π are defined.\nSOURCE: https://github.com/blender/blender/blob/main/intern/iksolver/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Defines the required library dependencies for the script editor, including various Blender framework components.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_script/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for LGPL v2.1 Licensed Library\nDESCRIPTION: A template for the copyright notice to be included at the start of each source file in a library licensed under LGPL v2.1. It includes placeholders for the library name, copyright year, and author name.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/LGPL-2.1-or-later.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Setting Up Clang-Tidy in CMake for Blender (Non-MSVC)\nDESCRIPTION: This snippet configures Clang-Tidy for use in the Blender project when enabled and not using MSVC. It sets up Clang-Tidy for C, C++, Objective-C, and Objective-C++ files with additional arguments to ignore unknown warning options.\nSOURCE: https://github.com/blender/blender/blob/main/source/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CLANG_TIDY AND NOT MSVC)\n  find_package(ClangTidy REQUIRED)\n  set(CLANG_TIDY_EXTRA_ARGS --extra-arg=-Wno-error=unknown-warning-option)\n\n  set(CMAKE_C_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\n  set(CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\n  set(CMAKE_OBJC_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\n  set(CMAKE_OBJCXX_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining XDND Source Files\nDESCRIPTION: Specifies the source files for the XDND library, including header and implementation files\nSOURCE: https://github.com/blender/blender/blob/main/extern/xdnd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  xdnd.c\n  xdnd.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for OpenImageIO in Blender\nDESCRIPTION: Configures the include directories needed for the OpenImageIO integration. Includes local directories, as well as the UTF conversion utilities from Blender's internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n  ../../../../../intern/utfconv\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency for Status Bar Component\nDESCRIPTION: Ensures the status bar component depends on the RNA generation (bf_rna target) to handle the required RNA_prototypes.hh and dna_type_offsets.h header files.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_statusbar/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_statusbar bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This snippet sets the project name and initializes the project. It defines the project name as \"LEMON\" and then calls the PROJECT command to set up the project in CMake.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(PROJECT_NAME \"LEMON\")\nPROJECT(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Action Editor in CMake\nDESCRIPTION: Defines the include directories for the Action Editor space, including local and generated directories.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_action/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../modifiers\n  ../../nodes\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories for Blender's Undo System\nDESCRIPTION: Initializes the system include directories variable, which is currently empty but provides a placeholder for potential system dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/undo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Core Library Dependencies\nDESCRIPTION: Defines core library dependencies for the IO editor module including blenkernel, blenlib, and other essential Blender libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/io/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::clog\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Alias for External UFBX Library\nDESCRIPTION: This snippet creates an alias for the external ufbx library, allowing for easier reference throughout the Blender codebase.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ufbx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(bf::extern::ufbx ALIAS extern_ufbx)\n```\n\n----------------------------------------\n\nTITLE: Including gflags Header\nDESCRIPTION: This code snippet demonstrates the recommended way to include the gflags header file.  It's crucial for accessing gflags functionalities within your C++ code.  The correct include path ensures proper compilation and linking of the gflags library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gflags/NEWS.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"#include <gflags/gflags.h>\"\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake\nDESCRIPTION: This snippet includes the source and binary directories of the project to ensure that necessary headers can be found during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This snippet adds subdirectories to the project, including lemon, contrib, demo, tools, doc, and test.  These directories are only added if the CMAKE_SOURCE_DIR is equal to the PROJECT_SOURCE_DIR.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(lemon)\nIF(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})\n  ADD_SUBDIRECTORY(contrib)\n  ADD_SUBDIRECTORY(demo)\n  ADD_SUBDIRECTORY(tools)\n  ADD_SUBDIRECTORY(doc)\n  ADD_SUBDIRECTORY(test)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: CYCLES.bake Argument Change\nDESCRIPTION: This snippet documents the change in arguments for the `bake` function within the `CYCLES` class.  The function signature has been updated, affecting how baking operations are performed in Cycles render engine.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\":class:`bpy.types.CYCLES.bake` (self, depsgraph, obj, pass_type, pass_filter, width, height), *was (self, depsgraph, obj, pass_type, pass_filter, object_id, pixel_array, num_pixels, depth, result)*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the source files for the HIPEW library. It includes C and header files related to HIPEW.\nSOURCE: https://github.com/blender/blender/blob/main/extern/hipew/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/hipew.c\n  include/hipew.h\n  include/hipew6.h\n  include/hipew5.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Potrace Library Build\nDESCRIPTION: Sets up CMake project for Potrace library with source files, headers, and platform-specific configurations\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_potrace.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(potrace)\ncmake_minimum_required(VERSION 2.8)\n\ninclude_directories(src/include)\n\nset(SOURCES\n  src/backend_dxf.c\n  src/backend_eps.c\n  src/backend_geojson.c\n  src/backend_pdf.c\n  src/backend_pgm.c\n  src/backend_svg.c\n  src/backend_xfig.c\n  src/bbox.c\n  src/bitmap_io.c\n  src/curve.c\n  src/decompose.c\n  src/flate.c\n  src/greymap.c\n  src/lzw.c\n  src/potracelib.c\n  src/progress_bar.c\n  src/render.c\n  src/trace.c\n  src/trans.c\n)\n```\n\n----------------------------------------\n\nTITLE: Installing lemon.pc File\nDESCRIPTION: This command installs the configured `lemon.pc` file to the `lib/pkgconfig` directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n\"INSTALL(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/lemon.pc\n  DESTINATION lib/pkgconfig\n)\"\n```\n\n----------------------------------------\n\nTITLE: Copyright Header for Blender Build Script\nDESCRIPTION: Standard SPDX copyright header indicating Blender Authors ownership from 2006.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/freestyle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories in CMake\nDESCRIPTION: This snippet sets system include directories. In this case, no system include directories are specified, which is reflected by the empty value.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional FFMPEG Support Configuration\nDESCRIPTION: Adds FFMPEG-specific source files, include directories, and libraries when FFMPEG codec support is enabled. Sets the WITH_FFMPEG definition for conditional compilation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  list(APPEND SRC\n    intern/ffmpeg_swscale.cc\n    intern/ffmpeg_swscale.hh\n  )\n  list(APPEND INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFMPEG_LIBRARIES}\n    ${OPENJPEG_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Math Definitions\nDESCRIPTION: Adds Windows-specific math definitions when building on Windows platforms.\nSOURCE: https://github.com/blender/blender/blob/main/intern/quadriflow/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Terminal Interactive Mode Notice Template\nDESCRIPTION: Template text for the brief copyright and warranty notice that should be displayed when a program starts in interactive mode.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories with CMake\nDESCRIPTION: This snippet sets the include directories for the project. It adds both the project source directory and the project binary directory to the include path, allowing the compiler to find header files.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File\nDESCRIPTION: This command configures the `config.h.in` file, replacing variables with their actual values and creating a `config.h` file in the binary directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/config.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/config.h\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Asset Editor\nDESCRIPTION: Specifies the required library dependencies for the asset editor module, including core Blender libraries and internal utilities.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/asset/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for BVH Module in CMake\nDESCRIPTION: Defines the library dependencies for the BVH module, including Cycles scene and utility libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/bvh/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  cycles_scene\n  cycles_util\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for GPL-Licensed Software\nDESCRIPTION: A template for adding a copyright notice and GPL license information to the start of source files in a GPL-licensed program. It includes placeholders for program name, copyright year, and author.\nSOURCE: https://github.com/blender/blender/blob/main/doc/license/GPL-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Subdirectory in CMake\nDESCRIPTION: This snippet adds the 'blender' subdirectory to the CMake build process, indicating that CMake should process the CMakeLists.txt file in the 'blender' directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(blender)\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Support Configuration\nDESCRIPTION: Configures Audaspace audio library support when enabled. Adds system include directories and libraries when using the system version of Audaspace.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/movie/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenSubdiv Component Definition in CMake\nDESCRIPTION: Defines a macro to conditionally add definitions for OpenSubdiv components based on their availability.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  macro(OPENSUBDIV_DEFINE_COMPONENT component)\n    if(${${component}})\n      add_definitions(-D${component})\n    endif()\n  endmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Audaspace\nDESCRIPTION: Sets up include directories, libraries, and platform-specific configurations for building Audaspace.\nSOURCE: https://github.com/blender/blender/blob/main/extern/audaspace/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(INCLUDE ${CMAKE_CURRENT_BINARY_DIR} include)\n\nif(WIN32)\n\tset(LIBRARIES)\n\tif(AUDASPACE_STANDALONE)\n\t\tset(DLLS)\n\t\tset(LIBRARY_PATH \"../lib\" CACHE PATH \"Path which contains the libraries.\")\n\t\tfile(GLOB LIBRARY_DIRS ${LIBRARY_PATH}/*)\n\t\tlist(APPEND CMAKE_PREFIX_PATH ${LIBRARY_DIRS})\n\tendif()\nelse()\n\tset(LIBRARIES ${CMAKE_DL_LIBS} -lpthread)\nendif()\n\nset(STATIC_PLUGINS \"\")\n```\n\n----------------------------------------\n\nTITLE: Font Stack License Documentation\nDESCRIPTION: Markdown table documenting the fonts used in Blender, their sources, licenses, and copyright information.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Font     | License | Copyright |\n| -------  | --------- | ------- |\n| [Inter](https://rsms.me/inter/) | [SIL Open Font License 1.1](https://spdx.org/licenses/OFL-1.1.html) | `Copyright 2020 The Inter Project Authors (https://github.com/rsms/inter)` |\n| [Noto Fonts](https://fonts.google.com/noto) | [SIL Open Font License 1.1](https://spdx.org/licenses/OFL-1.1.html) | `Copyright 2018 The Noto Project Authors (github.com/googlei18n/noto-fonts)`|\n| [Last Resort](https://github.com/unicode-org/last-resort-font) | [SIL Open Font License 1.1](https://spdx.org/licenses/OFL-1.1.html) | `Copyright © 1998-2024 Unicode, Inc. Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the United States and other countries.` |\n| [DejaVu Sans Mono](https://github.com/dejavu-fonts/dejavu-fonts) | [Arev Fonts License](http://tavmjong.free.fr/FONTS/ArevCopyright.txt) + [Bistream Vera Font License](https://spdx.org/licenses/Bitstream-Vera.html) | `2003 Bitstream, Inc. (Bitstream font glyphs). 2006 Tavmjong Bah (Arev font glyphs). DejaVu changes are in public domain` |\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Editor Geometry Module in CMake\nDESCRIPTION: Defines the include directories for the Blender editor geometry module, including local directories and the generated RNA prototypes directory.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/geometry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding PugiXML Library Support\nDESCRIPTION: Adds PugiXML library to the dependencies if WITH_PUGIXML is defined, allowing for XML parsing capabilities when available.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/oiio/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PUGIXML)\n  list(APPEND LIB\n    ${PUGIXML_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Status Bar Component\nDESCRIPTION: Defines the source file list for the status bar space component, containing only space_statusbar.cc.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_statusbar/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  space_statusbar.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting TBB Deprecation Message Silence\nDESCRIPTION: Silences warnings from USD headers that use deprecated TBB headers by defining specific macros to suppress the deprecation messages.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Silence warning from USD headers using deprecated TBB header.\nadd_definitions(\n  -D__TBB_show_deprecation_message_atomic_H\n  -D__TBB_show_deprecation_message_task_H\n)\n```\n\n----------------------------------------\n\nTITLE: Adding an Executable in CMake\nDESCRIPTION: This commented snippet outlines how to add an executable target within the CMake build system. It provides a template for defining the executable's name and source files, demonstrating how to set up multiple executables if required. It highlights the necessary adjustment needed for the executable name and the source file dependency.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# ADD_EXECUTABLE(myprog myprog-main.cc)\\\n# TARGET_LINK_LIBRARIES(myprog lemon)\n```\n\n----------------------------------------\n\nTITLE: Applying GPL License Notice to Source Files\nDESCRIPTION: A template for adding the GPL license notice to the start of each source file in a program. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/GPL-2.0-or-later.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Blender Outliner\nDESCRIPTION: Specifies required library dependencies for the outliner space editor, including internal Blender libraries and external dependencies with visibility specifications.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_outliner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_id_management\n  bf_editor_undo\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n  extern_fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for New Library\nDESCRIPTION: Example copyright notice template for applying LGPL to a new library, including basic copyright statement and license terms.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Installing LEMONConfig.cmake\nDESCRIPTION: This snippet installs the generated LEMONConfig.cmake file to the appropriate location depending on the platform. On UNIX systems, it is installed to share/lemon/cmake, and on Windows systems, it is installed to cmake.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  INSTALL(\n    FILES ${PROJECT_BINARY_DIR}/cmake/LEMONConfig.cmake\n    DESTINATION share/lemon/cmake\n  )\nELSEIF(WIN32)\n  INSTALL(\n    FILES ${PROJECT_BINARY_DIR}/cmake/LEMONConfig.cmake\n    DESTINATION cmake\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Guarded Allocation Library in CMake\nDESCRIPTION: Creates the guarded allocation library and sets up an alias for it.\nSOURCE: https://github.com/blender/blender/blob/main/intern/guardedalloc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_guardedalloc \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::guardedalloc ALIAS bf_intern_guardedalloc)\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Plugin Info Configuration\nDESCRIPTION: Configures the plugInfo.json file with the paths set up in the previous step and installs it to the appropriate location in the plugin directory structure.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/hydra/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n  configure_file(resources/plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}/resources/plugInfo.json\n    @ONLY\n  )\n\n  delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}/resources\" \"plugInfo.json\" \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}/resources\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Specifies all required library dependencies for the spreadsheet space, using Blender's internal library naming scheme with the 'bf' prefix.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_spreadsheet/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Logging Library\nDESCRIPTION: Defines the source files needed to build the logging library, including both .c and header files.\nSOURCE: https://github.com/blender/blender/blob/main/intern/clog/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  clog.c\n\n  CLG_log.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Grease Pencil Editor Tests in CMake\nDESCRIPTION: Sets up the test suite for the Grease Pencil editor module, including test source files, additional include directories, and library dependencies. This section is only included if WITH_GTESTS is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/grease_pencil/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/grease_pencil_merge_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n  )\n  blender_add_test_suite_lib(editor_grease_pencil \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting BMesh Include Paths\nDESCRIPTION: Defines the include directories for the BMesh library compilation, including public paths and third-party dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/bmesh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../../../intern/eigen\n  ../../../extern/rangetree\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Specifies system-level include directories, specifically ZLIB includes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/shader_fx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for Cycles\nDESCRIPTION: Adds various subdirectories to the build process, including core components of Cycles.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(app)\nadd_subdirectory(bvh)\nadd_subdirectory(device)\nadd_subdirectory(doc)\nadd_subdirectory(graph)\nadd_subdirectory(integrator)\nadd_subdirectory(kernel)\nadd_subdirectory(scene)\nadd_subdirectory(session)\nadd_subdirectory(subd)\nadd_subdirectory(util)\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a work. It includes placeholders for the copyright year and owner, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/Apache-2.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Thumbnail Generator Build\nDESCRIPTION: Configures the build for the Unix thumbnail generator executable, including platform-specific linker flags and pthread support.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blendthumb/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(UNIX)\n  set(SRC_CMD\n    src/blender_thumbnailer.cc\n  )\n\n  add_executable(blender-thumbnailer ${SRC} ${SRC_CMD})\n  setup_platform_linker_flags(blender-thumbnailer)\n  target_link_libraries(blender-thumbnailer bf_blenlib)\n  if(DEFINED PTHREADS_LIBRARIES)\n    target_link_libraries(blender-thumbnailer ${PTHREADS_LIBRARIES})\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Library Dependencies for NLA Editor in CMake\nDESCRIPTION: Defines the library dependencies for the NLA editor module, including various Blender internal libraries.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_nla/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C11 Standard for GCC, Clang, and Intel\nDESCRIPTION: This code snippet sets the C language standard to C11 with GNU extensions for GCC, Clang (non-MSVC), and Intel compilers, providing consistent language features across these compilers.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\n# Visual Studio has all standards it supports available by default\n# Clang on windows copies this behavior and does not support these switches\nif(CMAKE_COMPILER_IS_GNUCC OR\n   (CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND (NOT MSVC)) OR\n   (CMAKE_C_COMPILER_ID STREQUAL \"Intel\"))\n\n  # Use C11 + GNU extensions, works with GCC, Clang, ICC\n  string(APPEND CMAKE_C_FLAGS \" -std=gnu11\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Font Library\nDESCRIPTION: Sets up public and system include directories for the font library build, including FreeType dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blenfont/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../makesrna\n)\n\nset(INC_SYS\n  ${FREETYPE_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring pkg-config File\nDESCRIPTION: This command configures the `lemon.pc.in` file to generate `lemon.pc` in the binary directory using `@ONLY` to prevent unintended variable substitution.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/lemon.pc.in\n  ${CMAKE_CURRENT_BINARY_DIR}/lemon.pc\n  @ONLY\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Functions Library in CMake\nDESCRIPTION: Lists all source files (.cc and .hh) to be included in the Blender functions library build.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/functions/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/field.cc\n  intern/lazy_function.cc\n  intern/lazy_function_execute.cc\n  intern/lazy_function_graph.cc\n  intern/lazy_function_graph_executor.cc\n  intern/multi_function.cc\n  intern/multi_function_builder.cc\n  intern/multi_function_params.cc\n  intern/multi_function_procedure.cc\n  intern/multi_function_procedure_builder.cc\n  intern/multi_function_procedure_executor.cc\n  intern/multi_function_procedure_optimization.cc\n\n  FN_field.hh\n  FN_lazy_function.hh\n  FN_lazy_function_execute.hh\n  FN_lazy_function_graph.hh\n  FN_lazy_function_graph_executor.hh\n  FN_multi_function.hh\n  FN_multi_function_builder.hh\n  FN_multi_function_context.hh\n  FN_multi_function_data_type.hh\n  FN_multi_function_param_type.hh\n  FN_multi_function_params.hh\n  FN_multi_function_procedure.hh\n  FN_multi_function_procedure_builder.hh\n  FN_multi_function_procedure_executor.hh\n  FN_multi_function_procedure_optimization.hh\n  FN_multi_function_signature.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notice to Source Files\nDESCRIPTION: This code snippet provides an example of the notices that should be attached to the start of each source file when applying the GNU General Public License. It includes the program's name, copyright information, licensing terms, warranty disclaimer, and information on obtaining the full license.\nSOURCE: https://github.com/blender/blender/blob/main/doc/license/GPL3-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\t<one line to give the program's name and a brief idea of what it does.>\n\tCopyright (C) <year>  <name of author>\n\n\tThis program is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Adding Blender IO Common Library in CMake\nDESCRIPTION: Uses the blender_add_lib function to add the Blender IO common library, specifying source files, include directories, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/common/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_common \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\ntarget_link_libraries(bf_io_common INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender ID Management\nDESCRIPTION: Defines the include directories needed for building the ID management module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/id_management/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Functions Library in CMake\nDESCRIPTION: Specifies the required library dependencies for building the Blender functions library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/functions/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for SLIM Library in CMake\nDESCRIPTION: Sets up the include directories for the SLIM library, including local directories and Blender's blenlib and guardian allocation modules.\nSOURCE: https://github.com/blender/blender/blob/main/intern/slim/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../../source/blender/blenlib\n  ../guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing\nDESCRIPTION: This snippet enables testing for the project using the ENABLE_TESTING command. This allows the project to define and run tests using the CTest testing framework.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nENABLE_TESTING()\n```\n\n----------------------------------------\n\nTITLE: Configuring EEVEE Shader Compilation with C++ in CMake\nDESCRIPTION: Sets up shader compilation using C++ when the WITH_GPU_SHADER_CPP_COMPILATION option is enabled. It compiles vertex, fragment, and compute shaders as C++ sources.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Compile shaders with shader code.\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(eevee_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(eevee_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  compile_sources_as_cpp(eevee_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(eevee_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OSL Shader Compilation Commands in CMake\nDESCRIPTION: Sets up custom commands to compile each OSL shader file (.osl) into an optimized shader object (.oso) using the OSL compiler. The compilation includes include paths for headers and optimization flags.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/osl/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# TODO, add a module to compile OSL\nforeach(_file ${SRC_OSL})\n  set(_OSL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${_file})\n  set_source_files_properties(${_file} PROPERTIES HEADER_FILE_ONLY TRUE)\n  string(REPLACE \".osl\" \".oso\" _OSO_FILE ${_OSL_FILE})\n  string(REPLACE ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} _OSO_FILE ${_OSO_FILE})\n  add_custom_command(\n    OUTPUT ${_OSO_FILE}\n    COMMAND\n      ${CMAKE_COMMAND} -E env ${PLATFORM_ENV_BUILD}\n      ${OSL_COMPILER} -q -O2\n        -I\"${CMAKE_CURRENT_SOURCE_DIR}\"\n        -I\"${OSL_SHADER_DIR}\"\n        -o ${_OSO_FILE}\n        ${_OSL_FILE}\n    DEPENDS ${_OSL_FILE} ${SRC_OSL_HEADERS} ${OSL_COMPILER}\n  )\n  list(APPEND SRC_OSO\n    ${_OSO_FILE}\n  )\n\n  unset(_OSL_FILE)\n  unset(_OSO_FILE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate text to be included in files when applying the Apache License 2.0 to a project. It includes placeholders for copyright year and owner information, along with the standard license notice and reference to the full license text.\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/doc/license/Apache2-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Node Editor in CMake\nDESCRIPTION: Specifies the library dependencies required for building the Blender node editor space, including various Blender internal libraries and external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_node/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_screen\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_compositor\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Audaspace Support in Blender Sequencer CMake\nDESCRIPTION: Adds Audaspace support to the Blender sequencer if enabled, including necessary include directories, libraries, and compilation definitions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/sequencer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\n\n  if(WITH_FFTW3)\n    add_definitions(-DWITH_CONVOLUTION)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for IK Solver\nDESCRIPTION: Creates an empty list for system include directories, which can be populated if needed for platform-specific includes.\nSOURCE: https://github.com/blender/blender/blob/main/intern/iksolver/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying FreeType Project Copyright Notice\nDESCRIPTION: A recommended text snippet for acknowledging the use of FreeType software in compliance with the license terms. Users should replace <year> with the version year of FreeType they are using.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/FTL.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nPortions of this software are copyright © <year> The FreeType\\nProject (www.freetype.org).  All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Testing in CMake\nDESCRIPTION: Defines include directories for the Blender testing framework, including local directories, GLOG and GFLAGS libraries, and Google Test framework. This ensures all necessary headers are available during compilation.\nSOURCE: https://github.com/blender/blender/blob/main/tests/gtests/testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ${GLOG_INCLUDE_DIRS}\n  ${GFLAGS_INCLUDE_DIRS}\n  ../../../extern/gtest/include\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Library Build and Installation Configuration\nDESCRIPTION: Creates a static library and sets up installation rules for different build artifacts\nSOURCE: https://github.com/blender/blender/blob/main/build_files/build_environment/patches/cmakelists_potrace.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PROJECT_NAME} STATIC ${HEADERS} ${SOURCES})\n\nset_target_properties(${PROJECT_NAME} PROPERTIES\n\tLIBRARY_OUTPUT_NAME \"${PROJECT_NAME}\"\n\tPUBLIC_HEADER \t\t\"${HEADERS}\"\n)\n\ninstall(TARGETS \t\t${PROJECT_NAME}\n\t\tRUNTIME         DESTINATION\t\tbin\n        LIBRARY         DESTINATION     lib\n        ARCHIVE         DESTINATION     lib\n        PUBLIC_HEADER\tDESTINATION     include\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compute Shader Source Files in CMake\nDESCRIPTION: Lists the GLSL compute shader source files used in Blender's GPU rendering system. Currently commented out for future implementation.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/shaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_COMP\n  # TODO rename them properly to enable compilation.\n  # gpu_shader_index_2d_array_lines.glsl\n  # gpu_shader_index_2d_array_points.glsl\n  # gpu_shader_index_2d_array_tris.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Program GPL Notice Example\nDESCRIPTION: An example of how to display a short GPL notice when an interactive program starts. It includes the program name, version, copyright information, and instructions for viewing warranty and redistribution details.\nSOURCE: https://github.com/blender/blender/blob/main/doc/license/GPL-license.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Library Copyright Attributions in Markdown\nDESCRIPTION: A markdown table listing third-party libraries used in Blender with their versions and copyright information. Includes Eigen 3.4.0 and OpenVDB 12.0.0.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/license.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Library | Version | Copyright |\n| ------- | ------- | --------- |\n| [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) | 3.4.0 | `Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>. Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com` |\n| [OpenVDB](http://www.openvdb.org/) | 12.0.0 | `Copyright Contributors to the OpenVDB Project` |\n```\n\n----------------------------------------\n\nTITLE: Defining DNA Default Value Headers in CMake for Blender\nDESCRIPTION: Sets a CMake variable SRC_DNA_DEFAULTS_INC with a list of DNA default value header files. These files contain default values for various Blender data structures.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_DNA_DEFAULTS_INC\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_action_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_armature_defaults.h\n  # ... (truncated for brevity)\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_volume_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_world_defaults.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for Dualcon Library\nDESCRIPTION: Defines an empty list for system include directories that might be needed for the Dualcon library.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Source Code Form License Notice Template\nDESCRIPTION: Standard notice text to be included in source code files to indicate they are licensed under MPL 2.0.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/MPL-2.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: Adding OpenSubdiv-specific Source Files and Libraries in CMake\nDESCRIPTION: Appends OpenSubdiv-specific source files and libraries when OpenSubdiv is available. It includes files for base functionality, evaluator, and topology.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n  list(APPEND SRC\n    # Base.\n    internal/base/memory.h\n    internal/base/opensubdiv_capi.cc\n    internal/base/type_convert.cc\n    internal/base/type_convert.h\n    internal/base/util.cc\n    internal/base/util.h\n\n    # Evaluator.\n    internal/evaluator/eval_output.cc\n    internal/evaluator/eval_output.h\n    internal/evaluator/eval_output_cpu.cc\n    internal/evaluator/eval_output_cpu.h\n    internal/evaluator/eval_output_gpu.cc\n    internal/evaluator/eval_output_gpu.h\n    internal/evaluator/evaluator_cache_impl.cc\n    internal/evaluator/evaluator_cache_impl.h\n    internal/evaluator/evaluator_capi.cc\n    internal/evaluator/evaluator_impl.cc\n    internal/evaluator/gpu_compute_evaluator.cc\n    internal/evaluator/gpu_compute_evaluator.h\n    internal/evaluator/gpu_patch_table.cc\n    internal/evaluator/gpu_patch_table.hh\n    internal/evaluator/gpu_vertex_buffer_wrapper.hh\n    internal/evaluator/patch_map.cc\n    internal/evaluator/patch_map.h\n\n\n    # Topology.\n    internal/topology/mesh_topology.cc\n    internal/topology/mesh_topology_compare.cc\n    internal/topology/mesh_topology.h\n    internal/topology/topology_refiner_factory.cc\n    internal/topology/topology_refiner_impl.cc\n    internal/topology/topology_refiner_impl_compare.cc\n  )\n\n  list(APPEND LIB\n    ${OPENSUBDIV_LIBRARIES}\n    ${Epoxy_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Metal Backend Source Configuration\nDESCRIPTION: Specifies source files for the Metal graphics backend implementation on Apple platforms.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(METAL_SRC\n  metal/mtl_backend.mm\n  metal/mtl_batch.mm\n  # ... [truncated for brevity]\n  metal/mtl_shader.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Status Bar Component\nDESCRIPTION: Specifies the required libraries needed to build the status bar component, including core Blender libraries like blenkernel, blenlib, and windowmanager with PRIVATE visibility.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_statusbar/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for User Preferences Editor in CMake\nDESCRIPTION: Defines the include directories needed for building the user preferences editor module. It includes paths to header files from the current module, the RNA maker, and generated RNA prototypes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_userpref/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Include Directories for Text Editor Module\nDESCRIPTION: Sets up system include directories for the text editor module. Currently empty but placeholder exists for potential external dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_text/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset System Test Suite\nDESCRIPTION: Sets up test suite configuration including test sources and dependencies when GTESTS are enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/asset_system/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    tests/asset_catalog_path_test.cc\n    tests/asset_catalog_test.cc\n    tests/asset_catalog_tree_test.cc\n    tests/asset_library_service_test.cc\n    tests/asset_library_test.cc\n    tests/asset_representation_test.cc\n  )\n  set(TEST_COMMON_SRC\n    tests/asset_library_test_common.hh\n  )\n  set(TEST_LIB\n    bf_asset_system\n  )\n  blender_add_test_suite_lib(asset_system\n    \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\" \"${TEST_COMMON_SRC}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including gflags Header (Deprecated)\nDESCRIPTION: This code snippet shows the old, deprecated way to include the gflags header file. It is important to update this include path to the new recommended path for compatibility and to avoid potential issues in future versions.  The old include path is maintained for backwards compatibility.\nSOURCE: https://github.com/blender/blender/blob/main/extern/gflags/NEWS.txt#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n\"#include <google/gflags.h>\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for User Preferences Editor in CMake\nDESCRIPTION: Lists the source files required to build the user preferences editor module. Includes implementation files for the space itself, operations handling, and an internal header file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_userpref/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  space_userpref.cc\n  userpref_ops.cc\n\n  userpref_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for Blender's Undo System\nDESCRIPTION: Specifies all the Blender libraries that the undo system depends on. Each dependency is marked as PRIVATE, indicating they're not exposed in the public API.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/undo/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Class Mix-in Example for Blender Operators\nDESCRIPTION: Shows how to use class inheritance with Blender operators by creating a base class that defines common functionality and a derived class that inherits from both the base class and bpy.types.Operator.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_overview.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass BaseOperator:\n    def execute(self, context):\n        print(\"Hello World BaseClass\")\n        return {'FINISHED'}\n\nclass SimpleOperator(bpy.types.Operator, BaseOperator):\n    bl_idname = \"object.simple_operator\"\n    bl_label = \"Tool Name\"\n\nbpy.utils.register_class(SimpleOperator)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Include Directories and Definitions in CMake\nDESCRIPTION: This CMake code snippet adds OpenColorIO include directory and sets up Windows-specific configurations, including the NOMINMAX definition and UTF conversion include path.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND INC\n  ../../../intern/opencolorio\n)\n\nif(WIN32)\n  list(APPEND INC\n    ../../../intern/utfconv\n  )\nendif()\n\nif(WIN32)\n  add_definitions(-DNOMINMAX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Depsgraph Library and Tests\nDESCRIPTION: Creates the depsgraph library target and configures optional test suite compilation\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/depsgraph/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_depsgraph \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::depsgraph ALIAS bf_depsgraph)\n\n# RNA_prototypes.hh\nadd_dependencies(bf_depsgraph bf_rna)\n\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    intern/builder/deg_builder_rna_test.cc\n  )\n  set(TEST_LIB\n    bf_depsgraph\n  )\n  blender_add_test_suite_lib(depsgraph \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: Specifies all required Blender library dependencies with their visibility scope set to PRIVATE.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/simulation/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Script Arguments Reference\nDESCRIPTION: Lists available command-line arguments for the release notes generator script, including version string format, issue reference, and output format options.\nSOURCE: https://github.com/blender/blender/blob/main/release/lts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n--version VERSION  Version string in the form of {major}.{minor}.{build}\n                   (e.g. 3.3.2)\n--issue ISSUE      Gitea issue that is contains the release notes\n                   information (e.g. #77348)\n--format FORMAT    Format the result in `text`, `steam`, `wiki` or `html`\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories for Cineon/DPX Library\nDESCRIPTION: Sets up system include directories for the Cineon/DPX library. This is currently empty but provides a placeholder for external system dependencies if needed in the future.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/cineon/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for File Editor Space\nDESCRIPTION: Lists all source and header files that make up the file editor space component.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_file/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  asset_catalog_tree_view.cc\n  file_context.cc\n  file_draw.cc\n  file_indexer.cc\n  file_ops.cc\n  file_panels.cc\n  file_utils.cc\n  filelist.cc\n  filesel.cc\n  folder_history.cc\n  fsmenu.cc\n  fsmenu_system.cc\n  space_file.cc\n\n  file_indexer.hh\n  file_intern.hh\n  filelist.hh\n  fsmenu.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenSubdiv Library and Test Suite in CMake\nDESCRIPTION: Adds the OpenSubdiv library to the Blender build and sets up a test suite if both OpenSubdiv and Google Test are available.\nSOURCE: https://github.com/blender/blender/blob/main/intern/opensubdiv/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_opensubdiv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# Tests.\n\nif(WITH_GTESTS AND WITH_OPENSUBDIV)\n  add_definitions(${GFLAGS_DEFINES})\n  add_definitions(${GLOG_DEFINES})\n\n  set(TEST_SRC\n    internal/topology/mesh_topology_test.cc\n  )\n\n  blender_add_test_suite_lib(intern_opensubdiv \"${TEST_SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB};bf_intern_opensubdiv\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Library Dependencies for Cineon/DPX Module\nDESCRIPTION: Defines the library dependencies required by the Cineon/DPX module. It links to Blender's kernel, utility libraries, data structures, and memory allocation systems.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/cineon/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: HIP Math Flag Configuration Function\nDESCRIPTION: Function to set specific math-related compiler flags for AMD HIP GPU architectures, particularly for RDNA2 GPUs on Windows\nSOURCE: https://github.com/blender/blender/blob/main/intern/cycles/kernel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(get_hip_math_flag arch math_flag)\n  if(WIN32 AND (${arch} MATCHES \"gfx1030|gfx1031|gfx1032|gfx1033|gfx1034|gfx1035|gfx1036\"))\n    set(result\n      -fhip-fp32-correctly-rounded-divide-sqrt\n      -fno-gpu-approx-transcendentals\n      -fgpu-flush-denormals-to-zero\n      -ffp-contract=off)\n  else()\n    set(result \"\")\n  endif()\n  set(${math_flag} \"${result}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for SLIM Library\nDESCRIPTION: Lists all header and source files that comprise the SLIM library, including the public API and internal implementation files.\nSOURCE: https://github.com/blender/blender/blob/main/intern/slim/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  slim_matrix_transfer.h\n\n  intern/area_compensation.cpp\n  intern/area_compensation.h\n  intern/cotmatrix.h\n  intern/doublearea.h\n  intern/edge_lengths.h\n  intern/flip_avoiding_line_search.h\n  intern/geometry_data_retrieval.cpp\n  intern/geometry_data_retrieval.h\n  intern/least_squares_relocator.cpp\n  intern/least_squares_relocator.h\n  intern/slim.cpp\n  intern/slim.h\n  intern/slim_matrix_transfer.cpp\n  intern/slim_parametrizer.cpp\n  intern/uv_initializer.cpp\n  intern/uv_initializer.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Render Editor in CMake\nDESCRIPTION: Specifies the library dependencies for the Blender render editor module, using the PRIVATE visibility specifier.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/render/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Editor Space Info Library in CMake\nDESCRIPTION: Creates the Blender editor space info library using the previously defined sources, include directories, and library dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_info/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_info \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Support for Console Space in CMake\nDESCRIPTION: Adds a compile definition for Python support if the WITH_PYTHON option is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_console/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Wayland Dynamic Loading Library in CMake\nDESCRIPTION: Lists all the source files (.c) and header files (.h) that make up the Wayland dynamic loading library implementation.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/wayland_dynload_client.c\n  intern/wayland_dynload_cursor.c\n  intern/wayland_dynload_utils.c\n\n  extern/wayland_dynload_API.h\n  extern/wayland_dynload_client.h\n  extern/wayland_dynload_cursor.h\n  intern/wayland_dynload_utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Editor Utility Library\nDESCRIPTION: Adds the Blender editor utility library to the build system using the blender_add_lib function. It also adds a dependency on the RNA generation step.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/util/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_util \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_util bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Thumbnail DLL Build\nDESCRIPTION: Configures the build for BlendThumb.dll on Windows platforms, including Windows-specific source files and linker settings.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blendthumb/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  set(SRC_WIN32\n    src/blendthumb_win32.cc\n    src/blendthumb_win32.def\n    src/blendthumb_win32.rc\n    src/blendthumb_win32_dll.cc\n  )\n\n  add_definitions(-DNOMINMAX)\n\n  add_library(BlendThumb SHARED ${SRC} ${SRC_WIN32})\n\n  target_link_libraries(BlendThumb bf_blenlib dbghelp.lib Version.lib Comctl32.lib)\n  set_target_properties(BlendThumb PROPERTIES LINK_FLAGS \"/OPT:ref\")\n  set_target_properties(BlendThumb PROPERTIES LINK_FLAGS_DEBUG \"/NODEFAULTLIB:msvcrt\")\n  set_target_properties(BlendThumb PROPERTIES VS_GLOBAL_VcpkgEnabled \"false\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions and Building Library\nDESCRIPTION: Adds required compiler definitions for GFLAGS and GLOG, then builds the Ceres library using Blender's custom library addition function\nSOURCE: https://github.com/blender/blender/blob/main/extern/ceres/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(${GFLAGS_DEFINES})\nadd_definitions(${GLOG_DEFINES})\n\nblender_add_lib(extern_ceres \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TBB Support for Blender Modifiers\nDESCRIPTION: Adds Intel Threading Building Blocks (TBB) support to the modifiers module, with Windows-specific workarounds for min/max macros.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/modifiers/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Inserting Python Interpreter with Global and Local Variables\nDESCRIPTION: This code inserts an interactive Python interpreter with access to both global and local variables, useful for more comprehensive debugging in Blender scripts.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/info_tips_and_tricks.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport code\nnamespace = globals().copy()\nnamespace.update(locals())\ncode.interact(local=namespace)\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependencies for Topbar Space\nDESCRIPTION: Sets up a build dependency to ensure that RNA-related header files are generated before compiling the topbar space module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_topbar/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_topbar bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenEXR Library to Blender Build\nDESCRIPTION: Invokes the Blender-specific CMake function to add the OpenEXR library to the build, passing all previously defined variables for includes, sources, and dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/openexr/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_imbuf_openexr \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Point Cloud Editor in CMake\nDESCRIPTION: Sets up include directories for the point cloud editor module, including paths for the module itself, makesrna, and generated RNA prototypes.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/pointcloud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Blender Sequencer Editor\nDESCRIPTION: Lists all the source and header files that are part of the Sequencer Editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_sequencer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  sequencer_add.cc\n  sequencer_buttons.cc\n  sequencer_channels_draw.cc\n  sequencer_channels_edit.cc\n  sequencer_clipboard.cc\n  sequencer_drag_drop.cc\n  sequencer_edit.cc\n  sequencer_modifier.cc\n  sequencer_ops.cc\n  sequencer_preview.cc\n  sequencer_preview_draw.cc\n  sequencer_proxy.cc\n  sequencer_quads_batch.cc\n  sequencer_retiming.cc\n  sequencer_retiming_draw.cc\n  sequencer_scopes.cc\n  sequencer_select.cc\n  sequencer_strips_batch.cc\n  sequencer_text_edit.cc\n  sequencer_thumbnails.cc\n  sequencer_timeline_draw.cc\n  sequencer_view.cc\n  space_sequencer.cc\n\n  sequencer_intern.hh\n  sequencer_quads_batch.hh\n  sequencer_scopes.hh\n  sequencer_strips_batch.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Library Build\nDESCRIPTION: This snippet adds compile definitions that enable specific features or behaviors in the library code. In this case, it defines ENABLE_BINRELOC to indicate that the BinReloc library should be included in the build.\nSOURCE: https://github.com/blender/blender/blob/main/extern/binreloc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DENABLE_BINRELOC)\n\n```\n\n----------------------------------------\n\nTITLE: Building Spreadsheet Space Library\nDESCRIPTION: Adds the spreadsheet space library target and sets up its dependencies on the RNA system.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_spreadsheet/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_spreadsheet \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_spreadsheet bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Handling CBC Dependency\nDESCRIPTION: This block handles the CBC dependency. It adds `cbc.cc` to the source files and includes the COIN include directories.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LEMON_HAVE_CBC)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} cbc.cc)\n  INCLUDE_DIRECTORIES(${COIN_INCLUDE_DIRS})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories for Topbar Space\nDESCRIPTION: Sets up system include directories for the topbar space module. This variable is currently empty but maintained for consistency with other module definitions.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_topbar/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties (UNIX)\nDESCRIPTION: This command sets target properties for the LEMON library on UNIX systems, including the output name, version, and SOVERSION.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(UNIX)\n  SET_TARGET_PROPERTIES(lemon PROPERTIES OUTPUT_NAME emon VERSION ${LEMON_VERSION} SOVERSION ${LEMON_VERSION})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependencies for Blender Sequencer Editor\nDESCRIPTION: Ensures that the RNA-related files are generated before building the Sequencer Editor module.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_sequencer/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_sequencer bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Topbar Space\nDESCRIPTION: Lists the source code files that make up the topbar space module. Currently only includes space_topbar.cc.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_topbar/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  space_topbar.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Make Update Script Path\nDESCRIPTION: Shows the relative path reference to the make_update.py script that currently doesn't use this configuration file.\nSOURCE: https://github.com/blender/blender/blob/main/build_files/config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../utils/make_update.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Blender Functions Library in CMake\nDESCRIPTION: Sets up public include directories for the Blender functions library.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/functions/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Includes, Sources, and Libraries for Curve Fitting\nDESCRIPTION: This CMake configuration snippet sets up the includes, source files, and libraries for the curve fitting component in the Blender project. No system includes or additional libraries are specified, indicating reliance on the defined source files. Core functionality includes finding and refitting curves using cubic and corner detection methods.\nSOURCE: https://github.com/blender/blender/blob/main/extern/curve_fit_nd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  intern/curve_fit_cubic.c\n  intern/curve_fit_cubic_refit.c\n  intern/curve_fit_corners_detect.c\n\n  curve_fit_nd.h\n  intern/curve_fit_inline.h\n  intern/generic_alloc_impl.h\n  intern/generic_heap.c\n  intern/generic_heap.h\n)\n\nset(LIB\n)\n\nblender_add_lib(extern_curve_fit_nd \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::extern::curve_fit_nd ALIAS extern_curve_fit_nd)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Library\nDESCRIPTION: This snippet sets the source files needed for the minilzo library, including its header files. The context shows how to gather files for building the library and emphasizes organization for easy inclusion in the Blender build process.\nSOURCE: https://github.com/blender/blender/blob/main/extern/lzo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  minilzo/minilzo.c\n  minilzo/lzoconf.h\n  minilzo/lzodefs.h\n  minilzo/minilzo.h\n)\n```\n\n----------------------------------------\n\nTITLE: Incompatible With Secondary Licenses Notice Template\nDESCRIPTION: Notice text to indicate that source code is incompatible with secondary licenses under MPL 2.0.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/MPL-2.0.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is \"Incompatible With Secondary Licenses\", as\ndefined by the Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for UFBX Library\nDESCRIPTION: This snippet defines the include directories for the ufbx library. It establishes the public include directory as the current directory.\nSOURCE: https://github.com/blender/blender/blob/main/extern/ufbx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal Shader Sources\nDESCRIPTION: Defines Metal Shading Language (MSL) source files for the Metal backend\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/gpu/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(MSL_SRC\n  metal/mtl_shader_shared.hh\n\n  metal/kernels/compute_texture_update.msl\n  metal/kernels/compute_texture_read.msl\n\n  shaders/metal/mtl_shader_defines.msl\n  shaders/metal/mtl_shader_common.msl\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Lemon Source Files\nDESCRIPTION: This snippet defines the list of source files that make up the Lemon library. These files will be compiled as part of the Quadriflow build.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(LEMON_SOURCES\n  ${LEMON_SRC}/arg_parser.cc\n  ${LEMON_SRC}/base.cc\n  ${LEMON_SRC}/color.cc\n  ${LEMON_SRC}/lp_base.cc\n  ${LEMON_SRC}/lp_skeleton.cc\n  ${LEMON_SRC}/random.cc\n  ${LEMON_SRC}/bits/windows.cc\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Flag Removal for External Libraries\nDESCRIPTION: Removes strict compilation flags for external libraries to prevent warnings that cannot be fixed in third-party projects\nSOURCE: https://github.com/blender/blender/blob/main/extern/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nremove_strict_flags()\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and License for Blender Project in Shell\nDESCRIPTION: This snippet defines the copyright holder as Blender Authors from 2011 and specifies the GPL-2.0-or-later license. It also includes a note about the file being automatically generated by a script.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libmv/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# SPDX-FileCopyrightText: 2011 Blender Authors\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# NOTE: This file is automatically generated by bundle.sh script\n#       If you're doing changes in this file, please update template\n```\n\n----------------------------------------\n\nTITLE: Linking VulkanMemoryAllocator using CMake\nDESCRIPTION: Shows how to link the Vulkan Memory Allocator library to a project using CMake. After finding the package, it handles the configuration of the include directory automatically.\nSOURCE: https://github.com/blender/blender/blob/main/extern/vulkan_memory_allocator/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VulkanMemoryAllocator CONFIG REQUIRED)\ntarget_link_libraries(YourGameEngine PRIVATE GPUOpen::VulkanMemoryAllocator)\n```\n\n----------------------------------------\n\nTITLE: Defining LEMON Sources\nDESCRIPTION: This command defines a list of source files for the LEMON library.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(LEMON_SOURCES\n  arg_parser.cc\n  base.cc\n  color.cc\n  lp_base.cc\n  lp_skeleton.cc\n  random.cc\n  bits/windows.cc\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for Wayland Client and Cursor in CMake\nDESCRIPTION: Specifies the system include directories needed for Wayland client and cursor functionality.\nSOURCE: https://github.com/blender/blender/blob/main/intern/wayland_dynload/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${wayland-client_INCLUDE_DIRS}\n  ${wayland-cursor_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Freestyle Support in View3D Editor CMake Configuration\nDESCRIPTION: Conditionally adds Freestyle support to the View3D editor by defining a preprocessor flag when Freestyle is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/space_view3d/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Addition in CMake\nDESCRIPTION: This snippet shows a conditional block that adds a stub source file if the previous condition is not met. It demonstrates how to handle different build configurations in CMake.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libmv/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  list(APPEND SRC\n    intern/stub.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Compiler Flags in CMake\nDESCRIPTION: Removes a specific compiler warning flag on Windows platforms to handle issues with external files that trigger 'unreferenced formal parameter' warnings.\nSOURCE: https://github.com/blender/blender/blob/main/intern/mantaflow/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  # Some files in `./extern` are being included which brings up a bunch of\n  # \"unreferenced formal parameter\" warnings.\n  # So restore warn C4100 (unreferenced formal parameter) back to w4\n  remove_cc_flag(\"/w34100\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Twine for PyPI Publishing\nDESCRIPTION: Command to install Twine, a tool used for publishing Python packages on PyPI.\nSOURCE: https://github.com/blender/blender/blob/main/release/pypi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install twine\n```\n\n----------------------------------------\n\nTITLE: Adding Grease Pencil I/O Library to Blender Build in CMake\nDESCRIPTION: Adds the Grease Pencil I/O library to the Blender build system using the blender_add_lib function. It uses the previously defined SRC, INC, INC_SYS, and LIB variables.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/grease_pencil/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_grease_pencil \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Blender Release Notes Generator\nDESCRIPTION: Command to install required Python packages from requirements.txt file using pip3.\nSOURCE: https://github.com/blender/blender/blob/main/release/lts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r ./requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing System Include Directories for UTF Conversion Library\nDESCRIPTION: Creates an empty list for system include directories. This variable is maintained for consistency with other CMake files in the project, even though no system includes are currently needed.\nSOURCE: https://github.com/blender/blender/blob/main/intern/utfconv/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Building Blender Gizmo Library and Adding RNA Dependencies\nDESCRIPTION: Creates the gizmo library target and adds RNA generation dependency for proper build order.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/gizmo_library/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_gizmo_library \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_gizmo_library bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Cineon Image Support\nDESCRIPTION: Adds a compiler definition flag if Cineon image format support is enabled. This allows the code to be conditionally compiled based on build configuration options.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/cineon/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories\nDESCRIPTION: Sets up system include directories (empty in this case).\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/editors/mask/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for OpenEXR API\nDESCRIPTION: Lists the source files required for the OpenEXR API implementation, including both the C++ implementation file and its header.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/openexr/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  openexr_api.cpp\n  openexr_api.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Aliasing the UTF Conversion Library Target\nDESCRIPTION: Adds the UTF conversion library to the build system with all specified sources, includes, and dependencies. Creates an alias to the library using the bf::intern::utfconv namespace, allowing for consistent naming across the project.\nSOURCE: https://github.com/blender/blender/blob/main/intern/utfconv/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_utfconv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::utfconv ALIAS bf_intern_utfconv)\n```\n\n----------------------------------------\n\nTITLE: Marking Advanced CMake Variables\nDESCRIPTION: This snippet marks various CMake variables as advanced to hide them from the default CMake GUI view, as they're specialized settings for OSL (Open Shading Language) and LLVM integration.\nSOURCE: https://github.com/blender/blender/blob/main/CMakeLists.txt#2025-04-23_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\n# defined above, platform specific but shared names\nmark_as_advanced(\n  CYCLES_OSL\n  OSL_LIB_EXEC\n  OSL_COMPILER\n  OSL_LIB_COMP\n  OSL_LIB_QUERY\n  OSL_INCLUDE_DIR\n)\n\nmark_as_advanced(\n  LLVM_CONFIG\n  LLVM_ROOT_DIR\n  LLVM_LIBRARY\n  LLVM_VERSION\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency Subdirectory Configuration\nDESCRIPTION: Adds various external library subdirectories based on specific build configuration flags, including optional libraries like Bullet, Draco, LZO, CUDA, and more\nSOURCE: https://github.com/blender/blender/blob/main/extern/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BULLET)\n  if(NOT WITH_SYSTEM_BULLET)\n    add_subdirectory(bullet2)\n  endif()\nendif()\n\nif(WITH_DRACO)\n  add_subdirectory(draco)\nendif()\n\nif(WITH_CYCLES OR WITH_OPENSUBDIV)\n  if((WITH_CYCLES_DEVICE_CUDA OR WITH_CYCLES_DEVICE_OPTIX) AND WITH_CUDA_DYNLOAD)\n    add_subdirectory(cuew)\n  endif()\n  if(WITH_CYCLES_DEVICE_HIP AND WITH_HIP_DYNLOAD)\n    add_subdirectory(hipew)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Libmv Library in CMake\nDESCRIPTION: This command adds the Libmv library to the Blender project using the blender_add_lib function. It specifies the library name, source files, include directories, system include directories, and linked libraries.\nSOURCE: https://github.com/blender/blender/blob/main/intern/libmv/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_libmv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Suite for Wavefront OBJ Library in CMake\nDESCRIPTION: Sets up test sources, includes, and dependencies for the Wavefront OBJ library's Google Test suite, conditionally included when WITH_GTESTS is enabled.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/io/wavefront_obj/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/obj_exporter_tests.cc\n    tests/obj_importer_tests.cc\n    tests/obj_mtl_parser_tests.cc\n  )\n\n  set(TEST_INC\n    ${INC}\n\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n\n  set(TEST_LIB\n    ${LIB}\n\n    bf_blenloader_test_util\n    bf_io_wavefront_obj\n  )\n\n  blender_add_test_suite_lib(io_wavefront \"${TEST_SRC}\" \"${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files and Dependencies for Msgfmt Build\nDESCRIPTION: Sets up include directories and source files for the msgfmt executable build. Includes special handling for Windows manifest files and platform-specific dependencies.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/blentranslation/msgfmt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n)\n\nset(SRC\n  msgfmt.cc\n)\n\n# Manifest required for selecting comctl32 v6 required by the crash popup.\nif(WIN32 AND NOT WITH_WINDOWS_EXTERNAL_MANIFEST)\n  LIST(APPEND SRC \"${CMAKE_BINARY_DIR}/tests.exe.manifest\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories\nDESCRIPTION: Creates an empty list for system include directories which may be populated conditionally later in the file.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/imbuf/intern/openexr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries in CMake\nDESCRIPTION: This snippet sets external libraries that are required. In this case, no other external library are required, so the variable is empty.\nSOURCE: https://github.com/blender/blender/blob/main/extern/fmtlib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the IK Solver Library to Blender Build\nDESCRIPTION: Calls Blender's custom function to add the IK solver as a library to the build system, passing all the previously defined variables as parameters.\nSOURCE: https://github.com/blender/blender/blob/main/intern/iksolver/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_iksolver \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries\nDESCRIPTION: This snippet defines any linked libraries for the xxhash library. In this case, there are none set.\nSOURCE: https://github.com/blender/blender/blob/main/extern/xxhash/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting LEMON Solver Flags\nDESCRIPTION: This snippet sets LEMON specific flags based on whether the solver packages are found.  It sets the LEMON_HAVE_* flags and the LEMON_DEFAULT_* flags which are used later to configure the build.\nSOURCE: https://github.com/blender/blender/blob/main/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nIF(GLPK_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_MIP TRUE)\n  SET(LEMON_HAVE_GLPK TRUE)\nENDIF(GLPK_FOUND)\nIF(ILOG_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_MIP TRUE)\n  SET(LEMON_HAVE_CPLEX TRUE)\nENDIF(ILOG_FOUND)\nIF(COIN_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_MIP TRUE)\n  SET(LEMON_HAVE_CLP TRUE)\n  SET(LEMON_HAVE_CBC TRUE)\nENDIF(COIN_FOUND)\nIF(SOPLEX_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_SOPLEX TRUE)\nENDIF(SOPLEX_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Dualcon Library in CMake\nDESCRIPTION: Defines the include paths for the Dualcon library compilation. Includes the current directory, intern subdirectory, and the guardedalloc directory one level up.\nSOURCE: https://github.com/blender/blender/blob/main/intern/dualcon/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  intern\n  ../guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling GLSL Shaders as C++ in CMake\nDESCRIPTION: Conditionally compiles GLSL shaders as C++ code if WITH_GPU_SHADER_CPP_COMPILATION is enabled. This includes vertex, fragment, and compute shaders, but excludes library shaders to avoid warnings.\nSOURCE: https://github.com/blender/blender/blob/main/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(workbench_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(workbench_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  compile_sources_as_cpp(workbench_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(workbench_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: UILayout.template_shaderfx Argument Change\nDESCRIPTION: This snippet captures the modifications to the `template_shaderfx` function within the `UILayout` class. The function's argument structure has been updated.\nSOURCE: https://github.com/blender/blender/blob/main/doc/python_api/rst/change_log.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\":class:`bpy.types.UILayout.template_shaderfx` (), *was (data)*\"\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer for LGPL v2.1 Licensed Library\nDESCRIPTION: An example of a copyright disclaimer that can be used by an employer or organization to disclaim copyright interest in a library licensed under LGPL v2.1. It includes placeholders for the organization name, library name, and author name.\nSOURCE: https://github.com/blender/blender/blob/main/release/license/spdx/LGPL-2.1-or-later.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```"
  }
]