[
  {
    "owner": "rwl",
    "repo": "pypower",
    "content": "TITLE: Solving AC power flow using Python API\nDESCRIPTION: Demonstrates how to load a 9-bus test case, configure power flow options for fast-decoupled method, run the power flow, and print results using the Python API.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nIn [2]: ppc = case9()\n\nIn [3]: ppopt = ppoption(PF_ALG=2)\n\nIn [4]: r = runpf(ppc, ppopt)\n\nIn [5]: printpf(r)\n```\n\n----------------------------------------\n\nTITLE: Running Optimal Power Flow\nDESCRIPTION: Example of solving OPF for IEEE Reliability Test System and saving results to file.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvenv/bin/opf -c case24_ieee_rts --solvedcase=rtsout.py\n```\n\n----------------------------------------\n\nTITLE: Running Power Flow Analysis\nDESCRIPTION: Examples of running power flow analysis using the pf command on IEEE 14 bus test case.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvenv/bin/pf -c case14\nvenv/bin/pf /path/to/case14.py\n```\n\n----------------------------------------\n\nTITLE: Running OPF with output to a solved case file\nDESCRIPTION: Demonstrates how to solve an Optimal Power Flow for the IEEE Reliability Test System and write the solved case to a file.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ opf -c case24_ieee_rts --solvedcase=rtsout.py\n```\n\n----------------------------------------\n\nTITLE: Importing PYPOWER API modules\nDESCRIPTION: Shows how to import necessary functions from the PYPOWER API for power flow analysis.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: from pypower.api import case9, ppoption, runpf, printpf\n```\n\n----------------------------------------\n\nTITLE: Running power flow on IEEE 14 bus test case\nDESCRIPTION: Demonstrates how to run a power flow simulation on the built-in IEEE 14 bus test case using the CLI.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pf -c case14\n```\n\n----------------------------------------\n\nTITLE: Running power flow with a custom case file\nDESCRIPTION: Shows how to run a power flow simulation by specifying a path to a custom PYPOWER case data file.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pf /path/to/case14.py\n```\n\n----------------------------------------\n\nTITLE: Installing PYPOWER via pip\nDESCRIPTION: Installs PYPOWER package using pip package manager in the virtual environment.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvenv/bin/python -m pip install PYPOWER\n```\n\n----------------------------------------\n\nTITLE: Installing PYPOWER Dependencies\nDESCRIPTION: Installs required dependencies (NumPy, SciPy, PyRLU) using pip and requirements.txt file in the virtual environment.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvenv/bin/python -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for PYPOWER\nDESCRIPTION: Creates a Python virtual environment for isolated PYPOWER installation using Python 3.8 or other supported versions.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3.8 -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Installing PYPOWER Using setuptools in Bash\nDESCRIPTION: Demonstrates how to install PYPOWER using the easy_install command from setuptools. This is the simplest installation method that automatically handles dependencies.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ easy_install PYPOWER\n```\n\n----------------------------------------\n\nTITLE: Running power flow CLI command with help flag\nDESCRIPTION: Shows how to access help information for the 'pf' command line utility that runs power flow simulations.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pf -h\n```\n\n----------------------------------------\n\nTITLE: Installing PYPOWER with Root Privileges in Bash\nDESCRIPTION: Demonstrates how to install PYPOWER with root privileges using sudo on UNIX systems, which may be necessary to install scripts to protected directories.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of PYPOWER from Source in Bash\nDESCRIPTION: Shows how to download, extract, and install PYPOWER from a source tarball. This method requires manually downloading the package first.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tar zxf PYPOWER-4.0.tar.gz\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Manual PYPOWER Installation\nDESCRIPTION: Alternative installation method by downloading and installing PYPOWER from source tarball.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar zxf PYPOWER-5.x.y.tar.gz\nvenv/bin/python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Cloning PYPOWER Development Repository in Bash\nDESCRIPTION: Shows how to clone the PYPOWER development Git repository from GitHub for those who want to access the latest code or contribute to development.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone http://github.com/rwl/PYPOWER.git\n```\n\n----------------------------------------\n\nTITLE: Accessing function help in Python\nDESCRIPTION: Shows how to access Python documentation for a PYPOWER function using the built-in help system.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/usage.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nIn [6]: help runpf\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Specification\nDESCRIPTION: Defines the exact versions of required Python packages. Includes scientific computing packages (numpy, scipy), development tools (tox, virtualenv), and utility libraries (six, toml). This ensures reproducible environments across different installations.\nSOURCE: https://github.com/rwl/pypower/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nappdirs==1.4.4\ndistlib==0.3.1\nfilelock==3.0.12\nnumpy==1.22.0\npackaging==20.9\npip==21.1\npluggy==0.13.1\npy==1.10.0\npyparsing==2.4.7\npyrlu==0.2.1\nscipy==1.6.1\nsetuptools==65.5.1\nsix==1.15.0\ntoml==0.10.2\ntox==3.23.0\nvirtualenv==20.4.3\n```\n\n----------------------------------------\n\nTITLE: Running PYPOWER Tests\nDESCRIPTION: Executes PYPOWER tests using tox for Python 2.7 and 3.8 environments.\nSOURCE: https://github.com/rwl/pypower/blob/master/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvenv/bin/python -m tox -e py27,py38\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting IPOPT Source Code in Bash\nDESCRIPTION: Commands for downloading and extracting the IPOPT solver version 3.9.3 source code. IPOPT is required for solving AC optimal power flow problems and DC OPF problems with quadratic cost functions.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wget http://www.coin-or.org/download/source/Ipopt/Ipopt-3.9.3.tgz\n$ tar xvf Ipopt-3.9.3.tgz\n$ cd Ipopt-3.9.3/\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing IPOPT in Bash\nDESCRIPTION: Commands for configuring, compiling, and installing IPOPT with a custom installation prefix. This example installs IPOPT to the /usr/local directory.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --prefix=/usr/local\n$ make\n$ sudo make install\n```\n\n----------------------------------------\n\nTITLE: Installing MUMPS Linear Solver for IPOPT in Bash\nDESCRIPTION: Commands for downloading and setting up MUMPS, a third-party linear solver required by IPOPT. This process uses the provided script to obtain and patch MUMPS automatically.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ThirdParty/Mumps\n$ ./get.Mumps\n$ cd ../..\n```\n\n----------------------------------------\n\nTITLE: Obtaining PyIPOPT Source Code in Bash\nDESCRIPTION: Commands for checking out the latest PyIPOPT source code from the Subversion repository. PyIPOPT provides the Python interface to the IPOPT solver.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ..\n$ svn checkout https://pyipopt.googlecode.com/svn/trunk/ pyipopt\n$ cd pyipopt/\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing PyIPOPT in Bash\nDESCRIPTION: Commands for compiling the PyIPOPT Python extension and installing it to the Python distribution packages directory specified in the Makefile.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: PyIPOPT Makefile Configuration\nDESCRIPTION: Makefile for building the PyIPOPT Python interface to IPOPT. This file needs to be modified with the correct paths for IPOPT libraries and Python installation on the system.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_6\n\nLANGUAGE: makefile\nCODE:\n```\nCC = gcc\nCFLAGS = -O3 -fpic -shared #-g\nDFLAGS = -fpic -shared\nLDFLAGS = -lipopt -lm -llapack -lblas -lcoinmumps\n\nPY_DIR = /usr/local/lib/python2.6/dist-packages\nIPOPT_INCLUDE = /usr/local/include/coin\n\nIPOPT_LIB = /usr/local/lib/coin\n\nMUMPS_INCLUDE=/usr/local/include/coin/ThirdParty\nMUMPS_LIB = /usr/local/lib/coin/ThirdParty\n\nPYTHON_INCLUDE = /usr/include/python2.6\n\nNUMPY_INCLUDE = /usr/include/numpy\n\npyipopt: src/callback.c src/pyipopt.c\n\t$(CC) -o pyipopt.so -L$(IPOPT_LIB) -I$(IPOPT_INCLUDE) -L$(MUMPS_LIB) -I$(MUMPS_INCLUDE) -I$(PYTHON_INCLUDE) -I$(NUMPY_INCLUDE) $(CFLAGS) $(LDFLAGS) src/pyipopt.c src/callback.c\n\ninstall: pyipopt\n\tcp ./pyipopt.so $(PY_DIR)\nclean:\n\trm pyipopt.so\n```\n\n----------------------------------------\n\nTITLE: IPOPT Library Paths Configuration\nDESCRIPTION: Configuration file content specifying the paths to IPOPT and MUMPS libraries that should be added to the system's library search path.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/lib/coin\n/usr/local/lib/coin/ThirdParty\n```\n\n----------------------------------------\n\nTITLE: Creating IPOPT Library Configuration File in Bash\nDESCRIPTION: Commands for creating a configuration file to help the system linker locate the IPOPT and MUMPS libraries. This file is placed in the system's library configuration directory.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo nano -w /etc/ld.so.conf.d/ipopt.conf\n```\n\n----------------------------------------\n\nTITLE: Building LP Solve Library in Bash\nDESCRIPTION: Commands for building the LP Solve library, which is used for DC OPF problems with piecewise linear cost functions. This compiles the core LP Solve library.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd lp_solve_5.5/lpsolve55\n$ sh ./ccc\n```\n\n----------------------------------------\n\nTITLE: Building and Installing LP Solve Python Interface in Bash\nDESCRIPTION: Commands for building and installing the Python interface to LP Solve, which allows PYPOWER to use LP Solve for optimization problems from Python code.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../extra/Python/\n$ sudo python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing LP Solve Library in Bash\nDESCRIPTION: Command for copying the compiled LP Solve library files to the system library path, making them available for other applications.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/solvers.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cp bin/ux32/* /usr/loca/lib/\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PYPOWER Documentation in reStructuredText\nDESCRIPTION: This snippet defines the structure of the PYPOWER documentation using reStructuredText directives. It includes conditional content for HTML output, a table of contents tree, and links to various documentation sections.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPYPOWER documentation\n=====================\n\n.. only:: html\n\n  Download `PDF <rwl.github.io/PYPOWER/PYPOWER.pdf>`_\n\n  Contents:\n\n.. toctree::\n  :maxdepth: 2\n\n  intro\n  copyright\n  install\n  usage\n  solvers\n  support\n\n.. only:: html\n\n  `API documentation <https://rwl.github.io/PYPOWER/api>`_\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Defining Link Targets in reStructuredText for PYPOWER Documentation\nDESCRIPTION: A comprehensive set of link targets in reStructuredText format that define references to programming languages, libraries, and tools related to the PYPOWER project. These references can be used throughout documentation to create consistent hyperlinks to these resources.\nSOURCE: https://github.com/rwl/pypower/blob/master/doc/link_names.txt#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _Python: http://www.python.org\n.. _Setuptools: http://peak.telecommunity.com/DevCenter/setuptools\n.. _SciPy: http://www.scipy.org\n.. _MATPOWER: http://www.pserc.cornell.edu/matpower/\n.. _Git: http://git-scm.com/\n.. _GitHub: http://github.com/rwl/PYPOWER\n.. _`API documentation`: https://rwl.github.io/PYPOWER/api\n.. _PyIPOPT: http://code.google.com/p/pyipopt/\n.. _IPOPT: https://projects.coin-or.org/Ipopt\n.. _MUMPS: http://graal.ens-lyon.fr/MUMPS/\n.. _lp_solve: http://sourceforge.net/projects/lpsolve/\n```"
  }
]