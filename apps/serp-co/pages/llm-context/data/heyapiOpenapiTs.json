[
  {
    "owner": "hey-api",
    "repo": "openapi-ts",
    "content": "TITLE: Generating Client Programmatically in Node.js (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `@hey-api/openapi-ts` package programmatically within a Node.js environment to generate a client. It imports the `createClient` function and configures it with the input OpenAPI specification URL, output directory, and plugins.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { createClient } from '@hey-api/openapi-ts';\n\ncreateClient({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for API Types in types.gen.ts\nDESCRIPTION: This snippet shows examples of TypeScript interfaces generated in the types.gen.ts file, including a Pet type, AddPetData request type, and AddPetResponse type.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Pet = {\n  id?: number;\n  name: string;\n};\n\nexport type AddPetData = {\n  body: Pet;\n};\n\nexport type AddPetResponse = Pet;\n```\n\n----------------------------------------\n\nTITLE: Installing @hey-api/openapi-ts and @hey-api/client-fetch\nDESCRIPTION: Shows installation commands for @hey-api/openapi-ts and @hey-api/client-fetch using different package managers (npm, pnpm, yarn, bun).\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @hey-api/client-fetch && npm install @hey-api/openapi-ts -D\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @hey-api/client-fetch && pnpm add @hey-api/openapi-ts -D\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @hey-api/client-fetch && yarn add @hey-api/openapi-ts -D\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @hey-api/client-fetch && bun add @hey-api/openapi-ts -D\n```\n\n----------------------------------------\n\nTITLE: Configuring No SDK Generation in @hey-api/openapi-ts\nDESCRIPTION: Configuration to skip SDK generation and use clients directly. This is achieved by omitting the @hey-api/sdk plugin from the configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    '@hey-api/client-fetch',\n    '@hey-api/typescript',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Client Configuration from Root to Plugins\nDESCRIPTION: Updates configuration to move client options from the root level to the plugins array as required in v0.63.0 and later.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch', // [!code --]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Client with @hey-api/openapi-ts via npx\nDESCRIPTION: Demonstrates how to use npx to quickly generate a TypeScript client from an OpenAPI specification using @hey-api/openapi-ts with the Fetch API client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-fetch\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI TypeScript Client with TypeScript\nDESCRIPTION: Configuration file for generating a TypeScript client using @hey-api/openapi-ts with a remote OpenAPI specification, specifying input URL, output directory, and client plugin\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@hey-api/openapi-ts';\n\nexport default defineConfig({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration using openapi-ts.config.ts\nDESCRIPTION: This TypeScript configuration file shows how to define the input, output, and plugins for the `@hey-api/openapi-ts` tool using the `defineConfig` function. This configuration is used to generate a client from an OpenAPI specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@hey-api/openapi-ts';\n\nexport default defineConfig({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration using openapi-ts.config.cjs\nDESCRIPTION: This CommonJS configuration file defines the input, output, and plugins for `@hey-api/openapi-ts` tool. It demonstrates how to use module.exports to export the configuration object which is later utilized by the tool.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@hey-api/openapi-ts').UserConfig} */\nmodule.exports = {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Quick Start CLI Command for OpenAPI TypeScript\nDESCRIPTION: Basic npx command to generate a client using @hey-api/openapi-ts with the Fetch API client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-fetch\n```\n\n----------------------------------------\n\nTITLE: Input Filtering with Include Regex\nDESCRIPTION: Configuration to filter OpenAPI specification by including only specific schemas and paths using regular expressions\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: {\n    include: '^(#/components/schemas/foo|#/paths/api/v1/foo/get)$',\n    path: 'https://get.heyapi.dev/hey-api/backend',\n  },\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Installation commands for different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @hey-api/client-fetch && npm install @hey-api/openapi-ts -D\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @hey-api/client-fetch && pnpm add @hey-api/openapi-ts -D\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @hey-api/client-fetch && yarn add @hey-api/openapi-ts -D\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @hey-api/client-fetch && bun add @hey-api/openapi-ts -D\n```\n\n----------------------------------------\n\nTITLE: Configuring @hey-api/typescript Plugin with Default Options\nDESCRIPTION: This snippet demonstrates how to configure the @hey-api/typescript plugin in the project configuration file, preserving default plugins and adding custom options.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      name: '@hey-api/typescript',\n      // ...custom options\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Executing OpenAPI TypeScript via npx\nDESCRIPTION: This command uses npx to run the `@hey-api/openapi-ts` package, generating a client from a specified OpenAPI definition URL and outputting the generated files to a specified directory using the `@hey-api/client-fetch` client. The command demonstrates a quick way to generate a client from an OpenAPI specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-fetch\n```\n\n----------------------------------------\n\nTITLE: Adding openapi-ts Script to package.json\nDESCRIPTION: Demonstrates how to add a script to package.json to make openapi-ts executable through npm scripts.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"openapi-ts\": \"openapi-ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK-level validator in @hey-api/openapi-ts\nDESCRIPTION: This snippet demonstrates how to set up a validator at the SDK level using the 'sdk.validator' option. It configures Zod as the validator for response validation in the generated SDK.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/validators.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    '@hey-api/client-fetch',\n    {\n      name: '@hey-api/sdk',\n      validator: 'zod',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Flat SDK for API Requests in TypeScript\nDESCRIPTION: Example of how to use a flat SDK to make API requests. The example imports and calls the addPet function to add a new pet to the API.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addPet } from './client/sdk.gen';\n\naddPet({\n  body: {\n    name: 'Kitty',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Client Programmatically with @hey-api/openapi-ts\nDESCRIPTION: Shows how to use @hey-api/openapi-ts programmatically in a TypeScript file to generate a client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createClient } from '@hey-api/openapi-ts';\n\ncreateClient({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration using openapi-ts.config.mjs\nDESCRIPTION: This ES module configuration file defines the input, output, and plugins for the `@hey-api/openapi-ts` tool. It showcases how to use `export default` to export the configuration object that will be used by the tool to generate code.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@hey-api/openapi-ts').UserConfig} */\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI SDK Transformer Option - JavaScript\nDESCRIPTION: This snippet shows how to configure the OpenAPI SDK generation settings. It includes specifying the transformer for SDK responses and adds the default plugins. Required dependency: '@hey-api/openapi-ts'.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n    client: '@hey-api/client-fetch',\n    input: 'path/to/openapi.json',\n    output: 'src/client',\n    plugins: [\n      ...defaultPlugins,\n      {\n        name: '@hey-api/sdk',\n        transformer: true, // [!code ++]\n      },\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI TypeScript Client with ES Module\nDESCRIPTION: Configuration file for generating a TypeScript client using @hey-api/openapi-ts with a remote OpenAPI specification in ES Module format\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@hey-api/openapi-ts').UserConfig} */\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Fetch API Client for Hey API\nDESCRIPTION: Commands to install the @hey-api/client-fetch package using different package managers.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @hey-api/client-fetch\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @hey-api/client-fetch\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @hey-api/client-fetch\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @hey-api/client-fetch\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Client Generation with Watch Mode - JavaScript\nDESCRIPTION: This snippet provides a configuration object for generating an OpenAPI client. It includes client settings, input and output paths, and enables watch mode for automatic regeneration of API calls when the schema changes. Required dependency: '@hey-api/client-fetch'.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n    client: '@hey-api/client-fetch',\n    input: 'path/to/openapi.json',\n    output: 'src/client',\n    watch: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hey API with Next.js Client\nDESCRIPTION: Configuration options for adding the Next.js client to your Hey API setup, both in a config file and via CLI.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-next'], // [!code ++]\n};\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-next # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI TypeScript script to package.json\nDESCRIPTION: This JSON snippet shows how to add a script to the `package.json` file to make the `openapi-ts` command executable via npm (or equivalent package manager) scripts. This allows running the OpenAPI TypeScript code generator using `npm run openapi-ts`.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"openapi-ts\": \"openapi-ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI TypeScript and Client Fetch via npm\nDESCRIPTION: This command installs both the `@hey-api/client-fetch` package and the `@hey-api/openapi-ts` package using npm. The `openapi-ts` package is installed as a development dependency using the `-D` flag.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @hey-api/client-fetch && npm install @hey-api/openapi-ts -D\n```\n\n----------------------------------------\n\nTITLE: Running OpenAPI Client Generation via CLI - Shell\nDESCRIPTION: This command uses the CLI to generate an OpenAPI client by specifying input and output paths, along with other options like the client and watch flag. Required dependencies include '@hey-api/openapi-ts' and '@hey-api/client-fetch'.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n    -c @hey-api/client-fetch \\\n    -i path/to/openapi.json \\\n    -o src/client \\\n    -w\n```\n\n----------------------------------------\n\nTITLE: Configuring Flat SDK Generation in @hey-api/openapi-ts\nDESCRIPTION: Configuration for generating flat SDKs, which is the default option. This approach supports tree-shaking for reduced bundle size.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      asClass: false, // default \n      name: '@hey-api/sdk',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Fetch Client\nDESCRIPTION: Example of setting up authentication for the Fetch client using the auth field in the configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  auth: () => '<my_token>',\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Date String Conversion\nDESCRIPTION: Configuration to enable automatic conversion of date strings into Date objects using the dates option. This generates types that use Date instead of string and appropriate transformers.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/transformers.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      dates: true, // [!code ++]\n      name: '@hey-api/transformers',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Query - Basic Query Example\nDESCRIPTION: Example showing how to use a generated query function with TanStack Query's useQuery hook.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/tanstack-query.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = useQuery({\n  ...getPetByIdOptions({\n    path: {\n      petId: 1,\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hey API with Zod Plugin\nDESCRIPTION: Configuration example showing how to add the Zod plugin to the Hey API configuration. This allows generation of Zod artifacts for schema validation based on OpenAPI specifications.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/zod.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    'zod', // [!code ++]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Response Interceptor to Fetch Client\nDESCRIPTION: Example of adding a response interceptor to modify responses before they are returned to the application.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.interceptors.response.use((response) => {\n  // do something\n  return response;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hey API with Zod and SDK Validation\nDESCRIPTION: Configuration example for setting up Hey API with both Zod plugin and SDK validation. This enables automatic validation of response data in the SDK using Zod schemas.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/zod.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    'zod',\n    {\n      name: '@hey-api/sdk', // [!code ++]\n      validator: true, // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Plugin - React Configuration\nDESCRIPTION: Configuration example showing how to add the TanStack Query plugin for React applications using @hey-api/openapi-ts.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/tanstack-query.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    '@tanstack/react-query',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Client Instance with createClient()\nDESCRIPTION: Examples showing how to create and use a custom client instance with createClient() and passing it to SDK functions.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@hey-api/client-nuxt';\n\nconst myClient = createClient({\n  baseURL: 'https://example.com',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await getFoo({\n  client: myClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Class-Based SDK Generation in @hey-api/openapi-ts\nDESCRIPTION: Configuration for generating class-based SDKs. This approach doesn't support tree-shaking but provides a class-oriented syntax that some developers prefer.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      asClass: true, \n      name: '@hey-api/sdk',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hey API with Axios Client\nDESCRIPTION: Configuration examples showing how to add the Axios client plugin to Hey API configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-axios'],\n};\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-axios\n```\n\n----------------------------------------\n\nTITLE: Configuring Hey API with the Nuxt Client\nDESCRIPTION: Examples showing how to add the Nuxt client to Hey API configuration as a plugin, using both config object and CLI approaches.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-nuxt'], // [!code ++]\n};\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-nuxt # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Handlers with Fastify in TypeScript\nDESCRIPTION: This example demonstrates how to create route handlers using the generated Fastify artifacts. It shows the implementation of three endpoints: createPets, listPets, and showPetById.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/fastify.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fastify = Fastify();\nconst serviceHandlers: RouteHandlers = {\n  createPets(request, reply) {\n    reply.code(201).send();\n  },\n  listPets(request, reply) {\n    reply.code(200).send([]);\n  },\n  showPetById(request, reply) {\n    reply.code(200).send({\n      id: Number(request.params.petId),\n      name: 'Kitty',\n    });\n  },\n};\nfastify.register(glue, { serviceHandlers });\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin-level validator in @hey-api/openapi-ts\nDESCRIPTION: This snippet shows how to set up a validator at the plugin level for more granular control. It enables validation in the SDK and adds Zod as a separate plugin with additional configuration options.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/validators.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    '@hey-api/client-fetch',\n    {\n      name: '@hey-api/sdk',\n      validator: true,\n    },\n    {\n      name: 'zod',\n      // other options\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Clients from Hey API OpenAPI Specifications\nDESCRIPTION: Examples of how to generate clients from Hey API-hosted OpenAPI specifications using different tools. Shows commands for Hey API's own client generator, OpenAPI TypeScript, Orval, and a generic placeholder for other tools.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-fetch\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx openapi-typescript \\\n  https://get.heyapi.dev/hey-api/backend \\\n  -o schema.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx orval \\\n  --input https://get.heyapi.dev/hey-api/backend \\\n  --output ./src/client.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nother-cli \\\n  --input https://get.heyapi.dev/hey-api/backend \\\n  --output refer/to/other/tools/docs\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hey API Client Instance\nDESCRIPTION: Example of creating a custom client instance with specific configuration options using the createClient function.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@hey-api/client-next';\n\nconst myClient = createClient({\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Configuration with createClientConfig()\nDESCRIPTION: Implementing a custom configuration file with the createClientConfig() function to override default client configuration values.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CreateClientConfig } from './client/client.gen';\n\nexport const createClientConfig: CreateClientConfig = (config) => ({\n  ...config,\n  baseURL: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Configuration\nDESCRIPTION: Example of custom runtime configuration implementation for the Axios client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CreateClientConfig } from './client/client.gen';\n\nexport const createClientConfig: CreateClientConfig = (config) => ({\n  ...config,\n  baseURL: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Response Transformer Example\nDESCRIPTION: Example of a generated response transformer that converts date strings to Date objects. This demonstrates how transformers recursively process nested objects and handle different schema types.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/transformers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetFooResponse } from './types.gen';\n\nconst quxSchemaResponseTransformer = (data: any) => {\n  if (data.baz) {\n    data.baz = new Date(data.baz);\n  }\n  return data;\n};\n\nconst bazSchemaResponseTransformer = (data: any) => {\n  data = quxSchemaResponseTransformer(data);\n  data.bar = new Date(data.bar);\n  return data;\n};\n\nexport const getFooResponseTransformer = async (\n  data: any,\n): Promise<GetFooResponse> => {\n  data = bazSchemaResponseTransformer(data);\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Interceptors\nDESCRIPTION: Example of adding request interceptors to the Axios client instance.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.instance.interceptors.request.use((config) => {\n  // do something\n  return config;\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Client File in TypeScript\nDESCRIPTION: Displays the contents of the generated client.gen.ts file, which creates and exports a client instance using @hey-api/client-fetch.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, createConfig } from '@hey-api/client-fetch';\n\nexport const client = createClient(createConfig());\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Type Safety\nDESCRIPTION: Example of using the buildUrl method with TypeScript type hints for URL construction.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype FooData = {\n  path: {\n    fooId: number;\n  };\n  query?: {\n    bar?: string;\n  };\n  url: '/foo/{fooId}';\n};\n\nconst url = client.buildUrl<FooData>({\n  path: {\n    fooId: 1,\n  },\n  query: {\n    bar: 'baz',\n  },\n  url: '/foo/{fooId}',\n});\nconsole.log(url); // prints '/foo/1?bar=baz'\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI TypeScript and Client Fetch via pnpm\nDESCRIPTION: This command installs both the `@hey-api/client-fetch` package and the `@hey-api/openapi-ts` package using pnpm. The `openapi-ts` package is installed as a development dependency using the `-D` flag.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @hey-api/client-fetch && pnpm add @hey-api/openapi-ts -D\n```\n\n----------------------------------------\n\nTITLE: Configuring Client with Plugins\nDESCRIPTION: This snippet shows how to configure the client with specific plugins while disabling certain exports through plugin settings. It reflects the removal of legacy shorthand options, enforcing explicit plugin configurations.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  schemas: false, // [!code --]\n  plugins: ['@hey-api/types', '@hey-api/services'], // [!code ++]\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  schemas: {\n    export: false, // [!code --]\n  },\n  plugins: ['@hey-api/types', '@hey-api/services'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Dates Handling\nDESCRIPTION: In this snippet, the `types.dates` setting has been simplified for all plugins to handle dates more intuitively. It now allows boolean values and is handled by the new `@hey-api/transformers` plugin. The configuration applies to both types and their generation.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  types: {\n    dates: 'types+transform', // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      dates: true, // [!code ++]\n      name: '@hey-api/transformers',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Config Generic from Boolean to ClientOptions Interface\nDESCRIPTION: Shows how to update type definitions using the Config interface, changing from a boolean generic parameter to the new ClientOptions interface introduced in v0.64.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype Foo = Config<false>; // [!code --]\ntype Foo = Config<{ throwOnError: false }>; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Generation as JavaScript Objects\nDESCRIPTION: This configuration snippet shows how to set the enums option to 'javascript' to generate runtime enums as plain JavaScript objects, which is recommended for better type safety and compatibility.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      enums: 'javascript',\n      name: '@hey-api/typescript',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Interceptors for Authentication\nDESCRIPTION: Example of using request interceptors to add authentication headers to each request as an alternative to the auth field.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  onRequest: ({ options }) => {\n    options.headers.set('Authorization', 'Bearer <my_token>'); // [!code ++]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Types with Date Objects\nDESCRIPTION: Example of generated TypeScript types that use Date objects instead of strings. This shows how the transformer affects the type definitions used in the API client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/transformers.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Baz = Qux & {\n  id: 'Baz';\n} & {\n  foo: number;\n  bar: Date;\n  baz: 'foo' | 'bar' | 'baz';\n  qux: number;\n};\n\nexport type Qux = {\n  foo: number;\n  bar: number;\n  baz?: Date;\n  id: string;\n};\n\nexport type GetFooResponse = Baz;\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL\nDESCRIPTION: This snippet demonstrates how to configure the default base URL for the generated client using the `baseUrl` option in the configuration file. By default, the library attempts to resolve the first defined server or infer the base URL from the input path. Setting `baseUrl` to `false` preserves the previous behavior.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    {\n      baseUrl: false, // [!code ++]\n      name: '@hey-api/client-fetch',\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Hey API Client\nDESCRIPTION: Example of setting up authentication by providing a token function to the client configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  auth: () => '<my_token>', // [!code ++]\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Class-Based SDK for API Requests in TypeScript\nDESCRIPTION: Example of how to use a class-based SDK to make API requests. The example imports the PetService class and calls its static addPet method.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PetService } from './client/sdk.gen';\n\nPetService.addPet({\n  body: {\n    name: 'Kitty',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication\nDESCRIPTION: Examples of configuring authentication using both the auth field and interceptors.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  auth: () => '<my_token>',\n  baseURL: 'https://example.com',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.instance.interceptors.request.use((config) => {\n  config.headers.set('Authorization', 'Bearer <my_token>');\n  return config;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with Token Function\nDESCRIPTION: Setting up authentication by configuring the auth field with a function that returns a token for authenticated requests.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  auth: () => '<my_token>', // [!code ++]\n  baseURL: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring @hey-api/schemas Plugin with JSON Type\nDESCRIPTION: Example configuration for the @hey-api/openapi-ts package using JSON type for schema generation. This shows how to set up the default plugins while adding the schemas plugin with JSON output format.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/json-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      name: '@hey-api/schemas',\n      type: 'json', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming schemas.name to nameBuilder in JavaScript Plugin Configuration\nDESCRIPTION: Example demonstrating the migration from using the schemas.name option to the new nameBuilder option in the plugin configuration to avoid conflicts with the plugin's name field.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  schemas: {\n    name: (name) => `${name}Schema`, // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      nameBuilder: (name) => `${name}Schema`, // [!code ++]\n      name: '@hey-api/schemas',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI TypeScript and Client Fetch via bun\nDESCRIPTION: This command installs both the `@hey-api/client-fetch` package and the `@hey-api/openapi-ts` package using bun. The `openapi-ts` package is installed as a development dependency using the `-D` flag.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbun add @hey-api/client-fetch && bun add @hey-api/openapi-ts -D\n```\n\n----------------------------------------\n\nTITLE: Input Filtering with Exclude Regex\nDESCRIPTION: Configuration to filter OpenAPI specification by excluding specific schemas and paths using regular expressions\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: {\n    exclude: '^(#/components/schemas/foo|#/paths/api/v1/foo/get)$',\n    path: 'https://get.heyapi.dev/hey-api/backend',\n  },\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Default Index File in TypeScript\nDESCRIPTION: Shows the contents of the default index.ts file, which re-exports generated artifacts for convenience.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './sdk.gen';\nexport * from './types.gen';\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Legacy Client in Hey API\nDESCRIPTION: Configuration example for generating a Fetch API legacy client using @hey-api/openapi-ts. Includes the basic export default configuration with input URL, output directory, and the fetch plugin specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['legacy/fetch'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from services.include Shorthand to Plugin Configuration in JavaScript\nDESCRIPTION: Example showing how to migrate from using the shorthand string value for services.include to the new plugin configuration with an include property for the @hey-api/services plugin.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  services: '^MySchema', // [!code --]\n  plugins: [\n    // ...other plugins\n    {\n      include: '^MySchema', // [!code ++]\n      name: '@hey-api/services',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fetch Client Instance\nDESCRIPTION: Example of creating a custom Fetch client instance with specific configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@hey-api/client-fetch';\n\nconst myClient = createClient({\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Client Instance\nDESCRIPTION: Examples of creating and using custom Axios client instances.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@hey-api/client-axios';\n\nconst myClient = createClient({\n  baseURL: 'https://example.com',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await getFoo({\n  client: myClient,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await getFoo({\n  baseURL: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Query - Infinite Query Example\nDESCRIPTION: Example demonstrating how to use infinite queries for pagination with TanStack Query.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/tanstack-query.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = useInfiniteQuery({\n  ...getFooInfiniteOptions({\n    path: {\n      fooId: 1,\n    },\n  }),\n  getNextPageParam: (lastPage, pages) => lastPage.nextCursor,\n  initialPageParam: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Legacy Client in Hey API\nDESCRIPTION: Configuration example for generating a Node.js legacy client using @hey-api/openapi-ts. Includes the basic export default configuration with input URL, output directory, and the node plugin specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['legacy/node'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from types.include Shorthand to Plugin Configuration in JavaScript\nDESCRIPTION: Example showing how to migrate from using the shorthand string value for types.include to the new plugin configuration with an include property for the @hey-api/types plugin.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  types: '^MySchema', // [!code --]\n  plugins: [\n    // ...other plugins\n    {\n      include: '^MySchema', // [!code ++]\n      name: '@hey-api/types',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Hey API Client Configuration at Runtime\nDESCRIPTION: Example of using the setConfig method to dynamically update the client configuration at runtime.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Request Interceptors with Nuxt Client\nDESCRIPTION: Example of using Nuxt/ofetch interceptors with the client instance to modify requests before they are sent.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nconst result = await client.get({\n  composable: '$fetch',\n  onRequest: (context) => {\n    // do something\n  },\n  url: '/foo',\n});\n```\n\n----------------------------------------\n\nTITLE: Using setConfig() for Client Configuration\nDESCRIPTION: Example of configuring the client instance using the setConfig() method to set the baseURL property.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  baseURL: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication via Request Interceptors\nDESCRIPTION: Example of adding authentication headers to requests using an interceptor when not using SDKs or generated auth.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.interceptors.request.use((options) => {\n  options.headers.set('Authorization', 'Bearer <my_token>'); // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Query - Mutation Example\nDESCRIPTION: Example showing how to use mutations for data modifications with TanStack Query.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/tanstack-query.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst addPet = useMutation({\n  ...addPetMutation(),\n  onError: (error) => {\n    console.log(error);\n  },\n});\n\naddPet.mutate({\n  body: {\n    name: 'Kitty',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Runtime Config for Hey API Client\nDESCRIPTION: Implementation of a custom runtime configuration file that exports a createClientConfig function to override default configuration values.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CreateClientConfig } from './client/client.gen';\n\nexport const createClientConfig: CreateClientConfig = (config) => ({\n  ...config,\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Client with SDK Functions\nDESCRIPTION: Example of passing a custom client instance to an SDK function to override the default client for a specific request.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst response = await getFoo({\n  client: myClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Client Options\nDESCRIPTION: This code snippet demonstrates moving the client configuration from the top-level `client` option to the `plugins` array. This change reflects the shift towards client plugins in openapi-ts, where clients generate their own `client.gen.ts` file.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch', // [!code --]\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'], // [!code ++]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Hey API with Fetch Client Plugin\nDESCRIPTION: Examples of adding the @hey-api/client-fetch plugin to the Hey API configuration file and CLI command.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -i https://get.heyapi.dev/hey-api/backend \\\n  -o src/client \\\n  -c @hey-api/client-fetch\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Client Instances\nDESCRIPTION: This snippet shows the updated approach to creating a default client from the service module. The legacy method of handling internal client instances is deprecated, and now the service module directly manages client configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client, createClient } from '@hey-api/client-fetch';\n\ncreateClient({\n  baseUrl: 'https://example.com',\n});\n\nconsole.log(client.getConfig().baseUrl); // <-- 'https://example.com'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/services.gen';\n\nclient.setConfig({\n  baseUrl: 'https://example.com',\n});\n\nconsole.log(client.getConfig().baseUrl); // <-- 'https://example.com'\n```\n\n----------------------------------------\n\nTITLE: Setting Axios Client Configuration\nDESCRIPTION: Example of using setConfig() method to configure the Axios client instance.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  baseURL: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Configuration\nDESCRIPTION: Replaces separate accessToken and apiKey functions with the unified auth function introduced in v0.61.0 for handling multiple authentication mechanisms.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/sdk.gen';\n\nclient.setConfig({\n  accessToken: () => '<my_token>', // [!code --]\n  apiKey: () => '<my_token>', // [!code --]\n  auth: (auth) => '<my_token>', // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring client with auth option in JavaScript\nDESCRIPTION: This snippet shows how to configure the client using the new `auth` option, which replaces the `accessToken` and `apiKey` functions. The `auth` function takes an authentication parameter and returns the appropriate token, allowing for multiple authentication mechanisms.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/client-fetch/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/sdk.gen';\n\nclient.setConfig({\n  accessToken: () => '<my_token>', // [!code --]\n  apiKey: () => '<my_token>', // [!code --]\n  auth: (auth) => '<my_token>', // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Configuration for Hey API Next.js Client\nDESCRIPTION: Example of configuration to use a custom runtime configuration file with the Next.js client plugin.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      name: '@hey-api/client-next',\n      runtimeConfigPath: './src/hey-api.ts', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Request Interceptor to Fetch Client\nDESCRIPTION: Example of adding a request interceptor to modify requests before they are sent.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\n// Supports async functions\nclient.interceptors.request.use(async (request) => {\n  // do something\n  return request;\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration Options to SDK Functions\nDESCRIPTION: Example of directly passing configuration options to an SDK function without creating a separate client instance.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst response = await getFoo({\n  baseUrl: 'https://example.com', // <-- override default configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Legacy Client in Hey API\nDESCRIPTION: Configuration example for generating an Angular legacy client using @hey-api/openapi-ts. Includes the basic export default configuration with input URL, output directory, and the angular plugin specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['legacy/angular'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Flat SDK Output in TypeScript\nDESCRIPTION: Generated code for a flat SDK approach, showing a function-based API that supports tree-shaking. The example demonstrates an addPet function implementation.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Options } from '@hey-api/client-fetch';\n\nimport { client as _heyApiClient } from './client.gen';\nimport type { AddPetData, AddPetError, AddPetResponse } from './types.gen';\n\nexport const addPet = (options: Options<AddPetData>) =>\n  (options?.client ?? _heyApiClient).post<AddPetResponse, AddPetError>({\n    url: '/pet',\n    ...options,\n  });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Config Interface Usage in TypeScript\nDESCRIPTION: This snippet illustrates how to use the 'Config' interface with an optional generic extending 'ClientOptions'. It showcases how configurations can be set using the 'Config' type with different values, enabling more flexible client configurations.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/client-next/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = Config<false>; // [!code --]\ntype Foo = Config<{ throwOnError: false }>; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Example of Class-Based SDK Output in TypeScript\nDESCRIPTION: Generated code for a class-based SDK approach, showing the same functionality as the flat approach but implemented as static methods on a class. The example demonstrates the PetService class with an addPet method.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Options } from '@hey-api/client-fetch';\n\nimport { client as _heyApiClient } from './client.gen';\nimport type { AddPetData, AddPetError, AddPetResponse } from './types.gen';\n\nexport class PetService {\n  public static addPet(options: Options<AddPetData>) {\n    return (options?.client ?? _heyApiClient).post<AddPetResponse, AddPetError>(\n      {\n        url: '/pet',\n        ...options,\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Type Hinting\nDESCRIPTION: Using the buildUrl() method with TypeScript type hints to construct URLs with path parameters and query strings.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype FooData = {\n  path: {\n    fooId: number;\n  };\n  query?: {\n    bar?: string;\n  };\n  url: '/foo/{fooId}';\n};\n\nconst url = client.buildUrl<FooData>({\n  path: {\n    fooId: 1,\n  },\n  query: {\n    bar: 'baz',\n  },\n  url: '/foo/{fooId}',\n});\nconsole.log(url); // prints '/foo/1?bar=baz'\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only/Write-Only Field Behavior in TypeScript Plugin\nDESCRIPTION: Sets the readOnlyWriteOnlyBehavior option to 'off' to generate a single type regardless of read-only or write-only fields, preserving behavior from versions prior to v0.66.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      name: '@hey-api/typescript',\n      readOnlyWriteOnlyBehavior: 'off', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Style in JavaScript\nDESCRIPTION: Updated configuration showing the renamed types.name option to style within the types plugin configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      name: '@hey-api/types',\n      style: 'PascalCase',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example Generated Pet Schema in TypeScript\nDESCRIPTION: An example of a generated schema in the 'form' style. This shows the structure of a Pet schema with required fields, properties, and metadata that follows the OpenAPI specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/json-schema.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PetSchema = {\n  required: ['name'],\n  properties: {\n    id: {\n      type: 'integer',\n      format: 'int64',\n      example: 10,\n    },\n    name: {\n      type: 'string',\n      example: 'doggie',\n    },\n  },\n  type: 'object',\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Legacy Client in Hey API\nDESCRIPTION: Configuration example for generating an Axios legacy client using @hey-api/openapi-ts. Includes the basic export default configuration with input URL, output directory, and the axios plugin specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['legacy/axios'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Bundling\nDESCRIPTION: Configuration example for enabling client bundling functionality.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      bundle: true,\n      name: '@hey-api/client-axios',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Making API Requests Without SDK in TypeScript\nDESCRIPTION: Example of how to make API requests directly using the client when no SDK is generated. This approach requires manually specifying the endpoint URL.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/sdk.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from '@hey-api/client-fetch';\n\nclient.post({\n  body: {\n    name: 'Kitty',\n  },\n  url: '/pet',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI TypeScript Client with CommonJS\nDESCRIPTION: Configuration file for generating a TypeScript client using @hey-api/openapi-ts with a remote OpenAPI specification in CommonJS module format\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@hey-api/openapi-ts').UserConfig} */\nmodule.exports = {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with Identifier Case Option\nDESCRIPTION: Example configuration showing how to set typescript.identifierCase option to preserve original naming in the experimental parser\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: true,\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      identifierCase: 'preserve',\n      name: '@hey-api/typescript',\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Keys in TanStack Query\nDESCRIPTION: Examples showing different ways to access query keys for caching and invalidation.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/tanstack-query.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { queryKey } = getPetByIdOptions({\n  path: {\n    petId: 1,\n  },\n});\n\nconst queryKey = getPetByIdQueryKey({\n  path: {\n    petId: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Transformers with SDK Integration\nDESCRIPTION: Configuration for automatically transforming response data in SDKs by setting sdk.transformer to true. This integrates transformers with the SDK generation.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/transformers.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    '@hey-api/transformers',\n    {\n      name: '@hey-api/sdk', // [!code ++]\n      transformer: true, // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenAPI Specifications with Hey API's Get API\nDESCRIPTION: Example of the URL format used to fetch OpenAPI specifications from Hey API. This shows the basic structure of the request URL for accessing specifications.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhttps://get.heyapi.dev/<organization>/<project>\n```\n\n----------------------------------------\n\nTITLE: Moving SDK ThrowOnError Option\nDESCRIPTION: This code snippet shows how the `sdk.throwOnError` option has been moved to the client plugins where applicable. This allows for more granular control over error handling for different clients.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    {\n      name: '@hey-api/client-fetch',\n      throwOnError: true, // [!code ++]\n    },\n    {\n      name: '@hey-api/sdk',\n      throwOnError: true, // [!code --]\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing Services with Different Argument Styles in TypeScript\nDESCRIPTION: Shows how to handle the transition from array arguments to options object arguments by using parallel imports from different client versions. This allows for gradual migration of code.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultService } from 'client/services'; // <-- old client with array arguments\n\nimport { DefaultService } from 'client_v2/services'; // <-- new client with options argument\n```\n\n----------------------------------------\n\nTITLE: Adding Request Interceptors to Hey API Client\nDESCRIPTION: Examples of adding and removing request interceptors to modify requests before they are sent.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\n// Supports async functions\nclient.interceptors.request.use(async (options) => {\n  // do something\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.interceptors.request.eject((options) => {\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier Formatting\nDESCRIPTION: Configuration to use Prettier for formatting the generated client output\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: {\n    format: 'prettier',\n    path: 'src/client',\n  },\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Hey API Nuxt Client with Package Managers\nDESCRIPTION: Commands for installing the @hey-api/client-nuxt package using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hey-api/client-nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @hey-api/client-nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @hey-api/client-nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @hey-api/client-nuxt\n```\n\n----------------------------------------\n\nTITLE: Enabling Transformer Integration with SDK\nDESCRIPTION: Sets the transformer option to true in the SDK plugin configuration to preserve the previous behavior after v0.60.0 changes to transformer handling.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    {\n      dates: true,\n      name: '@hey-api/transformers',\n    },\n    {\n      name: '@hey-api/sdk',\n      transformer: true, // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Hey API OpenAPI Codegen\nDESCRIPTION: Demonstrates how to add the Hey API Vite plugin to a Vite configuration file with optional configuration settings\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/vite-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { heyApiPlugin } from '@hey-api/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    heyApiPlugin({\n      config: {\n        // optional configuration instead of using the configuration file\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Base URL Option\nDESCRIPTION: Sets the baseUrl option to false to preserve previous behavior from before v0.64.0, which allows manual base URL configuration instead of automatic resolution.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      baseUrl: false, // [!code ++]\n      name: '@hey-api/client-fetch',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Config Interface\nDESCRIPTION: This code snippet shows the updated `Config` interface, which now accepts an optional generic extending `ClientOptions` instead of a boolean type `ThrowOnError`. This change provides more flexibility and type safety when configuring the client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = Config<false>; // [!code --]\ntype Foo = Config<{ throwOnError: false }>; // [!code ++]\n\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Plugin in Hey API Configuration\nDESCRIPTION: This snippet shows how to add the Fastify plugin to the Hey API configuration. It extends the default plugins array to include the Fastify plugin.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/fastify.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    'fastify', // [!code ++]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Import Path\nDESCRIPTION: Updates import statement to reference sdk.gen.ts instead of services.gen.ts after the plugin rename in v0.57.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/services.gen'; // [!code --]\nimport { client } from 'client/sdk.gen'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Hey API Client\nDESCRIPTION: Example of using the buildUrl method with TypeScript type hints to construct URLs with path parameters and query strings.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ntype FooData = {\n  path: {\n    fooId: number;\n  };\n  query?: {\n    bar?: string;\n  };\n  url: '/foo/{fooId}';\n};\n\nconst url = client.buildUrl<FooData>({\n  path: {\n    fooId: 1,\n  },\n  query: {\n    bar: 'baz',\n  },\n  url: '/foo/{fooId}',\n});\nconsole.log(url); // prints '/foo/1?bar=baz'\n```\n\n----------------------------------------\n\nTITLE: Adding Response Interceptors to Hey API Client\nDESCRIPTION: Examples of adding and removing response interceptors to modify responses before they are returned to the application.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.interceptors.response.use((response) => {\n  // do something\n  return response;\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.interceptors.response.eject((response) => {\n  // do something\n  return response;\n});\n```\n\n----------------------------------------\n\nTITLE: ES Module Configuration File\nDESCRIPTION: Configuration example using ES modules format (openapi-ts.config.mjs).\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@hey-api/openapi-ts').UserConfig} */\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Type Names in Experimental Parser\nDESCRIPTION: Sets the identifierCase option to 'preserve' to maintain original type names as in versions prior to v0.58.0, instead of using PascalCase.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: true,\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      identifierCase: 'preserve', // [!code ++]\n      name: '@hey-api/typescript',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAPI Specifications by Custom Tags\nDESCRIPTION: Example URL showing how to fetch an OpenAPI specification using custom tags as a filter. When multiple tags are provided, only the first match will be returned.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nhttps://get.heyapi.dev/foo/bar?tags=optional,custom,tags\n```\n\n----------------------------------------\n\nTITLE: Configuring Biome Formatting\nDESCRIPTION: Configuration to use Biome for formatting the generated client output\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: {\n    format: 'biome',\n    path: 'src/client',\n  },\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Interceptor in Hey API Legacy Clients\nDESCRIPTION: Example of how to use a response interceptor in legacy Hey API clients. This demonstrates how to modify responses before they're returned to your application, including handling async operations.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nOpenAPI.interceptors.response.use(async (response) => {\n  await doSomethingWithResponse(response); // async\n  return response; // <-- must return response\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Client Configuration in SDK Function Calls\nDESCRIPTION: Example of passing client configuration options directly to an SDK function call to override default settings.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await getFoo({\n  baseURL: 'https://example.com', // <-- override default configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode in Configuration\nDESCRIPTION: Configuration to enable watch mode for automatically regenerating client when the input specification changes\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n  watch: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Enforcing Client Specification\nDESCRIPTION: This snippet signals the requirement to specify the `client` option explicitly in the configuration. It highlights the breaking change that no longer allows for an implicit 'fetch' client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: 'fetch', // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Formatting\nDESCRIPTION: Configuration to disable automatic formatting of the generated client output\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: {\n    format: false,\n    path: 'src/client',\n  },\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading OpenAPI Specification with GitHub Action\nDESCRIPTION: A GitHub workflow example that uploads an OpenAPI specification to Hey API on every pull request and push to the main branch. This workflow uses the hey-api/upload-openapi-spec action to automate the upload process.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Upload OpenAPI Specification\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  upload-openapi-spec:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Upload OpenAPI spec\n        uses: hey-api/upload-openapi-spec@v1.3.0\n        with:\n          path-to-file: path/to/openapi.json\n          tags: optional,custom,tags\n        env:\n          API_KEY: ${{ secrets.HEY_API_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring @hey-api/schemas Plugin with Form Type\nDESCRIPTION: Example configuration for the @hey-api/openapi-ts package using form type for schema generation. This demonstrates setting up the schemas plugin with form output format.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/json-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      name: '@hey-api/schemas',\n      type: 'form', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring readOnlyWriteOnlyBehavior in Typescript\nDESCRIPTION: This code snippet shows how to configure the `readOnlyWriteOnlyBehavior` option within the `@hey-api/typescript` plugin.  Setting this option to `off` will preserve the previous behavior of generating a single type regardless of read-only or write-only fields.  This configuration affects how the plugin generates types for payloads and responses.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  export default {\n    input: 'https://get.heyapi.dev/hey-api/backend',\n    output: 'src/client',\n    plugins: [\n      // ...other plugins\n      {\n        name: '@hey-api/typescript',\n        readOnlyWriteOnlyBehavior: 'off', // [!code ++]\n      },\n    ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI TypeScript and Client Fetch via yarn\nDESCRIPTION: This command installs both the `@hey-api/client-fetch` package and the `@hey-api/openapi-ts` package using yarn. The `openapi-ts` package is installed as a development dependency using the `-D` flag.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @hey-api/client-fetch && yarn add @hey-api/openapi-ts -D\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Mode in JavaScript\nDESCRIPTION: Example configuration for enabling watch mode to automatically regenerate output when the schema changes. Watch mode currently only supports remote files via URL.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  watch: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Building URL with experimental parser in TypeScript\nDESCRIPTION: This snippet demonstrates the usage of the `buildUrl()` method with the experimental parser to construct a URL from path and query parameters.  It showcases how to provide a type hint to ensure type safety when building the URL.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/client-fetch/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype FooData = {\n  path: {\n    fooId: number;\n  };\n  query?: {\n    bar?: string;\n  };\n  url: '/foo/{fooId}';\n};\n\nconst url = client.buildUrl<FooData>({\n  path: {\n    fooId: 1,\n  },\n  query: {\n    bar: 'baz',\n  },\n  url: '/foo/{fooId}',\n});\nconsole.log(url); // prints '/foo/1?bar=baz'\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Transformations in JavaScript\nDESCRIPTION: Updated configuration showing how to enable date transformations using the new @hey-api/transformers plugin.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      dates: true,\n      name: '@hey-api/transformers',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example in Markdown\nDESCRIPTION: Shows the typical file structure of a project using @hey-api/openapi-ts with default configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmy-app/\n├── node_modules/\n├── src/\n│ ├── client/\n│ │ ├── client.gen.ts\n│ │ ├── index.ts\n│ │ ├── sdk.gen.ts\n│ │ └── types.gen.ts\n│ └── index.ts\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Configuration\nDESCRIPTION: Configuration setup for the plugin including default values, dependencies, and handler definitions.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/custom.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin } from '@hey-api/openapi-ts';\n\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: () => {},\n  myOption: false, // implements default value from types\n  name: 'my-plugin',\n  output: 'my-plugin',\n};\n\n/**\n * Type helper for `my-plugin` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fetch Client Configuration\nDESCRIPTION: Example of using setConfig() method to configure the Fetch client instance with a base URL.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/client.gen';\n\nclient.setConfig({\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Config Type Definition in TypeScript\nDESCRIPTION: This snippet demonstrates how the `Config` interface now accepts an optional generic extending `ClientOptions` instead of a boolean type `ThrowOnError`. This change provides more flexibility and type safety when configuring the client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/client-fetch/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = Config<false>; // [!code --]\ntype Foo = Config<{ throwOnError: false }>; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Generation as TypeScript Enums\nDESCRIPTION: This configuration snippet demonstrates setting the enums option to 'typescript' to generate runtime enums as TypeScript enums, although this approach is not recommended due to potential typing challenges.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      enums: 'typescript',\n      name: '@hey-api/typescript',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Ejecting Response Interceptor in Hey API Legacy Clients\nDESCRIPTION: Example of how to eject a response interceptor in legacy Hey API clients. This demonstrates how to remove a previously added interceptor using the OpenAPI.interceptors.response.eject() method.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nOpenAPI.interceptors.response.eject(async (response) => {\n  await doSomethingWithResponse(response); // async\n  return response; // <-- must return response\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Plugin Output\nDESCRIPTION: The final generated TypeScript file output from the plugin implementation.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/custom.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const foo = 'Hello, world!';\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenAPI Specification by Commit SHA\nDESCRIPTION: Example URL showing how to fetch an exact OpenAPI specification version by providing the commit SHA as a query parameter. This ensures consistent results for reproducible builds.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nhttps://get.heyapi.dev/foo/bar?commit_sha=0eb34c2024841ce95620f3ec02a2fea164ea4e9d\n```\n\n----------------------------------------\n\nTITLE: Adding Schemas Plugin After Default Plugins Update\nDESCRIPTION: Explicitly adds the @hey-api/schemas plugin which was removed from default plugins in v0.59.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: true,\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/schemas', // [!code ++]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Entry Point in TypeScript\nDESCRIPTION: Barrel file that exports the plugin configuration and types.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport { defaultConfig, defineConfig } from './config';\nexport type { Config } from './types';\n```\n\n----------------------------------------\n\nTITLE: Installing Hey API Next.js Client with Package Managers\nDESCRIPTION: Commands for installing the @hey-api/client-next package using different package managers (npm, pnpm, yarn, and bun).\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @hey-api/client-next\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @hey-api/client-next\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @hey-api/client-next\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @hey-api/client-next\n```\n\n----------------------------------------\n\nTITLE: Disabling @hey-api/schemas Plugin\nDESCRIPTION: Example configuration showing how to disable the schemas plugin in @hey-api/openapi-ts. This prevents the generation of the schemas.gen.ts file.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/json-schema.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    '@hey-api/schemas', // [!code --]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime API for Fetch Client Configuration\nDESCRIPTION: Example of creating a custom configuration file implementing the Runtime API for the Fetch client.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CreateClientConfig } from './client/client.gen';\n\nexport const createClientConfig: CreateClientConfig = (config) => ({\n  ...config,\n  baseUrl: 'https://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundling for Fetch Client\nDESCRIPTION: Configuration example for enabling bundling of the Fetch client for repackaging and publishing.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      bundle: true,\n      name: '@hey-api/client-fetch',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from Schema Export Configuration to Plugin System in JavaScript\nDESCRIPTION: Example showing how to migrate from using the schemas.export configuration to the new plugin system by explicitly defining which plugins to include, effectively excluding unwanted plugins.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  schemas: {\n    export: false, // [!code --]\n  },\n  plugins: ['@hey-api/types', '@hey-api/services'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: Command to install project dependencies using the pnpm package manager.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-vue-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Disabling Index File Generation in JavaScript\nDESCRIPTION: Demonstrates how to disable the generation of the index file by setting the output.indexFile option to false in the configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: {\n    indexFile: false,\n    path: 'src/client',\n  },\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Plugin TypeScript Interface\nDESCRIPTION: TypeScript interface definition for plugin configuration options, including required name and output fields along with custom options.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/custom.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Config {\n  /**\n   * Plugin name. Must be unique.\n   */\n  name: 'my-plugin';\n  /**\n   * Name of the generated file.\n   *\n   * @default 'my-plugin'\n   */\n  output?: string;\n  /**\n   * User-configurable option for your plugin.\n   *\n   * @default false\n   */\n  myOption?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Name Builder in JavaScript\nDESCRIPTION: Updated configuration showing the renamed schemas.name option to nameBuilder within the schemas plugin configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      nameBuilder: (name) => `${name}Schema`,\n      name: '@hey-api/schemas',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Type-Checking\nDESCRIPTION: Command to perform type-checking, compilation, and minification for production build using pnpm.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-vue-query/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundling for Hey API Client\nDESCRIPTION: Configuration example for enabling the bundling option when you don't want to declare client packages as dependencies.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/next-js.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      bundle: true, // [!code ++]\n      name: '@hey-api/client-next',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Client Generation with Plugins - JavaScript\nDESCRIPTION: This snippet describes how to configure the OpenAPI generator with additional plugins for experimental features and schemas. Required dependency: '@hey-api/openapi-ts'.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n    client: '@hey-api/client-fetch',\n    experimentalParser: true,\n    input: 'path/to/openapi.json',\n    output: 'src/client',\n    plugins: [\n      ...defaultPlugins,\n      '@hey-api/schemas', // [!code ++]\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Handler\nDESCRIPTION: Main handler implementation that generates the plugin output using TypeScript Compiler API and context subscriptions.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/plugins/custom.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin } from '@hey-api/openapi-ts';\n\nimport type { Config } from './types';\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    id: plugin.name,\n    path: plugin.output,\n  });\n\n  context.subscribe('before', () => {\n    // do something before parsing the input\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    // do something with the operation model\n  });\n\n  context.subscribe('schema', ({ operation }) => {\n    // do something with the schema model\n  });\n\n  context.subscribe('after', () => {\n    // do something after parsing the input\n  });\n\n  const stringLiteral = ts.factory.createStringLiteral('Hello, world!');\n  const variableDeclaration = ts.factory.createVariableDeclaration(\n    'foo',\n    undefined,\n    undefined,\n    stringLiteral,\n  );\n  const node = ts.factory.createVariableStatement(\n    [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],\n    ts.factory.createVariableDeclarationList(\n      [variableDeclaration],\n      ts.NodeFlags.Const,\n    ),\n  );\n\n  file.add(node);\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Cleaning\nDESCRIPTION: Configuration to prevent automatic cleaning of the output directory, allowing custom files to be retained\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: {\n    clean: false,\n    path: 'src/client',\n  },\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Starting a Svelte Development Server\nDESCRIPTION: Commands to start a local development server after installing dependencies. The second command additionally opens the app in a new browser tab.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-svelte-query/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Bundling\nDESCRIPTION: Configuration example showing how to enable bundling for the Nuxt client when generating output that will be repackaged and published.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      bundle: true, // [!code ++]\n      name: '@hey-api/client-nuxt',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Client Import Path\nDESCRIPTION: Updates import statement to reflect the new location of the client instance, which moved from sdk.gen.ts to client.gen.ts in v0.63.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { client } from 'client/sdk.gen'; // [!code --]\nimport { client } from 'client/client.gen'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Node.js Programmatic Client Generation\nDESCRIPTION: TypeScript code showing how to programmatically generate clients using the createClient function.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@hey-api/openapi-ts';\n\ncreateClient({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Name Builder in JavaScript\nDESCRIPTION: Updated configuration showing the renamed services.name option to serviceNameBuilder within the services plugin configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      serviceNameBuilder: '{{name}}Service',\n      name: '@hey-api/services',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server on localhost:4200 with automatic reload on file changes.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-angular-query-experimental/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Installing Axios Client Package\nDESCRIPTION: Shows different package manager commands to install the @hey-api/client-axios package.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/axios.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @hey-api/client-axios\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @hey-api/client-axios\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @hey-api/client-axios\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @hey-api/client-axios\n```\n\n----------------------------------------\n\nTITLE: Moving throwOnError Option to Client Plugin\nDESCRIPTION: Moves the throwOnError configuration from the SDK plugin to the client plugin where applicable in v0.63.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      name: '@hey-api/client-fetch',\n      throwOnError: true, // [!code ++]\n    },\n    {\n      name: '@hey-api/sdk',\n      throwOnError: true, // [!code --]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Output Clean Configuration\nDESCRIPTION: Configuration example demonstrating how to set output.clean option to preserve files in output directory\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: {\n    clean: false,\n    path: 'src/client',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAPI Specification for Generation\nDESCRIPTION: This snippet introduces the `input.include` option used to filter the processing of an OpenAPI specification by matching against references using a regular expression. This enables processing only relevant parts of a large specification, utilizing the experimental parser feature.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: true,\n  input: {\n    include: '^(#/components/schemas/foo|#/paths/api/v1/foo/get)$', // [!code ++]\n    path: 'https://get.heyapi.dev/hey-api/backend',\n  },\n  output: 'src/client',\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to access help information for the Angular CLI.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-angular-query-experimental/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Renaming services.name to serviceNameBuilder in JavaScript Plugin Configuration\nDESCRIPTION: Example demonstrating the migration from using the services.name option to the new serviceNameBuilder option in the plugin configuration to avoid conflicts with the plugin's name field.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  services: {\n    name: '{{name}}Service', // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      serviceNameBuilder: '{{name}}Service', // [!code ++]\n      name: '@hey-api/services',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with Base Configuration in TypeScript\nDESCRIPTION: Example of how to use the base configuration in a vitest.config.ts file. It imports the createVitestConfig function from @config/vite-base and allows for additional specific configurations.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/config-vite-base/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vitest.config.ts\nimport { createVitestConfig } from '@config/vite-base';\n\nexport default createVitestConfig({\n  // Your specific configuration\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Export Inline Enums Configuration\nDESCRIPTION: Configuration showing how to enable exporting of inline enums as reusable components with the experimental parser\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: true,\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      exportInlineEnums: true,\n      name: '@hey-api/typescript',\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Entry Markdown\nDESCRIPTION: Example of version history entry format showing version number, change type, and dependency updates with commit links.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-fetch/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.51\n\n### Patch Changes\n\n- Updated dependencies [[`fed9699`](https://github.com/hey-api/openapi-ts/commit/fed969985275621c7c2b65ffc760c7c66fafaf72)]:\n  - @hey-api/client-fetch@0.10.0\n```\n\n----------------------------------------\n\nTITLE: Configuring XHR Legacy Client in Hey API\nDESCRIPTION: Configuration example for generating an XMLHttpRequest legacy client using @hey-api/openapi-ts. Includes the basic export default configuration with input URL, output directory, and the xhr plugin specification.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['legacy/xhr'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration Example for Experimental Parser - JavaScript\nDESCRIPTION: Example showing how to enable the experimental parser in the configuration file for OpenAPI 3.0.x support.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  experimentalParser: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @config/vite-base Package with pnpm\nDESCRIPTION: Command to install the @config/vite-base package as a dev dependency using pnpm.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/config-vite-base/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @config/vite-base\n```\n\n----------------------------------------\n\nTITLE: Migrating Date Transformation from types.dates to @hey-api/transformers Plugin\nDESCRIPTION: Example showing how to migrate from the confusing types.dates option to the new simplified @hey-api/transformers plugin with a boolean dates property.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  types: {\n    dates: 'types+transform', // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      dates: true, // [!code ++]\n      name: '@hey-api/transformers',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Update in Markdown\nDESCRIPTION: Shows the format used to document a version update, including the version number, change type, and associated GitHub commit link.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-vue-query/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.33\n\n### Patch Changes\n\n- Updated dependencies [[`fed9699`](https://github.com/hey-api/openapi-ts/commit/fed969985275621c7c2b65ffc760c7c66fafaf72)]:\n  - @hey-api/client-fetch@0.10.0\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Experimental Parser\nDESCRIPTION: Example CLI command showing how to enable the experimental parser when generating code.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @hey-api/openapi-ts -i path/to/openapi.json -o src/client -c @hey-api/client-fetch -e\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAPI Specifications by Branch\nDESCRIPTION: Example URL demonstrating how to fetch the latest OpenAPI specification from a specific branch using the branch query parameter.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhttps://get.heyapi.dev/foo/bar?branch=production\n```\n\n----------------------------------------\n\nTITLE: Styling OpenAPI Icon for Dark Mode\nDESCRIPTION: CSS code for styling the OpenAPI icon in dark mode. It sets the fill color of the icon based on a custom CSS variable.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.icon-openapi path {\n  fill: var(--github-mark-fill-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Interceptor in Hey API Legacy Clients\nDESCRIPTION: Example of how to use a request interceptor in legacy Hey API clients. This demonstrates how to modify requests before they're sent using the OpenAPI.interceptors.request.use() method.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nOpenAPI.interceptors.request.use((request) => {\n  doSomethingWithRequest(request);\n  return request; // <-- must return request\n});\n```\n\n----------------------------------------\n\nTITLE: Updating methodNameBuilder Signature in JavaScript\nDESCRIPTION: Changes to the methodNameBuilder function signature in v0.48.0, now accepting a single operation argument instead of multiple properties.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@hey-api/openapi-ts';\n\ncreateClient({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  services: {\n    methodNameBuilder: (service, name) => name, // [!code --]\n    methodNameBuilder: (operation) => operation.name, // [!code ++]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding @config/vite-base as a Workspace Dependency\nDESCRIPTION: Commands to navigate to a package directory and add @config/vite-base as a workspace dependency using pnpm.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/config-vite-base/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd <your-package>\npnpm add -D @config/vite-base@workspace:*\n```\n\n----------------------------------------\n\nTITLE: Updating Client Import Path\nDESCRIPTION: This code snippet illustrates how to update the import path for the `client` instance. The internal client, previously located in `sdk.gen.ts`, is now defined in `client.gen.ts`.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'client/sdk.gen'; // [!code --]\nimport { client } from 'client/client.gen'; // [!code ++]\n\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Icon for GitHub Integration\nDESCRIPTION: SVG code for rendering the GitHub icon used in the Integrations section. The SVG represents the official GitHub logo.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: svg\nCODE:\n```\n<svg class=\"icon-github\" width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 98 98\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z\" fill=\"#24292f\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Additional Files in JavaScript\nDESCRIPTION: Shows how to re-export additional files, such as Zod plugin exports, by setting the exportFromIndex option to true on a plugin.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    {\n      exportFromIndex: true,\n      name: 'zod',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Ejecting Request Interceptor in Hey API Legacy Clients\nDESCRIPTION: Example of how to eject a request interceptor in legacy Hey API clients. This demonstrates how to remove a previously added interceptor using the OpenAPI.interceptors.request.eject() method.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/legacy.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nOpenAPI.interceptors.request.eject((request) => {\n  doSomethingWithRequest(request);\n  return request; // <-- must return request\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Team Members Data Using Vue.js Script\nDESCRIPTION: A Vue.js script that defines team member data for the 'Hall of Fame' section. It creates an array of contributor objects with their avatar, name, links, and title to be displayed on the page using VitePress's VPTeamMembers component.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/about.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VPTeamMembers } from 'vitepress/theme'\n\nconst hallOfFame = [\n  {\n    avatar: 'https://github.com/ferdikoomen.png',\n    name: 'Ferdi Koomen',\n    links: [\n      { icon: 'github', link: 'https://github.com/ferdikoomen' },\n    ],\n    title: 'OpenAPI TypeScript Codegen',\n  },\n  {\n    avatar: 'https://github.com/nicolas-chaulet.png',\n    name: 'Nicolas Chaulet',\n    links: [\n      { icon: 'github', link: 'https://github.com/nicolas-chaulet' },\n    ],\n    title: 'Made the Hey API fork',\n  },\n  {\n    avatar: 'https://github.com/jordanshatford.png',\n    name: 'Jordan Shatford',\n    links: [\n      { icon: 'github', link: 'https://github.com/jordanshatford' },\n    ],\n    title: 'Maintainer and Contributor',\n  },\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: JSON configuration for adding openapi-ts command to package.json scripts.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"openapi-ts\": \"openapi-ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenAPI Specification by Version\nDESCRIPTION: Example URL showing how to fetch the latest OpenAPI specification matching a specific version number using the version query parameter.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nhttps://get.heyapi.dev/foo/bar?version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests using your chosen testing platform. Requires adding a package that implements e2e testing capabilities.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-angular-query-experimental/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Implementing a FormKit Newsletter Subscription Form in HTML\nDESCRIPTION: A form element configured to send submissions to app.kit.com. It contains fields for email address collection and a submit button. The form includes various data attributes for configuration and styling.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<form\n  action=\"https://app.kit.com/forms/7347653/subscriptions\"\n  class=\"seva-form formkit-form\"\n  method=\"post\"\n  data-sv-form=\"7347653\"\n  data-uid=\"d4e5f1d9b4\"\n  data-format=\"inline\"\n  data-version=\"5\"\n  data-options='{\"settings\":{\"after_subscribe\":{\"action\":\"message\",\"success_message\":\"Success! Now check your email to confirm your subscription.\",\"redirect_url\":\"\"},\"analytics\":{\"google\":null,\"fathom\":null,\"facebook\":null,\"segment\":null,\"pinterest\":null,\"sparkloop\":null,\"googletagmanager\":null},\"modal\":{\"trigger\":\"timer\",\"scroll_percentage\":null,\"timer\":5,\"devices\":\"all\",\"show_once_every\":15},\"powered_by\":{\"show\":false,\"url\":\"https://kit.com/features/forms?utm_campaign=poweredby&amp;utm_content=form&amp;utm_medium=referral&amp;utm_source=dynamic\"},\"recaptcha\":{\"enabled\":false},\"return_visitor\":{\"action\":\"show\",\"custom_content\":\"\"},\"slide_in\":{\"display_in\":\"bottom_right\",\"trigger\":\"timer\",\"scroll_percentage\":null,\"timer\":5,\"devices\":\"all\",\"show_once_every\":15},\"sticky_bar\":{\"display_in\":\"top\",\"trigger\":\"timer\",\"scroll_percentage\":null,\"timer\":5,\"devices\":\"all\",\"show_once_every\":15}},\"version\":\"5\"}'\n  min-width=\"400 500 600 700 800\"\n>\n  <div data-style=\"clean\">\n    <ul\n      class=\"formkit-alert formkit-alert-error\"\n      data-element=\"errors\"\n      data-group=\"alert\"\n    ></ul>\n    <div\n      data-element=\"fields\"\n      data-stacked=\"false\"\n      class=\"seva-fields formkit-fields\"\n    >\n      <div class=\"formkit-field\">\n        <input\n          class=\"DocSearch DocSearch-Button formkit-input\"\n          name=\"email_address\"\n          aria-label=\"Email Address\"\n          placeholder=\"Email Address\"\n          required=\"\"\n          type=\"email\"\n        />\n      </div>\n      <button\n        data-element=\"submit\"\n        class=\"formkit-submit\"\n      >\n        <div class=\"formkit-spinner\">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <span class=\"\">Subscribe</span>\n      </button>\n    </div>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Renaming types.name to style in JavaScript Plugin Configuration\nDESCRIPTION: Example demonstrating the migration from using the types.name option to the new style option in the plugin configuration to avoid conflicts with the plugin's name field.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  types: {\n    name: 'PascalCase', // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      name: '@hey-api/types',\n      style: 'PascalCase', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte Project for Production\nDESCRIPTION: Command to create a production-ready build of the Svelte application. This optimizes the app for deployment.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-svelte-query/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: FormKit ConvertKit Branding Container\nDESCRIPTION: CSS styles for the ConvertKit powered-by section including container positioning, hover states and background image.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-powered-by-convertkit {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: #ffffff;\n  border-radius: 9px;\n  color: #3d3d3d;\n  cursor: pointer;\n  display: block;\n  height: 36px;\n  margin: 0 auto;\n  opacity: 0.95;\n  padding: 0;\n  -webkit-text-decoration: none;\n  text-decoration: none;\n  text-indent: 100%;\n  -webkit-transition: ease-in-out all 200ms;\n  transition: ease-in-out all 200ms;\n  white-space: nowrap;\n  overflow: hidden;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  width: 157px;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration File\nDESCRIPTION: Configuration example using TypeScript format (openapi-ts.config.ts).\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@hey-api/openapi-ts';\n\nexport default defineConfig({\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode via CLI\nDESCRIPTION: Command line example for enabling watch mode using the -w flag when running the openapi-ts CLI tool.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hey-api/openapi-ts \\\n  -c @hey-api/client-fetch \\\n  -i path/to/openapi.json \\\n  -o src/client \\\n  -w\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt Production Build Locally\nDESCRIPTION: Commands for previewing the production build locally before deployment using different package managers. This allows testing the production-optimized build on a local server.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-nuxt/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This robots.txt configuration allows all web crawlers (user agents) to access the entire website without any restrictions. It uses the standard robots.txt syntax to specify crawler behavior.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-svelte-query/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt Project with Package Managers\nDESCRIPTION: Commands for installing project dependencies using different package managers (npm, pnpm, yarn, bun). These commands need to be run in the project root directory to install all required dependencies specified in the package.json file.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-nuxt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Styling GitHub Icon for Dark Mode\nDESCRIPTION: CSS code for styling the GitHub icon in dark mode. It sets the fill color of the icon based on a custom CSS variable.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon-github path {\n  fill: var(--github-mark-fill-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Schema for Hey API in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI schema for the Hey API. It includes information about the API version, available paths, request bodies, and responses. The schema covers endpoints for authentication, user management, and various Hey-specific operations.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-nuxt/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\ninfo:\n  title: Hey API\n  version: 1.0.0\n\npaths:\n  /auth/login:\n    post:\n      summary: Authenticate user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginRequest'\n      responses:\n        '200':\n          description: Successful login\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginResponse'\n\n  /users:\n    get:\n      summary: Get all users\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n\n  /users/{userId}:\n    get:\n      summary: Get user by ID\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\ncomponents:\n  schemas:\n    LoginRequest:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n      required:\n        - username\n        - password\n\n    LoginResponse:\n      type: object\n      properties:\n        token:\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        username:\n          type: string\n        email:\n          type: string\n      required:\n        - id\n        - username\n        - email\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-next/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Client with runtimeConfigPath Option\nDESCRIPTION: Example showing how to specify a custom runtime configuration file path for the Nuxt client in the Hey API configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/nuxt.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    {\n      name: '@hey-api/client-nuxt',\n      runtimeConfigPath: './src/hey-api.ts', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Additional Form Elements and Layout for ConvertKit Form in CSS\nDESCRIPTION: CSS styling for additional ConvertKit form elements including blockquotes, custom content, modal guards, and responsive layouts. Sets dimensions, colors, and layout properties for various form components.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n.formkit-form[data-uid=\"d4e5f1d9b4\"] blockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  border-left: 5px solid #e1e1e1;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .seva-custom-content {\n  padding: 16px;\n  font-size: 16px;\n  color: #fff;\n  mix-blend-mode: difference;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-modal.guard {\n  max-width: 420px;\n  width: 100%;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] {\n  max-width: 700px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] [data-style=\"clean\"] {\n  width: 100%;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-fields {\n  display: -webkit-box;\n  display: -webkit-flex;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Development Server with Package Managers\nDESCRIPTION: Commands for starting the Nuxt development server using different package managers. This launches the server on http://localhost:3000 for local development and testing.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-nuxt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Hot-Reload\nDESCRIPTION: Command to start the development server with hot-reload functionality using pnpm.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-vue-query/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Vitest\nDESCRIPTION: Command to execute unit tests using the Vitest testing framework via pnpm.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-vue-query/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:unit\n```\n\n----------------------------------------\n\nTITLE: FormKit Loading Spinner Animation\nDESCRIPTION: CSS styles for an animated loading spinner with delayed bouncing dots. Uses flexbox for centering and includes transition animations.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-spinner {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  height: 0px;\n  width: 0px;\n  margin: 0 auto;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  width: 0px;\n  overflow: hidden;\n  text-align: center;\n  -webkit-transition: all 300ms ease-in-out;\n  transition: all 300ms ease-in-out;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Resources\nDESCRIPTION: Command to scaffold new Angular components and other resources using the Angular CLI generator.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-angular-query-experimental/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Reverting to Legacy Parser\nDESCRIPTION: Sets experimentalParser to false to continue using the legacy parser instead of the new default parser introduced in v0.62.0.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: false, // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-angular-query-experimental/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Updating Debug Configuration to Logs Level\nDESCRIPTION: Moves the debug option to the new logs.level configuration introduced in v0.59.0 for more granular logging control.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  debug: true, // [!code --]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  logs: {\n    level: 'debug', // [!code ++]\n  },\n  output: 'src/client',\n};\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project, producing output files in the dist directory.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-angular-query-experimental/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Updating Schema Import Path\nDESCRIPTION: Updates import statement to directly reference schemas.gen.ts after v0.58.0 removed the re-export from index.ts.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { mySchema } from 'client'; // [!code --]\nimport { mySchema } from 'client/schemas.gen'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Importing embedProject Function in Vue\nDESCRIPTION: This snippet imports the embedProject function from a relative path. It's likely used for embedding project-related content in the Vue component.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { embedProject } from '../embed'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Transformer Import Path\nDESCRIPTION: Updates import statement to directly reference transformers.gen.ts after v0.58.0 removed the re-export from index.ts.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { myTransformer } from 'client'; // [!code --]\nimport { myTransformer } from 'client/transformers.gen'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Directory Cleaning\nDESCRIPTION: Sets output.clean to false to preserve the previous behavior from before v0.58.0, which didn't automatically clean the output directory.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: {\n    clean: false, // [!code ++]\n    path: 'src/client',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styling FormKit Alert Components\nDESCRIPTION: CSS styles for form alert messages with success and error states. Includes spacing, colors and visibility rules.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-alert:empty {\n  display: none;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-alert-success {\n  background: #d3fbeb;\n  border-color: #10bf7a;\n  color: #0c905c;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-alert-error {\n  background: #fde8e2;\n  border-color: #f2643b;\n  color: #ea4110;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Enums in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the `exportInlineEnums` option to manage how inline enums are treated in the generated code, specifically exporting them as reusable components when set to true. The configuration uses the experimental parser, which is mandatory for this feature.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  experimentalParser: true,\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    // ...other plugins\n    {\n      exportInlineEnums: true, // [!code ++]\n      name: '@hey-api/typescript',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Icon for Plugins Section\nDESCRIPTION: SVG code for rendering the icon used in the Plugins section. The SVG represents a stylized hexagonal shape with internal geometric patterns.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 190 190\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M150.276 61.344c3.093-14.981 3.756-26.471 1.757-34.815-1.189-4.962-3.362-9.01-6.668-11.93-3.49-3.084-7.901-4.597-12.858-4.597-8.178 0-16.775 3.725-25.963 10.802-3.747 2.887-7.636 6.366-11.676 10.44a8.743 8.743 0 0 0-1.09-1.163C82.36 19.915 72.746 13.599 64.523 11.164c-4.89-1.448-9.48-1.586-13.66-.181-4.414 1.483-7.93 4.55-10.41 8.845-4.094 7.089-5.174 16.403-3.648 27.904.623 4.688 1.686 9.794 3.189 15.327a8.725 8.725 0 0 0-1.698.38c-14.489 4.797-24.749 9.955-30.96 15.85-3.696 3.506-6.109 7.41-6.981 11.733-.921 4.562-.023 9.137 2.454 13.43 4.087 7.078 11.6 12.66 22.304 17.082 4.298 1.776 9.161 3.384 14.595 4.83a8.735 8.735 0 0 0-.57 1.776c-3.092 14.98-3.756 26.47-1.756 34.814 1.188 4.962 3.362 9.01 6.667 11.93 3.49 3.084 7.902 4.597 12.86 4.597 8.177 0 16.774-3.725 25.962-10.802 3.787-2.917 7.72-6.44 11.805-10.57.42.656.936 1.267 1.546 1.81 11.42 10.166 21.034 16.482 29.257 18.917 4.89 1.448 9.48 1.586 13.66.181 4.414-1.483 7.93-4.55 10.41-8.845 4.094-7.089 5.174-16.403 3.648-27.904-.645-4.857-1.764-10.164-3.354-15.929a8.715 8.715 0 0 0 1.863-.398c14.489-4.797 24.749-9.955 30.96-15.85 3.696-3.506 6.109-7.41 6.981-11.733.921-4.562.023-9.137-2.454-13.43-4.087-7.078-11.6-12.66-22.304-17.082-4.427-1.828-9.452-3.48-15.082-4.959.2-.49.36-1.006.47-1.543Z\" fill=\"#002C4B\" fill-rule=\"nonzero\"/><path d=\"M80.397 64h29.211a5 5 0 0 1 4.337 2.512l14.632 25.5a5 5 0 0 1 0 4.976l-14.632 25.5a5 5 0 0 1-4.337 2.512H80.397a5 5 0 0 1-4.337-2.512l-14.632-25.5a5 5 0 0 1 0-4.976l14.632-25.5A5 5 0 0 1 80.397 64Zm25.59 6.277a5 5 0 0 1 4.339 2.513l11.017 19.224a5 5 0 0 1 0 4.972l-11.017 19.224a5 5 0 0 1-4.338 2.513h-21.97a5 5 0 0 1-4.339-2.513L68.662 96.986a5 5 0 0 1 0-4.972L79.679 72.79a5 5 0 0 1 4.338-2.513h21.97Zm-3.906 6.864H87.924a5 5 0 0 0-4.335 2.51l-7.1 12.358a5 5 0 0 0 0 4.982l7.1 12.358a5 5 0 0 0 4.335 2.51h14.157a5 5 0 0 0 4.335-2.51l7.1-12.358a5 5 0 0 0 0-4.982l-7.1-12.358a5 5 0 0 0-4.335-2.51Zm-3.762 6.571a5 5 0 0 1 4.334 2.506l3.33 5.788a5 5 0 0 1 0 4.988l-3.33 5.788a5 5 0 0 1-4.334 2.506h-6.633a5 5 0 0 1-4.334-2.506l-3.33-5.788a5 5 0 0 1 0-4.988l3.33-5.788a5 5 0 0 1 4.334-2.506h6.633Zm-3.315 6.473a4.313 4.313 0 1 0-.003 8.63 4.313 4.313 0 1 0 .003-8.63ZM60 94.5h7.768\" fill=\"#FFD94C\"/><path d=\"M54.86 108.358a2.713 2.713 0 0 1 3.718 1.041l.475.845a269.421 269.421 0 0 0 11.888 19.191c4.867 7.15 10.34 14.39 16.421 21.716a2.776 2.776 0 0 1-.296 3.847l-.612.537c-20.107 17.568-33.176 21.078-39.206 10.527-5.898-10.32-3.764-29.08 6.403-56.28a2.748 2.748 0 0 1 1.21-1.424Zm85.674 20.684a2.708 2.708 0 0 1 3.126 2.152l.153.792c4.97 26.01 1.47 39.014-10.497 39.014-11.706 0-26.607-11.091-44.703-33.273a2.725 2.725 0 0 1-.613-1.745 2.712 2.712 0 0 1 2.73-2.694l.955.007c7.62.041 15.03-.223 22.226-.794 8.498-.673 17.373-1.826 26.623-3.46Zm6.875-55.23c.523-1.41 2.1-2.149 3.546-1.663l.788.266c25.84 8.803 35.66 18.477 29.455 29.022-6.068 10.314-23.714 17.823-52.936 22.527a2.852 2.852 0 0 1-1.88-.345 2.726 2.726 0 0 1-.993-3.772l.5-.837c3.988-6.694 7.592-13.356 10.813-19.986 3.803-7.83 7.372-16.233 10.707-25.212Zm-85.67-7.776a2.852 2.852 0 0 1 1.878.345 2.726 2.726 0 0 1 .994 3.772l-.5.837c-3.988 6.694-7.592 13.356-10.813 19.986-3.803 7.83-7.372 16.233-10.707 25.212-.523 1.41-2.1 2.149-3.546 1.663l-.788-.266c-25.84-8.803-35.66-18.477-29.455-29.022C14.87 78.25 32.516 70.74 61.738 66.036Zm41.807-31.57c20.107-17.57 33.176-21.079 39.206-10.528 5.898 10.32 3.764 29.08-6.403 56.28a2.748 2.748 0 0 1-1.21 1.424 2.713 2.713 0 0 1-3.717-1.041l-.475-.845a269.421 269.421 0 0 0-11.888-19.191c-4.867-7.15-10.34-14.39-16.421-21.716a2.776 2.776 0 0 1 .296-3.847ZM57.684 18c11.706 0 26.607 11.091 44.703 33.273.402.492.618 1.11.613 1.745a2.712 2.712 0 0 1-2.73 2.694l-.955-.007c-7.62-.041-15.03.223-22.226.794-8.498.673-17.373 1.826-26.623 3.46a2.708 2.708 0 0 1-3.126-2.153l-.153-.792C42.217 31.004 45.717 18 57.684 18Z\" fill=\"#FF4154\"/></g></svg>\n```\n\n----------------------------------------\n\nTITLE: Renaming Plugin Name Fields for Clarity\nDESCRIPTION: This snippet illustrates the renaming of the `schemas.name` and `services.name` fields to `nameBuilder` and `serviceNameBuilder`, respectively, to avoid conflicts. Each plugin definition needs to have distinct naming strategies for clarity.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  schemas: {\n    name: (name) => `${name}Schema`, // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      nameBuilder: (name) => `${name}Schema`, // [!code ++]\n      name: '@hey-api/schemas',\n    },\n  ],\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  services: {\n    name: '{{name}}Service', // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      serviceNameBuilder: '{{name}}Service', // [!code ++]\n      name: '@hey-api/services',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Team Members with VitePress Component\nDESCRIPTION: Uses the VPTeamMembers component from VitePress to display the contributors in the Hall of Fame section. The component receives the team members data and displays it in a small size format.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/about.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<VPTeamMembers size=\"small\" :members=\"hallOfFame\" />\n```\n\n----------------------------------------\n\nTITLE: Renaming TypeScript Naming Option\nDESCRIPTION: This snippet shows the change in the naming option for types, ensuring unique identification across plugins. The `types.name` field is now `style`, which allows for clearer configuration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  types: {\n    name: 'PascalCase', // [!code --]\n  },\n  plugins: [\n    // ...other plugins\n    {\n      name: '@hey-api/types',\n      style: 'PascalCase', // [!code ++]\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Highlighting TypeScript Type Usage in Config\nDESCRIPTION: This TypeScript snippet demonstrates how the Config interface can be extended with a generic type to enhance configurability, moving beyond the boolean-based `throwOnError` option. It requires TypeScript and understanding of generics, with an expected input and output type flexibility. It contributes to the Nuxt Client configuration by modifying type definitions.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/client-nuxt/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = Config<false>; // [!code --]\ntype Foo = Config<{ throwOnError: false }>; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Moving to Legacy Clients\nDESCRIPTION: This segment captures the transition from using legacy clients by renaming them with a `legacy/` prefix and shows how to maintain functionality with the updated names. Each client type can be aliased to its legacy version for backward compatibility.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: 'fetch', // [!code --]\n  client: 'legacy/fetch', // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: 'axios', // [!code --]\n  client: 'legacy/axios', // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: 'angular', // [!code --]\n  client: 'legacy/angular', // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: 'node', // [!code --]\n  client: 'legacy/node', // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: 'xhr', // [!code --]\n  client: 'legacy/xhr', // [!code ++]\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree-Shakeable Services Import\nDESCRIPTION: Example of updating service imports to support tree-shaking in v0.46.0, showing both wildcard imports and specific function imports.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DefaultService } from 'client/services.gen'; // [!code --]\nimport * as DefaultService from 'client/services.gen'; // [!code ++]\n\nDefaultService.foo(); // only import needs to be changed\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DefaultService } from 'client/services.gen'; // [!code --]\nimport { foo } from 'client/services.gen'; // [!code ++]\n\nfoo(); // all references need to be changed\n```\n\n----------------------------------------\n\nTITLE: Styling ConvertKit Form Powered-By Links with Hover Effects in CSS\nDESCRIPTION: CSS code for styling the 'powered by ConvertKit' link in a form, including hover/focus states that apply scaling transforms and change opacity. This includes specific styling for dark and light variants of the branded link.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-powered-by-convertkit:hover,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-powered-by-convertkit:focus {\n  background-color: #ffffff;\n  -webkit-transform: scale(1.025) perspective(1px);\n  -ms-transform: scale(1.025) perspective(1px);\n  transform: scale(1.025) perspective(1px);\n  opacity: 1;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  .formkit-powered-by-convertkit[data-variant=\"dark\"],\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  .formkit-powered-by-convertkit[data-variant=\"light\"] {\n  background-color: transparent;\n  border-color: transparent;\n  width: 133px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  .formkit-powered-by-convertkit[data-variant=\"light\"] {\n  color: #ffffff;\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg width='133' height='36' viewBox='0 0 133 36' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.861 25.5C0.735 25.5 0.651 25.416 0.651 25.29V10.548C0.651 10.422 0.735 10.338 0.861 10.338H6.279C9.072 10.338 10.668 11.451 10.668 13.824C10.668 15.819 9.219 16.932 8.001 17.226C7.707 17.268 7.707 17.625 8.022 17.688C9.912 18.108 11.088 19.116 11.088 21.321C11.088 23.715 9.429 25.5 6.426 25.5H0.861ZM5.397 23.085C6.825 23.085 7.518 22.224 7.518 21.006C7.518 19.683 6.825 18.948 5.397 18.948H4.2V23.085H5.397ZM5.313 16.617C6.51 16.617 7.245 15.945 7.245 14.601C7.245 13.383 6.51 12.753 5.25 12.753H4.2V16.617H5.313ZM17.9758 23.883C17.9758 23.568 17.6608 23.505 17.5348 23.799C17.0308 24.954 16.1698 25.731 14.5528 25.731C12.8728 25.731 12.0958 24.471 12.0958 22.707V14.937C12.0958 14.811 12.1798 14.727 12.3058 14.727H15.2248C15.3508 14.727 15.4348 14.811 15.4348 14.937V21.657C15.4348 22.581 15.7708 23.022 16.4638 23.022C17.1778 23.022 17.6188 22.581 17.6188 21.657V14.937C17.6188 14.811 17.7028 14.727 17.8288 14.727H20.7478C20.8738 14.727 20.9578 14.811 20.9578 14.937V25.29C20.9578 25.416 20.8738 25.5 20.7478 25.5H18.1858C18.0598 25.5 17.9758 25.416 17.9758 25.29V23.883ZM25.6141 25.29C25.6141 25.416 25.5301 25.5 25.4041 25.5H22.4851C22.3591 25.5 22.2751 25.416 22.2751 25.29V14.937C22.2751 14.811 22.3591 14.727 22.4851 14.727H25.4041C25.5301 14.727 25.6141 14.811 25.6141 14.937V25.29ZM23.9131 13.74C22.8001 13.74 22.0441 12.942 22.0441 11.934C22.0441 10.926 22.8001 10.107 23.9131 10.107C25.0051 10.107 25.7611 10.926 25.7611 11.934C25.7611 12.942 25.0051 13.74 23.9131 13.74ZM26.7883 10.548C26.7883 10.422 26.8723 10.338 26.9983 10.338H29.9173C30.0433 10.338 30.1273 10.422 30.1273 10.548V22.056C30.1273 22.749 30.2533 23.085 30.8203 23.085C31.0093 23.085 31.1983 23.043 31.3663 23.001C31.5133 22.959 31.6183 22.959 31.6183 23.127V25.059C31.6183 25.164 31.5763 25.269 31.4923 25.311C30.9673 25.521 30.2953 25.71 29.5813 25.71C27.7123 25.71 26.7883 24.639 26.7883 22.476V10.548ZM32.4237 14.727C32.8227 14.727 32.9277 14.538 32.9697 14.055L33.1167 12.039C33.1167 11.913 33.2217 11.829 33.3477 11.829H35.8887C36.0147 11.829 36.0987 11.913 36.0987 12.039V14.517C36.0987 14.643 36.1827 14.727 36.3087 14.727H38.2827C38.4087 14.727 38.4927 14.811 38.4927 14.937V16.659C38.4927 16.785 38.4087 16.869 38.2827 16.869H36.0777V22.056C36.0777 22.875 36.5397 23.085 37.0647 23.085C37.4847 23.085 37.9467 22.938 38.3247 22.707C38.4717 22.623 38.5767 22.665 38.5767 22.833V24.828C38.5767 24.933 38.5347 25.017 38.4507 25.08C37.8417 25.458 36.9807 25.71 36.0357 25.71C34.2927 25.71 32.7387 24.912 32.7387 22.476V16.869H31.8567C31.7307 16.869 31.6467 16.785 31.6467 16.659V14.937C31.6467 14.811 31.7307 14.727 31.8567 14.727H32.4237ZM51.3808 14.727C51.5068 14.727 51.5908 14.79 51.6118 14.916L52.3888 19.851L52.5778 21.174C52.6198 21.468 52.9558 21.468 52.9768 21.174C53.0398 20.712 53.0818 20.271 53.1658 19.83L53.8798 14.916C53.9008 14.79 53.9848 14.727 54.1108 14.727H56.6728C56.8198 14.727 56.8828 14.811 56.8618 14.958L54.6778 25.311C54.6568 25.437 54.5728 25.5 54.4468 25.5H51.3178C51.1918 25.5 51.1078 25.437 51.0868 25.311L50.1208 20.082L49.8898 18.633C49.8688 18.444 49.6588 18.444 49.6378 18.633L49.4068 20.103L48.5458 25.311C48.5248 25.437 48.4408 25.5 48.3148 25.5H45.2068C45.0808 25.5 44.9968 25.437 44.9758 25.311L42.8128 14.958C42.7918 14.811 42.8548 14.727 43.0018 14.727H45.9628C46.0888 14.727 46.1728 14.79 46.1938 14.916L46.9288 19.83C47.0128 20.271 47.0758 20.754 47.1388 21.195C47.2018 21.51 47.4748 21.531 47.5378 21.195L47.7478 19.872L48.6088 14.916C48.6298 14.79 48.7138 14.727 48.8398 14.727H51.3808ZM61.1582 25.29C61.1582 25.416 61.0742 25.5 60.9482 25.5H58.0292C57.9032 25.5 57.8192 25.416 57.8192 25.29V14.937C57.8192 14.811 57.9032 14.727 58.0292 14.727H60.9482C61.0742 14.727 61.1582 14.811 61.1582 14.937V25.29ZM59.4572 13.74C58.3442 13.74 57.5882 12.942 57.5882 11.934C57.5882 10.926 58.3442 10.107 59.4572 10.107C60.5492 10.107 61.3052 10.926 61.3052 11.934C61.3052 12.942 60.5492 13.74 59.4572 13.74ZM62.8154 14.727C63.2144 14.727 63.3194 14.538 63.3614 14.055L63.5084 12.039C63.5084 11.913 63.6134 11.829 63.7394 11.829H66.2804C66.4064 11.829 66.4904 11.913 66.4904 12.039V14.517C66.4904 14.643 66.5744 14.727 66.7004 14.727H68.6744C68.8004 14.727 68.8844 14.811 68.8844 14.937V16.659C68.8844 16.785 68.8004 16.869 68.6744 16.869H66.4694V22.056C66.4694 22.875 66.9314 23.085 67.4564 23.085C67.8764 23.085 68.3384 22.938 68.7164 22.707C68.8634 22.623 68.9684 22.665 68.9684 22.833V24.828C68.9684 24.933 68.9264 25.017 68.8424 25.08C68.2334 25.458 67.3724 25.71 66.4274 25.71C64.6844 25.71 63.1304 24.912 63.1304 22.476V16.869H62.2484C62.1224 16.869 62.0384 16.785 62.0384 16.659V14.937C62.0384 14.811 62.1224 14.727 62.2484 14.727H62.8154ZM73.4298 16.323C73.4298 16.638 73.7868 16.68 73.9128 16.407C74.3748 15.315 75.1308 14.496 76.6008 14.496C78.2178 14.496 78.9528 15.609 78.9528 17.373V25.29C78.9528 25.416 78.8688 25.5 78.7428 25.5H75.8238C75.6978 25.5 75.6138 25.416 75.6138 25.29V18.633C75.6138 17.709 75.2778 17.268 74.5848 17.268C73.8708 17.268 73.4298 17.709 73.4298 18.633V25.29C73.4298 25.416 73.3458 25.5 73.2198 25.5H70.3008C70.1748 25.5 70.0908 25.416 70.0908 25.29V10.548C70.0908 10.422 70.1748 10.338 70.3008 10.338H73.2198C73.3458 10.338 73.4298 10.422 73.4298 10.548V16.323Z' fill='white'/%3E%3Cpath d='M100.132 16.3203C105.58 17.3761 107.272 22.4211 107.318 27.4961C107.318 27.6101 107.226 27.7041 107.112 27.7041H100.252C100.138 27.7041 100.046 27.6121 100.046 27.5001C100.026 23.5629 99.3877 20.0896 95.4865 19.9396C95.3705 19.9356 95.2725 20.0276 95.2725 20.1456V27.5001C95.2725 27.6141 95.1806 27.7061 95.0666 27.7061H88.206C88.092 27.7061 88 27.6141 88 27.5001V8.75585C88 8.64187 88.092 8.54989 88.206 8.54989H95.0686C95.1826 8.54989 95.2745 8.64187 95.2745 8.75585V15.7764C95.2745 15.8804 95.3585 15.9644 95.4625 15.9644C95.5445 15.9644 95.6185 15.9104 95.6425 15.8324C97.4081 10.0416 100.709 8.58588 106.07 8.55189C106.184 8.55189 106.276 8.64387 106.276 8.75785V15.7604C106.276 15.8744 106.184 15.9664 106.07 15.9664H100.166C100.066 15.9664 99.9856 16.0464 99.9856 16.1464C99.9856 16.2304 100.048 16.3043 100.132 16.3203ZM118.918 20.7095V16.1704C118.918 16.0564 119.01 15.9644 119.124 15.9644H124.173C124.273 15.9644 124.353 15.8844 124.353 15.7844C124.353 15.6985 124.291 15.6245 124.207 15.6085C120.256 14.8246 118.432 12.5511 118.37 8.75585C118.368 8.64387 118.458 8.54989 118.572 8.54989H125.986C126.1 8.54989 126.192 8.64187 126.192 8.75585V11.9532C126.192 12.0672 126.284 12.1592 126.398 12.1592H130.649C130.763 12.1592 130.855 12.2511 130.855 12.3651V15.7624C130.855 15.8764 130.763 15.9684 130.649 15.9684H126.398C126.284 15.9684 126.192 16.0604 126.192 16.1744V19.8356C126.192 21.1294 126.986 21.5553 128.04 21.5553C129.692 21.5553 131.323 20.8114 131.977 20.4735C132.113 20.4035 132.277 20.5015 132.277 20.6555V26.3543C132.277 26.5063 132.193 26.6463 132.059 26.7183C131.413 27.0582 129.418 28 127.136 28C122.435 27.996 118.918 26.0824 118.918 20.7095ZM109.266 27.4981V16.1704C109.266 16.0564 109.358 15.9644 109.472 15.9644H116.334C116.448 15.9644 116.54 16.0564 116.54 16.1704V27.4981C116.54 27.6121 116.448 27.7041 116.334 27.7041H109.472C109.358 27.7021 109.266 27.6101 109.266 27.4981ZM108.876 11.4913C108.876 13.4189 110.238 14.9826 112.853 14.9826C115.469 14.9826 116.83 13.4189 116.83 11.4913C116.83 9.56369 115.471 8 112.853 8C110.238 8 108.876 9.56369 108.876 11.4913Z' fill='white'/%3E%3C/svg%3E\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Class Generation\nDESCRIPTION: Configuration to preserve class-based service generation in v0.46.0 using the asClass option.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/migrating.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  services: {\n    asClass: true, // [!code ++]\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounce Animation with Keyframes for ConvertKit Form in CSS\nDESCRIPTION: CSS keyframe animations for creating a bouncing effect in a ConvertKit form. The animation scales elements from 0 to 1 and back, with browser-specific prefixes for maximum compatibility.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n@-webkit-keyframes formkit-bouncedelay-formkit-form-data-uid-d4e5f1d9b4- {\n  0%,\n  80%,\n  100% {\n    -webkit-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0);\n  }\n  40% {\n    -webkit-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1);\n  }\n}\n@keyframes formkit-bouncedelay-formkit-form-data-uid-d4e5f1d9b4- {\n  0%,\n  80%,\n  100% {\n    -webkit-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0);\n  }\n  40% {\n    -webkit-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Responsive Form Layout with Flexbox in CSS\nDESCRIPTION: This CSS snippet defines styles for a responsive form layout using flexbox. It includes styles for form fields, submit buttons, and responsive adjustments based on viewport width. The styles use custom attributes and target specific elements within a form identified by data-uid='d4e5f1d9b4'.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\ndisplay: -ms-flexbox;\ndisplay: flex;\n-webkit-flex-wrap: wrap;\n-ms-flex-wrap: wrap;\nflex-wrap: wrap;\nmargin: 0 auto;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-field,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-submit {\n  margin: 0 0 16px 0;\n  -webkit-flex: 1 0 100%;\n  -ms-flex: 1 0 100%;\n  flex: 1 0 100%;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  .formkit-powered-by-convertkit-container {\n  margin: 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-submit {\n  position: static;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"700\"] [data-style=\"clean\"],\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"800\"] [data-style=\"clean\"] {\n  padding-bottom: 0;\n  padding-top: 16px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"700\"]\n  .formkit-fields[data-stacked=\"false\"],\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"800\"]\n  .formkit-fields[data-stacked=\"false\"] {\n  margin-left: -5px;\n  margin-right: -5px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"700\"]\n  .formkit-fields[data-stacked=\"false\"]\n  .formkit-field,\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"800\"]\n  .formkit-fields[data-stacked=\"false\"]\n  .formkit-field,\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"700\"] .formkit-fields[data-stacked=\"false\"] .formkit-submit,\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"800\"] .formkit-fields[data-stacked=\"false\"] .formkit-submit {\n  margin: 0 5px 16px 5px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"700\"]\n  .formkit-fields[data-stacked=\"false\"]\n  .formkit-field,\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"800\"]\n  .formkit-fields[data-stacked=\"false\"]\n  .formkit-field {\n  -webkit-flex: 100 1 auto;\n  -ms-flex: 100 1 auto;\n  flex: 100 1 auto;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"700\"] .formkit-fields[data-stacked=\"false\"] .formkit-submit,\n.formkit-form[data-uid=\"d4e5f1d9b4\"][min-width~=\"800\"] .formkit-fields[data-stacked=\"false\"] .formkit-submit {\n  -webkit-flex: 1 1 auto;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Migrating from Shorthand Schema Configuration to Plugin System in JavaScript\nDESCRIPTION: Example showing how to migrate from using the old shorthand schema configuration to the new plugin system by explicitly defining plugins instead of using the schemas: false shorthand.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/openapi-ts/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  schemas: false, // [!code --]\n  plugins: ['@hey-api/types', '@hey-api/services'], // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Hey API OpenAPI TypeScript Integration\nDESCRIPTION: This HTML snippet creates a div element with the class 'home-list', which likely serves as a container for listing items related to the Hey API OpenAPI TypeScript integration.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"home-list\">\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in JavaScript\nDESCRIPTION: Updated configuration example showing how to explicitly specify plugins to use after removal of CLI options and *.export option.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  client: '@hey-api/client-fetch',\n  input: 'path/to/openapi.json',\n  output: 'src/client',\n  plugins: ['@hey-api/types', '@hey-api/services'],\n};\n```\n\n----------------------------------------\n\nTITLE: Including Sponsors List in Markdown\nDESCRIPTION: This snippet uses a Markdown include directive to insert the contents of a sponsors list file. This allows for dynamic updating of the sponsors list without modifying the main document.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/sponsors.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: ./sponsors-list.md-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog in Markdown\nDESCRIPTION: This markdown document details version history of the @example/openapi-ts-nuxt package, tracking patch changes across multiple releases with dependency updates. It includes commit references and links to the original GitHub repository.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-nuxt/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @example/openapi-ts-nuxt\n\n## 0.0.16\n\n### Patch Changes\n\n- Updated dependencies [[`09bce36`](https://github.com/hey-api/openapi-ts/commit/09bce3644680a68ea91c9a1396d506b13709ae93), [`f46e241`](https://github.com/hey-api/openapi-ts/commit/f46e2419d8eaefea4eaff232f00ec770509afcb1)]:\n  - @hey-api/nuxt@0.1.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Transformer Plugin in OpenAPI-TS\nDESCRIPTION: Basic configuration for adding the @hey-api/transformers plugin to your OpenAPI-TS setup. This enables data transformation capabilities for API responses.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/transformers.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultPlugins } from '@hey-api/openapi-ts';\n\nexport default {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: [\n    ...defaultPlugins,\n    '@hey-api/client-fetch',\n    '@hey-api/transformers', // [!code ++]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Responsive Stainless Logo Image in HTML\nDESCRIPTION: This HTML snippet demonstrates how to load a responsive image using the picture element. It provides different image sources based on screen width and browser support for WebP format. The code includes fallback options and lazy loading for better performance.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/sponsors-list.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li>\n    <a href=\"https://kutt.it/pkEZyc\" target=\"_blank\">\n      <picture>\n        <source srcset=\"/images/stainless-logo-wordmark-480w.webp\" media=\"(max-width: 480px)\" type=\"image/webp\" />\n        <source srcset=\"/images/stainless-logo-wordmark-768w.webp\" media=\"(max-width: 768px)\" type=\"image/webp\" />\n        <source srcset=\"/images/stainless-logo-wordmark-1200w.webp\" media=\"(min-width: 769px)\" type=\"image/webp\" />\n        <img alt=\"Stainless logo\" loading=\"lazy\" src=\"/images/stainless-logo-wordmark-1200w.png\" />\n      </picture>\n    </a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Including Sponsors List in Markdown\nDESCRIPTION: This snippet demonstrates how to include an external markdown file containing a list of sponsors. It uses a custom syntax for file inclusion within a div element with a specific class.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"sponsors-list\">\n\n<!--@include: ./sponsors-list.md-->\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling FormKit Newsletter Form with CSS\nDESCRIPTION: Comprehensive CSS styling for the FormKit newsletter form that includes styling for the form container, input fields, buttons, and other form components. The styles use CSS variables to ensure the form matches the site's theme.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/email-form.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.formkit-form {\n  margin: 0 auto;\n}\n\n.formkit-submit {\n  background-color: var(--vp-button-brand-bg);\n  border-color: var(--vp-button-brand-border);\n  color: var(--vp-button-brand-text);\n}\n\n\n.formkit-form[data-uid=\"d4e5f1d9b4\"] * {\n  box-sizing: border-box;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] legend {\n  border: none;\n  font-size: inherit;\n  margin-bottom: 10px;\n  padding: 0;\n  position: relative;\n  display: table;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] fieldset {\n  border: 0;\n  padding: 0.01em 0 0 0;\n  margin: 0;\n  min-width: 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  body:not(:-moz-handler-blocked)\n  fieldset {\n  display: table-cell;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h1,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h2,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h3,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h4,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h5,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h6 {\n  color: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h2 {\n  font-size: 1.5em;\n  margin: 1em 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] h3 {\n  font-size: 1.17em;\n  margin: 1em 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] p {\n  color: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] ol:not([template-default]),\n.formkit-form[data-uid=\"d4e5f1d9b4\"] ul:not([template-default]),\n.formkit-form[data-uid=\"d4e5f1d9b4\"] blockquote:not([template-default]) {\n  text-align: left;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] p:not([template-default]),\n.formkit-form[data-uid=\"d4e5f1d9b4\"] hr:not([template-default]),\n.formkit-form[data-uid=\"d4e5f1d9b4\"] blockquote:not([template-default]),\n.formkit-form[data-uid=\"d4e5f1d9b4\"] ol:not([template-default]),\n.formkit-form[data-uid=\"d4e5f1d9b4\"] ul:not([template-default]) {\n  color: inherit;\n  font-style: initial;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .ordered-list,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .unordered-list {\n  list-style-position: outside !important;\n  padding-left: 1em;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .list-item {\n  padding-left: 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][data-format=\"modal\"] {\n  display: none;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][data-format=\"slide in\"] {\n  display: none;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"][data-format=\"sticky bar\"] {\n  display: none;\n}\n.formkit-sticky-bar\n  .formkit-form[data-uid=\"d4e5f1d9b4\"][data-format=\"sticky bar\"] {\n  display: block;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-select,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-checkboxes {\n  width: 100%;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-button,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-submit {\n  border: 0;\n  border-radius: 5px;\n  cursor: pointer;\n  display: inline-block;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  margin-bottom: 16px;\n  overflow: hidden;\n  padding: 0;\n  position: relative;\n  vertical-align: middle;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-button:hover > span,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-submit:hover > span,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-button:focus > span,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-submit:focus > span {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-button > span,\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-submit > span {\n  display: block;\n  -webkit-transition: all 300ms ease-in-out;\n  transition: all 300ms ease-in-out;\n  padding: 12px 24px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input {\n  -ms-flex: 1 0 auto;\n  -webkit-flex: 1 0 auto;\n  -webkit-transition: border-color ease-out 300ms;\n  background-color: var(--vp-c-bg-alt);\n  border-radius: 8px;\n  flex: 1 0 auto;\n  font-size: 16px;\n  height: 100%;\n  line-height: 1.4;\n  margin: 0;\n  padding: 0 10px 0 12px;\n  transition: border-color ease-out 300ms;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input:focus {\n  background-color: var(--vp-c-bg-alt);\n  border-color: var(--vp-c-brand-1);\n  outline: none;\n  -webkit-transition: border-color ease 300ms;\n  transition: border-color ease 300ms;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.8;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input::-moz-placeholder {\n  color: inherit;\n  opacity: 0.8;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input:-ms-input-placeholder {\n  color: inherit;\n  opacity: 0.8;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-input::placeholder {\n  color: inherit;\n  opacity: 0.8;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] [data-group=\"dropdown\"] {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] [data-group=\"dropdown\"]::before {\n  content: \"\";\n  top: calc(50% - 2.5px);\n  right: 10px;\n  position: absolute;\n  pointer-events: none;\n  border-color: #4f4f4f transparent transparent transparent;\n  border-style: solid;\n  border-width: 6px 6px 0 6px;\n  height: 0;\n  width: 0;\n  z-index: 999;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] [data-group=\"dropdown\"] select {\n  height: auto;\n  width: 100%;\n  cursor: pointer;\n  color: #333333;\n  line-height: 1.4;\n  margin-bottom: 0;\n  padding: 0 6px;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-size: 16px;\n  padding: 12px;\n  padding-right: 25px;\n  border: 1px solid #e3e3e3;\n  background: #ffffff;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] [data-group=\"dropdown\"] select:focus {\n  outline: none;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] [data-group=\"checkboxes\"] {\n  text-align: left;\n  margin: 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"] {\n  margin-bottom: 10px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  * {\n  cursor: pointer;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]:last-of-type {\n  margin-bottom: 0;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  input[type=\"checkbox\"] {\n  display: none;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  input[type=\"checkbox\"]\n  + label::after {\n  content: none;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  input[type=\"checkbox\"]:checked\n  + label::after {\n  border-color: #ffffff;\n  content: \"\";\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  input[type=\"checkbox\"]:checked\n  + label::before {\n  background: #10bf7a;\n  border-color: #10bf7a;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  label {\n  position: relative;\n  display: inline-block;\n  padding-left: 28px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  label::before,\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  label::after {\n  position: absolute;\n  content: \"\";\n  display: inline-block;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  label::before {\n  height: 16px;\n  width: 16px;\n  border: 1px solid #e3e3e3;\n  background: #ffffff;\n  left: 0px;\n  top: 3px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"]\n  [data-group=\"checkboxes\"]\n  [data-group=\"checkbox\"]\n  label::after {\n  height: 4px;\n  width: 8px;\n  border-left: 2px solid #4d4d4d;\n  border-bottom: 2px solid #4d4d4d;\n  -webkit-transform: rotate(-45deg);\n  -ms-transform: rotate(-45deg);\n  transform: rotate(-45deg);\n  left: 4px;\n  top: 8px;\n}\n.formkit-form[data-uid=\"d4e5f1d9b4\"] .formkit-alert {\n  background: #f9fafb;\n  border: 1px solid #e3e3e3;\n  border-radius: 5px;\n  -webkit-flex: 1 0 auto;\n\n```\n\n----------------------------------------\n\nTITLE: Styling JSON Schema Icon for Dark Mode\nDESCRIPTION: CSS code for styling the JSON Schema icon in dark mode. It sets the fill color of the icon based on a custom CSS variable.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-json-schema path {\n  fill: var(--github-mark-fill-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hero Image Filter for Dark Mode\nDESCRIPTION: CSS code for setting the hero image filter in dark mode for different screen sizes. It applies a blur effect to the hero image.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@media (min-width: 640px) {\n  html.dark {\n    --vp-home-hero-image-filter: blur(156px);\n  }\n}\n\n@media (min-width: 960px) {\n  html.dark {\n    --vp-home-hero-image-filter: blur(168px);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Configuration File\nDESCRIPTION: Configuration example using CommonJS format (openapi-ts.config.cjs).\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@hey-api/openapi-ts').UserConfig} */\nmodule.exports = {\n  input: 'https://get.heyapi.dev/hey-api/backend',\n  output: 'src/client',\n  plugins: ['@hey-api/client-fetch'],\n};\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Application for Production\nDESCRIPTION: Commands for building the Nuxt application for production deployment using different package managers. This creates optimized bundles and assets for serving in a production environment.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-nuxt/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project with create-svelte\nDESCRIPTION: Commands to create a new Svelte project using create-svelte, either in the current directory or in a specified folder. These commands initialize a new Svelte project with the latest version.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-svelte-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Linting Project with ESLint\nDESCRIPTION: Command to run ESLint for code linting and style checking using pnpm.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/examples/openapi-ts-tanstack-vue-query/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Base Configuration in TypeScript\nDESCRIPTION: Example of how to use the base configuration in a vite.config.ts file. It imports the createViteConfig function from @config/vite-base and allows for additional specific configurations and plugins.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/config-vite-base/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { createViteConfig } from '@config/vite-base';\n\nexport default createViteConfig({\n  // Your specific configuration\n  plugins: [react()], // Example\n});\n```\n\n----------------------------------------\n\nTITLE: Building the @config/vite-base Package\nDESCRIPTION: Commands to navigate to the package directory, install dependencies, and build the package.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/packages/config-vite-base/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/configs/vite-base\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Client-side Form Validation Using Generated Schemas\nDESCRIPTION: A practical example of using the generated schemas for client-side form validation. This snippet demonstrates how to access schema properties to enforce input constraints.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/output/json-schema.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { $Schema } from './client/schemas.gen';\n\nconst maxInputLength = $Schema.properties.text.maxLength;\n\nif (userInput.length > maxInputLength) {\n  throw new Error(`Text length can't exceed ${maxInputLength} characters!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using buildUrl Method with Fetch Client\nDESCRIPTION: Example of using the buildUrl() method to construct a URL with path parameters and query strings.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/clients/fetch.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype FooData = {\n  path: {\n    fooId: number;\n  };\n  query?: {\n    bar?: string;\n  };\n  url: '/foo/{fooId}';\n};\n\nconst url = client.buildUrl<FooData>({\n  path: {\n    fooId: 1,\n  },\n  query: {\n    bar: 'baz',\n  },\n  url: '/foo/{fooId}',\n});\nconsole.log(url); // prints '/foo/1?bar=baz'\n```\n\n----------------------------------------\n\nTITLE: Authenticated OpenAPI Specification Fetch Example\nDESCRIPTION: Example URL showing how to fetch an OpenAPI specification with authentication using an API key as a query parameter. This is necessary for accessing private projects.\nSOURCE: https://github.com/hey-api/openapi-ts/blob/main/docs/openapi-ts/integrations.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhttps://get.heyapi.dev/foo/bar?api_key=<my_api_key>\n```"
  }
]