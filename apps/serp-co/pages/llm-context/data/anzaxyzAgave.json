[
  {
    "owner": "anza-xyz",
    "repo": "agave",
    "content": "TITLE: Configuring Systemd Unit for Solana Validator\nDESCRIPTION: A systemd unit configuration for running a Solana validator as a background service. This defines the service dependencies, restart behavior, and resource limits for the validator process.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_21\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=Solana Validator\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nUser=sol\nLimitNOFILE=1000000\nLogRateLimitIntervalSec=0\nEnvironment=\"PATH=/bin:/usr/bin:/home/sol/.local/share/solana/install/active_release/bin\"\nExecStart=/home/sol/bin/validator.sh\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Creating Vote Account Keypair\nDESCRIPTION: Generates a keypair for a vote account, which will be used to participate in consensus and earn rewards.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Starting Agave Validator Node\nDESCRIPTION: Launches the validator process with the specified identity, vote account, and network connection parameters. This connects the validator to the Devnet cluster.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator \\\n  --identity ~/validator-keypair.json \\\n  --vote-account ~/vote-account-keypair.json \\\n  --rpc-port 8899 \\\n  --entrypoint entrypoint.devnet.solana.com:8001 \\\n  --limit-ledger-size \\\n  --log ~/agave-validator.log\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Keypairs\nDESCRIPTION: Commands to create required keypairs for validator operation: validator identity, vote account, and authorized withdrawer.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o validator-keypair.json\nsolana-keygen new -o vote-account-keypair.json\nsolana-keygen new -o authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Requesting Devnet SOL Airdrop\nDESCRIPTION: Requests an airdrop of 1 SOL to the validator's account on Devnet for testing and setup purposes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop 1\n```\n\n----------------------------------------\n\nTITLE: Setting Devnet Cluster Target with Solana CLI\nDESCRIPTION: This command configures the Solana CLI to target the Devnet cluster by setting the URL endpoint. Future commands will communicate with this specified cluster.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Complete Solana Transfer Example\nDESCRIPTION: Full example demonstrating wallet creation, airdrop, and token transfer workflow\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-keygen new --outfile my_solana_wallet.json\n$ solana airdrop 1 DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK --url https://api.devnet.solana.com\n$ solana balance DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK --url https://api.devnet.solana.com\n$ solana-keygen new --no-outfile\n$ solana transfer --from my_solana_wallet.json 7S3P4HxJpyyigGzodYwHtCxZyUQe9JiBMHyRWXArAaKv 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer my_solana_wallet.json\n$ solana balance DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK --url https://api.devnet.solana.com\n$ solana balance 7S3P4HxJpyyigGzodYwHtCxZyUQe9JiBMHyRWXArAaKv --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Account Balance\nDESCRIPTION: Displays the current SOL balance of the validator's account to verify funds availability.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance\n```\n\n----------------------------------------\n\nTITLE: Installing Solana using Install Tool (MacOS/Linux)\nDESCRIPTION: Command to install the Agave release using the official install script via curl.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.anza.xyz/LATEST_AGAVE_RELEASE_VERSION/install)\"\n```\n\n----------------------------------------\n\nTITLE: System Optimization Configuration\nDESCRIPTION: Commands to optimize system settings for validator operation including sysctl parameters and file limits.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"cat >/etc/sysctl.d/21-agave-validator.conf <<EOF\n# Increase max UDP buffer sizes\nnet.core.rmem_max = 134217728\nnet.core.wmem_max = 134217728\n\n# Increase memory mapped files limit\nvm.max_map_count = 1000000\n\n# Increase number of allowed open file descriptors\nfs.nr_open = 1000000\nEOF\"\n\nsudo sysctl -p /etc/sysctl.d/21-agave-validator.conf\n\nsudo bash -c \"cat >/etc/security/limits.d/90-solana-nofiles.conf <<EOF\n# Increase process file descriptor count limit\n* - nofile 1000000\nEOF\"\n```\n\n----------------------------------------\n\nTITLE: Checking Validator in Gossip Network\nDESCRIPTION: Uses the solana gossip command to verify that the validator has registered with the network's gossip protocol by filtering for the validator's public key.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip | grep <pubkey>\n```\n\n----------------------------------------\n\nTITLE: Verifying Validator Connection to Network\nDESCRIPTION: Checks if the validator is successfully connected to the network by viewing the gossip information, which shows active nodes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip\n```\n\n----------------------------------------\n\nTITLE: Checking Current Cluster Target with Solana CLI\nDESCRIPTION: This command displays the current cluster configuration for the Solana CLI, showing which cluster is being targeted for operations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana config get\n```\n\n----------------------------------------\n\nTITLE: Signing Off-Chain Messages with Solana CLI Default Keypair\nDESCRIPTION: Command for signing an arbitrary off-chain message using the CLI's default private key. The message will be encoded and signed, with the signature printed to the output.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrotate for Solana Validator Logs\nDESCRIPTION: Script to set up log rotation for Solana validator logs using logrotate. This configuration rotates logs daily, keeps 7 days of history, and sends the USR1 signal to the validator process to reopen log files after rotation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Setup log rotation\n\ncat > logrotate.sol <<EOF\n/home/sol/agave-validator.log {\n  rotate 7\n  daily\n  missingok\n  postrotate\n    systemctl kill -s USR1 sol.service\n  endscript\n}\nEOF\nsudo cp logrotate.sol /etc/logrotate.d/sol\nsystemctl restart logrotate.service\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Keypair File\nDESCRIPTION: Commands to create a directory and generate a new Solana keypair file. Creates an unencrypted wallet file that stores the keypair.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/file-system.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/my-solana-wallet\nsolana-keygen new --outfile ~/my-solana-wallet/my-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Sending SOL Using Ledger in Solana CLI\nDESCRIPTION: This command demonstrates how to send SOL from a Ledger-controlled address. It specifies the recipient address, amount to send, and the keypair URL of the sender. The transaction requires approval on the Ledger device.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer RECIPIENT_ADDRESS AMOUNT --keypair KEYPAIR_URL_OF_SENDER\n```\n\n----------------------------------------\n\nTITLE: Creating Vote Account on Blockchain\nDESCRIPTION: Initializes a vote account on the Solana blockchain using the validator identity, vote account keypair, and authorized withdrawer.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-vote-account ~/vote-account-keypair.json ~/validator-keypair.json ~/authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Agave Version\nDESCRIPTION: Demonstrates how to install a specific version of Agave (2.0.15 in this example) using the agave-install command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nagave-install init 2.0.15\n```\n\n----------------------------------------\n\nTITLE: Generating Vanity Keypair\nDESCRIPTION: Creates a custom vanity keypair that starts with a specific prefix, which can make the validator address more recognizable.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen grind --starts-with e1v1s:1\n```\n\n----------------------------------------\n\nTITLE: Displaying Solana Public Key\nDESCRIPTION: Command to display the public key (wallet address) from a keypair file.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/file-system.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ~/my-solana-wallet/my-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Launching Mainnet Beta Validator\nDESCRIPTION: Comprehensive command for starting a Solana validator node on Mainnet Beta with security, networking, and performance configurations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator \\\n    --identity ~/validator-keypair.json \\\n    --vote-account ~/vote-account-keypair.json \\\n    --known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \\\n    --known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \\\n    --known-validator DE1bawNcRJB9rVm3buyMVfr8mBEoyyu73NBovf2oXJsJ \\\n    --known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \\\n    --only-known-rpc \\\n    --ledger ledger \\\n    --rpc-port 8899 \\\n    --private-rpc \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint2.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint3.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint4.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint5.mainnet-beta.solana.com:8001 \\\n    --expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Catchup Progress\nDESCRIPTION: Uses the solana catchup command to track how far behind the network the validator is and how quickly it is processing blocks to catch up.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsolana catchup <pubkey>\n```\n\n----------------------------------------\n\nTITLE: Applying System Optimization Parameters\nDESCRIPTION: Applies the optimized system parameters from the configuration file to the running system without requiring a reboot.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -p /etc/sysctl.d/21-agave-validator.conf\n```\n\n----------------------------------------\n\nTITLE: Example Solana Public Key Output\nDESCRIPTION: Example output showing the format of a Solana public key address.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/file-system.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nErRr1caKzK8L8nn4xmEWtimYRiTCAZXjBtVphuZ5vMKy\n```\n\n----------------------------------------\n\nTITLE: Successful Transaction Using Nonce in Solana CLI\nDESCRIPTION: Transfer SOL from Alice to Bob using a durable nonce, specifying the nonce account and stored blockhash.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana nonce-account nonce.json\nsolana transfer -k alice.json --blockhash F7vmkY3DTaxfagttWjQweib42b6ZHADSx94Tw8gHx3W7 --nonce nonce.json bob.json 0.01\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Vote Activity with Solana CLI\nDESCRIPTION: This command displays the recent voting activity from your validator using the vote account keypair. This helps verify that your validator is actively participating in consensus.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana vote-account ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Optimizing Linux System Parameters for Solana Validator\nDESCRIPTION: Creates a system configuration file to optimize network buffer sizes, memory mapped files limits, and file descriptor limits for running a Solana validator efficiently.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"cat >/etc/sysctl.d/21-agave-validator.conf <<EOF\n# Increase max UDP buffer sizes\nnet.core.rmem_max = 134217728\nnet.core.wmem_max = 134217728\n\n# Increase memory mapped files limit\nvm.max_map_count = 1000000\n\n# Increase number of allowed open file descriptors\nfs.nr_open = 1000000\nEOF\"\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake to a Validator in Solana CLI\nDESCRIPTION: Delegates stake from a stake account to a validator's vote account. Requires the stake authority keypair, stake account address, and validator's vote account address.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana delegate-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <VOTE_ACCOUNT_ADDRESS> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Balance in Lamports\nDESCRIPTION: Displays the validator's balance in lamports (the smallest unit of SOL) for more precise accounting.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance --lamports\n```\n\n----------------------------------------\n\nTITLE: Starting Solana Test Validator in Bash\nDESCRIPTION: Initiates the Solana test validator process for local development.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-test-validator\n```\n\n----------------------------------------\n\nTITLE: Running Agave Watchtower for Validator Monitoring\nDESCRIPTION: Command to monitor an active validator node using agave-watchtower, checking active stake and monitoring a specific validator identity. This is used to track validator health and receive notifications about potential issues.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/monitoring.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nagave-watchtower --monitor-active-stake --validator-identity \\\n  2uTk98rqqwENevkPH2AHHzGHXgeGc1h6ku8hQUqWeXZp\n```\n\n----------------------------------------\n\nTITLE: System Preparation Commands\nDESCRIPTION: Commands for updating packages and creating a dedicated validator user on Ubuntu.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt upgrade\nsudo adduser sol\n```\n\n----------------------------------------\n\nTITLE: Creating a Nonce Account in Solana CLI\nDESCRIPTION: Generate a new keypair and create a nonce account on the Solana blockchain. This requires specifying the keypair file and initial balance.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o nonce-keypair.json\nsolana create-nonce-account nonce-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Restarting Validator with Snapshot Download\nDESCRIPTION: This command shows how to restart a Solana validator by downloading a snapshot, used when the local ledger is not up to date or has been deleted.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator\n  --wait-for-supermajority SLOT_X     # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --expected-bank-hash NEW_BANK_HASH  # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --entrypoint entrypoint.testnet.solana.com:8001\n  --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on\n  --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY\n  --only-known-rpc\n  --limit-ledger-size\n  ...                                # <-- your other --identity/--vote-account/etc arguments\n```\n\n----------------------------------------\n\nTITLE: Installing fail2ban for Brute Force Attack Protection\nDESCRIPTION: Command to install fail2ban, a network security tool that monitors logs for suspicious login attempts and bans IP addresses after repeated failed attempts to prevent brute force attacks.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/security.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install fail2ban\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Script Directory\nDESCRIPTION: Creates a bin directory in the sol user's home folder and a validator.sh script file with executable permissions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /home/sol/bin\ntouch /home/sol/bin/validator.sh\nchmod +x /home/sol/bin/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Creating and Funding Vote Account\nDESCRIPTION: Series of commands to configure CLI keypair, check balance, receive testnet SOL, and create vote account.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --keypair ./validator-keypair.json\nsolana balance\nsolana airdrop 1\nsolana create-vote-account -ut \\\n    --fee-payer ./validator-keypair.json \\\n    ./vote-account-keypair.json \\\n    ./validator-keypair.json \\\n    ./authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Viewing Ledger Wallet Addresses in Solana CLI\nDESCRIPTION: These commands demonstrate how to view different wallet addresses associated with a Ledger device using various keypair URLs. Each command displays a unique address based on the specified key path.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey usb://ledger\nsolana-keygen pubkey usb://ledger?key=0\nsolana-keygen pubkey usb://ledger?key=1\nsolana-keygen pubkey usb://ledger?key=2\n```\n\n----------------------------------------\n\nTITLE: Configuring Agave Validator Startup Script with Symlinked Identity\nDESCRIPTION: Sample configuration for the validator startup script that uses a symbolic link for the identity file and specifies an authorized voter. This setup allows dynamic switching between staked and unstaked identities.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexec /home/sol/bin/agave-validator \\\n    --identity /home/sol/identity.json \\\n    --vote-account /home/sol/vote.json \\\n    --authorized-voter /home/sol/staked-identity.json \\\n```\n\n----------------------------------------\n\nTITLE: Storage Configuration Commands\nDESCRIPTION: Commands for formatting and mounting drives for ledger and AccountsDB storage.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\nlsblk -f\nsudo mkfs -t ext4 /dev/nvme0n1\nsudo mkdir -p /mnt/ledger\nsudo chown -R sol:sol /mnt/ledger\nsudo mount /dev/nvme0n1 /mnt/ledger\n```\n\n----------------------------------------\n\nTITLE: Creating Authorized Withdrawer Keypair\nDESCRIPTION: Generates a keypair that has the authority to withdraw from the validator's vote account and change other vote account aspects.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Service Logs\nDESCRIPTION: Continuously monitors the validator log file after setting up the system service to ensure proper operation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntail -f /home/sol/agave-validator*.log\n```\n\n----------------------------------------\n\nTITLE: Displaying Public Key for Hardware Wallet\nDESCRIPTION: Illustrates how to display the public key (wallet address) for a Hardware Wallet using the Solana CLI and a keypair URL.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/intro.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey usb://ledger?key=0\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Cluster Version\nDESCRIPTION: This command retrieves the software version running on the currently targeted Solana cluster. It's used to check for compatibility with the local CLI version.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana cluster-version\n```\n\n----------------------------------------\n\nTITLE: Restarting Validator with New Arguments\nDESCRIPTION: This command demonstrates how to restart a Solana validator with new arguments after a cluster restart, including wait-for-supermajority and expected-bank-hash.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator\n  --wait-for-supermajority SLOT_X     # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --expected-bank-hash NEW_BANK_HASH  # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --hard-fork SLOT_X                  # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --no-snapshot-fetch                 # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --entrypoint entrypoint.testnet.solana.com:8001\n  --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on\n  --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY\n  --only-known-rpc\n  --limit-ledger-size\n  ...                                # <-- your other --identity/--vote-account/etc arguments\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Identity Keypair\nDESCRIPTION: Creates a new identity keypair for the validator, which uniquely identifies it within the network.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Tailing Validator Logs\nDESCRIPTION: Continuously displays new log entries as they are added to the validator log file to monitor operation and diagnose issues.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsu - sol\ntail -f agave-validator.log\n```\n\n----------------------------------------\n\nTITLE: Verifying Off-Chain Message Signatures with Custom Version\nDESCRIPTION: Command for verifying an off-chain message signature with a specified version instead of the default. The version must match the one used during signing for verification to succeed.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana verify-offchain-signature --version <VERSION> <MESSAGE> <SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Querying Stored Nonce Value in Solana CLI\nDESCRIPTION: Retrieve the currently stored nonce value for a given nonce account using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana nonce nonce-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Account Balance\nDESCRIPTION: Shows how to check the balance of a validator's identity account using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Starting Validator as System Service\nDESCRIPTION: Enables and starts the validator as a system service using systemctl to ensure it runs automatically on system startup.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now sol\n```\n\n----------------------------------------\n\nTITLE: Deactivating Specific Solana Runtime Features\nDESCRIPTION: Starts the test validator with specific runtime features deactivated for testing purposes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana-test-validator --deactivate-feature <FEATURE_PUBKEY_1> --deactivate-feature <FEATURE_PUBKEY_2>\n```\n\n----------------------------------------\n\nTITLE: Deactivating Delegated Stake in Solana CLI\nDESCRIPTION: Begins the process of undelegating stake from a validator. This initiates a cool-down period before the stake can be delegated elsewhere or withdrawn.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsolana deactivate-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Generating Unstaked Secondary Identity in Solana CLI\nDESCRIPTION: Command to generate a new unstaked secondary identity which will be used when the validator is not actively voting. This creates a new keypair without a BIP39 passphrase.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -s --no-bip39-passphrase -o unstaked-identity.json\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Account Balance with Solana CLI\nDESCRIPTION: This command displays your validator's account balance in lamports (the smallest unit of SOL). The balance should decrease as your validator submits votes (fees) and increase after serving as a leader.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance --lamports\n```\n\n----------------------------------------\n\nTITLE: Viewing Solana Test Validator Help in Bash\nDESCRIPTION: Displays the configuration options for the solana-test-validator command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-test-validator --help\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance in Solana CLI\nDESCRIPTION: This command shows how to check the balance of any Solana account using its address. Replace SOME_WALLET_ADDRESS with the actual wallet address to view its balance.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance SOME_WALLET_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Monitoring Program Logs in Solana CLI\nDESCRIPTION: Streams logs from on-chain programs, capturing msg!() output in real-time.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana logs\n```\n\n----------------------------------------\n\nTITLE: Funding a New Validator Identity Account in Solana\nDESCRIPTION: Transfers 500 SOL to the newly created validator identity account to ensure it has sufficient funds.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer ~/new-validator-keypair.json 500\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Presence in Gossip Network with Solana CLI\nDESCRIPTION: This command confirms that your validator's IP address and identity pubkey are visible in the Solana gossip network, which indicates the validator is properly connected to the network.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip\n```\n\n----------------------------------------\n\nTITLE: Solana Installation Success Output\nDESCRIPTION: Example output showing successful installation of Solana CLI tools.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndownloading LATEST_AGAVE_RELEASE_VERSION installer\nConfiguration: /home/solana/.config/solana/install/config.yml\nActive release directory: /home/solana/.local/share/solana/install/active_release\n* Release version: LATEST_AGAVE_RELEASE_VERSION\n* Release URL: https://github.com/anza-xyz/agave/releases/download/LATEST_AGAVE_RELEASE_VERSION/solana-release-x86_64-unknown-linux-gnu.tar.bz2\nUpdate successful\n```\n\n----------------------------------------\n\nTITLE: Retrieving Solana Cluster Information using JSON-RPC Endpoints\nDESCRIPTION: This set of curl commands demonstrates how to query various JSON-RPC endpoints to monitor validator status and cluster health. It includes checking cluster nodes, vote accounts, leader schedule, and epoch information.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Similar to solana-gossip, you should see your validator in the list of cluster nodes\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getClusterNodes\"}' http://api.devnet.solana.com\n# If your validator is properly voting, it should appear in the list of `current` vote accounts. If staked, `stake` should be > 0\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getVoteAccounts\"}' http://api.devnet.solana.com\n# Returns the current leader schedule\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getLeaderSchedule\"}' http://api.devnet.solana.com\n# Returns info about the current epoch. slotIndex should progress on subsequent calls.\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getEpochInfo\"}' http://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Example of Publishing Validator Info\nDESCRIPTION: Practical example of the publish command, demonstrating how to set a validator name, website, and icon URL.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-info.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info publish \"Elvis Validator\" -w \"https://elvis-validates.com\" -i \"https://elvis-validates.com/my-icon.png\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Validator Info Query\nDESCRIPTION: Sample output when querying validator information, showing the validator's public key and published details including name, website, and icon URL.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-info.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nValidator info from 8WdJvDz6obhADdxpGCiJKZsDYwTLNEDFizayqziDc9ah\n  Validator pubkey: 6dMH3u76qZ7XG4bVboVRnBHR2FfrxEqTTTyj4xmyDMWo\n  Info: {\"iconUrl\":\"elvis\",\"name\":\"Elvis Validator\",\"website\":\"https://elvis-validates.com\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Stake Keypair for Solana Validator\nDESCRIPTION: Generate a new staking keypair for your Solana validator. This keypair will be used to manage your stake account.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/validator-stake-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Windows Solana Installer Download\nDESCRIPTION: Command to download the Solana installer on Windows systems.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmd /c \"curl https://release.anza.xyz/LATEST_AGAVE_RELEASE_VERSION/agave-install-init-x86_64-pc-windows-msvc.exe --output C:\\agave-install-tmp\\agave-install-init.exe --create-dirs\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Delegating Stake Account in Solana\nDESCRIPTION: Create a stake account with 1 SOL and delegate it to your validator. This process involves two commands: creating the stake account and then delegating it.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-stake-account ~/validator-stake-keypair.json 1\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana delegate-stake ~/validator-stake-keypair.json ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Solana CLI Help\nDESCRIPTION: Shows how to view all available Solana CLI commands and get help for a specific command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/intro.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana <COMMAND> --help\n```\n\n----------------------------------------\n\nTITLE: Checking Wallet Balance in Solana CLI\nDESCRIPTION: Retrieves the SOL balance of the default wallet in the local test validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance\n```\n\n----------------------------------------\n\nTITLE: Creating a New Validator Identity Keypair in Solana\nDESCRIPTION: Creates a new validator identity keypair file using the solana-keygen tool.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/new-validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Windows Solana Installation\nDESCRIPTION: Command to execute the Solana installer on Windows.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nC:\\agave-install-tmp\\agave-install-init.exe LATEST_AGAVE_RELEASE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Viewing Validator Public Key\nDESCRIPTION: Displays the public key associated with the validator's identity keypair for verification and registration purposes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Building Solana from Source\nDESCRIPTION: Commands to build Solana from source code and initialize the installation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/cargo-install-all.sh .\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Displaying Nonce Account Details in Solana CLI\nDESCRIPTION: View details of a nonce account, including balance, minimum required balance, and current nonce value.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana nonce-account nonce-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived Stake Account in Solana CLI\nDESCRIPTION: Creates a stake account with an address derived from a base keypair and a seed string. This approach helps manage multiple stake accounts without needing multiple keypairs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-stake-account --from <KEYPAIR> <STAKE_ACCOUNT_KEYPAIR> --seed <STRING> <AMOUNT> \\\n    --stake-authority <PUBKEY> --withdraw-authority <PUBKEY> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Linux Binary Extraction\nDESCRIPTION: Commands to extract and set up Solana binaries on Linux systems.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar jxf solana-release-x86_64-unknown-linux-gnu.tar.bz2\ncd solana-release/\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Creating a Stake Account in Solana CLI\nDESCRIPTION: Creates a new stake account by transferring tokens from an existing account. The command specifies the funding source, the new stake account's keypair file, amount to stake, and the stake and withdraw authorities.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-stake-account --from <KEYPAIR> stake-account.json <AMOUNT> \\\n    --stake-authority <KEYPAIR> --withdraw-authority <KEYPAIR> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Basic Solana Token Transfer\nDESCRIPTION: Simple command for transferring SOL tokens between wallets\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> <AMOUNT> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Delegated Stake Account Information in Solana CLI\nDESCRIPTION: Example output from the stake-account command showing a delegated stake account, including the total stake, delegated amount, target vote account, and activation details.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nTotal Stake: 5000 SOL\nCredits Observed: 147462\nDelegated Stake: 4999.99771712 SOL\nDelegated Vote Account Address: CcaHc2L43ZWjwCHART3oZoJvHLAe9hzT2DJNUpBzoTN1\nStake activates starting from epoch: 42\nStake Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\nWithdraw Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\n```\n\n----------------------------------------\n\nTITLE: Viewing Stake Account Information in Solana CLI\nDESCRIPTION: Retrieves and displays detailed information about a stake account using its address. The output shows total stake amount, delegation status, and authority details.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana stake-account <STAKE_ACCOUNT_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Keygen Version\nDESCRIPTION: Verifies the installation of solana-keygen by displaying its version\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen --version\n```\n\n----------------------------------------\n\nTITLE: Checking Solana CLI Version\nDESCRIPTION: Command to verify Solana CLI installation and check its version.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana --version\n```\n\n----------------------------------------\n\nTITLE: Distributing SPL Tokens Using CLI\nDESCRIPTION: Command to distribute SPL tokens to recipients listed in a CSV file using the specified token address, owner keypair, and fee payer.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-spl-tokens --from <ADDRESS> --owner <KEYPAIR> \\\n    --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Viewing the Public Key of a Generated Keypair in Solana CLI\nDESCRIPTION: The output from the keypair generation command, showing the public key that will be used as the stake account address. This public key should be stored for future reference.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npubkey: GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV\n```\n\n----------------------------------------\n\nTITLE: Creating a Keypair for a Stake Account in Solana CLI\nDESCRIPTION: Generates a new keypair without a passphrase that will be used for creating a stake account. The resulting public key will serve as the stake account address, while the file can be discarded after account creation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-passphrase -o stake-account.json\n```\n\n----------------------------------------\n\nTITLE: Deriving Public Key with Validation Skip\nDESCRIPTION: Derives public key while skipping seed phrase validation for non-standard word lists\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt:// --skip-seed-phrase-validation\n```\n\n----------------------------------------\n\nTITLE: Offline Signing Session 1 for Multi-Session Transfer\nDESCRIPTION: First part of a multi-session signing process where the fee payer signs the transaction. This demonstrates signing by one party while marking another required signer as absent.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer Fdri24WUGtrCXZ55nXiewAj6RM18hRHPGAjZk3o6vBut 10 \\\n    --blockhash 7ALDjLv56a8f6sH6upAZALQKkXyjAwwENH9GomyM8Dbc \\\n    --sign-only \\\n    --keypair fee_payer.json \\\n    --from 674RgFMgdqdRoVtMqSBg7mHFbrrNm1h1r721H1ZMquHL\n```\n\n----------------------------------------\n\nTITLE: Performing SOL Transfer in Solana CLI\nDESCRIPTION: Executes a basic transfer of 1 SOL to a specified address in the local test validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer EPhgPANa5Rh2wa4V2jxt7YbtWa3Uyw4sTeZ13cQjDDB8 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Solana Keypair\nDESCRIPTION: Command to verify that a keypair file corresponds to a given public key address.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/file-system.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen verify <PUBKEY> ~/my-solana-wallet/my-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Tokens from a Stake Account in Solana CLI\nDESCRIPTION: Transfers tokens from a stake account to another account. Requires the withdraw authority keypair, stake account address, recipient address, and amount to withdraw.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana withdraw-stake --withdraw-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS> <AMOUNT> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Verifying Keypair Ownership\nDESCRIPTION: Verifies control of a paper wallet address's private key using the seed phrase\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen verify <PUBKEY> prompt://\n```\n\n----------------------------------------\n\nTITLE: Verifying Off-Chain Message Signatures with Default Signer\nDESCRIPTION: Command for verifying an off-chain message signature using the default CLI signer's public key. Checks if the provided signature is valid for the message.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana verify-offchain-signature <MESSAGE> <SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Submitting a Multi-Session Signed Transaction\nDESCRIPTION: Final step in the multi-session signing process, combining signatures from both offline sessions to submit the complete transaction to the network. This command includes signatures from both the fee payer and the sender.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer Fdri24WUGtrCXZ55nXiewAj6RM18hRHPGAjZk3o6vBut 10 \\\n    --blockhash 7ALDjLv56a8f6sH6upAZALQKkXyjAwwENH9GomyM8Dbc \\\n    --from 674RgFMgdqdRoVtMqSBg7mHFbrrNm1h1r721H1ZMquHL \\\n    --signer 674RgFMgdqdRoVtMqSBg7mHFbrrNm1h1r721H1ZMquHL=3vJtnba4dKQmEAieAekC1rJnPUndBcpvqRPRMoPWqhLEMCty2SdUxt2yvC1wQW6wVUa5putZMt6kdwCaTv8gk7sQ \\\n    --fee-payer 3bo5YiRagwmRikuH6H1d2gkKef5nFZXE3gJeoHxJbPjy \\\n    --signer 3bo5YiRagwmRikuH6H1d2gkKef5nFZXE3gJeoHxJbPjy=ohGKvpRC46jAduwU9NW8tP91JkCT5r8Mo67Ysnid4zc76tiiV1Ho6jv3BKFSbBcr2NcPPCarmfTLSkTHsJCtdYi\n```\n\n----------------------------------------\n\nTITLE: Resolving Signer for Multiple Hardware Wallets in Solana CLI\nDESCRIPTION: This command generates a fully qualified URL for a specific Ledger wallet, allowing unique identification when multiple hardware wallets are connected. It's useful for signing transactions with keys from multiple wallets.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana resolve-signer usb://ledger?key=0/0\n```\n\n----------------------------------------\n\nTITLE: Listing All Validators in Solana CLI\nDESCRIPTION: Queries the Solana cluster for a list of all validators and their vote account addresses. This information is needed to delegate stake to a validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana validators\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster URL and Checking Balance\nDESCRIPTION: Configures the Solana CLI connection and checks account balance\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url <CLUSTER URL> # (i.e. https://api.mainnet-beta.solana.com)\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance <PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Wallet Balance\nDESCRIPTION: Command to check the balance of a Solana wallet address on devnet\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance <ACCOUNT_ADDRESS> --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Verifying Off-Chain Message Signatures with Specified Signer\nDESCRIPTION: Command for verifying an off-chain message signature with a specified signer's public key instead of the default. Uses the --signer option to specify the public key.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana verify-offchain-signature --signer <PUBKEY> <MESSAGE> <SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Viewing Ledger Wallet ID in Solana CLI\nDESCRIPTION: This command displays the unique wallet ID of the connected Ledger device, confirming proper connection and readiness to interact with Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey usb://ledger\n```\n\n----------------------------------------\n\nTITLE: Finding Validator IP and Port\nDESCRIPTION: Shows how to use the solana gossip command to find the IP address and port of a known validator for manual snapshot download.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip | grep 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on\n```\n\n----------------------------------------\n\nTITLE: Example of a Complete Ledger Hardware Wallet Keypair URL\nDESCRIPTION: Shows a fully qualified URL example for accessing a specific keypair on a Ledger hardware wallet. The URL includes the manufacturer (ledger), wallet ID, and derivation path (0/0).\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/index.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nusb://ledger/BsNsvfXqQTtJnagwFWdBS7FBXgnsK8VZ5CmuznN85swK?key=0/0\n```\n\n----------------------------------------\n\nTITLE: Re-delegating Stake to Another Solana Validator\nDESCRIPTION: Re-delegate your stake to a different validator. This can be done once per epoch using the same command as initial delegation but with a different vote account.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana delegate-stake ~/validator-stake-keypair.json ~/some-other-vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Sysvar via get() Method in Solana\nDESCRIPTION: Demonstrates how to query a sysvar at runtime using the get() function, which is the more efficient method supported by Clock, EpochSchedule, Fees, Rent, and EpochRewards sysvars.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/runtime/sysvars.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet clock = Clock::get()\n```\n\n----------------------------------------\n\nTITLE: Deriving Child Key with Custom Path\nDESCRIPTION: Demonstrates hierarchical derivation of child keys using custom derivation paths\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey 'prompt://?key=0/1'\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey 'prompt://?full-path=m/44/2017/0/1'\n```\n\n----------------------------------------\n\nTITLE: Manually Downloading Validator Snapshots\nDESCRIPTION: Demonstrates how to manually download full and incremental snapshots from a known validator using wget.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwget --trust-server-names http://139.178.68.207:80/snapshot.tar.bz2\nwget --trust-server-names http://139.178.68.207:80/incremental-snapshot.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Deriving a Stake Account Address in Solana CLI\nDESCRIPTION: Generates a derived stake account address from a base public key and a seed string. Useful for previewing what address will be created when using the --seed option.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-address-with-seed --from <PUBKEY> <SEED_STRING> STAKE\n```\n\n----------------------------------------\n\nTITLE: Signing Off-Chain Messages with Custom Version\nDESCRIPTION: Command for signing an off-chain message with a specified version instead of the default version 0. The version affects the message format and compatibility options.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message -k <KEYPAIR> --version <VERSION> <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction Success in Solana CLI\nDESCRIPTION: Check Bob's balance and Alice's nonce account to confirm successful transaction and nonce advancement.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance -k bob.json\nsolana nonce-account nonce.json\n```\n\n----------------------------------------\n\nTITLE: Deriving Public Key from Seed Phrase\nDESCRIPTION: Derives a public key from a seed phrase using the prompt URI scheme\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt://\n```\n\n----------------------------------------\n\nTITLE: Displaying Agave Validator Help Information\nDESCRIPTION: Shows how to use the --help flag with the agave-validator command to display available flags and subcommands.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator --help\n```\n\n----------------------------------------\n\nTITLE: Creating Accounts for Durable Nonce Example in Solana CLI\nDESCRIPTION: Generate new keypairs for Alice, Alice's nonce account, and Bob using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o alice.json\nsolana-keygen new -o nonce.json\nsolana-keygen new -o bob.json\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Client\nDESCRIPTION: Command to start the benchmark client for testing transaction processing.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./multinode-demo/bench-tps.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Runtime Features Status\nDESCRIPTION: Displays the status of all runtime features in the local test validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana feature status -ul\n```\n\n----------------------------------------\n\nTITLE: Setting Devnet URL Configuration\nDESCRIPTION: Configures the Solana CLI to use the Devnet API endpoint.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Transition Script for Active Validator\nDESCRIPTION: Script to execute on the active validator during transition. It waits for a restart window, changes identity to the unstaked one, updates the symbolic link, and copies the tower file to the inactive validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# example script of the above steps - change specifics such as user / IP / ledger path\nagave-validator -l /mnt/ledger wait-for-restart-window --min-idle-time 2 --skip-new-snapshot-check\nagave-validator -l /mnt/ledger set-identity /home/sol/unstaked-identity.json\nln -sf /home/sol/unstaked-identity.json /home/sol/identity.json\nscp /mnt/ledger/tower-1_9-$(solana-keygen pubkey /home/sol/staked-identity.json).bin <user>@<IP>/mnt/ledger\n```\n\n----------------------------------------\n\nTITLE: Publishing Validator Info using Solana CLI\nDESCRIPTION: Command to publish validator information to the Solana blockchain. It requires the validator's keypair and allows for additional optional arguments to specify details like website and icon URL.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-info.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info publish --keypair ~/validator-keypair.json <VALIDATOR_INFO_ARGS> <VALIDATOR_NAME>\n```\n\n----------------------------------------\n\nTITLE: Signing Off-Chain Messages with Ledger Hardware Wallet\nDESCRIPTION: Command for signing an off-chain message using a Ledger hardware wallet. Requires Ledger running firmware and Solana Ledger App version 1.3.0 or later.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message -k usb://ledger <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: MacOS Binary Extraction\nDESCRIPTION: Commands to extract and set up Solana binaries on MacOS systems.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntar jxf solana-release-x86_64-apple-darwin.tar.bz2\ncd solana-release/\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Setting Mainnet Beta URL Configuration\nDESCRIPTION: Configures the Solana CLI to use the Mainnet Beta API endpoint.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.mainnet-beta.solana.com\n```\n\n----------------------------------------\n\nTITLE: Transition Script for Inactive Validator\nDESCRIPTION: Script to execute on the inactive validator during transition. It sets the identity to the staked identity (requiring the tower file) and updates the symbolic link accordingly.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# example script of the above steps\nagave-validator -l /mnt/ledger set-identity --require-tower /home/sol/staked-identity.json\nln -sf /home/sol/staked-identity.json /home/sol/identity.json\n```\n\n----------------------------------------\n\nTITLE: Creating Paper Wallet for Validator Identity\nDESCRIPTION: Generates a seed phrase for validator identity instead of storing the keypair on disk, which can be more secure for critical keys.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-outfile\n```\n\n----------------------------------------\n\nTITLE: Increasing File Limits in Security Configuration\nDESCRIPTION: Sets the open file limits for all users to accommodate the high number of connections required by Solana validators.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"cat >/etc/security/limits.d/90-solana-nofiles.conf <<EOF\n# Increase process file descriptor count limit\n* - nofile 1000000\nEOF\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Keypair for Solana CLI\nDESCRIPTION: Configures the Solana CLI to use the validator's keypair for all following commands, simplifying subsequent operations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --keypair ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands to install required system dependencies on Ubuntu Linux including SSL libraries, package configuration tools, and protocol buffers.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler libclang-dev\n```\n\n----------------------------------------\n\nTITLE: Listing RocksDB Column Families in Solana Validator\nDESCRIPTION: Command to list all column families in the validator's RocksDB blockstore database. This is useful for database maintenance and troubleshooting.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-troubleshoot.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nldb --db=<validator ledger path>/rocksdb/ list_column_families\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Solana Validator Service with Systemd\nDESCRIPTION: Command to enable and start the Solana validator systemd service. This ensures the validator starts automatically on system boot and activates it immediately.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now sol\n```\n\n----------------------------------------\n\nTITLE: Displaying Public Key for Paper Wallet\nDESCRIPTION: Demonstrates how to display the public key (wallet address) for a Paper Wallet using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/intro.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt://\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Devnet\nDESCRIPTION: Sets the Solana CLI configuration to use the Devnet API endpoint as the default URL for all CLI commands.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url http://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Rust Nightly\nDESCRIPTION: Command to execute benchmarks using the Rust nightly toolchain, which is required for the benchmark feature.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo +nightly bench\n```\n\n----------------------------------------\n\nTITLE: agave-install info CLI Interface Documentation\nDESCRIPTION: This snippet documents the command-line interface for the agave-install info subcommand, which displays information about the current Solana software installation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nagave-install info\ndisplays information about the current installation\n\nUSAGE:\n    agave-install info [FLAGS]\n\nFLAGS:\n    -h, --help     Prints help information\n    -l, --local    only display local information, don't check the cluster for new updates\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vote Authority Keypair in Solana\nDESCRIPTION: Creates a new vote authority keypair file using the solana-keygen tool.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/new-vote-authority.json\n```\n\n----------------------------------------\n\nTITLE: Advancing Stored Nonce Value in Solana CLI\nDESCRIPTION: Advance the stored nonce value for a given nonce account using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana new-nonce nonce-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Copying Keypair Files to Validator Server\nDESCRIPTION: Securely copies validator and vote account keypair files from a personal computer to the validator server using the scp command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nscp validator-keypair.json sol@<server.hostname>:\nscp vote-account-keypair.json sol@<server.hostname>:\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage Reports\nDESCRIPTION: Commands to generate and view code coverage statistics for the Agave project, which help identify untested parts of the codebase.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/coverage.sh\n$ open target/cov/lcov-local/index.html\n```\n\n----------------------------------------\n\nTITLE: Running a self-updating validator node in Bash\nDESCRIPTION: This snippet shows how to initialize and run a Solana validator node that automatically updates itself when new updates are available.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ agave-install init --pubkey 92DMonmBYXwEMHJ99c9ceRSpAmk9v6i3RdvDdXaVcrfj  # <-- pubkey is obtained from whoever is deploying the updates\n$ export PATH=~/.local/share/agave-install/bin:$PATH\n$ solana-keygen ...  # <-- runs the latest solana-keygen\n$ agave-install run agave-validator ...  # <-- runs a validator, restarting it as necessary when an update is applied\n```\n\n----------------------------------------\n\nTITLE: Viewing Vote Account Information in Solana\nDESCRIPTION: Displays the current vote account information including the vote authority.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana vote-account ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Launching Devnet Validator\nDESCRIPTION: Comprehensive command for starting a Solana validator node on Devnet with security, networking, and performance configurations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator \\\n    --identity validator-keypair.json \\\n    --vote-account vote-account-keypair.json \\\n    --known-validator dv1ZAGvdsz5hHLwWXsVnM94hWf1pjbKVau1QVkaMJ92 \\\n    --known-validator dv2eQHeP4RFrJZ6UeiZWoc3XTtmtZCUKxxCApCDcRNV \\\n    --known-validator dv4ACNkpYPcE3aKmYDqZm9G5EB3J4MRoeE7WNDRBVJB \\\n    --known-validator dv3qDFk1DTF36Z62bNvrCXe9sKATA6xvVy6A798xxAS \\\n    --only-known-rpc \\\n    --ledger ledger \\\n    --rpc-port 8899 \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.devnet.solana.com:8001 \\\n    --entrypoint entrypoint2.devnet.solana.com:8001 \\\n    --entrypoint entrypoint3.devnet.solana.com:8001 \\\n    --entrypoint entrypoint4.devnet.solana.com:8001 \\\n    --entrypoint entrypoint5.devnet.solana.com:8001 \\\n    --expected-genesis-hash EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Verifying Cluster Connection\nDESCRIPTION: Checks that the cluster is accessible by fetching the transaction count, which confirms network connectivity.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana transaction-count\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Development Environment for Agave\nDESCRIPTION: Commands to install the Rust compiler, Cargo package manager, and the rustfmt formatting tool required for Agave development.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://sh.rustup.rs -sSf | sh\n$ source $HOME/.cargo/env\n$ rustup component add rustfmt\n```\n\n----------------------------------------\n\nTITLE: On-chain Update Manifest Structure in Rust\nDESCRIPTION: This code defines the structure of the on-chain update manifest used to advertise new release tarballs. It includes the UpdateManifest and SignedUpdateManifest structs with fields for timestamp, download URL, and verification signatures.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nuse solana_sdk::signature::Signature;\n\n/// Information required to download and apply a given update\npub struct UpdateManifest {\n    pub timestamp_secs: u64, // When the release was deployed in seconds since UNIX EPOCH\n    pub download_url: String, // Download URL to the release tar.bz2\n    pub download_sha256: String, // SHA256 digest of the release tar.bz2 file\n}\n\n/// Data of an Update Manifest program Account.\n#[derive(Serialize, Deserialize, Default, Debug, PartialEq)]\npub struct SignedUpdateManifest {\n    pub manifest: UpdateManifest,\n    pub manifest_signature: Signature,\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing a New Vote Authority in Solana\nDESCRIPTION: Sets a new vote authority for a vote account, which will take effect at the next epoch.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana vote-authorize-voter-checked ~/vote-account-keypair.json ~/validator-keypair.json ~/new-vote-authority.json\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Catch-Up in Solana\nDESCRIPTION: Use the 'catchup' command to monitor your validator's progress in catching up to the cluster. This is essential before delegating stake to ensure the validator can vote successfully.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana catchup ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Testnet\nDESCRIPTION: Commands to set and verify Solana CLI configuration for testnet cluster.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.testnet.solana.com\nsolana config get\n```\n\n----------------------------------------\n\nTITLE: Recipients CSV for SPL Token Distribution\nDESCRIPTION: Example CSV format for distributing SPL tokens showing recipient addresses and raw token amounts without decimals.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT,75400\nC56nwrDVFpPrqwGYsTgQxv1ZraTh81H14PV4RHvZe36s,10000\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr,42100\n7qQPmVAQxEQ5djPDCtiEUrxaPf8wKtLG1m6SB1brejJ1,20000\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Channel Tarball Network\nDESCRIPTION: Command to start a network using the latest pre-built 'edge' channel tarball, which corresponds to the latest version from the 'master' branch. This should be run after the testnet has been created.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ./net.sh start -t edge\n```\n\n----------------------------------------\n\nTITLE: Starting Validator with Multiple Vote Authorities in Agave\nDESCRIPTION: Starts the agave-validator with both old and new vote authority keypairs to ensure smooth transition.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator --authorized-voter ~/validator-keypair.json --authorized-voter ~/new-vote-authority.json\n```\n\n----------------------------------------\n\nTITLE: Checking System Clock Accuracy\nDESCRIPTION: Verifies the system clock accuracy, which is critical for proper participation in Solana's gossip protocol.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntimedatectl\n```\n\n----------------------------------------\n\nTITLE: Updating Vote Account Validator Identity in Solana\nDESCRIPTION: Updates the validator identity in a vote account using the authorized withdrawer keypair.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana vote-update-validator ~/vote-account-keypair.json ~/new-validator-keypair.json ~/authorized_withdrawer.json\n```\n\n----------------------------------------\n\nTITLE: SPL Token Dry Run Calculation Results\nDESCRIPTION: Example output of dry run calculation showing total tokens in CSV, distributed and undistributed amounts, and expected additional balances needed.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nTotal in input_csv: 400 tokens\nDistributed: 147.5 tokens\nUndistributed: 252.5 tokens\nTotal: 400 tokens\nRecipient                                             Expected Balance\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT                    24.600\nC56nwrDVFpPrqwGYsTgQxv1ZraTh81H14PV4RHvZe36s                    90.000\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr                    57.900\n7qQPmVAQxEQ5djPDCtiEUrxaPf8wKtLG1m6SB1brejJ1                    80.000\n```\n\n----------------------------------------\n\nTITLE: Running Network with Public IP Addresses (GCE)\nDESCRIPTION: Command to create a network using public IP addresses on Google Cloud Engine (GCE). This avoids using private IP addresses within the same availability zone.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -P ...\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Inactive Non-voting Validator\nDESCRIPTION: Command to create a symbolic link on the inactive validator that points to the unstaked identity. This ensures the standby validator doesn't interfere with the active validator's voting.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nln -sf /home/sol/unstaked-identity.json /home/sol/identity.json\n```\n\n----------------------------------------\n\nTITLE: Deactivating Stake for Solana Validator\nDESCRIPTION: Deactivate the stake delegated to your validator before detaching it from the cluster. This initiates the cooldown process, which may take several epochs to complete.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana deactivate-stake ~/validator-stake-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Sysvar via Account Info in Solana\nDESCRIPTION: Shows how to access a sysvar by passing it as an account and deserializing its data during execution. This method requires the sysvar account to be passed to the program and specified in the Instruction.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/runtime/sysvars.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet clock_sysvar_info = next_account_info(account_info_iter)?;\nlet clock = Clock::from_account_info(&clock_sysvar_info)?\n```\n\n----------------------------------------\n\nTITLE: Distributing Tokens Using CLI Command\nDESCRIPTION: Command to distribute tokens to recipients listed in a CSV file. Uses the specified keypair for the source account and fee payer.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-tokens --from <KEYPAIR> --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Metrics Validation Commands\nDESCRIPTION: Script to validate database and metrics environment configuration setup.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./scripts/\nsource  ./configure-metrics.sh\n  INFLUX_HOST=https://internal-metrics.solana.com:8086\n  INFLUX_DATABASE=testnet-dev-solana\n  INFLUX_USERNAME=solana\n  INFLUX_PASSWORD=********\n./metrics-write-datapoint.sh \"testnet-deploy net-create-begin=1\"\n```\n\n----------------------------------------\n\nTITLE: Dropping RocksDB Column Family in Solana Validator\nDESCRIPTION: Command to remove a specific column family from the validator's RocksDB blockstore. This should only be used with guidance from the Solana team as it can affect validator operation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-troubleshoot.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nldb --db=<validator ledger path>/rocksdb drop_column_family <column family name>\n```\n\n----------------------------------------\n\nTITLE: Splitting a Stake Account in Solana CLI\nDESCRIPTION: Divides an existing stake account into two by creating a new stake account with a portion of the tokens. Useful for delegating to multiple validators when stake is locked or cooling down.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsolana split-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <NEW_STAKE_ACCOUNT_KEYPAIR> <AMOUNT> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Verifying Solana CLI Configuration in Bash\nDESCRIPTION: Checks the genesis hash to confirm the CLI is correctly configured for the local test validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana genesis-hash\n```\n\n----------------------------------------\n\nTITLE: Viewing Distribution Results\nDESCRIPTION: Example output showing expected token balances for recipients after executing a distribution command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRecipient                                     Expected Balance\n3ihfUy1n9gaqihM5bJCiTAGLgWc5zo3DqVUS6T736NLM  42\nUKUcTXgbeTYh65RaVV5gSf6xBHevqHvAXMo3e8Q6np8k  43\n```\n\n----------------------------------------\n\nTITLE: Running Developer Testnet Client\nDESCRIPTION: Command to connect to the public devnet and run benchmark tests.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./multinode-demo/bench-tps.sh --entrypoint entrypoint.devnet.solana.com:8001 --faucet api.devnet.solana.com:9900 --duration 60 --tx_count 50\n```\n\n----------------------------------------\n\nTITLE: Switching to Sol User\nDESCRIPTION: Switches to the sol user account on the validator server to perform operations with the correct permissions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsu - sol\n```\n\n----------------------------------------\n\nTITLE: Offline Signing a Payment Transaction with Solana CLI\nDESCRIPTION: Demonstrates how to sign a transfer transaction offline by using the --sign-only and --blockhash flags. This command generates the pubkey/signature pairs without submitting the transaction to the network.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --sign-only --blockhash 5Tx8F3jgSHx21CbtjwmdaKPLM5tWmreWAnPrbqHomSJF \\\n    recipient-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Creating New Solana Keypair\nDESCRIPTION: Command to generate a new Solana keypair without passphrase or output file\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-passphrase --no-outfile\n```\n\n----------------------------------------\n\nTITLE: Dry Run Calculation Results\nDESCRIPTION: Example output showing expected token balances required to reach desired distribution amounts based on existing balances.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nRecipient                                     Expected Balance\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv  10\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr  42\n```\n\n----------------------------------------\n\nTITLE: Setting Up Genesis Ledger\nDESCRIPTION: Command to initialize the network with a genesis ledger.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./multinode-demo/setup.sh\n```\n\n----------------------------------------\n\nTITLE: Opening Validator Script for Editing\nDESCRIPTION: Opens the validator.sh file using the nano text editor to add configuration settings.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnano /home/sol/bin/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Testnet URL Configuration\nDESCRIPTION: Configures the Solana CLI to use the Testnet API endpoint.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.testnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Funding Alice's Account in Solana CLI\nDESCRIPTION: Airdrop SOL to Alice's account for funding the nonce account and transaction.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop -k alice.json 1\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Transaction Log\nDESCRIPTION: Example transaction log after completing token distributions, showing recipient addresses, amounts, dates, and transaction signatures.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount,signature\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv,70.0,2020-09-15T23:29:26.879747Z,UB168XhBhecxzeD1w2ZRUhwTHpPSqv2WNh8NrZHqz1F2EqxxbSW6iFfVtsg3HkU9NX2cD7R92D8VRLSyArZ9xKQ\n3ihfUy1n9gaqihM5bJCiTAGLgWc5zo3DqVUS6T736NLM,42.0,2020-09-15T23:31:50.264241Z,53AVNEVpQBteJBRAKp6naxXsgESDjqe1ge9Dg2HeCSpYWTuGTLqHrBpkHTnpvPJURNgKWxkJfihuRa5STVRjL2hy\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT,43.0,2020-09-15T23:33:53.680821Z,4XsMfLx9D2ZxVpdJ5xdkV2w4X4SKEQ5zbQhcH4NcRwgZDkdRNiZjvnMFaWaWHUh5eF1LwFPpQdjn6mzSsiCVj3L7\n```\n\n----------------------------------------\n\nTITLE: Starting CUDA-enabled Validator\nDESCRIPTION: Commands to fetch performance libraries and start a CUDA-enabled validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./fetch-perf-libs.sh\nSOLANA_CUDA=1 ./multinode-demo/bootstrap-validator.sh\nSOLANA_CUDA=1 ./multinode-demo/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Getting Validator Public Key\nDESCRIPTION: Retrieves the public key of the validator from the keypair file for use in verification steps.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Checking Solana CLI Version\nDESCRIPTION: This command displays the version of the locally installed Solana CLI. Knowing the version is important for ensuring compatibility with the cluster.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana --version\n```\n\n----------------------------------------\n\nTITLE: Distributing Stake Accounts Using CLI\nDESCRIPTION: Command to distribute stake accounts by splitting them from existing ones, preserving any lockup or custodian settings of the original.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-stake --stake-account-address <ACCOUNT_ADDRESS> \\\n    --input-csv <ALLOCATIONS_CSV> \\\n    --stake-authority <KEYPAIR> --withdraw-authority <KEYPAIR> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Recipients CSV for Fixed Amount Transfers\nDESCRIPTION: CSV format for distributing a fixed amount of tokens to multiple recipients, containing only recipient addresses.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nrecipient\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora\nDESCRIPTION: Commands to install required system dependencies on Fedora Linux including OpenSSL development libraries, system libraries, and build tools.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install openssl-devel systemd-devel pkg-config zlib-devel llvm clang cmake make protobuf-devel protobuf-compiler perl-core libclang-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring a Testnet Agave RPC Node with Bash Script\nDESCRIPTION: Sample bash script for running an Agave RPC node on testnet. This configuration enables full RPC API, disables voting, sets a private RPC endpoint, and configures various other parameters necessary for a properly functioning RPC node.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-an-rpc-node.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nexec agave-validator \\\n    --identity /home/sol/validator-keypair.json \\\n    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\\n    --known-validator dDzy5SR3AXdYWVqbDEkVFdvSPCtS9ihF5kJkHCtXoFs \\\n    --known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \\\n    --known-validator 7XSY3MrYnK8vq693Rju17bbPkCN3Z7KvvfvJx4kdrsSY \\\n    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \\\n    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \\\n    --only-known-rpc \\\n    --full-rpc-api \\\n    --no-voting \\\n    --ledger /mnt/ledger \\\n    --accounts /mnt/accounts \\\n    --log /home/sol/solana-rpc.log \\\n    --rpc-port 8899 \\\n    --rpc-bind-address 0.0.0.0 \\\n    --private-rpc \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.testnet.solana.com:8001 \\\n    --entrypoint entrypoint2.testnet.solana.com:8001 \\\n    --entrypoint entrypoint3.testnet.solana.com:8001 \\\n    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Status in Network\nDESCRIPTION: Filters the solana validators output to show information about the validator's participation, voting status, and stake after activation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsolana validators | grep <pubkey>\n```\n\n----------------------------------------\n\nTITLE: Distributing Fixed Amount Tokens Using CLI\nDESCRIPTION: Command to distribute a fixed amount of tokens to all recipients listed in a CSV file using the specified keypair.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-tokens --transfer-amount 10 --from <KEYPAIR> --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cherry-Pick Workflow for Dependent Changes in Git\nDESCRIPTION: This snippet demonstrates the recommended Git workflow for handling dependent changes. It shows how to commit a fix, create a new branch, cherry-pick the fix, and submit it as a separate PR while continuing work on the original branch.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -am \"Fix foo, needed by bar\"\n$ git checkout master\n$ git checkout -b fix-foo\n$ git cherry-pick fix-bar\n$ git push --set-upstream origin fix-foo\n```\n\n----------------------------------------\n\nTITLE: Building Agave in Debug Mode\nDESCRIPTION: Command to build the Agave project in debug mode, which is suitable for development but not for running production validators.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cargo build\n```\n\n----------------------------------------\n\nTITLE: Launching Testnet Validator\nDESCRIPTION: Comprehensive command for starting a Solana validator node on Testnet with security, networking, and performance configurations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator \\\n    --identity validator-keypair.json \\\n    --vote-account vote-account-keypair.json \\\n    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\\n    --known-validator dDzy5SR3AXdYWVqbDEkVFdvSPCtS9ihF5kJkHCtXoFs \\\n    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \\\n    --known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \\\n    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \\\n    --only-known-rpc \\\n    --ledger ledger \\\n    --rpc-port 8899 \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.testnet.solana.com:8001 \\\n    --entrypoint entrypoint2.testnet.solana.com:8001 \\\n    --entrypoint entrypoint3.testnet.solana.com:8001 \\\n    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Info using Solana CLI\nDESCRIPTION: Command to retrieve published validator information from the Solana blockchain.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-info.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info get\n```\n\n----------------------------------------\n\nTITLE: Checking SPL Token Balances with Expected Distribution\nDESCRIPTION: Command to check current SPL token balances against expected distribution amounts from a CSV file.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens balances --mint <ADDRESS> --input-csv <RECIPIENTS_CSV>\n```\n\n----------------------------------------\n\nTITLE: Rebasing to Reorder Commits in Git\nDESCRIPTION: This snippet shows how to use interactive rebase to reorder commits, specifically moving a dependency fix to the top of the commit history to make the PR more logical.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout fix-bar\n$ git rebase -i master <Move fix-foo to top>\n```\n\n----------------------------------------\n\nTITLE: Disabling PostgreSQL Account History Trigger\nDESCRIPTION: SQL command to drop the account_update_trigger, which disables the historical account data capture feature.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDROP TRIGGER account_update_trigger ON account;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mainnet Beta Metrics Environment\nDESCRIPTION: Sets up metrics configuration for the Solana Mainnet Beta environment with specific host, database, and credentials.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport SOLANA_METRICS_CONFIG=\"host=https://metrics.solana.com:8086,db=mainnet-beta,u=mainnet-beta_write,p=password\"\n```\n\n----------------------------------------\n\nTITLE: Querying Solana JSON-RPC for Network Information\nDESCRIPTION: Use curl to make JSON-RPC requests to a Solana node. This example demonstrates how to request epoch information, which is useful for monitoring validator participation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getEpochInfo\"}' http://localhost:8899\n```\n\n----------------------------------------\n\nTITLE: MacOS Dependencies Installation\nDESCRIPTION: Command to install required build dependencies on MacOS using Homebrew.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config libudev protobuf llvm coreutils\n```\n\n----------------------------------------\n\nTITLE: Checking Out Latest Master Branch Commit\nDESCRIPTION: Git commands for fetching the latest updates from all remotes and checking out the most recent commit on the upstream master branch, used before creating a new release branch.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/RELEASE.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all\\ngit checkout upstream/master\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Schema Creation Script\nDESCRIPTION: Command to execute the create_schema.sql script to set up the database schema. This connects to the PostgreSQL server and runs the script to create the necessary tables and objects.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npsql -U solana -p 5433 -h 10.138.0.9 -w -d solana -f create_schema.sql\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Geyser Plugin Configuration Example\nDESCRIPTION: Example JSON5 configuration file for the PostgreSQL Geyser plugin, showing connection parameters, performance settings, and account selection options.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"libpath\": \"/solana/target/release/libsolana_geyser_plugin_postgres.so\",\n\t\"host\": \"postgres-server\",\n\t\"user\": \"solana\",\n\t\"port\": 5433,\n\t\"threads\": 20,\n\t\"batch_size\": 20,\n\t\"panic_on_db_errors\": true,\n\t\"accounts_selector\" : {\n\t\t\"accounts\" : [\"*\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vanity Keypair with Mnemonic Recovery\nDESCRIPTION: Creates a vanity keypair with a seed phrase for recovery, which is more secure but slower to generate than standard vanity keypairs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen grind --use-mnemonic --starts-with e1v1s:1\n```\n\n----------------------------------------\n\nTITLE: Running Solana Beta Docker Image with bash\nDESCRIPTION: Command to run the latest beta version of the Solana Docker image with port 8899 exposed for JSON RPC communication and appropriate file limits set.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docker-solana/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -p 8899:8899 --ulimit nofile=1000000 solanalabs/solana:beta\n```\n\n----------------------------------------\n\nTITLE: Solana CLI Node Interaction\nDESCRIPTION: Commands for interacting with test network nodes using Solana CLI, including airdrop and feature management.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# source ip list  use as ${validatorIpList[4]}\nsource net/config/config\n\n# airdrop\n../target/release/solana -u http://${validatorIpList[1]}:8899 airdrop 1\n\n# check feature\n../target/release/solana -u http://${validatorIpList[1]}:8899 feature status\n\n# activate a feature\n../target/release/solana -u http://${validatorIpList[1]}:8899 feature activate <path to .json>\n\n# check the stakes on current validators\n../target/release/solana --url http://${validatorIpList[0]}:8899 validators\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Local Cluster in Bash\nDESCRIPTION: Sets the default URL for Solana CLI tools to target the local test validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/test-validator.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url http://127.0.0.1:8899\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database\nDESCRIPTION: Command to create a new database named 'solana' using PostgreSQL port 5433. The command runs as the postgres system user.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createdb solana -p 5433\n```\n\n----------------------------------------\n\nTITLE: Viewing Solana Leader Schedule\nDESCRIPTION: Demonstrates how to view the full leader schedule for an epoch using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana leader-schedule\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Trigger for Account History Auditing\nDESCRIPTION: SQL code defining a trigger function and trigger to capture historical account data. This automatically inserts data into account_audit table when records in the account table are updated or deleted.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION audit_account_update() RETURNS trigger AS $audit_account_update$\n    BEGIN\n\t\tINSERT INTO account_audit (pubkey, owner, lamports, slot, executable, rent_epoch, data, write_version, updated_on)\n            VALUES (OLD.pubkey, OLD.owner, OLD.lamports, OLD.slot,\n                    OLD.executable, OLD.rent_epoch, OLD.data, OLD.write_version, OLD.updated_on);\n        RETURN NEW;\n    END;\n\n$audit_account_update$ LANGUAGE plpgsql;\n\nCREATE TRIGGER account_update_trigger AFTER UPDATE OR DELETE ON account\n    FOR EACH ROW EXECUTE PROCEDURE audit_account_update();\n```\n\n----------------------------------------\n\nTITLE: Inducing Network Partition\nDESCRIPTION: Command to induce a network partition using a specified configuration file. This is used for partition testing scenarios.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ net.sh netem --config-file <config file path>\n```\n\n----------------------------------------\n\nTITLE: Creating Alice's Nonce Account in Solana CLI\nDESCRIPTION: Create a nonce account for Alice using her keypair and specifying initial balance.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-nonce-account -k alice.json nonce.json 0.1\n```\n\n----------------------------------------\n\nTITLE: Socket Tag Constants for TVU Communication in Solana\nDESCRIPTION: Defines socket tag constants used to identify different socket types in the ContactInfo structure. These tags distinguish between UDP and QUIC socket entries for the Transaction Validation Unit.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/tvu.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nconst SOCKET_TAG_TVU: u8 = 10;       // For UDP\nconst SOCKET_TAG_TVU_QUIC: u8 = 11;  // For QUIC\n```\n\n----------------------------------------\n\nTITLE: Fetching pre-built installer from GitHub release in Bash\nDESCRIPTION: This snippet demonstrates how to manually download the agave-install-init binary from a specific GitHub release, make it executable, and run it.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -o agave-install-init https://github.com/solana-labs/solana/releases/download/v1.0.0/agave-install-init-x86_64-apple-darwin\n$ chmod +x ./agave-install-init\n$ ./agave-install-init --help\n```\n\n----------------------------------------\n\nTITLE: Using Validator Accounts File Flag in Solana Genesis\nDESCRIPTION: Command line flag for specifying a validator accounts file in Solana genesis. This simplifies the process of creating validator stakes with different distributions without requiring manual serialization of account state.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/genesis/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--validator-accounts-file <PATH_TO_VALIDATOR_ACCOUNTS_YAML>\n```\n\n----------------------------------------\n\nTITLE: Automated Test Network Setup\nDESCRIPTION: Script for automated creation and configuration of a test network with custom machine types and metrics.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Create the testnet with reasonable node sizes for a small test\n# This particular one will have 7 nodes: 1 bootstrap validator, 4 regular validators, and 2 clients\n./gce.sh create -n4 -c2 --custom-machine-type \"--machine-type n1-standard-16\" --client-machine-type \"--machine-type n1-standard-4\"\n# Patch metrics config from env into config file\n./init-metrics.sh -e\n# Enable metrics and start the network (this will also build software)\nRUST_LOG=info ./net.sh start  -c bench-tps=2=\"--tx_count 25000\"\n```\n\n----------------------------------------\n\nTITLE: Offline Signing Session 2 for Multi-Session Transfer\nDESCRIPTION: Second part of a multi-session signing process where the sender signs the transaction. This shows signing by the second required party while marking the fee payer as absent.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer Fdri24WUGtrCXZ55nXiewAj6RM18hRHPGAjZk3o6vBut 10 \\\n    --blockhash 7ALDjLv56a8f6sH6upAZALQKkXyjAwwENH9GomyM8Dbc \\\n    --sign-only \\\n    --keypair from.json \\\n    --fee-payer 3bo5YiRagwmRikuH6H1d2gkKef5nFZXE3gJeoHxJbPjy\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links in Markdown for Solana Documentation\nDESCRIPTION: This code snippet shows how to create an internal link in Markdown, referencing the leader rotation algorithm within the Solana documentation. It demonstrates the syntax for linking to other sections or pages within the same documentation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/synchronization.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[leader rotation algorithm](./leader-rotation.md)\n```\n\n----------------------------------------\n\nTITLE: Building Solana Release Version\nDESCRIPTION: Commands for building Solana in release mode and setting the build profile environment variable.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\nexport CARGO_BUILD_PROFILE=release\n```\n\n----------------------------------------\n\nTITLE: Primordial Accounts File Format for Solana Genesis\nDESCRIPTION: YAML format for the primordial accounts file which enables adding accounts with custom balances, owners, data, and executable status. The data field must be BASE64 encoded and can contain vote or stake account information.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/genesis/README.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n<IDENTITY_PUBKEY_0>:\n  balance: <LAMPORTS_0>\n  owner: <OWNER_PUBKEY_0>\n  data: <BAS64_ENCODED_DATA_0>\n  executable: false\n<IDENTITY_PUBKEY_1>:\n  balance: <LAMPORTS_1>\n  owner: <OWNER_PUBKEY_1>\n  data: <BAS64_ENCODED_DATA_1>\n  executable: true\n...\n<IDENTITY_PUBKEY_N>:\n  balance: <LAMPORTS_N>\n  owner: <OWNER_PUBKEY_N>\n  data: <BAS64_ENCODED_DATA_N>\n  executable: true\n```\n\n----------------------------------------\n\nTITLE: Network Partition Configuration\nDESCRIPTION: JSON configuration for creating three almost equal network partitions with specified interconnect properties. This defines the partition sizes and network conditions between them.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"partitions\":[\n         34,\n         33,\n         33\n      ],\n      \"interconnects\":[\n         {\n            \"a\":0,\n            \"b\":1,\n            \"config\":\"loss 15% delay 25ms\"\n         },\n         {\n            \"a\":1,\n            \"b\":0,\n            \"config\":\"loss 15% delay 25ms\"\n         },\n         {\n            \"a\":0,\n            \"b\":2,\n            \"config\":\"loss 10% delay 15ms\"\n         },\n         {\n            \"a\":2,\n            \"b\":0,\n            \"config\":\"loss 10% delay 15ms\"\n         },\n         {\n            \"a\":2,\n            \"b\":1,\n            \"config\":\"loss 5% delay 5ms\"\n         },\n         {\n            \"a\":1,\n            \"b\":2,\n            \"config\":\"loss 5% delay 5ms\"\n         }\n      ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Off-Chain Messages with Specified Keypair\nDESCRIPTION: Command for signing an off-chain message with a specified keypair instead of the default. Uses the -k/--keypair option to specify an alternative signing key.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message -k <KEYPAIR> <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Formatting External Links in Markdown for Solana Documentation\nDESCRIPTION: This code snippet demonstrates how to format and include external links in a Markdown list. It shows how to create bullet points with hyperlinks to additional resources about Proof of History in Solana.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/synchronization.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [water clock analogy](https://medium.com/solana-labs/proof-of-history-explained-by-a-water-clock-e682183417b8)\n- [Proof of History overview](https://medium.com/solana-labs/proof-of-history-a-clock-for-blockchain-cf47a61a9274)\n```\n\n----------------------------------------\n\nTITLE: Downloading Agave Source Code\nDESCRIPTION: Commands to clone the Agave repository from GitHub and change into the project directory.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/anza-xyz/agave.git\n$ cd agave\n```\n\n----------------------------------------\n\nTITLE: Illustrating Fork Structure with Duplicate Slots in Text Format\nDESCRIPTION: ASCII diagram showing how votes are distributed when a duplicate slot is detected and removed from fork choice, demonstrating potential network halting scenarios.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/handle-duplicate-block.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    |-------- 2 (51% voted, then detected this slot was a duplicate and removed this slot from fork choice)\n0---|\n    |---------- 6 (39%)\n\n```\n\n----------------------------------------\n\nTITLE: Quick Start Test Network Deployment\nDESCRIPTION: Complete sequence of commands to create, configure, deploy, and cleanup a test network on GCE.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# In Agave repo\ncd net/\n\n# Create a GCE testnet with 4 additional validator nodes (beyond the bootstrap node) and 1 client (billing starts here)\n./gce.sh create -n 4 -c 1\n\n# Configure the metrics database and validate credentials using environment variable `SOLANA_METRICS_CONFIG` (skip this if you are not using metrics)\n./init-metrics.sh -c testnet-dev-${USER} ${USER}\n\n# Deploy the network from the local workspace and start processes on all nodes including bench-tps on the client node\nRUST_LOG=info ./net.sh start\n\n# Show a help to ssh into any testnet node to access logs/etc\n./ssh.sh\n\n# Stop running processes on all nodes\n./net.sh stop\n\n# Dispose of the network (billing stops here)\n./gce.sh delete\n```\n\n----------------------------------------\n\nTITLE: Running Solana Validator Docs Build Script with Elevated Permissions\nDESCRIPTION: Executes the build script with sudo to resolve potential permission issues with Docker. This can be used if encountering Docker socket permission errors.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./build.sh\n```\n\n----------------------------------------\n\nTITLE: Representing Time-Divided Ledger in Markdown Table\nDESCRIPTION: This markdown table shows how the PoH tick count can be viewed as a time-divided ledger. It illustrates leader slots, data entries, and ticks since the previous slot, providing a different perspective on the fork structure.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/fork-generation.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| leader slot      | L1  | L2  | L3  | L4  | L5  |\n| :--------------- | :-- | :-- | :-- | :-- | :-- |\n| data             | E1  | E2  | E3  | E4  | E5  |\n| ticks since prev |     |     |     | x   | xx  |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Optimistic Slots in Agave 1.14+\nDESCRIPTION: This command outputs the latest optimistically confirmed slot observed by the validator using the agave-ledger-tool.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nagave-ledger-tool -l ledger latest-optimistic-slots\n```\n\n----------------------------------------\n\nTITLE: Example of Ethereum Transaction with Event Log\nDESCRIPTION: This JSON object represents an Ethereum transaction that includes an event log. It shows the structure of a transaction receipt with topics and data fields for an emitted event.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/log_data.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tx\": {\n    \"nonce\": \"0x2\",\n    \"gasPrice\": \"0xf224d4a00\",\n    \"gas\": \"0xc350\",\n    \"to\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    \"value\": \"0x0\",\n    \"input\": \"0xa9059cbb000000000000000000000000a12431d0b9db640034b0cdfceef9cce161e62be40000000000000000000000000000000000000000000000a030dcebbd2f4c0000\",\n    \"hash\": \"0x98a67f0a35ebc0ac068acf0885d38419c632ffa4354e96641d6d5103a7681910\",\n    \"blockNumber\": \"0xc96431\",\n    \"from\": \"0x82f890D638478d211eF2208f3c1466B5Abf83551\",\n    \"transactionIndex\": \"0xe1\"\n  },\n  \"receipt\": {\n    \"gasUsed\": \"0x74d2\",\n    \"status\": \"0x1\",\n    \"logs\": [\n      {\n        \"address\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        \"topics\": [\n          \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          \"0x00000000000000000000000082f890d638478d211ef2208f3c1466b5abf83551\",\n          \"0x000000000000000000000000a12431d0b9db640034b0cdfceef9cce161e62be4\"\n        ],\n        \"data\": \"0x0000000000000000000000000000000000000000000000a030dcebbd2f4c0000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GCP Project Configuration\nDESCRIPTION: Commands to authenticate and set up Google Cloud Project for test network deployment.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud auth login\ngcloud config set project principal-lane-200702\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Solana Validator Docs with npm\nDESCRIPTION: Installs the necessary dependencies for the Solana validator documentation site using npm. This command should be run from within the docs directory after cloning the repository.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pruning with Super Majority Root at 3\nDESCRIPTION: Diagram showing the pruned blockstore after voting on slot 10 (which roots slot 5) and the super majority root (SMR) advances to slot 3.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/managing-forks.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n             12 - 13\n            /\n       3 - 5 ROOT\n      SMR   \\\n             7 - 9 - 10 - 11\n```\n\n----------------------------------------\n\nTITLE: Agave Validator Startup Script Configuration\nDESCRIPTION: Bash script with configuration parameters for running an Agave validator node on the testnet, including identity keys, networking settings, and storage locations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nexec agave-validator \\\n    --identity /home/sol/validator-keypair.json \\\n    --vote-account /home/sol/vote-account-keypair.json \\\n    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\\n    --known-validator 7XSY3MrYnK8vq693Rju17bbPkCN3Z7KvvfvJx4kdrsSY \\\n    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \\\n    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \\\n    --only-known-rpc \\\n    --log /home/sol/agave-validator.log \\\n    --ledger /mnt/ledger \\\n    --accounts /mnt/accounts \\\n    --rpc-port 8899 \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.testnet.solana.com:8001 \\\n    --entrypoint entrypoint2.testnet.solana.com:8001 \\\n    --entrypoint entrypoint3.testnet.solana.com:8001 \\\n    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Rendering TeX with KaTeX Direct DOM API\nDESCRIPTION: JavaScript code that demonstrates how to use KaTeX's render API to display a TeX expression directly into a DOM element. The throwOnError option makes invalid inputs display as red text with an error message.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/static/katex/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nkatex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element, {\n    throwOnError: false\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Faucet Service\nDESCRIPTION: Command to start the faucet service for distributing test tokens.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./multinode-demo/faucet.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Legacy Raw Keypair\nDESCRIPTION: Retrieves the public key of a legacy raw keypair using the ASK keyword\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ASK\n```\n\n----------------------------------------\n\nTITLE: Visualizing Final Pruning After Voting on Slot 11\nDESCRIPTION: Diagram showing the final state of the blockstore after voting on slot 11, which roots slot 7 and results in pruning the remaining fork.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/managing-forks.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n       3 - 5 - 7 - 9 - 10 - 11\n      SMR     ROOT\n```\n\n----------------------------------------\n\nTITLE: Verifying Validator Version from Logs\nDESCRIPTION: Shows how to use grep to verify the version of the validator after a restart by checking the log file.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrep -B1 'Starting validator with' <path/to/logfile>\n```\n\n----------------------------------------\n\nTITLE: Processing Completed Transactions in Rust Scheduler\nDESCRIPTION: This code snippet shows how the scheduler handles completed transactions, unlocking accounts and potentially unblocking other transactions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-11_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet mut unlocked_accounts = vec![];\n// First remove all the locks from the tracking list\nfor locked_account in transaction_accounts {\n    if self.locked_accounts.remove_reference(locked_account) {\n        unlocked_accounts.push(locked_account.key());\n    }\n}\n\n// Check if freeing up these accounts has now allowed any new\n// blocked transactions to run\nfor account_key in unlocked_accounts {\n    if let Some(blocked_transaction_queue) = self.blocked_transaction_queues_by_accounts.get(account_key) {\n        // Check if the transaction blocking this queue can be run now, thereby unblocking this queue\n        if blocked_transaction_queue.highest_priority_blocked_transaction.can_get_locks() {\n            // Schedule the transaction to the banking thread\n            banking_thread_channel.send(blocked_transaction_queue.highest_priority_blocked_transaction);\n\n            return;\n        }\n    }\n\n    // If no higher priority transactions were unblocked, continue scheduling from the main queue,\n    // described in the main loop section above\n    find_next_highest_transaction();\n}\n```\n\n----------------------------------------\n\nTITLE: Building CLI Usage Documentation for Solana Validator Docs\nDESCRIPTION: Generates the CLI usage documentation specifically, which is required for the local development server to run properly. This script can be used if the Rust toolchain is installed locally.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./build-cli-usage.sh\n```\n\n----------------------------------------\n\nTITLE: Generating New Solana Keypair\nDESCRIPTION: Creates a new keypair without saving to file system, generating a random seed phrase and displaying the public key\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/paper.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-outfile\n```\n\n----------------------------------------\n\nTITLE: FEC Rate Calculation Example\nDESCRIPTION: Demonstrates the calculation of Forward Error Correction (FEC) rates for different scenarios with varying packet loss rates and network parameters.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/turbine-block-propagation.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNetwork packet loss rate is 15%.\n50k tps network generates 6400 shreds per second.\nFEC rate increases the total shreds per block by the FEC ratio.\n\nWith a FEC rate: 16:4\nG = 8000\nP = 1 - 0.85 * 0.85 = 1 - 0.7225 = 0.2775\nS = 1 - (SUM of i=0 -> 4 for binomial(prob_failure = 0.2775, trials = 20, failures = i)) = 0.689414\nB = (1 - 0.689) ^ (8000 / 20) = 10^-203\n\nWith FEC rate of 16:16\nG = 12800\nS = 1 - (SUM of i=0 -> 16 for binomial(prob_failure = 0.2775, trials = 32, failures = i)) = 0.002132\nB = (1 - 0.002132) ^ (12800 / 32) = 0.42583\n\nWith FEC rate of 32:32\nG = 12800\nS = 1 - (SUM of i=0 -> 32 for binomial(prob_failure = 0.2775, trials = 64, failures = i)) = 0.000048\nB = (1 - 0.000048) ^ (12800 / 64) = 0.99045\n```\n\n----------------------------------------\n\nTITLE: Cloning Solana Repository\nDESCRIPTION: Initial setup steps to clone the Solana repository and checkout the latest release tag.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/solana-labs/solana.git\ncd solana\n```\n\n----------------------------------------\n\nTITLE: Implementing Large Invalid Gossip Nodes Test in Rust\nDESCRIPTION: This comprehensive test function demonstrates how to test cluster resilience against floods of invalid advertised gossip nodes. It includes cluster discovery, poisoning the cluster with invalid nodes, refreshing the active set, and verifying transactions still work.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn test_large_invalid_gossip_nodes(\n    entry_point_info: &ContactInfo,\n    funding_keypair: &Keypair,\n    num_nodes: usize,\n) {\n    let cluster = discover_nodes(&entry_point_info, num_nodes);\n\n    // Poison the cluster.\n    let client = create_client(entry_point_info.client_facing_addr(), VALIDATOR_PORT_RANGE);\n    for _ in 0..(num_nodes * 100) {\n        client.gossip_push(\n            cluster_info::invalid_contact_info()\n        );\n    }\n    sleep(Durration::from_millis(1000));\n\n    // Force refresh of the active set.\n    for node in &cluster {\n        let client = create_client(node.client_facing_addr(), VALIDATOR_PORT_RANGE);\n        client.gossip_refresh_active_set();\n    }\n\n    // Verify that spends still work.\n    verify_spends(&cluster);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Solana Validator Docs\nDESCRIPTION: Starts the Docusaurus local development server for the Solana validator documentation site. This command opens a browser window and allows for live updates of most changes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Full Example of Sending SOL with Ledger in Solana CLI\nDESCRIPTION: This snippet shows a complete workflow of viewing an address, checking its balance, and sending 1 SOL to another address using a Ledger device. It includes the approval process on the Ledger and displays the transaction signature.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~$ solana-keygen pubkey usb://ledger?key=42\nCjeqzArkZt6xwdnZ9NZSf8D1CNJN1rjeFiyd8q7iLWAV\n\n~$ solana balance CjeqzArkZt6xwdnZ9NZSf8D1CNJN1rjeFiyd8q7iLWAV\n1.000005 SOL\n\n~$ solana transfer 7cvkjYAkUYs4W8XcXsca7cBrEGFeSUjeZmKoNBvEwyri 1 --keypair usb://ledger?key=42\nWaiting for your approval on Ledger hardware wallet usb://ledger/2JT2Xvy6T8hSmT8g6WdeDbHUgoeGdj6bE2VueCZUJmyN\n✅ Approved\n\nSignature: kemu9jDEuPirKNRKiHan7ycybYsZp7pFefAdvWZRq5VRHCLgXTXaFVw3pfh87MQcWX4kQY4TjSBmESrwMApom1V\n```\n\n----------------------------------------\n\nTITLE: Updating BlockCommitment and Stake in Agave Network\nDESCRIPTION: This function updates both the Stake and BlockCommitment for a given ancestor bank. It calls the original stake update function and then increments the commitment array based on the number of confirmations for the vote.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/commitment.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    fn f`(\n        stake: &mut Stake,\n        some_ancestor: &mut BlockCommitment,\n        vote_account: VoteAccount,\n        v: Vote, total_stake: u64\n    ){\n        f(stake, vote_account, v);\n        *some_ancestor.commitment[v.num_confirmations] += vote_account.stake;\n    }\n```\n\n----------------------------------------\n\nTITLE: Preventing Snapshot Download on Restart\nDESCRIPTION: Demonstrates how to add the --no-snapshot-fetch flag to the agave-validator command to prevent downloading a new snapshot on restart.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--no-snapshot-fetch\n```\n\n----------------------------------------\n\nTITLE: Storage Proof Contract Type Definition - ClaimStorageReward\nDESCRIPTION: Contract structure for claiming storage rewards by validators and archivers after successful proof validation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nClaimStorageReward {\n}\nkeys = [validator_keypair or archiver_keypair, validator/archiver_keypairs (unsigned)]\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with KaTeX\nDESCRIPTION: JavaScript example showing how to use KaTeX's renderToString API to generate HTML strings of rendered math expressions for server-side rendering. Returns a span with the katex class containing the rendered expression.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/static/katex/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar html = katex.renderToString(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", {\n    throwOnError: false\n});\n// '<span class=\"katex\">...</span>'\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Keypair URL Format for Hardware Wallets\nDESCRIPTION: Demonstrates the URL format used to uniquely identify a Solana keypair on a connected hardware wallet. The format includes manufacturer, optional wallet ID, and optional derivation path parameters.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/index.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusb://<MANUFACTURER>[/<WALLET_ID>][?key=<DERIVATION_PATH>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Hash Calculation for Epoch Accounts Hash in Solana\nDESCRIPTION: Pseudo code showing how the snapshot hash is calculated depending on whether the slot is within the calculation window. If the slot is in the calculation window, the snapshot hash includes both the accounts hash and epoch accounts hash; otherwise, it's just the accounts hash.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/epoch_accounts_hash.md#2025-04-11_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\nif slot is in calculation window\n    let snapshot hash = hash(accounts hash, epoch accounts hash)\nelse\n    let snapshot hash = accounts hash\nendif\n```\n\n----------------------------------------\n\nTITLE: Building Debug Version with Release Optimizations\nDESCRIPTION: Commands for building Solana with debug symbols while maintaining release optimizations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --profile release-with-debug\nexport CARGO_BUILD_PROFILE=release-with-debug\n```\n\n----------------------------------------\n\nTITLE: Storage Proof Contract Type Definition - ChallengeProofValidation\nDESCRIPTION: Structure for challenging incorrect proof validations, including proof index and hash seed value for verification.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nChallengeProofValidation {\n    proof_index: u64,\n    hash_seed_value: Vec<u8>,\n}\nkeys = [archiver_keypair, validator_keypair]\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Affinity in TOML\nDESCRIPTION: Configuration example for setting core affinity in the thread manager, allowing threads to be pinned to specific CPU cores (cores 16-64 in this example).\nSOURCE: https://github.com/anza-xyz/agave/blob/master/thread-manager/README.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ncore_allocation.DedicatedCoreSet = { min = 16, max = 64 }\n```\n\n----------------------------------------\n\nTITLE: Transferring Solana Tokens\nDESCRIPTION: Command to transfer SOL tokens between wallets with specified fee payer\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Deploying a new update to a Solana cluster in Bash\nDESCRIPTION: This snippet demonstrates how to deploy a new update to a Solana cluster by generating a new keypair for the update manifest and using the agave-install deploy command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-keygen new -o update-manifest.json  # <-- only generated once, the public key is shared with users\n$ agave-install deploy http://example.com/path/to/solana-release.tar.bz2 update-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Checking Out Latest Release\nDESCRIPTION: Commands to identify and checkout the latest release tag for better stability.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTAG=$(git describe --tags $(git rev-list --tags --max-count=1))\ngit checkout $TAG\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB Data\nDESCRIPTION: Example command showing how to query all airdrop measurements from the testnet database using InfluxDB CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/metrics/scripts/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ influx -database testnet -username read -password read -execute 'SELECT * FROM \"faucet-airdrop\"'\n```\n\n----------------------------------------\n\nTITLE: Simple Balance Check\nDESCRIPTION: Basic command to check wallet balance without specifying network\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance <ACCOUNT_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: agave-install CLI Interface Documentation\nDESCRIPTION: This snippet documents the main command-line interface for the agave-install tool, showing its usage, flags, options, and available subcommands for managing Solana software installations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nagave-install 0.16.0\nThe solana cluster software installer\n\nUSAGE:\n    agave-install [OPTIONS] <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -c, --config <PATH>    Configuration file to use [default: .../Library/Preferences/solana/install.yml]\n\nSUBCOMMANDS:\n    deploy    deploys a new update\n    help      Prints this message or the help of the given subcommand(s)\n    info      displays information about the current installation\n    init      initializes a new installation\n    run       Runs a program while periodically checking and applying software updates\n    update    checks for an update, and if available downloads and applies it\n```\n\n----------------------------------------\n\nTITLE: Running the Agave Test Suite\nDESCRIPTION: Command to execute the entire test suite for the Agave project.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cargo test\n```\n\n----------------------------------------\n\nTITLE: Validator Accounts File Format for Solana Genesis\nDESCRIPTION: YAML format for the validator accounts file which allows specifying multiple validators with custom balance and stake amounts. Each entry defines the lamports for both balance and stake along with the required public keys.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/genesis/README.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvalidator_accounts:\n- balance_lamports: <BALANCE_LAMPORTS_0>\n  stake_lamports: <STAKE_LAMPORTS_0>\n  identity_account: <IDENTITY_PUBKEY_0>\n  vote_account: <VOTE_PUBKEY_0>\n  stake_account: <STAKE_PUBKEY_0>\n- balance_lamports: <BALANCE_LAMPORTS_1>\n  stake_lamports: <STAKE_LAMPORTS_1>\n  identity_account: <IDENTITY_PUBKEY_1>\n  vote_account: <VOTE_PUBKEY_1>\n  stake_account: <STAKE_PUBKEY_1>\n...\n- balance_lamports: <BALANCE_LAMPORTS_N>\n  stake_lamports: <STAKE_LAMPORTS_N>\n  identity_account: <IDENTITY_PUBKEY_N>\n  vote_account: <VOTE_PUBKEY_N>\n  stake_account: <STAKE_PUBKEY_N>\n```\n\n----------------------------------------\n\nTITLE: Linux Dependencies Installation\nDESCRIPTION: Command to install required build dependencies on Debian-based Linux systems.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napt-get install \\\n    build-essential \\\n    pkg-config \\\n    libudev-dev llvm libclang-dev \\\n    protobuf-compiler\n```\n\n----------------------------------------\n\nTITLE: agave-install update CLI Interface Documentation\nDESCRIPTION: This snippet documents the command-line interface for the agave-install update subcommand, which checks for and applies new Solana software updates.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nagave-install update\nchecks for an update, and if available downloads and applies it\n\nUSAGE:\n    agave-install update\n\nFLAGS:\n    -h, --help    Prints help information\n```\n\n----------------------------------------\n\nTITLE: Creating a New Snapshot with Hard Fork\nDESCRIPTION: This command creates a new snapshot for a specified slot with a hard fork, using the agave-ledger-tool. It outputs the new shred version and bank hash.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ agave-ledger-tool -l <LEDGER_PATH> --snapshot-archive-path <SNAPSHOTS_PATH> --incremental-snapshot-archive-path <INCREMENTAL_SNAPSHOTS_PATH> create-snapshot SLOT_X <SNAPSHOTS_PATH> --hard-fork SLOT_X\n```\n\n----------------------------------------\n\nTITLE: Multiple Bootstrap Validators Example Command in Solana Genesis\nDESCRIPTION: Example command for setting up multiple bootstrap validators with the same lamports allocation for each. This shows how to specify multiple validators in a single genesis configuration command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/genesis/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin solana-genesis --\n    --bootstrap-validator <IDENTITY_PUBKEY_0> <VOTE_PUBKEY_0> <STAKE_PUBKEY_0>\n    --bootstrap-validator <IDENTITY_PUBKEY_1> <VOTE_PUBKEY_1> <STAKE_PUBKEY_1>\n    ...\n    --bootstrap-validator <IDENTITY_PUBKEY_N> <VOTE_PUBKEY_N> <STAKE_PUBKEY_N>\n    --bootstrap-validator-stake-lamports 10000000000\n    --bootstrap-validator 100000000000\n```\n\n----------------------------------------\n\nTITLE: Windows Binary Setup\nDESCRIPTION: Commands to set up Solana binaries on Windows systems.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd solana-release/\nset PATH=%cd%/bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: agave-install run CLI Interface Documentation\nDESCRIPTION: This snippet documents the command-line interface for the agave-install run subcommand, which runs a program while periodically checking for and applying software updates.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nagave-install run\nRuns a program while periodically checking and applying software updates\n\nUSAGE:\n    agave-install run <program_name> [program_arguments]...\n\nFLAGS:\n    -h, --help    Prints help information\n\nARGS:\n    <program_name>            program to run\n    <program_arguments>...    arguments to supply to the program\n\nThe program will be restarted upon a successful software update\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Rust Version for Release Branches\nDESCRIPTION: Command to install a specific Rust version that matches the requirements in the ci/rust-version.sh file.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup install VERSION\n```\n\n----------------------------------------\n\nTITLE: Checking Canary Node Versions in Solana Network\nDESCRIPTION: Commands to view current software versions running on different canary nodes in both mainnet-beta and testnet clusters using the Solana gossip command.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/cd/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip -um | grep -E \" (edge|beta|mc[ebs]\\d)\"\n\nsolana gossip -ut | grep -E \" (tc[eb]\\d)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Version\nDESCRIPTION: Command to verify the installed Solana version.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/install.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana --version\n```\n\n----------------------------------------\n\nTITLE: BigTable Transaction by Address Table Schema\nDESCRIPTION: Defines the schema for storing transaction lookups by account address. Uses a composite key of base58 address and inverted slot number, storing compressed TransactionByAddrInfo structs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/rpc-transaction-history.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTable: tx-by-addr\nRow Key: <base58 address>/<slot-id-one's-compliment-hex-slot-0-prefixed-to-16-digits>\nValue: compressed TransactionByAddrInfo\n```\n\n----------------------------------------\n\nTITLE: Running Network with Public IP Addresses (EC2)\nDESCRIPTION: Command to create a network using public IP addresses on Amazon EC2. This is an alternative to using private IP addresses within the same availability zone.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ec2.sh create -P ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Criterion Unit Test for Solana C Program\nDESCRIPTION: Shows how to set up a basic unit test using the Criterion framework for a Solana C program. This example includes the necessary headers and a simple test case structure.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/platform-tools-sdk/sbf/c/README.md#2025-04-11_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <criterion/criterion.h>\n#include \"../src/program.c\"\n\nTest(test_suite_name, test_case_name) {\n  cr_assert(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Log After Distribution\nDESCRIPTION: Command to retrieve the transaction log showing all token distributions that have been executed.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens transaction-log --output-path transactions.csv\n```\n\n----------------------------------------\n\nTITLE: BigTable Entries Table Schema\nDESCRIPTION: Defines the schema for storing slot entry data, added in v1.18.0. Uses the same key format as block table and stores compressed Entries structs containing entry summaries.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/rpc-transaction-history.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nTable: entries\nRow Key: <16-digit-hex-slot>\nValue: compressed Entries\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot with Destaked Validators\nDESCRIPTION: This command creates a new snapshot while destaking specified vote accounts, used when insufficient stake participates in the restart.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ agave-ledger-tool -l ledger create-snapshot SLOT_X ledger --hard-fork SLOT_X \\\n    --destake-vote-account <VOTE_ACCOUNT_1> \\\n    --destake-vote-account <VOTE_ACCOUNT_2> \\\n    .\n    .\n    --destake-vote-account <VOTE_ACCOUNT_N> \\\n```\n\n----------------------------------------\n\nTITLE: Initializing Makefile for Solana C Program\nDESCRIPTION: Creates a makefile that includes the Solana Build Framework (sbf) for building C programs. This is the initial setup step for a Solana C program project.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/platform-tools-sdk/sbf/c/README.md#2025-04-11_snippet_0\n\nLANGUAGE: make\nCODE:\n```\ninclude path/to/sbf.mk\n```\n\n----------------------------------------\n\nTITLE: Calculating Required Token Distributions with Dry Run\nDESCRIPTION: Command to calculate differences between expected distributions and previously sent transactions without executing transfers.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-tokens --dry-run --input-csv <RECIPIENTS_CSV>\n```\n\n----------------------------------------\n\nTITLE: Fork Choice Algorithm Loop in Solana Tower BFT\nDESCRIPTION: Pseudocode implementation of the fork choice algorithm loop that determines which fork a validator should vote on. The algorithm weighs forks based on stake-weighted votes and traverses block children to find the heaviest fork.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/tower-bft.md#2025-04-11_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n*While* `finish == 0`\n*Do*:\n    *If*: `i` has received no children of `B` then set `finish := 1` and return\n    `B`.\n    *Else*: Let `B′` be the child of `B` (amongst those received by `i`) with\n    most the most stake-weighted votes in `V`, breaking ties by the smallest\n    slot. Set `B` equal to `B'`.\n```\n\n----------------------------------------\n\nTITLE: Building and running the installer from source in Bash\nDESCRIPTION: This snippet shows how to clone the Solana repository, navigate to the install directory, and build/run the installer using Cargo when a pre-built binary is not available.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/solana-labs/solana.git\n$ cd solana/install\n$ cargo run -- --help\n```\n\n----------------------------------------\n\nTITLE: Referencing Auto-generated Solana Storage Protobufs in Rust\nDESCRIPTION: This snippet shows the file path where auto-generated solana-storage-proto structs are used in the project. These structs are generated from protobuf definitions and can be updated by editing the corresponding .proto files.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/storage-proto/README.md#2025-04-11_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nThe `solana-storage-proto` structs used in `src/convert.rs` and elsewhere are\nauto-generated from protobuf definitions on build. To update these structs,\nsimply make the desired edits to `proto/*.proto` files.\n```\n\n----------------------------------------\n\nTITLE: SPL Token Distribution Results\nDESCRIPTION: Example output showing total tokens in CSV, distributed and undistributed amounts, and expected balances for recipients.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nTotal in input_csv: 147.5 tokens\nDistributed: 0 tokens\nUndistributed: 147.5 tokens\nTotal: 147.5 tokens\nRecipient                                             Expected Balance\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT                    75.400\nC56nwrDVFpPrqwGYsTgQxv1ZraTh81H14PV4RHvZe36s                    10.000\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr                    42.100\n7qQPmVAQxEQ5djPDCtiEUrxaPf8wKtLG1m6SB1brejJ1                    20.000\n```\n\n----------------------------------------\n\nTITLE: ASIC Attack Analysis Calculations\nDESCRIPTION: Mathematical analysis showing the relationship between vote counts, lockout periods, and required ASIC speed advantages for different attack scenarios.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/tower-bft.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1 vote: lockout = 2 slots, ASIC needs 2x speed\n2 votes: lockout = 4 slots, ASIC needs 2x speed\n3 votes: lockout = 8 slots, ASIC needs 2.6x speed\n10 votes: lockout = 1024 slots, ASIC needs 102.4x speed\n20 votes: lockout = 2^20 slots, ASIC needs 52,428.8x speed\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Stakes Warmup Example Table in Markdown\nDESCRIPTION: This table demonstrates the warmup process for two stakes (X and Y) activating at epoch N, showing how they are awarded a portion of the 20% warmup rate in proportion to their stakes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| epoch | X eff | X act | Y eff | Y act | total effective | total activating |\n| :---- | ----: | ----: | ----: | ----: | --------------: | ---------------: |\n| N-1   |       |       |       |       |           2,000 |                0 |\n| N     |     0 | 1,000 |     0 |   200 |           2,000 |            1,200 |\n| N+1   |   333 |   667 |    67 |   133 |           2,400 |              800 |\n| N+2   |   733 |   267 |   146 |    54 |           2,880 |              321 |\n| N+3   |  1000 |     0 |   200 |     0 |           3,200 |                0 |\n```\n\n----------------------------------------\n\nTITLE: Metrics Validation Commands\nDESCRIPTION: Script commands to validate database and metrics environment setup.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./scripts/\nsource  ./configure-metrics.sh\n  INFLUX_HOST=https://internal-metrics.solana.com:8086\n  INFLUX_DATABASE=testnet-dev-solana\n  INFLUX_USERNAME=solana\n  INFLUX_PASSWORD=********\n./metrics-write-datapoint.sh \"testnet-deploy net-create-begin=1\"\n```\n\n----------------------------------------\n\nTITLE: Checking SPL Token Balances Using CLI\nDESCRIPTION: Command to check the status of recipients' SPL token balances before starting a distribution, requiring the token mint address.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens spl-token-balances --mint <ADDRESS> --input-csv <RECIPIENTS_CSV>\n```\n\n----------------------------------------\n\nTITLE: Defining CTF Test Function Signature in Rust\nDESCRIPTION: This snippet shows the standard function signature for a CTF test. It takes an entry point (ContactInfo), a funded keypair, and the number of nodes as parameters. This structure allows tests to be deployment-agnostic.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn test_this_behavior(\n    entry_point_info: &ContactInfo,\n    funding_keypair: &Keypair,\n    num_nodes: usize,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting TVU Sockets with Different Transport Protocols in Solana\nDESCRIPTION: Sets TVU socket information for both QUIC and UDP transport protocols in the ContactInfo structure. This information is published via Gossip for other nodes to discover connection endpoints of this validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/tvu.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ninfo.set_tvu(QUIC, (addr, tvu_quic_port)).unwrap();\ninfo.set_tvu(UDP, (addr, tvu_udp_port)).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Sourcing semver_bash in a Bash Script\nDESCRIPTION: Shows how to source the semver.sh script within another bash script and use its functions to parse semantic version strings into variables.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/ci/semver_bash/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n. ./semver.sh  \n\nlocal MAJOR=0  \nlocal MINOR=0  \nlocal PATCH=0  \nlocal SPECIAL=\"\"\n\nsemverParseInto \"1.2.3\" MAJOR MINOR PATCH SPECIAL  \nsemverParseInto \"3.2.1\" MAJOR MINOR PATCH SPECIAL\n```\n\n----------------------------------------\n\nTITLE: SPL Token Balance Check with Expected Distribution\nDESCRIPTION: Example output showing expected vs. actual SPL token balances along with the difference that needs to be distributed.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nToken: JDte736XZ1jGUtfAS32DLpBUWBR7WGSHy1hSZ36VRQ5V\nRecipient                                             Expected Balance            Actual Balance                Difference\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT                   100.000                    75.400                   -24.600\nC56nwrDVFpPrqwGYsTgQxv1ZraTh81H14PV4RHvZe36s                   100.000                    10.000                   -90.000\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr                   100.000                    42.100                   -57.900\n7qQPmVAQxEQ5djPDCtiEUrxaPf8wKtLG1m6SB1brejJ1                   100.000                    20.000                   -80.000\n```\n\n----------------------------------------\n\nTITLE: Discovering Cluster Nodes in Rust\nDESCRIPTION: This code demonstrates how to discover nodes in the cluster using the provided entry point. It utilizes the discover_nodes function to find the specified number of nodes over a few seconds.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::gossip_service::discover_nodes;\n\n// Discover the cluster over a few seconds.\nlet cluster_nodes = discover_nodes(&entry_point_info, num_nodes);\n```\n\n----------------------------------------\n\nTITLE: Installing Solana with custom arguments in Bash\nDESCRIPTION: This snippet shows how to pass custom arguments to the agave-install-init script during installation using shell syntax.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ init_args=.... # arguments for `agave-install-init ...`\n$ curl -sSf https://raw.githubusercontent.com/solana-labs/solana/v1.0.0/install/agave-install-init.sh | sh -s - ${init_args}\n```\n\n----------------------------------------\n\nTITLE: Running Solana Edge Docker Image with bash\nDESCRIPTION: Command to run the latest edge version of the Solana Docker image with port 8899 exposed for JSON RPC communication and appropriate file limits set.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docker-solana/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -p 8899:8899 --ulimit nofile=1000000 solanalabs/solana:edge\n```\n\n----------------------------------------\n\nTITLE: Fixed Amount Distribution Results\nDESCRIPTION: Example output showing expected token balances for recipients after distributing a fixed amount to each address.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nRecipient                                     Expected Balance\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv  10\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr  10\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT  10\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Cluster for Testing in Rust\nDESCRIPTION: This snippet shows how to create a local cluster with custom validator configurations for testing. It sets up a LocalCluster instance with specified parameters and a custom ValidatorConfig.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet mut validator_config = ValidatorConfig::default_for_test();\nlet local = LocalCluster::new_with_config(\n                num_nodes,\n                10_000,\n                100,\n                &validator_config\n                );\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Transaction Message v0 Structure in Rust\nDESCRIPTION: Implementation of the new v0 Message structure that extends the legacy format with address table lookups. This allows transactions to reference accounts stored in on-chain lookup tables via compact indices rather than full addresses.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/versioned-transactions.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// The structure of the new v0 Message\n#[derive(Serialize, Deserialize)]\npub struct Message {\n  // unchanged\n  pub header: MessageHeader,\n\n  // unchanged\n  #[serde(with = \"short_vec\")]\n  pub account_keys: Vec<Pubkey>,\n\n  // unchanged\n  pub recent_blockhash: Hash,\n\n  // unchanged\n  //\n  // # Notes\n  //\n  // Account and program indexes will index into the list of addresses\n  // constructed from the concatenation of three key lists:\n  //   1) message `account_keys`\n  //   2) ordered list of keys loaded from address table `writable_indexes`\n  //   3) ordered list of keys loaded from address table `readonly_indexes`\n  #[serde(with = \"short_vec\")]\n  pub instructions: Vec<CompiledInstruction>,\n\n  /// List of address table lookups used to load additional accounts\n  /// for this transaction.\n  #[serde(with = \"short_vec\")]\n  pub address_table_lookups: Vec<MessageAddressTableLookup>,\n}\n```\n\n----------------------------------------\n\nTITLE: PayTube Project Overview - Markdown Documentation\nDESCRIPTION: Documentation explaining the PayTube project, its purpose as a state channel implementation, and its potential for scaling transaction bandwidth on Solana. The document outlines how the project leverages Anza's decoupled SVM API for off-chain transactions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/svm/examples/paytube/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PayTube\n\nA reference implementation of an off-chain [state channel](https://ethereum.org/en/developers/docs/scaling/state-channels/)\nbuilt using [Anza's SVM API](https://www.anza.xyz/blog/anzas-new-svm-api).\n\nWith the release of Agave 2.0, we've decoupled the SVM API from the rest of the\nruntime, which means it can be used outside the validator. This unlocks\nSVM-based solutions such as sidecars, channels, rollups, and more. This project\ndemonstrates everything you need to know about bootstrapping with this new API.\n\nPayTube is a state channel (more specifically a payment channel), designed to\nallow multiple parties to transact amongst each other in SOL or SPL tokens\noff-chain. When the channel is closed, the resulting changes in each user's\nbalances are posted to the base chain (Solana).\n\nAlthough this project is for demonstration purposes, a payment channel similar\nto PayTube could be created that scales to handle massive bandwidth of\ntransfers, saving the overhead of posting transactions to the chain for last.\n```\n\n----------------------------------------\n\nTITLE: SPL Token Balance Check Results\nDESCRIPTION: Example output showing expected vs. actual SPL token balances for recipients, including differences and uninitialized token accounts.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nToken: JDte736XZ1jGUtfAS32DLpBUWBR7WGSHy1hSZ36VRQ5V\nRecipient                                             Expected Balance            Actual Balance                Difference\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT                    75.400                      0.000                   -75.400\nC56nwrDVFpPrqwGYsTgQxv1ZraTh81H14PV4RHvZe36s                    10.000  Associated token account not yet created\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr                    42.100                      0.000                   -42.100\n7qQPmVAQxEQ5djPDCtiEUrxaPf8wKtLG1m6SB1brejJ1                    20.000  Associated token account not yet created\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Conflicts in Rust Scheduler\nDESCRIPTION: This code snippet demonstrates how the scheduler handles conflicts when a transaction cannot be immediately processed due to locked accounts.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfor locked_account_key in transaction_accounts {\n    let account_key = locked_account_key.key()\n    let blocked_transaction_entry = self.blocked_transaction_queues_by_accounts.entry(account_key);\n    match blocked_transaction_entry {\n        Occupied(existing_blocked_transaction) => {\n            // If there is already a set of transactions blocked on this account, add\n            // this transaction to the priority queue.\n            existing_blocked_transaction.insert_transaction(next_highest_transaction);\n        }\n\n        Vacant(vacant_entry) => {\n            // Create a new queue blocked on this transaction\n            let new_blocked_transaction_queue =\n                Rc::new(BlockedTransactionsQueue {\n                    highest_priority_blocked_transaction: next_highest_transaction,\n                    other_blocked_transactions: BinaryHeap::new(),\n                });\n            // Insert into the hashmap for this `account_key`\n            vacant_entry.insert(new_blocked_transaction_queue.clone());\n            // Insert into the `blocked_transactions` hashmap to indicate this set of transactions\n            // is blocked by `next_highest_transaction`\n            self.blocked_transactions.insert(\n                next_highest_transaction.signature(),\n                new_blocked_transaction_queue\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with psql Client\nDESCRIPTION: Command to connect to the PostgreSQL database using the psql client. This connects to the 'solana' database on host 10.138.0.9 using port 5433 with the 'solana' user.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npsql -U solana -p 5433 -h 10.138.0.9 -w -d solana\n```\n\n----------------------------------------\n\nTITLE: Submitting an Offline Signed Payment to the Solana Network\nDESCRIPTION: Shows how to submit a previously offline-signed transaction to the Solana network using the --blockhash and --signer flags. This command includes the pubkey/signature pairs directly in the transaction rather than signing with local keypairs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --blockhash 5Tx8F3jgSHx21CbtjwmdaKPLM5tWmreWAnPrbqHomSJF \\\n    --signer FhtzLVsmcV7S5XqGD79ErgoseCLhZYmEZnz9kQg1Rp7j=4vC38p4bz7XyiXrk6HtaooUqwxTWKocf45cstASGtmrD398biNJnmTcUCVEojE7wVQvgdYbjHJqRFZPpzfCQpmUN\n    recipient-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple TVU Sockets with SO_REUSEPORT in Solana\nDESCRIPTION: Creates multiple TVU sockets bound to the same port using SO_REUSEPORT to improve kernel's packet queue handling. This allows the node to bind multiple sockets to a single advertised port, with the kernel distributing incoming packets across these sockets.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/tvu.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet (tvu_port, tvu_sockets) = multi_bind_in_range_with_config(\n    bind_ip_addr,\n    port_range,\n    socket_config_reuseport,\n    num_tvu_sockets.get(),\n)\n.expect(\"tvu multi_bind\");\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Information\nDESCRIPTION: Command to verify the current beta and stable channel branches after creating a new release branch, ensuring the branches were promoted correctly.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/RELEASE.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nci/channel-info.sh\n```\n\n----------------------------------------\n\nTITLE: Unblocking Transactions in Rust Scheduler\nDESCRIPTION: This code snippet demonstrates how the scheduler unblocks transactions when a blocking transaction is completed.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-11_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nif let Some(blocked_transaction_queue) = self.blocked_transactions.get(completed_transaction.signature) {\n    // Now push the rest of the queue to the head of `all_transaction_queues`, since we know\n    // everything in this blocked queue must be of higher priority, (since they were\n    // added to this queue earlier, this means they must have been popped off the main\n    // `transaction_accounts` queue earlier, hence higher priority)\n    self.all_transaction_queues.push_front(blocked_transaction_queue.other_blocked_transactions);\n    self.blocked_transactions.remove(completed_transaction.signature);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Access Control in pg_hba.conf\nDESCRIPTION: Example configuration in pg_hba.conf to allow nodes with IPs in the CIDR 10.138.0.0/24 to access all databases. This permits validator nodes in the specified IP range to connect to the database.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nhost    all             all             10.138.0.0/24           trust\n```\n\n----------------------------------------\n\nTITLE: Retrieving TVU Socket Information in Solana\nDESCRIPTION: Demonstrates how to retrieve TVU port information from a remote node's ContactInfo using the get_socket! macro. This allows peers to connect to the correct socket endpoint when transmitting blocks to a validator.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/tvu.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nget_socket!(tvu, SOCKET_TAG_TVU, SOCKET_TAG_TVU_QUIC);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Branch and Tag Structure in ASCII Art\nDESCRIPTION: ASCII diagram illustrating the relationship between master branch, release branches, and version tags, showing how different versions flow from the master branch into stable release branches.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/RELEASE.md#2025-04-11_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n========================= master branch (edge channel) =======================>\\n         \\\\                      \\\\                     \\\\\\n          \\\\___v0.7.0 tag         \\\\                     \\\\\\n           \\\\                      \\\\         v0.9.0 tag__\\\\\\n            \\\\          v0.8.0 tag__\\\\                     \\\\\\n v0.7.1 tag__\\\\                      \\\\                 v0.9 branch (beta channel)\\n              \\\\___v0.7.2 tag         \\\\___v0.8.1 tag\\n               \\\\                      \\\\\\n                \\\\                      \\\\\\n           v0.7 branch         v0.8 branch (stable channel)\n```\n\n----------------------------------------\n\nTITLE: Modeling Repair Problem Scenario with Multiple Duplicate Slots in Text Format\nDESCRIPTION: ASCII diagram showing a chain with multiple duplicate slots (2 and 4) to illustrate the repair problem when validators have different versions of blocks.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/handle-duplicate-block.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1 -> 2 (duplicate) -> 3 -> 4 (duplicate)\n```\n\n----------------------------------------\n\nTITLE: Configuring Testnet Metrics Environment\nDESCRIPTION: Sets up metrics configuration for the Solana Testnet environment with specific host, database, and credentials.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SOLANA_METRICS_CONFIG=\"host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea\"\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds from Solana Vote Account using CLI\nDESCRIPTION: Command to withdraw all funds from a Solana vote account using the solana-cli. Requires three keypairs: the vote account keypair, destination keypair for receiving funds, and the authorized withdrawer keypair. The 'ALL' parameter indicates withdrawal of maximum available funds while preserving rent-exempt minimum.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana withdraw-from-vote-account \\\n   vote-account-keypair.json \\\n   person-keypair.json ALL \\\n   --authorized-withdrawer authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Server\nDESCRIPTION: Command to start the PostgreSQL server on a Linux system. This specifically starts the PostgreSQL 14 main instance.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start postgresql@14-main\n```\n\n----------------------------------------\n\nTITLE: Specifying Program ID in Cargo.toml for Downstream Consumption\nDESCRIPTION: Example showing how to declare a program's ID in Cargo.toml metadata for easy consumption by downstream users and tools using solana-package-metadata.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package.metadata.solana]\nprogram-id = \"MyProgram1111111111111111111111111111111111\"\n```\n\n----------------------------------------\n\nTITLE: Storage Proof Contract Type Definition - ProofValidation\nDESCRIPTION: Structure for validators to submit validation results for a set of proofs, including proof status mask and required keypairs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nProofValidation {\n   proof_mask: Vec<ProofStatus>,\n}\nkeys = [validator_keypair, archiver_keypair(s) (unsigned)]\n```\n\n----------------------------------------\n\nTITLE: Blockstore Data Model and Structure\nDESCRIPTION: Describes the key-value data model used by Blockstore and the SlotMeta struct that maintains metadata for each slot. The structure stores shreds as key-value pairs where keys are concatenated slot and shred indices.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/blockstore.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- slot_index - The index of this slot\n- num_blocks - The number of blocks in the slot (used for chaining to a previous slot)\n- consumed - The highest shred index n, such that for all m < n, there exists a shred in this slot with shred index equal to n\n- received - The highest received shred index for the slot\n- next_slots - A list of future slots this slot could chain to\n- last_index - The index of the shred flagged as the last shred for this slot\n- is_connected - True iff every block from 0...slot forms a full sequence without holes\n```\n\n----------------------------------------\n\nTITLE: Downloading PostgreSQL Schema Creation Script\nDESCRIPTION: Command to download the create_schema.sql script from GitHub. This script is used to create the database objects for storing accounts and slots.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/solana-labs/solana/a70eb098f4ae9cd359c1e40bbb7752b3dd61de8d/accountsdb-plugin-postgres/scripts/create_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Using Package Metadata to Declare Program ID in Rust\nDESCRIPTION: Example demonstrating how to consume program ID from package metadata in Rust code, which is equivalent to using solana_pubkey::declare_id!.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsolana_package_metadata::declare_id_with_package_metadata!(\"solana.program-id\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nsolana_pubkey::declare_id!(\"MyProgram1111111111111111111111111111111111\");\n```\n\n----------------------------------------\n\nTITLE: Defining AdvertiseStorageRecentBlockhash Structure for Storage Epoch Management\nDESCRIPTION: A data structure that contains a hash and slot identifier used by validators and archivers to indicate a new storage epoch has started. This allows the previous epoch's storage proofs to be referenced in transactions, with other transactions verifying the epoch is accurate against the current chain state.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nAdvertiseStorageRecentBlockhash {\n    hash: Hash,\n    slot: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Performance Parameters in postgresql.conf\nDESCRIPTION: Optimized database performance settings for postgresql.conf that differ from default installation. These settings improve performance for the referential implementation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\nmax_connections = 200                  # (change requires restart)\nshared_buffers = 1GB                   # min 128kB\neffective_io_concurrency = 1000        # 1-1000; 0 disables prefetching\nwal_level = minimal                    # minimal, replica, or logical\nfsync = off                            # flush data to disk for crash safety\nsynchronous_commit = off               # synchronization level;\nfull_page_writes = off                 # recover from partial page writes\nmax_wal_senders = 0                    # max number of walsender processes\n```\n\n----------------------------------------\n\nTITLE: Blockstore API Function Signatures\nDESCRIPTION: Documents the main API functions provided by Blockstore for slot management and entry retrieval. These APIs are used by the ReplayStage to process blockchain entries.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/blockstore.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. fn get_slots_since(slots: &[u64]) -> Result<HashMap<u64, Vec<u64>>>\n2. fn get_slot_entries(slot: Slot, shred_start_index: u64) -> Result<Vec<Entry>>\n```\n\n----------------------------------------\n\nTITLE: Starting RPC Server with Ledger Data\nDESCRIPTION: Command to launch the JSON RPC server with specified ledger and accounts file paths. The server handles incoming RPC requests and performs transaction simulations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/svm/examples/json-rpc/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --manifest-path json-rpc-server/Cargo.toml -- -l test-ledger -a accounts.json\n```\n\n----------------------------------------\n\nTITLE: Listening to Ethereum Events using Web3.js\nDESCRIPTION: This JavaScript code uses Web3.js to subscribe to and listen for specific events on an Ethereum network. It demonstrates how to set up event listeners and filter events based on topics.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/log_data.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require('web3');\nconst url = 'ws://127.0.0.1:8546';\nconst web3 = new Web3(url);\n\nvar options = {\n    address: '0xfbBE8f06FAda977Ea1E177da391C370EFbEE3D25',\n    topics: [\n        '0xdf50c7bb3b25f812aedef81bc334454040e7b27e27de95a79451d663013b7e17',\n        //'0x0000000000000000000000000d8a3f5e71560982fb0eb5959ecf84412be6ae3e'\n      ]\n};\n\nvar subscription = web3.eth.subscribe('logs', options, function(error, result){\n    if (!error) console.log('got result');\n    else console.log(error);\n}).on(\"data\", function(log){\n    console.log('got data', log);\n}).on(\"changed\", function(log){\n    console.log('changed');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User\nDESCRIPTION: Command to create a regular PostgreSQL user named 'solana' on port 5433. The command runs as the postgres system user.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createuser -p 5433 solana\n```\n\n----------------------------------------\n\nTITLE: Implementing Stake State Structure\nDESCRIPTION: Definition of StakeStateV2::Stake structure containing delegation preferences and staking parameters.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Account::lamports - Lamports available for staking\n- stake - The staked amount for generating rewards\n- voter_pubkey - The pubkey of delegated VoteState\n- credits_observed - Total lifetime credits claimed\n- activated - Epoch of stake activation\n- deactivated - Epoch of stake deactivation\n- authorized_staker - Pubkey for delegation authority\n- authorized_withdrawer - Identity controlling lamports\n```\n\n----------------------------------------\n\nTITLE: Running RPC Client with Program Configuration\nDESCRIPTION: Command to start the JSON RPC client that communicates with the server. Requires configuration file, program keypair, and server URL parameters.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/svm/examples/json-rpc/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --manifest-path json-rpc-client/Cargo.toml -- -C config.yml -k json-rpc-program/target/deploy/helloworld-keypair.json -u localhost\n```\n\n----------------------------------------\n\nTITLE: Defining Instruction Enums with Account Attributes in Rust\nDESCRIPTION: Example of the proposed instruction enum definition format that uses attributes to specify account requirements, replacing the previous comment-based approach.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[instructions(test_program::id())]\npub enum TestInstruction {\n    /// Transfer lamports\n    #[accounts(\n        from_account(SIGNER, WRITABLE, desc = \"Funding account\"),\n        to_account(WRITABLE, desc = \"Recipient account\"),\n    )]\n    Transfer {\n        lamports: u64,\n    },\n\n    /// Provide M of N required signatures\n    #[accounts(\n        data_account(WRITABLE, desc = \"Data account\"),\n        signers(SIGNER, multiple, desc = \"Signer\"),\n    )]\n    Multisig,\n\n    /// Consumes a stored nonce, replacing it with a successor\n    #[accounts(\n        nonce_account(SIGNER, WRITABLE, desc = \"Nonce account\"),\n        recent_blockhashes_sysvar(desc = \"RecentBlockhashes sysvar\"),\n        nonce_authority(SIGNER, optional, desc = \"Nonce authority\"),\n    )]\n    AdvanceNonceAccount,\n}\n```\n\n----------------------------------------\n\nTITLE: agave-install-init CLI Interface Documentation\nDESCRIPTION: This snippet documents the command-line interface for the agave-install init subcommand, which is used to initialize a new Solana software installation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nagave-install-init\ninitializes a new installation\n\nUSAGE:\n    agave-install init [OPTIONS]\n\nFLAGS:\n    -h, --help    Prints help information\n\nOPTIONS:\n    -d, --data_dir <PATH>    Directory to store install data [default: .../Library/Application Support/solana]\n    -u, --url <URL>          JSON RPC URL for the solana cluster [default: http://api.devnet.solana.com]\n    -p, --pubkey <PUBKEY>    Public key of the update manifest [default: 9XX329sPuskWhH4DQh6k16c87dHKhXLBZTL3Gxmve8Gp]\n```\n\n----------------------------------------\n\nTITLE: Displaying Stake Warmup Example Table in Markdown\nDESCRIPTION: This table illustrates the warmup process for a single stake of 1,000 activated at epoch N, with a network warmup rate of 20%, and a quiescent total network stake of 2,000 at epoch N.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| epoch | effective | activating | total effective | total activating |\n| :---- | --------: | ---------: | --------------: | ---------------: |\n| N-1   |           |            |           2,000 |                0 |\n| N     |         0 |      1,000 |           2,000 |            1,000 |\n| N+1   |       400 |        600 |           2,400 |              600 |\n| N+2   |       880 |        120 |           2,880 |              120 |\n| N+3   |      1000 |          0 |           3,000 |                0 |\n```\n\n----------------------------------------\n\nTITLE: Automated Test Network Setup Script\nDESCRIPTION: Script for automating the creation and configuration of a test network with specific node sizes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gce.sh create -n4 -c2 --custom-machine-type \"--machine-type n1-standard-16\" --client-machine-type \"--machine-type n1-standard-4\"\n# Patch metrics config from env into config file\n./init-metrics.sh -e\n# Enable metrics and start the network (this will also build software)\nRUST_LOG=info ./net.sh start  -c bench-tps=2=\"--tx_count 25000\"\n```\n\n----------------------------------------\n\nTITLE: Generated Instruction Enum with Documentation in Rust\nDESCRIPTION: Example of the auto-generated instruction enum with comprehensive documentation that includes account requirements formatted as structured comments.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub enum TestInstruction {\n    /// Transfer lamports\n    ///\n    /// * Accounts expected by this instruction:\n    ///   0. `[WRITABLE, SIGNER]` Funding account\n    ///   1. `[WRITABLE]` Recipient account\n    Transfer {\n        lamports: u64,\n    },\n\n    /// Provide M of N required signatures\n    ///\n    /// * Accounts expected by this instruction:\n    ///   0. `[WRITABLE]` Data account\n    ///   * (Multiple) `[SIGNER]` Signers\n    Multisig,\n\n    /// Consumes a stored nonce, replacing it with a successor\n    ///\n    /// * Accounts expected by this instruction:\n    ///   0. `[WRITABLE, SIGNER]` Nonce account\n    ///   1. `[]` RecentBlockhashes sysvar\n    ///   2. (Optional) `[SIGNER]` Nonce authority\n    AdvanceNonceAccount,\n}\n```\n\n----------------------------------------\n\nTITLE: agave-install deploy CLI Interface Documentation\nDESCRIPTION: This snippet documents the command-line interface for the agave-install deploy subcommand, which is used to deploy a new Solana software update to the cluster.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nagave-install deploy\ndeploys a new update\n\nUSAGE:\n    agave-install deploy <download_url> <update_manifest_keypair>\n\nFLAGS:\n    -h, --help    Prints help information\n\nARGS:\n    <download_url>               URL to the solana release archive\n    <update_manifest_keypair>    Keypair file for the update manifest (/path/to/keypair.json)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Syntax for Block Quotes in Solana Documentation\nDESCRIPTION: This code snippet shows the use of Markdown syntax to create a block quote, specifically referencing a 10-minute block time in Proof of Work consensus systems. It demonstrates how to escape special characters in Markdown.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/synchronization.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\(~10 minutes\\)\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: Command for configuring AWS CLI credentials.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ aws configure\n```\n\n----------------------------------------\n\nTITLE: VoteStateUpdate Processing Logic\nDESCRIPTION: Pseudocode description of the three main steps in processing VoteStateUpdate instructions, including handling rooted slots, maintaining existing slots, and processing new slots with latency calculations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/timely-vote-credits.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. For each slot that was in the previous VoteState but are not in the new\\nVoteState because they have been rooted in the transition from the old\\nVoteState to the new VoteState, credits to award are calculated based on the\\nlatency that was recorded for them and still available in the old VoteState.\\n\\n2. For each slot that was in both the previous VoteState and the new\\nVoteState, the latency that was previously recorded for that slot is copied\\nfrom the old VoteState to the new VoteState.\\n\\n3. For each slot that is in the new VoteState but wasn't in the old VoteState,\\nthe latency value is calculated for this new slot according to what slot the\\nvote is for and what slot is in the Clock (i.e. the slot this VoteStateUpdate\\ntx landed in) and this latency is stored in VoteState for that slot.\n```\n\n----------------------------------------\n\nTITLE: Watchtower Metrics Documentation in Markdown\nDESCRIPTION: Documents the two main metrics emitted by the watchtower system: watchtower-sanity for overall health status and watchtower-sanity-failure for detailed failure information. The metrics are stored in InfluxDB format with specific fields for status tracking and error reporting.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/watchtower/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Metrics\n#### `watchtower-sanity`\nOn every iteration this data point will be emitted indicating the overall result\nusing a boolean `ok` field.\n\n#### `watchtower-sanity-failure`\nOn failure this data point contains details about the specific test that failed via\nthe following fields:\n* `test`: name of the sanity test that failed\n* `err`: exact sanity failure message\n```\n\n----------------------------------------\n\nTITLE: BigTable Transaction Signature Table Schema\nDESCRIPTION: Defines the schema for looking up transactions by signature. Uses base58 transaction signatures as keys and stores compressed TransactionInfo structs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/rpc-transaction-history.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTable: tx\nRow Key: <base58-transaction-signature>\nValue: compressed TransactionInfo\n```\n\n----------------------------------------\n\nTITLE: Deploying Network with Public IP\nDESCRIPTION: Commands to create network instances using public IP addresses instead of private IPs on GCE and EC2.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -P ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ec2.sh create -P ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Versioned Transaction Structure in Rust\nDESCRIPTION: Definition of the VersionedTransaction struct which can support both legacy and new versioned transaction formats. This structure encapsulates signatures and the versioned message that contains transaction instructions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/versioned-transactions.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\npub struct VersionedTransaction {\n    /// List of signatures\n    #[serde(with = \"short_vec\")]\n    pub signatures: Vec<Signature>,\n    /// Message to sign.\n    pub message: VersionedMessage,\n}\n\n// Uses custom serialization. If the first bit is set, the remaining bits\n// in the first byte will encode a version number. If the first bit is not\n// set, the first byte will be treated as the first byte of an encoded\n// legacy message.\npub enum VersionedMessage {\n    Legacy(LegacyMessage),\n    V0(v0::Message),\n}\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Schema Destruction Script\nDESCRIPTION: Command to execute the drop_schema.sql script to destroy the database objects. This removes all tables and objects created by the create_schema.sql script.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npsql -U solana -p 5433 -h 10.138.0.9 -w -d solana -f drop_schema.sql\n```\n\n----------------------------------------\n\nTITLE: BigTable Block Table Schema\nDESCRIPTION: Defines the schema for storing compressed block data in BigTable. Uses 16-digit hexadecimal slot numbers as row keys and stores compressed StoredConfirmedBlock structs as values.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/rpc-transaction-history.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTable: block\nRow Key: <16-digit-hex-slot> (e.g. 000000000000002a)\nValue: compressed StoredConfirmedBlock\n```\n\n----------------------------------------\n\nTITLE: Starting Local Metric Services\nDESCRIPTION: Command to start the local InfluxDB and Grafana metric services.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/metrics/scripts/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./start.sh\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Reference to the @solana/web3.js package name using markdown code formatting\nSOURCE: https://github.com/anza-xyz/agave/blob/master/web3.js/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@solana/web3.js`\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Limiting Historical Account Data\nDESCRIPTION: SQL statement to limit the amount of historical data stored in account_audit table. This query keeps only the 1000 most recent records for each account and deletes older data.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ndelete from account_audit a2 where (pubkey, write_version) in\n    (select pubkey, write_version from\n        (select a.pubkey, a.updated_on, a.slot, a.write_version, a.lamports,\n            rank() OVER ( partition by pubkey order by write_version desc) as rnk\n            from account_audit a) ranked\n            where ranked.rnk > 1000)\n```\n\n----------------------------------------\n\nTITLE: Account Index Data Structure Definition\nDESCRIPTION: Defines the core data structures used for indexing accounts across different forks. Includes AccountsFileId, Fork, AccountMap, and AccountIndex type definitions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/persistent-account-storage.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntype AccountsFileId = usize;\n\ntype Fork = u64;\n\nstruct AccountMap(Hashmap<Fork, (AccountsFileId, u64)>);\n\ntype AccountIndex = HashMap<Pubkey, AccountMap>;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Containers\nDESCRIPTION: Commands to monitor the logs of running InfluxDB and Grafana containers.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/metrics/scripts/README.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ docker logs -f influxdb\n$ docker logs -f grafana\n```\n\n----------------------------------------\n\nTITLE: Updating Rust to the Latest Stable Version\nDESCRIPTION: Command to update Rust to the latest stable version, recommended when building the master branch.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup update\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: Command to configure AWS CLI with credentials from IAM Console.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ aws configure\n```\n\n----------------------------------------\n\nTITLE: Generating ABI Digest Values in Shell\nDESCRIPTION: Shell command for running unit tests to generate ABI digest values. This command is used during development to obtain the correct digest values for new ABI items.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/abi-management.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSOLANA_ABI_DUMP_DIR=. cargo +nightly test abi\n```\n\n----------------------------------------\n\nTITLE: Starting BigTable Emulator and Environment Setup\nDESCRIPTION: Commands to start the Cloud BigTable emulator and initialize the environment variables for local development.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/storage-bigtable/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta emulators bigtable start\n```\n\nLANGUAGE: bash\nCODE:\n```\n$(gcloud beta emulators bigtable env-init)\n```\n\nLANGUAGE: bash\nCODE:\n```\n./init-bigtable.sh\n```\n\n----------------------------------------\n\nTITLE: Using Clippy Lint Attributes in Rust\nDESCRIPTION: Example showing how to explicitly ignore Clippy linting advice using attribute annotations. This demonstrates proper syntax for allowing specific Clippy warnings.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[allow(clippy::too_many_arguments)]\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncClient and SyncClient Traits for Solana Client Implementations\nDESCRIPTION: Defines the core traits that Solana client implementations must support. AsyncClient provides asynchronous transaction submission, while SyncClient allows checking transaction status. These traits form the foundation for different testing implementations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/testing-programs.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntrait AsyncClient {\n    fn async_send_transaction(&self, transaction: Transaction) -> io::Result<Signature>;\n}\n\ntrait SyncClient {\n    fn get_signature_status(&self, signature: &Signature) -> Result<Option<transaction::Result<()>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solana using bootstrap script in Bash\nDESCRIPTION: This snippet demonstrates how to fetch and run a pre-built installer using a bootstrap curl/shell script. It downloads the agave-install-init script from GitHub and executes it.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/installer.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSf https://raw.githubusercontent.com/solana-labs/solana/v1.0.0/install/agave-install-init.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Proposed Base64 Encoded Event Log Format\nDESCRIPTION: This snippet shows the proposed format for logging binary data using base64 encoding in program logs. It demonstrates how topics and data from an Ethereum event would be encoded.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/log_data.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nprogram data: 3fJSrRviyJtpwrBo/DeNqpUrpFjxKEWKPVaTfUjs8AAAAAAAAAAAAAAACC+JDWOEeNIR7yII88FGa1q/g1UQAAAAAAAAAAAAAAAKEkMdC522QANLDN/O75zOFh5ivk AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgMNzrvS9MAAA=\n```\n\n----------------------------------------\n\nTITLE: Using semver_bash from Command Line in Bash\nDESCRIPTION: Demonstrates how to use the semver.sh script from the command line to parse and compare semantic version strings.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/ci/semver_bash/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./semver.sh \"3.2.1\" \"3.2.1-alpha\"  \n3.2.1 -> M: 3 m:2 p:1 s:  \n3.2.1-alpha -> M: 3 m:2 p:1 s:-alpha  \n3.2.1 == 3.2.1-alpha -> 1.  \n3.2.1 < 3.2.1-alpha -> 1.  \n3.2.1 > 3.2.1-alpha -> 0.\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Branch\nDESCRIPTION: Git commands for creating a new branch based on the current commit and pushing it to the remote repository, used during the branch creation process.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/RELEASE.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <branchname>\\ngit push -u origin <branchname>\n```\n\n----------------------------------------\n\nTITLE: Creating a Geyser Plugin in Rust\nDESCRIPTION: Implementation of the _create_plugin function that instantiates a PostgreSQL plugin and returns a pointer to the trait GeyserPlugin. This is the entry point for all Geyser plugins.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/validator/geyser.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\n#[allow(improper_ctypes_definitions)]\n/// # Safety\n///\n/// This function returns the GeyserPluginPostgres pointer as trait GeyserPlugin.\npub unsafe extern \"C\" fn _create_plugin() -> *mut dyn GeyserPlugin {\n    let plugin = GeyserPluginPostgres::new();\n    let plugin: Box<dyn GeyserPlugin> = Box::new(plugin);\n    Box::into_raw(plugin)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Stake Account Information in Solana CLI\nDESCRIPTION: Example output from the stake-account command showing an undelegated stake account with total stake and authorities defined.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nTotal Stake: 5000 SOL\nStake account is undelegated\nStake Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\nWithdraw Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Keypair URL in zsh for Solana CLI\nDESCRIPTION: This command disables zsh's special handling of the question mark character, allowing proper parsing of keypair URLs in Solana CLI commands when using zsh shell.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nunsetopt nomatch\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Active Voting Validator\nDESCRIPTION: Command to create a symbolic link on the actively voting validator that points to the staked identity. This allows the validator to use the correct identity file when restarting.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nln -sf /home/sol/staked-identity.json /home/sol/identity.json\n```\n\n----------------------------------------\n\nTITLE: Defining and Emitting Events in Solidity\nDESCRIPTION: This snippet demonstrates how to define an event structure and emit it within a Solidity contract. It shows the basic syntax for creating and using events in Solidity.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/log_data.md#2025-04-11_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent PaymentReceived {\n    address sender;\n    uint amount;\n}\n\ncontract c {\n    function pay() public payable {\n        emit PaymentReceived(msg.sender, msg.value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devnet Metrics Environment\nDESCRIPTION: Sets up metrics configuration for the Solana Devnet environment with specific host, database, and credentials.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/clusters/available.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SOLANA_METRICS_CONFIG=\"host=https://metrics.solana.com:8086,db=devnet,u=scratch_writer,p=topsecret\"\n```\n\n----------------------------------------\n\nTITLE: Creating Recipients CSV for Token Distribution\nDESCRIPTION: Example CSV format for distributing tokens to recipients. The CSV includes recipient addresses, token amounts, and optional lockup dates.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount,lockup_date\n3ihfUy1n9gaqihM5bJCiTAGLgWc5zo3DqVUS6T736NLM,42.0,\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT,43.0,\n```\n\n----------------------------------------\n\nTITLE: Visualizing Epoch Accounts Hash Warping Scenarios in Text Diagram\nDESCRIPTION: A text-based diagram illustrating the timeline of epoch transitions with labeled regions (A through F) for reference in warping scenario analysis. The diagram shows epoch boundaries, start slots, and stop slots across three epochs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/epoch_accounts_hash.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  +---------+-----------------+-----------+---------+-----------------+-----------+\n  |         >                 <           |         >                 <           |\n  |    A    >     B           <     C     |    D    >      E          <     F     |\n  |         >                 <           |         >                 <           |\n  +---------+-----------------+-----------+---------+-----------------+-----------+\n  |         |                 |           |         |                 |           |\n  v         v                 v           v         v                 v           v\n  epoch 1   start slot 1      stop slot 1 epoch 2   start slot 2      stop slot 2 epoch 3\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Chat ID Environment Variable\nDESCRIPTION: Command to set the TELEGRAM_CHAT_ID environment variable for agave-watchtower notifications. This ID is obtained from the Telegram API and specifies which chat group should receive the notifications.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/monitoring.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEGRAM_CHAT_ID=<negative chat id number>\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System Packages for Security\nDESCRIPTION: Commands to update the package list and upgrade installed packages on an Ubuntu system. This should be performed weekly at minimum to protect against known security vulnerabilities.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/security.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values and Complex Types in Solidity\nDESCRIPTION: Example showing how Solidity can return multiple values including a string, an integer array, and a struct. All return values are ABI encoded to a variable-length byte array.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/return-data.md#2025-04-11_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct S {\n    int f1;\n    bool f2\n};\n\nfunction foo2() public returns (string, int[], S) {\n    return (a, b, c);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Conflict Check in Rust\nDESCRIPTION: This code snippet checks for conflicts with locked accounts and higher fee transactions that have reserved accounts.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfor account_key in transaction_accounts {\n    // Check if the `LockedPubkey` conflicts with any key in the `locked_accounts` set, which\n    // would indicate a transaction using this account with a conflicting lock is already\n    // running\n    if self.locked_accounts.is_conflicting(account_key) {\n        return Conflict;\n    }\n\n    // Check if any higher fee transaction has already reserved this account. This prevents\n    // lower fee transactions from starving higher fee transactions.\n    if self.blocked_transaction_queues_by_accounts.contains_key(account_key) {\n        return Conflict;\n    }\n    return NoConflict;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Transaction Log Before Distribution\nDESCRIPTION: Example transaction log showing previous token distributions with recipient addresses, amounts, dates, and transaction signatures.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount,finalized_date,signature\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv,70.0,2020-09-15T23:29:26.879747Z,UB168XhBhecxzeD1w2ZRUhwTHpPSqv2WNh8NrZHqz1F2EqxxbSW6iFfVtsg3HkU9NX2cD7R92D8VRLSyArZ9xKQ\n```\n\n----------------------------------------\n\nTITLE: Visualizing Vote Relationships in Agave Consensus (ASCII Diagram)\nDESCRIPTION: This ASCII diagram illustrates the relationships between different votes, blocks, and slots in the Agave consensus protocol. It shows the positions of key elements like optimistically confirmed blocks, finalized blocks, and validator votes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                                  +-------+\n                                  |       |\n                        +---------+       +--------+\n                        |         |       |        |\n                        |         +-------+        |\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  X'\n                        |                      |       |\n                        |                      +---+---+\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  B (Optimistically Confirmed)\n                        |                      |       |\n                        |                      +---+---+\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  S'.last\n                        |                      |       |\n                        |                      +-------+\n                        |\n                    +---+---+\n                    |       |\n                 X  |       |\n                    |       |\n                    +---+---+\n                        |\n                        |\n                        |\n                        |\n                        |\n                        |\n                    +---+---+\n                    |       |\n            S.last  |       |\n                    |       |\n                    +---+---+\n                        |\n                        |\n                        |\n                        |\n                    +---+---+\n                    |       |\n      s + s.lockout |       |\n                    +-------+\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Bot Token Environment Variable\nDESCRIPTION: Command to set the TELEGRAM_BOT_TOKEN environment variable for agave-watchtower to enable Telegram notifications. The token is obtained from BotFather when creating a new Telegram bot.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/monitoring.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEGRAM_BOT_TOKEN=<HTTP API Token>\n```\n\n----------------------------------------\n\nTITLE: Generated Verbose Instruction Enum for Deserialization in Rust\nDESCRIPTION: Example of a generated verbose instruction enum that includes account indices as named fields, enabling easier deserialization and inspection of on-chain transaction data.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]\npub enum TestInstruction {\n    /// Transfer lamports\n    Transfer {\n        /// Funding account\n        funding_account: u8\n\n        /// Recipient account\n        recipient_account: u8\n\n        lamports: u64,\n    },\n\n    /// Provide M of N required signatures\n    Multisig {\n        data_account: u8,\n        signers: Vec<u8>,\n    },\n\n    /// Consumes a stored nonce, replacing it with a successor\n    AdvanceNonceAccount {\n        nonce_account: u8,\n        recent_blockhashes_sysvar: u8,\n        nonce_authority: Option<u8>,\n    }\n}\n\nimpl TestInstructionVerbose {\n    pub fn from_instruction(instruction: TestInstruction, account_keys: Vec<u8>) -> Self {\n        match instruction {\n            TestInstruction::Transfer { lamports } => TestInstructionVerbose::Transfer {\n                funding_account: account_keys[0],\n                recipient_account: account_keys[1],\n                lamports,\n            }\n            TestInstruction::Multisig => TestInstructionVerbose::Multisig {\n                data_account: account_keys[0],\n                signers: account_keys[1..],\n            }\n            TestInstruction::AdvanceNonceAccount => TestInstructionVerbose::AdvanceNonceAccount {\n                nonce_account: account_keys[0],\n                recent_blockhashes_sysvar: account_keys[1],\n                nonce_authority: &account_keys.get(2),\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockedTransactionsQueue Struct in Rust\nDESCRIPTION: This code snippet defines a struct 'BlockedTransactionsQueue' that represents a heap of transactions blocked by a higher priority transaction.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct BlockedTransactionsQueue {\n    // The higher priority transaction blocking all the other transactions in\n    // `blocked_transactions` below\n    highest_priority_blocked_transaction: Transaction,\n    other_blocked_transactions: BinaryHeap<Transaction>\n}\n```\n\n----------------------------------------\n\nTITLE: Recipients CSV for Dry Run Calculation\nDESCRIPTION: Example CSV format for dry run calculation showing recipient addresses and expected token amounts.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount,lockup_date\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv,80,\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr,42,\n```\n\n----------------------------------------\n\nTITLE: Loading Instruction Data Helper Functions in Rust\nDESCRIPTION: Helper functions to extract instruction data from the special sysvar. These functions allow programs to access the current instruction index and load specific instructions from a Message, enabling instruction introspection in smart contracts.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/instruction_introspection.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn load_current_index_checked(instruction_data: &[u8]) -> u16;\nfn load_instruction_at_checked(instruction_index: usize, instruction_sysvar_account_info: &AccountInfo) -> Result<Instruction>;\n```\n\n----------------------------------------\n\nTITLE: Setting a New Stake Authority in Solana CLI\nDESCRIPTION: Changes the stake authority of an existing stake account. Requires the current stake authority keypair and the public key of the new stake authority.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana stake-authorize <STAKE_ACCOUNT_ADDRESS> \\\n    --stake-authority <KEYPAIR> --new-stake-authority <PUBKEY> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Defining LockedPubkey Enum in Rust\nDESCRIPTION: This code snippet defines an enum 'LockedPubkey' used to represent read and write locks on public keys in the transaction scheduler.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum LockedPubkey {\n    Read(Pubkey),\n    Write(Pubkey),\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fork Structure with Multiple Duplicate Slots in Text Format\nDESCRIPTION: ASCII diagram showing a fork structure with two different versions of the same slot (2 and 2'), illustrating the challenge of building switching proofs when duplicates exist.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/handle-duplicate-block.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    |-------- 2\n    |\n0------------- 1 ------ 2'\n    |\n    |---------- 6\n\n```\n\n----------------------------------------\n\nTITLE: Updated Recipients CSV for SPL Token Calculation\nDESCRIPTION: Example updated CSV for SPL token calculation with increased token amounts for each recipient address.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/tokens/README.md#2025-04-11_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT,100000\nC56nwrDVFpPrqwGYsTgQxv1ZraTh81H14PV4RHvZe36s,100000\n7aHDubg5FBYj1SgmyBgU3ZJdtfuqYCQsJQK2pTR5JUqr,100000\n7qQPmVAQxEQ5djPDCtiEUrxaPf8wKtLG1m6SB1brejJ1,100000\n```\n\n----------------------------------------\n\nTITLE: Account Loading Function Signature\nDESCRIPTION: Function signature for loading an account from a specific fork, with fallback to parent forks. Takes fork ID and public key as parameters and returns an optional Account reference.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/persistent-account-storage.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/// Load the account for the pubkey.\n/// This function will load the account from the specified fork, falling back to the fork's parents\n/// * fork - a virtual Accounts instance, keyed by Fork.  Accounts keep track of their parents with Forks,\n///       the persistent store\n/// * pubkey - The Account's public key.\npub fn load_slow(&self, id: Fork, pubkey: &Pubkey) -> Option<&Account>\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds from Nonce Account in Solana CLI\nDESCRIPTION: Withdraw funds from a nonce account to another account using the Solana CLI. Requires specifying the nonce account, recipient, and amount.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana withdraw-from-nonce-account nonce-keypair.json ~/.config/solana/id.json 0.5\n```\n\n----------------------------------------\n\nTITLE: Storage Proof Contract Type Definition - SubmitMiningProof\nDESCRIPTION: Defines the structure for submitting mining proofs by archivers, including slot number, SHA state hash, and signature verification.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSubmitMiningProof {\n    slot: u64,\n    sha_state: Hash,\n    signature: Signature,\n};\nkeys = [archiver_keypair]\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Instruction Constructor Functions in Rust\nDESCRIPTION: Example of the auto-generated constructor functions that simplify creating instructions with proper account metadata based on the attribute definitions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Transfer lamports\n///\n/// * `from_account` - `[WRITABLE, SIGNER]` Funding account\n/// * `to_account` - `[WRITABLE]` Recipient account\npub fn transfer(from_account: Pubkey, to_account: Pubkey, lamports: u64) -> Instruction {\n    let account_metas = vec![\n        AccountMeta::new(from_pubkey, true),\n        AccountMeta::new(to_pubkey, false),\n    ];\n    Instruction::new_with_bincode(\n        test_program::id(),\n        &SystemInstruction::Transfer { lamports },\n        account_metas,\n    )\n}\n\n/// Provide M of N required signatures\n///\n/// * `data_account` - `[WRITABLE]` Data account\n/// * `signers` - (Multiple) `[SIGNER]` Signers\npub fn multisig(data_account: Pubkey, signers: &[Pubkey]) -> Instruction {\n    let mut account_metas = vec![\n        AccountMeta::new(nonce_pubkey, false),\n    ];\n    for pubkey in signers.iter() {\n        account_metas.push(AccountMeta::new_readonly(pubkey, true));\n    }\n\n    Instruction::new_with_bincode(\n        test_program::id(),\n        &TestInstruction::Multisig,\n        account_metas,\n    )\n}\n\n/// Consumes a stored nonce, replacing it with a successor\n///\n/// * nonce_account - `[WRITABLE, SIGNER]` Nonce account\n/// * recent_blockhashes_sysvar - `[]` RecentBlockhashes sysvar\n/// * nonce_authority - (Optional) `[SIGNER]` Nonce authority\npub fn advance_nonce_account(\n    nonce_account: Pubkey,\n    recent_blockhashes_sysvar: Pubkey,\n    nonce_authority: Option<Pubkey>,\n) -> Instruction {\n    let mut account_metas = vec![\n        AccountMeta::new(nonce_account, false),\n        AccountMeta::new_readonly(recent_blockhashes_sysvar, false),\n    ];\n    if let Some(pubkey) = authorized_pubkey {\n        account_metas.push(AccountMeta::new_readonly*nonce_authority, true));\n    }\n    Instruction::new_with_bincode(\n        test_program::id(),\n        &TestInstruction::AdvanceNonceAccount,\n        account_metas,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: GCP Authentication and Project Setup\nDESCRIPTION: Commands for authenticating with Google Cloud Platform and setting the project configuration.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud auth login\ngcloud config set project principal-lane-200702\n```\n\n----------------------------------------\n\nTITLE: Block Chain Structure Example\nDESCRIPTION: Demonstrates the relationship between consecutive blocks in the chain using ASCII art. Used to explain how optimistic confirmation propagates through ancestor blocks.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/simple-payment-and-state-verification.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nB -> B'\n```\n\n----------------------------------------\n\nTITLE: Displaying Public Key for File System Wallet\nDESCRIPTION: Shows how to display the public key (wallet address) for a File System Wallet using the Solana CLI and specifying the keypair file path.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/intro.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey /home/solana/my_wallet.json\n```\n\n----------------------------------------\n\nTITLE: Viewing Public Key from Paper Wallet Seed Phrase\nDESCRIPTION: Retrieves the public key using a seed phrase, allowing key verification without storing the private key on disk.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/validator-start.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ASK\n```\n\n----------------------------------------\n\nTITLE: Visualizing Block and Vote Relationships in Agave Consensus (ASCII Diagram)\nDESCRIPTION: This ASCII diagram illustrates the relationships between finalized blocks, optimistically confirmed blocks, and validator votes in the Agave consensus protocol. It shows the relative positions of these elements in the blockchain.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                                +-------+\n                                |       |\n                       +--------+       +---------+\n                       |        |       |         |\n                       |        +-------+         |\n                       |                          |\n                       |                          |\n                       |                          |\n                       |                      +---+---+\n                       |                      |       |\n                       |                      |       |  X\n                       |                      |       |\n                       |                      +---+---+\n                       |                          |\n                       |                          |\n                       |                      +---+---+\n                       |                      |       |\n                       |                      |       |  B (Optimistically Confirmed)\n                       |                      |       |\n                       |                      +---+---+\n                       |                          |\n                       |                          |\n                       |                          |\n                       |                      +---+---+\n                       |                      |       |\n                       |                      |       |  S.last\n                       |                      |       |\n                       |                      +-------+\n                       |\n                   +---+---+\n                   |       |\n    B'(Finalized)  |       |\n                   |       |\n                   +-------+\n```\n\n----------------------------------------\n\nTITLE: Proposed System Call for Binary Data Logging in Solidity\nDESCRIPTION: This code snippet defines a new system call 'sol_log_data' for logging binary data in Solidity. It takes an array of SolBytes and its length as parameters.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/log_data.md#2025-04-11_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid sol_log_data(SolBytes *fields, uint64_t length);\n```\n\n----------------------------------------\n\nTITLE: Quick Start Test Network Deployment\nDESCRIPTION: Commands for creating, configuring, and managing a test network using GCE.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# In Agave repo\ncd net/\n\n# Create a GCE testnet with 4 additional validator nodes (beyond the bootstrap node) and 1 client (billing starts here)\n./gce.sh create -n 4 -c 1\n\n# Configure the metrics database and validate credentials using environment variable `SOLANA_METRICS_CONFIG` (skip this if you are not using metrics)\n./init-metrics.sh -c testnet-dev-${USER} ${USER}\n\n# Deploy the network from the local workspace and start processes on all nodes including bench-tps on the client node\nRUST_LOG=info ./net.sh start\n\n# Show a help to ssh into any testnet node to access logs/etc\n./ssh.sh\n\n# Stop running processes on all nodes\n./net.sh stop\n\n# Dispose of the network (billing stops here)\n./gce.sh delete\n```\n\n----------------------------------------\n\nTITLE: Calculating BlockCommitment in Agave Network\nDESCRIPTION: This code snippet demonstrates the algorithm for computing the BlockCommitment struct, which represents the commitment metric for a particular block. It iterates through vote accounts and their vote stacks to accumulate stake information for each ancestor bank.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/commitment.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   let output: HashMap<b, Stake> = HashMap::new();\n   let fork_commitment_cache = ForkCommitmentCache::default();\n   for vote_account in b.vote_accounts {\n       // vote stack is sorted from oldest vote to newest vote\n       for (v1, v2) in vote_account.vote_stack.windows(2) {\n           for a in ancestors(v1).difference(ancestors(v2)) {\n               f'(*output.get_mut(a), *fork_commitment_cache.get_mut(a), vote_account, v);\n           }\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Failing Transaction Attempt in Solana CLI\nDESCRIPTION: Attempt to transfer SOL from Alice to Bob using an expired blockhash, resulting in a transaction failure.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer -k alice.json --blockhash expiredDTaxfagttWjQweib42b6ZHADSx94Tw8gHx11 bob.json 0.01\n```\n\n----------------------------------------\n\nTITLE: Displaying Agave Validator Exit Help\nDESCRIPTION: Shows how to view help information for the agave-validator exit command, which is used to safely stop the validator process.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/best-practices/general.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nagave-validator exit --help\n```\n\n----------------------------------------\n\nTITLE: Returning a String in Solidity\nDESCRIPTION: Example of a Solidity function that returns a variable length string value. This demonstrates the basic return functionality available in Solidity.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/return-data.md#2025-04-11_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction foo1() public returns (string) {\n    return \"Hello, world!\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Solana CLI Node Interaction Commands\nDESCRIPTION: Commands for interacting with network nodes using Solana CLI tools.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# source ip list  use as ${validatorIpList[4]}\nsource net/config/config\n\n# airdrop\n../target/release/solana -u http://${validatorIpList[1]}:8899 airdrop 1\n\n# check feature\n../target/release/solana -u http://${validatorIpList[1]}:8899 feature status\n\n# activate a feature\n../target/release/solana -u http://${validatorIpList[1]}:8899 feature activate <path to .json>\n\n# check the stakes on current validators\n../target/release/solana --url http://${validatorIpList[0]}:8899 validators\n```\n\n----------------------------------------\n\nTITLE: Incrementing Cargo Version for Minor Release\nDESCRIPTION: Script command to automatically increment the minor version number in all Cargo.toml files after creating a new branch, preparing master for the next development cycle.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/RELEASE.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/increment-cargo-version.sh minor\n```\n\n----------------------------------------\n\nTITLE: Defining Address Lookup Table Constants and Metadata Structure in Rust\nDESCRIPTION: Definition of constants and the LookupTableMeta structure that manages the state of address lookup tables. The structure includes fields for deactivation slot, last extended slot, start index, and authority, with support for up to 256 addresses per table.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/versioned-transactions.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The maximum number of addresses that a lookup table can hold\npub const LOOKUP_TABLE_MAX_ADDRESSES: usize = 256;\n\n/// The serialized size of lookup table metadata\npub const LOOKUP_TABLE_META_SIZE: usize = 56;\n\npub struct LookupTableMeta {\n    /// Lookup tables cannot be closed until the deactivation slot is\n    /// no longer \"recent\" (not accessible in the `SlotHashes` sysvar).\n    pub deactivation_slot: Slot,\n    /// The slot that the table was last extended. Address tables may\n    /// only be used to lookup addresses that were extended before\n    /// the current bank's slot.\n    pub last_extended_slot: Slot,\n    /// The start index where the table was last extended from during\n    /// the `last_extended_slot`.\n    pub last_extended_slot_start_index: u8,\n    /// Authority address which must sign for each modification.\n    pub authority: Option<Pubkey>,\n    // Raw list of addresses follows this serialized structure in\n    // the account's data, starting from `LOOKUP_TABLE_META_SIZE`.\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Edge Channel Tarball Network\nDESCRIPTION: Command to deploy the latest pre-built edge channel tarball from the master branch.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./net.sh start -t edge\n```\n\n----------------------------------------\n\nTITLE: Defining Light Entry Structure in Agave\nDESCRIPTION: This code snippet defines the structure of a LightEntry, which is a simplified version of an Entry containing only the hash of transactions. It includes the number of hashes since the previous Entry ID, the SHA-256 hash after the previous Entry ID, and the Merkle Root of the transactions encoded into the Entry.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/simple-payment-and-state-verification.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/// This Entry definition skips over the transactions and only contains the\n/// hash of the transactions used to modify PoH.\nLightEntry {\n    /// The number of hashes since the previous Entry ID.\n    pub num_hashes: u64,\n    /// The SHA-256 hash `num_hashes` after the previous Entry ID.\n    hash: Hash,\n    /// The Merkle Root of the transactions encoded into the Entry.\n    entry_hash: Hash,\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Process\nDESCRIPTION: Uses ps command with grep to verify that the agave-validator process is running with the specified configuration parameters.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep agave-validator\n```\n\n----------------------------------------\n\nTITLE: Checking Epoch Information in Solana\nDESCRIPTION: Retrieves information about the current epoch to determine timing for vote authority changes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana epoch-info\n```\n\n----------------------------------------\n\nTITLE: Flowchart for Durable Nonce Account State Transitions in Solana\nDESCRIPTION: A text-based flowchart detailing the state transitions and operations for durable nonce accounts, including account creation, nonce initialization, advance nonce operations, and withdrawal functionality. It outlines the validation logic and error conditions for each operation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/durable-tx-nonces.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStart\nCreate Account\n  state = Uninitialized\nNonceInstruction\n  if state == Uninitialized\n    if account.balance < rent_exempt\n      error InsufficientFunds\n    state = Initialized\n  elif state != Initialized\n    error BadState\n  if sysvar.recent_blockhashes.is_empty()\n    error EmptyRecentBlockhashes\n  if !sysvar.recent_blockhashes.contains(stored_nonce)\n    error NotReady\n  stored_hash = sysvar.recent_blockhashes[0]\n  success\nWithdrawInstruction(to, lamports)\n  if state == Uninitialized\n    if !signers.contains(owner)\n      error MissingRequiredSignatures\n  elif state == Initialized\n    if !sysvar.recent_blockhashes.contains(stored_nonce)\n      error NotReady\n    if lamports != account.balance && lamports + rent_exempt > account.balance\n      error InsufficientFunds\n  account.balance -= lamports\n  to.balance += lamports\n  success\n```\n\n----------------------------------------\n\nTITLE: Creating GPU-Enabled Network Instances\nDESCRIPTION: Commands to create network instances with GPU support on GCE and EC2 platforms for CUDA functionality.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -g ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ec2.sh create -g ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Validator Using CLI Arguments in Solana Genesis\nDESCRIPTION: Command line arguments for setting up bootstrap validators in Solana genesis. These flags allow specifying validator identity, vote, and stake public keys along with the amount of lamports to allocate.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/genesis/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--bootstrap-validator <IDENTITY_PUBKEY> <VOTE_PUBKEY> <STAKE_PUBKEY>\n--bootstrap-validator-lamports <LAMPORTS>\n--bootstrap-validator-stake-lamports <LAMPORTS>\n```\n\n----------------------------------------\n\nTITLE: Airdropping Solana Tokens\nDESCRIPTION: Command to airdrop SOL tokens to a specified wallet address on Solana devnet\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop 1 <RECIPIENT_ACCOUNT_ADDRESS> --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Validator Loop for Leader-Validator Transition in Solana\nDESCRIPTION: This pseudocode outlines the main loop for a Solana validator, including the transition to and from the slot leader role. It covers querying the leader schedule, running the TVU, starting the TPU when becoming a leader, and producing entries during the assigned slot.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/leader-validator-transition.md#2025-04-11_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Query the LeaderScheduler for the next assigned slot.\n2. Run the TVU over all the forks.\n   1. TVU will send votes to what it believes is the \"best\" fork.\n   2. After each vote, restart the PoH Recorder to run until the next assigned slot.\n3. When time to be a slot leader, start the TPU. Point it to the last fork the TVU voted on.\n4. Produce entries until the end of the slot.\n   1. For the duration of the slot, the TVU must not vote on other forks.\n   2. After the slot ends, the TPU freezes its BankFork. After freezing, the TVU may resume voting.\n5. Goto 1.\n```\n\n----------------------------------------\n\nTITLE: Network Partition Configuration\nDESCRIPTION: JSON configuration example for creating three network partitions with specified loss rates and delays between interconnects.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/net/README.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"partitions\":[\n         34,\n         33,\n         33\n      ],\n      \"interconnects\":[\n         {\n            \"a\":0,\n            \"b\":1,\n            \"config\":\"loss 15% delay 25ms\"\n         },\n         {\n            \"a\":1,\n            \"b\":0,\n            \"config\":\"loss 15% delay 25ms\"\n         },\n         {\n            \"a\":0,\n            \"b\":2,\n            \"config\":\"loss 10% delay 15ms\"\n         },\n         {\n            \"a\":2,\n            \"b\":0,\n            \"config\":\"loss 10% delay 15ms\"\n         },\n         {\n            \"a\":2,\n            \"b\":1,\n            \"config\":\"loss 5% delay 5ms\"\n         },\n         {\n            \"a\":1,\n            \"b\":2,\n            \"config\":\"loss 5% delay 5ms\"\n         }\n      ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Solidity\nDESCRIPTION: Examples of error handling in Solidity using require() and revert() statements. These functions allow returning error messages that can help with debugging and can be caught in try-catch blocks.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/return-data.md#2025-04-11_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw() public {\n    require(msg.sender == owner, \"Permission denied\");\n}\n\nfunction failure() public {\n    revert(\"I afraid I can't do that dave\");\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning New Authority to Nonce Account in Solana CLI\nDESCRIPTION: Change the authority of a nonce account to a new account using the Solana CLI.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana authorize-nonce-account nonce-keypair.json nonce-authority.json\n```\n\n----------------------------------------\n\nTITLE: Computing Security Complexity for XOR Collision Prevention\nDESCRIPTION: Mathematical formula demonstrating the security complexity calculation for preventing XOR collisions in the snapshot verification system. Uses a 440-byte image size and accounts for 2^40 possible accounts to achieve 128-bit security.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/snapshot-verification.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nO(k * 2^(n/(1+lg(k)))\nk=2^40 accounts\nn=440\n2^(40) * 2^(448 * 8 / 41) ~= O(2^(128))\n```\n\n----------------------------------------\n\nTITLE: Calculating Canary Node Update Schedule\nDESCRIPTION: Script to calculate when a canary node will next update based on the days since epoch and update interval. Shows both days since last update and days until next update.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/cd/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDAYS_BETWEEN_UPDATES=8; d=$(expr $(date +%s) / 86400 % $DAYS_BETWEEN_UPDATES); n=$(expr $DAYS_BETWEEN_UPDATES - $d); echo \"Updated $d day(s) ago. Will update $n day(s) from now\"\n```\n\n----------------------------------------\n\nTITLE: Defining Signing Domain Specifier for Solana Off-chain Messages\nDESCRIPTION: The code defines the signing domain specifier for Solana off-chain messages. It uses a prefix byte string with '\\xff' as the first byte to prevent confusion with transaction messages, followed by the descriptive text 'solana offchain'.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/off-chain-message-signing.md#2025-04-11_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nb\"\\xffsolana offchain\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Solana Transaction\nDESCRIPTION: Command to verify transaction details and troubleshoot failed transactions\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana confirm -v <TRANSACTION_SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Solana Program ID Definition\nDESCRIPTION: The unique program identifier for the ZK ElGamal Proof program on Solana.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/runtime/zk-elgamal-proof.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nZkE1Gama1Proof11111111111111111111111111111\n```\n\n----------------------------------------\n\nTITLE: Calculating Block Timestamp in Solana Validator Timestamp Oracle\nDESCRIPTION: Pseudocode for calculating the estimated timestamp for a specific block based on a known reference timestamp. The formula adds the time offset based on slot difference and cluster slot duration.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/validator-timestamp-oracle.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlet block_n_timestamp = mean_timestamp + (block_n_slot_offset * slot_duration);\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Collection\nDESCRIPTION: Command to enable metrics collection in the current shell session. Must be sourced before starting applications for metrics collection.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/metrics/scripts/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ source ./enable.sh\n```\n\n----------------------------------------\n\nTITLE: Illustrating Slashable Vote Scenario in Blockchain Consensus\nDESCRIPTION: ASCII diagram showing an example of slashable votes vote(X', S') and vote(X, S), where a validator has voted on overlapping forks. The diagram illustrates how the vote ranges [X, S.last] and [X', S'.last] overlap, which violates the optimistic slashing conditions.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                  +-------+\n                                  |       |\n                        +---------+       +--------+\n                        |         |       |        |\n                        |         +-------+        |\n                        |                          |\n                        |                          |\n                        |                          |\n                    +---+---+                      |\n                    |       |                      |\n                X   |       |                      |\n                    |       |                      |\n                    +---+---+                      |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  X'\n                        |                      |       |\n                        |                      +---+---+\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  S'.last\n                        |                      |       |\n                        |                      +-------+\n                        |\n                    +---+---+\n                    |       |\n                 s  |       |\n                    |       |\n                    +---+---+\n                        |\n                        |\n                        |\n                        |\n                    +---+---+\n                    |       |\n             S.last |       |\n                    |       |\n                    +-------+\n```\n\n----------------------------------------\n\nTITLE: Running Validator Script\nDESCRIPTION: Executes the validator.sh script to start the Agave validator process.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/operations/setup-a-validator.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n/home/sol/bin/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Frozen ABI Attribute in Rust\nDESCRIPTION: Example showing how to apply the frozen_abi attribute to a Vote struct to ensure ABI compatibility. The attribute includes a digest value that's used to detect unauthorized changes to the struct's binary interface.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/abi-management.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[frozen_abi(digest=\"eXSMM7b89VY72V...\")]\n#[derive(Serialize, Default, Deserialize, Debug, PartialEq, Eq, Clone)]\npub struct Vote {\n    /// A stack of votes starting with the oldest vote\n    pub slots: Vec<Slot>,\n    /// signature of the bank's state at the last slot\n    pub hash: Hash,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Metrics Collection\nDESCRIPTION: Command to send a test airdrop data point to verify metrics collection is working properly.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/metrics/scripts/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./test.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Deterministic Seed Generation in Rust\nDESCRIPTION: Code snippet showing how a deterministic seed is generated based on slot, index and leader public key when the enable_deterministic_seed feature is enabled. The seed is used for weighted shuffling of epoch staked nodes.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/optimistic-transaction-propagation-signal.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nif enable_deterministic_seed(self.slot(), root_bank) {\n    hashv(&[\n        &self.slot().to_le_bytes(),\n        &self.index().to_le_bytes(),\n        &leader_pubkey.to_bytes(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Account State Structure\nDESCRIPTION: Definition of VoteState structure containing vote data, credits, commission, and authorization details for validators.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- votes - The submitted votes data structure.\n- credits - The total number of rewards this Vote program has generated\n- root_slot - The last slot to reach full lockout commitment\n- commission - The commission percentage for rewards\n- Account::lamports - Accumulated commission lamports\n- authorized_voter - Identity authorized to submit votes\n- node_pubkey - The Solana node that votes\n- authorized_withdrawer - Identity controlling account lamports\n```\n\n----------------------------------------\n\nTITLE: Stopping Metric Services\nDESCRIPTION: Command to stop the running InfluxDB and Grafana metric services.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/metrics/scripts/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ./stop.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Table Lookup Structure in Solana Transactions\nDESCRIPTION: Definition of the MessageAddressTableLookup structure used in versioned transactions to reference accounts in on-chain address lookup tables. Each lookup specifies the table account and indexes for both writable and readonly accounts.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/versioned-transactions.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Address table lookups describe an on-chain address lookup table to use\n/// for loading more readonly and writable accounts in a single tx.\n#[derive(Serialize, Deserialize)]\npub struct MessageAddressTableLookup {\n  /// Address lookup table account key\n  pub account_key: Pubkey,\n  /// List of indexes used to load writable account addresses\n  #[serde(with = \"short_vec\")]\n  pub writable_indexes: Vec<u8>,\n  /// List of indexes used to load readonly account addresses\n  #[serde(with = \"short_vec\")]\n  pub readonly_indexes: Vec<u8>,\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fork Structure in a Blockstore\nDESCRIPTION: A diagram showing a fork structure in a blockstore, where slot sequences branch from a common root, creating multiple possible paths through the blockchain.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/managing-forks.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n      2 - 4 - 6 - 8\n     /\n0 - 1       12 - 13\n     \\     /\n      3 - 5\n           \\\n            7 - 9 - 10 - 11\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Scheduling Capabilities\nDESCRIPTION: Command to set the necessary capabilities for thread scheduling priority configuration. Requires root privileges or capability setting.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/thread-manager/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n sudo setcap cap_sys_nice+ep\n```\n\n----------------------------------------\n\nTITLE: Illustrating Competing Forks in Markdown Table\nDESCRIPTION: This markdown table demonstrates how competing forks could look in Solana, showing different block arrangements across slots and forks. It illustrates how blocks can be skipped in different forks, creating distinct chain structures.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/fork-generation.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|        | Slot 1  | Slot 2  | Slot 3  | Slot 4  | Slot 5  |\n| ------ | ------- | ------- | ------- | ------- | ------- |\n| Fork 1 | Block 1 |         | Block 3 |         | Block 5 |\n| Fork 2 | Block 1 |         | Block 3 | Block 4 |         |\n| Fork 3 | Block 1 | Block 2 |         |         |         |\n```\n\n----------------------------------------\n\nTITLE: Listing Valid Fork Sequences\nDESCRIPTION: Examples of valid fork sequences that can be traced through the blockstore structure, with each sequence representing a different path from the root.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/managing-forks.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- {0, 1, 2, 4, 6, 8}\n- {0, 1, 3, 5, 12, 13}\n- {0, 1, 3, 5, 7, 9, 10, 11}\n```\n\n----------------------------------------\n\nTITLE: Basic Solana C Program Structure\nDESCRIPTION: Demonstrates the basic structure of a Solana C program, including the entrypoint function and account deserialization. This snippet shows the minimal required code to create a valid Solana program.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/platform-tools-sdk/sbf/c/README.md#2025-04-11_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <solana_sdk.h>\n\nextern uint64_t entrypoint(const uint8_t *input) {\n  SolAccountInfo ka[1];\n  SolParameters params = (SolParameters) { .ka = ka };\n\n  if (!sol_deserialize(input, &params, SOL_ARRAY_SIZE(ka))) {\n    return ERROR_INVALID_ARGUMENT;\n  }\n  return SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Steps for Client Implementation Refactoring in Rust\nDESCRIPTION: A step-by-step implementation strategy for reorganizing client code. The plan involves creating next-generation client implementations, transitioning users to the new implementations, and eventually replacing the old implementations entirely.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/rust-clients.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Add new object to `solana-sdk`, `RpcClientTng`, where the `Tng` suffix is\n   temporary and stands for \"The Next Generation\"\n2. Initialize `RpcClientTng` with a `SyncClient` implementation.\n3. Add new object to `solana-sdk`, `ThinClientTng`; initialize it with\n   `RpcClientTng` and an `AsyncClient` implementation\n4. Move all unit-tests from `BankClient` to `ThinClientTng<BankClient>`\n5. Add `ClusterClient`\n6. Move `ThinClient` users to `ThinClientTng<ClusterClient>`\n7. Delete `ThinClient` and rename `ThinClientTng` to `ThinClient`\n8. Move `RpcClient` users to new `ThinClient<ClusterClient>`\n9. Delete `RpcClient` and rename `RpcClientTng` to `RpcClient`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pruning with Super Majority Root at 0\nDESCRIPTION: Diagram showing how the blockstore is pruned when the local root is at slot 3 and the super majority root (SMR) is at slot 0, removing forks that don't originate from the root.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/managing-forks.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSMR\n 0 - 1       12 - 13\n      \\     /\n       3 - 5\n     ROOT   \\\n             7 - 9 - 10 - 11\n```\n\n----------------------------------------\n\nTITLE: Building Solana Validator Docs Locally\nDESCRIPTION: Runs the build script to generate static content for the Solana validator documentation site. This script requires Docker and generates the CLI usage documentation and SVG images from ASCII art.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Calculating Timestamp Slot in Solana Validator Timestamp Oracle\nDESCRIPTION: Pseudocode for calculating the most recently timestamped slot used in the validator timestamp oracle implementation. This formula determines which slot's timestamp should be used as a reference point.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/validator-timestamp-oracle.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlet timestamp_slot = floor(current_slot / timestamp_interval);\n```\n\n----------------------------------------\n\nTITLE: Linking to External Resources in Markdown for Solana Documentation\nDESCRIPTION: This code snippet demonstrates how to create a hyperlink in Markdown, linking to an external resource about block timestamps in Bitcoin. It shows the proper syntax for creating links in Markdown documentation.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/consensus/synchronization.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[wallclock timestamp](https://en.bitcoin.it/wiki/Block_timestamp)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image Command Structure\nDESCRIPTION: Command path structure showing the key files needed to build and publish the Docker image. Includes references to rust version configuration, environment variables, and Dockerfile location.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/ci/docker/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nci/rust-version.sh\nci/docker/env.sh\nci/docker/Dockerfile\nci/docker/build.sh\n```\n\n----------------------------------------\n\nTITLE: Computing Bank Hash in Solana Runtime\nDESCRIPTION: Shows how a bank hash is computed by combining parent hash, accounts delta hash, signature count, and latest blockhash. This hash is critical for block verification and transaction inclusion proofs.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/simple-payment-and-state-verification.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n        let mut hash = hashv(&[\n            // bank hash of the parent block\n            self.parent_hash.as_ref(),\n            // hash of all the modified accounts\n            accounts_delta_hash.hash.as_ref(),\n            // Number of signatures processed in this block\n            &signature_count_buf,\n            // Last PoH hash in this block\n            self.latest_blockhash().as_ref(),\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Calculating Vote Lockout Period in PoS System\nDESCRIPTION: Formula for calculating the lockout period for validator votes based on the PoH (Proof of History) height. The lockout duration is determined by the initial vote height (PoHi) and subsequent vote height (PoHj), with an exponential scaling factor K.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/slashing.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLockouti(PoHi, PoHj) = PoHj + K * exp((PoHj - PoHi) / K)\n```\n\n----------------------------------------\n\nTITLE: Starting Bootstrap Validator\nDESCRIPTION: Command to start the bootstrap validator node.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./multinode-demo/bootstrap-validator.sh\n```\n\n----------------------------------------\n\nTITLE: Using Primordial Accounts File Flag in Solana Genesis\nDESCRIPTION: Command line flag for specifying a primordial accounts file in Solana genesis. This approach allows adding accounts of any type with custom data and metadata.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/genesis/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--primordial-accounts-file <PATH_TO_PRIMORDIAL_ACCOUNTS_YAML>\n```\n\n----------------------------------------\n\nTITLE: Vote Tower Maintenance Algorithm\nDESCRIPTION: Algorithm for maintaining the vote tower data structure, including rules for adding new votes, removing expired blocks, and updating confirmation counts. The algorithm ensures proper tracking of validator votes and lockout periods.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/tower-bft.md#2025-04-11_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Remove expired blocks top down:\n   x := l - 1\n   While x >= 0 && lockexp(T(x)) < slot(B):\n     remove T(x) from tower\n     l := l - 1\n     x := x - 1\n2. Add block to tower:\n   T(l) := B\n   confcount(B) := 1\n   l := l + 1\n3. Double lockouts:\n   For each element B = T(x):\n     if l > x + confcount(B):\n       confcount(B) := confcount(B) + 1\n```\n\n----------------------------------------\n\nTITLE: Starting Additional Validator\nDESCRIPTION: Command to start additional validator nodes for a multinode testnet.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./multinode-demo/validator-x.sh\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage of SOL Staked in Solana\nDESCRIPTION: This LaTeX equation calculates the percentage of SOL staked in the Solana network by dividing the total SOL staked by the total current supply.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/implemented-proposals/ed_overview/ed_validation_client_economics/ed_vce_state_validation_protocol_based_rewards.md#2025-04-11_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\%~\\text{SOL Staked} = \\frac{\\text{Total SOL Staked}}{\\text{Total Current Supply}}\n```\n\n----------------------------------------\n\nTITLE: Rebasing to Purge Cherry-Picked Commits in Git\nDESCRIPTION: This snippet demonstrates how to rebase a branch after a cherry-picked commit has been merged, pulling in the latest changes from the upstream master branch and removing the duplicated commit.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git pull --rebase upstream master\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging\nDESCRIPTION: Examples of setting debug log levels for different components.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport RUST_LOG=solana=info,solana::banking_stage=debug\nexport RUST_LOG=solana_bpf_loader=trace\n```\n\n----------------------------------------\n\nTITLE: Committing Version Updates to Master Branch\nDESCRIPTION: Git commands for creating a branch for version updates, adding all modified Cargo.toml and Cargo.lock files, committing the changes, and pushing them to the remote repository.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/RELEASE.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit co -b version_update\\ngit ls-files -m | xargs git add\\ngit commit -m 'Bump version to X.Y+1.0'\\ngit push -u origin version_update\n```\n\n----------------------------------------\n\nTITLE: Calculating Bounty Split for Duplicate Reports in Markdown\nDESCRIPTION: This code snippet shows a formula and examples for calculating the share of bounty rewards when multiple reports are submitted for the same vulnerability. It uses a priority-based system to determine the split.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/SECURITY.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nR: total reports\nri: report priority\nbi: bounty share\n\nbi = 2 ^ (R - ri) / ((2^R) - 1)\n```\n```\n\n----------------------------------------\n\nTITLE: Debugging with GDB\nDESCRIPTION: Commands for attaching GDB to a running validator process and generating stack traces.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/benchmark.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo gdb\nattach <PID>\nset logging on\nthread apply all bt\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Nightly for Benchmarking\nDESCRIPTION: Command to install the nightly build of Rust, which is required for running benchmarks that use unstable features.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup install nightly\n```\n\n----------------------------------------\n\nTITLE: Storing Proptest Failure Seed for Shrinking Test\nDESCRIPTION: This line captures a specific proptest failure case with its hash and the shrunk test parameters that caused the failure. It shows a case where coding_indices, data_indices, and slot values are tracked for regression testing.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/ledger/proptest-regressions/blockstore_meta.txt#2025-04-11_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncc d28b14f167a3950cfc2a5b82dff1e15c65e9ac23a5c249f812e69af96c3489ed # shrinks to coding_indices = 0..0, data_indices = 2984..15152, slot = 0\n```\n\n----------------------------------------\n\nTITLE: Creating GPU-Enabled Network Instances (GCE)\nDESCRIPTION: Command to create network instances with GPU support on Google Cloud Engine (GCE). This is a prerequisite for enabling CUDA on the network.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -g ...\n```\n\n----------------------------------------\n\nTITLE: Removing Network Partition\nDESCRIPTION: Command to remove a previously induced network partition. This can be done explicitly or by stopping or restarting the network.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ net.sh netem --config-file <config file path> --netem-cmd cleanup\n```\n\n----------------------------------------\n\nTITLE: Creating GPU-Enabled Network Instances (EC2)\nDESCRIPTION: Command to create network instances with GPU support on Amazon EC2. This is a prerequisite for enabling CUDA on the network.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/contributing/testnet.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ec2.sh create -g ...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Epoch Boundary Block Relationships\nDESCRIPTION: This ASCII diagram illustrates the relationship between blocks at an epoch boundary, showing how multiple forks can occur and potentially trigger duplicate reward calculations.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/src/proposals/partitioned-inflationary-rewards-distribution.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nN-1 -- N -- N+1\n     \\\n      \\\n        N+2\n```\n\n----------------------------------------\n\nTITLE: Implementing TransactionProcessingCallback Trait for SVM Integration in Rust\nDESCRIPTION: Definition of the TransactionProcessingCallback trait that must be implemented by SVM consumers to provide account loading capabilities to the transaction processor. This trait enables retrieval of account data and ownership information needed during transaction processing.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/svm/doc/spec.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait TransactionProcessingCallback {\n    fn account_matches_owners(&self, account: &Pubkey, owners: &[Pubkey]) -> Option<usize>;\n\n    fn get_account_shared_data(&self, pubkey: &Pubkey) -> Option<AccountSharedData>;\n\n    fn add_builtin_account(&self, _name: &str, _program_id: &Pubkey) {}\n\n    fn get_current_epoch_vote_account_stake(&self, _vote_address: &Pubkey) -> u64;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tools Version in Cargo.toml for SBF Programs\nDESCRIPTION: Example configuration showing how to specify a custom tools version at package or workspace level in Cargo.toml for building on-chain programs with cargo-build-sbf.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package.metadata.solana]\ntools-version = \"1.43\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[workspace.metadata.solana]\ntools-version = \"1.43\"\n```\n\n----------------------------------------\n\nTITLE: Implementing KaTeX with HTML5 Starter Template\nDESCRIPTION: HTML5 starter template that includes KaTeX via CDN. It loads the required CSS, the main KaTeX library, and the auto-render extension which automatically renders math expressions on the page.\nSOURCE: https://github.com/anza-xyz/agave/blob/master/docs/static/katex/README.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\">\n\n    <!-- The loading of KaTeX is deferred to speed up page rendering -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\" integrity=\"sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\" crossorigin=\"anonymous\"></script>\n\n    <!-- To automatically render math in text elements, include the auto-render extension: -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\" integrity=\"sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\" crossorigin=\"anonymous\"\n        onload=\"renderMathInElement(document.body);\"></script>\n  </head>\n  ...\n</html>\n```"
  }
]