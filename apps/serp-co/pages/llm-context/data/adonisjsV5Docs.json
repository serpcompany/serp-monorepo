[
  {
    "owner": "adonisjs",
    "repo": "v5-docs",
    "content": "TITLE: Creating Basic Lucid Model in TypeScript\nDESCRIPTION: Shows how to create a basic Lucid model by extending the BaseModel class from AdonisJS Lucid ORM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Verb Route Definitions\nDESCRIPTION: Examples of defining routes for different HTTP verbs using Route methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('posts', async () => {})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.post('posts', async () => {})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.put('posts/:id', async () => {})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.patch('posts/:id', async () => {})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.delete('posts/:id', async () => {})\n```\n\n----------------------------------------\n\nTITLE: Defining a Migration Class in AdonisJS\nDESCRIPTION: Shows the structure of a migration class in AdonisJS. The class extends BaseSchema and implements up and down methods for evolving and rolling back database schema changes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'users'\n\n  public async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n\n  public async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a HasMany Relationship in TypeScript\nDESCRIPTION: Shows how to define a HasMany relationship between User and Post models using decorators, and how to access the relationship instance using the $getRelation method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, hasMany, HasMany } from '@ioc:Adonis/Lucid/Orm'\nimport Post from 'App/Models/Post'\n\nclass User extends BaseModel {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.$getRelation('posts').relationName\nUser.$getRelation('posts').type\nUser.$getRelation('posts').relatedModel()\n```\n\n----------------------------------------\n\nTITLE: Defining a HasManyThrough Relationship in AdonisJS Lucid ORM\nDESCRIPTION: Example of defining a HasManyThrough relationship between Country, Post, and User models, where a country has many posts through users. This demonstrates importing necessary components and defining the relationship using decorators.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  hasManyThrough,\n  HasManyThrough,\n} from '@ioc:Adonis/Lucid/Orm'\n\nimport Post from 'App/Models/Post'\nimport User from 'App/Models/User'\n\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User])\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreateMany Method in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the updateOrCreateMany method to sync rows by avoiding duplicate entries based on a unique key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst usersToCreate = [\n  {\n    email: 'foo@example.com',\n  },\n  {\n    email: 'bar@example.com',\n  },\n  {\n    email: 'baz@example.com',\n  }\n]\n\nawait User.updateOrCreateMany('email', usersToCreate)\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Shield Package in AdonisJS\nDESCRIPTION: Steps to install, configure and register the Shield middleware for AdonisJS security features\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/web-security.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/shield@7.1.1\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/shield\n```\n\nLANGUAGE: ts\nCODE:\n```\nServer.middleware.register([\n  () => import('@ioc:Adonis/Core/BodyParser'),\n  () => import('@ioc:Adonis/Addons/Shield')\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Domain-Specific Routes in AdonisJS\nDESCRIPTION: This code snippet demonstrates how to define routes for specific domains or subdomains in AdonisJS. It includes an example of using dynamic parameters in the domain.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .group(() => {\n    Route.get('/', 'PostsController.index')\n    Route.get('/:id', 'PostsController.show')\n  })\n  .domain('blog.adonisjs.com')\n\nRoute\n  .group(() => {\n    Route.get('/', ({ subdomains }) => {\n      // highlight-start\n      console.log(subdomains.tenant)\n      // highlight-end\n    })\n  })\n  // highlight-start\n  .domain(':tenant.adonisjs.com')\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Counting Related Records with withCount\nDESCRIPTION: Shows how to use the withCount method as a simplified way to count related records for each parent model in a query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().withCount('comments')\n\nposts.forEach((post) => {\n  console.log(post.$extras.comments_count)\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing a Single Model Instance in TypeScript\nDESCRIPTION: Demonstrates how to serialize a single model instance using the 'serialize' method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.find(1)\nconst postJSON = post.serialize()\n```\n\n----------------------------------------\n\nTITLE: Creating and Persisting a New User in AdonisJS\nDESCRIPTION: This snippet demonstrates how to create a new User instance, assign values, and save it to the database using the save method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nconst user = new User()\n\n// Assign username and email\nuser.username = 'virk'\nuser.email = 'virk@adonisjs.com'\n\n// Insert to the database\nawait user.save()\n\nconsole.log(user.$isPersisted) // true\n```\n\n----------------------------------------\n\nTITLE: Conditional Querying with 'if' in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'if' helper for conditional querying, including an example with an else condition.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .if(searchQuery, (query) => {\n    query.where('first_name', 'like', `%${searchQuery}%`)\n    query.where('last_name', 'like', `%${searchQuery}%`)\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .if(\n    condition,\n    (query) => {}, // if condition met\n    (query) => {}, // otherwise execute this\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Resourceful Routes with Route.resource\nDESCRIPTION: Shows how to use Route.resource to register all CRUD routes for a resource with a single line of code. This shortcut method follows RESTful conventions and registers all necessary routes automatically.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.resource('posts', 'PostsController')\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections in AdonisJS\nDESCRIPTION: Example configuration for database connections in AdonisJS, including settings for the default connection, available connections, and migration options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport Env from '@ioc:Adonis/Core/Env'\nimport { DatabaseConfig } from '@ioc:Adonis/Lucid/Database'\n\nconst databaseConfig: DatabaseConfig = {\n  // Default connection\n  connection: Env.get('DB_CONNECTION'),\n\n  // List of available connections\n  connections: {\n    pg: {\n      client: 'pg',\n      connection: {\n        host: Env.get('PG_HOST'),\n        port: Env.get('PG_PORT'),\n        user: Env.get('PG_USER'),\n        password: Env.get('PG_PASSWORD', ''),\n        database: Env.get('PG_DB_NAME'),\n      },\n      migrations: {\n        naturalSort: true,\n      },\n      healthCheck: false,\n      debug: false,\n    },\n  }\n}\n\nexport default databaseConfig\n```\n\n----------------------------------------\n\nTITLE: Dissociating Models in belongsTo Relationships\nDESCRIPTION: Shows how to remove an association between models in a belongsTo relationship using the dissociate method, which sets the foreign key to null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nawait profile = await Profile.findOrFail(1)\nawait profile.related('user').dissociate()\n```\n\n----------------------------------------\n\nTITLE: Security Headers Configuration\nDESCRIPTION: Configuration settings for various security headers including DNS prefetching, Frame guard, and HSTS\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/web-security.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const hsts: ShieldConfig['hsts'] = {\n  enabled: true,\n  maxAge: '180 days',\n  includeSubDomains: true,\n  preload: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Password Hashing Model Hook - TypeScript\nDESCRIPTION: Implementation of a model hook to automatically hash passwords before saving.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Hash from '@ioc:Adonis/Core/Hash'\nimport { column, beforeSave, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column({ serializeAs: null })\n  public password: string\n\n  @beforeSave()\n  public static async hashPassword(user: User) {\n    if (user.$dirty.password) {\n      user.password = await Hash.make(user.password)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Insert Query Using the table Method in TypeScript\nDESCRIPTION: An alternative way to create an insert query builder instance by directly calling the .table() method instead of .insertQuery(), which produces the same INSERT query result.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database\n  .table('users') // 👈 gives an instance of insert query builder\n  .insert({ username: 'virk', email: 'virk@adonisjs.com' })\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Database Global Transaction in AdonisJS Tests\nDESCRIPTION: Setup code for managing database state in tests using global transactions. The transaction begins before each test and rolls back after completion, ensuring a clean database state.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\ntest.group('Group name', (group) => {\n  group.each.setup(async () => {\n    await Database.beginGlobalTransaction()\n    return () => Database.rollbackGlobalTransaction()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Ace Command Structure\nDESCRIPTION: Template of a basic Ace command class showing the main components like commandName, description, settings, and the run method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/build/standalone'\n\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n\n  public static description = ''\n\n  public static settings = {\n    loadApp: false,\n    stayAlive: false,\n  }\n\n  public async run () {\n    this.logger.info('Hello world!')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Generation in Edge Templates\nDESCRIPTION: Demonstrates how to generate URLs in Edge template files using the route helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n<form method=\"POST\" action=\"{{ route('posts.create') }}\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Related Records\nDESCRIPTION: Demonstrates how to create multiple related records at once using the createMany method, which is available for hasMany and manyToMany relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst comments = await Post\n  .related('comments')\n  .createMany([\n    {\n      body: 'This is a great post.'\n    },\n    {\n      body: 'Well written.'\n    }\n  ])\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Fields without Data Models in TypeScript\nDESCRIPTION: This snippet demonstrates how to format date fields from a database query result without using data models. It uses the Luxon library to format the date of birth field.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nconst users = await Database.from('users').select('*')\n\nreturn users.map((user) => {\n  user.dob = DateTime.fromJSDate(user.dob).toFormat('dd LLL yyyy')\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Route Parameter Handling\nDESCRIPTION: Examples of handling route parameters including optional and wildcard parameters.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/posts/:id', async ({ params }) => {\n  return `Viewing post with id ${params.id}`\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/posts/:id?', async ({ params }) => {\n  if (params.id) {\n    return `Viewing post with id ${params.id}`\n  }\n  return 'Viewing all posts'\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Resourceful Routes with except Method\nDESCRIPTION: Shows how to exclude specific actions from a resourceful route using the except method. This is useful when you want to prevent certain operations on a resource, like updating or deleting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .resource('comments', 'CommentsController')\n  .except(['update', 'destroy']) // 👈\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the paginate method for offset-based pagination. This method automatically counts the total number of rows and returns a SimplePaginator instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = request.input('page', 1)\nconst limit = 20\n\nconst results = await Database\n  .from('users')\n  .paginate(page, limit)\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-stage Dockerfile for AdonisJS\nDESCRIPTION: The complete Dockerfile combining all stages for an AdonisJS application. It follows best practices like using a non-root user, proper signal handling with dumb-init, and efficient layer caching with multi-stage builds.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG NODE_IMAGE=node:16.13.1-alpine\n\nFROM $NODE_IMAGE AS base\nRUN apk --no-cache add dumb-init\nRUN mkdir -p /home/node/app && chown node:node /home/node/app\nWORKDIR /home/node/app\nUSER node\nRUN mkdir tmp\n\nFROM base AS dependencies\nCOPY --chown=node:node ./package*.json ./\nRUN npm ci\nCOPY --chown=node:node . .\n\nFROM dependencies AS build\nRUN node ace build --production\n\nFROM base AS production\nENV NODE_ENV=production\nENV PORT=$PORT\nENV HOST=0.0.0.0\nCOPY --chown=node:node ./package*.json ./\nRUN npm ci --production\nCOPY --chown=node:node --from=build /home/node/app/build .\nEXPOSE $PORT\nCMD [ \"dumb-init\", \"node\", \"server.js\" ]\n```\n\n----------------------------------------\n\nTITLE: Fetching All Users from Database in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the all method to fetch all users from the database, returning an array of model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.all()\n// SQL: SELECT * from \"users\" ORDER BY \"id\" DESC;\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships within a Transaction\nDESCRIPTION: Demonstrates creating a user and their profile within a single transaction. The relationship automatically inherits the transaction from the parent model, ensuring both operations succeed or fail together.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport User from 'App/Models/User'\n\n// highlight-start\nawait Database.transaction(async (trx) => {\n  const user = new User()\n  user.username = 'virk'\n\n  user.useTransaction(trx)\n  await user.save()\n\n  /**\n   * The relationship will implicitly reference the \n   * transaction from the user instance\n   */\n  await user.related('profile').create({\n    fullName: 'Harminder Virk',\n    avatar: 'some-url.jpg',\n  })\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining a Comprehensive User Model in TypeScript\nDESCRIPTION: This snippet demonstrates a more comprehensive User model with various column types, including primary key, string fields, password field (not serialized), and date fields with auto-creation and auto-update options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column()\n  public username: string\n\n  @column()\n  public email: string\n\n  @column({ serializeAs: null })\n  public password: string\n\n  @column()\n  public avatarUrl: string | null\n\n  @column.dateTime({ autoCreate: true })\n  public createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  public updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Complete CRUD Routes Implementation\nDESCRIPTION: This example shows a complete set of routes for performing CRUD operations on a resource, including routes for displaying forms, creating, reading, updating, and deleting resources.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/posts', () => {\n  return 'List all posts'\n})\n\nRoute.get('/posts/create', () => {\n  return 'Display a form to create a post'\n})\n\nRoute.post('/posts', async () => {\n  return 'Handle post creation form request'\n})\n\nRoute.get('/posts/:id', () => {\n  return 'Return a single post'\n})\n\nRoute.get('/posts/:id/edit', () => {\n  return 'Display a form to edit a post'\n})\n\nRoute.put('/posts/:id', () => {\n  return 'Handle post update form submission'\n})\n\nRoute.delete('/posts/:id', () => {\n  return 'Delete post'\n})\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the Google OAuth driver in AdonisJS Ally, including client ID, secret, callback URL, and Google-specific options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ngoogle: {\n  driver: 'google',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n\n  // Google specific\n  prompt: 'select_account',\n  accessType: 'offline',\n  hostedDomain: 'adonisjs.com',\n  display: 'page',\n  scopes: ['userinfo.email', 'calendar.events'],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in AdonisJS Route Handler\nDESCRIPTION: Demonstrates how to access and use various properties of the HTTP context within a route handler, including request, auth, and response objects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', ({ request, auth, response }) => {\n  /**\n   * Request URL\n   */\n  console.log(request.url())\n\n  /**\n   * Request body + query params\n   */\n  console.log(request.all())\n\n  /**\n   * Send response\n   */\n  response.send('hello world')\n  response.send({ hello: 'world' })\n\n  /**\n   * Available when auth is configured\n   */\n  console.log(auth.user)\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping API Routes with Prefix in AdonisJS\nDESCRIPTION: This code snippet shows how to group API routes with a '/api' prefix in AdonisJS. It demonstrates the use of Route.group() method to organize related routes and apply common configurations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.group(() => {\n  Route.get('/users', 'UsersController.index')\n  Route.get('/posts', 'PostsController.index')\n}).prefix('/api')\n\n// SPA route\nRoute.on('*').render('app')\n```\n\n----------------------------------------\n\nTITLE: Basic Route Middleware Implementation in TypeScript\nDESCRIPTION: Example showing how to attach a simple middleware function to a route using Route.middleware method in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .get('/users/:id', async () => {\n    return 'Show user'\n  })\n  .middleware(async (ctx, next) => {\n    console.log(`Inside middleware ${ctx.request.url()}`)\n    await next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Transactions in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the useTransaction method to wrap a query inside a database transaction. This ensures that the update operation is part of a transaction that can be committed or rolled back.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await Database.transaction()\n\nDatabase\n  .from('users')\n  .useTransaction(trx) // 👈\n  .where('id', 1)\n  .update({ email: 'virk@adonisjs.com' })\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Providers in AdonisJS\nDESCRIPTION: Example configuration for social providers (GitHub and Twitter) in the config/ally.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst allyConfig: AllyConfig = {\n  github: {\n    driver: 'github',\n    clientId: Env.get('GITHUB_CLIENT_ID'),\n    clientSecret: Env.get('GITHUB_CLIENT_SECRET'),\n    callbackUrl: 'http://localhost:3333/github',\n  },\n  twitter: {\n    driver: 'twitter',\n    clientId: Env.get('TWITTER_CLIENT_ID'),\n    clientSecret: Env.get('TWITTER_CLIENT_SECRET'),\n    callbackUrl: 'http://localhost:3333/twitter',\n  },\n}\n\nexport default allyConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Table Builder Instance in TypeScript\nDESCRIPTION: Example showing how to access the table builder instance using schema builder methods in a migration class.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.schema.createTable('users', (table) => {\n      console.log(table) // 👈 Table builder\n    })\n\n    this.schema.table('users', (table) => {\n      console.log(table) // 👈 Table builder\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads in AdonisJS\nDESCRIPTION: Shows how to test file uploads using in-memory files and faked Drive implementation in AdonisJS tests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport Drive from '@ioc:Adonis/Core/Drive'\nimport { file } from '@ioc:Adonis/Core/Helpers'\n\ntest('a user can update avatar', async ({ client, assert }) => {\n  const fakeDrive = Drive.fake()\n\n  const fakeAvatar = await file.generatePng('1mb')\n\n  await client\n    .put(`/me`)\n    .loginAs(user)\n    .file('avatar', fakeAvatar.contents, { filename: fakeAvatar.name })\n\n  assert.isTrue(await fakeDrive.exists(fakeAvatar.name))\n\n  Drive.restore()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in AdonisJS Migration\nDESCRIPTION: Shows how to create a new database table using the schema.createTable method in a migration file. This example creates a users table with id and timestamp columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'users'\n\n  public async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n\n  public async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Transaction Management\nDESCRIPTION: Methods for managing global database transactions, including begin, commit, and rollback operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.beginGlobalTransaction()\n\n// for a named connection\nawait Database.beginGlobalTransaction('pg')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.commitGlobalTransaction()\nawait Database.commitGlobalTransaction('pg')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.rollbackGlobalTransaction()\nawait Database.rollbackGlobalTransaction('pg')\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate Method in AdonisJS\nDESCRIPTION: This code shows how to use the updateOrCreate method to either create a new record or update an existing one based on a search payload.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst searchPayload = { email: 'virk@adonisjs.com' }\nconst persistancePayload = { password: 'secret' }\n\nawait User.updateOrCreate(searchPayload, persistancePayload)\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Models by Primary Keys\nDESCRIPTION: Shows how to find multiple model instances by an array of primary key values. Uses a 'where in' SQL clause internally and returns results ordered by primary key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.findMany([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Basic Database Queries with Lucid ORM in AdonisJS\nDESCRIPTION: Examples of basic database operations using Lucid ORM in AdonisJS, including selecting, inserting, updating, and deleting records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('posts', async () => {\n  return Database.from('posts').select('*')\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('posts', async ({ request }) => {\n  const limit = 20\n  const page = request.input('page', 1)\n\n  return Database\n    .from('posts')\n    .select('*')\n    .orderBy('id', 'desc') // 👈 get latest first\n    .paginate(page, limit) // 👈 paginate using page numbers\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst postId = await Database\n  .table('posts')\n  .insert({\n    title: 'Adonis 101',\n    description: 'Let\\'s learn AdonisJS'\n  })\n  .returning('id') // For PostgreSQL\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst updatedRowsCount = await Database\n  .from('posts')\n  .where('id', 1)\n  .update({ title: 'AdonisJS 101' })\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst deletedRowsCount = await Database\n  .from('posts')\n  .where('id', 1)\n  .delete()\n```\n\n----------------------------------------\n\nTITLE: Basic Test Example in AdonisJS\nDESCRIPTION: Simple functional test demonstrating how to test a welcome page route using the Japa testing framework.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest('display welcome page', async ({ client }) => {\n  const response = await client.get('/')\n\n  response.assertStatus(200)\n  response.assertTextIncludes('<h1 class=\"title\"> It Works! </h1>')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Lucid ORM in AdonisJS\nDESCRIPTION: Steps to install the Lucid ORM package and configure it for use in an AdonisJS project. Includes environment variable validation for PostgreSQL.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/lucid@18.4.0\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/lucid\n\n# CREATE: config/database.ts\n# UPDATE: .env,.env.example\n# UPDATE: tsconfig.json { types += \"@adonisjs/lucid\" }\n# UPDATE: .adonisrc.json { commands += \"@adonisjs/lucid/build/commands\" }\n# UPDATE: .adonisrc.json { providers += \"@adonisjs/lucid\" }\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport default Env.rules({\n  PG_HOST: Env.schema.string({ format: 'host' }),\n  PG_PORT: Env.schema.number(),\n  PG_USER: Env.schema.string(),\n  PG_PASSWORD: Env.schema.string.optional(),\n  PG_DB_NAME: Env.schema.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Generated Tokens in AdonisJS\nDESCRIPTION: Implementation of an authenticated route that verifies the API token before processing the request. It uses the auth.authenticate() method to validate the token and then accesses the authenticated user through the auth.user property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('dashboard', async ({ auth }) => {\n  await auth.use('api').authenticate()\n  console.log(auth.use('api').user!)\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Model Query Builder Method\nDESCRIPTION: Demonstrates how to use the custom 'getCount' method that was added to the Model query builder to count User model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nawait User.query().getCount()\n```\n\n----------------------------------------\n\nTITLE: Creating User and Logging In After OAuth in AdonisJS\nDESCRIPTION: Example of creating a user account and logging in after successful OAuth authentication with GitHub.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport User from 'App/Models/User'\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('/github/callback', async ({ ally, auth }) => {\n  const github = ally.use('github')\n\n  /**\n   * Managing error states here\n   */\n\n  const githubUser = await github.user()\n\n  /**\n   * Find the user by email or create\n   * a new one\n   */\n  const user = await User.firstOrCreate({\n    email: githubUser.email,\n  }, {\n    name: githubUser.name,\n    accessToken: githubUser.token.token,\n    isVerified: githubUser.emailVerificationState === 'verified'\n  })\n\n  /**\n   * Login user using the web guard\n   */\n  await auth.use('web').login(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Middleware with Runtime Configuration\nDESCRIPTION: Implementation of a middleware class that accepts runtime configuration through the handle method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Auth {\n  public async handle(\n    { request, response }: HttpContextContract,\n    next: () => Promise<void>,\n    guards?: string[]\n  ) {\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Object in AdonisJS Route Handler\nDESCRIPTION: Shows how to access and use the response object from the HTTP context in an AdonisJS route handler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', (ctx) => {\n  ctx.response.send('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations in AdonisJS\nDESCRIPTION: Demonstrates how to rollback all migrations and then re-run them using a single command. This effectively recreates the entire database schema.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode ace migration:refresh\n\n# Refresh the database and run all seeders\nnode ace migration:refresh --seed\n```\n\n----------------------------------------\n\nTITLE: Using Session Flash Messages in AdonisJS\nDESCRIPTION: Example of using flash messages between requests for displaying temporary information like success messages or validation errors.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/', async ({ session, response }) => {\n  // highlight-start\n  session.flash('message', 'Hello world')\n  // highlight-end\n  response.redirect('/see-message')\n})\n\nRoute.get('/see-message', async ({ session }) => {\n  // highlight-start\n  return session.flashMessages.get('message')\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Paginating Database Results with Lucid ORM in TypeScript\nDESCRIPTION: Demonstrates how to use the .paginate method to fetch paginated results from the database. It shows how to specify the page number and limit, and explains the structure of the returned SimplePaginator object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = request.input('page', 1)\nconst limit = 10\n\nconst posts = await Database.from('posts').paginate(page, limit)\nconsole.log(posts)\n```\n\n----------------------------------------\n\nTITLE: Performing Select Operations with Database Query Builder in TypeScript\nDESCRIPTION: Creates a query builder instance to perform SELECT operations using the .query() method, which selects all fields from the users table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nconst users = await Database\n  .query()  // 👈 gives an instance of select query builder\n  .from('users')\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Generating API Tokens with Credentials Verification in AdonisJS\nDESCRIPTION: Implementation of a login route that attempts to authenticate a user with email and password, then generates an API token if credentials are valid. This uses the auth.attempt() method which handles user lookup and password verification automatically.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.post('login', async ({ auth, request, response }) => {\n  const email = request.input('email')\n  const password = request.input('password')\n\n  try {\n    // highlight-start\n    const token = await auth.use('api').attempt(email, password)\n    return token\n    // highlight-end\n  } catch {\n    return response.unauthorized('Invalid credentials')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Bouncer Policy in TypeScript\nDESCRIPTION: Example of creating a PostPolicy class for managing post-related permissions and registering it with Bouncer. This demonstrates how to organize complex authorization logic into separate policy files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Post from 'App/Models/Post'\nimport { BasePolicy } from '@ioc:Adonis/Addons/Bouncer'\n\nexport default class PostPolicy extends BasePolicy {\n  public async view(user: User, post: Post) {\n    return post.userId === user.id\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { policies } = Bouncer.registerPolicies({\n  PostPolicy: () => import('App/Policies/PostPolicy')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Records with update in AdonisJS\nDESCRIPTION: The update method allows updating one or more database rows. It supports additional constraints and can return specified columns in PostgreSQL, Oracle, and MSSQL databases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst affectedRows = Database\n  .from('users')\n  .where('id', 1)\n  .update({ email: 'virk@adonisjs.com' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = Database\n  .from('users')\n  .where('id', 1)\n  .update(\n    { email: 'virk@adonisjs.com' },\n    ['id', 'email'] // columns to return\n  )\n\nconsole.log(rows[0].id)\nconsole.log(rows[0].email)\n```\n\n----------------------------------------\n\nTITLE: Using Managed Transactions in Lucid ORM\nDESCRIPTION: Implements a managed transaction that automatically handles commit and rollback operations. The transaction commits after successful execution of the callback function or rolls back if an exception occurs.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.transaction(async (trx) => {\n  await trx\n    .insertQuery()\n    .table('users')\n    .insert({ username: 'virk' })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Remember Me Option in AdonisJS Authentication\nDESCRIPTION: This code shows how to use the remember me option with various login methods in AdonisJS web authentication, creating a persistent login session.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst rememberMe = true\n\nawait auth.use('web').attempt(email, password, rememberMe)\nawait auth.use('web').login(user, rememberMe)\nawait auth.use('web').loginViaId(1, rememberMe)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic User Model in TypeScript\nDESCRIPTION: This snippet shows the basic structure of a User model in AdonisJS, extending BaseModel and defining primary key, created_at, and updated_at columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column.dateTime({ autoCreate: true })\n  public createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  public updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in Users with AdonisJS Auth\nDESCRIPTION: Example route handler showing how to login a user using the web guard. It accepts email and password inputs from the request and attempts authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// title: Login user\nRoute.post('login', async ({ auth, request }) => {\n  const email = request.input('email')\n  const password = request.input('password')\n\n  await auth.use('web').attempt(email, password)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Relationship Query Builder\nDESCRIPTION: Shows how to use the related method to get a query builder for a relationship that's automatically scoped to the parent model instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst posts = await user.related('posts').query()\n```\n\n----------------------------------------\n\nTITLE: Using merge Method for Updating a User in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the merge method to update multiple attributes of a user at once before saving.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .merge({ lastLoginAt: DateTime.local() })\n  .save()\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Japa Tests for AdonisJS v5\nDESCRIPTION: This example shows how to use lifecycle hooks (before, beforeEach, after, afterEach) in Japa test groups for AdonisJS v5.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntest.group('Example', (group) => {\n  group.before(async () => {\n    console.log('before all tests')\n  })\n\n  group.beforeEach(async () => {\n    console.log('before every test')\n  })\n\n  group.after(async () => {\n    console.log('after all tests')\n  })\n\n  group.afterEach(async () => {\n    console.log('after every test')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exception\nDESCRIPTION: Example of throwing a custom exception with message, status, and error code\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnAuthorized from 'App/Exceptions/UnAuthorizedException'\n\nconst message = 'You are not authorized'\nconst status = 403\nconst errorCode = 'E_UNAUTHORIZED'\n\nthrow new UnAuthorized(message, status, errorCode)\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate Method in AdonisJS\nDESCRIPTION: This code shows how to use the firstOrCreate method to search for a record or create a new one if it doesn't exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst searchPayload = { email: 'virk@adonisjs.com' }\nconst savePayload = { password: 'secret' }\n\nawait User.firstOrCreate(searchPayload, savePayload)\n```\n\n----------------------------------------\n\nTITLE: Defining Guest User Actions in Bouncer\nDESCRIPTION: Example of defining a Bouncer action that allows guest users to view published posts while restricting access to unpublished posts for non-authors.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { actions } = Bouncer\n  .define('viewPost', (user: User | null, post: Post) => {\n    if (post.status === 'published') {\n      return true\n    }\n\n    if (!user) {\n      return false\n    }\n\n    return post.userId === user.id\n  }, {\n    allowGuest: true,\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with AdonisJS Schema Builder\nDESCRIPTION: Demonstrates how to create a new database table using the createTable method. It accepts a table name and a callback that receives the table builder instance for defining columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.schema.createTable('users', (table) => {\n      table.increments()\n      table.string('name')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Builder for Advanced Queries in AdonisJS\nDESCRIPTION: This code shows how to use the query builder API for making advanced SQL queries, returning an array of model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query() // 👈now have access to all query builder methods\n  .where('countryCode', 'IN')\n  .orWhereNull('countryCode')\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Validation with Error Handling\nDESCRIPTION: Complete example of HTTP request validation including schema definition, validation rules, and error handling.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\nRoute.post('users', async ({ request, response }) => {\n  /**\n   * Step 1 - Define schema\n   */\n  const newUserSchema = schema.create({\n    username: schema.string(),\n    email: schema.string([\n      rules.email()\n    ]),\n    password: schema.string([\n      rules.confirmed(),\n      rules.minLength(4)\n    ])\n  })\n\n  try {\n    /**\n     * Step 2 - Validate request body against\n     *          the schema\n     */\n    const payload = await request.validate({\n      schema: newUserSchema\n    })\n  } catch (error) {\n    /**\n     * Step 3 - Handle errors\n     */\n    response.badRequest(error.messages)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Reporting Implementation\nDESCRIPTION: Implementation of custom error reporting logic with external service integration\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic async report(error: any, ctx: HttpContextContract) {\n  if (!this.shouldReport(error)) {\n    return\n  }\n\n if (typeof error.report === 'function') {\n    error.report(error, ctx)\n    return\n  }\n\n  someReportingService.report(error.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a User by Email in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the findBy method to fetch a user by their email address, returning a model instance or null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findBy('email', 'virk@adonisjs.com')\n// SQL: SELECT * from \"users\" WHERE \"email\" = 'virk@adonisjs.com' LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Basic Controller with Single Model Binding\nDESCRIPTION: Controller with basic model binding implementation. It uses the bind decorator to automatically resolve a Post model from the route parameter.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { bind } from '@adonisjs/route-model-binding'\nimport Post from 'App/Models/Post'\n\nexport default class PostsController {\n  @bind()\n  public async show({}, post: Post) {\n    return { post }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Query Client in AdonisJS\nDESCRIPTION: Demonstrates how to import and access the Database query client for default or named connections.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\n// returns client for the default connection\nconst client = Database.connection()\n\n// returns client for a named connection\nconst pgClient = Database.connection('pg')\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeFind Hook for User Model (TypeScript)\nDESCRIPTION: This example shows how to create a beforeFind hook in a User model to automatically exclude deleted users from queries. It uses the @beforeFind decorator and adds a whereNull constraint to the query builder.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  beforeFind,\n  ModelQueryBuilderContract,\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @beforeFind()\n  public static ignoreDeleted (query: ModelQueryBuilderContract<typeof User>) {\n    query.whereNull('is_deleted')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Callback for Custom Messages in AdonisJS\nDESCRIPTION: This example demonstrates how to use a wildcard callback function to construct custom validation messages at runtime in AdonisJS. It shows how to handle all fields except for specific cases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-messages.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  messages: {\n    '*': (field, rule, arrayExpressionPointer, options) => {\n      return `${rule} validation error on ${field}`\n    },\n    'username.required': 'Username is required to sign up',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by Primary Key in Lucid\nDESCRIPTION: Shows how to find a row from the database using the model's primary key. Returns a model instance or null if not found.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nif (!user) {\n  return\n}\n\nconsole.log(user instanceof User)\n```\n\n----------------------------------------\n\nTITLE: Advanced docker-compose.yml with PostgreSQL and Redis for AdonisJS\nDESCRIPTION: An extended docker-compose.yml that includes PostgreSQL and Redis services for a complete development environment. It sets up persistent data volumes, configures service dependencies, and provides environment variables for connecting to the database and caching services.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    container_name: postgres\n    image: postgres:13\n    volumes:\n      - postgres_volume:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - 5432:5432\n\n  redis:\n    container_name: redis\n    image: redis:6-alpine\n    volumes:\n      - redis_volume:/data\n    ports:\n      - 6379:6379\n\n  adonis_app:\n    container_name: adonis_app\n    restart: always\n    depends_on:\n      - postgres\n      - redis\n    build:\n      context: .\n      target: dependencies\n    ports:\n      - ${PORT}:${PORT}\n      - 9229:9229\n    env_file:\n      - .env\n    environment:\n      - PG_HOST=postgres\n      - REDIS_HOST=redis\n    volumes:\n      - ./:/home/node/app\n    command: dumb-init node ace serve --watch --node-args=\"--inspect=0.0.0.0\"\n\nvolumes:\n  postgres_volume:\n  redis_volume:\n```\n\n----------------------------------------\n\nTITLE: Logging Out a User in AdonisJS\nDESCRIPTION: This code snippet shows how to implement a logout functionality using the auth.logout method in AdonisJS web authentication, destroying the user's session and redirecting to the login page.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.post('/logout', async ({ auth, response }) => {\n  await auth.use('web').logout()\n  response.redirect('/login')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-based Token Storage in AdonisJS Auth Config\nDESCRIPTION: Configuration for storing API tokens in Redis. This approach is suitable when API tokens are the primary authentication method, such as for mobile apps. Redis can automatically clear expired tokens, making it ideal for tokens with limited lifetimes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  api: {\n    driver: 'oat',\n    provider: {\n      driver: 'lucid',\n      identifierKey: 'id',\n      uids: ['email'],\n      model: () => import('App/Models/User'),\n    },\n    // highlight-start\n    tokenProvider: {\n      type: 'api',\n      driver: 'redis',\n      redisConnection: 'local',\n      foreignKey: 'user_id',\n    },\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Email Sending Implementation\nDESCRIPTION: Example of sending an email using the Mail module with HTML template\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Mail from '@ioc:Adonis/Addons/Mail'\n\nclass UsersController {\n  public async store() {\n    await Mail.send((message) => {\n      message\n        .from('info@example.com')\n        .to('virk@adonisjs.com')\n        .subject('Welcome Onboard!')\n        .htmlView('emails/welcome', { name: 'Virk' })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Relationship Filtering with whereHas\nDESCRIPTION: Shows how to use whereHas to filter parent models based on relationship existence with additional constraints on the related models. Includes variants like orWhereHas, whereDoesntHave, etc.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().whereHas('posts', (postsQuery) => {\n  postsQuery.where('status', 'published')\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Insert Operations with Database Query Builder in TypeScript\nDESCRIPTION: Creates an insert query builder instance using the .insertQuery() method to insert a new user record with username and email values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nawait Database\n  .insertQuery() // 👈 gives an instance of insert query builder\n  .table('users')\n  .insert({ username: 'virk', email: 'virk@adonisjs.com' })\n```\n\n----------------------------------------\n\nTITLE: Logging in a User with Web Guard in AdonisJS\nDESCRIPTION: This snippet demonstrates how to log in a user using the web guard's attempt method. It handles login attempts, creates a session on success, and redirects to the dashboard.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.post('login', async ({ auth, request, response }) => {\n  const email = request.input('email')\n  const password = request.input('password')\n\n  try {\n    await auth.use('web').attempt(email, password)\n    response.redirect('/dashboard')\n  } catch {\n    return response.badRequest('Invalid credentials')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: CSRF Configuration Settings\nDESCRIPTION: Configuration options for CSRF protection including route exceptions and cookie settings\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/web-security.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const csrf: ShieldConfig['csrf'] = {\n  enabled: true,\n  exceptRoutes: [],\n  enableXsrfCookie: true,\n  methods: ['POST', 'PUT', 'PATCH', 'DELETE'],\n  cookieOptions:  {\n    domain: '',\n    path: '/',\n    maxAge: '2h',\n    httpOnly: true,\n    secure: false,\n    sameSite: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Relationships in Model Queries\nDESCRIPTION: Shows how to use the preload method to eager-load relationships for models. This includes basic preloading, preloading with constraints, multiple relationships, and nested relationship loading.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('posts')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.query().preload('posts', (postsQuery) => {\n  postsQuery.where('status', 'published')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.query().preload('posts').preload('profile')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query()\n  .preload('posts', (postsQuery) => {\n    postsQuery.preload('comments', (commentsQuery) => {\n      commentsQuery.preload('user')\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: AdonisJS Environment Variables Validation Rules\nDESCRIPTION: Definition of validation rules for environment variables using AdonisJS schema API.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Env from '@ioc:Adonis/Core/Env'\n\nexport default Env.rules({\n  HOST: Env.schema.string({ format: 'host' }),\n  PORT: Env.schema.number(),\n  APP_KEY: Env.schema.string(),\n  APP_NAME: Env.schema.string(),\n  CACHE_VIEWS: Env.schema.boolean(),\n  SESSION_DRIVER: Env.schema.string(),\n  NODE_ENV: Env.schema.enum(['development', 'production', 'test'] as const),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Database Transactions\nDESCRIPTION: Shows how to create, execute and commit transactions using a dedicated transaction client.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await client.transaction()\nawait trx.insertQuery().table('users').insert()\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Database Connections with Global Transactions\nDESCRIPTION: Example showing how to handle global transactions across multiple database connections (PostgreSQL and MySQL) in test setup. Separate transaction hooks are created for each database connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngroup.each.setup(async () => {\n  await Database.beginGlobalTransaction('pg')\n  return () => Database.rollbackGlobalTransaction('pg')\n})\n\ngroup.each.setup(async () => {\n  await Database.beginGlobalTransaction('mysql')\n  return () => Database.rollbackGlobalTransaction('mysql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTTP Controller in AdonisJS\nDESCRIPTION: This snippet demonstrates how to create a PostsController with an index method that returns an array of posts. Controllers in AdonisJS handle HTTP requests and should be stored in the app/Controllers/Http directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: app/Controllers/Http/PostsController.ts\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class PostsController {\n  public async index(ctx: HttpContextContract) {\n    return [\n      {\n        id: 1,\n        title: 'Hello world',\n      },\n      {\n        id: 2,\n        title: 'Hello universe',\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in PostsController with AdonisJS\nDESCRIPTION: TypeScript code for the PostsController's store method, demonstrating form validation using AdonisJS validator, including schema definition and request validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport class PostsController {\n  public async store({ request }: HttpContextContract) {\n    const postSchema = schema.create({\n      title: schema.string({ trim: true }, [\n        rules.minLength(10)\n      ]),\n      body: schema.string(),\n    })\n\n    const payload = await request.validate({ schema: postSchema })\n    console.log(payload)\n\n    return 'Post created'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManyToMany Relationship in AdonisJS Model\nDESCRIPTION: Demonstrates how to define a many-to-many relationship between User and Skill models using the @manyToMany decorator in AdonisJS Lucid ORM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Skill from 'App/Models/Skill'\nimport {\n  column,\n  BaseModel,\n  manyToMany,\n  ManyToMany,\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @manyToMany(() => Skill)\n  public skills: ManyToMany<typeof Skill>\n}\n```\n\n----------------------------------------\n\nTITLE: Exception-Based Authentication in TypeScript\nDESCRIPTION: Preferred approach using exceptions for authentication flow control\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('dashboard', async ({ auth, response }) => {\n  await auth.authenticate()\n\n  // business logic\n})\n```\n\n----------------------------------------\n\nTITLE: Altering a Table in AdonisJS Migration\nDESCRIPTION: Demonstrates how to alter an existing database table using the schema.alterTable method. This example drops a column and adds two new columns to the user table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class extends BaseSchema {\n  public up() {\n    this.schema.alterTable('user', (table) => {\n      table.dropColumn('name')\n      table.string('first_name')\n      table.string('last_name')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FirstOrFail Method in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the firstOrFail method, which is similar to first but raises an exception when no rows are found. This is useful when you expect a result to exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await Database\n  .from('users')\n  .where('id', 1)\n  .firstOrFail()\n```\n\n----------------------------------------\n\nTITLE: Using Common Table Expressions (CTE) in AdonisJS\nDESCRIPTION: The with method allows using Common Table Expressions (CTE) in PostgreSQL, Oracle, SQLite3, and MSSQL databases. It supports materialized and recursive CTEs for complex query scenarios.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .query()\n  .with('aliased_table', (query) => {\n    query.from('users').select('*')\n  })\n  .select('*')\n  .from('aliased_table')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .query()\n  .withMaterialized('aliased_table', (query) => {\n    query.from('users').select('*')\n  })\n  .select('*')\n  .from('aliased_table')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .query()\n  .withRecursive('tree', (query) => {\n    query\n      .from('accounts')\n      .select('amount', 'id')\n      .where('id', 1)\n      .union((subquery) => {\n        subquery\n          .from('accounts as a')\n          .select('a.amount', 'a.id')\n          .innerJoin('tree', 'tree.id', '=', 'a.parent_id')\n      })\n  })\n  .sum('amount as total')\n  .from('tree')\n```\n\n----------------------------------------\n\nTITLE: Authenticating Subsequent Requests in AdonisJS\nDESCRIPTION: This snippet demonstrates how to authenticate subsequent requests after login using the auth.authenticate method in AdonisJS web authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('dashboard', async ({ auth }) => {\n  await auth.use('web').authenticate()\n  console.log(auth.use('web').user!)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for CORS in AdonisJS\nDESCRIPTION: These snippets demonstrate different ways to configure allowed origins for CORS requests in AdonisJS. It includes examples of using boolean values, strings, arrays, wildcards, and functions to specify allowed origins.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  origin: true\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  origin: 'adonisjs.com',\n}\n\n// or\n{\n  origin: ['adonisjs.com']\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  origin: '*'\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ALLOWED_ORIGINS = []\n\n{\n  origin: (requestOrigin: string) => {\n    return ALLOWED_ORIGINS.includes(requestOrigin)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction in Lucid ORM\nDESCRIPTION: Creates a new database transaction using the Database module from Lucid ORM. This transaction object can be used to execute queries that can be committed or rolled back as a unit.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\n// Transaction created\nconst trx = await Database.transaction()\n```\n\n----------------------------------------\n\nTITLE: Debugging Database Queries in Production for AdonisJS\nDESCRIPTION: This snippet shows a complete example of switching the event listener based on the application environment. It uses Logger for production and Database.prettyPrint for development.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/debugging.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nimport Logger from '@ioc:Adonis/Core/Logger'\nimport Application from '@ioc:Adonis/Core/Application'\n\nEvent.on('db:query', (query) => {\n  if (Application.inProduction) {\n    Logger.debug(query)    \n  } else {\n    Database.prettyPrint(query)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating API-Only Resourceful Routes\nDESCRIPTION: Shows how to create API-only resourceful routes that exclude form-related routes. This is useful when building an API server where frontend forms are handled by a separate client application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.resource('posts', 'PostsController').apiOnly() // 👈\n```\n\n----------------------------------------\n\nTITLE: Disabling Advisory Locks for Migration Commands in AdonisJS CLI\nDESCRIPTION: These shell commands show how to disable advisory locks when running migration commands in AdonisJS. The --disable-locks flag is used to bypass the locking system.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnode ace migration:run --disable-locks\nnode ace migration:refresh --disable-locks\nnode ace migration:rollback --disable-locks\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Project for Production\nDESCRIPTION: Command to build an AdonisJS project for production, including TypeScript compilation and static file copying.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/typescript-build-process.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ace build --production\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Query Builder in TypeScript with AdonisJS\nDESCRIPTION: The query method returns an instance of the model query builder, allowing for complex queries. The result is an array of model instances rather than plain objects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query()\n  .where('age', '>', 18)\n  .orderBy('id', 'desc')\n  .limit(20)\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration using Ace CLI in AdonisJS\nDESCRIPTION: Demonstrates how to create a new migration file using the Ace command-line tool. The generated file is stored in the database/migrations directory with a timestamp prefix.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:migration users\n\n# CREATE: database/migrations/1630981615472_users.ts\n```\n\n----------------------------------------\n\nTITLE: Logging in a User by ID in AdonisJS\nDESCRIPTION: This snippet demonstrates how to log in a user using their ID with the loginViaId method in AdonisJS web authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Login user using the id\nawait auth.use('web').loginViaId(1)\n```\n\n----------------------------------------\n\nTITLE: Conditional Querying with 'match' in AdonisJS (TypeScript)\nDESCRIPTION: Illustrates how to use the 'match' helper for defining multiple conditional blocks in a query, similar to a switch statement.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .query()\n  .match(\n    [\n      // Run this is user is a super user\n      auth.isSuperUser, (query) => query.whereIn('status', ['published', 'draft'])\n    ],\n    [\n      // Run this is user is loggedin\n      auth.user, (query) => query.where('user_id', auth.user.id)\n    ],\n    // Otherwise run this\n    (query) => query.where('status', 'published').where('is_public', true)\n  )\n```\n\n----------------------------------------\n\nTITLE: Saving Uploaded Files Using Drive in AdonisJS\nDESCRIPTION: This snippet demonstrates how to save uploaded files using the moveToDisk method, which utilizes AdonisJS Drive. It also shows how to retrieve the saved file name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/file-uploads.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst coverImage = request.file('cover_image', {\n  size: '2mb',\n  extnames: ['jpg', 'png', 'gif'],\n})!\n\n// highlight-start\nawait coverImage.moveToDisk('./')\n\n// Get the name of the saved file; to store it in your database, for example.\nconst fileName = coverImage.fileName;\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate with HasOne Relationship\nDESCRIPTION: Shows how to use updateOrCreate to update an existing profile or create a new one if it doesn't exist, with the foreign key automatically added to the search query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .related('profile')\n  .updateOrCreate({}, {\n    email: 'virk@adonisjs.com',\n    avatarUrl: 'profile.jpg',\n  })\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of .env file configuration with various environment variables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nPORT=3333\nHOST=0.0.0.0\nNODE_ENV=development\nAPP_KEY=sH2k88gojcp3PdAJiGDxof54kjtTXa3g\nSESSION_DRIVER=cookie\nCACHE_VIEWS=false\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in AdonisJS Controller with TypeScript\nDESCRIPTION: Shows a complete example of implementing pagination in an AdonisJS controller. It includes fetching paginated results, setting a base URL for pagination links, and rendering the results in a view.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nclass PostsController {\n  public async index ({ request, view }: HttpContextContract) {\n    const page = request.input('page', 1)\n    const limit = 10\n\n    const posts = await Database.from('posts').paginate(page, limit)\n\n    // Changes the baseURL for the pagination links\n    posts.baseUrl('/posts')\n\n    return view.render('posts/index', { posts })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Queries for Dynamic Values in whereBetween Clauses in AdonisJS\nDESCRIPTION: Demonstrates how to use raw queries to derive values from another database table for use in a whereBetween clause. This allows for dynamic range constraints based on values stored in a different table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereBetween('age', [\n    Database.raw('(select min_age from participation_rules)'),\n    Database.raw('(select max_age from participation_rules)'),\n  ])\n```\n\n----------------------------------------\n\nTITLE: Complete Transaction Example with Commit and Rollback\nDESCRIPTION: Demonstrates a complete transaction flow including creating a transaction, executing a query, and handling commit or rollback based on success or failure. This pattern ensures data integrity by reverting changes if an error occurs.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await Database.transaction()\n\ntry {\n  await trx\n    .insertQuery()\n    .table('users')\n    .insert({ username: 'virk' })\n\n  await trx.commit()\n} catch (error) {\n  await trx.rollback()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Configuration in AdonisJS\nDESCRIPTION: Sample configuration for the auth package showing how to define guards and providers. This example sets up a web guard using the session driver with Lucid provider for user management.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { AuthConfig } from '@ioc:Adonis/Addons/Auth'\n\nconst authConfig: AuthConfig = {\n  guard: 'web',\n\n  guards: {\n    web: {\n      driver: 'session',\n\n      provider: {\n        driver: 'lucid',\n        identifierKey: 'id',\n        uids: ['email'],\n        model: () => import('App/Models/User'),\n      },\n    },\n  },\n}\n\nexport default authConfig\n```\n\n----------------------------------------\n\nTITLE: Manual User Lookup and Token Generation in AdonisJS\nDESCRIPTION: Implementation of a login route with custom user lookup logic. This approach allows for additional query conditions beyond what auth.attempt() provides. It manually verifies the password hash and generates a token for the authenticated user.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Route from '@ioc:Adonis/Core/Route'\nimport Hash from '@ioc:Adonis/Core/Hash'\n\nRoute.post('login', async ({ auth, request, response }) => {\n  const email = request.input('email')\n  const password = request.input('password')\n\n  // Lookup user manually\n  const user = await User\n    .query()\n    .where('email', email)\n    .where('tenant_id', getTenantIdFromSomewhere)\n    .whereNull('is_deleted')\n    .firstOrFail()\n\n  // Verify password\n  if (!(await Hash.verify(user.password, password))) {\n    return response.unauthorized('Invalid credentials')\n  }\n\n  // Generate token\n  const token = await auth.use('api').generate(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Request Body Fields in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to select specific keys from the request body using request.only() and request.except() methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Cherry pick\nconst body = request.only(['title', 'description'])\n\n// Omit\nconst body = request.except(['submit', 'csrf_token'])\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Database Connection in TypeScript with AdonisJS\nDESCRIPTION: The connection static property allows specifying a custom database connection for the model. This connection remains constant throughout the application lifecycle.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static connection = 'pg'\n}\n```\n\n----------------------------------------\n\nTITLE: How AdonisJS Uses AsyncLocalStorage for HTTP Context\nDESCRIPTION: Shows how AdonisJS implements AsyncLocalStorage to manage HTTP context throughout request execution, including middleware and route handlers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstorage.run(ctx, () => {\n  await runMiddleware()\n  await runRouteHandler()\n  ctx.finish()\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Query String Parameters in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to access query string parameters using the request.qs() method in a route handler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ request }) => {\n  /*\n   * URL: /?username=virk\n   * qs: { username: 'virk' }\n   */\n  request.qs()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Files in TypeScript\nDESCRIPTION: Demonstrates how to import configuration files directly in AdonisJS applications using TypeScript import statements.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/config.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { appKey } from 'Config/app'\n```\n\n----------------------------------------\n\nTITLE: Using Brisk Routes in AdonisJS\nDESCRIPTION: This snippet shows how to use brisk routes in AdonisJS for quick route definitions. It includes examples of rendering views, redirecting, and using custom parameters and status codes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.on('/').render('welcome')\n\nRoute.on('/').render('welcome', { greeting: 'Hello world' })\n\nRoute.on('/posts/:id').redirect('/articles/:id')\n\n// Inline params\nRoute.on('/posts/:id').redirect('/articles/:id', { id: 1 })\n\n// Custom status\nRoute.on('/posts/:id').redirect('/articles/:id', undefined, 301)\n\nRoute.on('/posts/:id').redirectToPath('https://medium.com/my-blog')\n\n// Custom status\nRoute.on('/posts/:id').redirectToPath('https://medium.com/my-blog', 301)\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Relationship in User Model\nDESCRIPTION: Defines a HasMany relationship between User and Post models using the @hasMany decorator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from 'App/Models/Post'\n\nimport {\n  column,\n  BaseModel,\n  hasMany,\n  HasMany\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to access route parameters defined in the route pattern using the request.params() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/posts/:id/:slug', async ({ request }) => {\n  /*\n   * URL: /posts/1/hello-world\n   * Params: { id: '1', slug: 'hello-world' }\n   */\n  request.params()\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Debugging for Lucid Database Queries in AdonisJS\nDESCRIPTION: This snippet shows how to enable global debugging for Lucid database queries by setting the 'debug' flag to true in the database configuration file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/debugging.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  client: 'pg',\n  connection: {},\n  debug: true, // 👈\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level in AdonisJS\nDESCRIPTION: Demonstrates how to initialize a transaction with a specific isolation level. Available levels include read uncommitted, read committed, snapshot, repeatable read, and serializable.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.transaction({\n  isolationLevel: 'read uncommitted'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Module - TypeScript\nDESCRIPTION: Configuration file for the Hash module defining default driver and available hashers with their specific settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashConfig } from '@adonisjs/core/build/config'\n\nexport default hashConfig({\n  default: Env.get('HASH_DRIVER', 'scrypt'),\n\n  list: {\n    scrypt: {\n      driver: 'scrypt',\n      cost: 16384,\n      blockSize: 8,\n      parallelization: 1,\n      saltSize: 16,\n      keyLength: 64,\n      maxMemory: 32 * 1024 * 1024,\n    },\n    argon: {\n      driver: 'argon2',\n      variant: 'id',\n      iterations: 3,\n      memory: 4096,\n      parallelism: 1,\n      saltSize: 16,\n    },\n    bcrypt: {\n      driver: 'bcrypt',\n      rounds: 10,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Model Factory in AdonisJS with TypeScript\nDESCRIPTION: This snippet demonstrates how to define a model factory for a User model using the Factory.define method. It uses the faker library to generate random data for the model's fullName and email properties, and shows the onMerge hook for potential customization.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/model-factories.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Factory from '@ioc:Adonis/Lucid/Factory'\nimport User from 'App/Models/User'\n\nFactory\n  .define(User, ({ faker }) => {\n    return {\n      fullName: faker.name.findName(),\n      email: faker.internet.email(),\n    }\n  })\n  .onMerge(() => {\n  })\n```\n\n----------------------------------------\n\nTITLE: Using fetchOrCreateMany Method in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the fetchOrCreateMany method to create multiple rows while avoiding duplicates based on a unique key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst usersToCreate = [\n  {\n    email: 'foo@example.com',\n  },\n  {\n    email: 'bar@example.com',\n  },\n  {\n    email: 'baz@example.com',\n  }\n]\n\nawait User.fetchOrCreateMany('email', usersToCreate)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AdonisJS Drive in TypeScript\nDESCRIPTION: Demonstrates the basic file operations using AdonisJS Drive, including writing, reading, and checking file existence.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\n\n// Write a file\nawait Drive.put(filePath, stringOrBuffer)\nawait Drive.putStream(filePath, readableStream)\n\n// Read a file\nconst contents = await Drive.get(filePath)\nconst readableStream = await Drive.getStream(filePath)\n\n// Find if a file exists\nif (await Drive.exists(filePath)) {\n  await Drive.get(filePath)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Rule\nDESCRIPTION: Example of using the custom camelCase validation rule in a schema\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-rules.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rules, schema, validator } from '@ioc:Adonis/Core/Validator'\n\nawait validator.validate({\n  schema: schema.create({\n    fileName: schema.string([\n      rules.camelCase()\n    ]),\n  }),\n  data: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Altering Database Tables in AdonisJS\nDESCRIPTION: Demonstrates how to modify an existing table using the alterTable method. This example shows dropping a column and adding new columns to the table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.schema.alterTable('user', (table) => {\n      /**\n       * Drop the name column\n       */\n      table.dropColumn('name')\n\n      /**\n       * Add first_name and last_name columns\n       */\n      table.string('first_name')\n      table.string('last_name')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations Programmatically in AdonisJS Route Handler\nDESCRIPTION: This TypeScript code snippet demonstrates how to run migrations programmatically within an AdonisJS route handler. It uses the Migrator module to execute migrations and return the list of migrated files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport Application from '@ioc:Adonis/Core/Application'\nimport Migrator from '@ioc:Adonis/Lucid/Migrator'\n\nRoute.get('/', async () => {\n  const migrator = new Migrator(Database, Application, {\n    direction: 'up',\n    dryRun: false,\n    // connectionName: 'pg',\n  })\n\n  await migrator.run()\n  return migrator.migratedFiles\n})\n```\n\n----------------------------------------\n\nTITLE: Filling Model Attributes in TypeScript with AdonisJS\nDESCRIPTION: The fill method allows setting multiple model attributes at once using an object. It replaces existing attributes with the newly provided ones.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.fill({\n  email: 'virk@adonisjs.com',\n  name: 'virk',\n  password: 'secret'\n})\n\nconsole.log(user.email)\nconsole.log(user.name)\nconsole.log(user.password)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests with Basic Auth in AdonisJS\nDESCRIPTION: This snippet shows how to use the basic auth guard to authenticate requests in an AdonisJS route. It demonstrates the use of the auth.authenticate method to validate user credentials.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/basic-auth-guard.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute\n  .get('posts', async ({ auth }) => {\n    await auth.use('basic').authenticate()\n\n    return `You are logged in as ${auth.user!.email}`\n  })\n```\n\n----------------------------------------\n\nTITLE: Using having Method in AdonisJS\nDESCRIPTION: Shows how to use the having method to filter grouped results based on a comparison condition. This example filters users based on a minimum exam score after grouping by user_id.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('exams')\n  .select('user_id')\n  .groupBy('user_id')\n  .having('score', '>', 80)\n```\n\n----------------------------------------\n\nTITLE: Using Auth Middleware with Basic Auth Guard in AdonisJS\nDESCRIPTION: This code demonstrates how to use the auth middleware to protect routes using the basic auth guard in AdonisJS. It shows how to apply the middleware to a route and access the authenticated user's information.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/basic-auth-guard.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute\n  .get('posts', async ({ auth }) => {\n    return `You are logged in as ${auth.user!.email}`\n  })\n  .middleware('auth', { guards: ['basic'] })\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Drive in TypeScript\nDESCRIPTION: Shows the configuration setup for AdonisJS Drive, including disk definitions for local and S3 storage.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/drive.ts\nimport { driveConfig } from '@adonisjs/core/build/config'\n\nexport default driveConfig({\n  disk: Env.get('DRIVE_DISK'),\n\n  disks: {\n    local: {\n      driver: 'local',\n      visibility: 'public',\n      root: Application.tmpPath('uploads'),\n      basePath: '/uploads',\n      serveFiles: true,\n    },\n\n    s3: {\n      driver: 's3',\n      visibility: 'public',\n      key: Env.get('S3_KEY'),\n      secret: Env.get('S3_SECRET'),\n      region: Env.get('S3_REGION'),\n      bucket: Env.get('S3_BUCKET'),\n      endpoint: Env.get('S3_ENDPOINT'),\n      \n      // For minio to work\n      // forcePathStyle: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Functional Test in TypeScript\nDESCRIPTION: Shows how to write a basic functional test for listing users using the Japa test runner and API client.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('List users', () => {\n  test('get a paginated list of users', async ({ client }) => {\n    const response = await client.get('/users')\n\n    console.log(response.body())\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Database Interaction Tests in AdonisJS v5\nDESCRIPTION: This example demonstrates how to write a test that interacts with the database, specifically checking if a user's password is hashed during save operation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport test from 'japa'\nimport { JSDOM } from 'jsdom'\nimport supertest from 'supertest'\nimport User from 'App/Models/User'\n\nconst BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`\n\ntest.group('Welcome', () => {\n  test('ensure home page works', async (assert) => {\n    const { text } = await supertest(BASE_URL).get('/').expect(200)\n    const { document } = new JSDOM(text).window\n    const title = document.querySelector('.title')\n\n    assert.exists(title)\n    assert.equal(title!.textContent!.trim(), 'It Works!')\n  })\n\n  test('ensure user password gets hashed during save', async (assert) => {\n    const user = new User()\n    user.email = 'virk@adonisjs.com'\n    user.password = 'secret'\n    await user.save()\n\n    assert.notEqual(user.password, 'secret')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Manual User Lookup and Login in AdonisJS\nDESCRIPTION: This code snippet shows how to manually lookup a user, verify their password, and create a login session using the auth.login method in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Route from '@ioc:Adonis/Core/Route'\nimport Hash from '@ioc:Adonis/Core/Hash'\n\nRoute.post('login', async ({ auth, request, response }) => {\n  const email = request.input('email')\n  const password = request.input('password')\n\n  // Lookup user manually\n  const user = await User\n    .query()\n    .where('email', email)\n    .where('tenant_id', getTenantIdFromSomewhere)\n    .whereNull('is_deleted')\n    .firstOrFail()\n\n  // Verify password\n  if (!(await Hash.verify(user.password, password))) {\n    return response.badRequest('Invalid credentials')\n  }\n\n  // Create session\n  await auth.use('web').login(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Expiring Signed URLs in AdonisJS\nDESCRIPTION: Demonstrates how to generate a signed URL with an expiration time using the expiresIn option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/signed-urls.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.makeSignedUrl(\n  'verifyEmail',\n  {\n    email: 'foo@bar.com',\n  },\n  {\n    expiresIn: '30m',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching Related Models in Many-to-Many Relationship (TypeScript)\nDESCRIPTION: Demonstrates how to use the attach method to create a relationship between two persisted models in a many-to-many relationship. It shows basic usage and how to include additional pivot columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst skill = await Skill.find(1)\n\n// Performs insert query inside the pivot table\nawait user.related('skills').attach([skill.id])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.related('skills').attach({\n  [skill.id]: {\n    proficiency: 'Beginner'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Join Query in AdonisJS\nDESCRIPTION: Demonstrates how to perform a basic join operation between two tables using the join method. This example joins the users and user_logins tables and selects columns from both.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', 'users.id', '=', 'user_logins.user_id')\n  .select('users.*')\n  .select('user_logins.ip_address')\n  .select('user_logins.country')\n```\n\n----------------------------------------\n\nTITLE: Basic Schema Validation in AdonisJS\nDESCRIPTION: Demonstrates how to define and validate a basic schema for a POST request. Shows schema definition and request validation for a new post creation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\nRoute.post('posts', async ({ request }) => {\n  /**\n   * Schema definition\n   */\n  const newPostSchema = schema.create({\n    title: schema.string(),\n    body: schema.string(),\n    categories: schema.array().members(schema.number()),\n  })\n\n  /**\n   * Validate request body against the schema\n   */\n  const payload = await request.validate({ schema: newPostSchema })\n})\n```\n\n----------------------------------------\n\nTITLE: Extending ModelQueryBuilder with Custom Macros\nDESCRIPTION: Shows how to extend the ModelQueryBuilder by adding a custom 'getCount' macro, which counts records and returns the result as a BigInt from the $extras property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  ModelQueryBuilder\n} = this.app.container.use('Adonis/Lucid/Database')\n\nModelQueryBuilder.macro('getCount', async function () {\n  const result = await this.count('* as total')\n  return BigInt(result[0].$extras.total)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in AdonisJS\nDESCRIPTION: Example of handling the callback from an OAuth provider, including error states and accessing user information.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/github/callback', async ({ ally }) => {\n  const github = ally.use('github')\n\n  /**\n   * User has explicitly denied the login request\n   */\n  if (github.accessDenied()) {\n    return 'Access was denied'\n  }\n\n  /**\n   * Unable to verify the CSRF state\n   */\n  if (github.stateMisMatch()) {\n    return 'Request expired. Retry again'\n  }\n\n  /**\n   * There was an unknown error during the redirect\n   */\n  if (github.hasError()) {\n    return github.getError()\n  }\n\n  /**\n   * Finally, access the user\n   */\n  const user = await github.user()\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests in AdonisJS API Tests\nDESCRIPTION: Demonstrates various authentication methods for API tests, including loginAs and basicAuth.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst user = await User.find(1)\nawait client.get('/posts').loginAs(user)\n\nawait client.get('/posts')\n  .guard('api')\n  .loginAs(user)\n\nawait client.get('/posts').basicAuth('email', 'password')\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring AdonisJS Limiter Package\nDESCRIPTION: Steps to install and configure the @adonisjs/limiter package including package installation, configuration setup, and middleware registration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/limiter@1.0.2\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/limiter\n```\n\nLANGUAGE: typescript\nCODE:\n```\nServer.middleware.registerNamed({\n  throttle: () => import('@adonisjs/limiter/build/throttle'),\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in TypeScript\nDESCRIPTION: Creates a raw query builder instance using the .rawQuery() method to execute a raw SQL statement with positional parameter binding for the ID value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nconst user = await Database\n  .rawQuery('select * from users where id = ?', [1])\n```\n\n----------------------------------------\n\nTITLE: Using Auth in Edge Templates\nDESCRIPTION: Example showing how to conditionally display content in Edge templates based on the user's authentication status. The auth object is automatically shared with the templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@if(auth.isLoggedIn)\n  <p> Hello {{ auth.user.username }} </p>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Performing Complex Database Operations in AdonisJS Migration\nDESCRIPTION: Demonstrates how to perform complex database operations, such as data migration, using the this.defer method in AdonisJS migrations. This example migrates email data from one table to another.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class extends BaseSchema {\n  public up() {\n    this.schema.createTable('user_emails', (table) => {\n      // table columns\n    })\n\n    this.defer(async (db) => {\n      const users = await db.from('users').select('*')\n      await Promise.all(users.map((user) => {\n        return db\n          .table('user_emails')\n          .insert({ user_id: user.id, email: user.email })\n      }))\n    })\n\n    this.schema.alterTable('users', (table) => {\n      table.dropColumn('email')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models with HasMany Query Client\nDESCRIPTION: Demonstrates how to create a new related model instance and persist it to the database using the query client.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\nuser.related('posts') // HasManyClientContract\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await user\n  .related('posts')\n  .create({\n    title: 'Adonis 101'\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await Database.transaction()\nconst user = await User.query({ client: trx }).first()\n\n/**\n* Uses the `$trx` property from the `user` instance to\n* persist relationship\n*/\nawait user.related('posts').create()\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context Globally in AdonisJS\nDESCRIPTION: Demonstrates how to access the HTTP context from anywhere in the application using Node.js Async Local Storage, which is useful for services or other parts of the application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n\nclass SomeService {\n  public async someOperation() {\n    const ctx = HttpContext.get()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events from Controllers in AdonisJS\nDESCRIPTION: Demonstrates how to import and use the Socket.io service from controllers to broadcast events to connected clients.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport Ws from 'App/Services/Ws'\n\nclass UsersController {\n  public async store() {\n    Ws.io.emit('new:user', { username: 'virk' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Production Stage for AdonisJS Docker Image\nDESCRIPTION: The final stage of the Dockerfile that sets up the production environment by installing only production dependencies and copying build assets from the previous build stage. It uses dumb-init to properly handle process signals when running the Node.js server.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM base AS production\nENV NODE_ENV=production\nENV PORT=$PORT\nENV HOST=0.0.0.0\nCOPY --chown=node:node ./package*.json ./\nRUN npm ci --production\nCOPY --chown=node:node --from=build /home/node/app/build .\nEXPOSE $PORT\nCMD [ \"dumb-init\", \"node\", \"server.js\" ]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Messages in AdonisJS\nDESCRIPTION: This snippet demonstrates how to define custom messages for validation errors in AdonisJS. It shows how to set messages for specific rules and fields within the validate method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-messages.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait request.validate({\n  schema: schema.create({\n    // ...\n  }),\n  // highlight-start\n  messages: {\n    required: 'The {{ field }} is required to create a new account',\n    'username.unique': 'Username not available'\n  }\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Working with Response Headers in AdonisJS\nDESCRIPTION: Shows how to set, append, remove, and get HTTP response headers in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.header('Content-type', 'text/html')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.append('Set-cookie', 'cookie-value')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.removeHeader('Content-type')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = response.getHeader('Set-cookie')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.safeHeader('Content-type', 'application/json')\n```\n\n----------------------------------------\n\nTITLE: Defining HasOne Relationship in Lucid ORM Models\nDESCRIPTION: Demonstrates how to define a HasOne relationship between User and Profile models using the @hasOne decorator, and how to access the relationship instance using $getRelation method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, hasOne, HasOne } from '@ioc:Adonis/Lucid/Orm'\nimport Profile from 'App/Models/Profile'\n\nclass User extends BaseModel {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.$getRelation('profile').relationName\nUser.$getRelation('profile').type\nUser.$getRelation('profile').relatedModel()\n```\n\n----------------------------------------\n\nTITLE: Configuring Migrations in AdonisJS Database Config\nDESCRIPTION: This TypeScript snippet shows the structure of the migrations configuration object within the AdonisJS database configuration file. It includes options for natural sorting, transactions, paths, table name, and production rollback restrictions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mysql: {\n    client: 'mysql2',\n    migrations: {\n      naturalSort: true,\n      disableTransactions: false,\n      paths: ['./database/migrations'],\n      tableName: 'adonis_schema',\n      disableRollbacksInProduction: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating File Uploads with Validator in AdonisJS\nDESCRIPTION: This code shows how to use the AdonisJS validator to validate uploaded files alongside other form data. It demonstrates file validation rules and handling the validated payload.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/file-uploads.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport Application from '@ioc:Adonis/Core/Application'\n\nRoute.post('posts', async ({ request }) => {\n  const postSchema = schema.create({\n    cover_image: schema.file({\n      size: '2mb',\n      extnames: ['jpg', 'gif', 'png'],\n    }),\n  })\n\n  const payload = await request.validate({ schema: postSchema })\n\n  await payload.cover_image.move(Application.tmpPath('uploads'))\n})\n```\n\n----------------------------------------\n\nTITLE: Secure Usage of whereRaw with Parameter Binding in AdonisJS\nDESCRIPTION: Demonstrates the correct way to use the whereRaw method with parameter binding. This approach prevents SQL injection by properly separating the query structure from the data values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereRaw('username = ?', [username])\n```\n\n----------------------------------------\n\nTITLE: Loading Relationship Aggregates with withAggregate\nDESCRIPTION: Demonstrates how to fetch aggregate values from relationships using the withAggregate method, allowing operations like count, sum, avg, etc. on related records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  .withAggregate('comments', (query) => {\n    query.count('*').as('comments_count')\n  })\n\nposts.forEach((post) => {\n  console.log(post.$extras.comments_count)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Union Queries in AdonisJS\nDESCRIPTION: The union method allows building up union queries using multiple instances of the query builder. It supports wrapping union queries and using sub-queries for complex operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereNull('last_name')\n  .union((query) => {\n    query.from('users').whereNull('first_name')\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereNull('last_name')\n  .union((query) => {\n    query.from('users').whereNull('first_name')\n  }, true)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereNull('last_name')\n  .union([\n    (query) => {\n      query.from('users').whereNull('first_name')\n    },\n    (query) => {\n      query.from('users').whereNull('email')\n    },\n  ], true)\n```\n\n----------------------------------------\n\nTITLE: Facebook OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the Facebook OAuth driver in AdonisJS Ally, including client ID, secret, callback URL, and Facebook-specific options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfacebook: {\n  driver: 'facebook',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n\n  // Facebook specific\n  scopes: ['email', 'user_photos'],\n  userFields: ['first_name', 'picture', 'email'],\n  display: '',\n  authType: '',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Component in Edge\nDESCRIPTION: Demonstrates how to create a simple button component with type and text props.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<button type=\"{{ type }}\">\n  {{ text }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results with orderBy in AdonisJS\nDESCRIPTION: The orderBy method applies the order by clause to the query. It can be used multiple times for sorting by multiple columns or with an array of objects for complex sorting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .orderBy('created_at', 'desc')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .orderBy('username', 'asc')\n  .orderBy('created_at', 'desc')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .orderBy([\n    {\n      column: 'username',\n      order: 'asc',\n    },\n    {\n      column: 'created_at',\n      order: 'desc',\n    }\n  ])\n```\n\n----------------------------------------\n\nTITLE: Writing Files with AdonisJS Drive in TypeScript\nDESCRIPTION: Demonstrates how to write files using the 'put' method of AdonisJS Drive, including setting file metadata.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\n\nawait Drive.put(filePath, contents)\n\nawait Drive.put(filePath, contents, {\n  visibility: 'public',\n  contentType: 'image/png'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Edge Layout Template\nDESCRIPTION: Main layout template implementation with basic HTML structure and section placeholders for content injection\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/layouts.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n// title: resources/views/layouts/main.edge\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>{{ title }}</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css\">\n  </head>\n  <body>\n    <nav class=\"navbar is-dark\" role=\"navigation\" aria-label=\"main navigation\">\n    </nav>\n\n    @!section('body')\n\n    <footer class=\"footer\">\n    </footer>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Returning Responses from Route Handlers in AdonisJS\nDESCRIPTION: Demonstrates various ways to return different types of responses from AdonisJS route handlers, including strings, HTML fragments, JSON objects, and dates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', () => {\n  /** Plain string */\n  return 'This is the homepage'\n\n  /** Html fragment */\n  return '<p> This is the homepage </p>'\n\n  /** JSON response */\n  return { page: 'home' }\n\n  /** Converted to ISO string */\n  return new Date()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic User Factory in TypeScript\nDESCRIPTION: Demonstrates how to define a basic user factory with faker data for username, email and password fields.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Factory from '@ioc:Adonis/Lucid/Factory'\n\nexport const UserFactory = Factory\n  .define(User, ({ faker }) => {\n    return {\n      username: faker.internet.userName(),\n      email: faker.internet.email(),\n      password: faker.internet.password(),\n    }\n  })\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Executing Commands as Child Process in AdonisJS\nDESCRIPTION: Demonstrates how to execute another AdonisJS command as a child process using the execa npm module, which is the recommended approach for command execution.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-start\nimport execa from 'execa'\n// highlight-end\nimport { BaseCommand } from '@adonisjs/core/build/standalone'\n\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n\n  public async run() {\n    // highlight-start\n    const { exitCode } = await execa.node('ace', ['make:controller', 'User'], {\n      stdio: 'inherit',\n    })\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in AdonisJS Route Handlers (TypeScript)\nDESCRIPTION: Shows how to access the request object from the HTTP context in a route handler, enabling access to request data like URL, body, and more.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', (ctx) => {\n  console.log(ctx.request.url())\n})\n```\n\n----------------------------------------\n\nTITLE: Using Destructuring to Access Request Object in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates using ES6 destructuring to directly access the request object from the HTTP context in a route handler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ request }) => {\n  console.log(request.url())\n})\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Query Results\nDESCRIPTION: Demonstrates using the paginate method which returns a ModelPaginator instance with additional functionality like serialize to handle model pagination.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().paginate(1)\nconst paginationJSON = posts.serialize({\n  fields: ['title', 'id']\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring the AdonisJS Auth Package\nDESCRIPTION: Command to configure the auth package which creates necessary files including User model, migrations, contracts, config file, and middleware.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/auth\n\n# CREATE: app/Models/User.ts\n# CREATE: database/migrations/1619578304190_users.ts\n# CREATE: contracts/auth.ts\n# CREATE: config/auth.ts\n# CREATE: app/Middleware/Auth.ts file already exists\n# CREATE: app/Middleware/SilentAuth.ts file already exists\n# UPDATE: .adonisrc.json { providers += \"@adonisjs/auth\" }\n# CREATE: ace-manifest.json file\n```\n\n----------------------------------------\n\nTITLE: Passing Transaction Reference to Query Builder\nDESCRIPTION: Shows how to pass a transaction object to an existing query builder instance using the client option. This allows incorporating standalone queries into an ongoing transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nconst trx = await Database.transaction()\n\nDatabase\n  .insertQuery({ client: trx }) 👈\n  .table('users')\n  .insert({ username: 'virk' })\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by Primary Key with Exception Handling\nDESCRIPTION: Demonstrates finding a model by primary key with the findOrFail method, which throws an exception when the record isn't found instead of returning null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Model using AdonisJS CLI\nDESCRIPTION: These commands show how to create a User model using the AdonisJS CLI, with options to generate migrations and factories alongside the model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:model User\n\n# CREATE: app/Models/User.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:model User -m\n\n# CREATE: database/migrations/1618903673925_users.ts\n# CREATE: app/Models/User.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:model User -f\n\n# CREATE: app/Models/User.ts\n# CREATE: database/factories/User.ts\n```\n\n----------------------------------------\n\nTITLE: Using fill Method to Create and Save a User in AdonisJS\nDESCRIPTION: This code shows how to use the fill method to assign multiple attributes at once and then save the user to the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .fill({ username: 'virk', email: 'virk@adonisjs.com' })\n  .save()\n\nconsole.log(user.$isPersisted) // true\n```\n\n----------------------------------------\n\nTITLE: Mutating Values During Serialization in TypeScript\nDESCRIPTION: Demonstrates how to transform property values during serialization using the serialize method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  // highlight-start\n  @column.dateTime({\n    autoCreate: true,\n    serialize: (value: DateTime | null) => {\n      return value ? value.setZone('utc').toISO() : value\n    },\n  })\n  public createdAt: DateTime\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Auth Middleware to Route Groups\nDESCRIPTION: This example demonstrates how to apply the auth middleware to a group of routes, requiring authentication for all routes within the group.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.group(() => {\n  \n}).middleware('auth')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Column Types\nDESCRIPTION: Creates a column with a specific type defined as a raw string, allowing for custom database column types not covered by the standard table builder API.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.specificType('mac_address', 'macaddr')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model with Date Formatting in TypeScript\nDESCRIPTION: This snippet shows how to define a User model with a date of birth field that is automatically formatted when serialized to JSON. It uses the BaseModel and column decorators from Lucid ORM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @column.date({\n    serialize: (value) => value.toFormat('dd LLL yyyy')\n  })\n  public dob: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Unique Validation Rule in AdonisJS\nDESCRIPTION: Demonstrates the basic implementation of a unique validation rule to check email uniqueness in the users table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  email: schema.string([\n    rules.unique({ table: 'users', column: 'email' })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Users with createMany Method in AdonisJS\nDESCRIPTION: This code shows how to use the createMany method to create and persist multiple user instances to the database at once.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.createMany([\n  {\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  },\n  {\n    email: 'romain@adonisjs.com',\n    password: 'secret',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Context in AdonisJS Controller\nDESCRIPTION: Shows how to properly type and use the HTTP context within a controller method, ensuring type safety for request and response objects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nclass HomeController {\n  public async index({ request, response }: HttpContextContract) {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Query Scopes in AdonisJS Model\nDESCRIPTION: Demonstrates how to call one query scope from within another scope using the withScopes method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/query-scopes.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  scope,\n  column,\n  BaseModel,\n  ModelQueryBuilderContract,\n} from '@ioc:Adonis/Lucid/Orm'\n\ntype Builder = ModelQueryBuilderContract<typeof Post>\n\nexport default class Post extends BaseModel {\n  public static firstScope = scope((query: Builder) => {\n    query.withScopes((scopes) => scopes.secondScope())\n  })\n\n  public static secondScope = scope((query) => {\n    query.whereNull('deletedAt')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controllers with Ace CLI\nDESCRIPTION: Shows the command to generate a new controller using the AdonisJS CLI. By default, the CLI will pluralize the name and add 'Controller' suffix to maintain consistency across your project.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode ace make:controller Post\n\n# CREATE: app/Controllers/Http/PostsController.ts\n```\n\n----------------------------------------\n\nTITLE: File Downloads in AdonisJS\nDESCRIPTION: Demonstrates how to implement file downloads in AdonisJS with support for ETag and custom error handling.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = Application.tmpPath('uploads/some-file.jpg')\nresponse.download(filePath)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = Application.tmpPath('uploads/some-file.jpg')\nresponse.download(filePath, true)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = Application.tmpPath('uploads/some-file.jpg')\n\nresponse.download(filePath, true, (error) => {\n  if (error.code === 'ENOENT') {\n    return ['File does not exists', 404]\n  }\n\n  return ['Cannot download file', 400]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Cascade Delete in Database Migration (TypeScript)\nDESCRIPTION: Demonstrates how to set up a cascade delete action in a database migration for related models. This example shows how to configure the onDelete action for a foreign key relationship.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable(this.tableName, (table) => {\n  table.increments('id')\n  table\n    .integer('user_id')\n    .unsigned()\n    .references('users.id')\n    // highlight-start\n    .onDelete('CASCADE')\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Validation Options in AdonisJS\nDESCRIPTION: Shows how to customize email validation with additional options like ignoreMaxLength, allowIpDomain, and domainSpecificValidation. These options are passed in camelCase format to the email validation rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/email.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string([\n    rules.email({\n      ignoreMaxLength: true,\n      allowIpDomain: true,\n      domainSpecificValidation: true,\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Static create Method in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the static create method to create and persist a user to the database in one step.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst user = await User.create({\n  username: 'virk',\n  email: 'virk@adonisjs.com',\n})\n\nconsole.log(user.$isPersisted) // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check Endpoint in AdonisJS\nDESCRIPTION: Creates a route endpoint that returns the health status of the application using the HealthCheck module. Returns OK (200) for healthy status and BadRequest (400) for unhealthy status.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/health-check.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport HealthCheck from '@ioc:Adonis/Core/HealthCheck'\n\nRoute.get('health', async ({ response }) => {\n  const report = await HealthCheck.getReport()\n\n  return report.healthy\n    ? response.ok(report)\n    : response.badRequest(report)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Date Columns in a Model\nDESCRIPTION: This snippet shows how to define date and dateTime columns in a model, including options for automatic creation and update of timestamps.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@column.date()\npublic dob: DateTime\n\n@column.dateTime({ autoCreate: true })\npublic createdAt: DateTime\n\n@column.dateTime({ autoCreate: true, autoUpdate: true })\npublic updatedAt: DateTime\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Configuration\nDESCRIPTION: Complete configuration setup for SQLite database including package installation and connection details.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm i sqlite3\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsqlite: {\n  client: 'sqlite',\n  connection: {\n    filename: Application.tmpPath('db.sqlite3'),\n  },\n  migrations: {\n    naturalSort: true,\n  },\n  useNullAsDefault: true,\n  healthCheck: false,\n  debug: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Getters to HTTP Context in AdonisJS\nDESCRIPTION: Shows how to add custom getters to the HTTP context using the AppProvider, allowing for lazy-loaded or computed properties on the context object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport geoip from 'geoip-lite'\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const HttpContext = this.app.container.use('Adonis/Core/HttpContext')\n\n    HttpContext.getter('location', function location() {\n      return geoip.lookup(this.request.ip())\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing I18n Package in AdonisJS\nDESCRIPTION: Commands to install and configure the I18n package in an AdonisJS application. Creates necessary middleware, language resources directory and configuration files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/i18n@1.6.0\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/i18n\n```\n\n----------------------------------------\n\nTITLE: NGINX Static Assets Configuration\nDESCRIPTION: NGINX configuration for serving static assets with optimal caching and performance settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ \\.(jpg|png|css|js|gif|ico|woff|woff2) {\n  root <PATH_TO_ADONISJS_APP_PUBLIC_DIRECTORY>;\n  sendfile on;\n  sendfile_max_chunk 2m;\n  add_header Cache-Control \"public\";\n  expires 365d;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating or Creating Multiple Posts for a User in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the updateOrCreateMany method to update or create posts with unique slugs for a given user. The foreignKey is implicitly added as a lookup key for finding unique rows.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = [\n  {\n    title: 'Adonis 101',\n    slug: 'adonis-101',\n  },\n  {\n    title: 'Lucid 101',\n    slug: 'lucid-101',\n  }\n]\n\nawait user\n  .related('posts')\n  .updateOrCreateMany(posts, 'slug')\n```\n\n----------------------------------------\n\nTITLE: Faking Hashing in AdonisJS Tests\nDESCRIPTION: This snippet shows how to fake the Hash module in AdonisJS tests. It demonstrates faking password hashing and verification, and restoring the original functionality.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/fakes.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Hash from '@ioc:Adonis/Core/Hash'\n\n// Fake hash implementation\nHash.fake()\n\nconst hashed = await Hash.make('secret') // returns \"secret\"\nawait Hash.verify(hashed, 'secret') // returns \"true\"\n\n// Restore fake\nHash.restore()\n```\n\n----------------------------------------\n\nTITLE: Using AsyncLocalStorage in Event Handlers with Controllers\nDESCRIPTION: Example of emitting an event from a controller that handlers can access via AsyncLocalStorage to retrieve the HTTP context.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class UsersController {\n  public async index() {\n    const user = await User.create({})\n    Event.emit('new:user', user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Schema with Dynamic References\nDESCRIPTION: Complete example of a validation schema using refs for dynamic runtime values in where constraints.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContextContract) {\n  }\n\n  public refs = schema.refs({\n    tenantId: this.ctx.auth.user!.tenantId\n  })\n\n  public schema = schema.create({\n    username: schema.string([\n      rules.exists({\n        table: 'users',\n        column: 'username',\n        where: { tenant_id: this.refs.tenantId },\n      })\n    ])\n  })\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeders in AdonisJS\nDESCRIPTION: These commands demonstrate how to run all seeders or specific seeder files using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# runs all\nnode ace db:seed\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace db:seed --files \"./database/seeders/User.ts\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace db:seed -i\n```\n\n----------------------------------------\n\nTITLE: Registering Global Error Handler for Events\nDESCRIPTION: This snippet demonstrates how to register a global error handler for all event emission errors.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.onError((event, error, eventData) => {\n  // handle the error\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Parser for NUMERIC in AdonisJS\nDESCRIPTION: TypeScript code snippet demonstrating how to use pg.setTypeParser in the AppProvider.ts file to parse NUMERIC PostgreSQL types as JavaScript floats. This customization is applied during the application boot process.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-postgres-custom-type-parsers.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: providers/AppProvider.ts\nimport { types } from 'pg' // we are importing types from pg, so we can use existing enums\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {\n  }\n\n  public register() {\n  }\n\n  public async boot() {\n    // -- this is where the magic happens!\n    types.setTypeParser(types.builtins.NUMERIC, function(val) {\n      return parseFloat(val)\n    })\n\n    // ... rest of AppProvider.ts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Table Column Information\nDESCRIPTION: Demonstrates how to retrieve detailed information about columns in a database table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = await client.columnsInfo('users')\nconsole.log(columns)\n```\n\n----------------------------------------\n\nTITLE: LogRequest Middleware Class Implementation\nDESCRIPTION: Example of a middleware class that logs HTTP request details before forwarding the request.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class LogRequest {\n  public async handle(\n    { request }: HttpContextContract,\n    next: () => Promise<void>\n  ) {\n    console.log(`-> ${request.method()}: ${request.url()}`)\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing stringify and JSON.stringify for XSS Prevention in Edge Templates\nDESCRIPTION: This example demonstrates the difference between using `JSON.stringify` and the safer `stringify` helper in Edge templates. The `stringify` method properly escapes HTML characters to prevent XSS attacks when user input containing malicious script tags is passed to frontend code.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/stringify.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@set('userInput', \"</script><script>alert('bad actor')</script>\")\n\n<script>\n  console.log({{{ JSON.stringify(userInput) }}})\n  console.log({{{ stringify(userInput) }}})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Route Groups in AdonisJS\nDESCRIPTION: This code demonstrates how to apply middleware to a group of routes in AdonisJS. It shows that group middleware are executed before individual route middleware.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.group(() => {\n  Route.get('users', async () => {\n    return 'handled'\n  }).middleware('can:view_users')\n}).middleware('auth')\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating and Persisting Multiple Model Instances\nDESCRIPTION: Shows how to find existing rows or create and persist new instances for multiple records. Similar to firstOrCreate but operates on multiple rows simultaneously.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst keyForSearch = 'email'\nconst payload = [\n  {\n    email: 'virk@adonisjs.com',\n    name: 'Virk',\n  },\n  {\n    email: 'romain@adonisjs.com',\n    name: 'Romain',\n  }\n]\n\nconst users = await User.fetchOrCreateMany(keyForSearch, payload)\n\nfor (let user of users) {\n  if (user.$isLocal) {\n    // local+persisted instance\n  } else {\n    // existing row in the database\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Relationship Loading Approaches\nDESCRIPTION: Demonstrates two different ways to load multiple relationships: calling the load method multiple times sequentially, or using the relationships loader for a more fluent API.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Calling \"load\" method multiple times\nawait user.load('profile')\nawait user.load('posts')\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Seeder in AdonisJS\nDESCRIPTION: This TypeScript code defines a UserSeeder class that extends BaseSeeder and implements the run method to create multiple users using a Lucid model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: database/seeders/User.ts\nimport BaseSeeder from '@ioc:Adonis/Lucid/Seeder'\nimport User from 'App/Models/User'\n\nexport default class UserSeeder extends BaseSeeder {\n\n  public async run () {\n    await User.createMany([\n      {\n        email: 'virk@adonisjs.com',\n        password: 'secret',\n      },\n      {\n        email: 'romain@adonisjs.com',\n        password: 'supersecret'\n      }\n    ])\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Redirects in AdonisJS\nDESCRIPTION: Demonstrates various ways to handle redirects in AdonisJS, including redirecting back, to paths, and to named routes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Redirect back\nresponse.redirect().back()\n\n// Redirect to a url\nresponse.redirect().toPath('/some/url')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().status(301).toPath('/some/url')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().toRoute('PostsController.show', { id: 1 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse\n  .redirect()\n  .withQs() // 👈 forwardes the existing qs\n  .back()\n\nresponse\n  .redirect()\n  .withQs({ sort: 'id' }) // 👈 custom\n  .back()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse\n  .redirect()\n  .withQs({ sort: 'id' })\n  .clearQs()\n  .withQs({ filters: { name: 'virk' } })\n  .toPath('/users')\n\n// URL: /users?filters[name]=virk\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().withQs().back() // 👈 referrer header qs is used\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().withQs().toPath('/users') // 👈 current URL qs is used\n```\n\n----------------------------------------\n\nTITLE: Caching Schema with cacheKey in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to cache a schema using the cacheKey property in AdonisJS. The cacheKey is set to ctx.routeKey, which allows caching the compiled schema to avoid recompilation on subsequent requests with the same route.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/schema-caching.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait request.validate({\n  schema: schema.create({...}),\n  cacheKey: ctx.routeKey,\n})\n```\n\n----------------------------------------\n\nTITLE: File Operations in TypeScript\nDESCRIPTION: Shows various file operations using the Drive module, including deleting, copying, and moving files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait Drive.delete('avatar.jpg')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Drive.copy(source, destination, metadataOptions)\nawait Drive.move(source, destination, metadataOptions)\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Commands to install production dependencies and start the server in production environment.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd build\nnpm ci --production\n\n# Start server\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Using distinct Method for Unique Values in AdonisJS\nDESCRIPTION: Shows how to use the distinct method to retrieve unique values from one or more columns. This demonstrates both single-column and multi-column distinct queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .distinct('country')\n\nDatabase\n  .from('users')\n  .distinct('country', 'locale')\n```\n\n----------------------------------------\n\nTITLE: Working with Savepoints in Nested Transactions\nDESCRIPTION: Illustrates using savepoints for nested transactions, which reduces the number of required database connections. When a transaction creates another transaction, Lucid automatically creates a savepoint.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\n// Transaction is created\nconst trx = await Database.transaction()\n\n// This time, a save point is created\nconst savepoint = await trx.transaction()\n\n // also rollbacks the savepoint\nawait trx.rollback()\n```\n\n----------------------------------------\n\nTITLE: Implementing Idempotent Seeder Operations in AdonisJS\nDESCRIPTION: This TypeScript code demonstrates how to create an idempotent seeder using the updateOrCreateMany method of Lucid models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSeeder from '@ioc:Adonis/Lucid/Seeder'\nimport Country from 'App/Models/Country'\n\nexport default class CountrySeeder extends BaseSeeder {\n\n  public async run () {\n    const uniqueKey = 'isoCode'\n\n    await Country.updateOrCreateMany(uniqueKey, [\n      {\n        isoCode: 'IN',\n        name: 'India',\n      },\n      {\n        isoCode: 'FR',\n        name: 'France',\n      },\n      {\n        isoCode: 'TH',\n        name: ' Thailand',\n      },\n    ])\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationship Count\nDESCRIPTION: Demonstrates how to lazy load a count of related records for a model instance that has already been retrieved from the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail()\nawait post.loadCount('comments')\n\nconsole.log(post.$extras.comments_count)\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Routes Implementation in AdonisJS\nDESCRIPTION: Demonstrates how to use different HTTP methods on the same URL to perform different CRUD operations following REST principles. GET requests retrieve data while POST creates new resources.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/posts', () => {\n  return 'List of posts'\n})\n\n// 👇\nRoute.post('/posts', () => {\n  return 'Create a new post'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pooling in AdonisJS\nDESCRIPTION: Examples of how to configure connection pooling settings for database connections in AdonisJS, including timeout and pool size settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  mysql: {\n    client: 'mysql2',\n    connection: {},\n    // highlight-start\n    pool: {\n      acquireTimeoutMillis: 60 * 1000,\n    }\n    // highlight-end\n  }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n{\n  connections: {\n    mysql: {\n      client: 'mysql2',\n      connection: {\n      },\n      // highlight-start\n      pool: {\n        min: 2,\n        max: 20,\n      },\n      // highlight-end\n      healthCheck: false,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a User Model to Fetch and Format Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the User model to fetch all users and automatically format the date fields when converting to JSON.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.all()\nreturn users.map((user) => user.toJSON()) // date is formatted during `toJSON` call\n```\n\n----------------------------------------\n\nTITLE: Implementing Bouncer Before Hook for Superuser Access\nDESCRIPTION: Example of using a Bouncer before hook to grant all access to a superuser, demonstrating how to implement global authorization rules.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nBouncer.before((user: User | null) => {\n  if (user && user.isSuperUser) {\n    return true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Driver Implementation in TypeScript\nDESCRIPTION: Provides an interface and structure for implementing a custom driver for the Drive module, including all required methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DriverContract {\n  name: string\n  \n  exists(location: string): Promise<boolean>\n  \n  get(location: string): Promise<Buffer>\n  \n  getStream(location: string): Promise<NodeJS.ReadableStream>\n  \n  getVisibility(location: string): Promise<Visibility>\n  \n  getStats(location: string): Promise<DriveFileStats>\n  \n  getSignedUrl(\n    location: string,\n    options?: ContentHeaders & { expiresIn?: string | number }\n  ): Promise<string>\n  \n  getUrl(location: string): Promise<string>\n  \n  put(\n    location: string,\n    contents: Buffer | string,\n    options?: WriteOptions\n  ): Promise<void>\n  \n  putStream(\n    location: string,\n    contents: NodeJS.ReadableStream,\n    options?: WriteOptions\n  ): Promise<void>\n\n  setVisibility(location: string, visibility: Visibility): Promise<void>\n\n  delete(location: string): Promise<void>\n\n  copy(\n    source: string,\n    destination: string,\n    options?: WriteOptions\n  ): Promise<void>\n\n  move(\n    source: string,\n    destination: string,\n    options?: WriteOptions\n  ): Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Row Insert Operation in TypeScript\nDESCRIPTION: Demonstrates how to perform a multi-row insert operation using the .multiInsert() method, which inserts multiple records in a single query. Note that MySQL and SQLite only return the ID for the last inserted row.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.table('users').multiInsert([\n  { username: 'virk' },\n  { username: 'romain' },\n])\n```\n\n----------------------------------------\n\nTITLE: Purpose-Based Encryption in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates encrypting a value with a specific purpose, useful for task or resource-specific encryption. This example shows generating an encrypted link for sharing a post.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/encryption.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = Encryption.encrypt(`post-${post.id}`, '30mins', String(post.id))\n\nreturn `/posts/${post.id}?key=${key}`\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing Hook in User Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a beforeSave hook in a User model to automatically hash passwords before saving to the database. It uses the @beforeSave decorator and checks if the password has been modified before hashing.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Hash from '@ioc:Adonis/Core/Hash'\nimport { column, beforeSave, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column()\n  public email: string\n\n  @column()\n  public password: string\n\n  @beforeSave()\n  public static async hashPassword (user: User) {\n    if (user.$dirty.password) {\n      user.password = await Hash.make(user.password)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Relationship with Additional Constraints\nDESCRIPTION: Demonstrates using whereHas to filter records based on relationship existence with additional constraints on the related records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  .whereHas('comments', (query) => {\n    query.where('isApproved', true)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Action Controller\nDESCRIPTION: A single action controller example that defines a handle method to process a single action. This pattern is useful for extracting complex controller methods into their own dedicated files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class RegisterNewsletterSubscriptionController {\n  public async handle({}: HttpContextContract) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Header Middleware in AdonisJS\nDESCRIPTION: Middleware implementation that extracts the API token from cookies and adds it to the request authorization header. This allows seamless authentication for API requests after the initial OAuth flow.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nimport Env from '@ioc:Adonis/Core/Env'\n\nexport default class SetAuthorizationHeader {\n  public async handle ({ request }: HttpContextContract, next: () => Promise<void>) {\n    const token = request.cookie(String(Env.get('API_TOKEN_COOKIE_NAME')))\n\n    if (token) {\n      request.headers().authorization = `Bearer ${token}`\n    }\n\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Mail Driver in AdonisJS\nDESCRIPTION: This code demonstrates how to use the custom PostMark mail driver in an AdonisJS application to send an email.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport Mail from '@ioc:Adonis/Core/Mail'\n\nMail.use('transactionalMailer').send((message) => {\n})\n```\n\n----------------------------------------\n\nTITLE: Applying FOR SHARE Lock in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the forShare method to add a FOR SHARE lock in PostgreSQL or LOCK IN SHARE MODE in MySQL during a select statement. This allows other transactions to read the locked rows but not modify them.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = Database\n  .from('users')\n  .where('id', 1)\n  .useTransaction(trx)\n  .forShare() // 👈\n  .first()\n```\n\n----------------------------------------\n\nTITLE: Updating or Creating a Model Instance\nDESCRIPTION: Shows how to update an existing row or create a new one if not found. This method obtains an UPDATE lock to prevent concurrent reads from getting outdated values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchCriteria = {\n  id: user.id\n}\n\nconst savePayload = {\n  total: getTotalFromSomeWhere()\n}\n\nconst cart = await Cart.updateOrCreate(searchCriteria, savePayload)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Transaction in AdonisJS\nDESCRIPTION: Shows how to create a transaction client instance using the Database facade. Demonstrates both default and connection-specific transaction initialization.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nconst trx = await Database.transaction()\n\n// for a given connection\nconst trx = await Database\n  .connection('pg')\n  .transaction()\n```\n\n----------------------------------------\n\nTITLE: Query Builder Utility Methods\nDESCRIPTION: Examples of various utility methods available on the raw query builder including wrap, debug, timeout, and reporter data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/raw-query-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.select(\n  'id',\n  Database\n    .raw('select ip_address from user_logins')\n    .wrap('(', ')'),\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database\n  .rawQuery('select * from users')\n  .debug(true)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database\n  .rawQuery('select * from users')\n  .timeout(2000)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database\n  .rawQuery('select * from users')\n  .timeout(2000, { cancel: true })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = Database.rawQuery(sql, bindings)\nconsole.log(query.client)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = Database.rawQuery(sql, bindings)\nconsole.log(query.knexQuery)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .rawQuery(sql, bindings)\n  .reporterData({ userId: auth.user.id })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.on('db:query', (query) => {\n  console.log(query.userId)\n})\n```\n\n----------------------------------------\n\nTITLE: NGINX Reverse Proxy Configuration\nDESCRIPTION: NGINX configuration for proxying requests to AdonisJS application with proper header forwarding and WebSocket support.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n\n  server_name <APP_DOMAIN.COM>;\n\n  location / {\n    proxy_pass http://localhost:<ADONIS_PORT>;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced String Validation Rules in AdonisJS\nDESCRIPTION: Demonstrates the use of additional validation rules including alpha characters, length constraints, trimming, and escaping.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/string.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  title: schema.string([\n    rules.alpha(),\n    rules.minLength(10),\n    rules.maxLength(200),\n    rules.trim(),\n    rules.escape(),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying User Credentials in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the verifyCredentials method to check user credentials without creating a session in AdonisJS web authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await auth.use('web').verifyCredentials(email, password)\n} catch (error) {\n  console.log(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by Column Value in Lucid\nDESCRIPTION: Shows how to find a row using a specific column name and value pair. Returns a model instance or null if no matching record is found.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findBy('email', 'virk@adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model Instance Data in AdonisJS\nDESCRIPTION: Demonstrates how to refresh a model instance by fetching latest values from database after creation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.create({\n  email: 'virk@adonisjs.com',\n  password: 'secret'\n})\n\nawait user.refresh() // \"select * from users where id = user.id\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Auth Provider in TypeScript\nDESCRIPTION: Complete implementation of a custom MongoDB user provider for AdonisJS authentication, including User type definition, Provider configuration, ProviderUser class, and MongoDbAuthProvider class.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/custom-user-provider.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: providers/MongoDbAuthProvider/index.ts\nimport type { HashContract } from '@ioc:Adonis/Core/Hash'\nimport type {\n    UserProviderContract,\n    ProviderUserContract\n} from '@ioc:Adonis/Addons/Auth'\n\n/**\n * Shape of the user object returned by the \"MongoDbAuthProvider\"\n * class. Feel free to change the properties as you want\n */\nexport type User = {\n  id: string\n  email: string\n  password: string\n  rememberMeToken: string | null\n}\n\n/**\n * The shape of configuration accepted by the MongoDbAuthProvider.\n * At a bare minimum, it needs a driver property\n */\nexport type MongoDbAuthProviderConfig = {\n  driver: 'mongo'\n}\n\n/**\n * Provider user works as a bridge between your User provider and\n * the AdonisJS auth module.\n */\nclass ProviderUser implements ProviderUserContract<User> {\n  constructor(public user: User | null, private hash: HashContract) {}\n\n  public getId() {\n    return this.user ? this.user.id : null\n  }\n\n  public getRememberMeToken() {\n    return this.user ? this.user.rememberMeToken : null\n  }\n\n  public setRememberMeToken(token: string) {\n    if (!this.user) {\n      return\n    }\n    this.user.rememberMeToken = token\n  }\n\n  public async verifyPassword(plainPassword: string) {\n    if (!this.user) {\n      throw new Error('Cannot verify password for non-existing user')\n    }\n\n    return this.hash.verify(this.user.password, plainPassword)\n  }\n}\n\n/**\n * The User provider implementation to lookup a user for different\n * operations\n */\nexport class MongoDbAuthProvider implements UserProviderContract<User> {\n  constructor(\n    public config: MongoDbAuthProviderConfig,\n    private hash: HashContract\n  ) {}\n\n  public async getUserFor(user: User | null) {\n    return new ProviderUser(user, this.hash)\n  }\n\n  public async updateRememberMeToken(user: ProviderUser) {\n    await mongoDbClient.updateOne(\n      { _id: user.getId() },\n      { rememberMeToken: user.getRememberMeToken() }\n    )\n  }\n\n  public async findById(id: string | number) {\n    const user = await mongoDbClient.findById(id)\n    return this.getUserFor(user || null)\n  }\n\n  public async findByUid(uidValue: string) {\n    const user = await mongoDbClient.findOne().where('email').equals(uidValue)\n    return this.getUserFor(user || null)\n  }\n\n  public async findByRememberMeToken(userId: string | number, token: string) {\n    const user = await mongoDbClient\n      .findOne()\n      .where('_id').equals(userId)\n      .where('rememberMeToken').equals(token)\n\n    return this.getUserFor(user || null)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationships in AdonisJS Lucid ORM\nDESCRIPTION: Demonstrates how to lazy load relationships from a model instance using the load method. This allows fetching related data after the main model has already been retrieved.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\n// Lazy load the profile\nawait user.load('profile')\nconsole.log(user.profile) // Profile | null\n\n// Lazy load the posts\nawait user.load('posts')\nconsole.log(user.posts) // Post[]\n```\n\n----------------------------------------\n\nTITLE: Referencing a Controller in Routes File\nDESCRIPTION: Shows how to reference a controller method in the routes file using the string expression pattern for lazy loading. This approach keeps the routes file clean and concise.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('posts', 'PostsController.index')\n```\n\n----------------------------------------\n\nTITLE: Using Factories for Data Creation\nDESCRIPTION: Shows basic usage of factories to create single and multiple model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserFactory } from 'Database/factories'\n\nconst user = await UserFactory.create()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await UserFactory.createMany(10)\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Count Property Name\nDESCRIPTION: Demonstrates how to customize the property name for the count value when using withCount by providing a callback with the as method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  // highlight-start\n  .withCount('comments', (query) => {\n    query.as('commentsCount')\n  })\n  // highlight-end\n\nposts.forEach((post) => {\n  // highlight-start\n  console.log(post.$extras.commentsCount)\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values with Expiration in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to encrypt a value with an expiration time. After the specified timeframe, decryption will fail. This adds an extra layer of security for time-sensitive data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/encryption.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nEncryption.encrypt('hello-world', '2 hours')\n```\n\n----------------------------------------\n\nTITLE: Translating Emails with AdonisJS I18n in TypeScript\nDESCRIPTION: Shows how to use AdonisJS I18n to translate email subjects and content in TypeScript.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport Mail from '@ioc:Adonis/Addons/Mail'\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale(customerLocale)\n\nawait Mail.send((message) => {\n  message\n    .subject(i18n.formatMessage('emails.welcome_subject'))\n    .htmlView('emails/welcome', { i18n })\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Model Attributes in TypeScript with AdonisJS\nDESCRIPTION: The merge method allows updating model attributes by performing a deep merge with the existing attributes, preserving unspecified values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.email = 'virk@adonisjs.com'\n\nuser.merge({\n  name: 'virk',\n  password: 'secret'\n})\n\nconsole.log(user.email) // virk@adonisjs.com\n```\n\n----------------------------------------\n\nTITLE: Using joinRaw Method in AdonisJS\nDESCRIPTION: Demonstrates how to use the joinRaw method for join operations not supported by the standard query builder API. This example shows a natural full join between two tables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .joinRaw('natural full join user_logins')\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfExists Validation Rule in AdonisJS\nDESCRIPTION: Validates that a field is present when another specified field exists. This rule marks a field as required only when another field is present in the request data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/required-if-rules.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  address: schema.string.optional([\n    rules.requiredIfExists('needs_delivery')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Method-Level Access to AsyncLocalStorage\nDESCRIPTION: Proper implementation of AsyncLocalStorage access within method bodies rather than at the module level, ensuring context is retrieved for each request.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class UsersController {\n  public async index() {\n    const ctx = HttpContext.get()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Models in belongsTo Relationships\nDESCRIPTION: Demonstrates how to associate two models in a belongsTo relationship using the associate method, which sets the appropriate foreign key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\n\nconst profile = new Profile()\nprofile.avatarUrl = 'foo.jpg'\nawait profile.related('user').associate(user)\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in AdonisJS\nDESCRIPTION: This code shows how to delete a user by first fetching the record and then calling the delete method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\nawait user.delete()\n```\n\n----------------------------------------\n\nTITLE: Request Class Extension\nDESCRIPTION: Example of extending the Request class with custom macros using a service provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const Request = this.app.container.use('Adonis/Core/Request')\n\n    Request.macro('wantsJSON', function () {\n      const types = this.types()\n      return (\n        types[0] && (types[0].includes('/json') || types[0].includes('+json'))\n      )\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Session Values in AdonisJS\nDESCRIPTION: Demonstrates how to read from and write to the session store in route handlers using the session object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/', async ({ session }) => {\n  // Read value\n  const cartTotal = session.get('cart_total')\n\n  // Write value\n  session.put('cart_total', cartTotal + 10)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Class with Ace CLI\nDESCRIPTION: Command to generate a new validator class using the Ace CLI tool.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:validator CreateUser\n```\n\n----------------------------------------\n\nTITLE: Using Model Query Scopes with withScopes\nDESCRIPTION: Shows how to define and use query scopes with the withScopes method to encapsulate query logic within the model for reuse across the application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, scope } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Team extends BaseModel {\n\n  public static forUser = scope((query, user: User) => {\n    const subQuery = Database\n      .from('user_teams')\n      .select('team_id')\n      .where('user_teams.user_id', user.id)\n\n    query.whereIn('id', subQuery)\n  })\n\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nTeam\n  .query()\n  .withScopes((scopes) => scopes.forUser(auth.user))\n```\n\n----------------------------------------\n\nTITLE: Basic Route Definition in TypeScript\nDESCRIPTION: Demonstrates how to define a basic route using the Route module with a simple callback handler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('/', () => {\n  return 'Hello world'\n})\n```\n\n----------------------------------------\n\nTITLE: Registering SilentAuth as Global Middleware\nDESCRIPTION: This code shows how to register the SilentAuth middleware as a global middleware in AdonisJS. Unlike the auth middleware, SilentAuth doesn't block requests from unauthenticated users but still provides user details when available.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/kernel.ts\nServer.middleware.register([\n  () => import('@ioc:Adonis/Core/BodyParser'),\n  // highlight-start\n  () => import('App/Middleware/SilentAuth')\n  // highlight-end\n])\n```\n\n----------------------------------------\n\nTITLE: Finding a User by Primary Key in AdonisJS\nDESCRIPTION: This code shows how to use the find method to fetch a user by their primary key, returning a model instance or null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n// SQL: SELECT * from \"users\" WHERE \"id\" = 1 LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Managed Transactions\nDESCRIPTION: Shows how to return values from a managed transaction callback. This allows capturing the result of database operations performed within the transaction scope for use outside the transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = await Database.transaction(async (trx) => {\n  const response = await trx\n    .insertQuery()\n    .table('users')\n    .insert({ username: 'virk' })\n\n  return response[0] // 👈 return value\n})\n```\n\n----------------------------------------\n\nTITLE: Referencing Policy Actions in Edge Templates\nDESCRIPTION: Shows how to reference actions on a specific policy using dot notation. This example checks if the user can edit a post according to the PostPolicy before showing the edit link.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/can.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@can('PostPolicy.edit', post)\n  <a href=\"{{ route('posts.edit', [post.id]) }}\"> Edit </a>\n@end\n```\n\n----------------------------------------\n\nTITLE: Using havingRaw Method with Aggregates in AdonisJS\nDESCRIPTION: Demonstrates how to use the havingRaw method for more complex aggregate conditions. This example filters groups where the sum of scores exceeds a parameterized value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('exams')\n  .select('user_id')\n  .groupBy('user_id')\n  .havingRaw('SUM(score) > ?', [200])\n```\n\n----------------------------------------\n\nTITLE: Defining SPA Wildcard Route in AdonisJS\nDESCRIPTION: This snippet demonstrates how to create a wildcard route for serving a Single Page Application (SPA) in AdonisJS. It shows two ways to define the route: using an async function and a shorter version using the 'on' method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nRoute.get('*', async ({ view }) => {\n  return view.render('app')\n})\n\n// Shorter version\nRoute.on('*').render('app')\n```\n\n----------------------------------------\n\nTITLE: Applying minLength Rule to Strings in AdonisJS\nDESCRIPTION: Enforces a minimum length of 4 characters for a username string field. The validation will fail if the username has fewer than 4 characters.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/min-length.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.minLength(4)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereJson to Query JSON Columns in AdonisJS\nDESCRIPTION: Demonstrates how to use the whereJson method to match against JSON column values in the database. This example matches an exact JSON object structure against a column.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereJson('address', { city: 'XYZ', pincode: '110001' })\n```\n\n----------------------------------------\n\nTITLE: Setting HasMany Relationships on Parent Model Instances\nDESCRIPTION: Shows how to set or push related models to a parent model instance using the setRelated and pushRelated methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nconst post = new Post()\n\nUser.$getRelation('posts').setRelated(user, [post])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\n\nUser.$getRelation('posts').pushRelated(user, new Post())\nUser.$getRelation('posts').pushRelated(user, new Post())\nUser.$getRelation('posts').pushRelated(user, new Post())\n\nuser.posts.length // 3\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Message Formatter for AdonisJS I18n in TypeScript\nDESCRIPTION: Demonstrates how to create and register a custom message formatter using the Mustache template engine for AdonisJS I18n.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ViewContract } from '@ioc:Adonis/Core/View'\nimport type { TranslationsFormatterContract } from '@ioc:Adonis/Addons/I18n'\n\nexport class MustacheFormatter implements TranslationsFormatterContract {\n  public readonly name = 'mustache'\n  constructor(private view: ViewContract) {}\n\n  public format(message: string, _: string, data?: Record<string, any>) {\n    return this.view.renderRawSync(message, data)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\nimport { MustacheFormatter } from './MustacheFormatter'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public register() {\n    // Register your own bindings\n  }\n\n  public async boot() {\n    const I18n = this.app.container.resolveBinding('Adonis/Addons/I18n')\n    const View = this.app.container.resolveBinding('Adonis/Core/View')\n\n    I18n.extend('mustache', 'formatter', () => new MustacheFormatter(View))\n  }\n\n  public async ready() {\n    // App is ready\n  }\n\n  public async shutdown() {\n    // Cleanup, since app is going down\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Mail Queue in AdonisJS\nDESCRIPTION: This snippet demonstrates how to monitor the mail queue using the Mail.monitorQueue method in AdonisJS. It logs successful email sends and errors.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Mail from '@ioc:Adonis/Addons/Mail'\n\nMail.monitorQueue((error, result) => {\n  if (error) {\n    console.log('Unable to send email')\n    console.log(error.mail)\n    return\n  }\n\n  console.log('Email sent')\n  console.log(result.mail)\n  console.log(result.response)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Docker Service\nDESCRIPTION: Docker Compose configuration for PostgreSQL service with automated database initialization. Sets up volume mappings, environment variables, and port forwarding with initialization script mounting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postgres:\n    container_name: postgres\n    image: postgres:13\n    volumes:\n      - postgres_volume:/var/lib/postgresql/data\n      - ./dockerConfig/postgres-dev-init.sql:/docker-entrypoint-initdb.d/init.sql\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - 5432:5432\n```\n\n----------------------------------------\n\nTITLE: MSSQL Database Configuration\nDESCRIPTION: Configuration setup for Microsoft SQL Server including connection parameters and migration settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm i tedious\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmssql: {\n  client: 'mssql',\n  connection: {\n    user: Env.get('MSSQL_USER'),\n    port: Env.get('MSSQL_PORT'),\n    server: Env.get('MSSQL_SERVER'),\n    password: Env.get('MSSQL_PASSWORD', ''),\n    database: Env.get('MSSQL_DB_NAME'),\n  },\n  migrations: {\n    naturalSort: true,\n  },\n  healthCheck: false,\n  debug: false,\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Configuration\nDESCRIPTION: MySQL database configuration including both standard TCP connection and Unix socket connection options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm i mysql2\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmysql: {\n  client: 'mysql2',\n  connection: {\n    host: Env.get('MYSQL_HOST'),\n    port: Env.get('MYSQL_PORT'),\n    user: Env.get('MYSQL_USER'),\n    password: Env.get('MYSQL_PASSWORD', ''),\n    database: Env.get('MYSQL_DB_NAME'),\n  },\n  migrations: {\n    naturalSort: true,\n  },\n  healthCheck: false,\n  debug: false,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmysql: {\n  connection: {\n    socketPath : '/path/to/socket.sock',\n    user: Env.get('MYSQL_USER'),\n    password: Env.get('MYSQL_PASSWORD', ''),\n    database: Env.get('MYSQL_DB_NAME'),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Route Groups with Prefixes in AdonisJS\nDESCRIPTION: This snippet illustrates how to create nested route groups with prefixes in AdonisJS. It shows how prefixes are applied from outer to inner groups, resulting in combined route paths.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.group(() => {\n  Route.group(() => {\n    Route.get('/users', 'UsersController.index') // /api/v1/users\n    Route.get('/posts', 'PostsController.index') // /api/v1/posts\n  }).prefix('/v1')\n}).prefix('/api')\n```\n\n----------------------------------------\n\nTITLE: Using URL Builder for Signed URLs in AdonisJS\nDESCRIPTION: Shows how to use the Route.builder() fluent API to generate signed URLs with parameters and expiration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/signed-urls.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.builder()\n  .params({ email: 'foo@bar.com' })\n  .makeSigned('verifyEmail', { expiresIn: '30m' })\n```\n\n----------------------------------------\n\nTITLE: Saving Existing Related Models with HasMany Query Client\nDESCRIPTION: Demonstrates how to persist an existing related model instance using the save method, and multiple instances using saveMany.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = new Post()\npost.title = 'Adonis 101'\n\nconst post = await user\n  .related('post')\n  .save(post)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = new Post()\npost.title = 'Adonis 101'\n\nconst post1 = new Post()\npost1.title = 'Lucid 101'\n\nconst post2 = new Post()\npost2.title = 'Validator 101'\n\nconst post = await user\n  .related('post')\n  .saveMany([post, post1, post2])\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in AdonisJS\nDESCRIPTION: Demonstrates how to run migrations using the Ace CLI command. This command executes the up method on all migration files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace migration:run\n```\n\n----------------------------------------\n\nTITLE: Chaining Methods on Relationship Query Builder\nDESCRIPTION: Demonstrates how to add additional constraints to a relationship query builder by chaining query methods like where and paginate.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await user\n  .related('posts')\n  .query()\n  .where('isPublished', true)\n  .paginate(1)\n```\n\n----------------------------------------\n\nTITLE: Using Global Database Transactions in AdonisJS v5 Tests\nDESCRIPTION: This snippet demonstrates how to use Lucid global transactions to ensure a clean database state before each test in AdonisJS v5.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport test from 'japa'\nimport Database from '@ioc:Adonis/Lucid/Database'\n\ntest.group('Example', (group) => {\n  group.beforeEach(async () => {\n    await Database.beginGlobalTransaction()\n  })\n\n  group.afterEach(async () => {\n    await Database.rollbackGlobalTransaction()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Uploaded Files in AdonisJS\nDESCRIPTION: This snippet demonstrates how to validate an uploaded file by specifying rules for file size and extension. It checks if the file is valid and handles errors if not.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/file-uploads.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst coverImage = request.file('cover_image', {\n  size: '2mb',\n  extnames: ['jpg', 'png', 'gif'],\n})\n\nif (!coverImage) {\n  return\n}\n\nif (!coverImage.isValid) {\n  return coverImage.errors\n}\n\nawait coverImage.move(Application.tmpPath('uploads'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Read/Write Replicas in AdonisJS\nDESCRIPTION: Example configuration for setting up read/write replicas in AdonisJS, demonstrating how to define multiple read servers and a single write server.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{\n  connections: {\n    mysql: {\n      connection: {\n        user: Env.get('MYSQL_USER'),\n        password: Env.get('MYSQL_PASSWORD'),\n        database: Env.get('MYSQL_DB_NAME'),\n      },\n      // highlight-start\n      replicas: {\n        read: {\n          connection: [\n            {\n              host: '192.168.1.1',\n            },\n            {\n              host: '192.168.1.2',\n            },\n          ]\n        },\n        write: {\n          connection: {\n            host: '196.168.1.3',\n          },\n        },\n      },\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PM2 Process Manager Configuration\nDESCRIPTION: PM2 ecosystem configuration file for managing the Node.js application in production with cluster mode and auto-restart capabilities.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nmodule.exports = {\n  apps: [\n    {\n      name: 'web-app',\n      script: './build/server.js',\n      instances: 'max',\n      exec_mode: 'cluster',\n      autorestart: true,\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Join with Callback in AdonisJS\nDESCRIPTION: Shows how to use a callback function to define more complex join constraints. This approach allows for multiple conditions in a join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query\n      .on('users.id', '=', 'user_logins.user_id')\n      .andOnVal('user_logins.created_at', '>', '2020-10-09')\n  })\n  .select('users.*')\n  .select('user_logins.ip_address')\n  .select('user_logins.country')\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies in AdonisJS API Tests\nDESCRIPTION: Demonstrates how to send and read cookies in API tests, including signed, encrypted, and plain cookies.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nawait client\n  .get('/users')\n  .cookie('user_preferences', { limit: 10 })\n\nconst response = await client.get('/users')\n\nconsole.log(response.cookies())\nconsole.log(response.cookie('user_preferences'))\n\nresponse.assertCookie('user_preferences')\n\nawait client\n  .client('/users')\n  .encryptedCookie('user_preferences', { limit: 10 })\n\nawait client\n  .client('/users')\n  .plainCookie('user_preferences', { limit: 10 })\n```\n\n----------------------------------------\n\nTITLE: Extending Router in AdonisJS\nDESCRIPTION: This snippet shows how to extend the Router functionality in AdonisJS by adding custom methods. It demonstrates adding a 'mustBeSigned' method to verify request signatures.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n\n  constructor(protected app: ApplicationContract) {}\n\n  // highlight-start\n  public async boot() {\n    const Route = this.app.container.use('Adonis/Core/Route')\n\n    Route.Route.macro('mustBeSigned', function () {\n      this.middleware(async (ctx, next) => {\n        if (!ctx.request.hasValidSignature()) {\n          ctx.response.badRequest('Invalid signature')\n          return\n        }\n\n        await next()\n      })\n\n      return this\n    })\n  }\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereJsonSuperset to Query JSON Columns in AdonisJS\nDESCRIPTION: Demonstrates how to use the whereJsonSuperset method to find records where a JSON column contains at least all the properties specified in the query object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereJsonSuperset('address', { pincode: '110001' })\n```\n\n----------------------------------------\n\nTITLE: Customizing Range Validation Error Messages\nDESCRIPTION: Shows how to create custom error messages for range validation using template variables that access the rule's options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/range.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'age.range': 'Candidate age must be between {{ options.start }} and {{ options.stop }} years',\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Implementation with Scoped Parameters\nDESCRIPTION: Controller method with scoped parameter binding. This allows the comment to be resolved in the context of the post.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { bind } from '@adonisjs/route-model-binding'\nimport Post from 'App/Models/Post'\nimport Comment from 'App/Models/Comment'\n\nexport default class PostsController {\n  @bind()\n  public async show({}, post: Post, comment: Comment) {\n    return { post, comment }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Connection Configuration\nDESCRIPTION: Demonstrates how to register a new PostgreSQL connection with the connection manager by providing a name and configuration object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = 'pg'\n\nconst config = {\n  client: 'pg',\n  connection: {\n    // ...\n  },\n  healthCheck: true\n}\n\nDatabase.manager.add(name, config)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Placeholders in AdonisJS Validation Messages\nDESCRIPTION: This snippet illustrates the use of dynamic placeholders in custom validation messages for AdonisJS. It shows how to reference runtime values like field names and rule options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-messages.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  messages: {\n    required: '{{ field }} is required to sign up',\n    enum: 'The value of {{ field }} must be in {{ options.choices }}'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AdonisJS Logger in TypeScript\nDESCRIPTION: Demonstrates how to import and use the AdonisJS Logger module for basic logging operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Logger from '@ioc:Adonis/Core/Logger'\n\nLogger.info('A info message')\nLogger.warn('A warning')\n```\n\n----------------------------------------\n\nTITLE: Asserting Against OpenAPI Spec in AdonisJS Tests\nDESCRIPTION: Shows how to use the assertAgainstApiSpec method to validate API responses against an OpenAPI specification.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntest('get a paginated list of existing posts', async ({ client }) => {\n  const response = await client.get('/posts')\n  response.assertAgainstApiSpec()\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a User in AdonisJS\nDESCRIPTION: This code shows how to update a user by first fetching the record, modifying it, and then saving it back to the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\nuser.lastLoginAt = DateTime.local() // Luxon dateTime is used\n\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Using Knex.js Raw Query Builder\nDESCRIPTION: Demonstrates how to use Knex.js raw query builder for executing raw SQL with parameter binding.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclient\n  .knexRawQuery('select * from users where id = ?', [1])\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Callback Handler in AdonisJS\nDESCRIPTION: Route handler for processing OAuth callback from providers. Creates or retrieves user data, generates an API token, sets a secure cookie with the token, and returns the user data. Handles multiple edge cases including access denial and errors.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nRoute.get('/:provider/callback', async ({ ally, auth, response, params }) => {\n  /**\n   * If user is already logged in, do not execute the callback.\n   */\n  if (await auth.check()) {\n    return response.notAcceptable()\n  }\n\n  const provider = ally.use(params.provider).stateless()\n\n  /**\n   * User has explicitly denied the login request.\n   */\n  if (provider.accessDenied()) {\n    return 'Access was denied'\n  }\n\n  /**\n   * There was an unknown error during the redirect.\n   */\n  if (provider.hasError()) {\n    return provider.getError()\n  }\n\n  const { token } = await provider.accessToken()\n  const providerUser = await provider.userFromToken(token)\n\n  /**\n   * Insert the user in database if it doesn't exist,\n   * otherwise we return it. We are also storing the access token,\n   * so we cas use it later for other operations.\n   */\n  const user = await User.firstOrCreate({\n    email: providerUser.email!\n  }, {\n    accessToken: token,\n    isVerified: providerUser.emailVerificationState === 'verified'\n  })\n\n  /**\n   * Attach a profile to the user with data from provider.\n   */\n  await user.related('profile').firstOrCreate({\n    lastName: providerUser.original.family_name,\n    firstName: providerUser.original.given_name,\n  })\n\n  const oat = await auth.use('api').login(user, {\n    expiresIn: '7days'\n  })\n\n  /**\n   * Create a cookie where the Opaque Access Token\n   * will be stored with maxAge = 7 days.\n   */\n  response.cookie(\n    String(Env.get('API_TOKEN_COOKIE_NAME')),\n    oat.token,\n    { maxAge: 60 * 60 * 24 * 7, sameSite: 'none', 'secure': true, httpOnly: true }\n  )\n\n  /**\n   * Everything is OK!\n   */\n  return response.ok(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring @adonisjs/ally Package\nDESCRIPTION: Steps to configure the @adonisjs/ally package, including creating necessary files and updating environment variables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/ally\n\n# CREATE: contracts/ally.ts\n# CREATE: config/ally.ts\n# UPDATE: .env,.env.example\n# UPDATE: tsconfig.json { types += \"@adonisjs/ally\" }\n# UPDATE: .adonisrc.json { providers += \"@adonisjs/ally\" }\n```\n\n----------------------------------------\n\nTITLE: Using orFail Variations for Find Methods in AdonisJS\nDESCRIPTION: This snippet demonstrates the orFail variations of find methods, which raise an exception when no row is found.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\nconst user = await User.firstOrFail()\nconst user = await User.findByOrFail('email', 'virk@adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: Accessing Registered Routes in AdonisJS\nDESCRIPTION: This code demonstrates how to access registered routes in AdonisJS using the Route.toJSON() method. It shows the correct place to call this method within a service provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// title: providers/AppProvider.ts\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n  constructor(protected app: ApplicationContract) {}\n\n  public async ready() {\n    const Route = this.app.container.use('Adonis/Core/Route')\n    console.log(Route.toJSON())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Namespacing for Controllers\nDESCRIPTION: This demonstrates how to use route groups to define a namespace for controllers located in different directories. The namespace should be an absolute path from the root of your application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.group(() => {\n  Route.get('cart', 'CartController.index')\n  Route.put('cart', 'CartController.update')\n}).namespace('App/Modules/Checkout')\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dropping Tables in AdonisJS\nDESCRIPTION: Shows how to conditionally drop a table if it exists using the dropTableIfExists method, which is safer than dropTable when you're not sure if the table exists.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public down() {\n    this.schema.dropTableIfExists('users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests in AdonisJS\nDESCRIPTION: Example route handler showing how to authenticate subsequent requests after login. The handler verifies if the user is logged in before accessing protected resources.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// title: Authenticate subsequent request\nRoute.get('dashboard', async ({ auth }) => {\n  await auth.use('web').authenticate()\n\n  // ✅ Request authenticated\n  console.log(auth.user!)\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Variables for Sessions\nDESCRIPTION: Adds validation rules for session-related environment variables in the env.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Make sure to add the following validation rules to the\n * `env.ts` file to validate the environment variables.\n */\nexport default Env.rules({\n  // ...existing rules\n  SESSION_DRIVER: Env.schema.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Bouncer Actions in TypeScript\nDESCRIPTION: Example of defining authorization actions using Bouncer in the start/bouncer.ts file. This snippet shows how to create actions for viewing, editing, and deleting posts based on user permissions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from 'App/Models/Post'\nimport User from 'App/Models/User'\n\nexport const { actions } = Bouncer\n  .define('viewPost', (user: User, post: Post) => {\n    return post.userId === user.id\n  })\n  .define('editPost', (user: User, post: Post) => {\n    return post.userId === user.id\n  })\n  .define('deletePost', (user: User, post: Post) => {\n    return post.userId === user.id && post.status !== 'published'\n  })\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Route Parameter in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to access a single route parameter by name and provide a default value for optional parameters.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.param('id')\n\n// Default value for optional params\nrequest.param('id', 1)\n```\n\n----------------------------------------\n\nTITLE: Mail Testing with Fakes\nDESCRIPTION: Example of using Mail fakes for testing email sending functionality\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport Mail from '@adonisjs/mail'\n\nconst fakeMailer = Mail.fake()\n\nMail.send()\n\nfakeMailer.exists({ to: 'virk@adonisjs.com' })\nfakeMailer.exists({ subject: 'Welcome to AdonisJS!' })\n\nMail.restore()\n```\n\n----------------------------------------\n\nTITLE: Retrieving User from Token and Secret in AdonisJS Ally (TypeScript)\nDESCRIPTION: Shows how to use the ally.userFromTokenAndSecret method to get user details for OAuth1 providers like Twitter using token and secret values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/twitter/user', async ({ ally }) => {\n  const user = await ally\n    .use('twitter')\n    .userFromTokenAndSecret(token, secret)\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Data in Edge Components\nDESCRIPTION: Demonstrates how to use the @inject tag to inject data into the component tree. The tag accepts an object containing the data to be injected.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/component.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@inject({ tabs: [] })\n```\n\n----------------------------------------\n\nTITLE: Importing Schema Rules in AdonisJS\nDESCRIPTION: Shows how to import both schema and rules objects from the Validator module for additional validation constraints.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Relationship in AdonisJS Model\nDESCRIPTION: Example showing how to define a BelongsTo relationship between Post and User models using the @belongsTo decorator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/belongs-to.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, belongsTo, BelongsTo } from '@ioc:Adonis/Lucid/Orm'\nimport User from 'App/Models/User'\n\nclass Post extends BaseModel {\n  @belongsTo(() => User)\n  public author: BelongsTo<typeof User>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to access the request body data in a POST route handler using the request.body() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.post('/', async ({ request }) => {\n  request.body()\n})\n```\n\n----------------------------------------\n\nTITLE: Faking Mail in AdonisJS Tests\nDESCRIPTION: This snippet demonstrates how to fake mail sending in AdonisJS tests using the Mail.fake() method. It shows how to create a fake mailer, make assertions on sent emails, and restore the original mail functionality.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/fakes.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\nimport Mail from '@ioc:Adonis/Addons/Mail'\n\ntest('register user', async ({ assert, client }) => {\n  const mailer = Mail.fake()\n\n  await client\n    .post('register')\n    .form({\n      email: 'virk@adonisjs.com',\n      password: 'secret'\n    })\n\n  // Time for assertions\n  assert.isTrue(mailer.exists((mail) => {\n    return mail.subject === 'Welcome to AdonisJS'\n  }))\n\n  Mail.restore()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Key for Throttling in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the usingKey method to define a custom key for throttling requests, instead of using the default IP address.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nLimiter\n  .allowRequest(1000)\n  .usingKey(user.id)\n```\n\n----------------------------------------\n\nTITLE: Passing Transaction to Model Query Builder\nDESCRIPTION: Demonstrates how to associate a transaction with a model query builder. This ensures that model queries operate within the transaction context.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport User from 'App/Models/User'\n\nconst trx = await Database.transaction()\n\nconst users = await User\n  .query({ client: trx }) 👈\n  .where('is_active', true)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Schema Migration Class in TypeScript\nDESCRIPTION: Basic structure of a schema migration class that extends the BaseSchema class from AdonisJS Lucid.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nclass UserSchema extends BaseSchema {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rule\nDESCRIPTION: Implementation of a custom camelCase validation rule in the validator preload file\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-rules.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { validator } from '@ioc:Adonis/Core/Validator'\n\nvalidator.rule('camelCase', (value, _, options) => {\n  if (typeof value !== 'string') {\n    return\n  }\n\n  if (value !== string.camelCase(value)) {\n    options.errorReporter.report(\n      options.pointer,\n      'camelCase',\n      'camelCase validation failed',\n      options.arrayExpressionPointer\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Limiter with Fluent API in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the fluent API to configure a limiter, including setting the request limit, duration, and custom error handling.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nLimiter\n  .allowRequests(1000)\n  .limitExceeded((error) => {\n    console.log(error instanceof ThrottleException)\n    console.log(error.status)\n    console.log(error.message)\n    console.log(error.headers)\n    console.log(error.limit)\n    console.log(error.retryAfter)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Blog Post in AdonisJS\nDESCRIPTION: HTML markup for a form to create a new blog post, including fields for title and body. The form action uses the route helper for dynamic URL generation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Create a new blog post</title>\n  </head>\n  <body>\n    <form action=\"{{ route('PostsController.store') }}\" method=\"POST\">\n      <div>\n        <p>\n          <label for=\"title\"> Post title </label>\n        </p>\n\n        <input type=\"text\" name=\"title\" />\n      </div>\n\n      <div>\n        <p>\n          <label for=\"body\"> Post body </label>\n        </p>\n\n        <textarea name=\"body\" cols=\"30\" rows=\"10\"></textarea>\n      </div>\n\n      <div>\n        <button type=\"submit\">Create Post</button>\n      </div>\n    </form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Faking Events in AdonisJS Tests\nDESCRIPTION: This snippet shows how to fake events in AdonisJS tests using the Event.fake() method. It demonstrates faking all events or specific ones, restoring events, and finding faked events for assertions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/fakes.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\n\n// Fake all events\nEvent.fake()\n\n// Fake specific events\nEvent.fake(['new:user', 'update:email'])\n\n// Restore events\nEvent.restore()\n\n// Finding events\nconst emitter = Event.fake()\n\nassert.isTrue(emitter.exists('new:user'))\nassert.isTrue(emitter.exists((event) => {\n  return event.name === 'new:user' && event.data.id === 1\n}))\n\nemitter.find('new:user')\n// returns { name: 'new:user', data: any }\n\nemitter.filter((event) => event.name.startsWith('invite:'))\n// returns { name: 'new:user', data: any }\n```\n\n----------------------------------------\n\nTITLE: Setting up Socket.io Listeners in AdonisJS\nDESCRIPTION: Creates a socket.ts file to initialize the Socket.io connection and handle incoming socket connections with event listeners.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// title: start/socket.ts\nimport Ws from 'App/Services/Ws'\nWs.boot()\n\n/**\n * Listen for incoming socket connections\n */\nWs.io.on('connection', (socket) => {\n  socket.emit('news', { hello: 'world' })\n\n  socket.on('my other event', (data) => {\n    console.log(data)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Preloading Nested Relationships with onQuery in HasOne\nDESCRIPTION: Shows how to preload nested relationships using the onQuery hook while ensuring it only executes on direct queries and not sub-queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasOne(() => Profile, {\n    onQuery(query) {\n      // highlight-start\n      if (!query.isRelatedSubQuery) {\n        query.preload('socialAccounts')\n      }\n      // highlight-end\n    }\n  })\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with Default Value\nDESCRIPTION: Demonstrates retrieving session data with a fallback default value as the second parameter to the get() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/session.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ session.get('cartTotal', 0) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterFind Hook for User Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an afterFind hook in a User model. The hook is called after a single user record is fetched from the database, allowing for post-processing of the user instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  afterFind,\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @afterFind()\n  public static afterFindHook (user: User) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by Column Value with Exception Handling\nDESCRIPTION: Demonstrates finding a model by column value with the findByOrFail method, which throws an exception when the record isn't found instead of returning null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findByOrFail('email', 'virk@adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging for Individual Queries in AdonisJS\nDESCRIPTION: These snippets demonstrate how to enable debugging for individual queries using the 'debug' method on the query builder for select, insert, and raw queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/debugging.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Select\nDatabase\n  .query()\n  .select('*')\n  .debug(true) // 👈\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Insert\nDatabase\n  .insertQuery()\n  .debug(true) // 👈\n  .insert({})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Raw\nDatabase\n  .rawQuery('select * from users')\n  .debug(true) // 👈\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Migration Paths for Database Connections in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure separate migration paths for different database connections in the AdonisJS database configuration file. It's useful when managing migrations for multiple databases with distinct schemas.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  users: {\n    client: 'mysql2',\n    migrations: {\n      // highlight-start\n      paths: ['./database/users/migrations']\n      // highlight-end\n    }\n  },\n  products: {\n    client: 'mysql2',\n    migrations: {\n      // highlight-start\n      paths: ['./database/products/migrations']\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Lucid Model Instances\nDESCRIPTION: Shows how to associate a transaction with a Lucid model instance using the useTransaction method. This enables model operations to participate in the transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Database from '@ioc:Adonis/Lucid/Database'\n\n// highlight-start\nawait Database.transaction(async (trx) => {\n  const user = new User()\n  user.username = 'virk'\n\n  user.useTransaction(trx)\n  await user.save()\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts by Comment Existence in AdonisJS\nDESCRIPTION: Shows how to query posts that have one or more comments using the has relationship method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  .has('comments')\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart Stream in Controller - TypeScript\nDESCRIPTION: Controller method implementation for handling multipart file streams and processing them.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class DriveController {\n  public async store({ request }: HttpContextContract) {\n    request.multipart.onFile('input_field_name', {}, (part) => {\n      someSdk.uploadStream(part)\n    })\n\n    await request.multipart.process()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database\nDESCRIPTION: Shows how to instantiate a pre-registered connection by its name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.manager.connect('pg')\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the timeout method to set a maximum execution time for a query. An exception is raised if the timeout is exceeded. The timeout value is specified in milliseconds.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .timeout(2000)\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Configuration in TypeScript\nDESCRIPTION: These snippets show how to customize various model configurations such as primary key, table name, self-assigning primary keys, and database connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Basemodel {\n  public static primaryKey = 'email'\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class User extends BaseModel {\n  public static table = 'app_users'\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport uuid from 'uuid/v4'\nimport { BaseModel, beforeCreate } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  public static selfAssignPrimaryKey = true\n\n  @column({ isPrimary: true })\n  public id: string\n\n  @beforeCreate()\n  public static assignUuid(user: User) {\n    user.id = uuid()\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class User extends BaseModel {\n  public static connection = 'pg'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Policy Hooks in AdonisJS PostPolicy\nDESCRIPTION: This code snippet shows how to implement 'before' and 'view' methods in a PostPolicy class, including a superuser check and post ownership verification.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Post from 'App/Models/Post'\nimport { BasePolicy } from '@ioc:Adonis/Addons/Bouncer'\n\nexport default class PostPolicy extends BasePolicy {\n  public async before(user: User | null) {\n    if (user && user.isSuperUser) {\n      return true\n    }\n  }\n\n  public async view(user: User, post: Post) {\n    return post.userId === user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Instantiation in AdonisJS Factories with TypeScript\nDESCRIPTION: Shows how to customize the process of instantiating a model instance for a given factory using the 'newUp' handler. This allows for custom logic when creating new model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nFactory\n  .define(User, () => {\n\n  })\n  .newUp((attributes, ctx) => {\n    const user = new User()\n    user.fill(attributes)\n\n    return user\n  })\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Customizing Lazy Loaded Relationships with Query Callbacks\nDESCRIPTION: Shows how to apply additional constraints when lazy loading relationships using a callback function that receives the relationship query builder.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.load('profile', (profileQuery) => {\n  profileQuery.where('isActive', true)\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handler Implementation\nDESCRIPTION: Extended exception handler with custom validation error handling\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Logger from '@ioc:Adonis/Core/Logger'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\nimport HttpExceptionHandler from '@ioc:Adonis/Core/HttpExceptionHandler'\n\nexport default class ExceptionHandler extends HttpExceptionHandler {\n  protected statusPages = {\n    '404': 'errors/not-found',\n    '500..599': 'errors/server-error',\n  }\n\n  constructor() {\n    super(Logger)\n  }\n\n  public async handle(error: any, ctx: HttpContextContract) {\n    if (error.code === 'E_VALIDATION_FAILURE') {\n      return ctx.response.status(422).send(error.messages)\n    }\n    return super.handle(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Readiness in AdonisJS\nDESCRIPTION: Demonstrates how to check if the connection is ready to make queries and connect if not ready.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nif (!connection.ready) {\n  connection.connect()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed URL Signature in AdonisJS Route Handler\nDESCRIPTION: Shows how to verify a signed URL's signature using the request.hasValidSignature() method within a route handler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/signed-urls.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/verify/:email', async ({ request }) => {\n  if (request.hasValidSignature()) {\n    return 'Marking email as verified'\n  }\n\n  return 'Signature is missing or URL was tampered.'\n}).as('verifyEmail')\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence with has() Method\nDESCRIPTION: Demonstrates how to check if a value exists in the session store using the has() method with dot notation for nested values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/session.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@if(session.has('user.id'))\n\n@endif\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Related Models with HasMany Query Client\nDESCRIPTION: Shows how to create multiple related model instances in a single operation using the createMany method, which handles transactions automatically.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.related('posts').createMany([\n  {\n    title: 'Adonis 101',\n  },\n  {\n    title: 'Lucid 101'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Using Raw SQL in Schema Migration\nDESCRIPTION: Example of executing raw SQL commands within a deferred block in schema migration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.defer(async () => {\n      await this.raw('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in AdonisJS Configuration\nDESCRIPTION: This snippet shows how to enable CORS in the AdonisJS configuration file. It sets the 'enabled' property to true in the config/cors.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/cors.ts\n{\n  \"enabled\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterPaginate Hook for User Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an afterPaginate hook in a User model. The hook is called after paginating user records, allowing for post-processing of the paginated results.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  afterPaginate,\n} from '@ioc:Adonis/Lucid/Orm'\n\nimport {\n  SimplePaginatorContract\n} from '@ioc:Adonis/Lucid/Database'\n\nexport default class User extends BaseModel {\n  @afterPaginate()\n  public static afterPaginateHook (users: SimplePaginatorContract<User>) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Instance in Lucid\nDESCRIPTION: Shows how to create a new model instance and persist it to the database using the static create method. This handles both model instantiation and database insertion.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.create({\n  email: 'virk@adonisjs.com',\n  password: 'secret',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring New Social Providers in AdonisJS\nDESCRIPTION: Example of adding new social providers (GitHub and Twitter) to the contracts/ally.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@ioc:Adonis/Addons/Ally' {\n  interface SocialProviders {\n    github: {\n      config: GithubDriverConfig\n      implementation: GithubDriverContract\n    }\n    twitter: {\n      config: TwitterDriverConfig\n      implementation: TwitterDriverContract\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Event in TypeScript Controller\nDESCRIPTION: This code shows how to emit the 'new:user' event from within a controller method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\n\nexport default class UsersController {\n  public async store() {\n    // ... code to create a new user\n    // highlight-start\n    Event.emit('new:user', { id: 1 })\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Authentication Check in AdonisJS\nDESCRIPTION: This code shows how to perform an optional authentication check using the auth.check method in AdonisJS web authentication, without raising exceptions for unauthenticated requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/web-guard.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('web').check()\n\nif (auth.use('web').isLoggedIn) {\n}\n```\n\n----------------------------------------\n\nTITLE: Production Deployment Script for Laravel Forge\nDESCRIPTION: Script for deploying AdonisJS application in production environment, including build process, dependency installation, and environment setup.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/laravel-forge.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /home/forge/staging.api.yourdomain.com\n\ngit reset --hard;\n\ngit clean -df;\n\n\ngit pull origin $FORGE_SITE_BRANCH\n\n#migrate database\nnode ace migration:run --force\n# install npm dependencies\n yarn\n# Run Build command\nnode ace build --production\n\n# Copy env files\ncd /home/forge/staging.api.yourdomain.com/build\nyarn install --production\ncp ../.env ./.env\n# reload pm2 \npm2 reload all --update-env\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries\nDESCRIPTION: Demonstrates how to execute raw SQL queries with parameter binding using the rawQuery method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait client\n  .rawQuery('select * from users where id = ?', [1])\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Error Event in AdonisJS\nDESCRIPTION: Demonstrates how to handle the 'error' event emitted when unable to establish a connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.on('error', (error, self) => {\n  console.log(error)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Builder Instance\nDESCRIPTION: Shows how to get a query builder instance from the client or use the 'from' alias to select a table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.from('users')\n```\n\n----------------------------------------\n\nTITLE: Auth Middleware with Request Termination\nDESCRIPTION: Example of an authentication middleware that can terminate requests for unauthenticated users.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class Auth {\n  public async handle(\n    { request, response }: HttpContextContract,\n    next: () => Promise<void>\n  ) {\n    if (notAuthenticated) {\n      response.unauthorized({ error: 'Must be logged in' })\n      return\n    }\n\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Protection Form Implementation\nDESCRIPTION: Example of implementing CSRF protection in an Edge template form using csrfField helper\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/web-security.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n<form action=\"{{ route('PostsController.store') }}\" method=\"post\">\n  {{ csrfField() }}\n\n  <div>\n    <label for=\"title\">Post title</label>\n    <input type=\"text\" name=\"title\">\n  </div>\n  <hr>\n\n  <button type=\"submit\">Create Post</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Mocking Objects with SinonJS in AdonisJS Tests\nDESCRIPTION: This snippet demonstrates how to use SinonJS to mock ES6 classes in AdonisJS tests. It shows mocking a method of a service class and verifying the mock expectations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/fakes.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\nimport sinon from 'sinon'\nimport ExchangeService from 'App/Services/ExchangeService'\n\ntest('transfer payment', async ({ client }) => {\n  const mock = sinon.mock(ExchangeService.prototype)\n  mock\n    .expects('getRate')\n    .once()\n    .withArgs('INR', 600)\n    .returns(6)\n\n  await client\n    .post('/transfer')\n    .form({ currency: 'INR', amount: 600 })\n\n  mock.verify()\n  mock.restore()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Main Seeder in AdonisJS\nDESCRIPTION: This TypeScript code defines a MainSeeder class that imports and runs other seeders in a specific order, with environment checks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSeeder from '@ioc:Adonis/Lucid/Seeder'\nimport Application from '@ioc:Adonis/Core/Application'\n\nexport default class IndexSeeder extends BaseSeeder {\n  private async runSeeder(Seeder: { default: typeof BaseSeeder }) {\n    /**\n     * Do not run when not in a environment specified in Seeder\n     */\n    if (\n      (!Seeder.default.environment.includes('development') && Application.inDev)\n      || (!Seeder.default.environment.includes('testing') && Application.inTest)\n      || (!Seeder.default.environment.includes('production') && Application.inProduction)\n    ) {\n      return\n    }\n\n    await new Seeder.default(this.client).run()\n  }\n\n  public async run() {\n    await this.runSeeder(await import('../Category'))\n    await this.runSeeder(await import('../User'))\n    await this.runSeeder(await import('../Post'))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Route Actions\nDESCRIPTION: Example of implementing authorization checks in route handlers using the bouncer package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Post from 'App/Models/Post'\n\nRoute.get('posts/:id', async ({ bouncer, request }) => {\n  const post = await Post.findOrFail(request.param('id'))\n  await bouncer.authorize('viewPost', post)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Select Query with Column Selection\nDESCRIPTION: Demonstrates how to select specific columns from a database table using the select method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select('id', 'username', 'email')\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check Endpoint in AdonisJS\nDESCRIPTION: Example demonstrating how to create a health check endpoint that returns the application's health status and report using the new Health Check module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/introducing-adonisjs-v5-preview.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport HealthCheck from '@ioc:Adonis/Core/HealthCheck'\n\nRoute.get('/', async ({ response }) => {\n  const { report, healthy } = await HealthCheck.getReport()\n  return healthy\n    ? response.status(200).send(report)\n    : response.status(400).send(report)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Route Matches in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to check if the current request URL matches a specific route pattern or multiple route patterns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nif (request.matchesRoute('/posts/:id')) {\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Database Connections in AdonisJS\nDESCRIPTION: Examples of how to switch between multiple database connections and close connections in AdonisJS using Lucid ORM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nDatabase\n  .connection('mysql')\n  .from('posts')\n  .select('*')\n```\n\nLANGUAGE: ts\nCODE:\n```\n// Close a specific connection\nawait Database.manager.close('mysql')\n\n// Close all connections\nawait Database.manager.closeAll()\n```\n\n----------------------------------------\n\nTITLE: Syncing Related Models in Many-to-Many Relationship (TypeScript)\nDESCRIPTION: Explains the sync method for synchronizing pivot rows in a many-to-many relationship. It covers basic usage, adding pivot columns, and disabling the detach option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\n// Only skills with id 1, 2, 3 will stay in the pivot table\nawait user.related('skills').sync([1, 2, 3])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\nawait user.related('skills').sync({\n  [1]: {\n    proficiency: 'Beginner',\n  },\n  [2]: {\n    proficiency: 'Master'\n  },\n  [3]: {\n    proficiency: 'Master'\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .related('skills')\n  // Add skills with id 1,2,3, but do not remove any\n  // rows from the pivot table\n  .sync([1, 2, 3], false)\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Fields and Relationships in TypeScript\nDESCRIPTION: Demonstrates how to cherry-pick specific fields and relationships during serialization.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post\n  .query()\n  .preload('comments')\n  .preload('category')\n  .preload('author')\n  .first()\n\npost.serialize({\n  fields: {\n    pick: ['id', 'title', 'body'],\n  },\n  relations: {\n    comments: {\n      fields: ['id', 'body'],\n    },\n    author: {\n      fields: ['id', 'email', 'avatar_url'],\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with create Method\nDESCRIPTION: Demonstrates how to create a new related record and link it to the parent model in a single operation using the create method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail(1)\nconst comment = await post.related('comments').create({\n  body: 'This is a great post'\n})\n\nconsole.log(comment.postId === post.id) // true\n```\n\n----------------------------------------\n\nTITLE: Consuming Requests and Handling Exceptions in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the consume method to consume a request for a given key and handle the ThrottleException when the limit is exceeded.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const response = await limiter.consume(`global_${user.id}`)\n  // response is same as \"limiter.get\" response\n} catch (error) {\n  console.log(error instanceof ThrottleException)\n  console.log(error.status)\n  console.log(error.message)\n  console.log(error.headers)\n  console.log(error.limit)\n  console.log(error.retryAfter)\n}\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate and updateOrCreate with HasMany Relationships\nDESCRIPTION: Shows how to use firstOrCreate and updateOrCreate methods with HasMany relationships, which automatically include the foreign key in the search payload.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .related('posts')\n  .firstOrCreate({}, {\n    title: 'Adonis 101',\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .related('posts')\n  .updateOrCreate({}, {\n    title: 'Adonis 101',\n  })\n```\n\n----------------------------------------\n\nTITLE: Multiple Row Insert Operation\nDESCRIPTION: Shows how to insert multiple rows at once using the multiInsert method\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .table('users')\n  .multiInsert([\n    {\n      username: 'virk',\n      email: 'virk@adonisjs.com',\n      password: await Hash.make('secret'),\n    },\n    {\n      username: 'romain',\n      email: 'romain@adonisjs.com',\n      password: await Hash.make('secret'),\n    }\n  ])\n```\n\n----------------------------------------\n\nTITLE: Inserting spatial data using Model with prepare hook\nDESCRIPTION: Demonstrates how to use the 'prepare' hook in a Lucid Model to convert string values to geometry objects when saving data, allowing for more convenient handling of spatial data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  @column({\n    prepare: (value?: string) => {\n      return value ? Database.st().geomFromText(value, 4326) : value\n    }\n  })\n  public geom: string\n}\n\nconst point = new Point()\npoint.geom = 'Point(0 0)'\nawait point.save()\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Model Methods\nDESCRIPTION: Shows how model instances can access the HTTP context through AsyncLocalStorage to perform user-specific operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-start\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n// highlight-end\n\nexport default class User extends BaseModel {\n  public get isFollowing() {\n    // highlight-start\n    const ctx = HttpContext.get()!\n    return this.id === ctx.auth.user.id\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database in AdonisJS\nDESCRIPTION: Demonstrates how to establish a database connection using the connect method. This method is usually called automatically when running a new database query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.connect()\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeFetch Hook for User Model (TypeScript)\nDESCRIPTION: This example shows how to create a beforeFetch hook in a User model. The hook is called before fetching multiple user records, allowing for query modifications such as excluding deleted users.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  beforeFetch,\n  ModelQueryBuilderContract,\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @beforeFetch()\n  public static ignoreDeleted (query: ModelQueryBuilderContract<typeof User>) {\n    query.whereNull('is_deleted')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting BIGINT and BIGSERIAL to JavaScript BigInt\nDESCRIPTION: TypeScript code snippet showing how to use setTypeParser to automatically convert PostgreSQL BIGINT and BIGSERIAL types to JavaScript BigInt. This is useful for handling large integer values accurately.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-postgres-custom-type-parsers.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// INT8 is OID 20 which corresponds to: BIGINT | BIGSERIAL\ntypes.setTypeParser(types.builtins.INT8, BigInt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in AdonisJS\nDESCRIPTION: Shows an example of how to configure a database connection named 'primary' in the config/database.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  connections: {\n    primary: {\n      client: 'pg',\n      connection: {\n        // ...\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Response Class with Custom Provider\nDESCRIPTION: Example of extending the Response class using macros inside a custom service provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const Response = this.app.container.use('Adonis/Core/Response')\n\n    Response.macro('flash', function (messages) {\n      this.ctx!.session.flash(messages)\n      return this\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeCreate hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This snippet shows how to use the @beforeCreate decorator to register a function that assigns a random avatar URL to a user before inserting a new record into the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeCreate, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @beforeCreate()\n  public static assignAvatar(user: User) {\n    user.avatarUrl = getRandomAvatar()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Request Aborting with abortIf\nDESCRIPTION: Using abortIf method to conditionally abort requests based on a condition with custom message and status code.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.abortIf(!auth.user, 'Not authenticated', 401)\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values with Purpose in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to decrypt a value that was encrypted with a specific purpose. This ensures that the decryption only succeeds if the purpose matches, adding an extra layer of security.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/encryption.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nEncryption.decrypt(key, String(params.id))\n```\n\n----------------------------------------\n\nTITLE: Incrementing Values with increment in AdonisJS\nDESCRIPTION: The increment method allows incrementing the value for one or more columns. It supports incrementing multiple columns simultaneously by passing an object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('accounts')\n  .where('id', 1)\n  .increment('balance', 10)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('accounts')\n  .where('id', 1)\n  .increment({\n    balance: 10,\n    credit_limit: 5\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exception via CLI\nDESCRIPTION: Command to generate a new custom exception class\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:exception UnAuthorized\n```\n\n----------------------------------------\n\nTITLE: Switching Disks and Buckets in TypeScript\nDESCRIPTION: Demonstrates how to switch between different disks and buckets at runtime using the Drive.use and bucket methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Reference to the S3 disk\nconst s3 = Drive.use('s3')\n\nawait s3.put(filePath, stringOrBuffer)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDrive\n  .use('s3')\n  // highlight-start\n  .bucket('bucketName')\n  // highlight-end\n  .put(filePath, stringOrBuffer)\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Event Handlers\nDESCRIPTION: Shows how an event handler can access the HTTP context through AsyncLocalStorage, with important considerations about event scope and responsibilities.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Event handler\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n\nEvent.on('new:user', () => {\n  const ctx = HttpContext.get()\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing the st instance for database connections\nDESCRIPTION: Shows how to access the 'st' instance for both default and named database connections, enabling the use of Postgis functions with specific connections.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.st() // default connection\nDatabase.st('primary') // named connection\n```\n\n----------------------------------------\n\nTITLE: Moving Uploaded Files with AdonisJS BodyParser in TypeScript\nDESCRIPTION: Shows how to move user-uploaded files to a disk using the 'moveToDisk' method of the BodyParser file object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.post('posts', async ({ request }) => {\n  const coverImage = request.file('cover_image')\n\n  // highlight-start\n  // Written to the \"images\" directory\n  await coverImage.moveToDisk('images')\n\n  // Written to the \"root\" directory\n  await coverImage.moveToDisk('./')\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Looping through an Array with @each in Edge.js Templates\nDESCRIPTION: A basic example showing how to iterate over an array of usernames using the @each tag. The tag accepts a binary expression with the 'in' operator, and outputs each value in the array.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/each.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@each(username in ['virk', 'nikk', 'romain'])\n  {{ username }}\n@end\n```\n\n----------------------------------------\n\nTITLE: Registering Service Providers in AdonisJS\nDESCRIPTION: Configuration for specifying service providers to be loaded during application boot. Includes both local providers and package-provided providers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"providers\": [\n    \"./providers/AppProvider\",\n    \"@adonisjs/core\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in AdonisJS Route Handler\nDESCRIPTION: Shows how to use the logger within an AdonisJS route handler, accessing it through the context object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ logger }) => {\n  logger.info('An info message')\n  return 'handled'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Query Scope with Arguments\nDESCRIPTION: Shows how to call a query scope that accepts arguments using the withScopes method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/query-scopes.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nProject\n  .query()\n  .withScopes((scopes) => scopes.visibleTo(auth.user))\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Constraints\nDESCRIPTION: Adds a unique index constraint to table columns with an optional custom index name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.unique(['slug', 'tenant_id'])\n})\n```\n\n----------------------------------------\n\nTITLE: Defining HasOne Relationship in User Model\nDESCRIPTION: Defines a HasOne relationship between User and Profile models using the @hasOne decorator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Profile from 'App/Models/Profile'\n\nimport {\n  column,\n  BaseModel,\n  hasOne,\n  HasOne\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Factory Relationships\nDESCRIPTION: Demonstrates how to define and create related models using factories.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PostFactory = Factory\n  .define(Post, ({ faker }) => {\n    return {\n      title: faker.lorem.sentence(),\n      content: faker.lorem.paragraphs(4),\n      status: 'DRAFT',\n    }\n  })\n  .build()\n\nexport const UserFactory = Factory\n  .define(User, ({ faker }) => {\n    return {\n      username: faker.internet.userName(),\n      email: faker.internet.email(),\n      password: faker.internet.password(),\n    }\n  })\n  .relation('posts', () => PostFactory)\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore for AdonisJS Application\nDESCRIPTION: A comprehensive .dockerignore file for an AdonisJS application to keep the Docker image small by excluding unnecessary files like node_modules, build artifacts, environment files, and git-related files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_5\n\nLANGUAGE: gitignore\nCODE:\n```\n# Adonis default .gitignore ignores\nnode_modules\nbuild\ncoverage\n.vscode\n.DS_STORE\n.env\ntmp\n\n# Additional .gitignore ignores (any custom file you wish)\n.idea\n\n# Additional good to have ignores for dockerignore\nDockerfile*\ndocker-compose*\n.dockerignore\n*.md\n.git\n.gitignore\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Home Page Template\nDESCRIPTION: Home page template that extends the main layout and defines content for the body section\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/layouts.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n// title: resources/views/home.edge\n@layout('layouts/main')\n@set('title', 'Home page')\n\n@section('body')\n  <section class=\"hero is-warning\">\n    <div class=\"hero-body\">\n      <p class=\"title\">\n        Title\n      </p>\n      <p class=\"subtitle\">\n        Subtitle\n      </p>\n    </div>\n  </section>\n@end\n```\n\n----------------------------------------\n\nTITLE: Renaming Resource Parameter in AdonisJS Routes\nDESCRIPTION: Shows how to rename the default 'id' parameter for a resource route using the paramFor method. It also includes an example of renaming parameters for nested resources.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .resource('users', 'UsersController')\n  // highlight-start\n  .paramFor('users', 'user')\n  // highlight-end\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Showing routes with params only\n\nGET /users/:user\nGET /users/:user/edit\nPUT,PATCH /users/:user\nDELETE /users/:user\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .resource('posts.comments', 'CommentsController')\n  .paramFor('posts', 'post')\n  .paramFor('comments', 'comment')\n```\n\n----------------------------------------\n\nTITLE: Correct Import Pattern in Ace Command\nDESCRIPTION: Example showing the correct approach of importing application modules inside the run method to ensure the application is loaded first.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default class CreateUser extends BaseCommand {\n  public static commandName = 'create:user'\n  public static settings = {\n    loadApp: true\n  }\n\n  public async run() {\n    const { default: User } = await import('App/Models/User')\n    await User.create()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AdonisJS Env Provider\nDESCRIPTION: Demonstrates how to access environment variables using the AdonisJS Env provider with support for default values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Env from '@ioc:Adonis/Core/Env'\n\nEnv.get('NODE_ENV')\n\n// With default values\nEnv.get('HOST', '0.0.0.0')\nEnv.get('PORT', 3333)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Connections with AdonisJS Factories in TypeScript\nDESCRIPTION: Demonstrates how to use a custom connection or query client when working with factories in AdonisJS. It shows methods for specifying a connection name or passing a custom query client instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait Factory.connection('tenant-1').create()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryClient = Database.connection('tenant-1')\nawait Factory.client(queryClient).create()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Factory.query({ connection: 'tenant-1' }).create()\n```\n\n----------------------------------------\n\nTITLE: Standalone Validator Usage\nDESCRIPTION: Example of using the validator outside of HTTP requests with manual data provision.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validator, schema } from '@ioc:Adonis/Core/Validator'\n\nawait validator.validate({\n  schema: schema.create({\n    // ... define schema\n  }),\n  data: {\n    email: 'virk@adonisjs.com',\n    password: 'secret'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing Paginated Results to JSON in TypeScript\nDESCRIPTION: Shows how to serialize paginated results to JSON using the toJSON method. It also demonstrates how to customize the naming strategy for the JSON output.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Database.from('posts').paginate(page, limit)\n\nposts.namingStrategy = {\n  paginationMetaKeys() {\n    return {\n      total: 'total',\n      perPage: 'perPage',\n      currentPage: 'currentPage',\n      lastPage: 'lastPage',\n      firstPage: 'firstPage',\n      firstPageUrl: 'firstPageUrl',\n      lastPageUrl: 'lastPageUrl',\n      nextPageUrl: 'nextPageUrl',\n      previousPageUrl: 'previousPageUrl',\n    }\n  }\n}\n\nreturn posts.toJSON()\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Cookies in AdonisJS Routes\nDESCRIPTION: Demonstrates basic cookie operations in AdonisJS route handlers, including reading cookies with default values, setting/updating cookies, and clearing cookies.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.post('add-to-cart', async ({ request, response }) => {\n  /**\n   * Read cookie by name\n   */\n  const existingItems = request.cookie('cart-items', [])\n\n  /**\n   * Set/update cookie\n   */\n  const newItems = existingItems.concat([{ id: 10 }])\n  response.cookie('cart-items', newItems)\n})\n\nRoute.delete('clear-cart', async ({ response }) => {\n  /**\n   * Clear cookie\n   */\n  response.clearCookie('cart-items')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Environment in AdonisJS\nDESCRIPTION: This snippet shows how to access the current environment of an AdonisJS application, which can be 'web', 'console', 'repl', or 'test'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Application from '@ioc:Adonis/Core/Application'\nconsole.log(Application.environment)\n```\n\n----------------------------------------\n\nTITLE: Naming Route Groups in AdonisJS\nDESCRIPTION: This snippet shows how to name route groups in AdonisJS, which prefixes all routes within the group with the given name. It demonstrates naming both individual routes and resourceful routes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Named as users.index, users.store and so on\nRoute.resource('users', 'UserController')\n\nRoute\n  .group(() => {\n    // Named as api.users.index, api.users.store\n    Route.resource('users', 'UserController')\n  })\n  .prefix('v1')\n  .as('api')\n```\n\n----------------------------------------\n\nTITLE: Using onBetween Method with Joins in AdonisJS\nDESCRIPTION: Shows how to use the onBetween method to filter join results where a column value falls within a specified range. This creates a BETWEEN condition in the join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onBetween('user_logins.login_date', ['2020-10-01', '2020-12-31'])\n  })\n```\n\n----------------------------------------\n\nTITLE: Hash Verification - TypeScript\nDESCRIPTION: Example of verifying a plain text value against a hashed value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (await Hash.verify(hashedValue, plainTextValue)) {\n  // verified\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforePaginate hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This example demonstrates the use of the @beforePaginate decorator to register a function that excludes soft-deleted records from both the count query and the main query in paginate operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  beforePaginate,\n  BaseModel,\n  ModelQueryBuilderContract\n} from '@ioc:Adonis/Lucid/Orm'\n\ntype PostQuery = ModelQueryBuilderContract<typeof Post>\n\nclass Post extends BaseModel {\n  @beforePaginate()\n  public static withoutSoftDeletes(\n    [countQuery, query]: [PostQuery, PostQuery]\n  ) {\n    countQuery.whereNull('deleted_at')\n    query.whereNull('deleted_at')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP and DOM Tests for AdonisJS\nDESCRIPTION: Example test file demonstrating HTTP requests with Supertest and DOM assertions using JSDOM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport test from 'japa'\nimport { JSDOM } from 'jsdom'\nimport supertest from 'supertest'\n\nconst BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`\n\ntest.group('Welcome', () => {\n  test('ensure home page works', async (assert) => {\n    /**\n     * Make request\n     */\n    const { text } = await supertest(BASE_URL).get('/').expect(200)\n\n    /**\n     * Construct JSDOM instance using the response HTML\n     */\n    const { document } = new JSDOM(text).window\n\n    const title = document.querySelector('.title')\n    assert.exists(title)\n    assert.equal(title!.textContent!.trim(), 'It Works!')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Column Types in Table Builder\nDESCRIPTION: Examples of defining various column types including increments, integers, text, string, and numeric types.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.increments('id')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.increments('other_id', { primaryKey: false })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.integer('visits')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.bigInteger('visits')\n})\n```\n\n----------------------------------------\n\nTITLE: Overwriting Column Names in a Model\nDESCRIPTION: This snippet demonstrates how to explicitly define a database column name that differs from the conventional snake_case naming.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@column({ columnName: 'user_id', isPrimary: true })\npublic id: number\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Connection in AdonisJS\nDESCRIPTION: Demonstrates how to access the connection instance using the Database.manager property in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nconst { connection } = Database.manager.get('primary')\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule with Options\nDESCRIPTION: Implementation of the camelCase validation rule with maxLength option\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-rules.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator.rule('camelCase', (\n  value,\n  [maxLength],\n  options\n) => {\n  if (maxLength && value.length > maxLength) {\n    options.errorReporter.report(\n      options.pointer,\n      'camelCase.maxLength',\n      'camelCase.maxLength validation failed',\n      options.arrayExpressionPointer,\n      { maxLength }\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating a New Model Instance\nDESCRIPTION: Shows how to find an existing row or create a local model instance if not found. Useful for scenarios where you need to work with a record that may or may not exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchCriteria = {\n  email: 'virk@adonisjs.com',\n}\n\nconst savePayload = {\n  name: 'Virk',\n  email: 'virk@adonisjs.com',\n  password: 'secret'\n}\n\nconst user = await User.firstOrNew(searchCriteria, savePayload)\n\nif (user.$isPersisted) {\n  // user exists in the database\n} else {\n  // un-persisted user instance\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Key is Blocked in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the isBlocked method to determine if a key has exceeded its allowed limit and is currently blocked from making requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nif (await limiter.isBlocked(`global_${user.id}`)) {\n  // consumed more than allowed limit\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Translations in TypeScript with AdonisJS I18n\nDESCRIPTION: Demonstrates how to reload translations within a running process using AdonisJS I18n.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nawait I18n.reloadTranslations()\n```\n\n----------------------------------------\n\nTITLE: Running AdonisJS Production Server\nDESCRIPTION: These commands navigate to the build directory and start the AdonisJS server in production mode. It runs the compiled JavaScript directly without TypeScript compilation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd build\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Recommended Config and Model Relationship in AdonisJS\nDESCRIPTION: Demonstrates the recommended approach for configuring and using database table names in models, promoting better separation of concerns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/config.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst someConfig = {\n  databaseTable: 'users'\n}\n\nimport someConfig from 'Config/file/path'\n\nclass User extends Model {\n  public static table = someConfig.databaseTable\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent and Related Models in HasMany Relationship\nDESCRIPTION: Shows how to access the parent model and related model references from a HasMany relationship instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n\nUser.$getRelation('posts').model // User\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n\nUser.$getRelation('posts').relatedModel() // Post\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating Multiple Model Instances\nDESCRIPTION: Demonstrates finding existing rows or creating new model instances for multiple records based on a specific search key. Similar to firstOrNew but for multiple records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst keyForSearch = 'email'\nconst payload = [\n  {\n    email: 'virk@adonisjs.com',\n    name: 'Virk',\n  },\n  {\n    email: 'romain@adonisjs.com',\n    name: 'Romain',\n  }\n]\n\nconst users = await User.fetchOrNewUpMany(keyForSearch, payload)\n\nfor (let user of users) {\n  if (user.$isPersisted) {\n    // existing row in the database\n  } else {\n    // local instance\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Placeholders in Raw Queries\nDESCRIPTION: Examples of using named placeholders with object bindings for more readable queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/raw-query-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.rawQuery(\n  'select * from users where id = :id',\n  {\n    id: 1,\n  }\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.rawQuery(\n  'select * from users where :column: = :value',\n  {\n    column: 'id',\n    value: 1,\n  }\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.rawQuery(\n  'select * from user_logins inner join users on :column1: = :column2:',\n  {\n    column1: 'users.id',\n    column2: 'user_logins.user_id',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Getting OAuth Redirect URL in AdonisJS Ally (TypeScript)\nDESCRIPTION: Demonstrates how to obtain the OAuth redirect URL as a string using the redirectUrl method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = await ally.use('github').redirectUrl()\n```\n\n----------------------------------------\n\nTITLE: Logging with Merging Objects in AdonisJS\nDESCRIPTION: Shows how to log messages with merged objects and error handling in AdonisJS Logger.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Logger from '@ioc:Adonis/Core/Logger'\n\nLogger.info({ username: 'virk' }, 'user signup')\n// output: {\"username\":\"virk\",\"msg\":\"user signup\"}\n\nLogger.error({ err: new Error('signup failed') }, 'user signup')\n// output: {\"err\":{\"type\":\"Error\",\"message\":\"foo\",\"stack\":\"...\"},\"msg\":\"user signup\"}\n```\n\n----------------------------------------\n\nTITLE: HTML Escaping in Edge Templates\nDESCRIPTION: Demonstration of Edge's automatic HTML escaping for XSS prevention using double curly braces.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{ '<script> alert(`foo`) </script>' }}\n```\n\n----------------------------------------\n\nTITLE: Using hasMany Decorator for One-to-Many Relationships\nDESCRIPTION: Shows how to use the hasMany decorator to define a one-to-many relationship between models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hasMany, HasMany, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends Model {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraints\nDESCRIPTION: Creates foreign key constraints with optional cascade behavior for updates and deletes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.foreign('user_id').references('users.id')\n})\n\ntable\n  .foreign('user_id')\n  .references('users.id')\n  .onDelete('CASCADE')\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction Method with Query Builder\nDESCRIPTION: Demonstrates passing a transaction to an existing query builder using the useTransaction method. This provides flexibility to decide when to associate a query with a transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nconst trx = await Database.transaction()\n\nDatabase\n  .insertQuery()\n  .table('users')\n  .useTransaction(trx) 👈\n  .insert({ username: 'virk' })\n```\n\n----------------------------------------\n\nTITLE: Basic Email Validation in AdonisJS\nDESCRIPTION: Demonstrates basic email validation using the schema.string() and rules.email() methods. This validation ensures the input is properly formatted as an email address.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/email.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  email: schema.string([\n    rules.email()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSave hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the @beforeSave decorator to register a function that hashes a user's password before saving to the database. It's triggered before both insert and update operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeSave, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @beforeSave()\n  public static async hashPassword(user: User) {\n    if (user.$dirty.password) {\n      user.password = await Hash.make(user.password)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Signed URL in AdonisJS\nDESCRIPTION: Demonstrates how to create a signed URL using Route.makeSignedUrl method. The example shows generating a URL for email verification with a signature parameter.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/signed-urls.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.makeSignedUrl('verifyEmail', {\n  email: 'foo@bar.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Detaching Related Models in Many-to-Many Relationship (TypeScript)\nDESCRIPTION: Shows how to use the detach method to remove relationships from the pivot table in a many-to-many relationship. It includes examples of removing specific relationships and all relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst skill = await Skill.find(1)\n\nawait user.related('skills').detach([skill.id])\n\n// Remove all skills for the user\nawait user.related('skills').detach()\n```\n\n----------------------------------------\n\nTITLE: Query Scope with Arguments in AdonisJS Model\nDESCRIPTION: Illustrates implementing a query scope that accepts parameters, specifically filtering projects based on user permissions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/query-scopes.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport User from 'App/Models/User'\nimport { BaseModel, column, scope } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Project extends BaseModel {\n\n  public static visibleTo = scope((query, user: User) => {\n    if (user.isAdmin) {\n      return\n    }\n\n    /**\n     * Non-admin users can only view their own team's projects\n     */\n    query.where('teamId', user.teamId)\n  })\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Completion Status in AdonisJS\nDESCRIPTION: Demonstrates how to check if a transaction has been completed and commit if necessary using the isCompleted property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (!trx.isCompleted) {\n  await trx.commit()\n}\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS for Production\nDESCRIPTION: This command builds the AdonisJS application for production. It compiles the TypeScript code to JavaScript and optimizes the build for deployment.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --production\n```\n\n----------------------------------------\n\nTITLE: Defining SkillUser Pivot Table Migration Schema in TypeScript\nDESCRIPTION: Creates a migration schema for the 'skill_user' pivot table with foreign keys referencing 'users' and 'skills' tables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class SkillUsers extends BaseSchema {\n  protected tableName = 'skill_user'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.integer('user_id').unsigned().references('users.id')\n      table.integer('skill_id').unsigned().references('skills.id')\n      table.unique(['user_id', 'skill_id'])\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Formatting with Currency\nDESCRIPTION: Shows how to format numeric values with currency using ICU message syntax. Uses the number type with currency/USD format.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bagel_price\": \"The price of this bagel is {amount, number, ::currency/USD}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Through Foreign Key in HasManyThrough Relationship\nDESCRIPTION: Example showing how to define the 'throughForeignKey' in a HasManyThrough relationship, which is the foreign key between the through and related models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User], {\n    throughForeignKey: 'userId', // userId column on the \"Post\" model\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Include in Edge\nDESCRIPTION: Demonstrates how to include a partial template using the @include tag with a static path relative to the views directory. The included partial has access to the parent template state.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/include.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@include('partials/header')\n```\n\n----------------------------------------\n\nTITLE: Accessing RC File Configuration in AdonisJS\nDESCRIPTION: How to access the parsed AdonisRC file configuration, which contains project settings and provider information.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.rcFile.providers\nApplication.rcFile.raw\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Authorization Code in AdonisJS Ally (TypeScript)\nDESCRIPTION: Shows how to retrieve the OAuth authorization code using the getCode method after checking for its presence.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nif(ally.use('github').hasCode()) {\n  console.log(ally.use('github').getCode())\n}\n```\n\n----------------------------------------\n\nTITLE: Spotify OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the Spotify OAuth driver in AdonisJS Ally, including client ID, secret, callback URL, and Spotify-specific options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nspotify: {\n  driver: 'spotify',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n\n  // Spotify specific\n  scopes: ['user-read-email', 'streaming'],\n  showDialog: false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Query Scope in AdonisJS Model\nDESCRIPTION: Demonstrates how to create a basic published scope that filters posts based on publication date using Luxon for date handling.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/query-scopes.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\n\nimport {\n  BaseModel,\n  column,\n  scope // 👈 import scope method\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Post extends BaseModel {\n  public static published = scope((query) => {\n    query.where('publishedOn', '<=', DateTime.utc().toSQLDate())\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example\nDESCRIPTION: Example of basic Redis operations using the AdonisJS Redis module\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Redis from '@ioc:Adonis/Addons/Redis'\n\nawait Redis.set('foo', 'bar')\nconst value = await Redis.get('foo')\n```\n\n----------------------------------------\n\nTITLE: Event Error Handler Implementation\nDESCRIPTION: Shows how to implement a global error handler for events in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/june-2021-release.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\n\nEvent.onError((event, error, eventData) => {\n  // handle the error\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeFind hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This example demonstrates the use of the @beforeFind decorator to register a function that excludes soft-deleted records from find operations like Model.find(), Model.findBy(), and Model.first().\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  beforeFind,\n  BaseModel,\n  ModelQueryBuilderContract\n} from '@ioc:Adonis/Lucid/Orm'\n\ntype PostQuery = ModelQueryBuilderContract<typeof Post>\n\nclass Post extends BaseModel {\n  @beforeFind()\n  public static withoutSoftDeletes(query: PostQuery) {\n    query.whereNull('deleted_at')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with Node.js Process\nDESCRIPTION: Basic example of accessing environment variables using Node.js native process.env object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.NODE_ENV\nprocess.env.HOST\nprocess.env.PORT\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Users with Query Builder in AdonisJS\nDESCRIPTION: This snippet demonstrates how to perform a bulk delete operation using the query builder directly.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().where('isVerified', false).delete()\n```\n\n----------------------------------------\n\nTITLE: Stateless OAuth User Retrieval in AdonisJS Ally (TypeScript)\nDESCRIPTION: Shows how to retrieve the user after a stateless OAuth redirect by disabling CSRF verification during the callback.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/github/callback', async ({ ally }) => {\n  const github = ally.use('github').stateless()\n\n  const user = await github.user()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Resource Routes in AdonisJS\nDESCRIPTION: Demonstrates the use of shallow resources to create a flatter URL structure for nested resources, reducing unnecessary nesting in certain routes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.shallowResource('posts.comments', 'CommentsController')\n```\n\n----------------------------------------\n\nTITLE: Positional Placeholders in Raw Queries\nDESCRIPTION: Shows how to use positional placeholders for safe query parameter binding to prevent SQL injection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/raw-query-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.rawQuery(\n  'select * from users where id = ?',\n  [1]\n)\n\n// SELECT * FROM \"users\" WHERE \"id\" = 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.rawQuery(\n  'select * from users where ?? = ?',\n  ['users.id', 1]\n)\n\n// SELECT * FROM \"users\" WHERE \"users\".\"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Using the inspect helper in Edge templates\nDESCRIPTION: Demonstrates the usage of the 'inspect' helper to pretty print complex JavaScript objects in Edge templates. The helper outputs HTML for various data types including objects, arrays, BigInt, Symbol, Set, Map, WeakSet, WeakMap, and Date.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/debugging.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ inspect({\n  a: 1,\n  b: [3, 4, undefined, null],\n  c: undefined,\n  d: null,\n  e: {\n    regex: /^x/i,\n    buf: Buffer.from('abc'),\n    holes: holes\n  },\n  balance: BigInt(100),\n  id: Symbol('1234'),\n  scores: new Set([1, 2, 3]),\n  classes: new Map([['english', '1st'], ['maths', '2nd']]),\n  currentScores: new WeakSet([[1, 2, 3]]),\n  currentClasses: new WeakMap([[['english', '1st'], ['maths', '2nd']]]),\n  now: new Date()\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Select Format for Gender-Specific Text\nDESCRIPTION: Implementation of select format for handling gender-specific text variations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nauto_reply:\n  \"{gender, select,\n    male {He}\n    female {She}\n    other {They}\n  } will respond shortly.\"\n```\n\n----------------------------------------\n\nTITLE: Single Row Insert with Returning Clause\nDESCRIPTION: Demonstrates inserting a single row into the database with returning clause for PostgreSQL, MSSQL, and Oracle\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .table('users')\n  .returning('id')\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: await Hash.make('secret'),\n  })\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Properties\nDESCRIPTION: Shows how to access various properties of the query client including mode, dialect, transaction status, and connection name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(client.mode)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(client.dialect.name)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.isTransaction\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.connectionName\n```\n\n----------------------------------------\n\nTITLE: Using Relative Paths with Drive in AdonisJS\nDESCRIPTION: Example of using relative paths with Drive methods to prevent path traversal vulnerabilities in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nconst filename = 'somefile.txt'\nconst contents = '...'\n\n// instead just let Drive to prefix it with\n// defined root for given disk inside config\nawait Drive.put(filename, contents)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Reporter Implementation\nDESCRIPTION: Complete implementation of a custom error reporter following the ErrorReporterContract interface\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/error-reporters.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ValidationException,\n  MessagesBagContract,\n  ErrorReporterContract,\n} from '@ioc:Adonis/Core/Validator'\n\ntype ErrorNode = {\n  message: string,\n  field: string,\n}\n\nexport class MyReporter implements ErrorReporterContract<{ errors: ErrorNode[] }> {\n  public hasErrors = false\n\n  private errors: ErrorNode[] = []\n\n  constructor (\n    private messages: MessagesBagContract,\n    private bail: boolean,\n  ) {\n  }\n\n  public report (\n    pointer: string,\n    rule: string,\n    message: string,\n    arrayExpressionPointer?: string,\n    args?: any\n  ) {\n    this.hasErrors = true\n\n    const errorMessage = this.messages.get(\n      pointer,\n      rule,\n      message,\n      arrayExpressionPointer,\n      args,\n    )\n\n    this.errors.push({ message: errorMessage, field: pointer })\n\n    if (this.bail) {\n      throw this.toError()\n    }\n  }\n\n  public toError () {\n    throw new ValidationException(false, this.toJSON())\n  }\n\n  public toJSON () {\n    return {\n      errors: this.errors,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional Test in AdonisJS\nDESCRIPTION: Demonstrates how to create a functional test file for testing user listing using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:test functional users/list\n\n# CREATE: tests/functional/users/list.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in Edge Templates\nDESCRIPTION: Shows how to access session data in Edge templates using the global session helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n<p> Cart total: {{ session.get('cart_total', 0) }} </p>\n```\n\n----------------------------------------\n\nTITLE: Basic Database Existence Validation in TypeScript\nDESCRIPTION: Basic implementation of the exists validation rule to check if a value exists in a specific database table and column.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  slug: schema.string([\n    rules.exists({ table: 'categories', column: 'slug' })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Number Validation in AdonisJS\nDESCRIPTION: Validates a property to be a valid number. String representations of numbers are automatically cast to the number data type.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/number.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  marks: schema.number()\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Stream Data in Email\nDESCRIPTION: Examples of embedding stream or buffer data directly in emails using embedData method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmessage.embedData(\n  fs.createReadStream('file.txt'),\n  'a-unique-id-for-the-attachment',\n)\n```\n\n----------------------------------------\n\nTITLE: Using onNotExists Method with Joins in AdonisJS\nDESCRIPTION: Demonstrates how to use the onNotExists method with a subquery to create a NOT EXISTS condition in the join clause. This allows filtering join results based on the absence of related records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onNotExists((subquery) => {\n      subquery\n        .select('*')\n        .from('accounts')\n        .whereRaw('users.account_id = accounts.id')\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering Named Middleware\nDESCRIPTION: Example of registering named middleware that can be selectively applied to routes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nServer.middleware.registerNamed({\n  auth: () => import('App/Middleware/Auth')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Database Module in AdonisJS\nDESCRIPTION: Shows how to import the Database module from the AdonisJS Lucid package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware\nDESCRIPTION: Example of registering global middleware in the kernel.ts file that executes for all HTTP requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nServer.middleware.register([\n  () => import('@ioc:Adonis/Core/BodyParser'),\n  () => import('App/Middleware/LogRequest')\n])\n```\n\n----------------------------------------\n\nTITLE: Handling Async Code in Edge Template Loops\nDESCRIPTION: This Edge template snippet demonstrates how to handle async code within nested loops, awaiting user posts and displaying them.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@each(user in users)\n  <h2> {{ user.username }} posts </h2>\n\n  @each(post in await user.posts())\n    <p> {{ post.title }} </p>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Keys\nDESCRIPTION: Removes an existing foreign key constraint from a table with optional constraint name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.dropForeign('user_id')\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Plain Objects with pojo Method\nDESCRIPTION: Shows how to use the pojo method to return query results as plain JavaScript objects instead of model instances, bypassing lifecycle hooks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().pojo()\n\nconsole.log(posts[0] instanceof Post) // false\n```\n\n----------------------------------------\n\nTITLE: Synchronous Raw String Rendering\nDESCRIPTION: Demonstrates synchronous rendering of raw string templates\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nView.renderRawSync(\n  `\n  <p> Hello {{ username }} </p>\n`,\n  {\n    username: 'virk',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to Mail Events in AdonisJS\nDESCRIPTION: This code shows how to listen to the 'mail:sent' event in AdonisJS. It logs various details of the sent email.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\n\nEvent.on('mail:sent', ({ message, views, mailer, response }) => {\n  console.log(message)\n  console.log(views)\n  console.log(mailer)\n  console.log(response)\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching the First User from Database in AdonisJS\nDESCRIPTION: This code shows how to use the first method to fetch the first user from the database, returning null if no records exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.first()\n// SQL: SELECT * from \"users\" LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Serializing an Array of Model Instances in TypeScript\nDESCRIPTION: Shows how to serialize an array of model instances using Array.map and the 'serialize' method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.all()\nconst postsJSON = posts.map((post) => post.serialize())\n```\n\n----------------------------------------\n\nTITLE: Route Helper with Domain Specification in Edge\nDESCRIPTION: Demonstrates how to generate a URL for a route within a specific domain using the domain option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{\n  route('PostsController.show', [1], {\n    domain: ':tenant.adonisjs.com'\n  })\n}}\"> View post </a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Through Model Reference in HasManyThrough Relationship\nDESCRIPTION: Demonstrates accessing the intermediate 'through' model in a HasManyThrough relationship using the 'throughModel' property, which returns a function providing the through model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User])\n  public posts: HasManyThrough<typeof Post>\n}\n\nCountry.$getRelation('posts').throughModel() // User\n```\n\n----------------------------------------\n\nTITLE: Grouped Join Conditions with Callbacks in AdonisJS\nDESCRIPTION: Demonstrates how to create complex join conditions with grouped constraints using nested callbacks. This allows for OR conditions between groups of AND conditions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query\n      .on((subquery) => {\n        subquery\n          .on('users.id', '=', 'user_logins.user_id')\n          .andOnVal('user_logins.created_at', '>', '2020-10-09')\n      })\n      .orOn((subquery) => {\n        subquery\n          .on('users.id', '=', 'user_logins.account_id')\n          .andOnVal('user_logins.created_at', '>', '2020-10-09')\n      })\n  })\n  .select('users.*')\n  .select('user_logins.ip_address')\n  .select('user_logins.country')\n```\n\n----------------------------------------\n\nTITLE: Runtime NotIn Validation with Refs in TypeScript\nDESCRIPTION: Shows how to implement notIn validation with dynamic values using schema refs for runtime validation while maintaining schema caching capability.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/not-in.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor(protected ctx: HttpContextContract) {}\n\n  public refs = schema.refs({\n    unallowedValues: getValuesFromSomewhere(),\n  })\n\n  public schema = schema.create({\n    username: schema.string([\n      rules.notIn(this.refs.unallowedValues)\n    ]),\n  })\n\n  public cacheKey = this.ctx.routeKey\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Rules with Bouncer\nDESCRIPTION: Implementation of authorization rules using @adonisjs/bouncer package. Defines actions for viewing, editing, and deleting posts based on user permissions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { actions } = Bouncer\n  .define('viewPost', (user: User, post: Post) => {\n    return post.userId === user.id\n  })\n  .define('editPost', (user: User, post: Post) => {\n    return post.userId === user.id\n  })\n  .define('deletePost', (user: User, post: Post) => {\n    return post.userId === user.id && post.status !== 'published'\n  })\n```\n\n----------------------------------------\n\nTITLE: Custom Content Type Parsing in Route Middleware (TypeScript)\nDESCRIPTION: Demonstrates implementing a middleware to parse custom content types by checking the content-type header and processing the raw body data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .get('/', ({ request }) => {\n    console.log(request.all())\n  })\n  // highlight-start\n  .middleware(async ({ request }, next) => {\n    const contentType = request.header('content-type')\n\n    if (contentType === 'my-custom-content-type') {\n      const body = request.raw()\n      const parsed = someCustomParser(body)\n      request.updateBody(parsed)\n    }\n\n    await next()\n  })\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Getting Health Check Report in AdonisJS\nDESCRIPTION: Demonstrates how to obtain a health check report for a given database connection using the getReport method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst report = await connection.getReport()\n```\n\n----------------------------------------\n\nTITLE: Using onExists Method with Joins in AdonisJS\nDESCRIPTION: Shows how to use the onExists method with a subquery to create an EXISTS condition in the join clause. This allows for complex join conditions based on the existence of related records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onExists((subquery) => {\n      subquery\n        .select('*')\n        .from('accounts')\n        .whereRaw('users.account_id = accounts.id')\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener in TypeScript\nDESCRIPTION: This snippet demonstrates how to register an event listener for the 'new:user' event using the Event.on method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\n\nEvent.on('new:user', (user) => {\n  console.log(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Test Runner for AdonisJS\nDESCRIPTION: TypeScript code for setting up the Japa test runner, including HTTP server initialization and test configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'reflect-metadata'\nimport { join } from 'path'\nimport getPort from 'get-port'\nimport { configure } from 'japa'\nimport sourceMapSupport from 'source-map-support'\n\nprocess.env.NODE_ENV = 'testing'\nprocess.env.ADONIS_ACE_CWD = join(__dirname)\nsourceMapSupport.install({ handleUncaughtExceptions: false })\n\nasync function startHttpServer() {\n  const { Ignitor } = await import('@adonisjs/core/build/src/Ignitor')\n  process.env.PORT = String(await getPort())\n  await new Ignitor(__dirname).httpServer().start()\n}\n\n/**\n * Configure test runner\n */\nconfigure({\n  files: ['test/**/*.spec.ts'],\n  before: [startHttpServer],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Provider in AdonisJS Ally\nDESCRIPTION: Configuration for Google OAuth provider in the config/ally.ts file. Defines the driver, client credentials, and callback URL needed for the authentication flow.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  google: {\n    driver: 'google',\n    clientId: Env.get('GOOGLE_CLIENT_ID'),\n    clientSecret: Env.get('GOOGLE_CLIENT_SECRET'),\n    callbackUrl: 'http://localhost:9000/auth/google',\n  },\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom HTTP Context Properties in TypeScript\nDESCRIPTION: Demonstrates how to inform TypeScript about custom properties added to the HTTP context using declaration merging, ensuring type safety for extended context properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/HttpContext' {\n  import { Lookup } from 'geoip-lite'\n\n  interface HttpContextContract {\n    location: Lookup | null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Limiter in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to define a named limiter using the Limiter.define method. This example creates a global limiter that allows 1000 requests every 1 minute.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nLimiter.define('global', (ctx) => {\n  return Limiter.allowRequests(1000).every('1 min')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Methods for CORS in AdonisJS\nDESCRIPTION: This snippet shows how to configure allowed HTTP methods for CORS requests in AdonisJS. It sets the 'methods' property to an array of allowed HTTP methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE']\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the AdonisJS Auth Package\nDESCRIPTION: Command for installing the AdonisJS authentication package which provides support for authenticating users via sessions, basic auth or API tokens.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/auth@8.2.3\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeDelete hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This snippet shows how to use the @beforeDelete decorator to register a function that removes a post from the cache before deleting it from the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeDelete, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass Post extends BaseModel {\n  @beforeDelete()\n  public static async removeFromCache(post: Post) {\n    await Cache.remove(`post-${post.id}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Edge Template Example\nDESCRIPTION: Simple Edge template showing URL display using request helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n<p> Hello world. You are viewing the {{ request.url() }} page </p>\n```\n\n----------------------------------------\n\nTITLE: Making Path to Public Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the public directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.publicPath('style.css')\n```\n\n----------------------------------------\n\nTITLE: Validating IPv6 Addresses in AdonisJS with TypeScript\nDESCRIPTION: This snippet shows how to enforce IPv6 validation specifically by passing a version option to the IP rule. The validator will only accept valid IPv6 addresses and reject IPv4 addresses.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/ip.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ip: schema.string([\n    rules.ip({ version: 6 })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Using onQuery Hook in BelongsTo Relationship\nDESCRIPTION: Demonstrates how to use the onQuery hook to modify relationship queries and handle nested preloading.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/belongs-to.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Post extends BaseModel {\n  @column()\n  public userId: number\n\n  @belongsTo(() => User, {\n    onQuery(query) {\n      if (!query.isRelatedSubQuery) {\n        query.preload('profile')\n      }\n    }\n  })\n  public author: BelongsTo<typeof User>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Plain Cookies in AdonisJS\nDESCRIPTION: Shows how to create plain cookies which hold Base64 encoded values without signatures or encryption. Useful when cookies need to be accessed by frontend JavaScript.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ response }) => {\n  response.plainCookie('user_id', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in AdonisJS Migrations\nDESCRIPTION: Demonstrates how to drop an existing table using the dropTable method. This is commonly used in the down method of migrations to revert changes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public down() {\n    this.schema.dropTable('users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing tableName Method\nDESCRIPTION: Implementation of the tableName method to generate table names using snake_case and pluralization.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public tableName(model: typeof BaseModel) {\n    return string.pluralize(string.snakeCase(model.name))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data with Sideload Method\nDESCRIPTION: Demonstrates using the sideload method to pass arbitrary data to model instances created after executing a query, which is also passed down to preloaded relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().sideload(auth.user)\n\nusers.forEach((user) => {\n  console.log(user.$sideloaded.user === auth.user) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Settings in AdonisJS\nDESCRIPTION: Configuration options for the static file server in AdonisJS, setting cache control headers with maxAge and immutable flags. This configuration is particularly important when using Webpack Encore for frontend asset compilation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/static.ts\n{\n  // ... rest of the config\n  maxAge: '365d',\n  immutable: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Offset and Limit in AdonisJS Queries\nDESCRIPTION: The offset and limit methods are used to paginate query results. offset sets the starting point, while limit restricts the number of rows returned.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.from('posts').offset(11)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.from('posts').limit(20)\n```\n\n----------------------------------------\n\nTITLE: Saving Model Instances in TypeScript with AdonisJS\nDESCRIPTION: The save method persists the model instance to the database, performing an update for existing records or an insert for new ones. It updates the model's persistence status.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\n\nuser.merge({\n  name: 'virk',\n  email: 'virk@adonisjs.com',\n  password: 'secret'\n})\n\nconsole.log(user.$isPersisted) // false\nconsole.log(user.$isLocal) // true\n\nawait user.save()\n\nconsole.log(user.$isPersisted) // true\nconsole.log(user.$isLocal) // true\n```\n\n----------------------------------------\n\nTITLE: Implementing beforePaginate Hook for User Model (TypeScript)\nDESCRIPTION: This example shows how to create a beforePaginate hook in a User model. The hook is called before paginating user records, allowing for modifications to both the count query and the main query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  beforePaginate,\n  ModelQueryBuilderContract,\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @beforePaginate()\n  public static ignoreDeleted (\n    countQuery: ModelQueryBuilderContract<typeof User>,\n    query: ModelQueryBuilderContract<typeof User>\n  ) {\n    query.whereNull('is_deleted')\n    countQuery.whereNull('is_deleted')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Logger in TypeScript\nDESCRIPTION: Provides an example configuration for the AdonisJS logger, including name, level, redaction, and pretty printing options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: Env.get('APP_NAME'),\n  enabled: true,\n  level: Env.get('LOG_LEVEL', 'info'),\n  redact: {\n    paths: ['password', '*.password'],\n  },\n  prettyPrint: Env.get('NODE_ENV') === 'development',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HttpContext in Service Classes\nDESCRIPTION: Demonstrates how to access the current HTTP context anywhere in your codebase using the HttpContext module once AsyncLocalStorage is enabled.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n\nclass SomeService {\n  public async someOperation() {\n    const ctx = HttpContext.get()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using afterField Rule in AdonisJS Validator\nDESCRIPTION: This snippet demonstrates how to use the afterField rule to ensure a checkout_date comes after a checkin_date in a form. The validation will fail if the checkout_date is before or equal to the checkin_date.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after-field.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  checkin_date: schema.date(),\n  checkout_date: schema.date({}, [\n    rules.afterField('checkin_date')\n  ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Using withAggregate for Custom Aggregate Functions\nDESCRIPTION: Shows how to use withAggregate to perform custom aggregate functions (like sum) on related models and store the result in the $extras object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User\n  .query()\n  .withAggregate('accounts', (query) => {\n    query.sum('balance').as('accountsBalance')\n  })\n  .firstOrFail()\n\nconsole.log(user.$extras.accountsBalance)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Guards and Providers in AdonisJS Auth\nDESCRIPTION: Example showing how to extend the auth contracts file to add custom guards and providers. This code adds a new 'apps' provider and an 'api' guard using OAT (Opaque Access Token).\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// title: contracts/auth.ts\ndeclare module '@ioc:Adonis/Addons/Auth' {\n  interface ProvidersList {\n    user: {\n      implementation: LucidProviderContract<typeof User>,\n      config: LucidProviderConfig<typeof User>,\n    },\n    // highlight-start\n    apps: {\n      implementation: LucidProviderContract<typeof App>,\n      config: LucidProviderConfig<typeof App>,\n    }\n    // highlight-end\n  }\n\n  interface GuardsList {\n    web: {\n      implementation: SessionGuardContract<'user', 'web'>,\n      config: SessionGuardConfig<'user'>,\n    },\n    // highlight-start\n    api: {\n      implementation: OATGuardContract<'apps', 'api'>,\n      config: OATGuardConfig<'apps'>,\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Email Normalization with Validation in AdonisJS\nDESCRIPTION: Demonstrates how to combine email validation with normalization rules. The normalizeEmail rule allows customization of email normalization behavior including case conversion and Gmail-specific formatting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/email.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string([\n    rules.email(),\n    rules.normalizeEmail({\n      allLowercase: true,\n      gmailRemoveDots: true,\n      gmailRemoveSubaddress: true,\n    }),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Socket.io Service Class in AdonisJS\nDESCRIPTION: Creates a Ws service class that initializes and manages the Socket.io server, providing a reusable reference throughout the application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// title: app/Services/Ws.ts\nimport { Server } from 'socket.io'\nimport AdonisServer from '@ioc:Adonis/Core/Server'\n\nclass Ws {\n  public io: Server\n  private booted = false\n\n  public boot() {\n    /**\n     * Ignore multiple calls to the boot method\n     */\n    if (this.booted) {\n      return\n    }\n\n    this.booted = true\n    this.io = new Server(AdonisServer.instance!)\n  }\n}\n\nexport default new Ws()\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Requests with Nock in AdonisJS Tests\nDESCRIPTION: This snippet shows how to use nock to mock outgoing network requests in AdonisJS tests. It demonstrates mocking a Stripe API charge request and using the mock in a test.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/fakes.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// title: test_helpers/mocks.ts\nimport nock from 'nock'\n\nexport function mockStripeCharge() {\n  return nock('https://api.stripe.com/v1')\n    .post('/charges')\n    .reply(201, (_, requestBody) => {\n      return {\n        id: 'ch_3KjEE62eZvKYlo2C0n3A7N3E',\n        object: 'charge',\n        amount: requestBody.amount,\n      }\n    })\n}\n\n// Usage in test\nimport { mockStripeCharge } from 'TestHelpers/mocks'\n\ntest('complete purchase with stripe charge', async () => {\n  mockStripeCharge()\n  // Make a call to stripe API here\n})\n```\n\n----------------------------------------\n\nTITLE: Interactive Command Prompts Implementation\nDESCRIPTION: Example of creating an interactive user creation command with various types of prompts including text input, secure password entry, choice selection, confirmation, and enum input.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/build/standalone'\n\nexport default class CreateUser extends BaseCommand {\n  public static commandName = 'create:user'\n  public static description = 'Create a new user'\n\n  public async run () {\n    const email = await this.prompt.ask('Enter email')\n    const password = await this.prompt.secure('Choose account password')\n    const userType = await this.prompt.choice('Select account type', [\n      {\n        name: 'admin',\n        message: 'Admin (Complete access)',\n      },\n      {\n        name: 'collaborator',\n        message: 'Collaborator (Can access specific resources)',\n      },\n      {\n        name: 'user',\n        message: 'User (Readonly access)',\n      }\n    ])\n\n    const verifyEmail = await this.prompt.confirm('Send account verification email?')\n    const accountTags = await this.prompt.enum('Type tags to associate with the account')\n\n    console.log({\n      email, password, userType, verifyEmail, accountTags\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sub-queries with whereJson in AdonisJS\nDESCRIPTION: Shows how to use a sub-query to compute the JSON value to match against a JSON column. This approach allows for dynamic JSON matching based on data from other tables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereJson(\n    'address',\n    Database\n      .select('address')\n      .from('user_address')\n      .where('address.user_id', 1)\n  )\n```\n\n----------------------------------------\n\nTITLE: Advanced Redaction Configuration in AdonisJS Logger\nDESCRIPTION: Shows advanced redaction configuration options, including custom placeholders and property removal.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  redact: {\n    paths: ['password'],\n    censor: '[PRIVATE]'    \n  }\n}\n\n// or remove the property\n{\n  redact: {\n    paths: ['password'],\n    remove: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Schema with Caching Caveats in AdonisJS (TypeScript)\nDESCRIPTION: Illustrates a scenario where schema caching can lead to unexpected results with dynamic data. The city options depend on the selected state, which may change with each request, but caching prevents the schema from updating.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/schema-caching.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Assuming the following variables hold data\n */\nconst STATES = []\nconst CITIES = {}\n\nexport default class AddressValidator {\n  public selectedState = this.ctx.request.input('state') // 👈\n\n  public schema = schema.create({\n    state: schema.enum(STATES),\n    city: schema.enum(CITIES[this.selectedState] || [])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using onNotNull Method with Joins in AdonisJS\nDESCRIPTION: Demonstrates how to use the onNotNull method to filter join results where a column value is not NULL. This creates an IS NOT NULL condition in the join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onNotNull('user_logins.ip_address')\n  })\n```\n\n----------------------------------------\n\nTITLE: Custom ManyToMany Relationship Configuration\nDESCRIPTION: Shows how to customize ManyToMany relationship keys including localKey, relatedKey, and pivot foreign keys.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  localKey: 'id',\n  pivotForeignKey: 'user_id',\n  relatedKey: 'id',\n  pivotRelatedForeignKey: 'skill_id',\n})\npublic skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Hinting for Query Builder\nDESCRIPTION: Shows how to properly type hint the query builder in scope methods to maintain type safety.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/query-scopes.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Builder = ModelQueryBuilderContract<typeof Post>\n\npublic static firstScope = scope(\n  (query: Builder) => {\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Route Model Binding Example\nDESCRIPTION: Basic implementation of route model binding for a posts route. This shows the simplest case of binding a single model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/posts/:id', 'PostsController.show')\n```\n\n----------------------------------------\n\nTITLE: Generating File URLs in TypeScript\nDESCRIPTION: Demonstrates how to generate URLs for file access using Drive.getUrl and Drive.getSignedUrl methods, including options for expiration and content headers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = await Drive.getUrl('filePath')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = await Drive.getSignedUrl('filePath')\n\n// With expiry\nconst url = await Drive.getSignedUrl('filePath', {\n  expiresIn: '30mins'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = await Drive.getSignedUrl('filePath', {\n  contentType: 'application/json',\n  contentDisposition: 'attachment',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Test Runner in AdonisJS v5\nDESCRIPTION: This snippet shows how to set up the japaFile.ts to run and rollback migrations before and after tests, ensuring a clean database state for each test run.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'reflect-metadata'\nimport execa from 'execa'\nimport { join } from 'path'\nimport getPort from 'get-port'\nimport { configure } from 'japa'\nimport sourceMapSupport from 'source-map-support'\n\nprocess.env.NODE_ENV = 'testing'\nprocess.env.ADONIS_ACE_CWD = join(__dirname)\nsourceMapSupport.install({ handleUncaughtExceptions: false })\n\nasync function runMigrations() {\n  await execa.node('ace', ['migration:run'], {\n    stdio: 'inherit',\n  })\n}\n\nasync function rollbackMigrations() {\n  await execa.node('ace', ['migration:rollback', '--batch=0'], {\n    stdio: 'inherit',\n  })\n}\n\nasync function startHttpServer() {\n  const { Ignitor } = await import('@adonisjs/core/build/src/Ignitor')\n  process.env.PORT = String(await getPort())\n  await new Ignitor(__dirname).httpServer().start()\n}\n\nconfigure({\n  files: ['test/**/*.spec.ts'],\n  before: [\n    runMigrations,\n    startHttpServer,\n  ],\n  after: [rollbackMigrations],\n})\n```\n\n----------------------------------------\n\nTITLE: Using column.dateTime with Auto-Creation and Auto-Update\nDESCRIPTION: Shows how to use column.dateTime decorator with autoCreate and autoUpdate options for timestamps like createdAt and updatedAt.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column.dateTime({ autoCreate: true })\n  public createdAt: DateTime\n\n  @column.dateTime({ autoUpdate: true })\n  public updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resourceful Routes with only Method\nDESCRIPTION: Demonstrates how to include only specific actions in a resourceful route using the only method. This allows you to explicitly define which operations are allowed on a resource.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .resource('comments', 'CommentsController')\n  .only(['index', 'show', 'store']) // 👈\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Database Queries in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the Database.prettyPrint method as an event listener to pretty-print queries on the console.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/debugging.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nEvent.on('db:query', Database.prettyPrint)\n```\n\n----------------------------------------\n\nTITLE: Database Migration Setup for Tests\nDESCRIPTION: Configuration for database migration in test environment using TestUtils.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {\n  setup: [\n    () => TestUtils.ace().loadCommands(),\n    () => TestUtils.db().migrate()\n  ],\n  teardown: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Prompt Validation and Configuration\nDESCRIPTION: Examples of configuring prompts with validation, secure input, and custom options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.ask('Choose account username', {\n  validate(answer) {\n    if (!answer || answer.length < 4) {\n      return 'Username is required and must be over 4 characters'\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Template in Edge\nDESCRIPTION: Shows how to define a layout template using the @layout tag. Must be used on the first line and accepts a static layout path.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/layout.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@layout('layouts/main')\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Number Validation in AdonisJS\nDESCRIPTION: Makes a number field both nullable and optional using the nullableAndOptional() method. Undefined values are removed, but null values are kept in the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/number.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  marks: schema.number.nullableAndOptional()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Templates Generator in AdonisJS CLI Commands\nDESCRIPTION: Demonstrates how to use the built-in template generator to create files from pre-existing stubs. This example shows creating a controller file with customized content.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path'\nimport { BaseCommand } from '@adonisjs/core/build/standalone'\n\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n\n  public async run() {\n    // highlight-start\n    const name = 'UsersController'\n\n    this.generator\n      .addFile(name)\n      .appRoot(this.application.appRoot)\n      .destinationDir('app/Controllers/Http')\n      .useMustache()\n      .stub(join(__dirname, './templates/controller.txt'))\n      .apply({ name })\n\n    await this.generator.run()\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Scripts Section with Super Tag\nDESCRIPTION: Example of extending the scripts section while maintaining inherited content using the @super tag\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/layouts.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@section('scripts')\n  @super {{-- Super means inherit --}}\n  <script src=\"./autocomplete.js\"></script>\n@end\n```\n\n----------------------------------------\n\nTITLE: Main Layout Template with Partials\nDESCRIPTION: Complete home template that combines all partials with styling and proper HTML structure. Demonstrates usage of @include directive to incorporate partials.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/partials.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title></title>\n  <style>\n    * { margin: 0; padding: 0; }\n    .header { height: 60px; background: rgba(255,138,0,.2); }\n    .layout { height: calc(100vh - 100px); display: flex; }\n    .sidebar { height: 100%; background: rgba(156, 39, 176, 0.2); width: 250px; }\n    main { height: 100%; background: #f7f7f7; flex: 1 }\n    .footer { height: 40px; background: #5e5e5e; }\n  </style>\n</head>\n<body>\n  @include('partials/header')\n\n  <section class=\"layout\">\n    @include('partials/sidebar')\n    <main></main>\n  </section>\n\n  @include('partials/footer')\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Date Validation with Standardized Formats in AdonisJS\nDESCRIPTION: Validates dates using standardized format shorthand codes like rfc2822, sql, and iso formats.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: schema.date({\n    format: 'rfc2822',\n  })\n}\n\n// OR\n{\n  published_at: schema.date({\n    format: 'sql',\n  })\n}\n\n// OR\n{\n  published_at: schema.date({\n    format: 'iso',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener Class in TypeScript\nDESCRIPTION: This code shows how to implement a listener class with a method for handling the 'new:user' event.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsList } from '@ioc:Adonis/Core/Event'\n\nexport default class User {\n  public async onNewUser(user: EventsList['new:user']) {\n    // send email to the new user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Template State in TypeScript\nDESCRIPTION: Demonstrates how to pass template state when rendering a view. The state is available to the rendered template, its partials, and layouts but not to components.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/data-flow.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = {\n  user: { id: 1, username: 'virk' },\n}\n\nawait view.render('user', state)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Query Builder in TypeScript\nDESCRIPTION: Shows how to import and initialize the Database query builder instance in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nDatabase.query()\n\n// selecting table returns the query builder instance as well\nDatabase.from('users')\n```\n\n----------------------------------------\n\nTITLE: Using count Aggregate in AdonisJS Queries\nDESCRIPTION: The count method allows using the count aggregate in SQL queries. It supports counting multiple columns and defining aliases for predictable output across different database dialects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await Database\n  .from('users')\n  .count('* as total')\n\nconsole.log(users[0].total)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await Database\n  .from('users')\n  .count('*', 'total')\n\nconsole.log(users[0].total)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await Database\n  .from('users')\n  .count({\n    'active': 'is_active',\n    'total': '*',\n  })\n\nconsole.log(users[0].total)\nconsole.log(users[0].active)\n```\n\n----------------------------------------\n\nTITLE: Edge Conditional Syntax\nDESCRIPTION: Demonstrates Edge's JavaScript-like syntax for conditionals and ternary operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@if(happy && hungry)\n  I am happy *and* hungry; both are true.\n@endif\n\n{{ foo ? \"true\" : \"false\" }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Model with Exception Handling\nDESCRIPTION: Demonstrates retrieving the first model with the firstOrFail method, which throws an exception when no records exist instead of returning null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.firstOrFail()\n```\n\n----------------------------------------\n\nTITLE: Faking Drive in AdonisJS Tests\nDESCRIPTION: This snippet demonstrates how to fake the Drive implementation in AdonisJS tests. It covers faking specific or all disks, restoring fakes, and making assertions on faked file operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/fakes.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\n\n// Fake default disk\nDrive.fake()\n\n// Fake local and s3\nDrive.fake(['s3', 'local'])\n\n// Restore default disk\nDrive.restore()\n\n// Restore specific disks\nDrive.restore(['s3', 'local'])\n\n// Restore all the disks\nDrive.restoreAll()\n\n// Finding files\nconst drive = Drive.fake()\n\n// Find if file exists\nassert.isTrue(await drive.exists('avatar.jpg'))\n\n// Assert for the file size\nassert.isBelow(await drive.bytes('avatar.jpg'), 1000 * 1000 * 20)\n\n// Assert for file contents\nassert.equal(await drive.get('package.json'), JSON.stringify({}))\n```\n\n----------------------------------------\n\nTITLE: Using beforeOrEqualToField Rule in AdonisJS Schema\nDESCRIPTION: Shows how to validate that a draft date is before or equal to the publication date using the beforeOrEqualToField validation rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before-field.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_on: schema.date(),\n  drafted_on: schema.date({}, [\n    rules.beforeOrEqualToField('published_on')\n  ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Up Method in Schema Migration\nDESCRIPTION: Example of implementing the up method in a schema migration class, which is executed when running migrations forward.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public async up() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signed Cookies in AdonisJS\nDESCRIPTION: Demonstrates reading and writing signed cookies, which are the default cookie type in AdonisJS. Signed cookies include a signature to prevent tampering but are still readable via Base64 decoding.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ request, response }) => {\n  // set signed cookie\n  response.cookie('user_id', 1)\n\n  // read signed cookie\n  request.cookie('user_id')\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering by Relationship Existence\nDESCRIPTION: Shows how to use the has method to filter records based on the existence of related records, optionally specifying a comparison operator and count.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Get posts with one or more comments\nconst posts = await Post\n  .query()\n  .has('comments')\n\n// Get posts with more than 2 comments\nconst posts = await Post\n  .query()\n  .has('comments', '>', 2)\n```\n\n----------------------------------------\n\nTITLE: Preloading Limited Posts per Category in AdonisJS\nDESCRIPTION: Demonstrates how to fetch categories with their latest 3 posts using groupLimit and preload methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst categories = await Category\n  .query()\n  .preload('posts', (posts) => {\n    posts\n      .groupOrderBy('posts.created_at', 'desc')\n      .groupLimit(3) // 👈\n  })\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Ace Command\nDESCRIPTION: Example of how to run a custom command after it has been created and registered.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode ace greet\n\n# [ info ]  Hello world!\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships for Scoped Parameters\nDESCRIPTION: Required model relationship definition for scoped parameters. Defines a 'comments' relationship on the Post model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nclass Post extends BaseModel {\n  @hasMany(() => Comment)\n  public comments: HasMany<typeof Comment>\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting spatial data with knex-postgis\nDESCRIPTION: Shows how to insert spatial data into a PostgreSQL table using knex-postgis functions like 'geomFromText' to convert string representations to geometry objects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nawait Database.table('points').insert({\n  geom: Database.st().geomFromText('Point(0 0)', 4326)\n})\n```\n\n----------------------------------------\n\nTITLE: Using hasManyThrough Decorator for Has-Many-Through Relationships\nDESCRIPTION: Demonstrates how to use the hasManyThrough decorator to define a has-many-through relationship between models with an intermediate model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hasManyThrough, HasManyThrough, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass Country extends Model {\n  @hasManyThrough([\n    () => Post,\n    () => User,\n  ])\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Route Definition\nDESCRIPTION: Shows how to define a route that references a controller method instead of an inline callback.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('posts', 'PostsController.index')\n```\n\n----------------------------------------\n\nTITLE: Creating AdonisJS Project with pnpm\nDESCRIPTION: This command uses pnpm to create a new AdonisJS TypeScript project. It initializes a new project named 'hello-world' using the AdonisJS starter package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm create adonis-ts-app hello-world\n```\n\n----------------------------------------\n\nTITLE: Serializing Model Relations\nDESCRIPTION: Demonstrates how to serialize preloaded relationships and cherry-pick fields from relations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nuser.serializeRelations()\n\n// Cherry pick fields\nuser.serializeRelations({\n  profile: {\n    fields: {}\n  },\n  posts: {\n    fields: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Controller with Route Model Binding Implementation\nDESCRIPTION: Controller example showing how to implement route model binding. The bind decorator connects route parameters to controller method arguments based on their order.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// Controller\nimport { bind } from '@adonisjs/route-model-binding'\nimport Post from 'App/Models/Post'\nimport Comment from 'App/Models/Comment'\n\nexport default class PostsController {\n  @bind()\n  public async show({}, post: Post, comment: Comment) {\n    return { post, comment }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Global HTML Renderer in Edge Templates\nDESCRIPTION: Shows how to use a custom global method that returns safe HTML content within standard double curly braces in Edge templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/safe.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ input('text', 'foo') }}\n```\n\n----------------------------------------\n\nTITLE: Number Validation with Additional Rules in AdonisJS\nDESCRIPTION: Validates a number field with additional rules passed as an array. The example shows applying unsigned() and range() rules to ensure the number is positive and falls within a specific range.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/number.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  marks: schema.number([\n    rules.unsigned(),\n    rules.range(10, 100),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Service Attachment Scripts\nDESCRIPTION: NPM scripts for quickly attaching to Docker containers. Provides shortcuts to access shell terminals in Redis, PostgreSQL, and AdonisJS application containers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dockerAttach\": \"docker exec -it adonis_app /bin/sh\",\n  \"dockerAttachRedis\": \"docker exec -it redis /bin/sh\",\n  \"dockerAttachPostgres\": \"docker exec -it postgres /bin/sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config Provider in AdonisJS\nDESCRIPTION: Shows how to use the Config provider to access configuration values in AdonisJS applications. It includes examples of reading config values and setting fallback values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/config.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Config from '@ioc:Adonis/Core/Config'\n\nConfig.get('app.appKey')\n\nConfig.get('database.connections.mysql.host', '127.0.0.1')\n```\n\n----------------------------------------\n\nTITLE: Using 'afterOrEqual' rule in AdonisJS validator\nDESCRIPTION: Demonstrates using the 'afterOrEqual' rule which validates that a date is either the same as or after the specified date. This example requires checkin_date to be today or later.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  checkin_date: schema.date({}, [\n    rules.afterOrEqual('today')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Resource Routes in AdonisJS\nDESCRIPTION: Explains how to create nested resource routes using dot notation. This allows for hierarchical routing structures, such as comments within posts.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.resource('posts.comments', 'CommentsController')\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL in AdonisJS Schema Migrations\nDESCRIPTION: Demonstrates executing raw SQL queries using the schema.raw method. Unlike the raw query builder, this method does not accept bindings separately and is used for DDL operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.schema\n      .raw(\"SET sql_mode='TRADITIONAL'\")\n      .table('users', (table) => {\n        table.dropColumn('name')\n        table.string('first_name')\n        table.string('last_name')\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack CDN Configuration\nDESCRIPTION: Webpack configuration for setting up CDN URLs in production environment for static assets.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nif (Encore.isProduction()) {\n  Encore.setPublicPath('https://your-cdn-server-url/assets')\n  Encore.setManifestKeyPrefix('assets/')\n} else {\n  Encore.setPublicPath('/assets')\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Ace CLI\nDESCRIPTION: Basic command to run the Ace CLI from an AdonisJS project root directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace\n```\n\n----------------------------------------\n\nTITLE: Health Check Report Structure Example\nDESCRIPTION: Shows the structure of a health check report object returned by the getReport method, including the healthy status and individual checker reports.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/health-check.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  healthy: true,\n  report: {\n    env: {\n      displayName: 'Node env check',\n      health: {\n        healthy: true,\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Categories with Post Counts in AdonisJS\nDESCRIPTION: Demonstrates how to fetch categories with their associated post counts using the withCount relationship method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst categories = await Category\n  .query()\n  .withCount('posts')\n\ncategories.forEach((category) => {\n  console.log(category.$extras.posts_count)\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses in AdonisJS\nDESCRIPTION: Shows how to stream a file as an HTTP response with optional error handling and custom status codes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = fs.createReadStream('./some-file.jpg')\nresponse.stream(image)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.stream(image, (error) => {\n  return ['Unable to send file', 400]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Commit Events in AdonisJS\nDESCRIPTION: Shows how to listen for transaction commit events using the once() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntrx.once('commit', (self) => {\n  console.log(self)\n})\n```\n\n----------------------------------------\n\nTITLE: Using schema.enum with TypeScript Enums in AdonisJS Validator\nDESCRIPTION: Demonstrates how to use TypeScript enums with schema.enum to validate that a property value is one of the enum values. This approach provides better type safety and code organization.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum SocialAccounts {\n  TWITTER = 'twitter',\n  GITHUB = 'github',\n  INSTAGRAM = 'instagram',\n}\n\n{\n  account_type: schema.enum(Object.values(SocialAccounts))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript declaration for the st method\nDESCRIPTION: Creates TypeScript type declarations using declaration merging to add the 'st' method to the DatabaseContract interface, providing proper type support for the Postgis extension.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Lucid/Database' {\n  import { KnexPostgis } from 'knex-postgis'\n\n  interface DatabaseContract {\n    st(): KnexPostgis\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions with PostPolicy in AdonisJS Route Handler\nDESCRIPTION: This snippet demonstrates how to use a policy within an AdonisJS route handler to authorize a 'view' action on a Post model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Post from 'App/Models/Post'\n\nRoute.get('posts/:id', async ({ bouncer }) => {\n  const post = await Post.findOrFail(1)\n  // highlight-start\n  await bouncer\n    .with('PostPolicy')\n    .authorize('view', post)\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Global View Helpers in TypeScript\nDESCRIPTION: Shows how to register global helpers and data that will be available across all templates including components. Includes both a function helper for newline-to-br conversion and a static menu array.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/data-flow.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/view.ts\nimport View from '@ioc:Adonis/Core/View'\n\nView.global('nl2br', function (text) {\n  return text.replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br />$2')\n})\n\nView.global('menu', [\n  {\n    url: '/',\n    text: 'Home',\n  },\n  {\n    url: '/about',\n    text: 'About',\n  },\n  {\n    url: '/contact',\n    text: 'Contact',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Advanced Model Serialization with Field Selection\nDESCRIPTION: Shows how to use the serialize method with field selection options to cherry-pick specific fields and handle nested relations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nuser.serialize({\n  fields: {\n    omit: ['password'],\n  },\n  relations: {\n    profile: {\n      fields: {\n        pick: ['fullName', 'id'],\n      },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching All Records from a Table in TypeScript with AdonisJS\nDESCRIPTION: The all method retrieves all rows from a database table, sorted in descending order by the primary key. It's a shortcut for common querying scenarios.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.all()\n```\n\n----------------------------------------\n\nTITLE: Database Connection Methods\nDESCRIPTION: Demonstrates how to establish database connections, including named connections and specific read/write modes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.connection()\n\n// named connection\nDatabase.connection('pg')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.connection('pg', { mode: 'write' })\n\n// Write queries are not allowed in read mode\nDatabase.connection('pg', { mode: 'read' })\n```\n\n----------------------------------------\n\nTITLE: Updating or Creating Multiple Records in TypeScript with AdonisJS\nDESCRIPTION: The updateOrCreateMany method updates existing records or creates new ones based on a search key. It uses an UPDATE lock to prevent concurrent reads from accessing outdated values during updates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst keyForSearch = 'email'\nconst payload = [\n  {\n    email: 'virk@adonisjs.com',\n    name: 'Virk',\n  },\n  {\n    email: 'romain@adonisjs.com',\n    name: 'Romain',\n  }\n]\n\nconst users = await User.updateOrCreateMany(keyForSearch, payload)\n```\n\n----------------------------------------\n\nTITLE: Custom File Download Route in TypeScript\nDESCRIPTION: Implements a custom route for file downloads using Drive.getStats and Drive.getStream methods, demonstrating manual file streaming.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extname } from 'path'\nimport Route from '@ioc:Adonis/Core/Route'\nimport Drive from '@ioc:Adonis/Core/Drive'\n\nRoute.get('/uploads/*', async ({ request, response }) => {\n  const location = request.param('*').join('/')\n\n  const { size } = await Drive.getStats(location)\n\n  response.type(extname(location))\n  response.header('content-length', size)\n\n  return response.stream(await Drive.getStream(location))\n})\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Transaction in AdonisJS\nDESCRIPTION: Shows how to rollback a database transaction using the rollback() method on the transaction client.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait trx.rollback()\n```\n\n----------------------------------------\n\nTITLE: Checking Flash Message Existence with has() Method\nDESCRIPTION: Demonstrates how to check if a flash message exists for a specific key using the has() method. This example shows checking for validation errors using dot notation to access nested properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/flash-messages.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@if(flashMessages.has('errors.username'))\n\n@endif\n```\n\n----------------------------------------\n\nTITLE: Basic Boolean Schema Validation in TypeScript\nDESCRIPTION: Basic implementation of boolean schema validation that accepts and casts various boolean-like values to true/false. Handles numeric strings, numbers, boolean strings, and HTML checkbox values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/boolean.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  accepted: schema.boolean()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Response Status with finished Property\nDESCRIPTION: Example of checking if a response has been written to the outgoing stream using the finished property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nif (!response.finished) {\n  response.send()\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HTTP Context in AdonisJS Middleware\nDESCRIPTION: Shows how to extend the HTTP context by adding custom properties in a middleware, using geoip-lite as an example to add location information.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport geoip from 'geoip-lite'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class UserLocationMiddleware {\n  public async handle(ctx: HttpContextContract, next: () => Promise<void>) {\n    ctx.location = geoip.lookup(ctx.request.ip())\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Ace Command to Load the Application\nDESCRIPTION: Example showing how to configure an Ace command to boot the application before running the command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n  // highlight-start\n  public static settings = {\n    loadApp: true\n  }\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Command Configuration in AdonisRC File\nDESCRIPTION: JSON configuration showing where Ace commands are defined in the .adonisrc.json file. This includes built-in commands and project-specific commands.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\n    \"./commands\",\n    \"@adonisjs/core/build/commands\",\n    \"@adonisjs/repl/build/commands\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Limiter Metadata in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the get method to retrieve metadata for a given key, including remaining requests, limit, consumed requests, and retry time.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await limiter.get(`global_${user.id}`)\nif (!response) {\n  // no requests consumed yet\n}\n\nresponse.remaining // Remaining number of requests\nresponse.limit // Allowed number of requests\nresponse.consumed // Requests consumed so far\nresponse.retryAfter // Milliseconds to wait before limit gets revised\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Package in AdonisJS\nDESCRIPTION: Command to configure Redis in the AdonisJS project, creating necessary configuration files and updating project settings\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/redis\n```\n\n----------------------------------------\n\nTITLE: Optional Authentication Check in AdonisJS API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to perform an optional authentication check using the check method, which doesn't raise exceptions for unauthenticated requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').check()\n\nif (auth.use('api').isLoggedIn) {\n}\n```\n\n----------------------------------------\n\nTITLE: View Renderer Instance Usage\nDESCRIPTION: Example of using ViewRenderer instance directly for rendering templates\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport View from '@ioc:Adonis/Core/View'\nconst view = View.getRenderer()\n\nview.share({ url: '/', user: auth.user })\nawait view.render('home')\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Query Builder Instance in TypeScript\nDESCRIPTION: Demonstrates how to create a ModelQueryBuilder instance from a model class. The model query builder returns model instances instead of plain objects and is aware of model relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {}\n\n// Returns model query builder instance\nUser.query()\n```\n\n----------------------------------------\n\nTITLE: Verifying Authentication Status in AdonisJS API (TypeScript)\nDESCRIPTION: These snippets demonstrate how to check if the current request has passed authentication using the isAuthenticated property, which differs from isLoggedIn.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').authenticate()\nauth.use('api').isAuthenticated // true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').attempt(email, password)\nauth.use('api').isAuthenticated // false\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production\nDESCRIPTION: Commands to build the TypeScript source to JavaScript for production deployment.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/laravel-forge.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --production\n\n# OR use the npm script\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Driver for Sessions\nDESCRIPTION: Setting up the Redis driver for session storage by specifying the Redis connection to use.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// title: config/session.ts\n{\n  driver: 'redis',\n  // highlight-start\n  redisConnection: 'local',\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for AdonisJS\nDESCRIPTION: Nginx server configuration for proxying requests to AdonisJS application with proper headers and websocket support.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/laravel-forge.md#2025-04-16_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\n   location / {\n      # example proxy_pass http://localhost:3333;\n      proxy_pass http://localhost:<ADONIS_PORT>;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection 'upgrade';\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_cache_bypass $http_upgrade;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL-based Token Storage in AdonisJS Auth Config\nDESCRIPTION: Configuration for storing API tokens in a SQL database. This approach is suitable when API tokens are not the primary authentication method, such as for personal access tokens. The configuration specifies the database table, foreign key relationship, and token type.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  api: {\n    driver: 'oat',\n    provider: {\n      driver: 'lucid',\n      identifierKey: 'id',\n      uids: ['email'],\n      model: () => import('App/Models/User'),\n    },\n    // highlight-start\n    tokenProvider: {\n      type: 'api',\n      driver: 'database',\n      table: 'api_tokens',\n      foreignKey: 'user_id',\n    },\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using shorthand keywords with 'after' rule in AdonisJS validator\nDESCRIPTION: Shows how to use shorthand keywords 'today' and 'tomorrow' with the 'after' rule to validate that dates fall after these relative reference points.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrules.after('today')\nrules.after('tomorrow')\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Authentication in TypeScript\nDESCRIPTION: Example of implementing GitHub OAuth authentication using the @adonisjs/ally package. Shows both redirect and callback route handlers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/github/redirect', async ({ ally }) => {\n  return ally.use('github').redirect()\n})\n\nRoute.get('/github/callback', async ({ ally }) => {\n  const github = ally.use('github')\n  const user = await github.user()\n})\n```\n\n----------------------------------------\n\nTITLE: Blocking a Key for a Specific Duration in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the block method to prevent a key from making requests for a specified duration, which can be useful for mitigating brute force attacks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait limiter.block(`login_${email}_${ip}`, '30 mins')\n```\n\n----------------------------------------\n\nTITLE: Setting up Socket.io Client in Edge Template\nDESCRIPTION: Integrates Socket.io client in an Edge template using CDN, establishing a connection to the server and handling events.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n// title: resources/views/welcome.edge\n\n<body>\n  <!-- Rest of markup -->\n\n  // highlight-start\n    <script src=\"https://cdn.socket.io/4.0.1/socket.io.min.js\"></script>\n    <script>\n      const socket = io()\n      socket.on('news', (data) => {\n        console.log(data)\n        socket.emit('my other event', { my: 'data' })\n      })\n    </script>\n  // highlight-end\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Releasing Connection\nDESCRIPTION: Shows how to release a connection from the managed list.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.manager.release(true)\n```\n\n----------------------------------------\n\nTITLE: Using equalTo Rule with Dynamic References in Adonis.js Validator\nDESCRIPTION: This example shows how to use schema references (refs) when the comparison value is computed at runtime, especially when using schema caching. The validator compares the 'country' field with a dynamically retrieved team country value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/equal-to.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor(protected ctx: HttpContextContract) {}\n\n  // highlight-start\n  public refs = schema.refs({\n    teamsCountry: getTeamCountryFromSomeWhere(),\n  })\n\n  public schema = schema.create({\n    country: schema.string([\n      rules.equalTo(this.refs.teamsCountry)\n    ]),\n  })\n  // highlight-end\n\n  public cacheKey = this.ctx.routeKey\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Migrated Files Output in AdonisJS Migrator\nDESCRIPTION: This JSON snippet shows the structure of the migratedFiles object returned by the AdonisJS Migrator after running migrations. It includes information about the migration status, queries, file details, and batch number.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database/migrations/1623289360244_users\": {\n    \"status\": \"completed\",\n    \"queries\": [],\n    \"file\": {\n      \"filename\": \"1623289360244_users.ts\",\n      \"absPath\": \"/path/to/project/database/migrations/1623289360244_users.ts\",\n      \"name\": \"database/migrations/1623289360244_users\"\n    },\n    \"batch\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Route Model Binding Middleware in AdonisJS\nDESCRIPTION: Code to register the route model binding middleware in the kernel.ts file. This enables the middleware to process requests and perform model binding.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// title: 3. Register middleware\n/**\n * Make sure to add the following global middleware inside\n * the start/kernel.ts file\n */\nServer.middleware.register([\n  // ...other middleware\n  () => import('@ioc:Adonis/Addons/RmbMiddleware'),\n])\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration in AdonisJS\nDESCRIPTION: JSON configuration for test suites in .adonisrc.json file, defining test file patterns and suite names.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tests\": {\n    \"suites\": [\n      {\n        \"name\": \"functional\",\n        \"files\": \"tests/functional/**/*.spec(.ts|.js)\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using distinctOn Method for PostgreSQL in AdonisJS\nDESCRIPTION: Shows how to use the PostgreSQL-specific distinctOn method to select the first row from each group of duplicates. This example selects the most recent entry for each unique URL.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('logs')\n  .distinctOn('url')\n  .orderBy('created_at', 'DESC')\n```\n\n----------------------------------------\n\nTITLE: Nullable File Validation in AdonisJS Validator\nDESCRIPTION: Makes the file property nullable by using the nullable method. The field must exist in the payload but can contain null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/file.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  cover_image: schema.file.nullable({\n    size: '2mb',\n    extnames: ['jpg', 'gif', 'png'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bouncer Actions in Route Handlers\nDESCRIPTION: Demonstration of how to use Bouncer actions within AdonisJS route handlers to authorize user actions. This example shows authorization for viewing a post.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Post from 'App/Models/Post'\n\nRoute.get('posts/:id', async ({ bouncer, request }) => {\n  const post = await Post.findOrFail(request.param('id'))\n\n  await bouncer.authorize('viewPost', post)\n})\n```\n\n----------------------------------------\n\nTITLE: Variable-based Partial Include in Edge\nDESCRIPTION: Shows how to include a partial template using a variable to specify the path instead of a static string. The path is determined at runtime based on the variable value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/include.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@include(headerPartial)\n```\n\n----------------------------------------\n\nTITLE: Using Validator with Custom Reporter in TypeScript\nDESCRIPTION: Example showing how to use a custom error reporter with the validator.validate method\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/error-reporters.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, validator } from '@ioc:Adonis/Core/Validator'\n\nvalidator.validate({\n  schema: schema.create({}),\n  reporter: validator.reporters.api,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing afterFind hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This snippet shows how to use the @afterFind decorator to register a function that processes markdown content after finding a post in the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { afterFind, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass Post extends BaseModel {\n  @afterFind()\n  public static async processMarkdown(post) {\n    post.html = await markdownIt(post.body)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasManyThrough Relationship\nDESCRIPTION: Shows how to define a HasManyThrough relationship between Country and Post models through User model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from 'App/Models/Post'\nimport User from 'App/Models/User'\nimport {\n  BaseModel,\n  column,\n  hasManyThrough,\n  HasManyThrough\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Country extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @hasManyThrough([\n    () => Post,\n    () => User,\n  ])\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying User Credentials in AdonisJS API Authentication (TypeScript)\nDESCRIPTION: This snippet shows how to verify user credentials using the verifyCredentials method, which raises an InvalidCredentialsException if the credentials are invalid.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await auth.use('api').verifyCredentials(email, password)\n} catch (error) {\n  console.log(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Implementing Service Provider with Dynamic Imports\nDESCRIPTION: This snippet shows the correct way to implement a service provider by moving imports inside the boot method to ensure the application is fully booted before accessing container bindings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const { default: Route } = await import('@ioc:Adonis/Core/Route')\n    Route.get('/', async () => {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfExistsAny Validation Rule in AdonisJS\nDESCRIPTION: Marks a field as required when any of the specified fields exist in the request data. This is useful when a field is required when at least one of multiple possible fields is present.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/required-if-rules.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  password: schema.string.optional([\n    rules.requiredIfExistsAny(['username', 'email'])\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver in AdonisJS Service Provider\nDESCRIPTION: This snippet shows how to register a custom mail driver (PostMarkDriver) with the Mail module of AdonisJS inside a service provider's boot method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const { PostMarkDriver } = await import('./PostMarkDriver')\n    const Mail = this.app.container.use('Adonis/Addons/Mail')\n\n    Mail.extend('postmark', (_mail, _mapping, config) => {\n      return new PostMarkDriver(config)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Mail Package\nDESCRIPTION: Command to configure the mail package, creating necessary config files and updating project configuration\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/mail\n```\n\n----------------------------------------\n\nTITLE: Basic Password Confirmation Validation in TypeScript using AdonisJS\nDESCRIPTION: Demonstrates the basic implementation of password confirmation validation using the confirmed() rule. Uses the default _confirmation convention for field naming.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/confirmed.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  password: schema.string([\n    rules.confirmed()\n  ])\n}\n\n/**\n Valid data: {\n    password: 'secret',\n    password_confirmation: 'secret'\n }\n */\n```\n\n----------------------------------------\n\nTITLE: New Edge Component Syntax\nDESCRIPTION: Example of the new simplified syntax for Edge components using direct tag names.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n@modal({ title: 'Want to continue?' })\n@end\n```\n\n----------------------------------------\n\nTITLE: Processing Custom Content Types with BodyParser in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to register custom content types in the BodyParser configuration for custom parsing support.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/bodyparser.ts\n{\n  raw: {\n    // ...\n    types: ['text/*', 'my-custom-content-type']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Posts Migration Schema in TypeScript\nDESCRIPTION: Creates a migration schema for the 'posts' table with a foreign key 'user_id' referencing the 'users' table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Posts extends BaseSchema {\n  protected tableName = 'posts'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table\n        .integer('user_id')\n        .unsigned()\n        .references('users.id')\n        .onDelete('CASCADE')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using manyToMany Decorator for Many-to-Many Relationships\nDESCRIPTION: Shows how to use the manyToMany decorator to define a many-to-many relationship between models using a pivot table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { manyToMany, ManyToMany, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends Model {\n  @manyToMany(() => Subject)\n  public subjects: ManyToMany<typeof Subject>\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Lazy Loading Controllers\nDESCRIPTION: This example demonstrates how to manually implement lazy loading for controllers to avoid importing everything at the top level. The controller is only imported when the route is accessed.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('/posts', async (ctx) => {\n  const { default: PostsController } = await import(\n    'App/Controllers/Http/PostsController'\n  )\n  return new PostsController().index(ctx)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Driver in AdonisJS\nDESCRIPTION: Shows how to configure the session driver using environment variables in the session configuration file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// title: config/session.ts\n{\n  driver: Env.get('SESSION_DRIVER'),\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Memory Session Driver Implementation\nDESCRIPTION: Complete implementation of a custom in-memory session driver\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// title: providers/SessionDriver/index.ts\nimport { SessionDriverContract } from '@ioc:Adonis/Addons/Session'\n\nconst SESSIONS: Map<string, Record<string, any>> = new Map()\n\nexport class MemoryDriver implements SessionDriverContract {\n  public async read(sessionId: string) {\n    return SESSIONS.get(sessionId) || null\n  }\n\n  public async write(sessionId: string, values: Record<string, any>) {\n    SESSIONS.set(sessionId, values)\n  }\n\n  public async destroy(sessionId: string) {\n    SESSIONS.delete(sessionId)\n  }\n\n  public async touch() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Email Template Example\nDESCRIPTION: Edge template example for welcome email with dynamic content\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n<h1> Welcome {{ user.fullName }} </h1>\n<p>\n  <a href=\"{{ url }}\">Click here</a> to verify your email address.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Getting Formatter Instance\nDESCRIPTION: Returns an instance of the configured translations formatter.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.getFormatter()\n```\n\n----------------------------------------\n\nTITLE: Accessing Knex Instance in AdonisJS\nDESCRIPTION: Demonstrates how to access the underlying Knex instance for both main and read connections. The client property is available only after the connect method is called.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.client\nconnection.readClient\n```\n\n----------------------------------------\n\nTITLE: Customizing Attribute Merging in AdonisJS Factories with TypeScript\nDESCRIPTION: Demonstrates how to customize the merge behavior in factories using the 'merge' handler. This allows for custom logic when merging attributes into existing model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nFactory\n  .define(User, () => {\n\n  })\n  .merge((user, attributes, ctx) => {\n    user.merge(attributes)\n  })\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Revoking API Tokens in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to revoke an API token during logout using the auth.revoke method. It removes the token sent in the current request from the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.post('/logout', async ({ auth, response }) => {\n  await auth.use('api').revoke()\n  return {\n    revoked: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Saving Related Model Instances\nDESCRIPTION: Shows how to save an existing model instance as a related record using the save method, which automatically sets up the foreign key relationship.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail(1)\n\nconst comment = new Comment()\ncomment.body = 'This is a great post'\n\nawait post.related('comments').save(comment)\n\nconsole.log(comment.postId === post.id) // true\n```\n\n----------------------------------------\n\nTITLE: Rendering Entry Point Scripts and Styles with Edge Templates\nDESCRIPTION: Example showing how to use @entryPointScripts and @entryPointStyles tags to render JavaScript and CSS assets in Edge templates. These tags accept an entrypoint name that matches the configuration in webpack.config.js.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/entry-points.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<!-- Renders scripts -->\n@entryPointScripts('app')\n\n<!-- Renders styles -->\n@entryPointStyles('app')\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Primary Key in TypeScript with AdonisJS\nDESCRIPTION: The primaryKey static property allows setting a custom primary key for the model. By default, it uses the 'id' column.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static primaryKey = 'uuid'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended Response Method\nDESCRIPTION: Example of using the newly added flash method in a route handler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.post('users', ({ response }) => {\n  response.flash({ success: 'User created' })\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Serialization with serializeAs Option\nDESCRIPTION: Demonstrates how to customize the serialization name of a HasManyThrough relationship using the serializeAs option in the decorator configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User], {\n    serializeAs: 'articles'\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Database Connection in AdonisJS Seeders\nDESCRIPTION: This TypeScript code shows how to use a custom database connection in a seeder by utilizing the connection property passed from the db:seed command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSeeder from '@ioc:Adonis/Lucid/Seeder'\nimport User from 'App/Models/User'\n\nexport default class UserSeeder extends BaseSeeder {\n\n  public async run () {\n    await User.create({\n      email: 'virk@adonisjs.com',\n      password: 'secret',\n    }, {\n      connection: this.connection, // 👈\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Handling in Models\nDESCRIPTION: Examples of using transactions with model instances through $trx property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await Database.transaction()\n\nconst user = new User()\nuser.$trx = trx\n\nawait user.save()\nawait trx.commit()\n\nconsole.log(user.$trx) // undefined\n```\n\n----------------------------------------\n\nTITLE: Using pivotAttributes in Lucid Model Factory\nDESCRIPTION: Example of using the new pivotAttributes method to define pivot attributes for many-to-many relationships in Lucid model factories.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nawait Team.with('users', 2, (user) => {\n  user.pivotAttributes({ role: 'admin' })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic docker-compose.yml for AdonisJS Development\nDESCRIPTION: A basic docker-compose.yml file for local development of an AdonisJS application. It builds the app from the dependencies stage of the Dockerfile, mounts the project directory as a volume, and enables debugging with Node.js inspector.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  adonis_app:\n    container_name: adonis_app\n    restart: always\n    build:\n      context: .\n      target: dependencies\n    ports:\n      - ${PORT}:${PORT}\n      - 9229:9229\n    env_file:\n      - .env\n    volumes:\n      - ./:/home/node/app\n      # Uncomment the below line if you developing on MacOS\n      #- /home/node/app/node_modules\n    command: dumb-init node ace serve --watch --node-args=\"--inspect=0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Settings in AdonisJS\nDESCRIPTION: Default configuration file for sessions that defines driver settings, cookie options, and session behavior.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// title: config/session.ts\nimport { sessionConfig } from '@adonisjs/session/build/config'\n\nexport default sessionConfig({\n  enabled: true,\n  driver: Env.get('SESSION_DRIVER'),\n  cookieName: 'adonis-session',\n  clearWithBrowser: false,\n  age: '2h',\n  cookie: {}, // see the cookie driver\n  file: {}, // see the file driver\n  redisConnection: 'local', // see the redis driver\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values with config Helper in Edge\nDESCRIPTION: Shows how to retrieve configuration values using the config helper which references the Config.get method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{ config('app.appKey') }}\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Additional Constraints\nDESCRIPTION: Example of unique validation with additional where constraints for tenant_id filtering.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string([\n    rules.unique({\n      table: 'users',\n      column: 'email',\n      where: {\n        tenant_id: 1,\n      },\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Model Attributes\nDESCRIPTION: Demonstrates how to serialize only the model attributes while omitting specific fields.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nuser.serializeAttributes({\n  omit: ['password']\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Slots in Edge Component\nDESCRIPTION: Shows how to use slots to accept markup from parent components.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<button type=\"{{ type }}\">\n  {{{ await $slots.main() }}}\n</button>\n```\n\nLANGUAGE: edge\nCODE:\n```\n@component('button', {\n  type: 'submit'\n})\n  <i class=\"fa-icon-lock\" />\n  <span> Login </span>\n@end\n```\n\n----------------------------------------\n\nTITLE: Using Schema Builder\nDESCRIPTION: Demonstrates how to access the schema builder for creating and modifying database tables and other schema objects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.schema.createTable('users', (table) => {\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Sections in Edge Layout\nDESCRIPTION: Shows how to export sections in a layout template that correspond to the defined sections in the child template.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/layout.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@!section('body')\n@!section('footer')\n```\n\n----------------------------------------\n\nTITLE: Listening to db:query Event in AdonisJS\nDESCRIPTION: This snippet shows how to listen for the 'db:query' event using the Event module in AdonisJS. It logs the SQL query and bindings to the console.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/debugging.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/events.ts\nimport Event from '@ioc:Adonis/Core/Event'\n\nEvent.on('db:query', function ({ sql, bindings }) {\n  console.log(sql, bindings)\n})\n```\n\n----------------------------------------\n\nTITLE: Existence Validation with Additional Constraints\nDESCRIPTION: Example showing how to add where conditions to the existence validation rule using key-value pairs.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  slug: schema.string([\n    rules.exists({\n      table: 'categories',\n      column: 'slug',\n      where: {\n        tenant_id: 1,\n        status: 'active',\n      },\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Mailer Class Implementation\nDESCRIPTION: Example of implementing a mailer class with configuration options and methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseMailer, MessageContract } from '@ioc:Adonis/Addons/Mail'\n\nexport default class VerifyEmail extends BaseMailer {\n  public prepare(message: MessageContract) {\n    message\n      .subject('The email subject')\n      .from('admin@example.com')\n      .to('user@example.com')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Native SQL in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the toNative method in combination with toSQL to format the SQL query according to the specific database dialect in use.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = Database\n  .from('users')\n  .where('id', 1)\n  .toSQL()\n  .toNative()\n\nconsole.log(output)\n```\n\n----------------------------------------\n\nTITLE: Date Offset Examples with the 'before' Rule in AdonisJS (TypeScript)\nDESCRIPTION: Shows various duration and offset combinations that can be used with the 'before' validation rule, including days, months, years, and minutes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrules.before(2, 'days')\nrules.before(1, 'month')\nrules.before(4, 'years')\nrules.before(30, 'minutes')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies Stage in Docker for AdonisJS\nDESCRIPTION: The second stage of the Dockerfile that copies package files and installs dependencies. This approach enables Docker to cache this stage if there are no changes to package files, improving build efficiency in CI/CD pipelines.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM base AS dependencies\nCOPY --chown=node:node ./package*.json ./\nRUN npm ci\nCOPY --chown=node:node . .\n```\n\n----------------------------------------\n\nTITLE: Registering Command Paths in AdonisJS\nDESCRIPTION: Configuration for specifying directories or packages where Ace commands are located. Includes local command directories and package-provided commands.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\n    \"./commands\",\n    \"@adonisjs/core/build/commands\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Translations\nDESCRIPTION: Demonstrates loading translations using configured loaders and caching them in memory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nawait I18n.loadTranslations()\n```\n\n----------------------------------------\n\nTITLE: Setting Related Models Using setRelated Method\nDESCRIPTION: Example showing how to set related models on a parent model instance using the 'setRelated' method of a HasManyThrough relationship.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst country = new Country()\nconst post = new Post()\n\nCountry.$getRelation('posts').setRelated(country, [post])\n```\n\n----------------------------------------\n\nTITLE: Using Logger via Application in AdonisJS\nDESCRIPTION: How to access the application logger through the Application instance to log messages at different levels.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.logger.info('hello world')\n```\n\n----------------------------------------\n\nTITLE: Accessing AsyncLocalStorage State from a Module\nDESCRIPTION: Shows how ModuleA can access the state stored in AsyncLocalStorage using the storage.getStore() method and further propagate operations to other modules.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: ModuleA.ts\n// highlight-start\nimport { storage } from './storage'\n// highlight-end\nimport ModuleB from './ModuleB'\n\nexport default class ModuleA {\n  public async run() {\n    // highlight-start\n    console.log(storage.getStore())\n    await (new ModuleB()).run()\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the delete method to remove records from a database table. This example deletes the user with id 1 from the 'users' table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .where('id', 1)\n  .delete()\n```\n\n----------------------------------------\n\nTITLE: Advanced Relationship Filtering with Count Constraints\nDESCRIPTION: Shows how to combine whereHas with count constraints to filter records based on both the properties and count of related records.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  .whereHas('comments', (query) => {\n    query.where('isApproved', true)\n  }, '>', 2)\n```\n\n----------------------------------------\n\nTITLE: Nullable Array Validation\nDESCRIPTION: Defines an array property that can accept null values but must exist in the payload.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema.array\n    .nullable([// 👈\n      rules.minLength(1)\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Import Aliases in AdonisJS TypeScript\nDESCRIPTION: Example of using AdonisJS import aliases in TypeScript code. The aliases need to be defined in both .adonisrc.json and tsconfig.json files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport 'App/Models/User'\n```\n\n----------------------------------------\n\nTITLE: Basic AlphaNum Validation in TypeScript using AdonisJS\nDESCRIPTION: Validates a username field to ensure it contains only alphanumeric characters using the AdonisJS validator schema.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/alpha-num.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.alphaNum(),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Config in AdonisJS\nDESCRIPTION: Shows how to access the connection configuration object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.config\n```\n\n----------------------------------------\n\nTITLE: Extending Database Query Builder with Custom Macros\nDESCRIPTION: Demonstrates how to extend the DatabaseQueryBuilder by adding a custom 'getCount' macro in an AppProvider. This method counts records and returns the result as a BigInt.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    // highlight-start\n    const {\n      DatabaseQueryBuilder\n    } = this.app.container.use('Adonis/Lucid/Database')\n\n    DatabaseQueryBuilder.macro('getCount', async function () {\n      const result = await this.count('* as total')\n      return BigInt(result[0].total)\n    })\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Query in Select Statement\nDESCRIPTION: Demonstrates how to use raw SQL queries within a select statement for complex selections.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select(\n    Database\n      .raw(`\n        (select ip_address from user_logins where users.id = user_logins.user_id limit 1) as last_login_ip\n      `)\n  )\n```\n\n----------------------------------------\n\nTITLE: Performing Insert Operation with Transaction\nDESCRIPTION: Uses a transaction object to create and execute an insert query. This ensures the insert operation is part of the transaction and can be committed or rolled back with other operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait trx\n  .insertQuery()\n  .table('users')\n  .insert({ username: 'virk' })\n```\n\n----------------------------------------\n\nTITLE: Generating SQL in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the toSQL method to generate the SQL query and bindings as an object. This is useful for debugging or logging purposes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = Database\n  .from('users')\n  .where('id', 1)\n  .toSQL()\n\nconsole.log(output)\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Cache Keys for Dynamic Schemas in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to create a unique cache key by appending dynamic data (selected state) to the route key. This approach allows caching different versions of the schema based on the selected state, but can lead to excessive caching for many variations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/schema-caching.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AddressValidator {\n  public selectedState = this.ctx.request.input('state')\n\n  public schema = schema.create({\n    state: schema.enum(STATES),\n    city: schema.enum(CITIES[this.selectedState] || [])\n  })\n\n  // highlight-start\n  public cacheKey = `${this.ctx.routeKey}-${selectedState}`\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars Helper Registration\nDESCRIPTION: Example of registering a custom helper in Handlebars for string transformation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nHandlebars.registerHelper('upperCase', function (aString) {\n  return aString.toUpperCase()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeFetch hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This example demonstrates the use of the @beforeFetch decorator to register a function that excludes soft-deleted records from fetch operations (all select queries except find operations).\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  beforeFetch,\n  BaseModel,\n  ModelQueryBuilderContract\n} from '@ioc:Adonis/Lucid/Orm'\n\ntype PostQuery = ModelQueryBuilderContract<typeof Post>\n\nclass Post extends BaseModel {\n  @beforeFetch()\n  public static withoutSoftDeletes(query: PostQuery) {\n    query.whereNull('deleted_at')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Token with csrfToken Helper in Edge\nDESCRIPTION: Shows how to include a CSRF token as a hidden input value using the csrfToken helper, which is available when @adonisjs/shield is installed.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<input type=\"hidden\" value=\"{{ csrfToken }}\" name=\"_csrf\">\n```\n\n----------------------------------------\n\nTITLE: Registering Auth Middleware in AdonisJS\nDESCRIPTION: This snippet shows how to register the Auth middleware as a named middleware in the start/kernel.ts file. This registration is required before you can use the auth middleware on your routes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/kernel.ts\nServer.middleware.registerNamed({\n  auth: () => import('App/Middleware/Auth')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Socket.io in AdonisJS\nDESCRIPTION: Shows how to configure Cross-Origin Resource Sharing (CORS) directly with Socket.io, independent of AdonisJS CORS settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nclass Ws {\n  public io: Server\n  private booted = false\n\n  public boot() {\n    /**\n     * Ignore multiple calls to the boot method\n     */\n    if (this.booted) {\n      return\n    }\n\n    this.booted = true\n    // highlight-start\n    this.io = new Server(AdonisServer.instance!, {\n      cors: {\n        origin: '*'\n      }\n    })\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AdonisJS Project with yarn\nDESCRIPTION: This command uses yarn to create a new AdonisJS TypeScript project. It initializes a new project named 'hello-world' using the AdonisJS starter package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn create adonis-ts-app hello-world\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Root Directory in AdonisJS\nDESCRIPTION: How to get the absolute path to the application's root directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.appRoot\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in AdonisJS Migrations\nDESCRIPTION: Shows how to rename a database table using the renameTable method. It takes the existing table name as the first argument and the new name as the second argument.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.schema.renameTable('user', 'app_users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Informing TypeScript about Extended Router Methods\nDESCRIPTION: This code snippet demonstrates how to inform TypeScript about custom methods added to the Router in AdonisJS using declaration merging. It shows how to extend the RouteContract interface.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// title: contracts/route.ts\ndeclare module '@ioc:Adonis/Core/Route' {\n  interface RouteContract {\n    mustBeSigned(): this\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory States\nDESCRIPTION: Shows how to define and use factory states to create variations of model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Factory from '@ioc:Adonis/Lucid/Factory'\nimport Post from 'App/Models/Post'\n\nexport const PostFactory = Factory\n  .define(Post, ({ faker }) => {\n    return {\n      title: faker.lorem.sentence(),\n      content: faker.lorem.paragraphs(4),\n      status: 'DRAFT',\n    }\n  })\n  .state('published', (post) => post.status = 'PUBLISHED')\n  .build()\n```\n\n----------------------------------------\n\nTITLE: CSP Configuration Setup\nDESCRIPTION: Content Security Policy configuration with directives for trusted sources\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/web-security.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndirectives: {\n  defaultSrc: [\"'self'\"],\n  scriptSrc: [\"'self'\", 'https://cdnjs.cloudflare.com', '@nonce'],\n  fontSrc: [\"'self'\", 'https://fonts.googleapis.com'],\n}\n```\n\n----------------------------------------\n\nTITLE: Decrementing Values in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the decrement method to decrease a value in a database table. This example decreases the 'balance' field by 10 for the account with id 1.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('accounts')\n  .where('id', 1)\n  .decrement('balance', 10)\n```\n\n----------------------------------------\n\nTITLE: Managing Advisory Locks\nDESCRIPTION: Demonstrates how to acquire and release advisory locks in PostgreSQL and MySQL databases, useful for database migrations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.getAdvisoryLock('key_name')\n\n// custom timeout\nawait client.getAdvisoryLock('key_name', 2000)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.releaseAdvisoryLock('key_name')\n```\n\n----------------------------------------\n\nTITLE: Scoped Parameters Route Definition\nDESCRIPTION: Route definition for scoped parameters. Uses the '>' symbol to indicate that the comment parameter is scoped to the post parameter.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/posts/:post/comments/:>comment', 'PostsController.show')\n```\n\n----------------------------------------\n\nTITLE: Setting Related Models in BelongsTo Relationship\nDESCRIPTION: Examples of setting related models using setRelated and setRelatedForMany methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/belongs-to.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nconst post = new Post()\n\nPost.$getRelation('author').setRelated(user, post)\n```\n\n----------------------------------------\n\nTITLE: Implementing Distinct Validation for Object Arrays\nDESCRIPTION: Demonstrates how to implement distinct validation rule for an array of objects, ensuring unique id values across all array elements.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/distinct.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  products: schema\n    .array([\n      rules.distinct('id')\n    ])\n    .members(schema.object().members({\n      id: schema.number(),\n      quantity: schema.number(),\n    }))\n}\n```\n\n----------------------------------------\n\nTITLE: Route Helper with Array Parameters in Edge\nDESCRIPTION: Shows how to use the route helper with positional array parameters to generate a URL with route parameters.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<form\n  action=\"{{ route('PostsController.update', [1]) }}\"\n  method=\"POST\"\n>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Alternative Select Query Using the from Method in TypeScript\nDESCRIPTION: An alternative way to create a query builder instance by directly calling the .from() method instead of .query(), which produces the same SELECT query result.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nconst users = await Database\n  .from('users') // 👈 gives an instance of select query builder\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Procfile for AdonisJS\nDESCRIPTION: Example Procfile that instructs Heroku to run migrations during release phase and start the server from the build folder.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/heroku.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nweb: node build/server.js\nrelease: node build/ace migration:run --force\n```\n\n----------------------------------------\n\nTITLE: Truncating Database Tables\nDESCRIPTION: Demonstrates how to truncate a database table with optional cascading for foreign key references.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.truncate('users')\n\n// cascade\nawait client.truncate('users', true)\n```\n\n----------------------------------------\n\nTITLE: Converting Newlines to HTML Line Breaks in Edge Templates\nDESCRIPTION: Converts newline characters to HTML <br> tags, useful for displaying multi-line content in HTML.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n{{{ nl2br(post.content) }}}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting in Translation Messages\nDESCRIPTION: Example of formatting dates in translation messages using ICU syntax with medium date format specification.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shipment_update\": \"Your package will arrive on {expectedDate, date, medium}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Email Template Image Reference in Edge\nDESCRIPTION: Shows how to reference embedded images in Edge templates using Content-ID (CID).\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n<img src=\"cid:a-unique-id-for-the-attachment\" />\n```\n\n----------------------------------------\n\nTITLE: Using Refs for Dynamic Data in Cached Schemas in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates the use of schema.refs to reference runtime values within a cached schema. This approach allows caching the schema while still supporting dynamic data, providing a balance between performance and flexibility.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/schema-caching.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AddressValidator {\n  public selectedState = this.ctx.request.input('state')\n\n  // highlight-start\n  public refs = schema.refs({\n    cities: CITIES[this.selectedState] || []\n  })\n  // highlight-end\n\n  public schema = schema.create({\n    state: schema.enum(STATES),\n    // highlight-start\n    city: schema.enum(this.refs.cities)\n    // highlight-end\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Column Aliases in Select Queries\nDESCRIPTION: Shows different ways to create column aliases in select queries using 'as' expression and object notation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select('id', 'email as userEmail')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select({\n    id: 'id',\n\n    // Key is alias name\n    userEmail: 'email'\n  })\n```\n\n----------------------------------------\n\nTITLE: Applying Trim Rule in AdonisJS Schema Validation (TypeScript)\nDESCRIPTION: Demonstrates using the trim validation rule to remove leading and trailing whitespace from a username field. The rule is imported from the AdonisJS validator module and applied within a schema definition.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/trim.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.trim()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Making Objects Optional in AdonisJS Schema Validation\nDESCRIPTION: Shows how to make an object property optional using the .optional() method. Optional properties can be undefined or null and will be removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/object.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: schema.object\n    .optional() // 👈\n    .members({\n      username: schema.string(),\n      avatar_url: schema.string()\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Session Initiation in TypeScript\nDESCRIPTION: Shows how to initiate a session store with optional readonly mode\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait session.initiate(false)\n\n// Readonly store\nawait session.initiate(true)\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Excerpt Generation in Edge\nDESCRIPTION: Demonstrates the basic usage of the excerpt helper to strip HTML tags and truncate text to a specified length while preserving complete words.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/excerpt.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  excerpt(\n    '<p> Hello, this is a dummy <strong> post </strong> </p>',\n    20\n  )\n}}\n\n<!-- Output: Hello, this is a dummy... -->\n```\n\n----------------------------------------\n\nTITLE: Using computed Decorator for Derived Properties\nDESCRIPTION: Demonstrates how to use the computed decorator to include getter methods in model serialization, useful for derived properties like fullName.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { column, computed, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @column()\n  public firstName: string\n\n  @column()\n  public lastName: string\n\n  @computed()\n  public get fullName() {\n    return `${this.firstName} ${this.lastName}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Lookup Key Globally via Model\nDESCRIPTION: Code to change the lookup key for a model globally. Instead of using the primary key, this example uses the 'slug' property for lookups.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nclass Post extends BaseModel {\n  public static routeLookupKey = 'slug'\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration\nDESCRIPTION: Configuration setup for PostgreSQL database including connection parameters and migration settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm i pg\n```\n\nLANGUAGE: typescript\nCODE:\n```\npg: {\n  client: 'pg',\n  connection: {\n    host: Env.get('PG_HOST'),\n    port: Env.get('PG_PORT'),\n    user: Env.get('PG_USER'),\n    password: Env.get('PG_PASSWORD', ''),\n    database: Env.get('PG_DB_NAME'),\n  },\n  migrations: {\n    naturalSort: true,\n  },\n  healthCheck: false,\n  debug: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slots in Edge Components\nDESCRIPTION: Shows how to define named slots using the @slot tag, including examples of basic slot usage and accessing slot arguments passed from the component template.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/component.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@slot('main')\n  This is the content for the main slot\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n@slot('main', scope)\n  {{ scope.title }}\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{{ await $slots.main({ title: 'Hello world' }) }}}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in AdonisJS\nDESCRIPTION: This code shows how to handle multiple file uploads using the request.files method, iterating through the files and moving each to the uploads directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/file-uploads.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Application from '@ioc:Adonis/Core/Application'\n\nRoute.post('gallery', async ({ request }) => {\n  const images = request.files('images')\n\n  for (let image of images) {\n    await image.move(Application.tmpPath('uploads'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Best Matching Supported Locale\nDESCRIPTION: Demonstrates content negotiation to find the best matching supported locale from user languages.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst bestMatch = I18n.getSupportedLocale(['en', 'fr'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Seeder Path in AdonisJS\nDESCRIPTION: This TypeScript code snippet shows how to configure the path for the main seeder directory in the config/database.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mysql: {\n    client: 'mysql2',\n    // ... rest of the config\n    seeders: {\n      paths: ['./database/seeders/MainSeeder']\n    }\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Words in Edge Templates\nDESCRIPTION: Converts a singular word to its plural form based on English language rules.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\n{{ pluralize('box') }} <!-- boxes -->\n{{ pluralize('i') }} <!-- we -->\n```\n\n----------------------------------------\n\nTITLE: Using the safe() Method for Unescaped HTML in Edge\nDESCRIPTION: Shows how to use the safe() method as an alternative to triple curly braces for rendering unescaped HTML content in Edge templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/safe.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{ safe('<p> I will render as it is </p>') }}\n```\n\n----------------------------------------\n\nTITLE: Using Descriptive Response Methods\nDESCRIPTION: Examples of using descriptive methods for different HTTP statuses to send response body with appropriate status codes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.badRequest({ error: 'Invalid login credentials' })\nresponse.forbidden({ error: 'Unauthorized' })\nresponse.created({ data: user })\n```\n\n----------------------------------------\n\nTITLE: Basic Phone Number Validation in AdonisJS\nDESCRIPTION: Basic implementation of phone number validation using the mobile rule in AdonisJS validator schema. Validates if the input string is properly formatted as a phone number.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/mobile.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  mobile: schema.string([\n    rules.mobile()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Age for CORS in AdonisJS\nDESCRIPTION: This snippet shows how to set the max age for CORS preflight requests in AdonisJS. It sets the 'maxAge' property to a number of seconds.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  maxAge: 90\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for OAuth Authorization Code in AdonisJS Ally (TypeScript)\nDESCRIPTION: Demonstrates how to check if the redirect request contains the OAuth authorization code using the hasCode method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nif(ally.use('github').hasCode()) {\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Boolean Schema Validation\nDESCRIPTION: Implementation of optional boolean validation where undefined and null values are considered optional and removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/boolean.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accepted: schema.boolean.optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeField Rule in AdonisJS Schema\nDESCRIPTION: Demonstrates how to validate that a check-in date occurs before a checkout date using the beforeField validation rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before-field.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  checkout_date: schema.date(),\n  checkin_date: schema.date({}, [\n    rules.beforeField('checkout_date')\n  ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Encryption Instance in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to create a child instance of the Encryption module with a custom secret key. This is useful for user-specific encryption where each user might have their own secret.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/encryption.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userEncryptor = Encryption.child({\n  secret: user.secret,\n})\n\nuserEncryptor.encrypt('hello-world')\n```\n\n----------------------------------------\n\nTITLE: Cloning Queries in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the clone method to create a new query builder object with all constraints applied from the original query. This allows for creating variations of a base query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = Database.from('users').select('id', 'email')\nconst clonedQuery = query.clone().clearSelect()\n\nawait query // select \"id\", \"email\" from \"users\"\nawait clonedQuery // select * from \"users\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Properties in Serialized Output in TypeScript\nDESCRIPTION: Shows how to hide properties from the serialized output by setting serializeAs to null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column()\n  public email: string\n\n  // highlight-start\n  @column({ serializeAs: null })\n  public password: string\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Basic View Rendering with TypeScript in AdonisJS\nDESCRIPTION: Demonstrates basic template rendering using View.render method with template path and data object\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport View from '@ioc:Adonis/Core/View'\n\nconst html = await View.render('welcome', {\n  greeting: 'Hello'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Query Hooks\nDESCRIPTION: Shows how to define an onQuery hook when setting up relationships to automatically apply certain constraints whenever the relationship is queried.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport UserEmail from 'App/Models/UserEmail'\nimport {\n  column,\n  BaseModel,\n  hasMany,\n  HasMany\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @hasMany(() => UserEmail)\n  public emails: HasMany<typeof UserEmail>\n\n  @hasMany(() => UserEmail, {\n    // highlight-start\n    onQuery: (query) => {\n      query.where('isActive', true)\n    }\n    // highlight-start\n  })\n  public activeEmails: HasMany<typeof UserEmail>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Before Hook in Lucid Model\nDESCRIPTION: Shows how to define a 'before' hook for a specific event in a Lucid model. Hooks allow executing code before certain operations like create, update, etc.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic static boot () {\n  if (this.booted) {\n    return\n  }\n\n  super.boot()\n  this.before('create', (user) => {\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component with Named Slots\nDESCRIPTION: Example of a modal component using multiple named slots for header, main content, and actions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<div>\n  <header>\n    {{{ await $slots.header() }}}\n  </header>\n\n  <main>\n    {{{ await $slots.main() }}}\n  </main>\n\n  <footer>\n    {{{ await $slots.actions() }}}\n  </footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate with HasOne Relationship\nDESCRIPTION: Shows how to use firstOrCreate to find an existing profile or create a new one if it doesn't exist, with the foreign key automatically added to the search query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .related('profile')\n  .firstOrCreate({}, {\n    email: 'virk@adonisjs.com',\n    avatarUrl: 'profile.jpg',\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Driver in AdonisJS\nDESCRIPTION: Configuration setup for a custom disk driver named 'myDummyDisk' in the config/drive.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  disks: {\n    myDummyDisk: {\n      driver: 'dummy',\n      // ... rest of the config\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing i18n Instance in Edge Templates\nDESCRIPTION: Demonstrates how to access the i18n instance and its methods in Edge templates. The instance is shared globally and can be overridden by the DetectUserLocale middleware with a request-specific instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/view-helpers.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ i18n.locale }}\n{{ i18n.formatNumber(100) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Read and Write Database Clients\nDESCRIPTION: Shows how to get the underlying Knex.js client instances for read and write operations, useful when working with read/write replicas.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst knex = client.getReadClient()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst knex = client.getWriteClient()\n```\n\n----------------------------------------\n\nTITLE: LinkedIn OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the LinkedIn OAuth driver in AdonisJS Ally, including client ID, secret, callback URL, and LinkedIn-specific scopes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nlinkedin: {\n  driver: 'linkedin',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n\n  // LinkedIn specific\n  scopes: ['r_emailaddress', 'r_liteprofile'],\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Human Readable Format in Edge Templates\nDESCRIPTION: Converts byte values to human-readable strings with customizable formatting options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_12\n\nLANGUAGE: edge\nCODE:\n```\n{{ prettyBytes(1024) }} <!-- 1KB -->\n\n{{\n  prettyBytes(1024, { unitSeparator: ' ' })\n}} <!-- 1 KB -->\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test in AdonisJS v5 with Japa\nDESCRIPTION: This snippet shows how to use the test.only method to run a single test, ignoring all other tests across all files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntest.group('Welcome', () => {\n  test.only('ensure user password gets hashed during save', async (assert) => {\n    const user = new User()\n    user.email = 'virk@adonisjs.com'\n    user.password = 'secret'\n    await user.save()\n\n    assert.notEqual(user.password, 'secret')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HasManyThrough Relationship Properties in AdonisJS\nDESCRIPTION: Code snippet showing how to access various properties of a HasManyThrough relationship defined on a model using the $getRelation method. It demonstrates retrieving the relationName, type, and relatedModel.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCountry.$getRelation('posts').relationName\nCountry.$getRelation('posts').type\nCountry.$getRelation('posts').relatedModel()\n```\n\n----------------------------------------\n\nTITLE: Using First Method in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the first method to retrieve the first row from a query result. This method returns null if no rows are found.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await Database\n  .from('users')\n  .where('id', 1)\n  .first()\n\nif (user) {\n  console.log(user.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Model Instances in Lucid\nDESCRIPTION: Demonstrates how to create multiple model instances at once using the createMany method. Each instance generates a separate INSERT query wrapped in a transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.createMany([\n  {\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  },\n  {\n    email: 'romain@adonisjs.com',\n    password: 'secret',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Basic String Validation in AdonisJS\nDESCRIPTION: Basic implementation of string validation using AdonisJS schema validator. Validates that a property contains a valid string value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/string.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  title: schema.string()\n}\n```\n\n----------------------------------------\n\nTITLE: Route Definition with Model Binding Parameters\nDESCRIPTION: Route definition example showing the format for binding route parameters to models. This route has two parameters that will be bound to models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Routes file\nRoute.get('posts/:post/comments/:comment', 'PostsController.show')\n```\n\n----------------------------------------\n\nTITLE: Generating Query String in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the toQuery method to generate the SQL query string with bind parameters applied. This is useful for seeing the final query that will be executed.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = Database\n  .from('users')\n  .where('id', 1)\n  .toQuery()\n\nconsole.log(output)\n// select * from \"users\" where \"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Patching Connection Configuration\nDESCRIPTION: Shows how to update connection configuration dynamically without interrupting existing queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.manager.patch('pg', {\n  client: 'pg',\n  connection: {},\n})\n\n// Uses new config\nDatabase.manager.connect('pg')\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Unique Validation in AdonisJS\nDESCRIPTION: Shows how to implement case-insensitive unique validation using the caseInsensitive option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string([\n    rules.unique({\n      table: 'users',\n      column: 'email',\n      caseInsensitive: true,\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Event Emission\nDESCRIPTION: This code shows how to handle errors when emitting events using a try/catch block.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await Event.emit('new:user', { id: 1 })\n} catch (error) {\n  // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Class Implementation\nDESCRIPTION: Example of a validator class structure with schema and custom messages definition.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, CustomMessages } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContextContract) {\n  }\n\n  public schema = schema.create({\n  })\n\n  public messages: CustomMessages = {}\n}\n```\n\n----------------------------------------\n\nTITLE: Route Definition with View Rendering\nDESCRIPTION: TypeScript code showing how to create a route that renders an Edge template.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ view }) => {\n  return view.render('home')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts Section in Edge Layout\nDESCRIPTION: Example of defining a scripts section in the layout template that can be inherited or overridden\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/layouts.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@section('scripts')\n  <script src=\"./vendor.js\"></script>\n  <script src=\"./app.js\"></script>\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Events in TypeScript\nDESCRIPTION: This snippet demonstrates how to define type-safe events by extending the EventsList interface.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Event' {\n  interface EventsList {\n    'new:user': { id: number; email: string }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posts Migration Schema Definition\nDESCRIPTION: Database migration schema for creating the posts table with foreign key reference to users table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Posts extends BaseSchema {\n  protected tableName = 'posts'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table\n        .integer('user_id')\n        .unsigned()\n        .references('users.id')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Route Helper Usage in Edge Templates\nDESCRIPTION: Demonstrates using the route helper to generate a URL for a controller action in a form element.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<form\n  action=\"{{ route('PostsController.store') }}\"\n  method=\"POST\"\n>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Locales with getSupportedLocales in Edge\nDESCRIPTION: Shows how to get the list of all supported locales in the application using the getSupportedLocales helper function.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_14\n\nLANGUAGE: edge\nCODE:\n```\n{{ getSupportedLocales() }}\n```\n\n----------------------------------------\n\nTITLE: Closing Database Connections\nDESCRIPTION: Shows different ways to close database connections with and without releasing them.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Close\nawait Database.manager.close('pg')\nDatabase.manager.has('pg') // true\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Close + Release\nawait Database.manager.close('pg', true)\nDatabase.manager.has('pg') // false\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Local Key in HasManyThrough Relationship\nDESCRIPTION: Example showing how to explicitly define the 'localKey' in a HasManyThrough relationship, which should be the model property name rather than the database column name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @column()\n  public id: number\n\n  @hasManyThrough([() => Post, () => User], {\n    localKey: 'id', // id column on the \"Country\" model\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Using response.send Method with ETag Support\nDESCRIPTION: Shows how to use the response.send method to send responses with optional ETag generation for caching purposes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.send({ hello: 'world' })\n\n// With etag\nresponse.send({ hello: 'world' }, true)\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeUpdate hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This example demonstrates the use of the @beforeUpdate decorator to register a function that assigns a new random avatar URL to a user before updating an existing record in the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeUpdate, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @beforeUpdate()\n  public static async assignAvatar(user: User) {\n    user.avatarUrl = getRandomAvatar()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HasManyQueryBuilder in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to access the HasManyQueryBuilder for a user's posts relationship. This query builder extends the standard model query builder with additional methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\nuser.related('posts').query() // HasManyQueryBuilder\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the GitHub OAuth driver in AdonisJS Ally, including client ID, secret, callback URL, and GitHub-specific options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngithub: {\n  driver: 'github',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n\n  // GitHub specific\n  login: 'adonisjs',\n  scopes: ['user', 'gist'],\n  allowSignup: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Connection Switching\nDESCRIPTION: Example of switching between different Redis connections\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Redis from '@ioc:Adonis/Addons/Redis'\n\nawait Redis\n  .connection('session') // 👈 Switching connection\n  .set('foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript for Production\nDESCRIPTION: Command to compile TypeScript code to JavaScript for production deployment. The compiled output is written to the build directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --production\n```\n\n----------------------------------------\n\nTITLE: Installing @adonisjs/ally Package\nDESCRIPTION: Command to install the @adonisjs/ally package for social authentication in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/ally@4.1.5\n```\n\n----------------------------------------\n\nTITLE: Validating Strings with Regex Pattern in AdonisJS\nDESCRIPTION: Demonstrates how to validate a username field using regex pattern literals to ensure it only contains alphanumeric characters. Uses the schema.string() method with rules.regex() validator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/regex.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.regex(/^[a-zA-Z0-9]+$/)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Data Injection in Edge Components\nDESCRIPTION: Demonstrates how to inject and share data between components in a component tree.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@set('counter', { value: 0 })\n\n@inject({ counter })\n\n{{{ await $slots.main() }}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n@component('components/parent')\n  <p> Value of counter is {{ $context.counter.value }} </p>\n\n  @set($context, 'counter.value', $context.counter.value + 1)\n\n  <p> Updated value is {{ $context.counter.value }} </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Database Utility Methods\nDESCRIPTION: Utility methods for transactions, query logging, and connection management.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.transaction()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nEvent.on('db:query', Database.prettyPrint)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(Database.hasHealthChecksEnabled)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(Database.primaryConnectionName)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(Database.manager)\n```\n\n----------------------------------------\n\nTITLE: Using onNull Method with Joins in AdonisJS\nDESCRIPTION: Shows how to use the onNull method to filter join results where a column value is NULL. This creates an IS NULL condition in the join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onNull('user_logins.ip_address')\n  })\n```\n\n----------------------------------------\n\nTITLE: Message Formatting with I18n\nDESCRIPTION: Shows how to format messages using translations with the formatMessage method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n\n  .locale('en-US')\n  .formatMessage('messages.greeting', { name: 'Virk' })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Model Query Builder Method\nDESCRIPTION: Creates a TypeScript declaration to extend the ModelQueryBuilderContract interface with the custom 'getCount' method using declaration merging.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Lucid/Orm' {\n  interface ModelQueryBuilderContract<\n    Model extends LucidModel,\n    Result = InstanceType<Model>\n  > {\n    getCount(): Promise<BigInt>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Existence\nDESCRIPTION: Shows how to check if a connection is registered and register it if not.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (!Database.manager.has('pg')) {\n  Database.manager.add('pg', {})\n}\n```\n\n----------------------------------------\n\nTITLE: Initial PM2 Process Setup\nDESCRIPTION: Command to start the PM2 process for the first time on the server.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/laravel-forge.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npm2 start yarn --name api -- dev\n```\n\n----------------------------------------\n\nTITLE: Setting Destination Directory in AdonisJS Generator\nDESCRIPTION: Demonstrates how to specify the destination directory for generated files, including how to get directory paths from the AdonisJS configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// Get path to the config directory\nfile.destinationDir(\n  this.application.directoriesMap.get('config')!\n)\n\n// Get path to the controllers namespace\nfile.destinationDir(\n  this.application.resolveNamespaceDirectory('httpControllers')!\n)\n```\n\n----------------------------------------\n\nTITLE: Session Flash Message Exclusion in TypeScript\nDESCRIPTION: Demonstrates how to exclude specific keys when reflashing session data\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsession.reflashExcept(['success', 'username', 'password'])\n```\n\n----------------------------------------\n\nTITLE: Accessing Combined Request Body and Query String in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to access a merged copy of the request body and query string data using the request.all() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.all()\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfExistsAll Validation Rule in AdonisJS\nDESCRIPTION: Requires a field when all specified fields exist in the request data. This rule is useful when a field should only be required when multiple conditions are met simultaneously.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/required-if-rules.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  tax_id: schema.string.optional([\n    rules.requiredIfExistsAll(['owns_a_car', 'owns_a_house'])\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refs for Runtime Values in Validation\nDESCRIPTION: Example of using refs for runtime values in validation schema with caching.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContextContract) {\n  }\n\n  public refs = schema.refs({\n    tenantId: this.ctx.auth.user!.tenantId\n  })\n\n  public schema = schema.create({\n    email: schema.string([\n      rules.unique({\n        table: 'users',\n        column: 'email',\n        where: { tenant_id: this.refs.tenantId },\n      })\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereJsonSubset to Query JSON Columns in AdonisJS\nDESCRIPTION: Shows how to use the whereJsonSubset method to find records where a JSON column's value is contained within the specified object. This matches when the column is a subset of the provided object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereJsonSubset('address', { pincode: '110001', city: 'XYZ' })\n```\n\n----------------------------------------\n\nTITLE: Column Operations in Table Builder\nDESCRIPTION: Examples of dropping and renaming columns using the table builder methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.table('users', (table) => {\n  table.dropColumn('name')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.table('users', (table) => {\n  table.dropColumns('first_name', 'last_name')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.table('users', (table) => {\n  table.renameColumn('name', 'full_name')\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Extended Response\nDESCRIPTION: TypeScript interface declaration to add type support for custom response methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Response' {\n  interface ResponseContract {\n    flash(messages: any): this\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Route Matches in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to check if the current request URL matches any of multiple route patterns by passing an array of patterns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nif (request.matchesRoute(['/posts/:id', '/posts/:id/comments'])) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Test File in AdonisJS v5\nDESCRIPTION: This snippet demonstrates creating a simple test file with a basic assertion using Japa test runner.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport test from 'japa'\n\ntest.group('Japa', () => {\n  test('assert hello world', (assert) => {\n    assert.equal('hello world', 'hello world')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using AdonisJS Logger API with Message Interpolation\nDESCRIPTION: Demonstrates various ways to use the Logger API, including message interpolation and object merging.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Logger from '@ioc:Adonis/Core/Logger'\n\nLogger.info('hello %s', 'world')\n// output: {\"msg\": \"hello world\"}\n\nLogger.info('user details: %o', { username: 'virk' })\n// output: {\"msg\":\"user details: {\\\"username\\\":\\\"virk\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Booting a Lucid Model\nDESCRIPTION: Demonstrates how to boot a Lucid model. This is necessary for initializing the model due to JavaScript's limitations with static properties in class inheritance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nUser.boot()\n```\n\n----------------------------------------\n\nTITLE: Stream Validation Configuration - TypeScript\nDESCRIPTION: Implementation of stream validation with file extension and size restrictions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.multipart.onFile(\n  'input_field_name',\n  {\n    extnames: ['pdf', 'jpg', 'png', 'doc', 'xls'],\n    size: '200mb',  \n  },\n  (part, reportChunk) => {\n    part.pause()\n    part.on('data', reportChunk)\n    someSdk.uploadStream(part)\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Database Setup in Docker\nDESCRIPTION: SQL script to create a default database, user, and permissions for AdonisJS application. Creates user 'adonis' with password 'adonis' and grants all privileges on database 'adonis_app'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER adonis with encrypted password 'adonis';\nCREATE DATABASE adonis_app;\nGRANT ALL PRIVILEGES ON DATABASE adonis_app TO adonis;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Limiter Key in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the delete method to remove a key from storage, effectively resetting the consumed requests for that key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait limiter.delete(`global_${user.id}`)\n```\n\n----------------------------------------\n\nTITLE: Using distinct Method for Unique Rows in AdonisJS\nDESCRIPTION: Demonstrates how to use the distinct method without parameters to eliminate duplicate rows in the result set. This applies the DISTINCT keyword to the entire selection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.from('users').distinct()\n```\n\n----------------------------------------\n\nTITLE: Using Schema Refs for Runtime Enum Values in AdonisJS\nDESCRIPTION: Shows how to use schema refs for enum options that depend on runtime values, which is necessary when using schema caching. This example gets a list of cities based on a selected state.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\n/**\n * Dummy implementation returning hardcoded list of cities\n */\nfunction getCities(_state: string) {\n  return  ['Mumbai', 'Pune', 'Nagpur']\n}\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContextContract) {\n  }\n\n  // highlight-start\n  public refs = schema.refs({\n    cities: getCities(this.ctx.request.input('state'))\n  })\n\n  public schema = schema.create({\n    city: schema.enum(this.refs.cities)\n  })\n  // highlight-end\n\n  public cacheKey = this.ctx.routeKey\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Alpha Validation with Special Characters in AdonisJS\nDESCRIPTION: Enhanced alpha validation that allows additional characters like spaces, dashes, and underscores alongside letters in the string validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/alpha.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.alpha({\n      allow: ['space', 'underscore', 'dash']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Using @if/@elseif/@else Conditionals in Edge Templates\nDESCRIPTION: Demonstrates the usage of conditional statements in Edge templates to display different greetings based on user properties. The @if statement begins the block, followed by optional @elseif and @else clauses, and must be closed with @end.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/conditionals.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<!-- Start if -->\n@if(user.fullName)\n  <p> Hello {{ user.fullName }}! </p>\n@elseif(user.firstName)\n  <p> Hello {{ user.firstName }}! </p>\n@else\n  <p> Hello Guest! </p>\n<!-- End if -->\n@end\n```\n\n----------------------------------------\n\nTITLE: Validating Object Properties with Schema Members in AdonisJS\nDESCRIPTION: Demonstrates how to validate an object with specific property requirements using schema.object().members(). In this example, the profile object must contain username and avatar_url properties, both as strings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/object.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  profile: schema.object().members({\n    username: schema.string(),\n    avatar_url: schema.string()\n  })\n}\n\n// Valid data: { profile: { username: 'virk', avatar_url: 'somefile.jpg' } }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Insert Query Builder Method\nDESCRIPTION: Creates a TypeScript declaration to extend the InsertQueryBuilderContract interface with a custom method using declaration merging.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Lucid/Database' {\n  interface InsertQueryBuilderContract<Result = any> {\n    customMethod(): Promise<any>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Validation Rules in AdonisJS\nDESCRIPTION: Examples of using after and before validation rules for date fields.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  checkin_date: schema.date({}, [\n    rules.after(4, 'days')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  checkin_date: schema.date({}, [\n    rules.after('today')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  checkin_date: schema.date({}, [\n    rules.after('today')\n  ]),\n\n  checkout_date: schema.date({}, [\n    rules.afterField('checkin_date')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Nested Relationships with onQuery Hook\nDESCRIPTION: Demonstrates how to preload nested relationships using the 'onQuery' hook in a HasManyThrough relationship, with conditional handling for sub-queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User], {\n    onQuery(query) {\n      // highlight-start\n      if (!query.isRelatedSubQuery) {\n        query.preload('comments')\n      }\n      // highlight-end\n    }\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Using column.date Decorator for Date Fields\nDESCRIPTION: Demonstrates how to use the column.date decorator to mark a column as a date field, which automatically handles DateTime instances from Luxon.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { column, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @column.date()\n  public dob: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Connection Details\nDESCRIPTION: Demonstrates how to retrieve connection node details including name, state, connection instance and configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  name,\n  state,\n  connection,\n  config\n} = Database.manager.get('pg')\n```\n\n----------------------------------------\n\nTITLE: Defining Variables with @set Tag in Edge\nDESCRIPTION: Demonstrates basic usage of @set tag to define a local variable in an Edge template. The tag accepts a variable name and value as arguments.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/set.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@set('title', 'AdonisJS - A fully featured framework')\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag in Edge Templates\nDESCRIPTION: Demonstrates how to use the @component tag to include template components. The component can be referenced using a static path or a runtime value, and accepts a state object as the second argument.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/component.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@!component('components/button', {\n  title: 'Hello world'\n})\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component(currentTheme.button, {\n  title: 'Hello world'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Decorators for Model Hooks in Lucid\nDESCRIPTION: Demonstrates using decorators as an alternative (preferred) approach to define model hooks. This example shows how to mark a static method as a 'beforeSave' hook.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  beforeSave,\n} from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @beforeSave()\n  public static hashPassword(user: User) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Post-processing Responses in AdonisJS Middleware\nDESCRIPTION: Demonstrates how to use lazy response evaluation in AdonisJS to post-process a response in middleware, converting camelCase keys to snake_case.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport snakeCaseKeys from 'snakecase-keys'\n\nRoute\n  .get('/', async ({ response }) => {\n    response.send({ fullName: 'Harminder Virk' })\n  })\n  .middleware(async ({ response }, next) => {\n    await next()\n\n    /**\n     * Following code is executed after the route handler.\n     * Read the middleware guide to learn how it works\n     */\n    const existingBody = response.lazyBody[0]\n    if (!existingBody || existingBody.constructor !== Object) {\n      return\n    }\n\n    response.send(snakeCaseKeys(existingBody))\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Vary Header\nDESCRIPTION: Examples of setting the HTTP vary header for response using single or multiple values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.vary('Origin')\n\n// Set multiple headers\nresponse.vary('Accept, User-Agent')\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Type OIDs\nDESCRIPTION: SQL query to retrieve OID values for PostgreSQL data types. This query selects the type name, OID, and type array from the pg_type system catalog table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-postgres-custom-type-parsers.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect typname, oid, typarray from pg_type order by oid\n```\n\n----------------------------------------\n\nTITLE: Extending InsertQueryBuilder with Custom Macros\nDESCRIPTION: Shows how to extend the InsertQueryBuilder by adding a custom method using macros.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  InsertQueryBuilder\n} = this.app.container.use('Adonis/Lucid/Database')\n\nInsertQueryBuilder.macro('customMethod', async function () {\n  // implementation\n})\n```\n\n----------------------------------------\n\nTITLE: Making Path to Resources Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the resources directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.resourcesPath('scripts/app.js')\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Commands\nDESCRIPTION: JSON configuration to register mail package commands in .adonisrc.json file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\n    \"@adonisjs/mail/build/commands\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Title Case in Edge Templates\nDESCRIPTION: Converts a sentence to title case where the first letter of each word is capitalized except for certain minor words.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n{{ titleCase('Here is a fox') }}\n\n<!-- Output: Here Is a fox -->\n```\n\n----------------------------------------\n\nTITLE: Filtering by Relationship Existence with has Method\nDESCRIPTION: Demonstrates using the has method to filter parent models based on the existence of related models, with options for custom counts and variants like orHas, doesntHave, etc.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().has('posts')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().has('posts', '>=', 2)\n```\n\n----------------------------------------\n\nTITLE: Implementing serializedName Method\nDESCRIPTION: Implementation of the serializedName method for JSON serialization of model properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public serializedName(_model: typeof BaseModel, propertyName: string) {\n    return string.snakeCase(propertyName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Macros to HTTP Context in AdonisJS\nDESCRIPTION: Demonstrates how to add custom macros to the HTTP context, which can be both properties and methods, providing flexibility in extending context functionality.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/context.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nHttpContext.macro('getLocation', function location() {\n  return geoip.lookup(this.request.ip())\n})\n\n// Access it as\nctx.getLocation()\n\n// Or attach a literal value\nHttpContext.macro('pid', process.pid)\n\n// Access it as\nctx.pid\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Resource Routes in AdonisJS\nDESCRIPTION: Demonstrates how to apply middleware to all or specific actions of a resource route in AdonisJS. It shows examples of applying middleware globally and to selected actions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.resource('users', 'UsersController').middleware({\n  '*': ['auth'],\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.resource('users', 'UsersController').middleware({\n  create: ['auth'],\n  store: ['auth'],\n  destroy: ['auth'],\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Pug Template Syntax\nDESCRIPTION: Example showing how Pug's template syntax differs from Edge's more HTML-like approach.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: pug\nCODE:\n```\nh1= title\np Written with love by #{author}\np This will be safe: #{theGreat}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status in AdonisJS\nDESCRIPTION: Demonstrates how to set HTTP response status codes in AdonisJS using both standard and safe methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.status(401)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.safeStatus(401)\n```\n\n----------------------------------------\n\nTITLE: Context-Based View Rendering in Route Handler\nDESCRIPTION: Shows how to use ctx.view for request-specific template rendering within a route handler\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ view }) => {\n  const html = await view.render('welcome', {\n    greeting: 'Hello'\n  })\n  \n  return html\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Variables for Social Providers\nDESCRIPTION: Example of validating environment variables required for social authentication providers, specifically for Google.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default Env.rules({\n  // Other validation rules\n  GOOGLE_CLIENT_ID: Env.schema.string(),\n  GOOGLE_CLIENT_SECRET: Env.schema.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Stage for AdonisJS Docker Image\nDESCRIPTION: The first stage of a multi-stage Dockerfile that sets up the base layer for an AdonisJS application. It uses Alpine Node.js image, installs dumb-init for proper process signal handling, and sets up the working directory with proper permissions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG NODE_IMAGE=node:16.13.1-alpine\n\nFROM $NODE_IMAGE AS base\nRUN apk --no-cache add dumb-init\nRUN mkdir -p /home/node/app && chown node:node /home/node/app\nWORKDIR /home/node/app\nUSER node\nRUN mkdir tmp\n```\n\n----------------------------------------\n\nTITLE: Accessing and Moving Uploaded Files in AdonisJS\nDESCRIPTION: This snippet demonstrates how to access an uploaded file using the request.file method and move it to a temporary uploads directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/file-uploads.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Application from '@ioc:Adonis/Core/Application'\n\nRoute.post('posts', async ({ request }) => {\n  const coverImage = request.file('cover_image')\n\n  if (coverImage) {\n    await coverImage.move(Application.tmpPath('uploads'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Properties to Serialized Output in TypeScript\nDESCRIPTION: Shows how to add computed properties to the serialized output using the @computed decorator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { BaseModel, column, computed } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column()\n  public body: string\n\n  // highlight-start\n  @computed()\n  public get excerpt() {\n    return string.truncate(this.body, 50)\n  }\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Hash ReHash Check - TypeScript\nDESCRIPTION: Example of checking if a hash needs to be rehashed due to work factor changes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (Hash.needsReHash(user.password)) {\n  user.password = await Hash.make(plainPassword)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing BelongsTo Relationship Properties\nDESCRIPTION: Demonstrates how to access relationship properties using the $getRelation method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/belongs-to.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPost.$getRelation('author').relationName\nPost.$getRelation('author').type\nPost.$getRelation('author').relatedModel()\n```\n\n----------------------------------------\n\nTITLE: Disk References in Edge Templates\nDESCRIPTION: Shows how to reference disk-specific partials and components in Edge templates\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@include('material::header')\n\n@component('material::button')\n@end\n```\n\n----------------------------------------\n\nTITLE: Advanced column Decorator Usage with Custom Transformations\nDESCRIPTION: Shows how to use the column decorator with optional properties like prepare and consume for value transformation, and serializeAs for controlling serialization behavior.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Encryption from '@ioc:Adonis/Core/Encryption'\nimport { column, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @column({\n    prepare: (value: string) => Encryption.encrypt(value),\n    consume: (value: string) => Encryption.decrypt(value),\n  })\n  public email: string\n\n  @column({\n    serializeAs: null\n  })\n  public password: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helpers Module via Application in AdonisJS\nDESCRIPTION: How to access the helpers module through the Application instance to use utility functions like string transformations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.helpers.string.snakeCase('helloWorld')\n```\n\n----------------------------------------\n\nTITLE: Authorizing Different Users in Edge Templates\nDESCRIPTION: Demonstrates how to create authorization checks for users other than the currently logged-in user. This example creates a child bouncer instance for an admin user to check their permissions instead.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/can.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@can('PostPolicy.edit', bouncer.forUser(admin), post)\n@end\n```\n\n----------------------------------------\n\nTITLE: Custom Hash Driver Implementation - TypeScript\nDESCRIPTION: Example implementation of a custom plain text hash driver.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HashDriverContract } from '@ioc:Adonis/Core/Hash'\n\nexport class PlainTextDriver implements HashDriverContract {\n  public async make(value: string) {\n    return value\n  }\n\n  public async verify(hashedValue: string, plainValue: string) {\n    return hashedValue === plainValue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Array Validation with Number Elements\nDESCRIPTION: Validates an array property containing number elements using the schema.array() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  tags: schema.array().members(schema.number())\n}\n\n// Valid data: [1, 3, 8, 11, 22]\n```\n\n----------------------------------------\n\nTITLE: Using the Custom getCount Method\nDESCRIPTION: Demonstrates how to use the custom 'getCount' method that was added to the Database query builder to count users.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.query().from('users').getCount()\n```\n\n----------------------------------------\n\nTITLE: Dropping Table Indexes\nDESCRIPTION: Removes an existing index from table columns with optional index name specification.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('users', (table) => {\n  table.dropIndex(['first_name', 'last_name'], 'user_name_index')\n})\n```\n\n----------------------------------------\n\nTITLE: Route URL Generation Examples in TypeScript\nDESCRIPTION: Updated syntax for Route.makeUrl() method with various parameter combinations and domain specifications.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.makeUrl('PostsController.show', { id: 1 })\nRoute.makeUrl('PostsController.show', {\n  id: 1,\n  qs: { published: true }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.makeUrl(\n  '/posts/:id',\n  { id: 1 },\n  { qs: { published: true } }\n)\n```\n\n----------------------------------------\n\nTITLE: Truncating a Database Table in TypeScript with AdonisJS\nDESCRIPTION: The truncate method provides a shortcut to clear all records from a database table. It can optionally cascade foreign key references and use a custom database connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.truncate()\n\n// cascade\nawait User.truncate(true)\n\n// custom connection\nawait User.truncate(true, {\n  connection: 'pg',\n})\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Configuration file setup for Redis connections and default settings\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redisConfig } from '@adonisjs/redis/build/config'\n\nexport default redisConfig({\n  connection: Env.get('REDIS_CONNECTION'),\n\n  connections: {\n    local: {\n      host: Env.get('REDIS_HOST'),\n      port: Env.get('REDIS_PORT'),\n      password: Env.get('REDIS_PASSWORD', ''),\n      db: 0,\n      keyPrefix: '',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Props Serialization in Edge Component\nDESCRIPTION: Demonstrates using $props helper to serialize attributes except specific ones.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<button {{ $props.serializeExcept(['text']) }}>{{ text }}</button>\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component('button', {\n  text: 'Login',\n  type: 'submit',\n  class: 'py-2 px-8 text-white bg-gray-800',\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Files with AdonisJS Drive in TypeScript\nDESCRIPTION: Demonstrates how to read file contents using the 'get' method of AdonisJS Drive, including converting to string with custom encoding.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\n\nconst contents = await Drive.get('filePath')\ncontents.toString()\n\n// Custom encoding\ncontents.toString('ascii')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator Messages in TypeScript with AdonisJS I18n\nDESCRIPTION: Shows how to reference custom validator messages in a TypeScript validator class using AdonisJS I18n.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class ContactValidator {\n  constructor(protected ctx: HttpContextContract) {}\n\n  public schema = schema.create({})\n\n  public messages = this.ctx.i18n.validatorMessages('validator.contact')\n}\n```\n\n----------------------------------------\n\nTITLE: Applying minLength Rule to Arrays in AdonisJS\nDESCRIPTION: Enforces a minimum length of 1 item for a tags array. The validation will fail if the array is empty. The example also defines the array members as strings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/min-length.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema\n    .array([\n      rules.minLength(1)\n    ])\n    .members(schema.string())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Seeder File with Ace CLI in AdonisJS\nDESCRIPTION: This command creates a new seeder file named User in the database/seeders directory using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:seeder User\n\n# CREATE: database/seeders/User.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Ace Commands Manifest in AdonisJS\nDESCRIPTION: Command to update the ace commands index after updating packages in an AdonisJS project.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace generate:manifest\n```\n\n----------------------------------------\n\nTITLE: Dialect-Specific Querying with 'ifDialect' in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'ifDialect' helper to add constraints to the query builder for specific database dialects.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .query()\n  .ifDialect('postgres', (query) => {\n      query.whereJson('address', { city: 'XYZ', pincode: '110001' })\n    }, \n  )\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .ifDialect('postgres',\n    (query) => {}, // if dialect is postgres\n    (query) => {}, // otherwise execute this\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating and Persisting a Model Instance\nDESCRIPTION: Demonstrates finding an existing row or creating and persisting a new model instance to the database. Similar to firstOrNew but also performs database insertion.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.firstOrCreate(searchCriteria, savePayload)\n\nif (user.$isLocal) {\n  // no rows found in db. Hence a new one is created\n} else {\n  // existing db row\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Properties in Serialized Output in TypeScript\nDESCRIPTION: Demonstrates how to rename properties in the serialized output using the serializeAs option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  // highlight-start\n  @column({ serializeAs: 'content' })\n  public body: string\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Reporter Data to AdonisJS Database Query (TypeScript)\nDESCRIPTION: Illustrates how to add additional data to the query reporter, which can be accessed in the 'db:query' event.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = Database.from('users')\n\nawait query\n  .reporterData({ userId: auth.user.id })\n  .select('*')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.on('db:query', (query) => {\n  console.log(query.userId)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing afterFetch hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This snippet shows how to use the @afterFetch decorator to register a function that processes markdown content for multiple posts after fetching them from the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { afterFetch, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass Post extends BaseModel {\n  @afterFetch()\n  public static async processMarkdown(posts: Post[]) {\n    await Promise.all(posts.map((post) => {\n      return markdownIt(post.body)\n    }))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Access Token in AdonisJS Ally (TypeScript)\nDESCRIPTION: Shows how to fetch the OAuth access token by exchanging the post-redirect code with the OAuth provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await ally.use('github').accessToken()\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Edge Template for AdonisJS\nDESCRIPTION: Edge template syntax for accessing and displaying validation errors using flash messages in AdonisJS applications.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ flashMessages.get('errors.title') }}\n{{ flashMessages.get('errors.body') }}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Schemas in AdonisJS\nDESCRIPTION: Shows how to create a PostgreSQL schema using the createSchema method. This method accepts the schema name as its only parameter.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass FoundationSchema extends BaseSchema {\n  public up() {\n    this.schema.createSchema('public')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Input Field in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to read a single input field value, including nested values using dot notation, and providing default values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.input('title')\n\n// Read nested value.\nrequest.input('user.profile.username')\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Email using TypeScript\nDESCRIPTION: Demonstrates how to embed images in emails using the message.embed method with file paths and unique IDs.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Mail.sendLater((message) => {\n  message.embed(\n    Application.publicPath('receipt.png'),\n    'a-unique-id-for-the-attachment',\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Listener Class Method to Event\nDESCRIPTION: This snippet demonstrates how to bind a listener class method to an event in the start/events.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.on('new:user', 'User.onNewUser')\n```\n\n----------------------------------------\n\nTITLE: Array Length Validation\nDESCRIPTION: Validates array length using minLength and maxLength rules, ensuring the array contains between 1 and 5 elements.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema\n    .array([\n      rules.minLength(1),\n      rules.maxLength(5)\n    ])\n    .members(schema.number()),  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Driver for Sessions\nDESCRIPTION: Configuration for the file-based session driver, which specifies where session data is stored on the filesystem.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  file: {\n    location: Application.tmp('sessions'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Rollback Events in AdonisJS\nDESCRIPTION: Shows how to listen for transaction rollback events using the once() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntrx.once('rollback', (self) => {\n  console.log(self)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring AdonisJS Bouncer\nDESCRIPTION: Steps to install the @adonisjs/bouncer package and configure it in an AdonisJS project. This includes installing the package and running the configuration command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/bouncer@2.3.0\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/bouncer\n\n# CREATE: start/bouncer.ts\n# CREATE: contracts/bouncer.ts\n# UPDATE: tsconfig.json { types += \"@adonisjs/bouncer\" }\n# UPDATE: .adonisrc.json { commands += \"@adonisjs/bouncer/build/commands\" }\n# UPDATE: .adonisrc.json { providers += \"@adonisjs/bouncer\" }\n# UPDATE: .adonisrc.json { preloads += \"./start/bouncer\" }\n# CREATE: ace-manifest.json file\n```\n\n----------------------------------------\n\nTITLE: Flash Messages Route Handler in TypeScript\nDESCRIPTION: Example of accessing flash messages within a route handler using session object\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ session }) => {\n  // Get value for a given key\n  session.flashMessages.get('errors.title')\n\n  // With optional default value\n  session.flashMessages.get('title', '')\n\n  // Find if a key exists\n  session.flashMessages.has('errors.title')\n\n  // Get all\n  session.flashMessages.all()\n\n  // Find if store is empty\n  session.flashMessages.isEmpty\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Scripts Section in Edge Template\nDESCRIPTION: Example of completely overriding the scripts section in a parent template\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/layouts.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@section('scripts')\n  <script src=\"./vendor.js\"></script>\n  <script src=\"./admin.js\"></script>\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating Model Instances from Database Results in TypeScript with AdonisJS\nDESCRIPTION: The $createFromAdapterResult static method creates model instances from database results, handling column name differences between the database and model properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column({ columnName: 'full_name' })\n  public fullName: string\n}\n\nconst user = User.$createFromAdapterResult({\n  id: 1,\n  full_name: 'Harminder Virk',\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing a Model with computed Properties\nDESCRIPTION: Shows how the computed decorator affects model serialization by including computed properties in the serialized object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = 'Harminder'\nuser.lastName = 'Virk'\n\nconsole.log(user.serialize())\n/**\n  {\n    firstName: 'Harminder',\n    lastName: 'Virk',\n    fullName: 'Harminder Virk'\n  }\n*/\n```\n\n----------------------------------------\n\nTITLE: In-Memory Template Registration\nDESCRIPTION: Demonstrates registering templates in memory without disk files\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport View from '@ioc:Adonis/Core/View'\n\nView.registerTemplate('uikit/button', {\n  template: `\n    <button {{ $props.serializeExcept(['title']) }}>\n      {{ title }}\n    </button>\n  `,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Health Checker Implementation\nDESCRIPTION: Example of implementing a custom health checker in a service provider's boot method, demonstrating how to add custom health check logic to the application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/health-check.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const HealthCheck = this.app.container.use('Adonis/Core/HealthCheck')\n\n    HealthCheck.addChecker('my-checker', async () => {\n      return {\n        displayName: 'Checker Name',\n        health: {\n          healthy: true,\n          message: 'Everything works fine'\n        },\n        meta: {},\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom IP Address Retrieval in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to implement a custom method for retrieving the client's IP address, particularly useful when the application is behind a proxy server.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nhttp: {\n  getIp(request) {\n    const nginxRealIp = request.header('X-Real-Ip')\n    if (nginxRealIp) {\n      return nginxRealIp\n    }\n\n    return request.ips()[0]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Scope with withScopes Method\nDESCRIPTION: Shows how to apply a defined query scope using the withScopes method in a query chain.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/query-scopes.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPost\n  .query()\n  .withScopes((scopes) => scopes.published())\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Level with Managed Transaction\nDESCRIPTION: Demonstrates how to set an isolation level when using a managed transaction. The isolation level 'read committed' ensures that only committed data is read by the transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.transaction(async (trx) => {\n  // use trx here\n}, {\n  isolationLevel: 'read committed'\n})\n```\n\n----------------------------------------\n\nTITLE: Session Freshness Check in TypeScript\nDESCRIPTION: Demonstrates how to check if a session is fresh and regenerate if needed\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nif (!session.fresh) {\n  session.regenerate()\n}\n```\n\n----------------------------------------\n\nTITLE: Complex If-Elseif-Else Conditional in Edge Template\nDESCRIPTION: Shows how to use if, elseif, and else statements in an Edge template to handle multiple conditions for user greeting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/conditionals.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@if(user.fullName)\n  <p> Hello {{ user.fullName }}! </p>\n@elseif(user.firstName)\n  <p> Hello {{ user.firstName }}! </p>\n@else\n  <p> Hello Guest! </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Retrieving Readable Stream in TypeScript\nDESCRIPTION: Demonstrates how to get a readable stream for a file using the Drive.getStream method and stream it in the response.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst readableStream = await Drive.getStream('filePath')\nresponse.stream(readableStream)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Column Names with whereRaw in AdonisJS\nDESCRIPTION: Shows how to dynamically specify column names in a whereRaw query using the ?? placeholder. This allows for flexible queries where both column names and values are parameterized.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereRaw('?? = ?', ['users.username', username])\n```\n\n----------------------------------------\n\nTITLE: Using onNotBetween Method with Joins in AdonisJS\nDESCRIPTION: Demonstrates how to use the onNotBetween method to filter join results where a column value is outside a specified range. This creates a NOT BETWEEN condition in the join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onNotBetween('user_logins.login_date', ['2020-10-01', '2020-12-31'])\n  })\n```\n\n----------------------------------------\n\nTITLE: Accessing Application and Framework Versions\nDESCRIPTION: This code demonstrates how to access both the application version (from package.json) and the AdonisJS framework version installed in the project.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Application from '@ioc:Adonis/Core/Application'\n\nconsole.log(Application.version!.toString())\nconsole.log(Application.adonisVersion!.toString())\n```\n\n----------------------------------------\n\nTITLE: Rendering Users with Async Posts in TypeScript\nDESCRIPTION: This snippet shows how to pass an array of user objects with async post functions to an Edge template for rendering.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nview.render('users', {\n  users: [\n    {\n      username: 'virk',\n      posts: async () => [{ title: 'Adonis 101' }],\n    },\n    {\n      username: 'romain',\n      posts: async () => [{ title: 'Flydrive 101' }],\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Running AdonisJS server with debugging enabled\nDESCRIPTION: Command to run the AdonisJS server with the '--inspect' flag, enabling debugging capabilities for use with Chrome DevTools.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/debugging.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --watch --node-args=\"--inspect\"\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to dot.case in Edge Templates\nDESCRIPTION: Converts a string to its dot.case version where words are lowercase and separated by dots.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n{{ dotCase('hello-world') }}\n\n<!-- Output: hello.world -->\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncLocalStorage in AdonisJS\nDESCRIPTION: Configuration setting in the app.ts file to enable AsyncLocalStorage functionality in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/app.ts\nexport const http: ServerConfig = {\n  useAsyncLocalStorage: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa to Run a Single Test File in AdonisJS v5\nDESCRIPTION: This code modifies the japaFile.ts to allow running a single test file by specifying the file path when running the tests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTestFiles() {\n  let userDefined = process.argv.slice(2)[0]\n  if (!userDefined) {\n    return 'test/**/*.spec.ts'\n  }\n\n  return `${userDefined.replace(/\\.ts$|\\.js$/, '')}.ts`\n}\n\nconfigure({\n  files: getTestFiles(),\n  before: [runMigrations, startHttpServer],\n  after: [rollbackMigrations],\n})\n```\n\n----------------------------------------\n\nTITLE: Existence Validation with Array Constraints\nDESCRIPTION: Implementation of existence validation using array values in where conditions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrules.exists({\n  table: 'categories',\n  column: 'slug',\n  where: {\n    group_id: [1, 2, 4],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Flag in Ace Command\nDESCRIPTION: Example showing how to define a boolean flag in an Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n@flags.boolean()\npublic interactive: boolean\n```\n\n----------------------------------------\n\nTITLE: File Attachments in AdonisJS\nDESCRIPTION: Shows how to use the attachment method to customize file downloads with specified filenames and content disposition.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = Application.tmpPath('uploads/some-file.jpg')\nresponse.attachment(filePath)\n\n// define custom name\nresponse.attachment(filePath, 'foo.jpg')\n\n// define custom disposition\nresponse.attachment(filePath, 'foo.jpg', 'inline')\n```\n\n----------------------------------------\n\nTITLE: Using Authorization in AdonisJS Edge Templates\nDESCRIPTION: These snippets demonstrate how to use @can and @cannot tags in Edge templates to conditionally render content based on user permissions, including policy-specific checks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\n@can('editPost', post)\n  <a href=\"{{ route('posts.edit', [post.id]) }}\"> Edit </a>\n@end\n\n@can('deletePost', post)\n  <a href=\"{{ route('posts.delete', [post.id]) }}\"> Delete </a>\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n@can('PostPolicy.edit', post)\n  <a href=\"{{ route('posts.edit', [post.id]) }}\"> Edit </a>\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n@cannot('PostPolicy.edit')\n  <!-- Markup -->\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n@can('PostPolicy.edit', bouncer.forUser(admin), post)\n@end\n```\n\n----------------------------------------\n\nTITLE: Capitalizing Strings in Edge Templates\nDESCRIPTION: Capitalizes a string by making the first letter of each word uppercase and adding spaces between words.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{{ capitalCase('helloWorld') }}\n\n<!-- Output: Hello World -->\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dropping PostgreSQL Schemas in AdonisJS\nDESCRIPTION: Shows how to conditionally drop a PostgreSQL schema if it exists using the dropSchemaIfExists method, providing a safer approach when the schema might not exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass FoundationSchema extends BaseSchema {\n  public down() {\n    this.schema.dropSchemaIfExists('public')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an After Hook in Lucid Model\nDESCRIPTION: Shows how to define an 'after' hook for a specific event in a Lucid model. After hooks execute code following certain model operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npublic static boot () {\n  if (this.booted) {\n    return\n  }\n\n  super.boot()\n  this.after('create', (user) => {\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Calendar Event Attachment in Email\nDESCRIPTION: Demonstrates attaching calendar events (.ics files) to emails using various methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmessage.icalEvent(eventContent, {\n  method: 'PUBLISH',\n  filename: 'invite.ics',\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\n\nmessage.icalEvent((calendar) => {\n  calendar\n    .createEvent({\n      summary: 'Adding support for ALS',\n      start: DateTime.local().plus({ minutes: 30 }),\n      end: DateTime.local().plus({ minutes: 60 }),\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Relationship in Profile Model\nDESCRIPTION: Defines a BelongsTo relationship between Profile and User models using the @belongsTo decorator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport {\n  column,\n  BaseModel,\n  belongsTo,\n  BelongsTo\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Profile extends BaseModel {\n  @column()\n  public userId: number\n\n  @belongsTo(() => User)\n  public user: BelongsTo<typeof User>\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Compiled Assets with asset Helper in Edge\nDESCRIPTION: Demonstrates how to reference compiled frontend assets using the asset helper which looks up paths in the manifest.json file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<script src=\"{{ asset('assets/app.js') }}\"></script>\n\n<link\n  rel=\"stylesheet\"\n  type=\"text/css\"\n  href=\"{{ asset('assets/app.css') }}\"\n> \n```\n\n----------------------------------------\n\nTITLE: Applying Constraints to Relationship Count\nDESCRIPTION: Shows how to add constraints to the relationship count query using a callback function with the withCount method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  .withCount('comments', (query) => {\n    query.where('isApproved', true)\n  })\n```\n\n----------------------------------------\n\nTITLE: Checking Login Status in AdonisJS API Authentication (TypeScript)\nDESCRIPTION: These snippets show how to check if a user is logged in using the isLoggedIn property after successful authentication or login attempts.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').authenticate()\nauth.use('api').isLoggedIn // true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').attempt(email, password)\nauth.use('api').isLoggedIn // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module for MongoDB Provider\nDESCRIPTION: This snippet updates the auth configuration file to use the newly created MongoDB auth provider. It sets the provider driver to 'mongo' in the web guard configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/custom-user-provider.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/auth.ts\nconst authConfig: AuthConfig = {\n  guard: 'web',\n  guards: {\n    web: {\n      driver: 'session',\n\n      // highlight-start\n      provider: {\n        driver: 'mongo'\n      }\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Encryption Module in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to import and use the Encryption module to encrypt a simple string value. The encryption is based on the aes-256-cbc algorithm and uses the appKey from config/app.ts as the secret.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/encryption.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Encryption from '@ioc:Adonis/Core/Encryption'\n\nconst encrypted = Encryption.encrypt('hello-world')\n```\n\n----------------------------------------\n\nTITLE: Command Logger Implementation\nDESCRIPTION: Example showing various logging methods available in AdonisJS commands including info, warning, error, and success messages.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n  public static description = 'Greet a person by their name'\n\n  public async run () {\n    this.logger.info('This is an info message')\n    this.logger.warning('Running out of disk space')\n    this.logger.error(new Error('Unable to write. Disk full'))\n    this.logger.fatal(new Error('Unable to write. Disk full'))\n    this.logger.debug('Something just happened')\n    this.logger.success('Account created')\n    this.logger.info('Message with time prefix', '%time%')\n\n    const spinner = this.logger.await(\n      'installing dependencies'\n      undefined,\n      'npm install --production'\n    )\n\n    // perform some task\n    spinner.stop()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Disconnect Event in AdonisJS\nDESCRIPTION: Shows how to listen for the 'disconnect' event emitted when the connection and Knex instance(s) have been destroyed.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.on('disconnect', (self) => {\n  console.log(self)\n})\n```\n\n----------------------------------------\n\nTITLE: Hydrating Foreign Key Values for Persistence\nDESCRIPTION: Shows how to use hydrateForPersistance to set the foreign key value on a related model before persisting it to the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.id = 1\n\nconst profile = new Profile()\nUser.$getRelation('profile').hydrateForPersistance(user, profile)\n\nconsole.log(profile.userId === user.id) // true\n```\n\n----------------------------------------\n\nTITLE: Running the Main Seeder in AdonisJS\nDESCRIPTION: This command runs the main seeder using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnode ace db:seed\n\n# completed database/seeders/MainSeeder/Index\n```\n\n----------------------------------------\n\nTITLE: Using requiredWhen Validation Rule in AdonisJS\nDESCRIPTION: Requires a field when another field's value matches a specified condition. This rule supports various comparison operators like '=', '!=', '>', '<', '>=', '<=', 'in', and 'notIn' to create complex validation requirements.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/required-if-rules.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  address: schema.string.optional([\n    rules.requiredWhen('delivery_method', '=', 'shipping')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous View Rendering Example\nDESCRIPTION: Shows recommended asynchronous template rendering approach\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait view.render('user', {\n  getUser: async () => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Running AdonisJS Production Build\nDESCRIPTION: Commands to navigate to the build directory and start the AdonisJS application in production.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/typescript-build-process.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd build\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Handling Disconnect Error Event in AdonisJS\nDESCRIPTION: Demonstrates how to handle the 'disconnect:error' event emitted when unable to disconnect or destroy Knex instance(s).\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.on('disconnect:error', (error, self) => {\n  console.log(error)\n})\n```\n\n----------------------------------------\n\nTITLE: Applying maxLength Rule to Array Schema in AdonisJS\nDESCRIPTION: This example shows how to apply the maxLength validation rule to an array schema, limiting the array to a maximum of 10 items. Each array member is defined as a string.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/max-length.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema\n    .array([\n      rules.maxLength(10)\n    ])\n    .members(schema.string())\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Messages for maxLength Rule in AdonisJS\nDESCRIPTION: This example demonstrates how to create a custom error message for the maxLength validation rule. The message can access the rule's options using the {{ options.maxLength }} syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/max-length.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'maxLength': 'The array can contain maximum of {{ options.maxLength }} items',\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Edge Expressions with Curly Braces\nDESCRIPTION: Examples of using double curly braces for evaluating JavaScript expressions in Edge templates, including simple variables, method calls, and arithmetic operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ user.username }}\n{{ user.username.toUpperCase() }}\n{{ (2 + 2) * 3 }}\n{{ (await getUser()).username }}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Session Package\nDESCRIPTION: Command to configure the session package in an AdonisJS application, which creates necessary files and updates configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/session\n\n# CREATE:  config/session.ts\n# UPDATE: .env { \"SESSION_DRIVER = cookie\" }\n# UPDATE: .adonisrc.json { providers += \"@adonisjs/session\" }\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Configuration for Lazy Model Import in AdonisJS\nDESCRIPTION: TypeScript code showing how to update the config/auth.ts file to use lazy importing for the User model in AdonisJS authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprovider: {\ndriver: 'lucid',\n// highlight-start\nmodel: () => import('App/Models/User')\n// highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Field with csrfField Helper in Edge\nDESCRIPTION: Shows how to add a hidden input element with the CSRF token in a form using the csrfField helper from @adonisjs/shield.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n<form method=\"POST\" action=\"posts\">\n  {{ csrfField() }}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates\nDESCRIPTION: Using Intl.DateTimeFormat to format dates\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n\n  .locale('en')\n  .formatDate(new Date(), {\n    dateStyle: 'long'\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring File Options with addFile in AdonisJS Generator\nDESCRIPTION: Shows how to use the addFile method with various configuration options to control the file naming, extension, pluralization, and formatting during file generation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nthis.generator.addFile(\n  'UserController',\n  {\n    // force filename to be plural\n    form: 'plural',\n\n    // define \".ts\" extension when not already defined\n    extname: '.ts',\n\n    // re-format the name to \"camelCase\"\n    pattern: 'camelcase',\n\n    // add \"Controller\" suffix, when not already defined\n    suffix: 'Controller',\n\n    // Do not pluralize when controller name matches one of the following\n    formIgnoreList: ['Home', 'Auth', 'Login']\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Renaming and Dropping Tables in AdonisJS Migration\nDESCRIPTION: Shows how to rename an existing table and drop a table using schema.renameTable and schema.dropTable methods respectively in AdonisJS migrations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class extends BaseSchema {\n  public up() {\n    this.schema.renameTable('user', 'app_users')\n  }\n\n  public down() {\n    this.schema.dropTable('users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using schema.enumSet for Multiple Value Selection in AdonisJS\nDESCRIPTION: Demonstrates the enumSet type which allows validating an array containing one or more values from a predefined set. This is useful for multi-select fields like skills selection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  skills: schema.enumSet([\n    'Programming',\n    'Design',\n    'Marketing',\n    'Copy writing',\n  ] as const)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship for Existing Model in Transaction\nDESCRIPTION: Shows how to fetch an existing model within a transaction and create related records. This ensures that fetching the user and creating their profile either both succeed or both fail.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport User from 'App/Models/User'\n\n// highlight-start\nawait Database.transaction(async (trx) => {\n  const user = await User.findOrFail(1, { client: trx })\n\n  /**\n   * The relationship will implicitly reference the \n   * transaction from the user instance\n   */\n  await user.related('profile').create({\n    fullName: 'Harminder Virk',\n    avatar: 'some-url.jpg',\n  })\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Messages for File Schema in AdonisJS\nDESCRIPTION: Customizes error messages for file validation, using option placeholders for size and allowed extensions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/file.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'file.size': 'The file size must be under {{ options.size }}',\n  'file.extname': 'The file must have one of {{ options.extnames }} extension names',\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Array Constraints\nDESCRIPTION: SQL query demonstrating how array constraints are converted to IN clauses.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT slug FROM categories\n  WHERE slug = ?\n  AND group_id IN (?, ?, ?)\n```\n\n----------------------------------------\n\nTITLE: Redis Pattern Pub/Sub Example\nDESCRIPTION: Example of implementing pattern-based pub/sub in Redis\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nRedis.psubscribe('user:*', (event: string, user: string) => {\n  console.log(event, JSON.stringify(user))\n})\n```\n\n----------------------------------------\n\nTITLE: Traditional State Passing without AsyncLocalStorage\nDESCRIPTION: Demonstrates the traditional approach of passing state around as function arguments or class arguments in Node.js applications without using AsyncLocalStorage.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nhttp.createServer((req, res) => {\n  const state = { req, res }\n  await (new ModuleA()).run(state)\n})\n\n// Module A\nclass ModuleA {\n  public async run(state) {\n    await (new ModuleB()).run(state)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Password Hashing - TypeScript\nDESCRIPTION: Example of using Hash.make to hash a password value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Hash from '@ioc:Adonis/Core/Hash'\nconst hashedPassword = await Hash.make(user.password)\n```\n\n----------------------------------------\n\nTITLE: Basic URL Validation in AdonisJS\nDESCRIPTION: Basic implementation of URL validation using AdonisJS schema and rules. Validates if a string is formatted as a valid URL.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/url.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  website: schema.string([\n    rules.url()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Existing Related Model with HasOne Query Client\nDESCRIPTION: Demonstrates how to persist an existing instance of a related model using the related('profile').save() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst profile = new Profile()\nprofile.email = 'virk@adonisjs.com'\nprofile.avatarUrl = 'foo.jpg'\n\nconst profile = await user\n  .related('profile')\n  .save(profile)\n```\n\n----------------------------------------\n\nTITLE: Using Knex.js Query Builder\nDESCRIPTION: Shows how to access the underlying Knex.js query builder for more advanced query construction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclient.knexQuery().select('*')\n```\n\n----------------------------------------\n\nTITLE: Using onQuery Hook to Modify HasMany Relationship Queries\nDESCRIPTION: Demonstrates how to use the onQuery hook to customize the relationship queries, such as filtering results or preloading nested relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasMany(() => Post, {\n    onQuery(query) {\n      query.where('isPublished', true)\n    }\n  })\n  public posts: HasMany<typeof Post>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasMany(() => Post, {\n    onQuery(query) {\n      // highlight-start\n      if (!query.isRelatedSubQuery) {\n        query.preload('comments')\n      }\n      // highlight-end\n    }\n  })\n  public posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Registering BodyParser Middleware in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to register the BodyParser middleware in the kernel.ts file to enable request body parsing functionality.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/kernel.ts\nServer.middleware.register([\n  () => import('@ioc:Adonis/Core/BodyParser')\n])\n```\n\n----------------------------------------\n\nTITLE: Applying FOR UPDATE Lock in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the forUpdate method to acquire an update lock on selected rows in PostgreSQL and MySQL. This is typically used within a transaction to prevent concurrent modifications.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = Database\n  .from('users')\n  .where('id', 1)\n  .useTransaction(trx)\n  .forUpdate() // 👈\n  .first()\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level\nDESCRIPTION: Configures the isolation level for a transaction, which determines how the transaction's changes are visible to other database operations. This example sets the isolation level to 'read uncommitted'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.transaction({\n  isolationLevel: 'read uncommitted'\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Lookup Logic in Model\nDESCRIPTION: Implementation of custom lookup logic for a model. This overrides the default behavior to query only published posts.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nclass Post extends BaseModel {\n  public static findForRequest(ctx, param, value) {\n    const lookupKey = param.lookupKey === '$primaryKey' ? 'id' : param.lookupKey\n\n    return this\n      .query()\n      .where(lookupKey, value)\n      .whereNotNull('publishedAt')\n      .firstOrFail()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with forPage in AdonisJS\nDESCRIPTION: The forPage method is a convenient way to apply offset and limit using page numbers. It calculates the correct offset based on the page number and number of rows per page.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('posts')\n  .forPage(request.input('page', 1), 20)\n```\n\n----------------------------------------\n\nTITLE: Managing Column Nullability\nDESCRIPTION: Methods for setting and dropping nullable constraints on columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.setNullable('full_name')\n})\n\nthis.schema.alterTable('posts', (table) => {\n  table.dropNullable('full_name')\n})\n```\n\n----------------------------------------\n\nTITLE: Redis Pub/Sub Implementation\nDESCRIPTION: Implementation of Redis pub/sub functionality in AdonisJS\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// start/redis.ts\nimport Redis from '@ioc:Adonis/Addons/Redis'\n\nRedis.subscribe('user:signup', (user: string) => {\n  console.log(JSON.parse(user))\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// start/routes.ts\nimport Route from '@ioc:Adonis/Core/Route'\nimport Redis from '@ioc:Adonis/Addons/Redis'\n\nRoute.get('/signup', async () => {\n  await Redis.publish('user:signup', JSON.stringify({ id: 1 }))\n\n  return 'handled'\n})\n```\n\n----------------------------------------\n\nTITLE: Handling CSRF Tokens in AdonisJS API Tests\nDESCRIPTION: Shows how to include CSRF tokens in API test requests using the withCsrfToken method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nawait client.post('/comments').withCsrfToken()\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Builder in AdonisJS Migrations\nDESCRIPTION: Shows how to access the schema builder instance in an AdonisJS migration file. The schema property is available on the BaseSchema class which migration classes extend.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nclass UserSchema extends BaseSchema {\n  public up() {\n    console.log(this.schema)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stickers in AdonisJS CLI Commands\nDESCRIPTION: Demonstrates how to create stickers, which are similar to instruction blocks but without the pointer prefix. This is useful for displaying information like server addresses.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ui\n  .sticker()\n  .add('Started HTTP server')\n  .add('')\n  .add(`Local address:    ${this.colors.cyan('http://localhost:3333')}`)\n  .add(`Network address:  ${this.colors.cyan('http://192.168.1.4:3333')}`)\n  .render()\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Properties with @set in Edge\nDESCRIPTION: Shows how to use @set to update nested properties of an object, including an example with an asynchronous function call. It also demonstrates how to use the updated property in an HTML tag.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/mutations.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@set(\n  post,\n  'author.avatar',\n  await getAvatar(post.author.email)\n)\n\n<img src=\"{{ post.author.avatar }}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring BodyParser to Convert Empty Strings to Null in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to configure the BodyParser to convert empty strings to null values for form and multipart submissions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/bodyparser.ts\n{\n  form: {\n    // ... rest of the config\n    convertEmptyStringsToNull: true\n  },\n\n  multipart: {\n    // ... rest of the config\n    convertEmptyStringsToNull: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating IP Addresses in AdonisJS with TypeScript\nDESCRIPTION: This snippet demonstrates how to validate a string as a valid IP address using AdonisJS validation rules. It imports the schema and rules from the Validator module and applies the IP validation rule to a string schema type.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/ip.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  ip: schema.string([\n    rules.ip()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain-Specific Routes in TypeScript\nDESCRIPTION: Shows how to define routes within a specific domain using route groups in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute\n  .group(() => {\n    Route.get('/posts/:id', 'PostsController.show')\n  })\n  .domain(':tenant.adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: Basic File Validation in AdonisJS Validator\nDESCRIPTION: Validates that a property is a valid multipart file with specified size limit and allowed extensions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/file.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  cover_image: schema.file({\n    size: '2mb',\n    extnames: ['jpg', 'gif', 'png'],\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ace Manifest File in AdonisJS\nDESCRIPTION: Shows the command to manually update the ace-manifest.json file, which is a JSON index of all registered commands used to improve performance when loading commands.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nnode ace generate:manifest\n```\n\n----------------------------------------\n\nTITLE: Making Path to Config Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the config directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.configPath('shield.ts')\n```\n\n----------------------------------------\n\nTITLE: Using onQuery Hook with HasOne Relationship\nDESCRIPTION: Demonstrates how to use the onQuery hook to modify relationship queries, adding filtering conditions to the related model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasOne(() => Profile, {\n    onQuery(query) {\n      query.where('visibility', 'public')\n    }\n  })\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag with Default Value\nDESCRIPTION: Example showing how to define a boolean flag with a default value in an Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n@flags.boolean()\npublic interactive: boolean = true\n```\n\n----------------------------------------\n\nTITLE: Making Path to Start Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the start directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.startPath('routes.ts')\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Database Query Builder Method\nDESCRIPTION: Creates a TypeScript declaration file to inform TypeScript about the custom 'getCount' method added to the DatabaseQueryBuilderContract using declaration merging.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: contracts/database.ts\ndeclare module '@ioc:Adonis/Lucid/Database' {\n  interface DatabaseQueryBuilderContract<Result> {\n    getCount(): Promise<BigInt>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Through Local Key in HasManyThrough Relationship\nDESCRIPTION: Demonstrates how to define the 'throughLocalKey' in a HasManyThrough relationship, which is typically the primary key on the through model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User], {\n    throughLocalKey: 'id', // id column on the \"User\" model\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Edge Component with Props\nDESCRIPTION: Shows how to use a component by passing props as key-value pairs.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@!component('button', {\n  text: 'Login',\n  type: 'submit'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mail Driver in AdonisJS\nDESCRIPTION: This snippet shows how to configure the custom PostMark mail driver in the config/mail.ts file of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mailers: {\n    transactionalMailer: {\n      driver: 'postmark',\n      auth: {\n        apiKey: 'your-api-key',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Views Directory Configuration\nDESCRIPTION: JSON configuration for customizing the views directory location.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directories\": {\n    \"views\": \"./app/views\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Layout File Structure\nDESCRIPTION: Basic file structure demonstration for Edge layouts showing the required directory organization\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/layouts.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── views\n│   ├── layouts\n│   │   └── main.edge\n│   └── home.edge\n```\n\n----------------------------------------\n\nTITLE: Reporting Missing Translations with AdonisJS I18n in TypeScript\nDESCRIPTION: Shows how to set up event listening for missing translations using AdonisJS I18n.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nEvent.on('i18n:missing:translation', I18n.prettyPrint)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages for NotIn Validation\nDESCRIPTION: Demonstrates how to customize error messages for notIn validation rule, with access to field name and validation values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/not-in.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'notIn': 'The {{ field }} value cannot be one of {{ options.values }}',\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration with Rule Options\nDESCRIPTION: Extended TypeScript interface declaration to include rule options\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-rules.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Validator' {\n  interface Rules {\n    camelCase(maxLength?: number): Rule\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Limiter Instance in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to access the limiter instance using the Limiter.use method. It shows examples of creating a limiter with default settings and with a specific store.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Limiter } from '@adonisjs/limiters/services'\n\nconst limiter = Limiter.use({\n  request: 10,\n  every: '15 mins',\n})\n\n// Use a specific store\nconst limiter = Limiter.use('db', {\n  request: 10,\n  every: '15 mins',\n})\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Mail Events in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the Mail.prettyPrint method to print outgoing emails on the terminal in a formatted manner.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nimport Mail from '@ioc:Adonis/Addons/Mail'\n\nEvent.on('mail:sent', Mail.prettyPrint)\n```\n\n----------------------------------------\n\nTITLE: Model Attributes Definition with Decorators\nDESCRIPTION: Shows how to define model attributes using @column decorator and accessing them through $attributes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Model {\n  @column({ isPrimary: true })\n  public id: number\n\n  @column()\n  public fullName: string\n\n  @column()\n  public password: string\n\n  public get initials() {\n    const [firstName, lastName] = this.fullName.split(' ')\n\n    if (!lastName) {\n      return firstName.charAt(0).toUpperCase()\n    }\n\n    return `${firstName.charAt(0).toUpperCase()}${lastName.charAt(0).toUpperCase()}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using column Decorator in AdonisJS Models\nDESCRIPTION: Demonstrates how to use the column decorator to mark a model property as a database column.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { column, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  @column()\n  public email: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using onNotIn Method with Joins in AdonisJS\nDESCRIPTION: Demonstrates how to use the onNotIn method to filter join results where a column value is not in a specified list of values. This creates a NOT IN condition in the join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onNotIn('user_logins.country', ['India', 'US', 'UK'])\n  })\n```\n\n----------------------------------------\n\nTITLE: UUIDv4 Specific Validation in AdonisJS TypeScript\nDESCRIPTION: Shows how to validate a string field specifically as a UUID version 4 using AdonisJS validator. The example demonstrates using the version option in the UUID validation rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/uuid.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: schema.string([\n    rules.uuid({ version: 4 })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Usage in Insert Query\nDESCRIPTION: Shows how to use transactions with insert queries\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await Database.transaction()\n\nawait Database\n  .table('users')\n  .useTransaction(trx)\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: await Hash.make('secret'),\n  })\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Retaining Input Values in AdonisJS Form\nDESCRIPTION: Edge template code showing how to retain form input values after validation failure using flash messages in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<div>\n  <p>\n    <label for=\"title\"> Post title </label>\n  </p>\n\n  <input\n    type=\"text\"\n    name=\"title\"\n    value=\"{{ flashMessages.get('title', '') }}\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Related Model Instance with setRelated\nDESCRIPTION: Shows how to manually set a relationship on the parent model instance using the setRelated method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nconst profile = new Profile()\n\nUser.$getRelation('profile').setRelated(user, profile)\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional File Validation in AdonisJS Validator\nDESCRIPTION: Combines both nullable and optional behaviors. The field can be undefined (removed from validated object) or have a value including null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/file.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  cover_image: schema.file.nullableAndOptional({\n    size: '2mb',\n    extnames: ['jpg', 'gif', 'png'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning raw spatial queries directly to Model\nDESCRIPTION: Shows how to assign raw spatial queries directly to a Model property by marking it with the 'any' type, allowing for more direct manipulation of spatial data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  @column()\n  public geom: any // 👈 Make sure the type is any\n}\n\nconst point = new Point()\npoint.geom = Database.st().geomFromText('Point(0 0)', 4326)\nawait point.save()\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Database Table in TypeScript with AdonisJS\nDESCRIPTION: The table static property allows defining a custom database table name for the model, overriding the default naming strategy.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static table = 'my_users'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Contract for MongoDB Provider\nDESCRIPTION: This code snippet updates the auth contract file to include the MongoDB auth provider types. It defines the provider implementation and config in the ProvidersList interface.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/custom-user-provider.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: contracts/auth.ts\nimport type {\n  MongoDbAuthProvider,\n  MongoDbAuthProviderConfig,\n} from '../providers/MongoDbAuthProvider'\n\ndeclare module '@ioc:Adonis/Addons/Auth' {\n  interface ProvidersList {\n    // highlight-start\n    user: {\n      implementation: MongoDbAuthProvider\n      config: MongoDbAuthProviderConfig\n    }\n    // highlight-end\n  }\n\n  interface GuardsList {\n    web: {\n      implementation: SessionGuardContract<'user', 'web'>\n      config: SessionGuardConfig<'user'>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Partial Include in Edge\nDESCRIPTION: Demonstrates conditional inclusion of a partial using @includeIf tag. The partial is only included if the specified condition (first argument) evaluates to true.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/include.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@includeIf(post.comments.length, 'partials/comments')\n```\n\n----------------------------------------\n\nTITLE: Route Helper with URL Prefix in Edge\nDESCRIPTION: Shows how to generate a fully qualified URL by prefixing a URL to the route using the prefixUrl option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{\n  route('PostsController.show', [1], {\n    domain: ':tenant.adonisjs.com',\n    prefixUrl: 'https://news.adonisjs.com'\n  })\n}}\"> View post </a>\n```\n\n----------------------------------------\n\nTITLE: Setting Application Root in AdonisJS Generator\nDESCRIPTION: Shows how to define the root of the application that will be prefixed to the destination directory to create an absolute path for generated files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nfile.appRoot(this.application.appRoot)\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Missing Translation Events\nDESCRIPTION: Helper method to pretty-print payload of i18n:missing:translation events.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nEvent.on('i18n:missing:translation', I18n.prettyPrint)\n```\n\n----------------------------------------\n\nTITLE: Using tap Method in Lucid Model Factory\nDESCRIPTION: Example of using the new tap method in Lucid model factories to modify the model instance before persistence.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nUserFactory\n  .tap((user) => user.isAdmin => true)\n  .create()\n```\n\n----------------------------------------\n\nTITLE: Edge Tag Examples\nDESCRIPTION: Examples of Edge tags for conditional statements and include directives, showing proper tag syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{-- if tag --}}\n@if(user)\n@end\n\n{{-- include tag --}}\n@include('partials/header')\n```\n\n----------------------------------------\n\nTITLE: Checking if Application is Ready in AdonisJS\nDESCRIPTION: How to check if the application is in the ready state, which is used internally to determine if it can accept new HTTP requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.isReady\n```\n\n----------------------------------------\n\nTITLE: Serializing Paginated Results in TypeScript\nDESCRIPTION: Demonstrates how to serialize paginated results using the 'serialize' method on the paginator instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().paginate(1)\nconst paginationJSON = posts.serialize()\n\n/**\n {\n    meta: {},\n    data: []\n }\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks to Task Renderer in AdonisJS CLI\nDESCRIPTION: Demonstrates how to add tasks to the task renderer and handle their completion or failure. Each task can log its progress and must be completed or failed to move to the next task.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntasksManager\n  .add('clone repo', async (logger, task) => {\n    // use the logger to log about the progress\n    await task.complete()\n  })\n  .add('install package', async (logger, task) => {\n    await task.fail(new Error('Cannot install packages'))\n  })\n```\n\n----------------------------------------\n\nTITLE: Generating Commands Manifest\nDESCRIPTION: Command to generate manifest file for all available commands in the app.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace generate:manifest\n```\n\n----------------------------------------\n\nTITLE: Looping Through Object in Edge Template\nDESCRIPTION: This Edge template snippet demonstrates how to iterate over an object, accessing both keys and values using the @each tag.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@each((amount, ingredient) in food)\n  <li> Use {{ amount }} of {{ ingredient }} </li>\n@end\n```\n\n----------------------------------------\n\nTITLE: Dialect-Specific Querying with 'unlessDialect' in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the 'unlessDialect' helper, which is the opposite of 'ifDialect', for dialect-specific querying.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .unlessDialect('postgres', (query) => {\n      query.whereJson('address', { city: 'XYZ', pincode: '110001' })\n    } \n  )\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .query()\n  .unlessDialect('postgres',\n    (query) => {}, // if dialect is anything other than postgres\n    (query) => {}  // otherwise execute this\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Related Models for Multiple Instances with setRelatedForMany\nDESCRIPTION: Demonstrates how to set relationships on multiple parent model instances at once using the setRelatedForMany method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = [\n  User {\n    id: 1,\n  },\n  User {\n    id: 2,\n  },\n  User {\n    id: 3,\n  }\n]\n\nconst profiles = [\n  Profile {\n    user_id: 1,\n  },\n  Profile {\n    user_id: 2,\n  },\n  Profile {\n    user_id: 3,\n  }\n]\n\nUser.$getRelation('profile').setRelatedForMany(users, profiles)\n```\n\n----------------------------------------\n\nTITLE: Making enum Fields Nullable in AdonisJS Schema Validation\nDESCRIPTION: Demonstrates marking an enum field as nullable. Nullable fields must exist in the payload but can contain null values, which will be preserved in the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  account_type: schema.enum.nullable(Object.values(SocialAccounts))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ICU Message Interpolation in JSON\nDESCRIPTION: Demonstrates basic variable interpolation in ICU message syntax using JSON format. Shows how to reference dynamic values using curly braces.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greeting\": \"Hello { username }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Instructions in AdonisJS CLI Commands\nDESCRIPTION: Shows how to create and display instructions in a bounded box using the UI instructions component. You can add multiple lines of instructions and render them to the console.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ui\n  .instructions()\n  .add(`cd ${this.colors.cyan('hello-world')}`)\n  .add(`Run ${this.colors.cyan('node ace serve --watch')} to start the server`)\n  .render()\n```\n\n----------------------------------------\n\nTITLE: Switching Buckets in Drive S3/GCS at Runtime\nDESCRIPTION: Example of using the new bucket method to switch buckets at runtime for Drive S3 or GCS operations in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nawait Drive\n  .use('s3')\n  .bucket('bucket-name')\n  .put(path, contents)\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Name in AdonisJS\nDESCRIPTION: Demonstrates how to access the connection name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.name\n```\n\n----------------------------------------\n\nTITLE: Using Sub-queries with orderBy in AdonisJS\nDESCRIPTION: The orderBy method can also accept a sub-query instance, allowing for more complex ordering scenarios such as ordering posts by the number of comments.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst commentsCountQuery = Database\n  .from('comments')\n  .count('*')\n  .whereColumn('posts.id', '=', 'comments.post_id')\n\nDatabase\n  .from('posts')\n  .orderBy(commentsCountQuery, 'desc')\n```\n\n----------------------------------------\n\nTITLE: Getting Health Report\nDESCRIPTION: Shows how to retrieve health check report for registered connections.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst report = await Database.manager.report()\n\nconsole.log(report.name)\nconsole.log(report.health.healthy)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Migration Paths in AdonisJS\nDESCRIPTION: This TypeScript snippet demonstrates how to configure multiple migration paths in the AdonisJS database configuration, including a path to an installed package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\npaths: [\n  './database/migrations',\n  '@somepackage/migrations-dir',\n]\n```\n\n----------------------------------------\n\nTITLE: Synchronous View Rendering Example\nDESCRIPTION: Demonstrates synchronous template rendering using renderSync method\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nview.renderSync('user', {\n  getUser: async () => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Limiting Preloaded Relationships with Group Limit\nDESCRIPTION: Demonstrates how to limit the number of related records per parent record using the groupLimit method, which utilizes SQL window functions to apply limits properly.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post\n  .query()\n  .preload('comments', (query) => {\n    query.groupLimit(3)\n  })\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Insert Query\nDESCRIPTION: Demonstrates enabling debug mode for an individual insert query\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = Database\n  .table('users')\n  .debug(true)\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: await Hash.make('secret'),\n  })\n```\n\n----------------------------------------\n\nTITLE: Custom Relationship Lookup Logic\nDESCRIPTION: Implementation of custom relationship lookup logic. This allows for fine-grained control over how related models are retrieved.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nclass Post extends BaseModel {\n  public findRelatedForRequest(ctx, param, value) {\n    /**\n     * Have to do this weird dance because of\n     * https://github.com/microsoft/TypeScript/issues/37778\n     */\n    const self = this as unknown as Post\n    const lookupKey = param.lookupKey === '$primaryKey' ? 'id' : param.lookupKey\n\n    if (param.name === 'comment') {\n      return self\n      .related('comments')\n      .query()\n      .where(lookupKey, value)\n      .firstOrFail()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HasMany Relationships for Multiple Parent Models\nDESCRIPTION: Demonstrates how to set related models on multiple parent instances at once using setRelatedForMany method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = [\n  User {\n    id: 1,\n  },\n  User {\n    id: 2,\n  },\n  User {\n    id: 3,\n  }\n]\n\nconst posts = [\n  Post {\n    id: 1,\n    user_id: 1,\n  },\n  Post {\n    id: 2,\n    user_id: 1,\n  },\n  Post {\n    id: 3,\n    user_id: 2,\n  },\n  Post {\n    id: 4,\n    user_id: 3,\n  }\n]\n\nUser.$getRelation('posts').setRelatedForMany(users, posts)\n```\n\n----------------------------------------\n\nTITLE: Configuring Request ID Generation in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to enable automatic generation of request IDs in the application configuration to improve request tracing and debugging.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/app.ts\n{\n  http: {\n    generateRequestId: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable String Validation in AdonisJS\nDESCRIPTION: Configures string validation to accept null values while still requiring the field to exist in the payload.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/string.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  title: schema.string.nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Schema in AdonisJS Query (TypeScript)\nDESCRIPTION: Demonstrates how to specify a PostgreSQL schema when executing a database query using the withSchema method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .withSchema('public')\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL SSL for Heroku in AdonisJS\nDESCRIPTION: Database configuration to handle PostgreSQL SSL requirements on Heroku by allowing non-SSL connections when SSL certificates cannot be enabled.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/heroku.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// title: config/database.js\npg: {\n  client: 'pg',\n  connection: {\n    // ....\n    ssl: {\n      rejectUnauthorized: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using equalTo Rule with Static Value in Adonis.js Validator\nDESCRIPTION: This example demonstrates how to validate that a string field exactly matches a specified static value. The 'country' field must be equal to 'IN'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/equal-to.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  country: schema.string([\n    rules.equalTo('IN')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced date validation with Luxon DateTime in AdonisJS validator\nDESCRIPTION: Shows how to use Luxon DateTime objects for more advanced date validation scenarios. This example creates a reference to a date that is 2 days in the future and validates that joining_date must be after this reference date.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\nclass HolidayValidator {\n  public refs = schema.refs({\n    allowedDate: DateTime.local().plus({ days: 2 })\n  })\n\n  public schema = schema.create({\n    joining_date: schema.date({}, [\n      rules.after(this.refs.allowedDate)\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Form Method Spoofing in HTML\nDESCRIPTION: Example of using form method spoofing to simulate PUT requests in HTML forms using the _method query parameter.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"/posts/1?_method=PUT\"></form>\n```\n\n----------------------------------------\n\nTITLE: Enabling Credentials for CORS in AdonisJS\nDESCRIPTION: This snippet demonstrates how to enable credentials for CORS requests in AdonisJS. It sets the 'credentials' property to true.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  credentials: true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Scopes in AdonisJS\nDESCRIPTION: Example of defining OAuth scopes for the GitHub provider during the redirect process.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/github/redirect', async ({ ally }) => {\n  return ally\n    .use('github')\n    .redirect((redirectRequest) => {\n      redirectRequest.scopes(['gist', 'user'])\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Example Test for AdonisJS\nDESCRIPTION: Basic test file to verify the Japa setup is working correctly.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport test from 'japa'\n\ntest.group('Example', () => {\n  test('assert sum', (assert) => {\n    assert.equal(2 + 2, 4)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Looping Through Users Array in Edge Template\nDESCRIPTION: This Edge template snippet shows how to iterate over an array of users using the @each tag and display each user's username.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@each(user in users)\n  <li> {{ user.username }} </li>\n@end\n```\n\n----------------------------------------\n\nTITLE: Command Usage with Multiple Arguments\nDESCRIPTION: Example showing how to use a command with multiple positional arguments.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnode ace greet <name> <age> <height>\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.io with npm and yarn\nDESCRIPTION: Shows how to install Socket.io package from npm registry using either npm or yarn package managers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// title: npm\nnpm i socket.io\n```\n\nLANGUAGE: sh\nCODE:\n```\n// title: yarn\nyarn add socket.io\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ace Command\nDESCRIPTION: Command to generate a new Ace command file in the project's commands directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:command Greet\n\n# CREATE: commands/Greet.ts\n```\n\n----------------------------------------\n\nTITLE: Special Column Types and Table Configuration\nDESCRIPTION: Examples of defining special column types like JSON, UUID, and table configurations like comments and engine settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('projects', (table) => {\n  table.json('settings')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('projects', (table) => {\n  table.jsonb('settings')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.uuid('user_id')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.comment('Manages the app users')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.engine('MyISAM')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Cookie Options in AdonisJS\nDESCRIPTION: Demonstrates how to override default cookie settings at runtime when setting a cookie. These inline values are merged with the default configuration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.cookie('user_id', 1, {\n  httpOnly: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Translating Text with t Helper in Edge\nDESCRIPTION: Shows how to translate messages using the t helper, which is an alias for the i18n.formatMessage method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_12\n\nLANGUAGE: edge\nCODE:\n```\n{{ t('messages.title') }}\n```\n\n----------------------------------------\n\nTITLE: Optional Array Validation\nDESCRIPTION: Configures an array property to be optional with minimum length validation. Undefined and null values are removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema.array\n    .optional([// 👈\n      rules.minLength(1)\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Username Blacklist Validation in AdonisJS\nDESCRIPTION: Shows how to implement username blacklisting using the blacklist validation rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.blacklist([\n      'super',\n      'admin',\n      'root',\n      'bot',\n      'hacker'\n    ])\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in AdonisJS CLI Commands\nDESCRIPTION: Demonstrates how to create and render tables in the terminal using the UI table component. This includes setting column headers, defining column widths, adding rows, and finally rendering the table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = this.ui.table()\ntable.head(['Name', 'Email', 'Score'])\n\n// Optionally define column widths\ntable.columnWidths([15, 30, 10])\n\n// Add new rows\ntable.row(['Virk', 'virk@adonisjs.com', '67'])\ntable.row(['Romain', 'romain@adonisjs.com', '82'])\ntable.row(['Nikk', 'nikk@adonisjs.com', '41'])\n\n// Render the table\ntable.render()\n```\n\n----------------------------------------\n\nTITLE: Redirecting to OAuth Provider in AdonisJS\nDESCRIPTION: Example of redirecting a user to the OAuth provider's website for authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/github/redirect', async ({ ally }) => {\n  return ally.use('github').redirect()\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Fields After Stream Processing - TypeScript\nDESCRIPTION: Correct way to access form fields after stream processing is complete.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.multipart.onFile('input_field_name', {}, (part) => {\n})\n\nawait request.multipart.process()\n\nrequest.input('some_field')\n```\n\n----------------------------------------\n\nTITLE: Implementing modelClient Method for ORM Adapter\nDESCRIPTION: Skeleton implementation of the modelClient method which returns the query client for a model instance, considering transaction clients and connection options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public modelClient(instance: BaseModel) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Locales\nDESCRIPTION: Returns array of supported locales either from config or inferred from language directories.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.supportedLocales() // ['en', 'fr', 'it']\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect URL Route in AdonisJS\nDESCRIPTION: API route that generates a redirect URL for the OAuth provider. Checks if the user is already authenticated and returns the appropriate redirect URL for the specified provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/:provider/redirect', async ({ ally, auth, response, params }) => {\n  if (await auth.check()) {\n    return response.notAcceptable()\n  }\n\n  return response.send(await ally.use(params.provider).stateless().redirectUrl())\n})\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test File in AdonisJS v5\nDESCRIPTION: This command demonstrates how to run a specific test file using the node command with the AdonisJS assembler.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode -r @adonisjs/assembler/build/register japaFile.ts test/hello.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection for Sessions\nDESCRIPTION: Redis connection configuration for session storage, including host, port, password, and database settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// title: config/redis.ts\n{\n  connections: {\n    // highlight-start\n    local: {\n      host: Env.get('REDIS_HOST'),\n      port: Env.get('REDIS_PORT'),\n      password: Env.get('REDIS_PASSWORD', ''),\n      db: 0,\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redacting Sensitive Information in AdonisJS Logger\nDESCRIPTION: Demonstrates how to configure the logger to redact sensitive information like passwords from log output.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/logger.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/app.ts\n{\n  redact: {\n    paths: ['password'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MongoDB Auth Provider in AppProvider\nDESCRIPTION: This snippet shows how to register a custom MongoDB auth provider in the AppProvider's boot method. It extends the Auth module with a new 'mongo' provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/custom-user-provider.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title providers/AppProvider.ts\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const Auth = this.app.container.resolveBinding('Adonis/Addons/Auth')\n    const Hash = this.app.container.resolveBinding('Adonis/Core/Hash')\n\n    const { MongoDbAuthProvider } = await import('./MongoDbAuthProvider')\n\n    Auth.extend('provider', 'mongo', (_, __, config) => {\n      return new MongoDbAuthProvider(config, Hash)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Query Params for OAuth in AdonisJS\nDESCRIPTION: Example of defining custom query string parameters for the Google OAuth provider during the redirect process.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/google/redirect', async ({ ally }) => {\n  return ally\n    .use('google')\n    .redirect((redirectRequest) => {\n      redirectRequest\n        .param('access_type', 'offline')\n        .param('prompt', 'select_account')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Reloading Translations\nDESCRIPTION: Shows how to reload translations from all configured loaders, fetching fresh data from source.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nawait I18n.reloadTranslations()\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for Multi-tenant Application in AdonisJS CLI\nDESCRIPTION: This shell command demonstrates how to run migrations for a specific tenant in a multi-tenant application using AdonisJS. It uses the --connection flag to specify the tenant's connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode ace migration:run --connection=tenantA\n```\n\n----------------------------------------\n\nTITLE: Incrementing Consumed Requests in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the increment method to increase the count of consumed requests without raising an exception when the limit is reached.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait limiter.increment(`global_${user.id}`)\n```\n\n----------------------------------------\n\nTITLE: Using Spread Arguments\nDESCRIPTION: Example showing how to use spread arguments when running a command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnode ace read foo.txt bar.txt baz.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Blog Post Creation in AdonisJS\nDESCRIPTION: TypeScript code defining routes for creating and storing blog posts using the Route module in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.get('posts/create', 'PostsController.create')\nRoute.post('posts', 'PostsController.store')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Config Directory in AdonisJS\nDESCRIPTION: Illustrates how to change the location of the config directory by modifying the .adonisrc.json file in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/config.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"directories\": {\n  \"config\": \"./configurations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Insert Query Builder\nDESCRIPTION: Demonstrates how to get an insert query builder instance or use the 'table' alias to select a table for insertion.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclient.insertQuery()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.table('users')\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Location Header\nDESCRIPTION: Example of setting the HTTP location header for response redirection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.location('/dashboard')\n```\n\n----------------------------------------\n\nTITLE: Basic Route Authentication Check in TypeScript\nDESCRIPTION: Traditional conditional approach for checking authentication in routes\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('dashboard', async ({ auth, response }) => {\n  if (!auth.isLoggedIn) {\n    return response.status(401).send('Unauthenticated')\n  }\n\n  // business logic\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Japa Tests Command\nDESCRIPTION: Command to run tests using the Japa test runner with AdonisJS assembler registration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnode -r @adonisjs/assembler/build/register japaFile.ts\n```\n\n----------------------------------------\n\nTITLE: Controller Method with Unbound Parameters\nDESCRIPTION: Controller implementation showing how to handle unbound parameters. The version parameter is typed as a string and not bound to a model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { bind } from '@adonisjs/route-model-binding'\nimport Post from 'App/Models/Post'\n\nclass PostsController {\n  @bind()\n  public async show({}, version: string, post: Post) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Locale\nDESCRIPTION: Demonstrates how to get the default locale for the application using the getDefaultLocale helper function in Edge templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/view-helpers.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{ getDefaultLocale() }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination Links in Edge Template\nDESCRIPTION: Demonstrates how to render paginated results and display pagination links in an Edge template. It uses the getUrlsForRange method to generate pagination URLs.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<div>\n  @each(post in posts)\n    <h1>{{ post.title }}</h1>\n    <p> {{ excerpt(post.body, 200) }} </p>\n  @endeach\n</div>\n\n<hr>\n\n<div>\n  @each(anchor in posts.getUrlsForRange(1, posts.lastPage))\n    <a href=\"{{ anchor.url }}\">\n      {{ anchor.page }}\n    </a>\n  @endeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments and Flags in Ace Command\nDESCRIPTION: Example showing how to define command-line arguments and flags for an Ace command using decorators.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  BaseCommand,\n  args,\n  flags\n} from '@adonisjs/core/build/standalone'\n\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n\n  // highlight-start\n  @args.string({ description: 'Name of the person to greet' })\n  public name: string\n\n  @flags.boolean({ alias: 'i', description: 'Enable interactive mode' })\n  public interactive: boolean\n  // highlight-end\n\n  public async run() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Making Path to Views Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the views directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.viewsPath('welcome.edge')\n```\n\n----------------------------------------\n\nTITLE: Accessing Flash Messages in Edge Templates\nDESCRIPTION: Shows various methods to access and manipulate flash messages within Edge template files\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Get value for a given key --}}\n{{ flashMessages.get('errors.title') }}\n\n{{-- With optional default value --}}\n{{ flashMessages.get('title', '') }}\n\n{{-- Find if a key exists --}}\n{{ flashMessages.has('errors.title') }}\n\n{{-- Get all --}}\n{{ flashMessages.all() }}\n\n{{-- Find if store is empty --}}\n{{ flashMessages.isEmpty }}\n```\n\n----------------------------------------\n\nTITLE: Internationalization with i18n Helper in Edge\nDESCRIPTION: Demonstrates accessing the i18n instance to retrieve the current locale and format numbers according to locale-specific rules.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_11\n\nLANGUAGE: edge\nCODE:\n```\n{{ i18n.locale }}\n{{ i18n.formatNumber(100) }}\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Human Readable Format in Edge Templates\nDESCRIPTION: Converts time in milliseconds to a human-readable string with short or long format options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_14\n\nLANGUAGE: edge\nCODE:\n```\n{{ prettyMs(60000) }} <!-- 1min -->\n\n{{ prettyMs(60000, { long: true }) }} <!-- 1 minute -->\n```\n\n----------------------------------------\n\nTITLE: Signed Route Helper in Edge Templates\nDESCRIPTION: Demonstrates creating a signed URL with expiration time and purpose using the signedRoute helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  signedRoute('OnboardingController.verifyEmail', [user.email], {\n    expiresIn: '30mins',\n    purpose: 'verifyEmail'\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Using Task Renderer in AdonisJS CLI Commands\nDESCRIPTION: Shows how to use the task renderer to display and manage the output of multiple actions. It supports both minimal and verbose output modes and can handle task completion and failure.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasksManager = this.ui.tasks()\n\n// Manually switch to verbose renderer\nconst tasksManager = this.ui.tasks.verbose()\n```\n\n----------------------------------------\n\nTITLE: Event Trapping in AdonisJS\nDESCRIPTION: Examples of trapping and testing event emissions using Event.trap and Event.trapAll methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nimport Event from '@ioc:Adonis/Core/Event'\n\nEvent.trap('new:user', (user) => {\n  assert.instanceOf(user, User)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.trapAll((event, data) => {\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.restore()\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Model in HasOne Relationship\nDESCRIPTION: Shows how to access the parent model that defines the HasOne relationship using the 'model' property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n\nUser.$getRelation('profile').model // User\n```\n\n----------------------------------------\n\nTITLE: Using Array Flags\nDESCRIPTION: Example showing different ways to use array flags when running a command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnode ace read --files=foo.txt --files=bar.txt\n\n## Or separate them with comma\nnode ace read --files=foo.txt,bar.txt\n```\n\n----------------------------------------\n\nTITLE: Checking Fallback Message Existence\nDESCRIPTION: Verifying if a fallback translation message exists\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale('en')\n\nif (i18n.hasFallbackMessage('messages.greeting')) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Messages for minLength Rule in AdonisJS\nDESCRIPTION: Demonstrates how to create a custom validation error message for the minLength rule. The message can reference the rule's options using the {{ options.minLength }} syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/min-length.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'minLength': 'The array must have minimum of {{ options.minLength }} items',\n}\n```\n\n----------------------------------------\n\nTITLE: Ordinalizing Numbers in Edge Templates\nDESCRIPTION: Converts numbers to their ordinal string representation (1st, 2nd, 3rd, etc.).\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_16\n\nLANGUAGE: edge\nCODE:\n```\n{{ ordinalize(1) }} <!-- 1st -->\n{{ ordinalize(99) }} <!-- 99th -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Brute Force Protection\nDESCRIPTION: Example implementation of rate limiting to protect login endpoints from brute force attacks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Limiter } from '@adonisjs/limiter/build/services'\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class AuthController {\n  public async store({ auth, request, response }: HttpContextContract) {\n    const email = request.input('email')\n    const password = request.input('password')\n\n    const throttleKey = `login_${email}_${request.ip()}`\n\n    const limiter = Limiter.use({\n      requests: 10,\n      duration: '15 mins',\n      blockDuration: '30 mins',\n    })\n\n    if (await limiter.isBlocked(throttleKey)) {\n      return response.tooManyRequests('Login attempts exhausted. Please try after some time')\n    }\n\n    try {\n      await auth.attempt(email, password)\n    } catch (error) {\n      await limiter.increment(throttleKey)\n      throw error\n    }\n\n    await limiter.delete(throttleKey)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Messages\nDESCRIPTION: Retrieving validator messages with different prefixes\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale('en')\n\nI18n.validatorMessages('validator.shared')\nI18n.validatorMessages('validator.contact')\nI18n.validatorMessages('validator.signup')\n```\n\n----------------------------------------\n\nTITLE: Changing Lookup Key for a Single Route\nDESCRIPTION: Route definition with a specific lookup key for a parameter. This example uses the 'slug' property instead of the default primary key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/posts/:id(slug)', 'PostsController.show')\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with HasOne Relationship Operations\nDESCRIPTION: Shows how transaction clients are automatically inherited from the parent model when performing relationship operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await Database.transaction()\nconst user = await User.query({ client: trx }).first()\n\n/**\n* Uses the `$trx` property from the `user` instance to\n* persist relationship\n*/\nawait user.related('profile').create()\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Class Implementation\nDESCRIPTION: Implementation of a custom exception class with handle and report methods\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Exception } from '@adonisjs/core/build/standalone'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class UnAuthorizedException extends Exception {\n  public async handle(error: this, ctx: HttpContextContract) {\n    ctx.response.status(error.status).send(error.message)\n  }\n\n  public report(error: this, ctx: HttpContextContract) {\n    reportingService.report(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Assertions in AdonisJS API Tests\nDESCRIPTION: Demonstrates additional assertion methods provided by AdonisJS for API testing, including session and flash message assertions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nresponse.assertSession('foo')\nresponse.assertSession('foo', 'bar')\n\nresponse.assertSessionMissing('foo')\n\nresponse.assertFlashMessage('errors')\nresponse.assertFlashMessage('errors', [\n  {\n    title: ['Post title is required']\n  }\n])\n\nresponse.assertFlashMissing('success')\n```\n\n----------------------------------------\n\nTITLE: Serializing Computed Properties\nDESCRIPTION: Shows how to serialize only the computed properties of a model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nuser.serializeComputed()\n```\n\n----------------------------------------\n\nTITLE: Implementing insert Method for ORM Adapter\nDESCRIPTION: Skeleton implementation of the insert method responsible for persisting new model instances to the database, receiving the model instance and attributes to insert.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public async insert(instance: BaseModel, attributes: any) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Authorization Middleware in AdonisJS Kernel\nDESCRIPTION: Registration of the SetAuthorizationHeader middleware in the global middleware array inside the start/kernel.ts file. This ensures the middleware is applied to all incoming requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nServer.middleware.register([\n  () => import('@ioc:Adonis/Core/BodyParser'),\n  () => import('@ioc:Adonis/Addons/Shield'),\n  () => import('App/Middleware/SetAuthorizationHeader'),\n  // Other middleware\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Users Migration Schema in TypeScript\nDESCRIPTION: Creates a migration schema for the 'users' table with an auto-incrementing primary key 'id'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Users extends BaseSchema {\n  protected tableName = 'users'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Request Aborting with abortUnless\nDESCRIPTION: Using abortUnless method to abort requests when a condition is false, opposite of abortIf.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.abortUnless(auth.user, 'Not authenticated', 401)\n```\n\n----------------------------------------\n\nTITLE: Counting Related Records with withCount\nDESCRIPTION: Demonstrates using the withCount method to perform a subquery that counts related records. The count is stored in the model's $extras object and can be given a custom name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().withCount('posts')\n\nusers.forEach((user) => {\n  console.log(user.$extras.posts_count)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User\n  .query()\n  .withCount('posts')\n  .preload('posts')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User\n  .query()\n  .withCount('posts', (query) => {\n    query.as('totalPosts')\n  })\n  .firstOrFail()\n\nconsole.log(user.$extras.totalPosts)\n```\n\n----------------------------------------\n\nTITLE: Implementing afterPaginate hook in AdonisJS Lucid ORM (TypeScript)\nDESCRIPTION: This snippet shows how to use the @afterPaginate decorator to register a function that processes markdown content for all posts in a paginator after performing a paginate operation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  afterPaginate,\n  BaseModel,\n  ModelPaginatorContract\n} from '@ioc:Adonis/Lucid/Orm'\n\ntype PostPaginator = ModelPaginatorContract<Post>\n\nclass Post extends BaseModel {\n  @afterPaginate()\n  public static async processMarkdown(paginator: PostPaginator) {\n    await Promise.all(paginator.all().map((post) => {\n      return markdownIt(post.body)\n    }))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Production Dependencies for AdonisJS\nDESCRIPTION: Commands to navigate to the build directory and install production-only dependencies for an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/typescript-build-process.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd build\nnpm ci --production\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables via Application in AdonisJS\nDESCRIPTION: How to access environment variables through the Application instance using the env module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.env.get('APP_KEY')\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency\nDESCRIPTION: Formatting currency values using Intl.NumberFormat\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n\n  .locale('en')\n  .formatCurrency(200, {\n    currency: 'USD'\n  })\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Environment in AdonisJS\nDESCRIPTION: This code shows how to access the normalized Node environment in an AdonisJS application, which standardizes environment names for consistency.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Application from '@ioc:Adonis/Core/Application'\n\nconsole.log(Application.nodeEnvironment)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Server in TypeScript\nDESCRIPTION: TypeScript configuration for the static file server in AdonisJS. This code defines settings for enabled status, dot file handling, ETag generation, and last modified headers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/static-assets.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetsConfig } from '@ioc:Adonis/Core/Static'\n\nconst staticConfig: AssetsConfig = {\n  enabled: true,\n  dotFiles: 'ignore',\n  etag: true,\n  lastModified: true,\n}\n\nexport default staticConfig\n```\n\n----------------------------------------\n\nTITLE: Updating Variables with @set in Edge\nDESCRIPTION: Shows how to update an existing variable using multiple @set tags. The compiled output illustrates the initial declaration and subsequent value update in JavaScript.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/mutations.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@set('username', 'virk')\n@set('username', 'romain')\n```\n\nLANGUAGE: js\nCODE:\n```\nlet username = 'virk'\nusername = 'romain'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Disk Driver in AdonisJS\nDESCRIPTION: Example showing how to use the configured custom disk driver to put files using the Drive facade.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\n\nawait Drive.use('myDummyDisk').put(filePath, contents)\n```\n\n----------------------------------------\n\nTITLE: Edge Component Usage Examples\nDESCRIPTION: Demonstrations of using Edge components with both block syntax and self-closing syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@component('button')\n  <span> Login </span>\n@end\n\n@!component('button', { text: 'Login' })\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to PascalCase in Edge Templates\nDESCRIPTION: Converts a string to its PascalCase version where each word starts with an uppercase letter and there are no separators.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ pascalCase('helloWorld') }}\n\n<!-- Output: HelloWorld -->\n```\n\n----------------------------------------\n\nTITLE: Checking Token Revocation in AdonisJS API Authentication (TypeScript)\nDESCRIPTION: This snippet shows how to check if a token was revoked during the current request using the isLoggedOut property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').revoke()\nauth.use('api').isLoggedOut\n```\n\n----------------------------------------\n\nTITLE: Adding Related Models Using pushRelated Method\nDESCRIPTION: Demonstrates how to add related models to an existing relationship collection using the 'pushRelated' method of a HasManyThrough relationship.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst country = new Country()\n\nCountry.$getRelation('posts').pushRelated(country, new Post())\nCountry.$getRelation('posts').pushRelated(country, new Post())\nCountry.$getRelation('posts').pushRelated(country, new Post())\n\ncountry.posts.length // 3\n```\n\n----------------------------------------\n\nTITLE: Manual Controller Importing and Instantiation\nDESCRIPTION: This example shows how you would manually import and instantiate a controller without using the string reference approach. This approach is more verbose and creates a choke point in the routes file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport PostsController from 'App/Controllers/Http/PostsController'\n\nRoute.get('/posts', async (ctx) => {\n  return new PostsController().index(ctx)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving User from Access Token in AdonisJS Ally (TypeScript)\nDESCRIPTION: Demonstrates how to use the ally.userFromToken method to retrieve user details from a pre-existing access token for GitHub OAuth.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/github/user', async ({ ally }) => {\n  const user = await ally\n    .use('github')\n    .userFromToken(accessToken)\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Translation Messages\nDESCRIPTION: Formatting messages with dynamic data using ICU message format\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale('en')\n\ni18n.formatMessage('messages.greeting', { name: 'Virk' })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PostMark Mail Driver in AdonisJS\nDESCRIPTION: This code implements a custom PostMark mail driver for AdonisJS. It uses nodemailer and nodemailer-postmark-transport to create a driver that adheres to the MailDriverContract.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport nodemailer from 'nodemailer'\nimport postMarkTransport from 'nodemailer-postmark-transport'\nimport { MailDriverContract, MessageNode } from '@ioc:Adonis/Addons/Mail'\n\nexport type PostMarkConfig = {\n  driver: 'postmark',\n  auth: {\n    apiKey: string\n  }\n}\n\nexport class PostMarkDriver implements MailDriverContract {\n  private transporter: any\n\n  constructor(private config: PostMarkConfig) {\n    this.transporter = nodemailer.createTransport(\n      postMarkTransport(this.config)\n    )\n  }\n\n  public async send(message: MessageNode) {\n    return this.transporter.sendMail(message)\n  }\n\n  public close() {\n    this.transporter.close()\n    this.transporter = null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making enum Fields Optional in AdonisJS Schema Validation\nDESCRIPTION: Shows how to make an enum validation field optional by chaining the optional method. Undefined and null values are considered optional and will be removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  account_type: schema.enum.optional(Object.values(SocialAccounts))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Model Serialization in TypeScript\nDESCRIPTION: Demonstrates the basic usage of serialize method to convert a model instance to JSON representation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(user.serialize())\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Shell\nDESCRIPTION: This command checks the installed version of Node.js on the system. AdonisJS requires at least the latest release of Node.js v14.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# check node.js version\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Optional String Validation in AdonisJS\nDESCRIPTION: Marks a string property as optional, allowing undefined and null values which are removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/string.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  title: schema.string.optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Twitter OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the Twitter OAuth driver in AdonisJS Ally, including client ID, secret, and callback URL.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntwitter: {\n  driver: 'twitter',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Connection State\nDESCRIPTION: Demonstrates how to verify if a connection is in open state and connect if not.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (!Database.manager.isConnected('pg')) {\n  Database.manager.connect('pg')\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Fallback Locale\nDESCRIPTION: Shows how to access the fallback locale setting\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.locale('en').fallbackLocale\n```\n\n----------------------------------------\n\nTITLE: Using isPending Property for Response Status\nDESCRIPTION: Checking if a response is still pending using the isPending property, which is opposite of finished.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nif (response.isPending) {\n  response.send()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing update Method for ORM Adapter\nDESCRIPTION: Skeleton implementation of the update method responsible for persisting changes to existing model instances, receiving the instance and dirty attributes to update.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public async update(instance: BaseModel, dirtyAttributes: any) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Escaped vs Unescaped HTML Output in Edge Templates\nDESCRIPTION: Demonstrates the difference between double curly braces (which escape HTML) and triple curly braces (which render HTML as-is) in Edge templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/safe.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ '<p> I will be escaped </p>' }}\n{{{ '<p> I will render as it is </p>' }}}\n```\n\n----------------------------------------\n\nTITLE: Database Loader Implementation for i18n\nDESCRIPTION: Complete implementation of a database loader class that implements the LoaderContract interface using Lucid ORM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DatabaseContract } from '@ioc:Adonis/Lucid/Database'\nimport type {\n  Translations,\n  LoaderContract\n} from '@ioc:Adonis/Addons/I18n'\n\nexport type DbLoaderConfig = {\n  enabled: boolean\n  table: string\n}\n\nexport class DbLoader implements LoaderContract {\n  constructor(private db: DatabaseContract, private config: DbLoaderConfig) {}\n\n  public async load() {\n    const rows = await this.db.from(this.config.table)\n\n    return rows.reduce<Translations>((result, row) => {\n      result[row.locale] = result[row.locale] || {}\n      result[row.locale][row.key] = row.message\n      return result\n    }, {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request I18n Usage\nDESCRIPTION: Example of using I18n within HTTP route handlers using the ctx.i18n object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/', async ({ i18n }) => {\n  return i18n.formatCurrency(100, { currency: 'EUR' })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HasManyThrough Relationship Type Property\nDESCRIPTION: Example of accessing the 'type' property of a HasManyThrough relationship, which always returns 'hasManyThrough'. This is useful for programmatically identifying the relationship type.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User])\n  public posts: HasManyThrough<typeof Post>\n}\n\nCountry.$getRelation('posts').type // 'hasManyThrough'\n```\n\n----------------------------------------\n\nTITLE: Installing Package Updates using npm-check-updates\nDESCRIPTION: Command to interactively update all @adonisjs packages to their latest versions using npm-check-updates tool.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/march-2022-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -i\n```\n\n----------------------------------------\n\nTITLE: Implementing modelConstructorClient Method for ORM Adapter\nDESCRIPTION: Implementation of the modelConstructorClient method that returns the database connection client for a model constructor, with support for custom connection options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract, ModelAdapterOptions } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public modelConstructorClient(model: typeof BaseModel, options?: ModelAdapterOptions) {\n    const connection = options?.connection || model.connection\n    return connection ? Database.connection(connection) : Database.connection()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subquery in Select Statement\nDESCRIPTION: Example of using a subquery to select the last login IP address from a related table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select(\n    Database\n      .from('user_logins')\n      .select('ip_address')\n      .whereColumn('users.id', 'user_logins.user_id')\n      .orderBy('id', 'desc')\n      .limit(1)\n      .as('last_login_ip') // 👈 This is important\n  )\n```\n\n----------------------------------------\n\nTITLE: Directly Importing Env Module in AdonisJS\nDESCRIPTION: How to import and use the env module directly, as an alternative to accessing it through the Application instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport Env from '@ioc:Adonis/Core/Env'\n\nEnv.get('APP_KEY')\n```\n\n----------------------------------------\n\nTITLE: Basic I18n Usage Examples\nDESCRIPTION: Demonstrates basic usage of I18n formatting functions for dates, currency, and relative time across different locales.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.locale('en-US').formatDate(new Date())\n// 10/8/2021\n\nI18n.locale('fr').formatCurrency(100, { currency: 'EUR' })\n// 100,00 €\n\nconst luxonDate = DateTime.local().minus({ minutes: 10 })\nI18n.locale('pt').formatRelativeTime(luxonDate, 'auto')\n// há 10 minutos\n```\n\n----------------------------------------\n\nTITLE: Using Returning Clause with Multiple Columns\nDESCRIPTION: Example of using the returning method to fetch multiple columns after insert\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = Database\n  .table('users')\n  .returning(['id', 'username'])\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: await Hash.make('secret'),\n  })\n\nconsole.log(rows[0].id, rows[0].username)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Driver\nDESCRIPTION: Shows how to inform TypeScript about a new custom driver by extending the DriversList interface.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DummyDriverConfig,\n  DummyDriverContract\n} from '../providers/DummyDriver'\n\ndeclare module '@ioc:Adonis/Core/Drive' {\n  interface DriversList {\n    dummy: {\n      config: DummyDriverConfig,\n      implementation: DummyDriverContract\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Environment with app Helper in Edge\nDESCRIPTION: Uses the app helper to access the Application instance and check the current environment to conditionally render content.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@if(app.nodeEnvironment === 'development')\n  Print some debug log\n@endif\n```\n\n----------------------------------------\n\nTITLE: Accessing Loop Index in Edge Template\nDESCRIPTION: This Edge template snippet demonstrates how to access and use the loop index while iterating over an array of users.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@each((user, index) in users)\n  <li> {{ index + 1 }} {{ user.username }} </li>\n@end\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Attempts in AdonisJS API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to check if an authentication attempt has been made using the authenticationAttempted property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/api-tokens-guard.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nauth.use('api').authenticationAttempted // false\n\nawait auth.use('api').authenticate()\nauth.use('api').authenticationAttempted // true\n```\n\n----------------------------------------\n\nTITLE: Using Drive in AdonisJS with TypeScript\nDESCRIPTION: Example of importing and using the Drive module in AdonisJS with TypeScript, demonstrating disk switching.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport Drive from '@ioc:Adonis/Core/Drive'\n\nDrive.use('<use-any-mapping-from-config-file>')\n```\n\n----------------------------------------\n\nTITLE: Accessing Processed Stream File - TypeScript\nDESCRIPTION: Example of accessing and checking errors for a processed file stream.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.multipart.onFile('input_field_name', {}, (part) => {\n  someSdk.uploadStream(part)\n})\n\nawait request.multipart.process()\n\nconst file = request.input('input_field_name')\nif (file.hasErrors) {\n  return file.errors\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Command Help\nDESCRIPTION: Command to view the help information for a specific Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnode ace greet --help\n```\n\n----------------------------------------\n\nTITLE: Formatting Raw Messages\nDESCRIPTION: Formatting raw string messages with dynamic data\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale('en')\n\ni18n.formatRawMessage('Hello {name}', { name: 'Virk' })\n```\n\n----------------------------------------\n\nTITLE: Updating Object Properties with @set Tag\nDESCRIPTION: Shows how to use @set tag to update nested object properties, similar to lodash.set method functionality.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/set.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@set(post, 'title', 'New title')\n@set(post, 'author.name', 'Virk')\n```\n\n----------------------------------------\n\nTITLE: Updating Service Provider Bootstrap in TypeScript\nDESCRIPTION: Changes to service provider constructor signature, replacing IocContract with ApplicationContract for dependency injection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public register() {\n    this.app.container.bind('Binding', () => {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locale-Specific Phone Number Validation\nDESCRIPTION: Phone number validation with specific country locale settings. Allows validation against multiple country formats by specifying locale codes like pt-BR, en-IN, and en-US.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/mobile.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mobile: schema.string([\n    rules.mobile({\n      locale: ['pt-BR', 'en-IN', 'en-US']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Email Validation with Normalization\nDESCRIPTION: New approach for email validation using separate normalization rules\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string([\n  rules.email(),\n  rules.normalizeEmail({\n    allLowercase: true,\n    gmailRemoveSubaddress: true,\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Using schema.enum with String Literals in AdonisJS Validator\nDESCRIPTION: Defines a schema validation rule that ensures a property value is one of the specified string literals. The return type will be a TypeScript union of the provided values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  account_type: schema.enum(\n    ['twitter', 'github', 'instagram'] as const\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Keywords with 'before' Rule in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use shorthand keywords like 'today' and 'yesterday' with the 'before' validation rule for more readable date constraints.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrules.before('today')\nrules.before('yesterday')\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Rule\nDESCRIPTION: TypeScript interface declaration to add custom rule to the validator using declaration merging\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-rules.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Validator' {\n  interface Rules {\n    camelCase(): Rule\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Controller Methods\nDESCRIPTION: Example of accessing models within a controller method, where the models will have implicit access to the HTTP context through AsyncLocalStorage.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class UsersController {\n  public index() {\n    await User.all()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Objects Nullable in AdonisJS Schema Validation\nDESCRIPTION: Shows how to make an object property nullable using the .nullable() method. Nullable fields must exist in the payload but can contain null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/object.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: schema.object\n    .nullable() // 👈\n    .members({\n      username: schema.string(),\n      avatar_url: schema.string()\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Adapter to a Model in TypeScript\nDESCRIPTION: Shows how to assign a custom adapter to a model by setting the $adapter static property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static $adapter = new MyAdapter()\n}\n```\n\n----------------------------------------\n\nTITLE: Auto Formatting Relative Time with AdonisJS I18n\nDESCRIPTION: Shows how to use the 'auto' unit with formatRelativeTime to automatically determine the best unit for displaying relative time.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst luxonDate = DateTime.local().plus({ hours: 2 })\nI18n\n  .locale('en')\n  .formatRelativeTime(luxonDate, 'auto')\n\n// In 2 hours 👈\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst luxonDate = DateTime.local().plus({ hours: 200 })\nI18n\n  .locale('en')\n  .formatRelativeTime(luxonDate, 'auto')\n\n// In 8 days 👈\n```\n\n----------------------------------------\n\nTITLE: Checking Remaining Requests in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the remaining method to check the number of remaining requests for a given key.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (await limiter.remaining(`global_${user.id}`)) {\n  // key has requests remaining\n}\n```\n\n----------------------------------------\n\nTITLE: Time Formatting in Translation Messages\nDESCRIPTION: Demonstrates time formatting in messages using custom time format pattern.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appointment\": \"You have an appointment today at {appointmentAt, time, ::h:m a}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Relationships in TypeScript\nDESCRIPTION: Shows how to serialize preloaded relationships and change the relationship property name in the serialized output.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/serialization.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport Comment from 'App/Models/Comment'\nimport { BaseModel, column, hasMany, HasMany } from '@ioc:Adonis/Lucid/Orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  public id: number\n\n  // highlight-start\n  @hasMany(() => Comment, {\n    serializeAs: 'postComments'\n  })\n  public comments: HasMany<typeof Comment>\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar Partial Implementation\nDESCRIPTION: Basic sidebar partial template containing the sidebar markup.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/partials.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n// title: partials/sidebar.edge\n<div class=\"sidebar\"></div>\n```\n\n----------------------------------------\n\nTITLE: Redis Health Check Configuration\nDESCRIPTION: Configuration example for enabling health checks on a Redis connection in the redis config file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/health-check.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  local: {\n    host: '127.0.0.1',\n    port: 6379,\n    password: '',\n    healthCheck: true // 👈 enabled\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model is Booted\nDESCRIPTION: Shows how to check if a model has been booted and conditionally execute the boot process, which is a recommended pattern when customizing the model boot method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static boot () {\n    if (this.booted) {\n      return\n    }\n\n    super.boot()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Model Reference from Query Builder\nDESCRIPTION: Shows how to access the reference to the model class from which the query instance was created using the model property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(User.query().model === User) // true\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Validation Rules to enum Fields in AdonisJS\nDESCRIPTION: Demonstrates how to add additional validation rules to an enum field. In this example, a uniqueness constraint is added to ensure the account type is unique in the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  account_type: schema.enum(Object.values(SocialAccounts), [\n    rules.unique({\n      table: 'user_social_accounts',\n      column: 'service',\n    }),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dummy Driver in TypeScript\nDESCRIPTION: Shows how to create a dummy driver for the Drive module, including the necessary interfaces and class structure.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  Visibility,\n  WriteOptions,\n  ContentHeaders,\n  DriveFileStats,\n  DriverContract,\n} from '@ioc:Adonis/Core/Drive'\n\nexport interface DummyDriverContract extends DriverContract {\n  name: 'dummy' // Driver name\n}\n\nexport type DummyDriverConfig = {\n  driver: 'dummy' // Driver name\n  // .. other config options\n}\n\nexport class DummyDriver implements DummyDriverContract {\n  // implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameters in TypeScript\nDESCRIPTION: Shows how to define a route with a parameter in AdonisJS using the Route module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n\nRoute.put('posts/:id', 'PostsController.update')\n```\n\n----------------------------------------\n\nTITLE: Programmatic Migration Runner\nDESCRIPTION: Example showing how to run database migrations programmatically using the Migrator module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/june-2021-release.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport Migrator from '@ioc:Adonis/Lucid/Migrator'\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport Application from '@ioc:Adonis/Core/Application'\n\nRoute.get('/', async () => {\n  const migrator = new Migrator(Database, Application, {\n    direction: 'up',\n    dryRun: true,\n  })\n\n  await migrator.run()\n  return migrator.migratedFiles\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type Header\nDESCRIPTION: Examples of setting the HTTP content-type header using direct MIME types or shorthand keywords.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.type('application/json')\n\nresponse.type('json') // defines content-type=application/json\nresponse.type('html') // defines content-type=text/html\n```\n\n----------------------------------------\n\nTITLE: Switching Locale at Runtime\nDESCRIPTION: Example of switching the active locale during runtime\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale('en')\n\n// Switch to es\ni18n.switchLocale('es')\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handler Setup\nDESCRIPTION: Initial setup of the global exception handler with status pages configuration\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/exception-handling.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Logger from '@ioc:Adonis/Core/Logger'\nimport HttpExceptionHandler from '@ioc:Adonis/Core/HttpExceptionHandler'\n\nexport default class ExceptionHandler extends HttpExceptionHandler {\n  protected statusPages = {\n    '404': 'errors/not-found',\n    '500..599': 'errors/server-error',\n  }\n\n  constructor() {\n    super(Logger)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing All Connections\nDESCRIPTION: Demonstrates how to close all registered connections with optional release.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.manager.closeAll()\nawait Database.manager.closeAll(true)\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Store for Limiter in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the store method to specify a custom backend store for persisting limiter data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nLimiter\n  .allowRequests(1000)\n  .store('db')\n```\n\n----------------------------------------\n\nTITLE: Inspecting All Flash Messages in Edge Templates\nDESCRIPTION: Uses the inspect helper to view all available flash messages in an Edge template. This is useful for debugging and seeing what flash data is available in the current request.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/flash-messages.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ inspect(flashMessages.all()) }}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderContract Interface for i18n in TypeScript\nDESCRIPTION: Type definitions for the LoaderContract interface that custom loaders must implement. Includes Translations type definition for language-message mapping.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype Translations = {\n  [lang: string]: Record<string, string>\n}\n\ninterface LoaderContract {\n  load(): Promise<Translations>\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flash Message Values with get() Method\nDESCRIPTION: Shows how to retrieve a flash message value for a specific key using the get() method. Uses dot notation to access nested values, particularly useful for displaying error messages.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/flash-messages.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{ flashMessages.get('errors.username') }}\n```\n\n----------------------------------------\n\nTITLE: Ally Social Auth User Handling\nDESCRIPTION: Example showing how to handle potentially missing email addresses in social authentication responses.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/june-2021-release.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst facebookUser = await ally.use('facebook').user()\n\nif (!facebookUser.email) {\n  // handle the use case for missing email\n}\n```\n\n----------------------------------------\n\nTITLE: Route Helper with Query String in Edge\nDESCRIPTION: Shows how to append a query string to a route URL using the qs option in the route helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<form\n  action=\"{{\n    route('PostsController.update', { id: 1 }, {\n      qs: {\n        _method: 'PUT' {{-- 👈 --}}\n      }\n    })\n  }}\"\n  method=\"POST\"\n>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using 'beforeOrEqual' Rule in AdonisJS Date Validation (TypeScript)\nDESCRIPTION: Shows how to use the 'beforeOrEqual' validation rule to enforce that a date is the same as or before a specified date, using the 'today' shorthand.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  joining_date: schema.date({}, [\n    rules.beforeOrEqual('today')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Locked Rows in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the skipLocked method to skip rows that are locked by another transaction. This is supported in MySQL 8.0+ and PostgreSQL 9.5+, and is useful for implementing work queues.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .where('id', 1)\n  .forUpdate()\n  .skipLocked() // 👈\n  .first()\n\n/**\nSELECT * FROM \"users\"\nWHERE \"id\" = 1\nFOR UPDATE SKIP LOCKED\n*/\n```\n\n----------------------------------------\n\nTITLE: Using belongsTo Decorator for Many-to-One Relationships\nDESCRIPTION: Demonstrates how to use the belongsTo decorator to define a many-to-one relationship between models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { belongsTo, BelongsTo, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends Model {\n  @belongsTo(() => Team)\n  public team: BelongsTo<typeof Team>\n}\n```\n\n----------------------------------------\n\nTITLE: Making Objects Both Nullable and Optional in AdonisJS\nDESCRIPTION: Demonstrates how to make an object property both nullable and optional using .nullableAndOptional(). If the field is undefined, it will be removed; otherwise, the value (including null) is returned.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/object.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: schema.object\n    .nullableAndOptional() // 👈\n    .members({\n      username: schema.string(),\n      avatar_url: schema.string()\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Profiles Migration Schema in TypeScript\nDESCRIPTION: Creates a migration schema for the 'profiles' table with a foreign key 'user_id' referencing the 'users' table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Profiles extends BaseSchema {\n  protected tableName = 'profiles'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table\n        .integer('user_id')\n        .unsigned()\n        .references('users.id')\n        .onDelete('CASCADE')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Insert Query Builder in AdonisJS\nDESCRIPTION: Shows how to import and initialize the Database query builder for insert operations\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nDatabase.insertQuery()\n\n// selecting table also returns an instance of the query builder\nDatabase.table('users')\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User with auth Helper in Edge\nDESCRIPTION: Demonstrates how to conditionally display content based on authentication status using the auth helper provided by @adonisjs/auth.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\n@if(auth.isLoggedIn)\n  <p> Hello {{ auth.user.username }} </p>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Pool in AdonisJS\nDESCRIPTION: Shows how to access the underlying tarnjs pool object for both main and read connections. The pool property is available only after the connect method is called.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.pool.numFree()\nconnection.readPool.numFree()\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML in Edge Templates\nDESCRIPTION: Escapes HTML characters in a string to prevent XSS attacks when using triple curly braces.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\n{{{ e(post.content) }}}\n```\n\n----------------------------------------\n\nTITLE: Running File Generation in AdonisJS Generator\nDESCRIPTION: Demonstrates how to execute the file generation process after configuring all the files to be created.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.generator.run()\n```\n\n----------------------------------------\n\nTITLE: Using groupLimit in HasManyQueryBuilder for Preloading in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the groupLimit method to limit the number of related posts preloaded for each user. This method uses SQL window functions to add a limit to each group during relationship preloading.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().preload('posts', (query) => {\n  query.groupLimit(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Self-Assigning Primary Keys in TypeScript with AdonisJS\nDESCRIPTION: The selfAssignPrimaryKey static property enables manual assignment of primary keys, useful for scenarios like using UUIDs generated in the application code.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static selfAssignPrimaryKey = true\n\n  @column({ isPrimary: true })\n  public userId: string\n}\n\nconst user = new User()\nuser.userId = uuid.v4()\n\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Using the apply Method for Query Scopes\nDESCRIPTION: Demonstrates using the apply method, which is an alias for withScopes, to apply query scopes defined on a model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/query-builder.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nTeam\n  .query()\n  .apply((scopes) => scopes.forUser(auth.user))\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Processing Routes - TypeScript\nDESCRIPTION: Configuration to specify which routes should have manual file processing.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprocessManually: ['/drive']\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Driver for File Serving in TypeScript\nDESCRIPTION: Shows the configuration options for the local driver to serve files, including the serveFiles flag and basePath setting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  local: {\n    driver: 'local',\n    // highlight-start\n    serveFiles: true,\n    basePath: '/uploads'\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings Without Respecting Word Boundaries in Edge\nDESCRIPTION: Demonstrates truncating a string with the completeWords option set to false, which allows cutting words in the middle instead of respecting word boundaries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/truncate.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  truncate(\n    'This is a very long sentence that i would like to be shortened',\n    18,\n    // highlight-start\n    { completeWords: false }\n    // highlight-end\n  )\n}}\n\n// highlight-start\n<!-- Output: This is a very lon... -->\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context via Async Local Storage\nDESCRIPTION: Example showing how to access HTTP context from anywhere using Async Local Storage in a model class.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/june-2021-release.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n\nclass User extends BaseModel {\n  public static query() {\n    const ctx = HttpContext.get()!\n    return super.query(ctx.tenant.connection)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Driver for Sessions\nDESCRIPTION: Configuration settings for the cookie-based session driver, including path, httpOnly, and sameSite options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n{\n  /*\n  |---------------------------------------------------------------\n  | Cookies config\n  |---------------------------------------------------------------\n  |\n  | The cookie settings are used to set up the session id cookie\n  | and also the driver will use the same values.\n  |\n  */\n  cookie: {\n    path: '/',\n    httpOnly: true,\n    sameSite: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Group Limit in HasManyThrough Relationship Preloading\nDESCRIPTION: Shows how to use the 'groupLimit' method with SQL window functions to limit the number of related records fetched for each group during relationship preloading.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait Country.query().preload('posts', (query) => {\n  query.groupLimit(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Plain Cookies in Frontend JavaScript\nDESCRIPTION: A simplified example of reading an AdonisJS plain cookie in frontend JavaScript. Shows how to extract the cookie value, Base64 decode it, and parse the JSON string.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Reading the cookie value\n */\nconst userIdValue = document.cookie.split('user_id=')[1].split(';')[0]\n\n/**\n * Base 64 decoding the value\n */\nconst base64Decoded = atob(userIdValue)\n\n/**\n * Converting the JSON string to an object\n */\nconst jsonParsed = JSON.parse(base64Decoded)\nconsole.log(jsonParsed)\n```\n\n----------------------------------------\n\nTITLE: Directly Importing Config in AdonisJS\nDESCRIPTION: How to import and use the config module directly, as an alternative to accessing it through the Application instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport Config from '@ioc:Adonis/Core/Config'\n\nConfig.get('app.secret')\n```\n\n----------------------------------------\n\nTITLE: Rendering User Data with Edge Template in TypeScript\nDESCRIPTION: This snippet demonstrates how to pass an array of user objects to an Edge template for rendering.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nview.render('users', {\n  users: [\n    {\n      username: 'virk',\n    },\n    {\n      username: 'romain',\n    },\n    {\n      username: 'nikk',\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing IoC Container in AdonisJS\nDESCRIPTION: How to access the Inversion of Control container instance in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.container\n```\n\n----------------------------------------\n\nTITLE: Creating Sentence from Array in Edge Templates\nDESCRIPTION: Joins an array of words with appropriate separators to form a grammatically correct sentence with customizable separators.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n{{ \n  toSentence([\n    'route',\n    'middleware',\n    'controller'\n  ])\n}}\n\n<!-- route, middleware, and controller -->\n```\n\n----------------------------------------\n\nTITLE: Implementing afterFetch Hook for User Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an afterFetch hook in a User model. The hook is called after multiple user records are fetched from the database, allowing for post-processing of the user instances array.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/hooks.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseModel,\n  afterFetch,\n} from '@ioc:Adonis/Lucid/Orm'\n\nexport default class User extends BaseModel {\n  @afterFetch()\n  public static afterFetchHook (users: User[]) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time in TypeScript with AdonisJS I18n\nDESCRIPTION: Demonstrates how to use the formatRelativeTime method of the AdonisJS I18n module to format a DateTime object into a relative time string.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst luxonDate = DateTime.local().plus({ hours: 2 })\nI18n\n  .locale('en')\n  .formatRelativeTime(luxonDate, 'hours')\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Mail Driver Type in AdonisJS\nDESCRIPTION: This code snippet demonstrates how to inform TypeScript about a new custom mail driver by extending the MailDrivers interface in the contracts/mail.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostMarkConfig } from '../providers/PostMarkDriver'\n\ndeclare module '@ioc:Adonis/Addons/Mail' {\n  interface MailDrivers {\n    postmark: {\n      config: PostMarkConfig,\n      implementation: MailDriverContract\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Locale\nDESCRIPTION: Demonstrates how to access the current locale setting\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.locale('en').locale === 'en'\n```\n\n----------------------------------------\n\nTITLE: Conditional Querying with 'unless' in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the 'unless' helper for conditional querying, which is the opposite of the 'if' helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('projects')\n  .unless(filters.status, () => {\n    /**\n     * Fetch projects with \"active\" status when\n     * not status is defined in filters\n     */\n    query.where('status', 'active')\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .unless(\n    condition,\n    (query) => {}, // if condition met\n    (query) => {}, // otherwise execute this\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Model Reference in HasManyThrough Relationship\nDESCRIPTION: Shows how to access the related model in a HasManyThrough relationship using the 'relatedModel' property, which returns a function that provides the related model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User])\n  public posts: HasManyThrough<typeof Post>\n}\n\nCountry.$getRelation('posts').relatedModel() // Post\n```\n\n----------------------------------------\n\nTITLE: Customizing the Truncation Suffix in Edge Templates\nDESCRIPTION: Shows how to use a custom suffix string instead of the default ellipsis when truncating text using the suffix option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/truncate.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  truncate(\n    'This is a very long sentence that i would like to be shortened',\n    18,\n    { suffix: ' [Read more]' }\n  )\n}}\n\n<!-- Output: This is a very long [Read more] -->\n```\n\n----------------------------------------\n\nTITLE: Connection Event Handlers\nDESCRIPTION: Examples of handling various connection-related events including connect, error, and disconnect.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.manager.on('db:connection:connect', (connection) => {\n  console.log(self === connection) // true\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.manager.on('db:connection:error', (error, connection) => {\n  console.log(connection)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.manager.on('db:connection:disconnect', (connection) => {\n  console.log(connection)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Builder in Migration\nDESCRIPTION: Example showing how to access the schema builder instance, which returns a new instance on every access.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    // every access call returns a new instance\n    console.log(this.schema !== this.schema)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching or Creating Multiple Posts for a User in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates the use of fetchOrCreateMany method to create or fetch posts with unique slugs for a given user. The foreignKey is implicitly added as a lookup key for finding unique rows.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = [\n  {\n    title: 'Adonis 101',\n    slug: 'adonis-101',\n  },\n  {\n    title: 'Lucid 101',\n    slug: 'lucid-101',\n  }\n]\n\nawait user\n  .related('posts')\n  .fetchOrCreateMany(posts, 'slug')\n```\n\n----------------------------------------\n\nTITLE: Clearing Limit in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates how to clear a previously set limit on a database query using the clearLimit method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = Database.query().limit(20)\nquery.clone().clearLimit()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Input Fields in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to provide default values when accessing input fields that might be missing or undefined.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns \"Hello world\" if title is missing\nrequest.input('title', 'Hello world')\n```\n\n----------------------------------------\n\nTITLE: Improved Route Definition with Model Name as Parameter\nDESCRIPTION: Improved route definition that uses the model name as the parameter name. This provides better semantic meaning in the URL.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get('/posts/:post(slug)', 'PostsController.show')\n```\n\n----------------------------------------\n\nTITLE: Applying maxLength Rule to String Schema in AdonisJS\nDESCRIPTION: This example demonstrates how to apply the maxLength validation rule to a string schema, restricting username length to 40 characters. The validation will fail if the username exceeds this limit.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/max-length.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.maxLength(40)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Unless Conditional in Edge Template\nDESCRIPTION: Illustrates the use of the @unless tag in an Edge template, which is the inverse of @if, to conditionally display a message for inactive accounts.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/conditionals.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@unless(account.isActive)\n  <p> Please verify the email address to activate your account </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Custom Messages for Nested Objects and Arrays in AdonisJS\nDESCRIPTION: This example shows how to define custom validation messages for nested objects and arrays using dot notation in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-messages.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  messages: {\n    'user.username.required': 'Missing value for username',\n    'tags.*.number': 'Tags must be an array of numbers',\n    'products.*.title.required': 'Each product must have a title'\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Naming for Resourceful Routes\nDESCRIPTION: This example demonstrates how to customize the naming prefix for resourceful routes using the .as method. This allows you to change the generated route names while maintaining the same URL structure.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.resource('posts', 'PostsController').as('articles')\n```\n\n----------------------------------------\n\nTITLE: Complete URL Validation Options\nDESCRIPTION: Demonstrates all available options for URL validation including protocol requirements, TLD validation, and length restrictions.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/url.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  website: schema.string([\n    rules.url({\n      protocols: ['http', 'https', 'ftp'],\n      requireTld: true,\n      requireProtocol: false,\n      requireHost: true,\n      allowedHosts: [],\n      bannedHosts: [],\n      validateLength: false\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Production Environment in AdonisJS\nDESCRIPTION: A shorthand way to check if the application is running in production environment using the inProduction property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.inProduction\n\n// Same as\nApplication.nodeEnvironment === 'production'\n```\n\n----------------------------------------\n\nTITLE: Using @debugger Tag in Edge Templates\nDESCRIPTION: The @debugger tag is an inline tag that inserts the JavaScript debugger keyword into the compiled template output. This allows developers to use Chrome DevTools to debug the compiled templates at runtime.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/debugger.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@debugger\n```\n\n----------------------------------------\n\nTITLE: Route with Unbound Parameters\nDESCRIPTION: Route definition with both bound and unbound parameters. The version parameter is a raw value while post is bound to a model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nRoute.get(\n  '/api/:version/posts/:post',\n  'PostsController.show'\n)\n```\n\n----------------------------------------\n\nTITLE: Using request Helper for Route Matching in Edge\nDESCRIPTION: Shows how to use the request helper to access the current HTTP request and check if it matches a specific route for conditional styling.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{ route('UsersController.index') }}\" class=\"{{ (request.matchesRoute('namedRoute')) ? 'link-active' : 'link-inactive' }}\">\n  Users\n</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Distinct Validation for Literal Arrays\nDESCRIPTION: Shows how to implement distinct validation rule for an array of literal values using the wildcard operator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/distinct.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema\n    .array([\n      rules.distinct('*')\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Model from Database\nDESCRIPTION: Shows how to retrieve the first row from the database, relying on the default order of the underlying database engine. Returns a model instance or null.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.first()\n```\n\n----------------------------------------\n\nTITLE: Authorization Checks with bouncer Helper in Edge\nDESCRIPTION: Shows how to conditionally render elements based on authorization policies using the bouncer helper from @adonisjs/bouncer.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n@if(await bouncer.allows('editPost'))\n  <a href=\"/posts/1/edit\"> Edit post </a>\n@end\n```\n\n----------------------------------------\n\nTITLE: Custom Query Builder Implementation\nDESCRIPTION: Shows how to override the $getQueryFor method to customize query building for different model operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryClientContract } from '@ioc:Adonis/Lucid/Database'\nimport { BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends BaseModel {\n  public $getQueryFor(\n    action: 'insert' | 'update' | 'delete' | 'refresh',\n    client: QueryClientContract,\n  ) {\n    if (action === 'insert') {\n      return client.insertQuery().table(User.table)\n    }\n\n    return client.modelQuery(User).where('id', this.$primaryKeyValue)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example i18n Translation Object Structure\nDESCRIPTION: Demonstrates the expected structure of the translations object with language codes as top-level keys.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  en: {},\n  fr: {},\n  it: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Various Data Types in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates encrypting different data types including objects, arrays, booleans, numbers, and dates. Date objects are automatically converted to ISO strings during encryption.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/encryption.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Object\nEncryption.encrypt({\n  id: 1,\n  fullName: 'virk',\n})\n\n// Array\nEncryption.encrypt([1, 2, 3, 4])\n\n// Boolean\nEncryption.encrypt(true)\n\n// Number\nEncryption.encrypt(10)\n\n// Date objects are converted to ISO string\nEncryption.encrypt(new Date())\n```\n\n----------------------------------------\n\nTITLE: Trusted Proxy Configuration\nDESCRIPTION: Configuration example for setting up trusted proxies in AdonisJS application config.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  trustProxy: proxyAddr.compile('127.0.0.0/8')\n}\n\n// or\n{\n  trustProxy: proxyAddr.compile(['127.0.0.0/8', 'fc00:ac:1ab5:fff::1/64'])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  trustProxy: proxyAddr.compile((address, index) => {\n    return address === '127.0.0.1' || address === '123.123.123.123'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Message Existence\nDESCRIPTION: Verifying if a translation message exists for a given key\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst i18n = I18n.locale('en')\n\nif (i18n.hasMessage('messages.greeting')) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Lifecycle Hooks in AdonisJS\nDESCRIPTION: Shows how to implement lifecycle hooks (prepare, run, completed) in an AdonisJS command to execute code before and after the main command execution.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Greet extends BaseCommand {\n  public async prepare() {\n    console.log('before run')\n  }\n\n  public async run() {\n    console.log('run')\n  }\n\n  public async completed() {\n    console.log('after run')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the HasMany Relationship Type Property\nDESCRIPTION: Demonstrates how to access the 'type' property of a HasMany relationship, which is always set to 'hasMany'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n\nUser.$getRelation('posts').type // 'hasMany'\n```\n\n----------------------------------------\n\nTITLE: Components as Tags in Edge\nDESCRIPTION: Shows how to use components as custom tags when stored in the components directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/components.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n<button type=\"{{ type }}\">\n  {{ text }}\n</button>\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!button({\n  type: 'primary',\n  text: 'Login'\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Custom Attributes with Factory Data\nDESCRIPTION: Examples of overriding default factory attributes for single and multiple instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/factories.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait UserFactory\n  .merge({ email: 'test@example.com' })\n  .create()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait UserFactory\n  .merge([\n    { email: 'foo@example.com' },\n    { email: 'bar@example.com' },\n  ])\n  .createMany(3)\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Debugging\nDESCRIPTION: Shows how to enable debugging for queries executed by the query client to help with troubleshooting.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclient.debug = true\n\nawait client.from('users').select('*')\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Query Execution in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to execute a basic raw SQL query using the Database module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/raw-query-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nawait Database.rawQuery('select * from users')\n```\n\n----------------------------------------\n\nTITLE: Custom Ordering with orderByRaw in AdonisJS\nDESCRIPTION: The orderByRaw method allows defining the sort order using a raw SQL string, providing maximum flexibility for complex sorting requirements.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst commentsCountQuery = Database\n  .raw(\n    'select count(*) from comments where posts.id = comments.post_id'\n  )\n  .wrap('(', ')')\n\nDatabase\n  .from('posts')\n  .orderBy(commentsCountQuery, 'desc')\n```\n\n----------------------------------------\n\nTITLE: Implementing String Escaping with AdonisJS Validator\nDESCRIPTION: Shows how to apply the escape sanitization rule to a username field in a validation schema. The rule converts special characters (<, >, &, ', \", /) into their corresponding HTML entities for safe output.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/escape.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.escape()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Serialization\nDESCRIPTION: Shows how to customize the serialization name for a BelongsTo relationship using decorator options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/belongs-to.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Post extends BaseModel {\n  @belongsTo(() => User, {\n    serializeAs: 'user'\n  })\n  public author: BelongsTo<typeof User>\n}\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation Route Handler\nDESCRIPTION: Route handler demonstrating content negotiation using request.accepts() to serve different content types based on Accept header.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('posts', async ({ request, view }) => {\n  const posts = [\n    {\n      title: 'Adonis 101',\n    },\n  ]\n\n  switch (request.accepts(['html', 'json'])) {\n    case 'html':\n      return view.render('posts/index', { posts })\n    case 'json':\n      return posts\n    default:\n      return view.render('posts/index', { posts })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Global Helpers in Edge Templates\nDESCRIPTION: Demonstrates the usage of globally registered helpers and data within Edge templates, showing both the nl2br function and menu array iteration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/data-flow.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<p> {{{ nl2br(post.description) }}} </p>\n\n@each(item in menu)\n  <a href=\"{{ item.url }}\"> {{ item.text }} </a>\n@end\n```\n\n----------------------------------------\n\nTITLE: Safely Escaping User Input with nl2br in Edge Templates\nDESCRIPTION: Demonstrates the correct way to escape user input before converting newlines to <br> tags to prevent XSS attacks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n{{{ nl2br(e(post.content)) }}}\n```\n\n----------------------------------------\n\nTITLE: Optional Number Validation in AdonisJS\nDESCRIPTION: Makes a number field optional by chaining the optional() method. Undefined and null values are considered optional and removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/number.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  marks: schema.number.optional()\n}\n```\n\n----------------------------------------\n\nTITLE: URL Validation with Banned Hosts\nDESCRIPTION: Validates URLs while explicitly banning certain domains. URLs from specified domains will fail validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/url.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  website: schema.string([\n    rules.url({\n      bannedHosts: [\n        'acme.com',\n        'example.com'\n      ]\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Making Path to Migrations Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the migrations directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.migrationsPath('users.ts')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Top-Level Access to AsyncLocalStorage\nDESCRIPTION: Example of an incorrect implementation where AsyncLocalStorage is accessed at the top level of a module, which can lead to memory leaks and unexpected behavior.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\nconst ctx = HttpContext.get()\n\nexport default class UsersController {\n  public async index() {\n    ctx.request\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS AppProvider for Socket.io Integration\nDESCRIPTION: Updates the AppProvider to initialize Socket.io after the AdonisJS HTTP server is ready, ensuring proper setup timing.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/socketio-with-adonisjs.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// title: providers/AppProvider.ts\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async ready() {\n    if (this.app.environment === 'web') {\n      await import('../start/socket')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Meta Tag with csrfMeta Helper in Edge\nDESCRIPTION: Demonstrates how to add a meta tag containing the CSRF token using the csrfMeta helper provided by @adonisjs/shield.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n<head>\n  {{ csrfMeta() }}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Reading Encrypted Cookies in AdonisJS\nDESCRIPTION: Demonstrates how to read encrypted cookies using the request.encryptedCookie method. This method handles decryption automatically.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ request }) => {\n  console.log(request.encryptedCookie('user_id'))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Up and Down Methods in Schema Migration\nDESCRIPTION: Complete example showing both up and down methods in a schema migration, demonstrating table creation and deletion.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public async up() {\n    this.schema.createTable('users', () => {\n    })\n  }\n\n  public async down() {\n    this.schema.dropTable('users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Newline Control in Edge Templates\nDESCRIPTION: Using the tilde character to control whitespace and newlines in Edge template output.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n<p>Hello\n@if(username)~\n {{ username }}\n@endif~\n</p>\n```\n\n----------------------------------------\n\nTITLE: Sending Calendar Events via Mailer\nDESCRIPTION: Example demonstrating how to send calendar invites using the mailer's calendar API.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/june-2021-release.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMail.sendLater((message) => {\n  message.icalEvent((calendar) => {\n    calendar\n      .createEvent({\n        summary: 'Adding support for ALS',\n        start: DateTime.local().plus({ minutes: 30 }),\n        end: DateTime.local().plus({ minutes: 60 }),\n      })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using @super for Section Inheritance in Edge\nDESCRIPTION: Demonstrates how to inherit existing section content using the @super tag while adding additional content to a section.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/layout.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@layout('layouts/main')\n\n@section('scripts')\n  @super\n  <script src=\"{{ asset('autocomplete.js') }}\"></script>\n@end\n```\n\n----------------------------------------\n\nTITLE: Handling Guest Users in AdonisJS PostPolicy\nDESCRIPTION: This example illustrates how to allow guest users to access certain policy actions by using the @action decorator with allowGuest option set to true.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/authorization.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class PostPolicy extends BasePolicy {\n\n  @action({ allowGuest: true })\n  public async view(user: User | null, post: Post) {\n    if (post.status === 'published') {\n      return true\n    }\n\n    if (!user) {\n      return false\n    }\n\n    return post.userId === user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locale-Specific I18n Instances\nDESCRIPTION: Shows how to create I18n instances for specific locales.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst en = I18n.locale('en')\nconst fr = I18n.locale('fr')\n```\n\n----------------------------------------\n\nTITLE: Using Now Helper in Schema Migration\nDESCRIPTION: Example of using the now helper method to set CURRENT_TIMESTAMP as default value for timestamp columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntable.timestamp('created_at').defaultTo(this.now())\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Locale\nDESCRIPTION: Demonstrates how to access the default locale configured in the application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconsole.log(I18n.defaultLocale)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Foreign Key in HasManyThrough Relationship\nDESCRIPTION: Shows how to explicitly define the 'foreignKey' in a HasManyThrough relationship, which is the reference on the through model (not the related model).\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User], {\n    foreignKey: 'countryId', // countryId column on the \"User\" model\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BelongsTo Relationship Keys\nDESCRIPTION: Examples of explicitly defining localKey and foreignKey for BelongsTo relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/belongs-to.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Post extends BaseModel {\n  @column()\n  public userId: number\n\n  @belongsTo(() => User, {\n    foreignKey: 'userId', // userId column on \"Post\" model\n  })\n  public author: BelongsTo<typeof User>\n}\n```\n\n----------------------------------------\n\nTITLE: Array with Any Member Types\nDESCRIPTION: Defines an array that can contain elements of any type without specific type validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  themeOptions: schema.array().anyMembers()\n}\n```\n\n----------------------------------------\n\nTITLE: Using the t Helper for Message Formatting\nDESCRIPTION: Shows usage of the t helper which is an alias for the i18n.formatMessage method. This helper is used to retrieve and format localized messages.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/view-helpers.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{ t('messages.title') }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Success Message in Edge Template for AdonisJS\nDESCRIPTION: Edge template syntax for conditionally displaying a success message from flash messages in AdonisJS applications.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@if(flashMessages.has('success'))\n  <p>{{ flashMessages.get('success') }}</p>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Mutating Object Properties with @set in Edge\nDESCRIPTION: Demonstrates how to use @set to update properties of an existing object. This example shows updating a simple property 'title' of a 'post' object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/mutations.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@set(post, 'title', 'This is the new title')\n```\n\n----------------------------------------\n\nTITLE: Dropping All Custom Database Types\nDESCRIPTION: Shows how to drop all custom types in Postgres and Redshift databases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dropAllTypes()\n```\n\n----------------------------------------\n\nTITLE: Creating Factories with Ace Commands in AdonisJS\nDESCRIPTION: Examples of using ace commands to create factories and models with associated factories in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:factory User\n\n# create a factory with model\nnode ace make:model User -f\n\n# create factory + migration with model\nnode ace make:model User -cf\n```\n\n----------------------------------------\n\nTITLE: Database Health Reporting\nDESCRIPTION: Shows how to get health check reports for database connections.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst report = await Database.report()\n\nconsole.log(report.name)\nconsole.log(report.health.healthy)\n```\n\n----------------------------------------\n\nTITLE: Database Query Methods\nDESCRIPTION: Various methods for executing database queries including model queries and raw queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.query()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.insertQuery()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\nconst query = Database.modelQuery(User)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database\n  .rawQuery('select * from users where id = ?', [1])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.knexQuery()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .knexRawQuery('select * from users where id = ?', [1])\n```\n\n----------------------------------------\n\nTITLE: Mail Configuration Setup\nDESCRIPTION: Configuration setup for mail package with multiple mailers using different drivers\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mailConfig } from '@adonisjs/mail/build/config'\n\nexport default mailConfig({\n  mailer: 'mailgun',\n  mailers: {\n    mailgun: {\n      driver: 'mailgun',\n      baseUrl: 'https://api.mailgun.net/v3',\n      key: Env.get('MAILGUN_API_KEY'),\n      domain: Env.get('MAILGUN_DOMAIN'),\n    },\n\n    smtp: {\n      driver: 'smtp',\n      host: Env.get('SMTP_HOST') as string,\n      port: Env.get('SMTP_PORT') as string,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Route Helper with Object Parameters in Edge\nDESCRIPTION: Demonstrates using named parameters as an object when generating a URL with the route helper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/route.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<form\n  action=\"{{ route('PostsController.update', { id: 1 }) }}\"\n  method=\"POST\"\n>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Local Key in HasMany Relationship\nDESCRIPTION: Shows how to explicitly define the localKey for a HasMany relationship, using the model property name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasMany(() => Post, {\n    localKey: 'id', // id column on \"User\" model\n  })\n  public posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive SQL Query Example\nDESCRIPTION: SQL query generated for case-insensitive unique validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT email FROM users WHERE LOWER(email) = LOWER(?)\n```\n\n----------------------------------------\n\nTITLE: Making Absolute Path from Application Root in AdonisJS\nDESCRIPTION: How to create an absolute path from the root of an AdonisJS application to any file within the application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.makePath('app/Middleware/Auth.ts')\n```\n\n----------------------------------------\n\nTITLE: Using Request ID in AdonisJS Logger (TypeScript)\nDESCRIPTION: Demonstrates how the request ID is automatically included in log statements when using the logger instance from the HTTP context.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', ({ logger }) => {\n  // { msg: 'hello world', request_id: 'ckk9oliws0000qt3x9vr5dkx7' }\n  logger.info('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Making Path to Seeds Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the seeds directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.seedsPath('Database.ts')\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Attributes\nDESCRIPTION: Example showing how to create a model instance and access its $attributes property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.fullName = 'Harminder Virk'\nuser.password = 'secret'\n\nconsole.log(user.$attributes) // { fullName, password }\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Foreign Key in HasOne Relationship\nDESCRIPTION: Shows how to explicitly define a custom foreign key for a HasOne relationship, using the model property name rather than the database column name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasOne(() => Profile, {\n    foreignKey: 'userId', // userId column on \"Profile\" model\n  })\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Using NOWAIT in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the noWait method, which causes the query to fail immediately if any selected rows are locked by another transaction. This is supported in MySQL 8.0+ and PostgreSQL 9.5+.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .where('id', 1)\n  .forUpdate()\n  .noWait() // 👈\n  .first()\n\n/**\nSELECT * FROM \"users\"\nWHERE \"id\" = 1\nFOR UPDATE NOWAIT\n*/\n```\n\n----------------------------------------\n\nTITLE: Using Inspect Helper with Various JavaScript Data Types in Edge Templates\nDESCRIPTION: Example demonstrating the inspect helper to pretty print various JavaScript primitives including objects, arrays, buffers, BigInt, Symbol, Sets, Maps, WeakSets, WeakMaps, and Date objects. The output is visualized for easy debugging.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/inspect.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  inspect({\n    a: 1,\n    b: [3, 4, undefined, null],\n    c: undefined,\n    d: null,\n    e: {\n      regex: /^x/i,\n      buf: Buffer.from('abc'),\n      holes: holes\n    },\n    balance: BigInt(100),\n    id: Symbol('1234'),\n    scores: new Set([1, 2, 3]),\n    classes: new Map([['english', '1st'], ['maths', '2nd']]),\n    currentScores: new WeakSet([[1, 2, 3]]),\n    currentClasses: new WeakMap([[['english', '1st'], ['maths', '2nd']]]),\n    now: new Date()\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for Specific Connection in AdonisJS CLI\nDESCRIPTION: This shell command runs migrations for a specific database connection in AdonisJS. It uses the --connection flag to specify the target connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnode ace migration:run --connection=products\n```\n\n----------------------------------------\n\nTITLE: Inspecting All Session Data with Edge\nDESCRIPTION: Uses the inspect helper together with session.all() to display all available session data in an Edge template.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/session.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ inspect(session.all()) }}\n```\n\n----------------------------------------\n\nTITLE: Adding Command Aliases in Ace\nDESCRIPTION: Example showing how to add command aliases to an Ace command, allowing users to invoke the command using alternative names.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n  // highlight-start\n  public static aliases = ['welcome', 'hi']\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NotIn Validation Rule Usage in TypeScript\nDESCRIPTION: Demonstrates how to use the notIn validation rule to prevent specific values from being used in a username field.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/not-in.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.notIn(['admin', 'super', 'root'])\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Making enum Fields Both Nullable and Optional in AdonisJS\nDESCRIPTION: Shows how to make a field both nullable and optional by chaining the nullableAndOptional method. Undefined values are removed, but null values are preserved in the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  account_type: schema.enum.nullableAndOptional(Object.values(SocialAccounts))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeder Paths in AdonisJS\nDESCRIPTION: This TypeScript code snippet shows how to configure the paths for loading database seeder files in the config/database.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mysql: {\n    client: 'mysql2',\n    seeders: {\n      paths: ['./database/seeders', '@somepackage/seeders-dir']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Human Readable Byte Strings to Bytes in Edge Templates\nDESCRIPTION: Converts human-readable byte strings back to their numeric byte values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n{{ toBytes('1KB') }} <!-- 1024 -->\n```\n\n----------------------------------------\n\nTITLE: Date Validation with Additional Rules in AdonisJS\nDESCRIPTION: Adds extra validation rules to a date property such as after and before constraints to restrict the date range.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  published_at: schema.date({}, [\n    rules.after('today'),\n    rules.before(10, 'days'),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Application is Shutting Down in AdonisJS\nDESCRIPTION: How to check if the application is in the process of shutting down, which can be useful for graceful shutdown handling.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.isShuttingDown\n```\n\n----------------------------------------\n\nTITLE: Using Defer Method in Schema Migration\nDESCRIPTION: Example of using the defer method to wrap custom database operations that should be executed in sequence.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npublic async up() {\n  this.defer(async () => {\n    // Only executed when not running in dry-run mode\n    await this.db.from('users')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Arguments in Ace Command\nDESCRIPTION: Example showing how to define multiple positional arguments in an Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport default class Greet extends BaseCommand {\n  @args.string()\n  public name: string\n\n  @args.string()\n  public age: string\n\n  @args.string()\n  public height: string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Route Model Binding in AdonisJS\nDESCRIPTION: Steps to install the route model binding package via npm. This is the first step in setting up route model binding.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// title: 1. Install\nnpm i @adonisjs/route-model-binding@1.0.1\n```\n\n----------------------------------------\n\nTITLE: Table Inheritance in PostgreSQL\nDESCRIPTION: Sets the parent table for inheritance in PostgreSQL. This method is only available within createTable calls and is ignored for other databases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('capitals', (table) => {\n  table.inherits('cities')\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to snake_case in Edge Templates\nDESCRIPTION: Converts a string to its snake_case version where words are lowercase and separated by underscores.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{ snakeCase('helloWorld') }}\n\n<!-- Output: hello_world -->\n```\n\n----------------------------------------\n\nTITLE: Rate Limits Migration Schema\nDESCRIPTION: Database migration schema for creating the rate_limits table used by the database store.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'rate_limits'\n\n  public async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.string('key', 255).notNullable().primary()\n      table.integer('points', 9).notNullable()\n      table.bigint('expire').unsigned()\n    })\n  }\n\n  public async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration Merging\nDESCRIPTION: TypeScript interface declaration for extending the RequestContract with custom methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Request' {\n  interface RequestContract {\n    wantsJSON(): boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Flags in Ace Command\nDESCRIPTION: Example showing how to define string flags in an Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\n@flags.string()\npublic email: string\n\n@flags.string()\npublic password: string\n```\n\n----------------------------------------\n\nTITLE: Implementing query Method for ORM Adapter\nDESCRIPTION: Implementation of the query method that returns a model query builder instance for a given model constructor, which is called by the Model.query method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract, ModelAdapterOptions } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public query(model: typeof BaseModel, options?: ModelAdapterOptions) {\n    return Database.modelQuery(model)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Model Instances in TypeScript with AdonisJS\nDESCRIPTION: The delete method removes the corresponding row from the database and freezes the model instance for further modifications. The instance can still be used for reading values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nif (user) {\n  await user.delete()\n\n  console.log(user.$isDeleted) // true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing paginationMetaKeys Method\nDESCRIPTION: Implementation of the paginationMetaKeys method to define pagination metadata key names.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public paginationMetaKeys() {\n    return {\n      total: 'total',\n      perPage: 'per_page',\n      currentPage: 'current_page',\n      lastPage: 'last_page',\n      firstPage: 'first_page',\n      firstPageUrl: 'first_page_url',\n      lastPageUrl: 'last_page_url',\n      nextPageUrl: 'next_page_url',\n      previousPageUrl: 'previous_page_url',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mail Config in AdonisJS\nDESCRIPTION: Steps to update the Mail config file to use the new mailConfig method for type inference.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { mailConfig } from '@adonisjs/mail/build/config'\n\nexport default mailConfig({\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Data with groupBy in AdonisJS Database Queries\nDESCRIPTION: The groupBy method applies the group by clause to the query. It groups rows that have the same values in specified columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('logs')\n  .select('url')\n  .groupBy('url')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Service Provider Implementation with Top-level Imports\nDESCRIPTION: This example demonstrates an incorrect way to implement a service provider with top-level imports, which won't work because the container bindings aren't available until the application is booted.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\nimport Route from '@ioc:Adonis/Core/Route'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    Route.get('/', async () => {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Seeder in AdonisJS\nDESCRIPTION: This command creates a main seeder file named Index in the database/seeders/MainSeeder directory using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:seeder MainSeeder/index\n\n# CREATE: database/seeders/MainSeeder/Index.ts\n```\n\n----------------------------------------\n\nTITLE: Using mergeRecursive in Lucid Model Factory\nDESCRIPTION: Example of using the new mergeRecursive method to pass attributes to all children relationships in Lucid model factories.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nawait TenantFactory\n  .with('users', 1, (user) => {\n    user\n      .mergeRecursive({ tenantId: user.parent.id })\n      .with('posts', 2)\n  })\n  .create()\n```\n\n----------------------------------------\n\nTITLE: Defining Spread Arguments in Ace Command\nDESCRIPTION: Example showing how to define a spread argument in an Ace command to capture multiple values into an array.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseCommand, args } from '@adonisjs/core/build/standalone'\n\nexport default class FileReader extends BaseCommand {\n  public static commandName = 'read'\n\n  // highlight-start\n  @args.spread()\n  public files: string[]\n    // highlight-end\n\n  public async run () {\n    console.log(this.files)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking AdonisJS REPL Setup\nDESCRIPTION: Command to initialize and setup the REPL package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode ace invoke @adonisjs/repl\n```\n\n----------------------------------------\n\nTITLE: Discord OAuth Configuration in AdonisJS Ally (TypeScript)\nDESCRIPTION: Provides the configuration options for the Discord OAuth driver in AdonisJS Ally, including client ID, secret, callback URL, and Discord-specific options.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndiscord: {\n  driver: 'discord',\n  clientId: '',\n  clientSecret: '',\n  callbackUrl: '',\n\n  // Discord specific\n  prompt: 'consent' | 'none',\n  guildId: '',\n  disableGuildSelect: false,\n  permissions: 10,\n  // identify scope is always required\n  scopes: ['identify', 'email'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Component in Edge\nDESCRIPTION: Example of using a registered in-memory template as a component\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n@!component('uikit/button', {\n  title: 'Signup',\n  class: ['btn', 'btn-primary'],\n  id: 'signup'\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Same Process in AdonisJS\nDESCRIPTION: Shows how to execute another AdonisJS command within the same process using the Ace kernel. Note that this approach doesn't provide the exit code for the executed command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/build/standalone'\n\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n\n  public async run() {\n    // highlight-start\n    await this.kernel.exec('make:controller', ['User'])\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Template Basic Syntax\nDESCRIPTION: Demonstrates Edge's HTML-like template syntax with variable interpolation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n<h1> {{ title }} </h1>\n<p> Written with love by {{ author }} </p>\n<p> This will be safe: {{ theGreat }} </p>\n```\n\n----------------------------------------\n\nTITLE: Validator Class with Custom Reporter\nDESCRIPTION: Example of defining a custom error reporter in a validator class\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/error-reporters.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, validator } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContextContract) {}\n\n  public reporter = validator.reporters.api\n\n  public schema = schema.create({\n    // ... schema properties\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Charset in MySQL\nDESCRIPTION: Sets the character set for a database table in MySQL. This method is only available within createTable calls and is ignored for other databases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.charset('utf8')\n})\n```\n\n----------------------------------------\n\nTITLE: URL Validation with Allowed Hosts\nDESCRIPTION: Validates URLs while restricting them to specific allowed domains. In this example, only twitter.com URLs are permitted.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/url.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  twitterProfile: schema.string([\n    rules.url({\n      // Only twitter.com urls are allowed\n      allowedHosts: ['twitter.com']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Boolean Schema Validation\nDESCRIPTION: Combined implementation of nullable and optional boolean validation, allowing both null values and optional field existence.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/boolean.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accepted: schema.boolean.nullableAndOptional()\n}\n```\n\n----------------------------------------\n\nTITLE: Hash Driver Interface - TypeScript\nDESCRIPTION: Interface definition for implementing custom hash drivers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HashDriverContract {\n  ids?: string[]\n  params?: any\n\n  make(value: string): Promise<string>\n  needsReHash?(hashedValue: string): boolean\n  verify(hashedValue: string, plainValue: string): Promise<boolean>\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Schemas in AdonisJS\nDESCRIPTION: Demonstrates how to drop a PostgreSQL schema using the dropSchema method. This is often used in the down method of migrations that create schemas.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass FoundationSchema extends BaseSchema {\n  public down() {\n    this.schema.dropSchema('public')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Flags in AdonisJS Commands\nDESCRIPTION: Examples of using flag decorators to define number and number array parameters in CLI commands.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.number({ alias: 'i' })\npublic iterations: number\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.numArray()\npublic counters: number[]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Local Key in HasOne Relationship\nDESCRIPTION: Shows how to explicitly define a custom local key for a HasOne relationship, using the model property name rather than the database column name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasOne(() => Profile, {\n    localKey: 'id', // id column on \"User\" model\n  })\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Transactions in Schema Migration\nDESCRIPTION: Example of disabling transaction wrapping for database queries in a schema migration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public disableTransactions = true\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Session Data in AdonisJS API Tests\nDESCRIPTION: Demonstrates how to write and read session data, including flash messages, in API tests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nawait client.get('/').session({ user_id: 1 })\n\nawait client.get('/').flashMessages({\n  errors: {\n    title: ['Post title is required']\n  }\n})\n\nconst response = await client.get('/')\nconsole.log(response.session())\nconsole.log(response.flashMessages())\n\nresponse.dumpSession()\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Listeners Namespace in JSON\nDESCRIPTION: This JSON configuration allows customization of the event listeners namespace in the .adonisrc.json file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namespaces\": {\n    \"eventListeners\": \"App/CustomDir/Listeners\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites in AdonisJS\nDESCRIPTION: Configuration for defining test suites in an AdonisJS application. Includes suite name, file patterns for test files, and timeout settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n \"tests\": {\n    \"suites\": [\n      {\n        \"name\": \"functional\",\n        \"files\": [\n          \"tests/functional/**/*.spec.ts\"\n        ],\n        \"timeout\": 30000\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Flag in Ace Command\nDESCRIPTION: Example showing how to define an array flag in an Ace command to accept multiple values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\n@flags.array()\npublic files: string[]\n```\n\n----------------------------------------\n\nTITLE: Viewing Complete Configuration File with Ace Command\nDESCRIPTION: Command to display the complete contents of the .adonisrc.json file using the Ace CLI tool.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace dump:rcfile\n```\n\n----------------------------------------\n\nTITLE: Working with Original Model Data\nDESCRIPTION: Demonstrates tracking changes between original and current attributes using $original and $isDirty.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\nconsole.log(user.$original === user.$attributes) // true\nconsole.log(user.$isDirty) // false\n\nuser.fullName = 'Harminder Virk'\nconsole.log(user.$isDirty) // true\nconsole.log(user.$dirty) // diff between $original and $attributes\n\nawait user.save() // persist and update $original\n\nconsole.log(user.$isDirty) // false\n```\n\n----------------------------------------\n\nTITLE: Installing Mail Package\nDESCRIPTION: Command to install the AdonisJS mail package alpha version.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/mail@alpha\n```\n\n----------------------------------------\n\nTITLE: Validator Rule Updates in TypeScript\nDESCRIPTION: Migration from blacklist to notIn rule and updating host validation properties for URL rules.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.notIn(['admin', 'super'])\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  twitterHandle: schema.string([\n    rules.url({\n      allowedHosts: ['twitter']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Model in HasOne Relationship\nDESCRIPTION: Shows how to access the related model in a HasOne relationship using the 'relatedModel' method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n\nUser.$getRelation('profile').relatedModel() // Profile\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Handler Namespace in AdonisJS\nDESCRIPTION: Configuration for specifying the namespace of the class that handles HTTP exceptions in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exceptionHandlerNamespace\": \"App/Exceptions/Handler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Messages in JSON for AdonisJS I18n\nDESCRIPTION: Demonstrates how to set up translations for auth exceptions in a JSON file for use with AdonisJS I18n.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"E_INVALID_AUTH_SESSION\": \"Your session has expired\",\n  \"E_INVALID_API_TOKEN\": \"Invalid or expired API token\",\n  \"E_INVALID_BASIC_CREDENTIALS\": \"Invalid credentials\",\n  \"E_INVALID_AUTH_UID\": \"Invalid credentials\",\n  \"E_INVALID_AUTH_PASSWORD\": \"Invalid credentials\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript-accessible Plain Cookies in AdonisJS\nDESCRIPTION: Demonstrates setting a plain cookie with httpOnly disabled to allow access from frontend JavaScript. This configuration is necessary for client-side cookie manipulation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.plainCookie('user_id', 1, {\n  httpOnly: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Database in AdonisJS\nDESCRIPTION: Shows how to disconnect from the database and destroy the Knex instance(s) using the disconnect method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait connection.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment Variables TypeScript Types\nDESCRIPTION: Creates type definitions for environment variables to enable TypeScript intellisense. Uses declaration merging to extend the EnvTypes interface with custom types from the env.ts file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Env' {\n  type CustomTypes = typeof import('../env').default\n  interface EnvTypes extends CustomTypes {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP and DOM Testing Dependencies\nDESCRIPTION: Commands to install Supertest and JSDOM for HTTP and DOM testing in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D supertest @types/supertest jsdom @types/jsdom\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D supertest @types/supertest jsdom @types/jsdom\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Date Validation in AdonisJS\nDESCRIPTION: Makes a date property both nullable and optional. Undefined values are removed, while other values (including null) are returned after validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: schema.date.nullableAndOptional({\n    format: 'yyyy-MM-dd HH:mm:ss',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Client for HasManyThrough Relationship\nDESCRIPTION: Shows how to access the query client for a HasManyThrough relationship using the 'related' method on a model instance, which allows fetching related rows from the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst country = await Country.find(1)\ncountry.related('posts') // HasManyThroughClientContract\n```\n\n----------------------------------------\n\nTITLE: Adding Table Indexes\nDESCRIPTION: Adds an index to a table over specified columns with optional index name and type. Supports PostgreSQL and MySQL specific index types.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('users', (table) => {\n  table.index(['first_name', 'last_name'], 'user_name_index')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware Using Ace CLI\nDESCRIPTION: Command to generate a new middleware file using AdonisJS Ace CLI tool.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:middleware LogRequest\n\n# CREATE: app/Middleware/LogRequest.ts\n```\n\n----------------------------------------\n\nTITLE: Assigning Global Naming Strategy\nDESCRIPTION: Demonstrates how to set a naming strategy globally for all models by assigning it to the BaseModel.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@ioc:Adonis/Lucid/Orm'\nBaseModel.namingStrategy = new CamelCaseNamingStrategy()\n```\n\n----------------------------------------\n\nTITLE: Creating Listener Class with Ace Command\nDESCRIPTION: This command creates a new listener class for handling events in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:listener User\n\n# CREATE: app/Listeners/User.ts\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Array Validation\nDESCRIPTION: Configures an array property to be both nullable and optional, allowing for undefined or null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema.array\n    .nullableAndOptional([// 👈\n      rules.minLength(1)\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Database Table Operations\nDESCRIPTION: Shortcut methods for table operations and query building.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.from('users')\n// Is same as\nDatabase.connection().from('users')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.table('users')\n// Is same as\nDatabase.connection().table('users')\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Database Views\nDESCRIPTION: Shows how to get a list of all views in the connected database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst views = await client.getAllViews()\nconsole.log(views)\n```\n\n----------------------------------------\n\nTITLE: Disk Mounting Configuration\nDESCRIPTION: Configuration for mounting multiple view directories with unique names\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport View from '@ioc:Adonis/Core/View'\nimport Application from '@ioc:Adonis/Core/Application'\n\nView.mount('material', Application.resourcesPath('themes/material'))\nView.mount('elegant', Application.resourcesPath('themes/elegant'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Custom Database Types\nDESCRIPTION: Shows how to get all custom types in a Postgres or Redshift database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst types = await client.getAllTypes()\nconsole.log(types)\n```\n\n----------------------------------------\n\nTITLE: Creating Migration with Specific Connection in AdonisJS CLI\nDESCRIPTION: This shell command creates a new migration file for a specific database connection in AdonisJS. It uses the --connection flag to specify the target connection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:migration --connection=products\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listener File with Ace Command\nDESCRIPTION: This command creates a new file for defining event listeners in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/events.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:prldfile events\n\n# SELECT ALL THE ENVIRONMENTS\n```\n\n----------------------------------------\n\nTITLE: Complete .adonisrc.json Configuration Example\nDESCRIPTION: A full example of the .adonisrc.json configuration file showing all available options including directory paths, namespaces, preloads, providers, and test configurations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript\": true,\n  \"directories\": {\n    \"config\": \"config\",\n    \"public\": \"public\",\n    \"contracts\": \"contracts\",\n    \"providers\": \"providers\",\n    \"database\": \"database\",\n    \"migrations\": \"database/migrations\",\n    \"seeds\": \"database/seeders\",\n    \"resources\": \"resources\",\n    \"views\": \"resources/views\",\n    \"start\": \"start\",\n    \"tmp\": \"tmp\",\n    \"tests\": \"tests\"\n  },\n  \"exceptionHandlerNamespace\": \"App/Exceptions/Handler\",\n  \"preloads\": [\n    {\n      \"file\": \"./start/routes\",\n      \"optional\": false,\n      \"environment\": [\n        \"web\",\n        \"console\",\n        \"test\"\n      ]\n    },\n    {\n      \"file\": \"./start/kernel\",\n      \"optional\": false,\n      \"environment\": [\n        \"web\",\n        \"console\",\n        \"test\"\n      ]\n    },\n    {\n      \"file\": \"./start/views\",\n      \"optional\": false,\n      \"environment\": [\n        \"web\",\n        \"console\",\n        \"test\"\n      ]\n    },\n    {\n      \"file\": \"./start/events\",\n      \"optional\": false,\n      \"environment\": [\n        \"web\"\n      ]\n    }\n  ],\n  \"namespaces\": {\n    \"models\": \"App/Models\",\n    \"middleware\": \"App/Middleware\",\n    \"exceptions\": \"App/Exceptions\",\n    \"validators\": \"App/Validators\",\n    \"httpControllers\": \"App/Controllers/Http\",\n    \"eventListeners\": \"App/Listeners\",\n    \"redisListeners\": \"App/Listeners\"\n  },\n  \"aliases\": {\n    \"App\": \"app\",\n    \"Config\": \"config\",\n    \"Database\": \"database\",\n    \"Contracts\": \"contracts\"\n  },\n  \"metaFiles\": [\n    {\n      \"pattern\": \"public/**\",\n      \"reloadServer\": false\n    },\n    {\n      \"pattern\": \"resources/views/**/*.edge\",\n      \"reloadServer\": false\n    }\n  ],\n  \"commands\": [\n    \"./commands\",\n    \"@adonisjs/core/build/commands\",\n    \"@adonisjs/repl/build/commands\"\n  ],\n  \"commandsAliases\": {\n  },\n  \"tests\": {\n    \"suites\": [\n      {\n        \"name\": \"functional\",\n        \"files\": [\n          \"tests/functional/**/*.spec.ts\"\n        ],\n        \"timeout\": 30000\n      }\n    ]\n  },\n  \"providers\": [\n    \"./providers/AppProvider\",\n    \"@adonisjs/core\",\n    \"@adonisjs/session\",\n    \"@adonisjs/view\"\n  ],\n  \"aceProviders\": [\n    \"@adonisjs/repl\"\n  ],\n  \"testProviders\": [\n    \"@japa/preset-adonis/TestsProvider\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema Context in AdonisJS Migrations\nDESCRIPTION: Shows how to specify the database schema context for subsequent operations using the withSchema method. This is particularly useful in PostgreSQL databases with multiple schemas.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema-builder.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public up() {\n    this.schema\n      .withSchema('public')\n      .createTable('users', (table) => {\n        table.increments()\n        table.string('name')\n        table.timestamp('created_at', { useTz: true })\n        table.timestamp('updated_at', { useTz: true })\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Implementation\nDESCRIPTION: Example of implementing a text-based progress bar using logger updates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/build/standalone'\n\nexport default class Greet extends BaseCommand {\n  public static commandName = 'greet'\n\n  private getProgressBar(currentPercentage: number) {\n    const completed = Math.ceil(currentPercentage / 3)\n    const incomplete = Math.ceil((100 - currentPercentage) / 3)\n    return `[${new Array(completed).join('=')}${new Array(incomplete).join(' ')}]`\n  }\n\n  public async run () {\n    for (let i = 0; i <= 100; i = i + 2) {\n      await new Promise((resolve) => setTimeout(resolve, 50))\n      this.logger.logUpdate(`downloading ${this.getProgressBar(i)} ${i}%`)\n    }\n\n    this.logger.logUpdatePersist()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Testing with Fakes\nDESCRIPTION: Example of using Event fakes for testing event emissions\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\n\nconst fakeEmitter = Event.fake()\nEvent.emit('new:user')\n\nfakeEmitter.exists('new:user')\n\nEvent.restore()\n```\n\n----------------------------------------\n\nTITLE: Implementing relationPivotTable Method\nDESCRIPTION: Implementation of the relationPivotTable method for naming many-to-many pivot tables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public relationPivotTable(\n    _relation: 'manyToMany',\n    model: typeof BaseModel,\n    relatedModel: typeof BaseModel\n  ) {\n    return string.snakeCase(\n      [relatedModel.name, model.name]\n        .sort()\n        .join('_')\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Command Aliases in AdonisJS\nDESCRIPTION: Configuration for creating multiple command aliases in AdonisJS. This example shows how to define two different aliases for the same migration:run command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commandsAliases\": {\n    \"migrate\": \"migration:run\",\n    \"up\": \"migration:run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Driver - TypeScript\nDESCRIPTION: TypeScript type declarations for the custom hash driver.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlainTextDriver } from '../providers/HashDriver'\n\ndeclare module '@ioc:Adonis/Core/Hash' {\n  interface HashDrivers {\n    plainText: {\n      config: {\n        driver: 'plainText',\n      }\n      implementation: PlainTextDriver\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing refresh Method for ORM Adapter\nDESCRIPTION: Skeleton implementation of the refresh method that reloads model data from the database, used to ensure the model has fresh data after external changes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public async refresh(instance: BaseModel) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Aliases in AdonisJS\nDESCRIPTION: Configuration for creating memorable aliases for Ace commands. Allows defining shorthand or alternative names for commands that are harder to remember.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commandsAliases\": {\n    \"migrate\": \"migration:run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Method Spoofing in AdonisJS HTML\nDESCRIPTION: HTML example demonstrating form method spoofing to use PUT method in AdonisJS applications, which is useful for HTTP verbs not supported by standard HTML forms.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"/posts/1?_method=PUT\"></form>\n```\n\n----------------------------------------\n\nTITLE: Updating Drive Contract in AdonisJS\nDESCRIPTION: Steps to update the Drive contract file to use type inference from the config file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { InferDisksFromConfig } from '@adonisjs/core/build/config'\nimport driveConfig from '../config/drive'\n\ndeclare module '@ioc:Adonis/Core/Drive' {\n  interface DisksList extends InferDisksFromConfig<typeof driveConfig> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relationships Loader for Multiple Relations\nDESCRIPTION: Shows how to load multiple relationships using the relationships loader, which provides a more chainable API for loading several relations at once.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the relationships loader\nawait user.load((loader) => {\n  loader.load('profile').load('posts')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Japa Test Configuration\nDESCRIPTION: Updates the test file configuration in japaFile.ts to use TypeScript files directly instead of compiled JavaScript files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  files: ['test/**/*.spec.ts'],\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Removing All Casing from Strings in Edge Templates\nDESCRIPTION: Removes all kinds of casing from a string, converting it to lowercase with spaces between words regardless of original format.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n{{ noCase('hello-world') }} <!-- hello world -->\n{{ noCase('hello_world') }} <!-- hello world -->\n{{ noCase('helloWorld') }} <!-- hello world -->\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AdonisJS Packages\nDESCRIPTION: Commands to upgrade AdonisJS core packages to their latest versions using npm.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/june-2021-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/assembler@latest\nnpm i @adonisjs/ally@latest\nnpm i @adonisjs/lucid@latest\nnpm i @adonisjs/mail@latest\nnpm i @adonisjs/core@latest\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Related Model Instances\nDESCRIPTION: Shows how to save multiple existing model instances as related records using the saveMany method, which automatically sets up the foreign key relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst comment1 = new Comment()\ncomment1.body = 'This is a great post'\n\nconst comment2 = new Comment()\ncomment2.body = 'Well written'\n\nawait Post\n  .related('comments')\n  .saveMany([comment1, comment2])\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Headers for CORS in AdonisJS\nDESCRIPTION: These snippets demonstrate different ways to configure allowed headers for CORS requests in AdonisJS. It includes examples of using boolean values, arrays, and functions to specify allowed headers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  headers: true\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  headers: [\n    'Content-Type',\n    'Accept',\n    'Cookie'\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ALLOWED_HEADERS = []\n\n{\n  headers: (requestHeaders: string) => {\n    return ALLOWED_ORIGINS.includes(requestHeaders)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Importing Helpers Module in AdonisJS\nDESCRIPTION: How to import and use the helpers module directly, as an alternative to accessing it through the Application instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\n\nstring.snakeCase('helloWorld')\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Hash Driver - TypeScript\nDESCRIPTION: Provider implementation for registering a custom hash driver.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const { PlainTextDriver } = await import('./HashDriver')\n    const Hash = this.app.container.use('Adonis/Core/Hash')\n\n    Hash.extend('plainText', () => {\n      return new PlainTextDriver()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Serialization of HasMany Relationship\nDESCRIPTION: Demonstrates how to customize the name used when serializing a HasMany relationship by setting the serializeAs option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasMany(() => Post, {\n    serializeAs: 'articles'\n  })\n  public posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Migration List Output in AdonisJS Migrator\nDESCRIPTION: This JSON snippet demonstrates the structure of the migration list returned by the getList method of the AdonisJS Migrator. It shows the name and status of each migration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"database/migrations/1623289360244_users\",\n    \"status\": \"pending\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Flattened Translation Messages Structure\nDESCRIPTION: Shows how nested messages should be flattened using dot notation in the language object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  en: {\n    'messages.title': '',\n    'messages.subtitle': ''\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Output of Grouped Join Conditions in AdonisJS\nDESCRIPTION: Shows the SQL generated by the complex join query with grouped conditions. This illustrates how the query builder translates TypeScript code into SQL syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"users\".*,\n  \"user_logins\".\"ip_address\",\n  \"user_logins\".\"country\"\nFROM \"users\"\n  INNER JOIN \"user_logins\" ON (\n    \"users\".\"id\" = \"user_logins\".\"user_id\" AND \"user_logins\".\"created_at\" > ?\n  )\n  or (\n    \"users\".\"id\" = \"user_logins\".\"account_id\" AND \"user_logins\".\"created_at\" > ?\n  )\n```\n\n----------------------------------------\n\nTITLE: URL Normalization Rules\nDESCRIPTION: Shows how to normalize URLs by ensuring specific protocols and stripping www subdomain using the normalizeUrl rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/url.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  website: schema.string([\n    rules.url(),\n    rules.normalizeUrl({\n      ensureProtocol: 'https',\n      stripWWW: true,\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Query vs Raw Method Comparison\nDESCRIPTION: Demonstrates the difference between rawQuery and raw methods in the Database module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/raw-query-builder.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.rawQuery('select * from users')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase.raw('select * from users')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait Database.select(\n  'id',\n  Database.raw('select ip_address from user_logins'),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Builder for HasManyThrough Relationship\nDESCRIPTION: Demonstrates how to access the HasManyThroughQueryBuilder for a relationship to perform custom queries on related data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst country = await Country.find(1)\n\ncountry.related('posts').query() // HasManyThroughQueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validator Message Bags in JSON for AdonisJS I18n\nDESCRIPTION: Demonstrates how to create custom validator message bags for specific parts of an application using AdonisJS I18n.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shared\": {},\n  \"contact\": {\n    \"email.required\": \"Enter the email so that we can contact you\",\n    \"message.required\": \"Describe your project in a few words.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aliasing Subquery in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to use the 'as' method to alias a subquery within a larger database query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select(\n    Database\n      .from('user_logins')\n      .select('ip_address')\n      .whereColumn('users.id', 'user_logins.user_id')\n      .orderBy('id', 'desc')\n      .limit(1)\n      .as('last_login_ip') // 👈 Query alias\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Templates\nDESCRIPTION: Examples of accessing environment variables and config in Edge templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{ env('APP_KEY') }}\n{{ config('app.key') }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the debug method to enable or disable debugging at an individual query level. This is useful for troubleshooting specific queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .debug(true)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flash Messages with all() Method\nDESCRIPTION: Shows how to retrieve all flash messages as an object using the all() method, then accessing individual properties directly. This provides access to the complete flash message data structure.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/flash-messages.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{{ flashMessages.all().username }}\n```\n\n----------------------------------------\n\nTITLE: Extending SnakeCaseNamingStrategy in TypeScript\nDESCRIPTION: Basic example of extending the SnakeCaseNamingStrategy class to create a custom naming strategy.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SnakeCaseNamingStrategy } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  //... define all the required methods\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping All Database Tables\nDESCRIPTION: Shows how to drop all tables in the database, with optional schema specification for Postgres and Redshift.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dropAllTables()\n\n// specify schemas ( for Postgres and Redshift )\nawait client.dropAllTables(['public'])\n```\n\n----------------------------------------\n\nTITLE: Session Readonly Check in TypeScript\nDESCRIPTION: Example of checking session readonly status before modification\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nif (!session.readonly) {\n  session.put('key', 'value')\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Namespaces in AdonisJS\nDESCRIPTION: Configuration example for changing the default namespace of controllers in an AdonisJS application. This allows for customizing the directory structure of application components.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namespaces\": {\n    \"httpControllers\": \"App/Controllers\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Configuration to disable database rollbacks in production environment for safety.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  pg: {\n    client: 'pg',\n    migrations: {\n      disableRollbacksInProduction: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware for AdonisJS API Authentication\nDESCRIPTION: Command to generate a new middleware for setting authorization headers using Ace CLI. This middleware will be used to extract the auth token from cookies and add it to request headers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:middleware SetAuthorizationHeader\n```\n\n----------------------------------------\n\nTITLE: Using afterOrEqualToField Rule in AdonisJS Validator\nDESCRIPTION: This example shows how to use the afterOrEqualToField rule to ensure a published_at date is either the same as or after a drafted_at date. This validation allows the two dates to be equal, unlike the afterField rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after-field.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  drafted_at: schema.date(),\n  published_at: schema.date({}, [\n    rules.afterOrEqualToField('drafted_at')\n  ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Field Validation Examples\nDESCRIPTION: Demonstrates different approaches for handling optional fields using nullable and optional modifiers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nschema: schema.create({\n  fullName: schema.string.nullable(),\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = await request.validate({\n  schema: schema.create({\n    fullName: schema.string.nullableAndOptional(),\n  })\n})\n\nconst user = await User.findOrFail(1)\nuser.merge(payload)\nawait user.save()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = await request.validate({\n  schema: schema.create({\n    email: schema.string.optional(),\n  })\n})\n\nconst user = await User.findOrFail(1)\nuser.merge(payload)\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Updating Commands Index File for AdonisJS\nDESCRIPTION: TypeScript code to update the ./commands/index.ts file for listing directory files in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { listDirectoryFiles } from '@adonisjs/core/build/standalone'\nimport Application from '@ioc:Adonis/Core/Application'\n\nexport default listDirectoryFiles(__dirname, Application.appRoot, ['./commands/index'])\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Loader in AppProvider\nDESCRIPTION: Shows how to register the custom database loader in the application's provider boot method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// title: providers/AppProvider.ts\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n// highlight-start\nimport { DbLoader } from './DbLoader'\n// highlight-end\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public register() {\n    // Register your own bindings\n  }\n\n  // highlight-start\n  public async boot() {\n    const I18n = this.app.container.resolveBinding('Adonis/Addons/I18n')\n    const Db = this.app.container.resolveBinding('Adonis/Lucid/Database')\n\n    I18n.extend('db', 'loader', (_, config) => {\n      return new DbLoader(Db, config)\n    })\n  }\n  // highlight-end\n\n  public async ready() {\n    // App is ready\n  }\n\n  public async shutdown() {\n    // Cleanup, since app is going down\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Database Transaction in AdonisJS\nDESCRIPTION: Shows how to commit a database transaction using the commit() method on the transaction client.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/transaction-client.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Setting Exposed Headers for CORS in AdonisJS\nDESCRIPTION: This snippet shows how to configure exposed headers for CORS requests in AdonisJS. It sets the 'exposeHeaders' property to an array of header names to be exposed.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/cors.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  exposeHeaders: [\n    'cache-control',\n    'content-language',\n    'content-type',\n    'expires',\n    'last-modified',\n    'pragma',\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Japa Test Runner\nDESCRIPTION: Commands to install Japa and other required dependencies using npm or yarn.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D japa execa@5.1.1 get-port@5.1.1\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D japa execa@5.1.1 get-port@5.1.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variables with env Helper in Edge\nDESCRIPTION: Demonstrates accessing environment variables using the env helper, which references the Env.get method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{ env('APP_URL') }}\n```\n\n----------------------------------------\n\nTITLE: Accessing HasOne Relationship Name\nDESCRIPTION: Shows how to access the 'relationName' property of a HasOne relationship, which corresponds to the property name defined on the parent model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n\nUser.$getRelation('profile').relationName // 'profile'\n```\n\n----------------------------------------\n\nTITLE: Using groupByRaw for Custom Group By Clauses in AdonisJS\nDESCRIPTION: The groupByRaw method allows writing a custom SQL query to define the group by statement, providing more flexibility for complex grouping operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('sales')\n  .select('year')\n  .groupByRaw('year WITH ROLLUP')\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Testing in AdonisJS\nDESCRIPTION: Demonstrates how to register an OpenAPI schema for testing in the bootstrap file of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const plugins: Config['plugins'] = [\n  assert({\n    openApi: {\n      schemas: [Application.makePath('api-spec.yml')],\n    },\n  }),\n  runFailedTests(),\n  apiClient(),\n]\n```\n\n----------------------------------------\n\nTITLE: Translations Table Migration Schema\nDESCRIPTION: Database migration for creating the translations table with locale, key, and message columns.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Translations extends BaseSchema {\n  protected tableName = 'translations'\n\n  public async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.string('locale', 8).notNullable()\n      table.string('key').notNullable()\n      table.text('message', 'longtext').notNullable()\n\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n\n      table.unique(['locale', 'key'])\n    })\n  }\n\n  public async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Formatting with Intl API\nDESCRIPTION: TypeScript example showing number formatting using the Intl API wrapper.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n\n  .locale('en')\n  .formatNumber(123456.789, {\n    maximumSignificantDigits: 3\n  })\n```\n\n----------------------------------------\n\nTITLE: Extending I18n Capabilities\nDESCRIPTION: Shows how to extend I18n functionality with custom formatters and translation loaders.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.extend('name', 'formatter', () => new Impl())\nI18n.extend('name', 'loader', () => new Impl())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Locales\nDESCRIPTION: Shows how to get an array of all supported locales in the application using the getSupportedLocales helper function in Edge templates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/view-helpers.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ getSupportedLocales() }}\n```\n\n----------------------------------------\n\nTITLE: Importing ORM Decorators in AdonisJS\nDESCRIPTION: Shows how to import various ORM decorators from the Lucid ORM package in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  column,\n  hasOne,\n  scope,\n  beforeSave,\n  beforeFind,\n  // ... and so on\n} from '@ioc:Adonis/Lucid/Orm'\n```\n\n----------------------------------------\n\nTITLE: Footer Partial Implementation\nDESCRIPTION: Basic footer partial template containing the footer markup.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/partials.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n// title: partials/footer.edge\n<footer class=\"footer\"></footer>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Custom Relationship Aggregates\nDESCRIPTION: Shows how to lazy load custom aggregate values from relationships for a model instance using the loadAggregate method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail()\nawait post.loadAggregate('comments', (query) => {\n  query.count('*').as('commentsCount')\n})\n\nconsole.log(post.$extras.commentsCount)\n```\n\n----------------------------------------\n\nTITLE: Clearing Offset in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to clear a previously set offset on a database query using the clearOffset method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = Database.query().offset(20)\nquery.clone().clearOffset()\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Stream Processing - TypeScript\nDESCRIPTION: Example of handling and accessing errors during stream processing.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.multipart.onFile('input_field_name', {}, (part) => {\n  throw new Error('blow up the stream')\n})\n\nawait request.multipart.process()\n\nconst file = request.input('input_field_name')\nconsole.log(file.errors)\n```\n\n----------------------------------------\n\nTITLE: Implementing columnName Method\nDESCRIPTION: Implementation of the columnName method to convert model properties to database column names.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public columnName(_model: typeof BaseModel, propertyName: string) {\n    return string.snakeCase(propertyName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Class Fields\nDESCRIPTION: Required TypeScript configuration for proper class field definitions in Lucid models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"useDefineForClassFields\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Header Partial Implementation\nDESCRIPTION: Basic header partial template containing the header markup.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/partials.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n// title: partials/header.edge\n<header class=\"header\"></header>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Deprecated Dependencies for AdonisJS Upgrade\nDESCRIPTION: Command to remove @adonisjs/fold and @adonisjs/ace packages as they are now encapsulated within @adonisjs/core.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall @adonisjs/fold @adonisjs/ace\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations in AdonisJS\nDESCRIPTION: Shows various commands for rolling back migrations, including rolling back the latest batch, rolling back to a specific batch, and resetting all migrations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/migrations.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Rollback the latest batch\nnode ace migration:rollback\n\n# Rollback until the start of the migration\nnode ace migration:rollback --batch=0\n\n# Rollback until batch 1\nnode ace migration:rollback --batch=1\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message for Password Confirmation in TypeScript using AdonisJS\nDESCRIPTION: Demonstrates how to set a custom error message for the confirmation validation rule.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/confirmed.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'password_confirmation.confirmed': 'Password do not match'\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Recipe Data with Edge Template in TypeScript\nDESCRIPTION: This snippet shows how to pass an object containing recipe ingredients and their amounts to an Edge template for rendering.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/loops.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nview.render('recipes', {\n  food: {\n    ketchup: '5 tbsp',\n    mustard: '1 tbsp',\n    pickle: '0 tbsp'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Select Operation with Transaction\nDESCRIPTION: Creates a select query using the transaction object. This query will operate within the transaction's context, ensuring data consistency with other operations in the same transaction.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/transactions.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait trx\n  .query()\n  .select('*')\n  .from('users')\n```\n\n----------------------------------------\n\nTITLE: Switching SQLite Dependencies in AdonisJS\nDESCRIPTION: Commands to update SQLite dependencies after upgrading to Knex 2.0 in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall @vscode/sqlite3\n\nnpm install sqlite3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Locale with getDefaultLocale in Edge\nDESCRIPTION: Demonstrates how to get the application's default locale using the getDefaultLocale helper function.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n{{ getDefaultLocale() }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Settings in AdonisJS\nDESCRIPTION: Shows the structure of cookie configuration in the AdonisJS config/app.ts file. This includes options for domain, path, maxAge, httpOnly, secure, and sameSite attributes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/app.ts\nhttp: {\n  cookie: {\n    domain: '',\n    path: '/',\n    maxAge: '2h',\n    httpOnly: true,\n    secure: false,\n    sameSite: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Foreign Key in HasMany Relationship\nDESCRIPTION: Shows how to explicitly define the foreignKey for a HasMany relationship, using the model property name.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @column()\n  public id: number\n\n  @hasMany(() => Post, {\n    foreignKey: 'userId', // userId column on \"Post\" model\n  })\n  public posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Using hasOne Decorator for One-to-One Relationships\nDESCRIPTION: Demonstrates how to use the hasOne decorator to define a one-to-one relationship between models.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/decorators.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hasOne, HasOne, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass User extends Model {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to camelCase in Edge Templates\nDESCRIPTION: Converts a string to its camelCase version where the first word starts with lowercase and subsequent words start with uppercase without separators.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ camelCase('hello-world') }}\n\n<!-- Output: helloWorld -->\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for MongoDB Auth Provider\nDESCRIPTION: Commands to create the necessary directory structure for a MongoDB authentication provider in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/custom-user-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir providers/MongoDbAuthProvider\ntouch providers/MongoDbAuthProvider/index.ts\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Driver in TypeScript\nDESCRIPTION: Demonstrates how to register a custom driver with the Drive module using a service provider.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/drive.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const { DummyDriver } = await import('./DummyDriver')\n    const Drive = this.app.container.use('Adonis/Core/Drive')\n\n    Drive.extend('dummy', (_drive, _diskName, config) => {\n      return new DummyDriver(config)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rules for Boolean Schema Validation\nDESCRIPTION: Example of implementing custom validation rules for boolean schema type, demonstrating how to extend the basic boolean validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/boolean.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  title: schema.boolean([\n    rules.myCustomRuleForBooleanType(),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HasOne Relationship Type\nDESCRIPTION: Shows how to access the 'type' property of a HasOne relationship, which is always set to 'hasOne'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasOne(() => Profile)\n  public profile: HasOne<typeof Profile>\n}\n\nUser.$getRelation('profile').type // 'hasOne'\n```\n\n----------------------------------------\n\nTITLE: Formatting Plurals\nDESCRIPTION: Using Intl.PluralRules to determine plural categories for numbers\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.locale('en').formatPlural(0)\n// other\n\nI18n.locale('en').formatPlural(1)\n// one\n\nI18n.locale('en').formatPlural(2)\n// other\n```\n\n----------------------------------------\n\nTITLE: Excerpt Generation with Custom Suffix\nDESCRIPTION: Demonstrates how to customize the suffix that appears at the end of truncated text using the suffix option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/excerpt.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  excerpt(\n    '<p> Hello, this is a dummy <strong> post </strong> </p>',\n    20,\n    { suffix: ' [Read more]' }\n  )\n}}\n\n<!-- Output: Hello, this is a dummy [Read more] -->\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Server in Watch Mode\nDESCRIPTION: Command to run the AdonisJS development server with in-memory TypeScript compilation and file watching.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/typescript-build-process.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ace serve --watch\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Existence Validation in TypeScript\nDESCRIPTION: Implementation of case-insensitive database existence validation using the caseInsensitive option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.exists({\n      table: 'users',\n      column: 'username',\n      caseInsensitive: true,\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Date Validation with Custom Format in AdonisJS\nDESCRIPTION: Validates a date property with a custom format defined using luxon's formatting syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: schema.date({\n    format: 'yyyy-MM-dd HH:mm:ss',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Applying groupOrderBy with groupLimit in HasManyQueryBuilder for Preloading in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use groupOrderBy in conjunction with groupLimit to order the limited group of preloaded posts. The groupOrderBy method is only needed when using groupLimit.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().preload('posts', (query) => {\n  query\n    .groupLimit(10)\n    .groupOrderBy('posts.created_at', 'desc')\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Data Structure for Object Array Validation\nDESCRIPTION: Example data structure showing an array of product objects with id and quantity properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/distinct.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"quantity\": 4,\n    },\n    {\n      \"id\": 3,\n      \"quantity\": 10,\n    },\n    {\n      \"id\": 8,\n      \"quantity\": 1,\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Phone Number Validation\nDESCRIPTION: Enhanced phone number validation with strict mode enabled. Requires country code and + symbol prefix in the phone number format.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/mobile.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mobile: schema.string([\n    rules.mobile({ strict: true })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Unescaped HTML Output in Edge\nDESCRIPTION: Using triple curly braces to render unescaped HTML content when the content is trusted.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{{ '<script> alert(`foo`) </script>' }}}\n```\n\n----------------------------------------\n\nTITLE: Session Driver Registration in AppProvider\nDESCRIPTION: Shows how to register a custom session driver in the application provider\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  public static needsApplication = true\n\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const { MemoryDriver } = await import('./SessionDriver')\n    const Session = this.app.container.use('Adonis/Addons/Session')\n\n    Session.extend('memory', () => {\n      return new MemoryDriver()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Driver Contract\nDESCRIPTION: TypeScript contract definition for Spotify driver in Ally authentication.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@ioc:Adonis/Addons/Ally' {\n  // ...other mappings\n  spotify: {\n    config: SpotifyDriverConfig\n    implementation: SpotifyDriverContract\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Model Binding in AdonisJS\nDESCRIPTION: Command to configure the route model binding package in an AdonisJS application. It updates the tsconfig.json and .adonisrc.json files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/route-model-binding.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n// title: 2. Configure\nnode ace configure @adonisjs/route-model-binding\n\n# UPDATE: tsconfig.json { types += \"@adonisjs/route-model-binding/build/adonis-typings\" }\n# UPDATE: .adonisrc.json { providers += \"@adonisjs/route-model-binding/build/providers/RmbProvider\" }\n```\n\n----------------------------------------\n\nTITLE: Updating Mail Contract in AdonisJS\nDESCRIPTION: Steps to update the Mail contract file to use type inference from the config file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { InferMailersFromConfig } from '@adonisjs/mail/build/config'\nimport mailConfig from '../config/mail'\n\ndeclare module '@ioc:Adonis/Addons/Mail' {\n  interface MailersList extends InferMailersFromConfig<typeof mailConfig> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Naming Strategy for SimplePaginator in TypeScript\nDESCRIPTION: Demonstrates how to set a custom naming strategy globally for the SimplePaginator class. This code should be placed in a provider or preload file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContract } from '@ioc:Adonis/Core/Application'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async ready() {\n    const Db = this.app.container.use('Adonis/Lucid/Database')\n\n    Db.SimplePaginator.namingStrategy = {\n      paginationMetaKeys() {\n        return {\n          // ... same as above\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Related Models for Multiple Parents\nDESCRIPTION: Example showing how to set relationships for multiple parent models using the 'setRelatedForMany' method, which is internally used by Lucid's preloader.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst countries = [\n  Country {\n    id: 1,\n  },\n  Country {\n    id: 2,\n  },\n  Country {\n    id: 3,\n  }\n]\n\nconst posts = [\n  Post {\n    id: 1,\n    $extras: {\n      through_country_id: 1,\n    }\n  },\n  Post {\n    id: 2,\n    $extras: {\n      through_country_id: 1,\n    }\n  },\n  Post {\n    id: 3,\n    $extras: {\n      through_country_id: 2,\n    }\n  },\n  Post {\n    id: 4,\n    $extras: {\n      through_country_id: 3,\n    }\n  }\n]\n\nCountry.$getRelation('posts').setRelatedForMany(countries, posts)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Auto-Processing - TypeScript\nDESCRIPTION: Configuration options for disabling automatic file processing in the bodyparser config file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmultipart: {\n  autoProcess: false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directories in AdonisJS\nDESCRIPTION: Configuration for customizing the paths of known directories in an AdonisJS application. These settings are used by the framework and Ace commands to locate core application components.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directories\": {\n    \"config\": \"config\",\n    \"public\": \"public\",\n    \"contracts\": \"contracts\",\n    \"providers\": \"providers\",\n    \"database\": \"database\",\n    \"migrations\": \"database/migrations\",\n    \"seeds\": \"database/seeders\",\n    \"resources\": \"resources\",\n    \"views\": \"resources/views\",\n    \"start\": \"start\",\n    \"tmp\": \"tmp\",\n    \"tests\": \"tests\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Query Count Updates in TypeScript\nDESCRIPTION: Changes to Model.query().count() behavior requiring POJO method for count operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await SomeModel.query().pojo<{ total: number }>().count('id as total')\nconsole.log(count[0].total)\n```\n\n----------------------------------------\n\nTITLE: Converting Human Readable Time to Milliseconds in Edge Templates\nDESCRIPTION: Converts human-readable time strings back to their millisecond values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_15\n\nLANGUAGE: edge\nCODE:\n```\n{{ toMs('1min') }} <!-- 60000 -->\n```\n\n----------------------------------------\n\nTITLE: Aborting HTTP Requests in AdonisJS\nDESCRIPTION: Examples of using response.abort method to terminate requests with custom messages and status codes. The abort method raises an AbortException to stop request processing.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/response.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nif (!auth.user) {\n  response.abort('Not authenticated')\n\n  // with custom status\n  response.abort('Not authenticated', 401)\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with WhereIn Constraints\nDESCRIPTION: Implementation of unique validation using whereIn for array values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrules.unique({\n  table: 'users',\n  column: 'email',\n  where: {\n    account_type: ['member', 'vip'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Auth Guards for Routes\nDESCRIPTION: This snippet shows how to specify multiple authentication guards when applying the auth middleware. The middleware will attempt authentication with each guard in sequence until one succeeds.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.group(() => {\n  \n}).middleware('auth:web,api')\n```\n\n----------------------------------------\n\nTITLE: Implementing relationPivotForeignKey Method\nDESCRIPTION: Implementation of the relationPivotForeignKey method for naming foreign keys in pivot tables.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public relationPivotForeignKey(\n    _relation: 'manyToMany',\n    model: typeof BaseModel\n  ) {\n    return string.snakeCase(`${model.name}_${model.primaryKey}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Sentence Case in Edge Templates\nDESCRIPTION: Converts a string to sentence case by capitalizing only the first letter of the first word.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{ sentenceCase('hello-world') }}\n\n<!-- Output: Hello world -->\n```\n\n----------------------------------------\n\nTITLE: Database Query Debugging Setup\nDESCRIPTION: Event listener configuration for debugging database queries with different handling for production and development environments.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport Event from '@ioc:Adonis/Core/Event'\nimport Logger from '@ioc:Adonis/Core/Logger'\nimport Database from '@ioc:Adonis/Lucid/Database'\nimport Application from '@ioc:Adonis/Core/Application'\n\nEvent.on('db:query', (query) => {\n  if (Application.inProduction) {\n    Logger.debug(query.sql)\n  } else {\n    Database.prettyPrint(query)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Insert Query Builder Method\nDESCRIPTION: Demonstrates how to use the custom method that was added to the Insert query builder.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/query-builder.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\nawait Database.insertQuery().customMethod()\n```\n\n----------------------------------------\n\nTITLE: Database Store Configuration\nDESCRIPTION: Configuration for using database as a store for rate limiting data, including connection settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default limiterConfig({\n  default: 'db',\n  stores: {\n    db: {\n      client: 'db',\n      dbName: 'database_name',\n      tableName: 'rate_limits',\n      connectionName: 'connection_name',\n      clearExpiredByTimeout: true,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Config via Application in AdonisJS\nDESCRIPTION: How to access application configuration through the Application instance to retrieve configuration values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.config.get('app.secret')\n```\n\n----------------------------------------\n\nTITLE: Attaching Metadata to Processed Stream - TypeScript\nDESCRIPTION: Example of adding metadata to a processed file stream and accessing it.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/direct-file-uploads.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.multipart.onFile('input_field_name', {}, (part, reportChunk) => {\n  part.pause()\n  part.on('data', reportChunk)\n\n  const url = await someSdk.uploadStream(part)\n  return { url }\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time\nDESCRIPTION: Using Intl.RelativeTimeFormat to format relative time values\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst luxonDate = DateTime.local().plus({ hours: 2 })\nI18n\n  .locale('en')\n  .formatRelativeTime(luxonDate, 'hours')\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive SQL Query Example\nDESCRIPTION: SQL query demonstration of how case-insensitive validation is performed at the database level.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM users WHERE LOWER(username) = LOWER(?)\n```\n\n----------------------------------------\n\nTITLE: Development Deployment Script for Laravel Forge\nDESCRIPTION: Script for deploying AdonisJS application in development environment, including git operations, database migrations, and PM2 process management.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/laravel-forge.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd /home/forge/staging.api.yourdomain.com\n\ngit reset --hard;\n\ngit clean -df;\n\ngit pull origin $FORGE_SITE_BRANCH\n\n# migrate database\nnode ace migration:run --force\n\n# install npm dependencies\n yarn\n\n# reload pm2 \npm2 reload all --update-env\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in Schema Migration\nDESCRIPTION: Example of disabling query debugging for a specific schema migration class.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/schema.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  public debug = false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ORM Adapter in TypeScript\nDESCRIPTION: Demonstrates how to create a custom adapter that implements the AdapterContract interface, which is required for all custom ORM adapters.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract } from '@ioc:Adonis/Lucid/Orm'\nclass MyAdapter implements AdapterContract {}\n```\n\n----------------------------------------\n\nTITLE: Different duration offset examples for 'after' rule in AdonisJS validator\nDESCRIPTION: Demonstrates various duration options for the 'after' rule, including days, months, years, and minutes. These examples show how to create different time offset requirements for validation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrules.after(2, 'days')\nrules.after(1, 'month')\nrules.after(4, 'years')\nrules.after(30, 'minutes')\n```\n\n----------------------------------------\n\nTITLE: Creating Mailer Class via CLI\nDESCRIPTION: Command to generate a new mailer class using AdonisJS CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:mailer VerifyEmail\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Session Package\nDESCRIPTION: Commands to install the session package for AdonisJS v5 applications.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/session@6.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Storage Drivers\nDESCRIPTION: Commands to install and configure S3 and Google Cloud Storage drivers for AdonisJS Drive.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# For s3 and digital ocean spaces\nnpm i @adonisjs/drive-s3\nnode ace configure @adonisjs/drive-s3\n\n# For google cloud storage\nnpm i @adonisjs/drive-gcs\nnode ace configure @adonisjs/drive-gcs\n```\n\n----------------------------------------\n\nTITLE: Listening for Connection Event in AdonisJS\nDESCRIPTION: Shows how to listen for the 'connect' event emitted when the connect method is called.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.on('connect', (self) => {\n  console.log(self === connection) // true\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Additional Constraints\nDESCRIPTION: SQL query showing how additional where constraints are applied in the database query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/exists.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT slug FROM categories\n  WHERE slug = ?\n  AND tenant_id = ?\n  AND status = ?\n```\n\n----------------------------------------\n\nTITLE: Running Japa Tests for AdonisJS\nDESCRIPTION: Command to execute the Japa tests for an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/testing-adonisjs-apps.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode -r @adonisjs/assembler/build/register japaFile.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Global Method for Safe HTML Rendering in TypeScript\nDESCRIPTION: Demonstrates how to create a custom global method that returns safe HTML content using View.GLOBALS.safe(), allowing users to use double curly braces with custom helpers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/safe.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nView.global('input', (type: string, value: string) => {\n  return View.GLOBALS.safe(`<input type=\"${type}\" value=\"${value || ''}\" />`)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Alpha Validation in AdonisJS TypeScript\nDESCRIPTION: Basic implementation of alpha validation rule that ensures a string field contains only letters. This validation specifically works with the string schema type.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/alpha.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.alpha(),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with @set in Edge\nDESCRIPTION: Demonstrates how to declare a new variable using the @set tag in Edge. The compiled output shows the resulting JavaScript let declaration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/mutations.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@set('username', 'virk')\n```\n\nLANGUAGE: js\nCODE:\n```\nlet username = 'virk'\n```\n\n----------------------------------------\n\nTITLE: Updating Meta Files Configuration for Assembler\nDESCRIPTION: JSON configuration to notify the @adonisjs/assembler package about the change in the public directory path, updating the metaFiles pattern from 'public/**' to 'assets/**'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/static-assets.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metaFiles\": [\n    // delete-start\n    {\n      \"pattern\": \"public/**\",\n      \"reloadServer\": false\n    },\n    // delete-end\n    // insert-start\n    {\n      \"pattern\": \"assets/**\",\n      \"reloadServer\": false\n    }\n    // insert-end\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sentence Separators in Edge Templates\nDESCRIPTION: Customizes the separators used when joining words into a sentence, allowing for different separators between pairs, last items, and other words.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_11\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  toSentence([\n    'route',\n    'middleware',\n    'controller'\n  ], {\n    separator: '/ ',\n    lastSeparator: '/or '\n  })\n}}\n\n<!-- route/ middleware/or controller -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Validator Messages in JSON for AdonisJS I18n\nDESCRIPTION: Shows how to set up validator messages in a JSON file for use with AdonisJS I18n, including shared and field-specific messages.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shared\": {\n    \"required\": \"The value for the field is required\",\n    \"unique\": \"Email is already in use\",\n    \"minLength\": \"The field must have { minLength } items\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shared\": {\n    \"required\": \"The value for the field is required\",\n    \"username.required\": \"Username is required to create an account\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Development Environment in AdonisJS\nDESCRIPTION: A shorthand way to check if the application is running in development environment using the inDev property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.inDev\n\n// Same as\nApplication.nodeEnvironment === 'development'\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Indices while Looping with @each in Edge.js\nDESCRIPTION: This example demonstrates how to access both the value and the index when iterating over an array using @each. The index is accessed as the second parameter in the iteration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/each.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@each((username, key) in ['virk', 'nikk', 'romain'])\n  {{ key }} - {{ username }}\n@end\n```\n\n----------------------------------------\n\nTITLE: Redis Health Check Configuration\nDESCRIPTION: Configuration for enabling Redis health checks in AdonisJS\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/redis.ts\n{\n  local: {\n    host: Env.get('REDIS_HOST', '127.0.0.1') as string,\n    port: Env.get('REDIS_PORT', '6379') as string,\n    password: Env.get('REDIS_PASSWORD', '') as string,\n    db: 0,\n    keyPrefix: '',\n    healthCheck: true, // 👈 health check\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Driver for Testing in AdonisJS\nDESCRIPTION: Shows how to set up the memory session driver for testing in the .env.test file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/http-tests.md#2025-04-16_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nSESSION_DRIVER=memory\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Templates in AdonisJS Generator\nDESCRIPTION: Shows how to pass data to the Mustache template that will be used during file generation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nfile.apply({\n  resourceful: true\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Route Matching and Redirects in TypeScript\nDESCRIPTION: New methods for route matching and handling redirects in HTTP routes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nif (request.matchesRoute('PostsController.show')) {\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('guides/:doc', 'GuidesController.show')\nRoute.on('docs/:doc').redirect('GuidesController.show')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.on('blog/:slug').redirectToPath('https://medium.com/my-blog')\n```\n\n----------------------------------------\n\nTITLE: Redis Health Check Implementation\nDESCRIPTION: Route implementation for Redis health check endpoint\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\nimport HealthCheck from '@ioc:Adonis/Core/HealthCheck'\n\nRoute.get('health', async ({ response }) => {\n  const report = await HealthCheck.getReport()\n  \n  return report.healthy\n    ? response.ok(report)\n    : response.badRequest(report)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Version Components in AdonisJS\nDESCRIPTION: This snippet shows how to access individual components (major, minor, patch) of the application version in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(Application.version!.major)\nconsole.log(Application.version!.minor)\nconsole.log(Application.version!.patch)\n```\n\n----------------------------------------\n\nTITLE: Creating a Limiter Config Builder in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the allowRequests method to create an instance of the HttpLimiterConfigBuilder, which can be used to define request limits and durations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nLimiter.allowRequests(1000) // returns new HttpLimiterConfigBuilder()\n```\n\n----------------------------------------\n\nTITLE: Correct Usage in Static Methods\nDESCRIPTION: Proper implementation of AsyncLocalStorage in static methods rather than properties, ensuring context is retrieved for each method call.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n\nexport default class User extends BaseModel {\n  public static query() {\n    const ctx = HttpContext.get()!\n    return super.query({ connection: tenant.connection })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended AlphaNum Validation with Special Characters\nDESCRIPTION: Validates a username field with alphanumeric characters while allowing additional special characters like spaces, dashes, and underscores.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/alpha-num.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.alphaNum({\n      allow: ['space', 'underscore', 'dash']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Single Action Controller in Routes\nDESCRIPTION: Shows how to reference a single action controller in the routes file. For single action controllers, you only need to specify the controller name without a method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.post('/newsletter', 'RegisterNewsletterSubscriptionController')\n```\n\n----------------------------------------\n\nTITLE: Sample Data Structure for Literal Array Validation\nDESCRIPTION: Example data structure showing an array of numeric values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/distinct.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"tags\": [1, 10, 15, 8]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Where Constraint\nDESCRIPTION: Generated SQL query for unique validation with additional where constraint.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT email FROM users WHERE email = ? AND tenant_id = ?\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment-Specific Seeders in AdonisJS\nDESCRIPTION: This TypeScript code shows how to create a seeder that only runs in specific environments by setting the environment property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/seeders.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSeeder from '@ioc:Adonis/Lucid/Seeder'\n\nexport default class UserSeeder extends BaseSeeder {\n  public static environment = ['development', 'testing']\n\n  public async run () {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for AdonisJS Aliases\nDESCRIPTION: Configuration to be added to the tsconfig.json file to support AdonisJS import aliases in TypeScript. This enables the TypeScript compiler to resolve the aliases correctly.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"App/*\": [\n        \"./app/*\"\n      ],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Date Validation with Luxon in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates a more advanced use case using Luxon DateTime objects with schema references for dynamic date validation, allowing for more complex date calculations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-start\nimport { DateTime } from 'luxon'\n// highlight-end\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\nclass UserValidator {\n  // highlight-start\n  public refs = schema.refs({\n    allowedDate: DateTime.local().minus({ days: 2 })\n  })\n  // highlight-end\n\n  public schema = schema.create({\n    checkin_date: schema.date({}, [\n      // highlight-start\n      rules.before(this.refs.allowedDate)\n      // highlight-end\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Message in AdonisJS Controller\nDESCRIPTION: TypeScript code for PostsController demonstrating how to set and display a success message using flash messages after successful form submission in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/validator/validating-server-rendered-forms.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class PostsController {\n  public async store({ request, session, response }: HttpContextContract) {\n    // ... Collapsed existing code\n    console.log(payload)\n\n    session.flash('success', 'Post created successfully')\n    response.redirect().back()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in SPA Frontend\nDESCRIPTION: Frontend JavaScript code that constructs a callback URL with the query parameters received from the OAuth provider. Sends a request to the AdonisJS backend to complete the authentication process.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/auth/using-ally-with-api-guard.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Construct URL for the callback route.\n */\nconst url = new URL('http://localhost:3333/google/callback')\n\n/**\n * Add the query provided by google.\n */\nurl.search = window.location.search\n\n/**\n * Send the final request. You can use Axios if you want.\n */\nconst response = await fetch(url.toString(), {\n  method: 'GET',\n  headers: {\n    Accept: 'application/json'\n  },\n  credentials: 'include'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Test Environment in AdonisJS\nDESCRIPTION: A shorthand way to check if the application is running in test environment using the inTest property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.inTest\n\n// Same as\nApplication.nodeEnvironment === 'test'\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS REPL\nDESCRIPTION: Command to launch the AdonisJS REPL interface from the command line\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/repl.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace repl\n```\n\n----------------------------------------\n\nTITLE: Directly Importing Logger in AdonisJS\nDESCRIPTION: How to import and use the logger module directly, as an alternative to accessing it through the Application instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport Logger from '@ioc:Adonis/Core/Logger'\n\nLogger.info('hello world')\n```\n\n----------------------------------------\n\nTITLE: Accessing the HasMany Relationship Name\nDESCRIPTION: Shows how to access the 'relationName' property which represents the property name defined on the parent model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasMany(() => Post)\n  public posts: HasMany<typeof Post>\n}\n\nUser.$getRelation('posts').relationName // 'posts'\n```\n\n----------------------------------------\n\nTITLE: Query Timeout Configuration\nDESCRIPTION: Examples of setting query timeout with and without cancellation option\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/insert-query-builder.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .table('users')\n  .timeout(2000)\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: await Hash.make('secret'),\n  })\n```\n\n----------------------------------------\n\nTITLE: Environment Variables with Substitution\nDESCRIPTION: Example of variable substitution in .env files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\nHOST=localhost\nPORT=3333\nURL=$HOST:$PORT\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Name in AdonisJS\nDESCRIPTION: How to access the application name, which references the name property from package.json.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.appName\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of @set Tag\nDESCRIPTION: Shows how the Edge template @set tag is compiled to JavaScript, creating a local variable with the specified value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/set.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = 'AdonisJS - A fully featured framework';\n```\n\n----------------------------------------\n\nTITLE: Formatting Plurals with AdonisJS I18n\nDESCRIPTION: Demonstrates the use of the formatPlural method to determine the plural category for a given numeric value.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.locale('en').formatPlural(0)\n// other\n\nI18n.locale('en').formatPlural(1)\n// one\n\nI18n.locale('en').formatPlural(2)\n// other\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Validation in AdonisJS Schema\nDESCRIPTION: Demonstrates how to validate a numeric value to ensure it falls within a specified range (18-40) using the AdonisJS validator schema.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/range.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  age: schema.number([\n    rules.range(18, 40)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hash Contract in AdonisJS\nDESCRIPTION: Steps to update the Hash contract file to use type inference from the config file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { InferListFromConfig } from '@adonisjs/core/build/config'\nimport hashConfig from '../config/hash'\n\ndeclare module '@ioc:Adonis/Core/Hash' {\n  interface HashersList extends InferListFromConfig<typeof hashConfig> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Paginator Naming Strategy Per Query\nDESCRIPTION: Demonstrates how to set a custom naming strategy for a specific pagination query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nconst paginator = await Database.from('users').paginate()\npaginator.namingStrategy = new CamelCaseNamingStrategy()\n\nreturn paginator.toJSON()\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Stubs in AdonisJS Generator\nDESCRIPTION: Demonstrates how to specify the template stub and enable Mustache as the template engine for file generation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfile\n  .useMustache() // use mustache as the template engine\n  .stub(join(__dirname, 'templates/controller.txt'))\n```\n\n----------------------------------------\n\nTITLE: File Validation with Additional Rules in AdonisJS Validator\nDESCRIPTION: Example of how to add additional validation rules if they were available. The code shows the structure but notes that the specific rule doesn't exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/file.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  cover_image: schema.file(\n    {\n      size: '2mb',\n      extnames: ['jpg', 'gif', 'png'],\n    },\n    [\n      // NOTE: This rule does not exists.\n      rules.dimensions({ minWidth: 100, minHeight: 200 })\n    ]\n  ),\n}\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Configuration\nDESCRIPTION: Configuration setup for Oracle database including connection parameters and migration settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm i oracledb\n```\n\nLANGUAGE: typescript\nCODE:\n```\noracle: {\n  client: 'oracledb',\n  connection: {\n    host: Env.get('ORACLE_HOST'),\n    port: Env.get('ORACLE_PORT'),\n    user: Env.get('ORACLE_USER'),\n    password: Env.get('ORACLE_PASSWORD', ''),\n    database: Env.get('ORACLE_DB_NAME'),\n  },\n  migrations: {\n    naturalSort: true,\n  },\n  healthCheck: false,\n  debug: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @debugger tag in Edge templates\nDESCRIPTION: Shows how to use the '@debugger' tag to set a breakpoint in the compiled JavaScript code. This allows debugging the output function using standard Node.js debugging methods.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/debugging.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@debugger\n<p> Hello {{ user.username }} </p>\n```\n\n----------------------------------------\n\nTITLE: Implementing delete Method for ORM Adapter\nDESCRIPTION: Skeleton implementation of the delete method responsible for removing model instances from the database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/adapter.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterContract } from '@ioc:Adonis/Lucid/Orm'\n\nclass MyAdapter implements AdapterContract {\n  public async delete(instance: BaseModel) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Negating a Boolean Flag\nDESCRIPTION: Example showing how to negate a boolean flag when running a command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnode ace greet virk --no-interactive\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data with all() Method\nDESCRIPTION: Shows how to retrieve all available values from the session store using the all() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/session.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{{ session.all() }}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable Validation Rules in AdonisJS\nDESCRIPTION: TypeScript code for creating an env.ts file to define validation rules for environment variables in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// title: env.ts\nimport Env from '@ioc:Adonis/Core/Env'\n\nexport default Env.rules({\n  HOST: Env.schema.string({ format: 'host' }),\n  PORT: Env.schema.number(),\n  APP_KEY: Env.schema.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Query with WhereIn Clause\nDESCRIPTION: Generated SQL query for unique validation with whereIn constraint.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/unique.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT string FROM users\n  WHERE email = ?\n  AND account_type IN (?, ?)\n```\n\n----------------------------------------\n\nTITLE: Basic If Conditional in Edge Template\nDESCRIPTION: Demonstrates a simple if statement in an Edge template to conditionally render user information.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/conditionals.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@if(user)\n  <p> {{ user.username }} </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Countries Migration Schema Definition\nDESCRIPTION: Database migration schema for creating the countries table with primary key and timestamps.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Countries extends BaseSchema {\n  protected tableName = 'countries'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bodyparser Configuration in TypeScript\nDESCRIPTION: Configuration for converting empty strings to null in form and multipart requests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  form: {\n    convertEmptyStringsToNull: true\n  },\n  multipart: {\n    convertEmptyStringsToNull: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Database module with st method for Postgis integration\nDESCRIPTION: Creates a preload file that extends the AdonisJS Database module with an 'st' method to access Postgis functionality. This configures the extension for PostgreSQL connections and handles read-write replicas.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/db.ts\nimport knexPostgis from 'knex-postgis'\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nDatabase.Database.macro('st', function (connectionName?: string) {\n  connectionName = connectionName || this.primaryConnectionName\n  this.manager.connect(connectionName)\n\n  const connection = this.getRawConnection(connectionName)!.connection!\n\n  /**\n   * Ensure we are dealing with a PostgreSQL connection\n   */\n  if (connection.dialectName !== 'postgres') {\n    throw new Error('The \"st\" function can only be used with PostgreSQL')\n  }\n\n  /**\n   * Configure extension if not already configured\n   */\n  if (!connection.client!['postgis']) {\n    knexPostgis(connection.client!)\n    if (connection.hasReadWriteReplicas) {\n      knexPostgis(connection.readClient!)\n    }\n  }\n\n  return connection.client!['postgis']\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Manager in TypeScript\nDESCRIPTION: Shows how to import and access the Database connection manager instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nconst manager = Database.manager\n```\n\n----------------------------------------\n\nTITLE: Applying groupOrderBy with groupLimit in AdonisJS Query Builder (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the groupOrderBy method along with groupLimit when preloading relationships in an AdonisJS query. It orders the posts by creation date in descending order and limits the result to 10 posts per country.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait Country.query().preload('posts', (query) => {\n  query\n    .groupLimit(10)\n    .groupOrderBy('posts.created_at', 'desc')\n})\n```\n\n----------------------------------------\n\nTITLE: Generating the Ace Manifest File\nDESCRIPTION: Command to index newly created commands, making them available to the Ace CLI.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace generate:manifest\n```\n\n----------------------------------------\n\nTITLE: Changing Public Directory in .adonisrc.json\nDESCRIPTION: JSON configuration to change the default public directory from 'public' to 'assets' in the .adonisrc.json file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/static-assets.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directories\": {\n    \"public\": \"assets\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Reading Encrypted Cookies in AdonisJS\nDESCRIPTION: Shows how to use encrypted cookies which cannot be decoded to plain text. Useful for storing sensitive information, these cookies are encrypted using the application's encryption module.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', async ({ response }) => {\n  response.encryptedCookie('user_id', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Making Path to Database Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the database directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.databasePath('seeders/Database.ts')\n```\n\n----------------------------------------\n\nTITLE: Nullable Number Validation in AdonisJS\nDESCRIPTION: Makes a number field nullable by chaining the nullable() method. Nullable fields must exist in the payload but can contain null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/number.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  marks: schema.number.nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with npm-check-updates in AdonisJS\nDESCRIPTION: Command to update AdonisJS packages to their latest versions using npm-check-updates.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -i\n```\n\n----------------------------------------\n\nTITLE: Manual Environment Variable Validation\nDESCRIPTION: Example of manually validating environment variables with conditional checks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst driver = process.env.SESSION_DRIVER\n\nif (!driver) {\n  throw new Error('Missing env variable \"SESSION_DRIVER\"')\n}\n\nif (!['memory', 'file', 'redis'].includes(driver)) {\n  throw new Error('Invalid value for env variable \"SESSION_DRIVER\"')  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AsyncLocalStorage Instance in TypeScript\nDESCRIPTION: Creates an instance of AsyncLocalStorage and exports it from a module to allow multiple modules to access the same storage instance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: storage.ts\nimport { AsyncLocalStorage } from 'async_hooks'\nexport const storage = new AsyncLocalStorage()\n```\n\n----------------------------------------\n\nTITLE: Setting Various Data Types as Cookie Values in AdonisJS\nDESCRIPTION: Shows how to store different data types as cookie values in AdonisJS including objects, arrays, booleans, numbers, and Date objects. Complex types are automatically JSON-stringified.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/cookies.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Object\nresponse.cookie('user', {\n  id: 1,\n  fullName: 'virk',\n})\n\n// Array\nresponse.cookie('product_ids', [1, 2, 3, 4])\n\n// Boolean\nresponse.cookie('is_logged_in', true)\n\n// Number\nresponse.cookie('visits', 10)\n\n// Data objects are converted to ISO string\nresponse.cookie('visits', new Date())\n```\n\n----------------------------------------\n\nTITLE: Importing I18n Manager in TypeScript\nDESCRIPTION: Shows how to import the singleton instance of the I18n Manager class.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n```\n\n----------------------------------------\n\nTITLE: Sharing Local Variables in Route Middleware\nDESCRIPTION: Shows how to share local variables with templates using middleware in a route definition. These locals are specific to a single instance of the View renderer.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/data-flow.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .get('/', ({ view }) => {\n    await view.render('home')\n  })\n  .middleware(({ view }, next) => {\n    view.share({\n      foo: 'bar'\n    })\n    \n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to dash-case in Edge Templates\nDESCRIPTION: Converts a string to its dash-case version where words are separated by hyphens. Optionally can capitalize the first letter of each segment.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/string-helpers.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{ string.dashCase('helloWorld') }} <!-- hello-world -->\n\n{{\n  string.dashCase('helloWorld', { capitalize: true })\n}} <!-- Hello-World -->\n```\n\n----------------------------------------\n\nTITLE: Test Environment Variables\nDESCRIPTION: Default environment variable configuration for testing environment in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nNODE_ENV=test\nASSETS_DRIVER=fake\nSESSION_DRIVER=memory\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Package in AdonisJS\nDESCRIPTION: Command to install the Redis package via npm\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/redis@7.3.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Preloaded Files in AdonisJS\nDESCRIPTION: Configuration for specifying files to be loaded during application boot. Each entry defines a file path, whether it's optional, and the environments in which it should be loaded.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preloads\": [\n    {\n      \"file\": \"./start/routes\",\n      \"optional\": false,\n      \"environment\": [\n        \"web\",\n        \"console\",\n        \"test\"\n      ]\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Argument with Options\nDESCRIPTION: Example showing how to define a string argument with description and custom name in an Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n@args.string({\n  description: 'The argument description',\n  name: 'username'\n})\npublic name: string\n```\n\n----------------------------------------\n\nTITLE: Registering Test Providers in AdonisJS\nDESCRIPTION: Configuration for specifying service providers that are loaded only during testing. These providers provide test-specific functionality.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"testProviders\": [\n    \"@japa/preset-adonis/TestsProvider\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Date Validation in AdonisJS\nDESCRIPTION: Makes a date property optional by chaining the optional method. Undefined and null values are considered optional and removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: schema.date.optional({\n    format: 'yyyy-MM-dd HH:mm:ss',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Validator String Schema with Deprecated Options\nDESCRIPTION: Example of deprecated validator configuration using inline sanitization options\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string({\n  escape: true,\n  trim: true,\n}, [\n  rules.maxLength(20)\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variable Usage Example\nDESCRIPTION: Example showing potential issues with unchecked environment variables in code.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/environment-variables.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst driver = process.env.SESSION_DRIVER\n\n// Dummy code\nawait Session.use(driver).read()\n```\n\n----------------------------------------\n\nTITLE: Defining Skills Migration Schema in TypeScript\nDESCRIPTION: Creates a migration schema for the 'skills' table with an auto-incrementing primary key 'id'.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Skills extends BaseSchema {\n  protected tableName = 'skills'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relationship Configuration in TypeScript\nDESCRIPTION: Configuration for enabling pivot table timestamps in many-to-many relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  pivotTimestamps: true\n})\npublic skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Using knex-postgis with Knex directly\nDESCRIPTION: Basic example showing how to use knex-postgis with a direct Knex connection. This demonstrates the standard pattern that will be adapted for Lucid ORM.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst knex = require('knex')\nconst knexPostgis = require('knex-postgis')\n\n// Knex connection\nconst db = knex({ client: 'postgres' })\n\n// Return value \"st\" has the API for Postgis extension\nconst st = knexPostgis(db)\n```\n\n----------------------------------------\n\nTITLE: Route List Commands\nDESCRIPTION: Shell commands for listing registered routes in different formats.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode ace list:routes\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode ace list:routes --json > routes.json\n```\n\n----------------------------------------\n\nTITLE: Creating Related Model with HasOne Query Client\nDESCRIPTION: Demonstrates how to create and persist a new related model instance using the related('profile').create() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst profile = await user\n  .related('profile')\n  .create({\n    email: 'virk@adonisjs.com',\n    avatarUrl: 'profile.jpg',\n  })\n```\n\n----------------------------------------\n\nTITLE: Selecting columns as text with Postgis\nDESCRIPTION: Demonstrates how to convert spatial data columns to their text representation using the 'asText' method from knex-postgis when querying data.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/database/using-knex-postgis-with-lucid.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nawait Database\n  .from('points')\n  .select(\n    'id',\n    Database.st().asText('geom')\n  )\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production\nDESCRIPTION: Command to build the TypeScript source to JavaScript for production deployment using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/heroku.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --production\n\n# OR use the npm script\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Variables with Multiple @set Tags\nDESCRIPTION: Shows how to update an existing variable's value using multiple @set tags in sequence.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/set.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@set('title', 'AdonisJS - A fully featured framework')\n@set('title', 'AdonisJS - About page')\n```\n\n----------------------------------------\n\nTITLE: Creating REPL Preload File\nDESCRIPTION: Command to generate a new REPL preload file for custom helpers\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/repl.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:prldfile repl\n```\n\n----------------------------------------\n\nTITLE: Incorrect Config Derivation from Runtime Code\nDESCRIPTION: Shows an example of incorrectly deriving configuration from runtime code, which is not recommended in AdonisJS applications.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/config.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst someConfig = {\n  databaseTable: User.table\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Naming Strategy with SimplePaginator\nDESCRIPTION: Shows how to register a custom naming strategy with the Database SimplePaginator.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from '@ioc:Adonis/Lucid/Database'\n\nDatabase.SimplePaginator.namingStrategy = new CamelCaseNamingStrategy()\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Promise in AdonisJS Database Query (TypeScript)\nDESCRIPTION: Shows how to execute queries using the Promise-based API. This example demonstrates both the then/catch approach and the async/await syntax.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .then((users) => {\n  })\n  .catch((error) => {\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await Database.from('users')\n```\n\n----------------------------------------\n\nTITLE: Hydrating HasMany Relationship Foreign Keys for Persistence\nDESCRIPTION: Shows how to hydrate the foreign key value on related models before persistence using hydrateForPersistance.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.id = 1\n\nconst post = new Post()\nUser.$getRelation('posts').hydrateForPersistance(user, post)\n\nconsole.log(post.userId === user.id) // true\n```\n\n----------------------------------------\n\nTITLE: Using onIn Method with Joins in AdonisJS\nDESCRIPTION: Shows how to use the onIn method to filter join results where a column value is in a specified list of values. This creates an IN condition in the join clause.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .join('user_logins', (query) => {\n    query.onIn('user_logins.country', ['India', 'US', 'UK'])\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Drive Environment Variables\nDESCRIPTION: Environment variable configuration for AdonisJS Drive disk selection.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nDRIVE_DISK=local\n```\n\n----------------------------------------\n\nTITLE: Old Edge Component Syntax\nDESCRIPTION: Example of the previous syntax for Edge components using @component directive.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@component('components/modal', { title: 'Want to continue?' })\n@endcomponent\n```\n\n----------------------------------------\n\nTITLE: Adding Custom REPL Helper Method\nDESCRIPTION: TypeScript code demonstrating how to add a custom helper method to the REPL interface. Creates a 'sayHi' method that prints a colored message to the console\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/repl.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/repl.ts\nimport Repl from '@ioc:Adonis/Addons/Repl'\n\nRepl.addMethod(\n  'sayHi',\n  (repl) => {\n    console.log(repl.colors.green('hi'))\n  },\n  { description: 'A test method that prints \"hi\"' }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Dependencies\nDESCRIPTION: Command to update AdonisJS packages to their latest alpha releases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/core@alpha @adonisjs/lucid@alpha <other-packages>\n```\n\n----------------------------------------\n\nTITLE: Running Tasks with Task Renderer in AdonisJS CLI\nDESCRIPTION: Shows how to execute all defined tasks after they have been added to the task renderer.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nawait tasksManager.run()\n```\n\n----------------------------------------\n\nTITLE: Using CSP Nonce with cspNonce Helper in Edge\nDESCRIPTION: Demonstrates how to include a nonce value in inline script tags for Content Security Policy using the cspNonce helper from @adonisjs/shield.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/all-helpers.md#2025-04-16_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n<script nonce=\"{{ cspNonce }}\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Making Path to Tmp Directory in AdonisJS\nDESCRIPTION: How to create an absolute path to a file within the tmp directory of an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/application.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nApplication.tmpPath('uploads/avatar.png')\n```\n\n----------------------------------------\n\nTITLE: Defining Basic CSS Styles\nDESCRIPTION: A simple CSS example that sets the background color of the body element. This file would be placed in the public directory and accessed directly via its filename.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/static-assets.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background: #f7f7f7;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Validation with Object Members\nDESCRIPTION: Validates an array of objects where each object must contain username and email properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/array.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  users: schema.array().members(\n    schema.object().members({\n      username: schema.string(),\n      email: schema.string(),\n    })\n  ),\n}\n\n// Valid data: [{ username: 'virk', email: 'virk@adonisjs.com' }]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Container Bindings in Config Files\nDESCRIPTION: Demonstrates an incorrect way of using container bindings in config files, which can lead to errors during the framework's boot phase.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/config.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Does not work\nimport Route from '@ioc:Adonis/Core/Route'\n\nconst someConfig = {\n  assetsUrl: Route.makeUrl('/assets')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sections in Edge Template\nDESCRIPTION: Demonstrates how to define multiple sections within a layout template. Shows the structure for body and footer sections that must match the layout's exported sections.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/layout.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@layout('layouts/main')\n\n@section('body')\n  The content for the body section\n@end\n\n@section('footer')\n  The content for the footer section\n@end\n```\n\n----------------------------------------\n\nTITLE: Getting Locale-Specific Translations\nDESCRIPTION: Shows how to get translations for specific locales.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.getTranslationsFor('en')\nI18n.getTranslationsFor('fr')\n```\n\n----------------------------------------\n\nTITLE: Configuring Controllers Location in AdonisJS\nDESCRIPTION: This JSON configuration in .adonisrc.json allows you to modify the default location of HTTP controllers. By changing the httpControllers namespace, you can store controllers in a different directory.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/controllers.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namespaces\": {\n    \"httpControllers\": \"App/Controllers\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AdonisJS Project with npm\nDESCRIPTION: This command uses npm to create a new AdonisJS TypeScript project. It initializes a new project named 'hello-world' using the latest version of the AdonisJS starter package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonis-ts-app@latest hello-world\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Package Updates\nDESCRIPTION: Commands to update AdonisJS core packages to their latest versions using npm.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/core@latest\nnpm i @adonisjs/ally@latest\nnpm i @adonisjs/view@latest\nnpm i @adonisjs/repl@latest\nnpm i @adonisjs/lucid@latest\nnpm i @adonisjs/auth@latest\n```\n\n----------------------------------------\n\nTITLE: Edge Template Comments\nDESCRIPTION: Various ways to add comments in Edge templates, including single-line, multi-line, and inline comments.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/templating-syntax.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{-- This is a comment --}}\n\n{{--\n  This is a multiline comment.\n--}}\n\nHello {{ username }} {{-- inline comment --}}\n\n{{-- surrounded by --}} Hello {{-- comments --}}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage in Static Properties\nDESCRIPTION: Example of incorrect usage of AsyncLocalStorage in static model properties, which are evaluated once during module import and can cause unexpected behavior.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpContext from '@ioc:Adonis/Core/HttpContext'\n\nexport default class User extends BaseModel {\n  public static connection = HttpContext.get()!.tenant.connection\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ace Command Aliases\nDESCRIPTION: Configuration example for creating command aliases in .adonisrc.json file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"migrate\": \"migration:run\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Argon2 Driver - Shell\nDESCRIPTION: Command to install the Argon2 hashing driver package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phc-argon2\n```\n\n----------------------------------------\n\nTITLE: Custom Driver Configuration - TypeScript\nDESCRIPTION: Configuration example for using the custom hash driver.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlist: {\n  myHashDriver: {\n    driver: 'plainText',\n  },\n  // other hashers\n}\n```\n\n----------------------------------------\n\nTITLE: Using onQuery Hook in HasManyThrough Relationship\nDESCRIPTION: Shows how to use the 'onQuery' hook to modify relationship queries when defining a HasManyThrough relationship. This example filters posts to only include published ones.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User], {\n    onQuery(query) {\n      query.where('isPublished', true)\n    }\n  })\n  public posts: HasManyThrough<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Driver Settings\nDESCRIPTION: Configuration setup for Spotify OAuth integration in AdonisJS Ally.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2021-release.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst allyConfig: AllyConfig = {\n  spotify: {\n    driver: 'spotify',\n    clientId: Env.get('SPOTIFY_CLIENT_ID'),\n    clientSecret: Env.get('SPOTIFY_CLIENT_SECRET'),\n    callbackUrl: 'http://localhost:3333/spotify/callback',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Management in Edge Templates\nDESCRIPTION: Template structure for including frontend assets using Edge templating engine with webpack encore integration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    @entryPointScripts('app')\n    @entryPointStyles('app')\n  </head>\n\n  <body>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing relationForeignKey Method\nDESCRIPTION: Implementation of the relationForeignKey method to generate foreign key names for relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public relationForeignKey(\n    relation: string,\n    model: typeof BaseModel,\n    relatedModel: typeof BaseModel\n  ) {\n    if (relation === 'belongsTo') {\n      return string.camelCase(`${relatedModel.name}_${relatedModel.primaryKey}`)\n    }\n\n    return string.camelCase(`${model.name}_${model.primaryKey}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Email Validation with Deprecated Sanitization\nDESCRIPTION: Example of deprecated email validation with sanitization options\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string([\n  rules.email({\n    sanitize: {\n      lowerCase: true,\n      removeSubaddress: true\n    }\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Incorrect Top-level Import in Ace Command\nDESCRIPTION: Example showing an incorrect approach of using top-level imports that rely on the IoC container in an Ace command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/ace.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport User from 'App/Models/User'\n\nexport default class CreateUser extends BaseCommand {\n  public static commandName = 'create:user'\n  public static settings = {\n    loadApp: true\n  }\n\n  public async run() {\n    await User.create({})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Registration\nDESCRIPTION: Shows how to register the DetectUserLocale middleware in the application kernel.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nServer.middleware.register([\n  // ... other middleware(s)\n  () => import('App/Middleware/DetectUserLocale')\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Checks in Database Config\nDESCRIPTION: Example configuration showing how to enable health checks for PostgreSQL database connection in AdonisJS.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/database/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pg: {\n    client: 'pg',\n    connection: {\n      // ... connection details\n    },\n    healthCheck: true, // 👈 enabled\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Variables in Edge Templates\nDESCRIPTION: Demonstrates how to define and use inline variables within Edge templates, including examples of scope limitations within blocks.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/data-flow.md#2025-04-16_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@set('title', 'Edge - A template engine for Node.js')\n\n<title> {{ title }} </title>\n```\n\nLANGUAGE: edge\nCODE:\n```\n@each(item in cart)\n  @set('price', item.quantity * item.unitPrice)\n  {{ price }}\n@end\n\n{{ price }} {{-- undefined --}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Files in AdonisJS\nDESCRIPTION: Configuration for specifying files that should be copied to the build folder during production build. Includes patterns for matching files and options for server reloading during development.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metaFiles\": [\n    {\n      \"pattern\": \"public/**\",\n      \"reloadServer\": false\n    },\n    {\n      \"pattern\": \"resources/views/**/*.edge\",\n      \"reloadServer\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Conditional Syntax\nDESCRIPTION: Shows Nunjucks' Python-like syntax for conditionals and ternary operations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% if happy and hungry %}\n  I am happy *and* hungry; both are true.\n{% endif %}\n\n{{ \"true\" if foo else \"false\" }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Time\nDESCRIPTION: Formatting time values using Intl.DateTimeFormat\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n\n  .locale('en')\n  .formatTime(new Date(), {\n    timeStyle: 'long'\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authorization Tags in Edge Templates\nDESCRIPTION: Demonstrates how to use the @can tag to conditionally display edit and delete links based on user permissions. The examples check if the user can edit or delete a post before showing the corresponding action links.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/can.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@can('editPost', post)\n  <a href=\"{{ route('posts.edit', [post.id]) }}\"> Edit </a>\n@end\n\n@can('deletePost', post)\n  <a href=\"{{ route('posts.delete', [post.id]) }}\"> Delete </a>\n@end\n```\n\n----------------------------------------\n\nTITLE: Customizing HasOne Relationship Serialization Name\nDESCRIPTION: Demonstrates how to customize the name used for serializing the HasOne relationship using the serializeAs option.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-one.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  @hasOne(() => Profile, {\n    serializeAs: 'userProfile'\n  })\n  public profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS Development Server\nDESCRIPTION: This command starts the AdonisJS development server with file watching enabled. It uses the 'ace' CLI tool to serve the application and automatically restart on file changes.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --watch\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for MongoDB Auth Provider\nDESCRIPTION: Shows the expected directory structure after creating the MongoDB authentication provider files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/custom-user-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nproviders\n└── MongoDbAuthProvider\n    └── index.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Adonis CWD Environment Variable\nDESCRIPTION: Sets the ADONIS_ACE_CWD environment variable to the current directory for proper test execution.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.ADONIS_ACE_CWD = join(__dirname)\n```\n\n----------------------------------------\n\nTITLE: AdonisRC Preloads Configuration\nDESCRIPTION: JSON configuration for preloading route files in the .adonisrc.json file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preloads\": [\n    \"./start/kernel\",\n    \"add-path-to-your-routes-file\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Truncation in AdonisJS Edge Templates\nDESCRIPTION: Uses the truncate helper to shorten a string to a specified number of characters. By default, it respects word boundaries and adds an ellipsis at the end.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/truncate.md#2025-04-16_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  truncate(\n    'This is a very long sentence that i would like to be shortened',\n    18\n  )\n}}\n\n<!-- Output: This is a very long... -->\n```\n\n----------------------------------------\n\nTITLE: Installing BCrypt Driver - Shell\nDESCRIPTION: Command to install the BCrypt hashing driver package.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/security/hashing.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phc-bcrypt\n```\n\n----------------------------------------\n\nTITLE: Plural Rules Implementation in YAML\nDESCRIPTION: Shows how to implement plural rules for different quantity scenarios using YAML format.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncart_summary:\n  \"You have {itemsCount, plural,\n    =0 {no items}\n    one {1 item}\n    other {# items}\n  } in your cart\"\n```\n\n----------------------------------------\n\nTITLE: Updated URL Validation with Normalization\nDESCRIPTION: New approach for URL validation using separate normalization rules\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string([\n  rules.url(),\n  rules.normalizeUrl({\n    normalizeProtocol: true,\n    stripWWW: true,\n    forceHttps: true,\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Database Connection Health Check Configuration\nDESCRIPTION: Configuration example for enabling health checks on a PostgreSQL database connection in the database config file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/health-check.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pg: {\n    client: 'pg',\n    connection: {\n      // ... connection details\n    },\n    healthCheck: true, // 👈 enabled\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Validation with Deprecated Options\nDESCRIPTION: Example of deprecated URL validation with protocol and WWW options\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string([\n  rules.url({\n    stripWWW: true,\n    ensureProtocol: true\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of whereRaw Method in AdonisJS\nDESCRIPTION: Shows an insecure pattern to avoid when using whereRaw. This example directly embeds user input in the query string, which can lead to SQL injection vulnerabilities.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-builder.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .whereRaw(`username = ${username}`)\n```\n\n----------------------------------------\n\nTITLE: Basic Limiter Configuration Setup\nDESCRIPTION: Configuration setup for the rate limiter using Redis as the default store.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/rate-limiting.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { limiterConfig } from '@adonisjs/limiter/build/config'\n\nexport default limiterConfig({\n  default: 'redis',\n  stores: {\n    redis: {\n      client: 'redis',\n      connectionName: 'local'\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Select Ordinal Format Implementation\nDESCRIPTION: Shows how to use select ordinal format for handling ordinal numbers in translations.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nanniversary_greeting:\n  \"It's my {years, selectordinal,\n    one {#st}\n    two {#nd}\n    few {#rd}\n    other {#th}\n  } anniversary\"\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Row with Query Builder in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the first method with query builder to fetch a single row, adding a LIMIT 1 clause to the query.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/crud.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query()\n  .where('countryCode', 'IN')\n  .orWhereNull('countryCode')\n  .first() // 👈 Adds `LIMIT 1` clause\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Token Provider\nDESCRIPTION: Configuration for database-based API token provider in config/auth file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  tokenProvider: {\n    driver: 'database',\n    table: 'api_tokens',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Route Module Using ESM in AdonisJS\nDESCRIPTION: Example showing the new ESM import syntax for accessing IoC container bindings in AdonisJS v5, requiring the @ioc prefix.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/introducing-adonisjs-v5-preview.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Route from '@ioc:Adonis/Core/Route'\n```\n\n----------------------------------------\n\nTITLE: Assigning Naming Strategy to Model\nDESCRIPTION: Shows how to assign a custom naming strategy to a specific model class.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static namingStrategy = new CamelCaseNamingStrategy()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Drive Config in AdonisJS\nDESCRIPTION: Steps to update the Drive config file to use the new driveConfig method for type inference.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { driveConfig } from '@adonisjs/core/build/config'\n\nexport default driveConfig({\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Validator Rules for String Escaping\nDESCRIPTION: New approach for string validation using the escape rule instead of options\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string([\n  rules.escape()\n])\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS REPL Package\nDESCRIPTION: Commands for installing the @adonisjs/repl package using either npm or yarn package managers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/repl\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @adonisjs/repl\n```\n\n----------------------------------------\n\nTITLE: Using AsyncLocalStorage in a Main Application File\nDESCRIPTION: Demonstrates how to use the storage.run method to execute async functions with an initial state that can be accessed throughout the function's execution path.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/async-local-storage.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: main.ts\n// highlight-start\nimport { storage } from './storage'\n// highlight-end\nimport ModuleA from './ModuleA'\n\nasync function run(id) {\n  // highlight-start\n  const state = { id }\n\n  return storage.run(state, async () => {\n    await (new ModuleA()).run()\n  })\n  // highlight-end\n}\n\nrun(1)\nrun(2)\nrun(3)\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application in Docker\nDESCRIPTION: The third stage of the Dockerfile that builds the AdonisJS application for production using the Ace CLI command.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/dockerizing-adonis.md#2025-04-16_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM dependencies AS build\nRUN node ace build --production\n```\n\n----------------------------------------\n\nTITLE: Error Reporter Interface Definition\nDESCRIPTION: TypeScript interface definition for implementing custom error reporters\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/error-reporters.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ErrorReporterContract<Messages extends any = any> {\n  hasErrors: boolean\n\n  report(\n    pointer: string,\n    rule: string,\n    message: string,\n    arrayExpressionPointer?: string,\n    args?: any\n  ): void\n\n  toError(): any\n\n  toJSON(): Messages\n}\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production\nDESCRIPTION: Commands to build TypeScript source code to JavaScript for production deployment using ace CLI or npm script\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/cleavr.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --production\n\n# OR use the npm script\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Validation for Redis\nDESCRIPTION: TypeScript code for validating Redis-related environment variables using AdonisJS Env module\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/redis.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Env.rules({\n  // ...existing rules\n  REDIS_CONNECTION: Env.schema.enum(['local'] as const),\n  REDIS_HOST: Env.schema.string({ format: 'host' }),\n  REDIS_PORT: Env.schema.number(),\n  REDIS_PASSWORD: Env.schema.string.optional(),\n})\n```\n\n----------------------------------------\n\nTITLE: Updating NODE_ENV Schema in TypeScript Configuration\nDESCRIPTION: Updates the environment enum values to replace 'testing' with 'test' in the env.ts configuration file\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Env.rules({\n  NODE_ENV: Env.schema.enum([\n    'development',\n    'production',\n    'test'\n  ] as const)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Command to Stay Alive in AdonisJS\nDESCRIPTION: TypeScript code snippet showing how to set the stayAlive flag for a command to prevent it from closing after execution.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyCommand extends BaseCommand {\n  public static settings = {\n    stayAlive: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Validation in AdonisJS\nDESCRIPTION: Validates a property to be a valid date object or a string representing a date. Values are casted to an instance of luxon.DateTime.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\n\n{\n  published_at: schema.date()\n}\n```\n\n----------------------------------------\n\nTITLE: Stateless OAuth Redirect in AdonisJS Ally (TypeScript)\nDESCRIPTION: Demonstrates how to perform a stateless OAuth redirect by disabling CSRF verification using the stateless method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/auth/social.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/github/redirect', async ({ ally }) => {\n  return ally.use('github').stateless().redirect()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic UUID Validation in AdonisJS TypeScript\nDESCRIPTION: Demonstrates how to validate a string field as a UUID using AdonisJS validator. The example shows importing the schema and rules from the validator module and applying UUID validation to an 'id' field.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/uuid.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  id: schema.string([\n    rules.uuid()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production\nDESCRIPTION: Commands to build an AdonisJS TypeScript project for production deployment. This process compiles TypeScript code into JavaScript in the build folder.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/digial-ocean.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --production\n\n# OR use the npm script\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Checking Read-Write Replicas in AdonisJS\nDESCRIPTION: Shows how to check if the connection is using read-write replicas using the hasReadWriteReplicas property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/connection.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.hasReadWriteReplicas\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Query Builder\nDESCRIPTION: Shows how to create a query builder for a specific Lucid model to execute queries that return model instances.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from 'App/Models/User'\n\nconst query = client.modelQuery(User)\n\nconst user = await query.first()\nconsole.log(user instanceof User) // true\n```\n\n----------------------------------------\n\nTITLE: Defining Drive Disk Mappings in AdonisJS Contracts\nDESCRIPTION: Example of manually defining Drive disk mappings in the contracts file for TypeScript type safety.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@ioc:Adonis/Core/Drive' {\n  interface DisksList {\n    local: {\n      config: LocalDriverConfig\n      implementation: LocalDriverContract\n    }\n    s3: {\n      config: S3DriverConfig\n      implementation: S3DriverContract\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @unless Conditional in Edge Templates\nDESCRIPTION: Shows how to use the @unless statement, which acts as an inverse conditional check. This example displays a verification message if an account is not active.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/conditionals.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@unless(account.isActive)\n  <p> Please verify the email address to activate your account </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Basic usage of 'after' rule with date schema in AdonisJS validator\nDESCRIPTION: Shows how to apply the 'after' validation rule to a date schema field. This example validates that the checkin_date is at least 2 days after the current date.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/after.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  checkin_date: schema.date({}, [\n    rules.after(2, 'days')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Strings with RegExp Instance in AdonisJS\nDESCRIPTION: Shows an alternative approach to regex validation using a RegExp constructor instance instead of a pattern literal. Achieves the same alphanumeric validation for username field.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/regex.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.regex(new RegExp('^[a-zA-Z0-9]+$'))\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over Objects with @each in Edge.js Templates\nDESCRIPTION: An example showing how to loop through an object's key-value pairs using the @each tag. This pattern allows access to both the property values and property names during iteration.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/each.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@each((amount, ingredient) in {\n  ketchup: '5 tbsp',\n  mustard: '1 tbsp',\n  pickle: '0 tbsp'\n})\n  Use {{ amount }} of {{ ingredient }}\n@end\n```\n\n----------------------------------------\n\nTITLE: Using the 'before' Rule with Date Schema in AdonisJS Validator (TypeScript)\nDESCRIPTION: Demonstrates how to validate a date field to ensure it's before a specified duration offset (2 days from now). This rule can only be used with the date schema type.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/before.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  joining_date: schema.date({}, [\n    rules.before(2, 'days')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Session Commit Operation in TypeScript\nDESCRIPTION: Shows how to commit session changes manually\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/session.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait session.commit()\n```\n\n----------------------------------------\n\nTITLE: Custom Field Name Password Confirmation in TypeScript using AdonisJS\nDESCRIPTION: Shows how to customize the confirmation field name by passing a parameter to the confirmed() rule. Useful when not following snake_case naming convention.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/rules/confirmed.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  password: schema.string([\n    rules.confirmed('passwordConfirmation')\n  ])\n}\n\n/**\n Valid data: {\n    password: 'secret',\n    passwordConfirmation: 'secret'\n }\n */\n```\n\n----------------------------------------\n\nTITLE: Creating Raw SQL References\nDESCRIPTION: Shows how to create raw SQL references that can be used within other queries but cannot be executed standalone.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.from(\n  client.raw('select ip_address from user_logins')\n)\n```\n\n----------------------------------------\n\nTITLE: Nullable Boolean Schema Validation\nDESCRIPTION: Implementation of nullable boolean validation where the field must exist but can contain null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/boolean.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accepted: schema.boolean.nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Entire Template State in Edge Templates\nDESCRIPTION: Example showing how to use the inspect helper to examine the entire state of the current view. This is useful for debugging the complete context available to the template.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/inspect.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninspect(state)\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional String Validation in AdonisJS\nDESCRIPTION: Combines both nullable and optional validation, allowing the field to be undefined or contain null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/string.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  title: schema.string.nullableAndOptional()\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Date Validation in AdonisJS\nDESCRIPTION: Makes a date property nullable using the nullable method. The property must exist in the payload but can contain null values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/date.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: schema.date.nullable({\n    format: 'yyyy-MM-dd HH:mm:ss',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Optional File Validation in AdonisJS Validator\nDESCRIPTION: Makes the file property optional by using the optional method. Undefined and null values are considered optional and removed from the validated object.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/file.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  cover_image: schema.file.optional({\n    size: '2mb',\n    extnames: ['jpg', 'gif', 'png'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing relationLocalKey Method\nDESCRIPTION: Implementation of the relationLocalKey method to determine local keys for relationships.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/naming-strategy.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\nimport { SnakeCaseNamingStrategy, BaseModel } from '@ioc:Adonis/Lucid/Orm'\n\nclass CamelCaseNamingStrategy extends SnakeCaseNamingStrategy {\n  public relationLocalKey(\n    relation: string,\n    model: typeof BaseModel,\n    relatedModel: typeof BaseModel\n  ) {\n    if (relation === 'belongsTo') {\n      return relatedModel.primaryKey\n    }\n\n    return model.primaryKey\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Validator Rules for String Trimming\nDESCRIPTION: New approach for string validation using the trim rule instead of options\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: schema.string([\n  rules.trim()\n])\n```\n\n----------------------------------------\n\nTITLE: Accepting Any Object Members in AdonisJS Schema Validation\nDESCRIPTION: Shows how to define an object that accepts any properties without validating specific types using the .anyMembers() method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/object.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: schema.object().anyMembers()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CSRF Configuration in Shield\nDESCRIPTION: Updates the CSRF configuration to use 'test' instead of 'testing' for the environment check\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const csrf: ShieldConfig['csrf'] = {\n  enabled: Env.get('NODE_ENV') !== 'test'\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Template Translation Usage\nDESCRIPTION: Shows how to use translations in Edge templates using the t helper method.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n<h1> {{ t('messages.title') }} </h1>\n```\n\n----------------------------------------\n\nTITLE: Installing Package Updates with npm-check-updates\nDESCRIPTION: Command to interactively update npm packages using npm-check-updates tool\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/april-2022-release.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -i\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages for enum and enumSet Validation in AdonisJS\nDESCRIPTION: Shows how to customize error messages for enum and enumSet validation failures. The validation choices are available as options.choices in the error message template.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/validator/schema/enum.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'enum': 'The value must be one of {{ options.choices }}',\n  'enumSet': 'The values must be one of {{ options.choices }}',\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Fallback Locale\nDESCRIPTION: Shows how to get the fallback locale for a given locale based on config settings.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.getFallbackLocale('ca')\n```\n\n----------------------------------------\n\nTITLE: Structuring Menu JSON Configuration for Documentation Navigation\nDESCRIPTION: Demonstrates the structure of the menu.json file used to configure the documentation navigation, including groups, categories, and individual document entries with their permalinks and content paths.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/README.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Database\",\n  \"categories\": [\n    {\n      \"name\": \"root\",\n      \"docs\": [\n        {\n          \"title\": \"Connection\",\n          \"permalink\": \"database/connection\",\n          \"contentPath\": \"database/connection.md\",\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preload File using Ace CLI\nDESCRIPTION: Command to create a validator preload file using the AdonisJS Ace CLI tool\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/validator/custom-rules.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:prldfile validator\n```\n\n----------------------------------------\n\nTITLE: Raw String Template Rendering\nDESCRIPTION: Shows how to render raw string templates directly\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait View.renderRaw(\n  `\n  <p> Hello {{ username }} </p>\n`,\n  {\n    username: 'virk',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Database Tables\nDESCRIPTION: Shows how to get a list of all tables in the connected database.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst tables = await client.getAllTables()\nconsole.log(tables)\n```\n\n----------------------------------------\n\nTITLE: Creating File Structure for Edge Partials\nDESCRIPTION: Directory structure setup for organizing Edge template partials showing the folder hierarchy and required files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/partials.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n├── views\n│   ├── partials\n│   │   ├── footer.edge\n│   │   ├── header.edge\n│   │   └── sidebar.edge\n│   └── home.edge\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for AdonisJS Documentation Project\nDESCRIPTION: Lists the required environment variables needed to start the development server or create a production build for the AdonisJS documentation project.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPORT=3333\nHOST=0.0.0.0\nNODE_ENV=development\nAPP_KEY=iPbHJ0Wdr8_hA4DLTj83lKedQP9I5rJO\nCACHE_VIEWS=false\nDEBUG_DOCS=true\nALGOLIA_API_KEY=\nCOPY_REDIRECTS_FILE=false\nREPOSITORY_URL=https://github.com/adonisjs/docs.adonisjs.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with get() Method\nDESCRIPTION: Shows how to retrieve a value from the session store using the get() method with dot notation for nested values.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/session.md#2025-04-16_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{ session.get('user.id') }}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Collation in MySQL\nDESCRIPTION: Sets the collation for a database table in MySQL. This method is only available within createTable calls and is ignored for other databases.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/table-builder.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.collate('utf8_unicode_ci')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with get() Method\nDESCRIPTION: Demonstrates providing a default value as the second parameter to the get() method. This ensures a fallback value is displayed when the requested flash message doesn't exist.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/flash-messages.md#2025-04-16_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ flashMessages.get('username', 'Enter username') }}\n```\n\n----------------------------------------\n\nTITLE: Excerpt Generation with Incomplete Words\nDESCRIPTION: Shows how to use the excerpt helper with the completeWords option set to false, allowing words to be chopped at the exact character limit.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/globals/excerpt.md#2025-04-16_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  excerpt(\n    '<p> Hello, this is a dummy <strong> post </strong> </p>',\n    20,\n    { completeWords: false }\n  )\n}}\n\n<!-- Output: Hello, this is a du... -->\n```\n\n----------------------------------------\n\nTITLE: Dropping All Database Views\nDESCRIPTION: Shows how to drop all views in the database, with optional schema specification for Postgres and Redshift.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/query-client.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dropAllViews()\n\n// specify schemas ( for Postgres and Redshift )\nawait client.dropAllViews(['public'])\n```\n\n----------------------------------------\n\nTITLE: Defining Model Adapter Options in Lucid ORM\nDESCRIPTION: Shows the structure of model adapter options used in various model methods. These options allow specifying transaction clients, database connections, and profilers.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/base-model.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst modelOptions = {\n  client: await Database.transaction(),\n  connection: 'pg',\n  profiler: profiler\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP Request to Markdown Compilation Flow\nDESCRIPTION: Describes the process flow for handling HTTP requests and compiling markdown files on demand without a build process.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--> New HTTP request --> Finding markdown file for the url --> Compile and serve it\n```\n\n----------------------------------------\n\nTITLE: Translation Files Example\nDESCRIPTION: Examples of translation files in JSON and YAML formats for different locales.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shared\": {\n    \"required\": \"Ce champ est requis\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nwelcome:\n  content: >\n    <h2> Welcome to AdonisJS </h2>\n    <p> Click <a href=\"{ url }\"> here </a> to verify your account </p>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"A fully featured web framework for Node.js.\"\n}\n```\n\n----------------------------------------\n\nTITLE: I18n Configuration\nDESCRIPTION: Configuration options for I18n including translation format, default locale, supported locales, and loaders.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport Application from '@ioc:Adonis/Core/Application'\nimport { I18nConfig } from '@ioc:Adonis/Addons/I18n'\n\nconst i18nConfig: I18nConfig = {\n  translationsFormat: 'icu',\n  defaultLocale: 'en',\n\n  // Optional\n  supportedLocales: [],\n  fallbackLocales: {},\n\n  provideValidatorMessages: true,\n  loaders: {\n    fs: {\n      enabled: true,\n      location: Application.resourcesPath('lang'),\n    },\n  },\n}\n\nexport default i18nConfig\n```\n\n----------------------------------------\n\nTITLE: Building the Production Version of AdonisJS Documentation\nDESCRIPTION: Command to create the production build of the documentation which writes the output to the public directory for deployment on static file hosting services.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of Multiple @set Tags\nDESCRIPTION: Demonstrates how multiple @set tags are compiled to JavaScript, showing both variable declaration and reassignment.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/set.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = 'AdonisJS - A fully featured framework';\ntitle = 'AdonisJS - About page';\n```\n\n----------------------------------------\n\nTITLE: Registering Ace Providers in AdonisJS\nDESCRIPTION: Configuration for specifying service providers that are required by Ace commands. These providers are loaded only when running Ace commands.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/fundamentals/adonisrc-file.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aceProviders\": [\n    \"@adonisjs/repl\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Locale Matching Example\nDESCRIPTION: Shows how to find the best matching locale for a user's language preference.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nconst userLanguage = 'en-US'\nconst bestMatch = I18n.getSupportedLocale(userLanguage)\n\nif (bestMatch) {\n  I18n.locale(bestMatch).formatMessage()\n} else {\n  I18n.locale(I18n.defaultLocale).formatMessage()\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers\nDESCRIPTION: Using Intl.NumberFormat to format numeric values\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n\n  .locale('en')\n  .formatNumber(123456.789, {\n    maximumSignificantDigits: 3\n  })\n```\n\n----------------------------------------\n\nTITLE: Database Loader Configuration\nDESCRIPTION: Configuration object for enabling the database loader and specifying the translations table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/i18n.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  loaders: {\n    fs: {},\n    db: {\n      enabled: true,\n      table: 'translations'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Suite Setup Configuration\nDESCRIPTION: Configuration for test suite setup, showing how to start HTTP server for functional tests.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const configureSuite: Config['configureSuite'] = (suite) => {\n  if (suite.name === 'functional') {\n    suite.setup(() => TestUtils.httpServer().start())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Implementation in AdonisJS\nDESCRIPTION: Demonstrates how to implement HTTP Basic Authentication using auth middleware.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/august-2020-release.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nRoute\n  .get('posts', async ({ auth }) => {\n    return `You are logged in as ${auth.user!.email}`\n  })\n  .middleware('auth:basic')\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Validation\nDESCRIPTION: TypeScript code demonstrating how to validate required environment variables for mail drivers\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Env.rules({\n  MAILGUN_API_KEY: Env.schema.string(),\n  MAILGUN_DOMAIN: Env.schema.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Disk-Specific View Rendering\nDESCRIPTION: Examples of rendering views from specific named disks\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/rendering.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// renders themes/material/user.edge\nview.render('material::user')\n\n// renders themes/elegant/user.edge\nview.render('elegant::user')\n```\n\n----------------------------------------\n\nTITLE: Initializing I18n Instance in TypeScript\nDESCRIPTION: Creating an instance of the I18n class using the locale method\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.locale('en') // instanceof I18n\n```\n\n----------------------------------------\n\nTITLE: Getting Cached Translations\nDESCRIPTION: Returns object of all cached translations merged from multiple loaders.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/i18n/i18n-manager.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport I18n from '@ioc:Adonis/Addons/I18n'\n\nI18n.getTranslations()\n```\n\n----------------------------------------\n\nTITLE: Database Reference and Raw Queries\nDESCRIPTION: Methods for creating column references and raw SQL queries.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/database/database.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .where('users.id', '=', Database.ref('user_logins.user_id'))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nDatabase\n  .from('users')\n  .select('*')\n  .select(\n    Database\n      .raw('select \"ip_address\" from \"user_logins\" where \"users.id\" = \"user_logins.user_id\" limit 1')\n      .wrap('(', ')')\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Token Provider\nDESCRIPTION: Configuration for Redis-based API token provider in config/auth file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/december-2020-release.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{\n  tokenProvider: {\n    driver: 'redis',\n    connection: 'local',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Partial Include\nDESCRIPTION: Example of using @includeIf directive to conditionally include a partial based on a condition.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/views/partials.md#2025-04-16_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@includeIf(post.comments, 'partials/comments')\n```\n\n----------------------------------------\n\nTITLE: Route Module Imports\nDESCRIPTION: Example of importing route definitions from multiple module files.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/routing.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'App/Modules/User/routes'\nimport 'App/Modules/Cart/routes'\nimport 'App/Modules/Product/routes'\n```\n\n----------------------------------------\n\nTITLE: Test Bootstrap Configuration\nDESCRIPTION: Bootstrap configuration file showing setup for plugins, reporters, and hooks in the testing environment.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/testing/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const plugins: Config['plugins'] = []\nexport const reporters: Config['reporters'] = []\nexport const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {\n  setup: [],\n  teardown: [],\n}\nexport const configureSuite: Config['configureSuite'] = (suite) => {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Attributes in AdonisJS\nDESCRIPTION: Configuration example showing how to customize the HTML attributes for script and style tags in the assets manager configuration file. Demonstrates setting defer attribute for scripts and empty attributes for styles.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/views/tags/entry-points.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const assets: AssetsManagerConfig = {\n  driver: 'encore',\n  publicPath: Application.publicPath('assets'),\n\n  script: {\n    // highlight-start\n    attributes: {\n      defer: true,\n    },\n    // highlight-end\n  },\n\n  style: {\n    // highlight-start\n    attributes: {},\n    // highlight-end\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent in Lucid Model Factory Relationships\nDESCRIPTION: Example of using the parent property in Lucid model factory relationships to infer attributes from the parent model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nawait TenantFactory\n  .with('users', 1, (user) => {\n    user\n      .with('posts', 2, (post) => {\n        post.merge({ tenantId: post.parent.tenantId })\n      })\n  })\n  .create()\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration Update in TypeScript\nDESCRIPTION: Renaming list property to guards in auth configuration file.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  guard: 'web',\n  guards: {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hash Config in AdonisJS\nDESCRIPTION: Steps to update the Hash config file to use the new hashConfig method for type inference.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/may-2022-release.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { hashConfig } from '@adonisjs/core/build/config'\n\nexport default hashConfig({\n})\n```\n\n----------------------------------------\n\nTITLE: Using Helpers Module\nDESCRIPTION: Example of using the built-in helpers module for string manipulation.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { string } from '@ioc:Adonis/Core/Helpers'\n\nstring.camelCase('hello-world') // helloWorld\n```\n\n----------------------------------------\n\nTITLE: Updating BaseCommand Import for AdonisJS Commands\nDESCRIPTION: Diff showing the change in import statement for BaseCommand from @adonisjs/ace to @adonisjs/core/build/standalone.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/october-2020-release.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- import { BaseCommand } from '@adonisjs/ace'\n+ import { BaseCommand } from '@adonisjs/core/build/standalone'\n```\n\n----------------------------------------\n\nTITLE: Digital Ocean Default Database Environment Variables\nDESCRIPTION: Example of default database environment variables that Digital Ocean injects into your application. These are generic variables that need to be remapped to be more specific to your application.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/cookbooks/deployment/digial-ocean.md#2025-04-16_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nHOSTNAME=\nPORT=\nUSERNAME=\nPASSWORD=\nDATABASE=\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Registration\nDESCRIPTION: Migration example for updating middleware registration to use type-safe import statements.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/releases/out-of-preview.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nServer.middleware.register([\n  () => import('@ioc:Adonis/Core/BodyParser'),\n  () => import('@ioc:Adonis/Addons/Shield'),\n  () => import('App/Middleware/SilentAuth')\n])\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Mail Package\nDESCRIPTION: Command to install the AdonisJS mail package via npm\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/digging-deeper/mailer.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/mail@8.2.1\n```\n\n----------------------------------------\n\nTITLE: Users Migration Schema Definition\nDESCRIPTION: Database migration schema for creating the users table with foreign key reference to countries table.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/models/relationships.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport BaseSchema from '@ioc:Adonis/Lucid/Schema'\n\nexport default class Users extends BaseSchema {\n  protected tableName = 'users'\n\n  public async up () {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table\n        .integer('country_id')\n        .unsigned()\n        .references('countries.id')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Model Reference in HasManyThrough Relationship\nDESCRIPTION: Example showing how to access the reference to the parent model that defines the HasManyThrough relationship using the 'model' property.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User])\n  public posts: HasManyThrough<typeof Post>\n}\n\nCountry.$getRelation('posts').model // Country\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Information in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to access information about the current route including pattern, handler, middleware, and name properties.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/guides/http/request.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nRoute.get('/', ({ request }) => {\n  /**\n   * The route pattern\n   */\n  console.log(request.route.pattern)\n\n  /**\n   * The handler that handles the route request\n   */\n  console.log(request.route.handler)\n\n  /**\n   * Middleware attached to the route\n   */\n  console.log(request.route.middleware)\n\n  /**\n   * Route name (exists if the route is named)\n   */\n  console.log(request.route.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HasManyThrough Relationship Name Property\nDESCRIPTION: Example showing how to access the 'relationName' property of a HasManyThrough relationship, which returns the property name defined on the parent model.\nSOURCE: https://github.com/adonisjs/v5-docs/blob/develop/content/reference/orm/relations/has-many-through.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Country extends BaseModel {\n  @hasManyThrough([() => Post, () => User])\n  public posts: HasManyThrough<typeof Post>\n}\n\nCountry.$getRelation('posts').relationName // 'posts'\n```"
  }
]